#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _911;
float _3581;
float _3582;
float _3583;
float _3584;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _256 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _260 = _256.z;
    float _265 = (_256.x * 2.0) + (-1.0);
    float _267 = (_256.y * 2.0) + (-1.0);
    float _268 = dot(vec2(_265, _267), vec2(_265, _267));
    float _3593 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _274 = sqrt(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))));
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_PF_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _289 = _287.x;
    float _294 = cbMtdParam._m0[22u].x + _256.w;
    float _298 = gl_FragCoord.x * 0.125;
    float _300 = gl_FragCoord.y * 0.125;
    float _311 = fma(_274, _205 * NORMAL.x, fma(_267, _212 * TANGENT.x, (_198 * _190) * _265));
    float _314 = fma(_274, _205 * NORMAL.y, fma(_267, _212 * TANGENT.y, (_198 * _191) * _265));
    float _317 = fma(_274, _205 * NORMAL.z, fma(_267, _212 * TANGENT.z, (_198 * _192) * _265));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    float _322 = _321 * _311;
    float _323 = _321 * _314;
    float _324 = _321 * _317;
    float _3604 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _325 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _3615 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _3626 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3637 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3648 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3659 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _330 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_298, _300)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _350 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _392 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _402 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _392);
    float _403 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _392);
    float _404 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _392);
    float _408 = inversesqrt(dot(vec3(_402, _403, _404), vec3(_402, _403, _404)));
    float _409 = _402 * _408;
    float _410 = _403 * _408;
    float _411 = _404 * _408;
    vec4 _413 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_298, _300));
    float _415 = _413.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _592 = sqrt(((_402 * _402) + (_403 * _403)) + (_404 * _404));
        float _598 = (cbMatDynParam._m0[5u].x * _592) + cbMatDynParam._m0[5u].y;
        float _3670 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        float _599 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _603 = (cbMatDynParam._m0[5u].z * _592) + cbMatDynParam._m0[5u].w;
        float _3681 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) - _599)) + _599) < ((_415 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _427 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _428 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _448 = fma(_324, cbSceneParam._m0[5u].z, fma(_323, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _322));
    float _451 = fma(_324, cbSceneParam._m0[6u].z, fma(_323, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _322));
    float _454 = fma(_324, cbSceneParam._m0[7u].z, fma(_323, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _322));
    uint _467 = uint(roundEven(NORMAL.w)) * 13u;
    uint _469 = _467 + 9u;
    uint _470 = _469 + uint(cbMatDynParam._m0[0u].w);
    float _476 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) * cbInstanceData._m0[_470].x;
    float _477 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * cbInstanceData._m0[_470].y;
    float _478 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * cbInstanceData._m0[_470].z;
    float _3692 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _482 = 1.0 - _330;
    float _483 = _479 * _482;
    float _484 = _480 * _482;
    float _485 = _481 * _482;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _330;
    float _491 = (_480 + (-0.039999999105930328369140625)) * _330;
    float _492 = (_481 + (-0.039999999105930328369140625)) * _330;
    float _493 = _490 + 0.039999999105930328369140625;
    float _495 = _491 + 0.039999999105930328369140625;
    float _496 = _492 + 0.039999999105930328369140625;
    vec4 _505 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _427, cbSceneParam._m0[86u].y * _428));
    float _509 = ((isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * TEXCOORD_5.w) * _505.x;
    float _510 = dot(vec3(_322, _323, _324), vec3(_409, _410, _411));
    float _513 = _510 * 2.0;
    float _517 = (_513 * _322) - _409;
    float _518 = (_513 * _323) - _410;
    float _519 = (_513 * _324) - _411;
    float _523 = abs(dot(vec3(_409, _410, _411), vec3(_322, _323, _324)));
    float _3725 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _525 = sqrt(_325);
    float _538 = exp2((_525 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_525 * 3.0));
    float _544 = (1.0 - _538) * ((_525 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _545 = _538 * _525;
    float _573 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _910;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _635 = fma(_581, cbModelParam._m0[26u].z, fma(_577, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _573));
        float _639 = fma(_581, cbModelParam._m0[27u].z, fma(_577, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _573));
        float _643 = fma(_581, cbModelParam._m0[28u].z, fma(_577, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _573));
        float _668 = _573 + _322;
        float _669 = _577 + _323;
        float _670 = _581 + _324;
        float _680 = fma(_670, cbModelParam._m0[26u].z, fma(_669, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _668)) - _635;
        float _681 = fma(_670, cbModelParam._m0[27u].z, fma(_669, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _668)) - _639;
        float _682 = fma(_670, cbModelParam._m0[28u].z, fma(_669, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _668)) - _643;
        float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
        float _699 = ((_686 * _680) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_635 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_686 * _681) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_639 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_686 * _682) / cbModelParam._m0[34u].z) + ((((((_643 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        float _738 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_704.x + (-0.5));
        float _740 = _738 * (_704.y + (-0.5));
        float _741 = _738 * (_704.z + (-0.5));
        float _748 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_711.x + (-0.5));
        float _750 = _748 * (_711.y + (-0.5));
        float _751 = _748 * (_711.z + (-0.5));
        float _758 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_718.x + (-0.5));
        float _760 = _758 * (_718.y + (-0.5));
        float _761 = _758 * (_718.z + (-0.5));
        float _768 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_725.x + (-0.5));
        float _770 = _768 * (_725.y + (-0.5));
        float _771 = _768 * (_725.z + (-0.5));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = _739 * 0.5;
        float _776 = _749 * 0.5;
        float _777 = _759 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _792 = (dot(vec3(_322, _323, _324), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _802 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3773 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_804 + 1.0))) + _809) * _772;
        float _819 = _740 * 0.5;
        float _820 = _750 * 0.5;
        float _821 = _760 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_322, _323, _324), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3806 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_846 + 1.0))) + _851) * _773;
        float _861 = _741 * 0.5;
        float _862 = _751 * 0.5;
        float _863 = _761 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _877 = (dot(vec3(_322, _323, _324), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _886 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3839 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_888 + 1.0))) + _893) * _774;
        _910 = _741;
        _912 = _740;
        _913 = _739;
        _914 = _751;
        _915 = _750;
        _916 = _749;
        _917 = _761;
        _918 = _760;
        _919 = _759;
        _920 = _774;
        _921 = _773;
        _922 = _772;
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
    }
    else
    {
        _910 = _911;
        _912 = _911;
        _913 = _911;
        _914 = _911;
        _915 = _911;
        _916 = _911;
        _917 = _911;
        _918 = _911;
        _919 = _911;
        _920 = _911;
        _921 = _911;
        _922 = _911;
        _923 = 0.0;
        _924 = 0.0;
        _925 = 0.0;
    }
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _950 = fma(_581, cbModelParam._m0[30u].z, fma(_577, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _573));
        float _954 = fma(_581, cbModelParam._m0[31u].z, fma(_577, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _573));
        float _958 = fma(_581, cbModelParam._m0[32u].z, fma(_577, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _573));
        float _981 = _573 + _322;
        float _982 = _577 + _323;
        float _983 = _581 + _324;
        float _993 = fma(_983, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _981)) - _950;
        float _994 = fma(_983, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _981)) - _954;
        float _995 = fma(_983, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _981)) - _958;
        float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
        float _1012 = ((_999 * _993) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_950 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_999 * _994) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_954 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_999 * _995) / cbModelParam._m0[35u].z) + ((((((_958 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        float _1049 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1016.x + (-0.5));
        float _1051 = _1049 * (_1016.y + (-0.5));
        float _1052 = _1049 * (_1016.z + (-0.5));
        float _1059 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1023.x + (-0.5));
        float _1061 = _1059 * (_1023.y + (-0.5));
        float _1062 = _1059 * (_1023.z + (-0.5));
        float _1069 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1030.x + (-0.5));
        float _1071 = _1069 * (_1030.y + (-0.5));
        float _1072 = _1069 * (_1030.z + (-0.5));
        float _1079 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1037.x + (-0.5));
        float _1081 = _1079 * (_1037.y + (-0.5));
        float _1082 = _1079 * (_1037.z + (-0.5));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = _1050 * 0.5;
        float _1087 = _1060 * 0.5;
        float _1088 = _1070 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_322, _323, _324), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3902 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1113 + 1.0))) + _1118) * _1083;
        float _1128 = _1051 * 0.5;
        float _1129 = _1061 * 0.5;
        float _1130 = _1071 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_322, _323, _324), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3935 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1155 + 1.0))) + _1160) * _1084;
        float _1170 = _1052 * 0.5;
        float _1171 = _1062 * 0.5;
        float _1172 = _1072 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_322, _323, _324), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3968 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1197 + 1.0))) + _1202) * _1085;
        _1219 = _1052;
        _1220 = _1051;
        _1221 = _1050;
        _1222 = _1062;
        _1223 = _1061;
        _1224 = _1060;
        _1225 = _1072;
        _1226 = _1071;
        _1227 = _1070;
        _1228 = _1085;
        _1229 = _1084;
        _1230 = _1083;
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
    }
    else
    {
        _1219 = _911;
        _1220 = _911;
        _1221 = _911;
        _1222 = _911;
        _1223 = _911;
        _1224 = _911;
        _1225 = _911;
        _1226 = _911;
        _1227 = _911;
        _1228 = _911;
        _1229 = _911;
        _1230 = _911;
        _1231 = 0.0;
        _1232 = 0.0;
        _1233 = 0.0;
    }
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _923)) + _923;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _924)) + _924;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _925)) + _925;
    float _1266 = fma(_1245, cbSceneParam._m0[89u].z, fma(_1244, cbSceneParam._m0[89u].y, _1243 * cbSceneParam._m0[89u].x));
    float _1269 = fma(_1245, cbSceneParam._m0[90u].z, fma(_1244, cbSceneParam._m0[90u].y, _1243 * cbSceneParam._m0[90u].x));
    float _1272 = fma(_1245, cbSceneParam._m0[91u].z, fma(_1244, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1243));
    float _1287 = _517 * 0.5;
    float _1288 = _518 * 0.5;
    float _1289 = _519 * 0.5;
    float _1290 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1293 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1296 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1330;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1303 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_910, _914, _917, _920));
        float _1307 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_912, _915, _918, _921));
        float _1311 = dot(vec4(_1287, _1288, _1289, 1.0), vec4(_913, _916, _919, _922));
        float _1318 = dot(vec4(cbModelParam._m0[39u]), vec4(_1287, _1288, _1289, 1.0));
        _1330 = dot(vec3(isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1330 = 1.0;
    }
    float _1341;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1332 = dot(vec4(cbModelParam._m0[40u]), vec4(_1287, _1288, _1289, 1.0));
        _1341 = dot(vec3(isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1332) ? 0.0 : (isnan(0.0) ? _1332 : max(0.0, _1332))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1341 = 1.0;
    }
    float _1345 = (_1341 * cbModelParam._m0[1u].x) + (_1330 * (1.0 - cbModelParam._m0[1u].x));
    float _1355 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _325);
    float _1356 = isnan(_1355) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1355 : min(cbModelParam._m0[25u].z, _1355));
    float _1438;
    float _1440;
    float _1442;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1405 = fma(_581, cbModelParam._m0[13u].z, fma(_577, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _573)) + cbModelParam._m0[13u].w;
        float _1409 = fma(_581, cbModelParam._m0[14u].z, fma(_577, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _573)) + cbModelParam._m0[14u].w;
        float _1413 = fma(_581, cbModelParam._m0[15u].z, fma(_577, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _573)) + cbModelParam._m0[15u].w;
        float _1416 = fma(_519, cbModelParam._m0[13u].z, fma(_518, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _517));
        float _1419 = fma(_519, cbModelParam._m0[14u].z, fma(_518, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _517));
        float _1422 = fma(_519, cbModelParam._m0[15u].z, fma(_518, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _517));
        float _1450;
        if (_1416 > 0.0)
        {
            _1450 = abs((1.0 - _1405) / _1416);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1405 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1450 = frontier_phi_19_17_ladder;
        }
        float _1624;
        if (_1419 > 0.0)
        {
            _1624 = abs((1.0 - _1409) / _1419);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1409 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1624 = frontier_phi_28_24_ladder;
        }
        float _1920;
        if (_1422 > 0.0)
        {
            _1920 = abs((1.0 - _1413) / _1422);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1413 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1920 = frontier_phi_40_35_ladder;
        }
        float _1922 = isnan(_1624) ? _1450 : (isnan(_1450) ? _1624 : min(_1450, _1624));
        float _1923 = isnan(_1920) ? _1922 : (isnan(_1922) ? _1920 : min(_1922, _1920));
        float _1927 = (_1923 * _1416) + _1405;
        float _1928 = (_1923 * _1419) + _1409;
        float _1929 = (_1923 * _1422) + _1413;
        float _1930 = _1923 * 9.9999997473787516355514526367188e-05;
        float _1932 = (-1.0) - _1930;
        float _1934 = _1930 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1929 > _1934) || ((_1929 < _1932) || ((_1928 > _1934) || ((_1928 < _1932) || ((_1927 < _1932) || (_1927 > _1934))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1929, cbModelParam._m0[9u].z, fma(_1928, cbModelParam._m0[9u].y, _1927 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1929, cbModelParam._m0[10u].z, fma(_1928, cbModelParam._m0[10u].y, _1927 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1929, cbModelParam._m0[11u].z, fma(_1928, cbModelParam._m0[11u].y, _1927 * cbModelParam._m0[11u].x))), _1356);
            frontier_phi_18_40_ladder = _2074.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2074.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2074.x * cbModelParam._m0[1u].y;
        }
        _1438 = frontier_phi_18_40_ladder_2;
        _1440 = frontier_phi_18_40_ladder_1;
        _1442 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_517, _518, _519), _1356);
        _1438 = _1426.x * cbModelParam._m0[1u].y;
        _1440 = _1426.y * cbModelParam._m0[1u].y;
        _1442 = _1426.z * cbModelParam._m0[1u].y;
    }
    float _1446 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _325);
    float _1447 = isnan(_1446) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1446 : min(cbModelParam._m0[25u].w, _1446));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1503 = fma(_581, cbModelParam._m0[21u].z, fma(_577, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _573)) + cbModelParam._m0[21u].w;
        float _1507 = fma(_581, cbModelParam._m0[22u].z, fma(_577, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _573)) + cbModelParam._m0[22u].w;
        float _1511 = fma(_581, cbModelParam._m0[23u].z, fma(_577, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _573)) + cbModelParam._m0[23u].w;
        float _1514 = fma(_519, cbModelParam._m0[21u].z, fma(_518, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _517));
        float _1517 = fma(_519, cbModelParam._m0[22u].z, fma(_518, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _517));
        float _1520 = fma(_519, cbModelParam._m0[23u].z, fma(_518, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _517));
        float _1629;
        if (_1514 > 0.0)
        {
            _1629 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1629 = frontier_phi_30_26_ladder;
        }
        float _1947;
        if (_1517 > 0.0)
        {
            _1947 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1947 = frontier_phi_42_37_ladder;
        }
        float _2285;
        if (_1520 > 0.0)
        {
            _2285 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2285 = frontier_phi_52_49_ladder;
        }
        float _2287 = isnan(_1947) ? _1629 : (isnan(_1629) ? _1947 : min(_1629, _1947));
        float _2288 = isnan(_2285) ? _2287 : (isnan(_2287) ? _2285 : min(_2287, _2285));
        float _2292 = (_2288 * _1514) + _1503;
        float _2293 = (_2288 * _1517) + _1507;
        float _2294 = (_2288 * _1520) + _1511;
        float _2295 = _2288 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2295;
        float _2298 = _2295 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2294 > _2298) || ((_2294 < _2296) || ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 < _2296) || (_2292 > _2298))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2416 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2294, cbModelParam._m0[17u].z, fma(_2293, cbModelParam._m0[17u].y, _2292 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2294, cbModelParam._m0[18u].z, fma(_2293, cbModelParam._m0[18u].y, _2292 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2294, cbModelParam._m0[19u].z, fma(_2293, cbModelParam._m0[19u].y, _2292 * cbModelParam._m0[19u].x))), _1447);
            frontier_phi_27_52_ladder = _2416.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2416.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2416.x * cbModelParam._m0[1u].z;
        }
        _1539 = frontier_phi_27_52_ladder_2;
        _1541 = frontier_phi_27_52_ladder_1;
        _1543 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_517, _518, _519), _1447);
        _1539 = _1523.x * cbModelParam._m0[1u].z;
        _1541 = _1523.y * cbModelParam._m0[1u].z;
        _1543 = _1523.z * cbModelParam._m0[1u].z;
    }
    float _1556 = (((_544 * _493) + _545) * _509) * ((cbModelParam._m0[1u].w * (_1539 - _1438)) + _1438);
    float _1558 = (((_544 * _495) + _545) * _509) * ((cbModelParam._m0[1u].w * (_1541 - _1440)) + _1440);
    float _1560 = (((_544 * _496) + _545) * _509) * ((cbModelParam._m0[1u].w * (_1543 - _1442)) + _1442);
    float _1563 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, _1556 * cbSceneParam._m0[91u].x));
    float _1603 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1607 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1611 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1615 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1616 = _1603 / _1615;
    float _1617 = _1607 / _1615;
    float _1618 = _1611 / _1615;
    float _1765;
    float _1766;
    float _1767;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1645 = ((uint(_1618 > cbSceneParam._m0[59u].y) + uint(_1618 > cbSceneParam._m0[59u].x)) + uint(_1618 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1646 = _1645 + 43u;
        uint _1654 = _1645 + 44u;
        uint _1662 = _1645 + 45u;
        uint _1670 = _1645 + 46u;
        float _1681 = fma(_1615, cbSceneParam._m0[_1646].w, fma(_1611, cbSceneParam._m0[_1646].z, fma(_1607, cbSceneParam._m0[_1646].y, _1603 * cbSceneParam._m0[_1646].x)));
        float _1685 = fma(_1615, cbSceneParam._m0[_1654].w, fma(_1611, cbSceneParam._m0[_1654].z, fma(_1607, cbSceneParam._m0[_1654].y, _1603 * cbSceneParam._m0[_1654].x)));
        float _1693 = fma(_1615, cbSceneParam._m0[_1670].w, fma(_1611, cbSceneParam._m0[_1670].z, fma(_1607, cbSceneParam._m0[_1670].y, _1603 * cbSceneParam._m0[_1670].x)));
        float _1698 = cbSceneParam._m0[33u].z * _1693;
        float _1700 = cbSceneParam._m0[33u].w * _1693;
        float _1703 = fma(_1615, cbSceneParam._m0[_1662].w, fma(_1611, cbSceneParam._m0[_1662].z, fma(_1607, cbSceneParam._m0[_1662].y, _1603 * cbSceneParam._m0[_1662].x))) / _1693;
        float _1751 = (cbSceneParam._m0[33u].x - sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618))) * cbSceneParam._m0[33u].y;
        float _4094 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1758 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1698 + _1681) / _1693, (_1700 + _1685) / _1693), _1703), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1700 + _1681) / _1693, (_1685 - _1698) / _1693), _1703), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1681 - _1698) / _1693, (_1685 - _1700) / _1693), _1703), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1681 - _1700) / _1693, (_1698 + _1685) / _1693), _1703), 0.0)).x), vec4(0.25)));
        _1765 = 1.0 - (_1758 * cbSceneParam._m0[34u].x);
        _1766 = 1.0 - (_1758 * cbSceneParam._m0[34u].y);
        _1767 = 1.0 - (_1758 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1765 = 1.0;
        _1766 = 1.0;
        _1767 = 1.0;
    }
    float _1831;
    float _1833;
    float _1835;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1819 = fma(_1615, cbSceneParam._m0[63u].w, fma(_1611, cbSceneParam._m0[63u].z, fma(_1607, cbSceneParam._m0[63u].y, _1603 * cbSceneParam._m0[63u].x)));
        float _1820 = fma(_1615, cbSceneParam._m0[60u].w, fma(_1611, cbSceneParam._m0[60u].z, fma(_1607, cbSceneParam._m0[60u].y, _1603 * cbSceneParam._m0[60u].x))) / _1819;
        float _1821 = fma(_1615, cbSceneParam._m0[61u].w, fma(_1611, cbSceneParam._m0[61u].z, fma(_1607, cbSceneParam._m0[61u].y, _1603 * cbSceneParam._m0[61u].x))) / _1819;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1820 >= cbSceneParam._m0[64u].x) && (_1821 >= cbSceneParam._m0[64u].y)) && (_1820 <= cbSceneParam._m0[64u].z)) && (_1821 <= cbSceneParam._m0[64u].w))
        {
            float _1960 = fma(_1615, cbSceneParam._m0[62u].w, fma(_1611, cbSceneParam._m0[62u].z, fma(_1607, cbSceneParam._m0[62u].y, _1603 * cbSceneParam._m0[62u].x))) / _1819;
            float _1964 = isnan(cbSceneParam._m0[41u].w) ? _1960 : (isnan(_1960) ? cbSceneParam._m0[41u].w : max(_1960, cbSceneParam._m0[41u].w));
            float _2007 = (cbSceneParam._m0[33u].x - sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618))) * cbSceneParam._m0[33u].y;
            float _4110 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
            float _2014 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1820, cbSceneParam._m0[33u].w + _1821), _1964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1820, _1821 - cbSceneParam._m0[33u].z), _1964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1820 - cbSceneParam._m0[33u].z, _1821 - cbSceneParam._m0[33u].w), _1964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1820 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1821), _1964), 0.0)).x), vec4(0.25)));
            float _2018 = 1.0 - (_2014 * cbSceneParam._m0[34u].x);
            float _2019 = 1.0 - (_2014 * cbSceneParam._m0[34u].y);
            float _2020 = 1.0 - (_2014 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2020) ? _1767 : (isnan(_1767) ? _2020 : min(_1767, _2020));
            frontier_phi_39_38_ladder_1 = isnan(_2019) ? _1766 : (isnan(_1766) ? _2019 : min(_1766, _2019));
            frontier_phi_39_38_ladder_2 = isnan(_2018) ? _1765 : (isnan(_1765) ? _2018 : min(_1765, _2018));
        }
        else
        {
            frontier_phi_39_38_ladder = _1767;
            frontier_phi_39_38_ladder_1 = _1766;
            frontier_phi_39_38_ladder_2 = _1765;
        }
        _1831 = frontier_phi_39_38_ladder_2;
        _1833 = frontier_phi_39_38_ladder_1;
        _1835 = frontier_phi_39_38_ladder;
    }
    else
    {
        _1831 = _1765;
        _1833 = _1766;
        _1835 = _1767;
    }
    uvec4 _1840 = floatBitsToUint(cbInstanceData._m0[_467 + 5u]);
    uint _1842 = _1840.x * 14u;
    uint _1843 = _1842 + 13u;
    float _1850 = _509 + (-1.0);
    float _1855 = (cbLight._m0[_1843].x * _1850) + 1.0;
    float _1856 = (cbLight._m0[_1843].y * _1850) + 1.0;
    float _1857 = (cbLight._m0[_1843].z * _1850) + 1.0;
    float _1858 = (cbLight._m0[_1843].w * _1850) + 1.0;
    uint _1859 = _1842 + 5u;
    float _1865 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
    uint _1869 = _1842 + 4u;
    float _1879 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
    uint _1883 = _1842 | 1u;
    float _1894 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_322, _323, _324));
    float _1897 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_322, _323, _324));
    float _4146 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _4157 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1902 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 0.3183098733425140380859375;
    float _1904 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.3183098733425140380859375;
    float _1911 = ((cbLight._m0[_1859].x * _1865) * _1904) + (((cbLight._m0[_1869].x * _1831) * _1879) * _1902);
    float _1912 = ((_1865 * cbLight._m0[_1859].y) * _1904) + (((cbLight._m0[_1869].y * _1833) * _1879) * _1902);
    float _1913 = ((_1865 * cbLight._m0[_1859].z) * _1904) + (((cbLight._m0[_1869].z * _1835) * _1879) * _1902);
    uvec4 _1917 = floatBitsToUint(cbLight._m0[_1842 + 12u]);
    bool _1919 = _1917.x == 0u;
    float _2021;
    float _2023;
    float _2025;
    if (_1919)
    {
        _2021 = _1911;
        _2023 = _1912;
        _2025 = _1913;
    }
    else
    {
        uint _2029 = _1842 + 6u;
        float _2045 = (dot(vec3(cbLight._m0[_1842 + 2u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _2046 = _2045 * _2045;
        float _4168 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2047 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2048 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2021 = (((cbLight._m0[_2029].x * 0.3183098733425140380859375) * _2047) * _2048) + _1911;
        _2023 = (((cbLight._m0[_2029].y * 0.3183098733425140380859375) * _2047) * _2048) + _1912;
        _2025 = (((cbLight._m0[_2029].z * 0.3183098733425140380859375) * _2047) * _2048) + _1913;
    }
    bool _2028 = _1917.y == 0u;
    float _2083;
    float _2085;
    float _2087;
    if (_2028)
    {
        _2083 = _2021;
        _2085 = _2023;
        _2087 = _2025;
    }
    else
    {
        uint _2256 = _1842 + 7u;
        float _2272 = (dot(vec3(cbLight._m0[_1842 + 3u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _2273 = _2272 * _2272;
        float _4184 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2274 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2275 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2083 = (((cbLight._m0[_2256].x * 0.3183098733425140380859375) * _2274) * _2275) + _2021;
        _2085 = (((cbLight._m0[_2256].y * 0.3183098733425140380859375) * _2274) * _2275) + _2023;
        _2087 = (((cbLight._m0[_2256].z * 0.3183098733425140380859375) * _2274) * _2275) + _2025;
    }
    uint _2090 = _1842 + 8u;
    float _2103 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1842].w)) * _325) * 0.949999988079071044921875);
    float _2104 = _2103 * _2103;
    float _2105 = cbLight._m0[_1842].x + _409;
    float _2106 = cbLight._m0[_1842].y + _410;
    float _2107 = cbLight._m0[_1842].z + _411;
    float _2111 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
    float _2112 = _2111 * _2105;
    float _2113 = _2111 * _2106;
    float _2114 = _2111 * _2107;
    float _2115 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1842].xyz));
    float _4200 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _4211 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _2119 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2120 = dot(vec3(_322, _323, _324), vec3(_2112, _2113, _2114));
    float _4222 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2124 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_2112, _2113, _2114));
    float _4233 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2128 = _2104 * _2104;
    float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
    float _2140 = exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0);
    float _2141 = 0.959999978542327880859375 - _490;
    float _2143 = 0.959999978542327880859375 - _491;
    float _2144 = 0.959999978542327880859375 - _492;
    float _2151 = 1.0 - _2104;
    float _2162 = (0.5 / (((_2119 * ((_2118 * _2151) + _2104)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2151) + _2104) * _2118))) * _2118;
    float _4244 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2164 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
    uint _2178 = _1842 + 9u;
    float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _325) * 0.949999988079071044921875);
    float _2190 = _2189 * _2189;
    float _2191 = cbLight._m0[_1883].x + _409;
    float _2192 = cbLight._m0[_1883].y + _410;
    float _2193 = cbLight._m0[_1883].z + _411;
    float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
    float _2198 = _2197 * _2191;
    float _2199 = _2197 * _2192;
    float _2200 = _2197 * _2193;
    float _2201 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1883].xyz));
    float _4255 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2205 = dot(vec3(_322, _323, _324), vec3(_2198, _2199, _2200));
    float _4266 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2209 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_2198, _2199, _2200));
    float _4277 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2213 = _2190 * _2190;
    float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
    float _2224 = exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0);
    float _2231 = 1.0 - _2190;
    float _2241 = (0.5 / (((_2119 * ((_2204 * _2231) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2231) + _2190) * _2204))) * _2204;
    float _4288 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2243 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
    float _2253 = (((((_2224 * _2141) + _493) * cbLight._m0[_2178].x) * _2243) * _1865) + ((((cbLight._m0[_2090].x * _1831) * ((_2140 * _2141) + _493)) * _2164) * _1879);
    float _2254 = (((((_2224 * _2143) + _495) * cbLight._m0[_2178].y) * _2243) * _1865) + ((((cbLight._m0[_2090].y * _1833) * ((_2140 * _2143) + _495)) * _2164) * _1879);
    float _2255 = (((((_2224 * _2144) + _496) * cbLight._m0[_2178].z) * _2243) * _1865) + ((((cbLight._m0[_2090].z * _1835) * ((_2140 * _2144) + _496)) * _2164) * _1879);
    float _2311;
    float _2313;
    float _2315;
    if (_1919)
    {
        _2311 = _2253;
        _2313 = _2254;
        _2315 = _2255;
    }
    else
    {
        uint _2317 = _1842 + 2u;
        uint _2321 = _1842 + 10u;
        float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2317].w)) * _325) * 0.949999988079071044921875);
        float _2336 = _2335 * _2335;
        float _2337 = cbLight._m0[_2317].x + _409;
        float _2338 = cbLight._m0[_2317].y + _410;
        float _2339 = cbLight._m0[_2317].z + _411;
        float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
        float _2344 = _2343 * _2337;
        float _2345 = _2343 * _2338;
        float _2346 = _2343 * _2339;
        float _2347 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_2317].xyz));
        float _4299 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2351 = dot(vec3(_322, _323, _324), vec3(_2344, _2345, _2346));
        float _4310 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2355 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_2344, _2345, _2346));
        float _4321 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2359 = _2336 * _2336;
        float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
        float _2370 = exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0);
        float _2377 = 1.0 - _2336;
        float _2387 = (0.5 / (((_2119 * ((_2350 * _2377) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2377) + _2336) * _2350))) * _2350;
        float _4332 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2389 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
        float _2390 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2311 = (((((_2370 * _2141) + _493) * cbLight._m0[_2321].x) * _2389) * _2390) + _2253;
        _2313 = (((((_2370 * _2143) + _495) * cbLight._m0[_2321].y) * _2389) * _2390) + _2254;
        _2315 = (((((_2370 * _2144) + _496) * cbLight._m0[_2321].z) * _2389) * _2390) + _2255;
    }
    float _2421;
    float _2423;
    float _2425;
    if (_2028)
    {
        _2421 = _2311;
        _2423 = _2313;
        _2425 = _2315;
    }
    else
    {
        uint _2432 = _1842 + 3u;
        uint _2436 = _1842 + 11u;
        float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _325) * 0.949999988079071044921875);
        float _2451 = _2450 * _2450;
        float _2452 = cbLight._m0[_2432].x + _409;
        float _2453 = cbLight._m0[_2432].y + _410;
        float _2454 = cbLight._m0[_2432].z + _411;
        float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
        float _2459 = _2458 * _2452;
        float _2460 = _2458 * _2453;
        float _2461 = _2458 * _2454;
        float _2462 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_2432].xyz));
        float _4348 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2466 = dot(vec3(_322, _323, _324), vec3(_2459, _2460, _2461));
        float _4359 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2470 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2459, _2460, _2461));
        float _4370 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2474 = _2451 * _2451;
        float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
        float _2485 = exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0);
        float _2492 = 1.0 - _2451;
        float _2502 = (0.5 / (((_2119 * ((_2465 * _2492) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2492) + _2451) * _2465))) * _2465;
        float _4381 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2504 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
        float _2505 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2421 = (((((_2485 * _2141) + _493) * cbLight._m0[_2436].x) * _2504) * _2505) + _2311;
        _2423 = (((((_2485 * _2143) + _495) * cbLight._m0[_2436].y) * _2504) * _2505) + _2313;
        _2425 = (((((_2485 * _2144) + _496) * cbLight._m0[_2436].z) * _2504) * _2505) + _2315;
    }
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    if (_1840.y == 0u)
    {
        uvec4 _2526 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2527 = _2526.x;
        uint _2538 = uint((float(_2526.y) * floor(float(uint(cbSceneParam._m0[85u].y * _428) / _2527))) + floor(float(uint(cbSceneParam._m0[85u].x * _427) / _2527)));
        float _2548 = (log2(_1618 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2549 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        uint _2552 = uint(isnan(14.0) ? _2549 : (isnan(_2549) ? 14.0 : min(_2549, 14.0)));
        uvec4 _2557 = texelFetch(g_lightClusterGridBuffer, int(((_2552 << 2u) + (_2538 << 6u)) >> 2u));
        uint _2558 = _2557.x;
        uint _2559 = _2526.z;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        if (((((1u << ((_2559 >> 4u) & 15u)) + 4294967295u) & _2558) == 0u) || ((_2559 & 240u) == 0u))
        {
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
        }
        else
        {
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            float _2796 = 0.0;
            uint _2797 = 0u;
            uint _2806;
            bool _2807;
            for (;;)
            {
                _2806 = texelFetch(g_lightClassification, int((((_2552 << 5u) + (_2538 << 9u)) + (_2797 << 2u)) >> 2u)).x;
                _2807 = _2806 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2807)
                {
                    frontier_phi_73_pred = _2796;
                    frontier_phi_73_pred_1 = _2795;
                    frontier_phi_73_pred_2 = _2794;
                    frontier_phi_73_pred_3 = _2793;
                    frontier_phi_73_pred_4 = _2792;
                    frontier_phi_73_pred_5 = _2791;
                }
                else
                {
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    uint _2942;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2794;
                    _2940 = _2795;
                    _2941 = _2796;
                    _2942 = _2806;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    for (;;)
                    {
                        uint _2946 = uint(findLSB(_2942)) + (_2797 << 5u);
                        uint _2943 = (_2942 + 4294967295u) & _2942;
                        uint _2948 = _2946 * 48u;
                        vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 3u)).x));
                        uint _2968 = (_2946 * 48u) + 4u;
                        vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2968)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 3u)).x));
                        uint _2987 = (_2946 * 48u) + 8u;
                        vec3 _2998 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x));
                        float _3002 = _2962.x - _1616;
                        float _3003 = _2962.y - _1617;
                        float _3004 = _2962.z - _1618;
                        float _3005 = dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004));
                        float _3008 = inversesqrt(_3005);
                        float _3009 = _3008 * _3002;
                        float _3010 = _3008 * _3003;
                        float _3011 = _3008 * _3004;
                        float _3012 = dot(vec3(_448, _451, _454), vec3(_3009, _3010, _3011));
                        float _3017 = 1.0 - (_3005 * _2962.w);
                        float _4407 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3018 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3019 = sqrt(_3005) * _2981.w;
                        float _3022 = 1.39999997615814208984375 / (_3019 + 1.39999997615814208984375);
                        float _3023 = _3022 * _3022;
                        float _3026 = ((1.0 - _3023) * _3012) + _3023;
                        float _3029 = _3019 * _3019;
                        float _3033 = ((isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0))) * _3018) / ((_3029 * 0.699999988079071044921875) + 1.0);
                        float _3037 = (-0.0) - _1616;
                        float _3038 = (-0.0) - _1617;
                        float _3039 = (-0.0) - _1618;
                        float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
                        float _3044 = _3043 * _3037;
                        float _3045 = _3043 * _3038;
                        float _3046 = _3043 * _3039;
                        float _3053 = exp2(log2(1.0 / ((_3029 * 3.5) + 5.0)) * 0.25);
                        float _3054 = 1.0 - _525;
                        float _3061 = sqrt(1.0 - ((1.0 - (_3054 * _3054)) * (1.0 - (_3053 * _3053))));
                        float _3062 = _3061 * _3061;
                        float _3063 = _3062 * _3062;
                        float _3064 = _3044 + _3009;
                        float _3065 = _3045 + _3010;
                        float _3066 = _3046 + _3011;
                        float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
                        float _3074 = dot(vec3(_448, _451, _454), vec3(_3044, _3045, _3046));
                        float _4423 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3077 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3078 = dot(vec3(_448, _451, _454), vec3(_3070 * _3064, _3070 * _3065, _3070 * _3066));
                        float _4434 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3081 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3085 = ((_3081 * _3081) * (_3063 + (-1.0))) + 1.0;
                        float _3086 = _3022 * _3062;
                        float _3087 = _3086 * _3086;
                        float _3090 = ((1.0 - _3087) * _3012) + _3087;
                        float _4445 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3091 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3092 = 1.0 - _3062;
                        float _3102 = (0.5 / (((_3091 * ((_3077 * _3092) + _3062)) + 9.9999999392252902907785028219223e-09) + (((_3091 * _3092) + _3062) * _3077))) * _3091;
                        float _4456 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3113 = (((_3063 * 3.1415927410125732421875) * (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) / ((_3085 * _3085) * ((_3029 * 2.1991131305694580078125) + 3.141590118408203125))) * _3018;
                        _2866 = (_3033 * _2981.x) + _2939;
                        _2867 = (_3033 * _2981.y) + _2940;
                        _2868 = (_3033 * _2981.z) + _2941;
                        _2863 = (_3113 * _2998.x) + _2936;
                        _2864 = (_3113 * _2998.y) + _2937;
                        _2865 = (_3113 * _2998.z) + _2938;
                        if (_2943 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2867;
                            _2941 = _2868;
                            _2942 = _2943;
                        }
                    }
                    frontier_phi_73_pred = _2868;
                    frontier_phi_73_pred_1 = _2867;
                    frontier_phi_73_pred_2 = _2866;
                    frontier_phi_73_pred_3 = _2865;
                    frontier_phi_73_pred_4 = _2864;
                    frontier_phi_73_pred_5 = _2863;
                }
                _2649 = frontier_phi_73_pred;
                _2647 = frontier_phi_73_pred_1;
                _2645 = frontier_phi_73_pred_2;
                _2643 = frontier_phi_73_pred_3;
                _2641 = frontier_phi_73_pred_4;
                _2639 = frontier_phi_73_pred_5;
                uint _2798 = _2797 + 1u;
                if (_2798 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2791 = _2639;
                    _2792 = _2641;
                    _2793 = _2643;
                    _2794 = _2645;
                    _2795 = _2647;
                    _2796 = _2649;
                    _2797 = _2798;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
        }
        uvec4 _2652 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2653 = _2652.z;
        uint _2655 = (_2653 >> 8u) & 15u;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        if (((4294967295u << _2655) & _2558) == 0u)
        {
            _2759 = _2638;
            _2761 = _2640;
            _2763 = _2642;
            _2765 = _2644;
            _2767 = _2646;
            _2769 = _2648;
        }
        else
        {
            float _2784 = inversesqrt(dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618)));
            float _2785 = _2784 * _1616;
            float _2786 = _2784 * _1617;
            float _2787 = _2784 * _1618;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2655 < ((_2653 >> 12u) & 15u))
            {
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2770;
                float _2919 = _2638;
                float _2920 = _2640;
                float _2921 = _2642;
                float _2922 = _2644;
                float _2923 = _2646;
                float _2924 = _2648;
                uint _2925 = _2655;
                uint _2934;
                bool _2935;
                for (;;)
                {
                    _2934 = texelFetch(g_lightClassification, int((((_2552 << 5u) + (_2538 << 9u)) + (_2925 << 2u)) >> 2u)).x;
                    _2935 = _2934 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2935)
                    {
                        frontier_phi_84_pred = _2924;
                        frontier_phi_84_pred_1 = _2923;
                        frontier_phi_84_pred_2 = _2922;
                        frontier_phi_84_pred_3 = _2921;
                        frontier_phi_84_pred_4 = _2920;
                        frontier_phi_84_pred_5 = _2919;
                    }
                    else
                    {
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3140 = _2919;
                        float _3141 = _2920;
                        float _3142 = _2921;
                        float _3143 = _2922;
                        float _3144 = _2923;
                        float _3145 = _2924;
                        uint _3146 = _2934;
                        uint _3147;
                        vec4 _3172;
                        float _3173;
                        vec4 _3188;
                        vec3 _3200;
                        vec4 _3216;
                        vec4 _3232;
                        float _3279;
                        bool _3280;
                        for (;;)
                        {
                            uint _3157 = ((_2925 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3146));
                            _3147 = (_3146 + 4294967295u) & _3146;
                            uint _3159 = _3157 * 40u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            _3173 = _3172.w;
                            uint _3175 = (_3157 * 40u) + 4u;
                            _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3190 = (_3157 * 40u) + 8u;
                            _3200 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x));
                            uint _3203 = (_3157 * 40u) + 16u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3219 = (_3157 * 40u) + 20u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3235 = (_3157 * 40u) + 24u;
                            vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            uint _3254 = (_3157 * 40u) + 28u;
                            vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            _3279 = fma(_1618, _3267.z, fma(_1617, _3267.y, _3267.x * _1616)) + _3267.w;
                            _3280 = !((fma(_1618, _3248.z, fma(_1617, _3248.y, _3248.x * _1616)) + _3248.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3280)
                            {
                                float _3307 = _3172.x - _1616;
                                float _3308 = _3172.y - _1617;
                                float _3309 = _3172.z - _1618;
                                float _3310 = dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309));
                                float _3313 = inversesqrt(_3310);
                                float _3314 = _3313 * _3307;
                                float _3315 = _3313 * _3308;
                                float _3316 = _3313 * _3309;
                                float _3320 = 1.0 - (_3310 / (_3173 * _3173));
                                float _4467 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3321 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3325 = sqrt(_3310) * _3188.w;
                                float _3327 = 1.39999997615814208984375 / (_3325 + 1.39999997615814208984375);
                                float _3328 = _3327 * _3327;
                                float _3331 = ((1.0 - _3328) * dot(vec3(_3314, _3315, _3316), vec3(_448, _451, _454))) + _3328;
                                float _3334 = _3325 * _3325;
                                float _3338 = (fma(_1618, _3216.z, fma(_1617, _3216.y, _3216.x * _1616)) + _3216.w) / _3279;
                                float _3339 = (fma(_1618, _3232.z, fma(_1617, _3232.y, _3232.x * _1616)) + _3232.w) / _3279;
                                float _3343 = 1.0 - dot(vec2(_3338, _3339), vec2(_3338, _3339));
                                float _4483 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3345 = _3344 * (((isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0))) * _3321) / ((_3334 * 0.699999988079071044921875) + 1.0));
                                float _3357 = exp2(log2(1.0 / ((_3334 * 3.5) + 5.0)) * 0.25);
                                float _3358 = 1.0 - _525;
                                float _3365 = sqrt(1.0 - ((1.0 - (_3358 * _3358)) * (1.0 - (_3357 * _3357))));
                                float _3366 = _3365 * _3365;
                                float _3367 = _3366 * _3366;
                                float _3368 = _3314 - _2785;
                                float _3369 = _3315 - _2786;
                                float _3370 = _3316 - _2787;
                                float _3374 = inversesqrt(dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370)));
                                float _3378 = dot(vec3(_448, _451, _454), vec3((-0.0) - _2785, (-0.0) - _2786, (-0.0) - _2787));
                                float _4494 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3381 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3382 = dot(vec3(_448, _451, _454), vec3(_3374 * _3368, _3374 * _3369, _3374 * _3370));
                                float _4505 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3385 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3389 = ((_3385 * _3385) * (_3367 + (-1.0))) + 1.0;
                                float _3390 = _3327 * _3366;
                                float _3391 = _3390 * _3390;
                                float _3397 = ((1.0 - _3391) * dot(vec3(_448, _451, _454), vec3(_3314, _3315, _3316))) + _3391;
                                float _4516 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3398 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3399 = 1.0 - _3366;
                                float _3409 = (0.5 / (((_3398 * ((_3381 * _3399) + _3366)) + 9.9999999392252902907785028219223e-09) + (((_3398 * _3399) + _3366) * _3381))) * _3398;
                                float _4527 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3419 = (_3344 * _3321) * (((_3367 * 3.1415927410125732421875) * (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) / ((_3389 * _3389) * ((_3334 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3345 * _3188.z;
                                frontier_phi_90_pred_1 = _3345 * _3188.y;
                                frontier_phi_90_pred_2 = _3345 * _3188.x;
                                frontier_phi_90_pred_3 = _3419 * _3200.z;
                                frontier_phi_90_pred_4 = _3419 * _3200.y;
                                frontier_phi_90_pred_5 = _3419 * _3200.x;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3428 = frontier_phi_90_pred;
                            _3427 = frontier_phi_90_pred_1;
                            _3426 = frontier_phi_90_pred_2;
                            _3425 = frontier_phi_90_pred_3;
                            _3424 = frontier_phi_90_pred_4;
                            _3423 = frontier_phi_90_pred_5;
                            _3130 = _3426 + _3143;
                            _3131 = _3427 + _3144;
                            _3132 = _3428 + _3145;
                            _3127 = _3423 + _3140;
                            _3128 = _3424 + _3141;
                            _3129 = _3425 + _3142;
                            if (_3147 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3147;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3132;
                        frontier_phi_84_pred_1 = _3131;
                        frontier_phi_84_pred_2 = _3130;
                        frontier_phi_84_pred_3 = _3129;
                        frontier_phi_84_pred_4 = _3128;
                        frontier_phi_84_pred_5 = _3127;
                    }
                    _2770 = frontier_phi_84_pred;
                    _2768 = frontier_phi_84_pred_1;
                    _2766 = frontier_phi_84_pred_2;
                    _2764 = frontier_phi_84_pred_3;
                    _2762 = frontier_phi_84_pred_4;
                    _2760 = frontier_phi_84_pred_5;
                    uint _2926 = _2925 + 1u;
                    if (_2926 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2919 = _2760;
                        _2920 = _2762;
                        _2921 = _2764;
                        _2922 = _2766;
                        _2923 = _2768;
                        _2924 = _2770;
                        _2925 = _2926;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2766;
                frontier_phi_65_66_ladder_1 = _2770;
                frontier_phi_65_66_ladder_2 = _2768;
                frontier_phi_65_66_ladder_3 = _2764;
                frontier_phi_65_66_ladder_4 = _2762;
                frontier_phi_65_66_ladder_5 = _2760;
            }
            else
            {
                frontier_phi_65_66_ladder = _2644;
                frontier_phi_65_66_ladder_1 = _2648;
                frontier_phi_65_66_ladder_2 = _2646;
                frontier_phi_65_66_ladder_3 = _2642;
                frontier_phi_65_66_ladder_4 = _2640;
                frontier_phi_65_66_ladder_5 = _2638;
            }
            _2759 = frontier_phi_65_66_ladder_5;
            _2761 = frontier_phi_65_66_ladder_4;
            _2763 = frontier_phi_65_66_ladder_3;
            _2765 = frontier_phi_65_66_ladder;
            _2767 = frontier_phi_65_66_ladder_2;
            _2769 = frontier_phi_65_66_ladder_1;
        }
        float _2774 = isnan(1.0) ? _509 : (isnan(_509) ? 1.0 : min(_509, 1.0));
        _2571 = (_2774 * _2765) + _2083;
        _2573 = (_2774 * _2767) + _2085;
        _2575 = (_2774 * _2769) + _2087;
        _2577 = ((_2759 * _493) * _2774) + _2421;
        _2579 = ((_2761 * _495) * _2774) + _2423;
        _2581 = ((_2763 * _496) * _2774) + _2425;
    }
    else
    {
        _2571 = _2083;
        _2573 = _2085;
        _2575 = _2087;
        _2577 = _2421;
        _2579 = _2423;
        _2581 = _2425;
    }
    float _4543 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4554 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _4565 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _2598 = ((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2571 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _509))) + ((_2577 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1345)) * cbPerFrame._m0[3u].x);
    float _2599 = ((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2573 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _509))) + ((_2579 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1345)) * cbPerFrame._m0[3u].x);
    float _2600 = ((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2575 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _509))) + ((_2581 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1345)) * cbPerFrame._m0[3u].x);
    uint _2601 = _467 + 6u;
    float _2609 = _427 / cbSceneParam._m0[86u].x;
    float _2610 = _428 / cbSceneParam._m0[86u].y;
    vec4 _2624 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, (log2((isnan(cbSceneParam._m0[77u].w) ? _350 : (isnan(_350) ? cbSceneParam._m0[77u].w : min(_350, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2626 = _2624.x;
    float _2627 = _2624.y;
    float _2628 = _2624.z;
    float _2629 = _2624.w;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    if (_350 > cbSceneParam._m0[78u].w)
    {
        float _2663 = isnan(_350) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _350 : min(cbSceneParam._m0[80u].w, _350));
        float _2664 = _2663 / _350;
        float _2675 = _2664 * _402;
        float _2676 = _403 * _2664;
        float _2677 = (-0.0) - _2676;
        float _2679 = _2664 * _404;
        float _2681 = (cbSceneParam._m0[77u].w * _2677) / _2663;
        float _2682 = _2681 + cbSceneParam._m0[79u].w;
        float _2683 = cbSceneParam._m0[79u].w - _2676;
        float _2689 = sqrt(((_2675 * _2675) + (_2676 * _2676)) + (_2679 * _2679));
        float _2692 = (1.0 - (cbSceneParam._m0[77u].w / _2663)) * _2689;
        float _2697 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2699 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2876;
        if (abs((_2677 - _2681) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2876 = ((((_2682 > 0.0) ? exp2(_2697 * _2682) : (2.0 - exp2(_2699 * _2682))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2692;
        }
        else
        {
            float _2820 = 1.0 / cbSceneParam._m0[80u].x;
            float _2821 = isnan(_2683) ? _2682 : (isnan(_2682) ? _2683 : max(_2682, _2683));
            float _2822 = isnan(_2683) ? _2682 : (isnan(_2682) ? _2683 : min(_2682, _2683));
            float _2831 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : min(_2821, 0.0));
            float _2832 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : min(_2822, 0.0));
            _2876 = ((abs(_2689 / _2677) * cbSceneParam._m0[80u].y) * ((((_2831 - _2832) * 2.0) - ((exp2(_2697 * (isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0)))) - exp2(_2697 * (isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0))))) * _2820)) - ((exp2(_2699 * _2831) - exp2(_2699 * _2832)) * _2820))) + (_2692 * cbSceneParam._m0[80u].z);
        }
        vec4 _2878 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, 1.0), 0.0);
        float _2887 = exp2((_2876 * (-1.44269502162933349609375)) * (1.0 - _2878.w));
        float _2888 = log2(_2887);
        float _2904 = log2(_2629);
        _2701 = (exp2(_2904 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].x)) * _2878.x) / cbSceneParam._m0[78u].x)) + _2626;
        _2703 = (exp2(_2904 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].y)) * _2878.y) / cbSceneParam._m0[78u].y)) + _2627;
        _2705 = (exp2(_2904 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].z)) * _2878.z) / cbSceneParam._m0[78u].z)) + _2628;
        _2707 = _2887 * _2629;
    }
    else
    {
        _2701 = _2626;
        _2703 = _2627;
        _2705 = _2628;
        _2707 = _2629;
    }
    bool _2914;
    vec4 _2717;
    vec4 _2739;
    float _2741;
    float _2745;
    float _2746;
    float _2747;
    float _2748;
    bool _2758;
    for (;;)
    {
        _2717 = cbMatDynParam._m0[0u];
        float _2719 = roundEven(_2717.y);
        bool _2720 = _2719 == 3.0;
        float _2721 = log2(_2707);
        float _2728 = exp2(_2721 * cbSceneParam._m0[78u].x) * _2598;
        float _2729 = exp2(_2721 * cbSceneParam._m0[78u].y) * _2599;
        float _2730 = exp2(_2721 * cbSceneParam._m0[78u].z) * _2600;
        float _2737 = _415 + (-0.5);
        _2739 = cbMtdParam._m0[1u];
        _2741 = _2739.y * _2737;
        float _2744 = (_2719 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2745 = _2744 * (_2720 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2701)));
        _2746 = _2744 * (_2720 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2703)));
        _2747 = _2744 * (_2720 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2705)));
        _2748 = _2737 * 0.999000012874603271484375;
        _2758 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2758)
        {
            if ((cbInstanceData._m0[_467 + 7u].x + _2748) < 0.5)
            {
                _2914 = true;
                break;
            }
        }
        uint _2855 = _469 + uint(_2717.w);
        if ((cbInstanceData._m0[_2855].w < 1.0) && ((cbInstanceData._m0[_2855].w + _2748) < 0.5))
        {
            _2914 = true;
            break;
        }
        if ((_2741 + 1.0) < _2739.x)
        {
            _2914 = true;
            break;
        }
        _2914 = false;
        break;
    }
    float _3118;
    if (_2914)
    {
        discard_state = true;
        _3118 = 0.0;
    }
    else
    {
        _3118 = cbInstanceData._m0[_2601].w;
    }
    SV_Target.x = _2745;
    SV_Target.y = _2746;
    SV_Target.z = _2747;
    SV_Target.w = _3118;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2601].w;
    discard_exit();
}


