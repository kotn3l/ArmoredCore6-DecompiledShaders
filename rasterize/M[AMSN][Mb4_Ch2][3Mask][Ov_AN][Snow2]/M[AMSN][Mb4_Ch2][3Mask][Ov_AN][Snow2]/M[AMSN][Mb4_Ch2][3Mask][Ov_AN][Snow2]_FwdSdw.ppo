#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1334;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    vec4 _272 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _297 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _308 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _272.x) * 2.0) - _297)) + 1.0;
    float _3948 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _309 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    vec4 _322 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _339 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _341 = _339.x;
    float _342 = _339.y;
    float _343 = _339.z;
    float _350 = ((_322.x - _341) * _309) + _341;
    float _351 = ((_322.y - _342) * _309) + _342;
    float _352 = ((_322.z - _343) * _309) + _343;
    float _358 = (((((1.0 - _272.y) * 2.0) - _297) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].z) + 1.0;
    float _3959 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    vec4 _371 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _382 = ((_371.x - _350) * _359) + _350;
    float _383 = ((_371.y - _351) * _359) + _351;
    float _384 = ((_371.z - _352) * _359) + _352;
    float _390 = (((((1.0 - _272.z) * 2.0) - _297) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].y) + 1.0;
    float _3970 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    vec4 _403 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w));
    float _416 = ((_403.z - _384) * _391) + _384;
    float _419 = ((((_403.x - _382) * _391) + _382) * 2.0) + (-1.0);
    float _421 = ((((_403.y - _383) * _391) + _383) * 2.0) + (-1.0);
    float _422 = dot(vec2(_419, _421), vec2(_419, _421));
    float _3981 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _427 = sqrt(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))));
    float _428 = fma(_427, _247, 0.0);
    float _429 = fma(_427, _248, 0.0);
    float _430 = fma(_427, _249, 0.0);
    float _434 = inversesqrt(dot(vec3(_428, _429, _430), vec3(_428, _429, _430)));
    float _442 = cbMtdParam._m0[14u].z + dot(vec4(_434 * _428, _434 * _429, _434 * _430, 0.0), vec4(cbMtdParam._m0[15u].w, cbMtdParam._m0[16u].xy, 0.0));
    float _3992 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    vec4 _462 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _467 = _462.x * cbMtdParam._m0[10u].x;
    float _468 = _462.y * cbMtdParam._m0[10u].y;
    float _469 = _462.z * cbMtdParam._m0[10u].z;
    vec4 _488 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _502 = (((_488.x * cbMtdParam._m0[11u].x) - _467) * _309) + _467;
    float _503 = (((_488.y * cbMtdParam._m0[11u].y) - _468) * _309) + _468;
    float _504 = (((_488.z * cbMtdParam._m0[11u].z) - _469) * _309) + _469;
    vec4 _522 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _536 = (((_522.x * cbMtdParam._m0[12u].x) - _502) * _359) + _502;
    float _537 = (((_522.y * cbMtdParam._m0[12u].y) - _503) * _359) + _503;
    float _538 = (((_522.z * cbMtdParam._m0[12u].z) - _504) * _359) + _504;
    vec4 _557 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w));
    vec4 _591 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _599 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_557.x * cbMtdParam._m0[13u].x) - _536) * _391) + _536)) * _591.x;
    float _602 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_557.y * cbMtdParam._m0[13u].y) - _537) * _391) + _537)) * _591.y;
    float _605 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_557.z * cbMtdParam._m0[13u].z) - _538) * _391) + _538)) * _591.z;
    vec4 _617 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _628 = ((_617.x - _599) * _443) + _599;
    float _629 = ((_617.y - _602) * _443) + _602;
    float _630 = ((_617.z - _605) * _443) + _605;
    vec4 _643 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _645 = _643.x;
    float _662 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _645) * _309) + _645;
    float _679 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x - _662) * _359) + _662;
    vec4 _708 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _710 = _708.x;
    float _4003 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _714 = (((((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _679) * _391) + _679) - _710) * (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) + _710;
    float _716 = _714 - (_714 * _443);
    vec4 _728 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _735 = (_728.x * 2.0) + (-1.0);
    float _736 = (_728.y * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _4014 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _745 = ((_728.z - _416) * _443) + _416;
    float _754 = ((sqrt(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) - _427) * _443) + _427;
    vec4 _768 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _778 = (((_735 - _419) * _443) + _419) + (((_768.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].w);
    float _779 = (((_736 - _421) * _443) + _421) + (((_768.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].w);
    float _782 = fma(_754, _247, fma(_779, _239 * TANGENT.x, (_225 * _217) * _778));
    float _785 = fma(_754, _248, fma(_779, _239 * TANGENT.y, (_225 * _218) * _778));
    float _788 = fma(_754, _249, fma(_779, _239 * TANGENT.z, (_225 * _219) * _778));
    float _792 = inversesqrt(dot(vec3(_782, _785, _788), vec3(_782, _785, _788)));
    float _793 = _792 * _782;
    float _794 = _792 * _785;
    float _795 = _792 * _788;
    float _4025 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _796 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _4047 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4058 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4069 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _800 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _866 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _856);
    float _867 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _856);
    float _868 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _856);
    float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
    float _873 = _866 * _872;
    float _874 = _867 * _872;
    float _875 = _868 * _872;
    float _881 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _882 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _900 = fma(_795, cbSceneParam._m0[5u].z, fma(_794, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _793));
    float _903 = fma(_795, cbSceneParam._m0[6u].z, fma(_794, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _793));
    float _906 = fma(_795, cbSceneParam._m0[7u].z, fma(_794, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _793));
    uint _919 = uint(roundEven(NORMAL.w)) * 13u;
    uint _921 = (_919 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _927 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_921].x;
    float _928 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * cbInstanceData._m0[_921].y;
    float _929 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * cbInstanceData._m0[_921].z;
    float _4080 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _933 = 1.0 - _800;
    float _934 = _930 * _933;
    float _935 = _931 * _933;
    float _936 = _932 * _933;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _800;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _800;
    float _943 = (_932 + (-0.039999999105930328369140625)) * _800;
    float _944 = _941 + 0.039999999105930328369140625;
    float _946 = _942 + 0.039999999105930328369140625;
    float _947 = _943 + 0.039999999105930328369140625;
    vec4 _956 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _881, cbSceneParam._m0[86u].y * _882));
    float _959 = _956.x * TEXCOORD_4;
    float _960 = dot(vec3(_793, _794, _795), vec3(_873, _874, _875));
    float _963 = _960 * 2.0;
    float _967 = (_963 * _793) - _873;
    float _968 = (_963 * _794) - _874;
    float _969 = (_963 * _795) - _875;
    float _973 = abs(dot(vec3(_873, _874, _875), vec3(_793, _794, _795)));
    float _4113 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _975 = sqrt(_796);
    float _988 = exp2((_975 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_975 * 3.0));
    float _994 = (1.0 - _988) * ((_975 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _995 = _988 * _975;
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1333;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1058 = fma(_1031, cbModelParam._m0[26u].z, fma(_1027, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1023));
        float _1062 = fma(_1031, cbModelParam._m0[27u].z, fma(_1027, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1023));
        float _1066 = fma(_1031, cbModelParam._m0[28u].z, fma(_1027, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1023));
        float _1091 = _1023 + _793;
        float _1092 = _1027 + _794;
        float _1093 = _1031 + _795;
        float _1103 = fma(_1093, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091)) - _1058;
        float _1104 = fma(_1093, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091)) - _1062;
        float _1105 = fma(_1093, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091)) - _1066;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1058 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1062 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[34u].z) + ((((((_1066 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1161 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1127.x + (-0.5));
        float _1163 = _1161 * (_1127.y + (-0.5));
        float _1164 = _1161 * (_1127.z + (-0.5));
        float _1171 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1134.x + (-0.5));
        float _1173 = _1171 * (_1134.y + (-0.5));
        float _1174 = _1171 * (_1134.z + (-0.5));
        float _1181 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1141.x + (-0.5));
        float _1183 = _1181 * (_1141.y + (-0.5));
        float _1184 = _1181 * (_1141.z + (-0.5));
        float _1191 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1148.x + (-0.5));
        float _1193 = _1191 * (_1148.y + (-0.5));
        float _1194 = _1191 * (_1148.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1215 = (dot(vec3(_793, _794, _795), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1225 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _4161 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1227 + 1.0))) + _1232) * _1195;
        float _1242 = _1163 * 0.5;
        float _1243 = _1173 * 0.5;
        float _1244 = _1183 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_793, _794, _795), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4194 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1269 + 1.0))) + _1274) * _1196;
        float _1284 = _1164 * 0.5;
        float _1285 = _1174 * 0.5;
        float _1286 = _1184 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_793, _794, _795), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4227 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1311 + 1.0))) + _1316) * _1197;
        _1333 = _1164;
        _1335 = _1163;
        _1336 = _1162;
        _1337 = _1174;
        _1338 = _1173;
        _1339 = _1172;
        _1340 = _1184;
        _1341 = _1183;
        _1342 = _1182;
        _1343 = _1197;
        _1344 = _1196;
        _1345 = _1195;
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _1334;
        _1335 = _1334;
        _1336 = _1334;
        _1337 = _1334;
        _1338 = _1334;
        _1339 = _1334;
        _1340 = _1334;
        _1341 = _1334;
        _1342 = _1334;
        _1343 = _1334;
        _1344 = _1334;
        _1345 = _1334;
        _1346 = 0.0;
        _1347 = 0.0;
        _1348 = 0.0;
    }
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1374 = fma(_1031, cbModelParam._m0[30u].z, fma(_1027, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1023));
        float _1378 = fma(_1031, cbModelParam._m0[31u].z, fma(_1027, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1023));
        float _1382 = fma(_1031, cbModelParam._m0[32u].z, fma(_1027, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1023));
        float _1405 = _1023 + _793;
        float _1406 = _1027 + _794;
        float _1407 = _1031 + _795;
        float _1417 = fma(_1407, cbModelParam._m0[30u].z, fma(_1406, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1405)) - _1374;
        float _1418 = fma(_1407, cbModelParam._m0[31u].z, fma(_1406, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1405)) - _1378;
        float _1419 = fma(_1407, cbModelParam._m0[32u].z, fma(_1406, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1405)) - _1382;
        float _1423 = inversesqrt(dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419)));
        float _1436 = ((_1423 * _1417) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1374 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1423 * _1418) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1378 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1423 * _1419) / cbModelParam._m0[35u].z) + ((((((_1382 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        float _1473 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1440.x + (-0.5));
        float _1475 = _1473 * (_1440.y + (-0.5));
        float _1476 = _1473 * (_1440.z + (-0.5));
        float _1483 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1447.x + (-0.5));
        float _1485 = _1483 * (_1447.y + (-0.5));
        float _1486 = _1483 * (_1447.z + (-0.5));
        float _1493 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1454.x + (-0.5));
        float _1495 = _1493 * (_1454.y + (-0.5));
        float _1496 = _1493 * (_1454.z + (-0.5));
        float _1503 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1461.x + (-0.5));
        float _1505 = _1503 * (_1461.y + (-0.5));
        float _1506 = _1503 * (_1461.z + (-0.5));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = _1474 * 0.5;
        float _1511 = _1484 * 0.5;
        float _1512 = _1494 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_793, _794, _795), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4290 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1537 + 1.0))) + _1542) * _1507;
        float _1552 = _1475 * 0.5;
        float _1553 = _1485 * 0.5;
        float _1554 = _1495 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_793, _794, _795), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4323 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1579 + 1.0))) + _1584) * _1508;
        float _1594 = _1476 * 0.5;
        float _1595 = _1486 * 0.5;
        float _1596 = _1496 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_793, _794, _795), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4356 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1621 + 1.0))) + _1626) * _1509;
        _1643 = _1476;
        _1644 = _1475;
        _1645 = _1474;
        _1646 = _1486;
        _1647 = _1485;
        _1648 = _1484;
        _1649 = _1496;
        _1650 = _1495;
        _1651 = _1494;
        _1652 = _1509;
        _1653 = _1508;
        _1654 = _1507;
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
    }
    else
    {
        _1643 = _1334;
        _1644 = _1334;
        _1645 = _1334;
        _1646 = _1334;
        _1647 = _1334;
        _1648 = _1334;
        _1649 = _1334;
        _1650 = _1334;
        _1651 = _1334;
        _1652 = _1334;
        _1653 = _1334;
        _1654 = _1334;
        _1655 = 0.0;
        _1656 = 0.0;
        _1657 = 0.0;
    }
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1346)) + _1346;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1347)) + _1347;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1348)) + _1348;
    float _1690 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1667 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1667 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1667));
    float _1711 = _967 * 0.5;
    float _1712 = _968 * 0.5;
    float _1713 = _969 * 0.5;
    float _1714 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1717 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1720 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1754;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1727 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1333, _1337, _1340, _1343));
        float _1731 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1735 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1742 = dot(vec4(cbModelParam._m0[39u]), vec4(_1711, _1712, _1713, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1765;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1756 = dot(vec4(cbModelParam._m0[40u]), vec4(_1711, _1712, _1713, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1756) ? 0.0 : (isnan(0.0) ? _1756 : max(0.0, _1756))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1769 = (_1765 * cbModelParam._m0[1u].x) + (_1754 * (1.0 - cbModelParam._m0[1u].x));
    float _1779 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _796);
    float _1780 = isnan(_1779) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1779 : min(cbModelParam._m0[25u].z, _1779));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1827 = fma(_1031, cbModelParam._m0[13u].z, fma(_1027, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1023)) + cbModelParam._m0[13u].w;
        float _1831 = fma(_1031, cbModelParam._m0[14u].z, fma(_1027, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1023)) + cbModelParam._m0[14u].w;
        float _1835 = fma(_1031, cbModelParam._m0[15u].z, fma(_1027, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1023)) + cbModelParam._m0[15u].w;
        float _1838 = fma(_969, cbModelParam._m0[13u].z, fma(_968, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967));
        float _1841 = fma(_969, cbModelParam._m0[14u].z, fma(_968, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967));
        float _1844 = fma(_969, cbModelParam._m0[15u].z, fma(_968, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967));
        float _1872;
        if (_1838 > 0.0)
        {
            _1872 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1872 = frontier_phi_16_14_ladder;
        }
        float _2046;
        if (_1841 > 0.0)
        {
            _2046 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2046 = frontier_phi_25_21_ladder;
        }
        float _2341;
        if (_1844 > 0.0)
        {
            _2341 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2341 = frontier_phi_37_32_ladder;
        }
        float _2343 = isnan(_2046) ? _1872 : (isnan(_1872) ? _2046 : min(_1872, _2046));
        float _2344 = isnan(_2341) ? _2343 : (isnan(_2343) ? _2341 : min(_2343, _2341));
        float _2348 = (_2344 * _1838) + _1827;
        float _2349 = (_2344 * _1841) + _1831;
        float _2350 = (_2344 * _1844) + _1835;
        float _2351 = _2344 * 9.9999997473787516355514526367188e-05;
        float _2353 = (-1.0) - _2351;
        float _2355 = _2351 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2350 > _2355) || ((_2350 < _2353) || ((_2349 > _2355) || ((_2349 < _2353) || ((_2348 < _2353) || (_2348 > _2355))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2495 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2350, cbModelParam._m0[9u].z, fma(_2349, cbModelParam._m0[9u].y, _2348 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2350, cbModelParam._m0[10u].z, fma(_2349, cbModelParam._m0[10u].y, _2348 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2350, cbModelParam._m0[11u].z, fma(_2349, cbModelParam._m0[11u].y, _2348 * cbModelParam._m0[11u].x))), _1780);
            frontier_phi_15_37_ladder = _2495.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2495.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2495.z * cbModelParam._m0[1u].y;
        }
        _1860 = frontier_phi_15_37_ladder_1;
        _1862 = frontier_phi_15_37_ladder;
        _1864 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1848 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_967, _968, _969), _1780);
        _1860 = _1848.x * cbModelParam._m0[1u].y;
        _1862 = _1848.y * cbModelParam._m0[1u].y;
        _1864 = _1848.z * cbModelParam._m0[1u].y;
    }
    float _1868 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _796);
    float _1869 = isnan(_1868) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1868 : min(cbModelParam._m0[25u].w, _1868));
    float _1961;
    float _1963;
    float _1965;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1925 = fma(_1031, cbModelParam._m0[21u].z, fma(_1027, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1023)) + cbModelParam._m0[21u].w;
        float _1929 = fma(_1031, cbModelParam._m0[22u].z, fma(_1027, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1023)) + cbModelParam._m0[22u].w;
        float _1933 = fma(_1031, cbModelParam._m0[23u].z, fma(_1027, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1023)) + cbModelParam._m0[23u].w;
        float _1936 = fma(_969, cbModelParam._m0[21u].z, fma(_968, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967));
        float _1939 = fma(_969, cbModelParam._m0[22u].z, fma(_968, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967));
        float _1942 = fma(_969, cbModelParam._m0[23u].z, fma(_968, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967));
        float _2051;
        if (_1936 > 0.0)
        {
            _2051 = abs((1.0 - _1925) / _1936);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1925 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2051 = frontier_phi_27_23_ladder;
        }
        float _2368;
        if (_1939 > 0.0)
        {
            _2368 = abs((1.0 - _1929) / _1939);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1929 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2368 = frontier_phi_39_34_ladder;
        }
        float _2706;
        if (_1942 > 0.0)
        {
            _2706 = abs((1.0 - _1933) / _1942);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1933 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2706 = frontier_phi_49_46_ladder;
        }
        float _2708 = isnan(_2368) ? _2051 : (isnan(_2051) ? _2368 : min(_2051, _2368));
        float _2709 = isnan(_2706) ? _2708 : (isnan(_2708) ? _2706 : min(_2708, _2706));
        float _2713 = (_2709 * _1936) + _1925;
        float _2714 = (_2709 * _1939) + _1929;
        float _2715 = (_2709 * _1942) + _1933;
        float _2716 = _2709 * 9.9999997473787516355514526367188e-05;
        float _2717 = (-1.0) - _2716;
        float _2719 = _2716 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2715 > _2719) || ((_2715 < _2717) || ((_2714 > _2719) || ((_2714 < _2717) || ((_2713 < _2717) || (_2713 > _2719))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2715, cbModelParam._m0[17u].z, fma(_2714, cbModelParam._m0[17u].y, _2713 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2715, cbModelParam._m0[18u].z, fma(_2714, cbModelParam._m0[18u].y, _2713 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2715, cbModelParam._m0[19u].z, fma(_2714, cbModelParam._m0[19u].y, _2713 * cbModelParam._m0[19u].x))), _1869);
            frontier_phi_24_49_ladder = _2837.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2837.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2837.x * cbModelParam._m0[1u].z;
        }
        _1961 = frontier_phi_24_49_ladder_2;
        _1963 = frontier_phi_24_49_ladder_1;
        _1965 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1945 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_967, _968, _969), _1869);
        _1961 = _1945.x * cbModelParam._m0[1u].z;
        _1963 = _1945.y * cbModelParam._m0[1u].z;
        _1965 = _1945.z * cbModelParam._m0[1u].z;
    }
    float _1978 = (((_994 * _944) + _995) * _959) * ((cbModelParam._m0[1u].w * (_1961 - _1860)) + _1860);
    float _1980 = (((_994 * _946) + _995) * _959) * ((cbModelParam._m0[1u].w * (_1963 - _1862)) + _1862);
    float _1982 = (((_994 * _947) + _995) * _959) * ((cbModelParam._m0[1u].w * (_1965 - _1864)) + _1864);
    float _1985 = fma(_1982, cbSceneParam._m0[89u].z, fma(_1980, cbSceneParam._m0[89u].y, _1978 * cbSceneParam._m0[89u].x));
    float _1988 = fma(_1982, cbSceneParam._m0[90u].z, fma(_1980, cbSceneParam._m0[90u].y, _1978 * cbSceneParam._m0[90u].x));
    float _1991 = fma(_1982, cbSceneParam._m0[91u].z, fma(_1980, cbSceneParam._m0[91u].y, _1978 * cbSceneParam._m0[91u].x));
    float _2025 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2029 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2033 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2037 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2038 = _2025 / _2037;
    float _2039 = _2029 / _2037;
    float _2040 = _2033 / _2037;
    float _2187;
    float _2188;
    float _2189;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2067 = ((uint(_2040 > cbSceneParam._m0[59u].y) + uint(_2040 > cbSceneParam._m0[59u].x)) + uint(_2040 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2068 = _2067 + 43u;
        uint _2076 = _2067 + 44u;
        uint _2084 = _2067 + 45u;
        uint _2092 = _2067 + 46u;
        float _2103 = fma(_2037, cbSceneParam._m0[_2068].w, fma(_2033, cbSceneParam._m0[_2068].z, fma(_2029, cbSceneParam._m0[_2068].y, _2025 * cbSceneParam._m0[_2068].x)));
        float _2107 = fma(_2037, cbSceneParam._m0[_2076].w, fma(_2033, cbSceneParam._m0[_2076].z, fma(_2029, cbSceneParam._m0[_2076].y, _2025 * cbSceneParam._m0[_2076].x)));
        float _2115 = fma(_2037, cbSceneParam._m0[_2092].w, fma(_2033, cbSceneParam._m0[_2092].z, fma(_2029, cbSceneParam._m0[_2092].y, _2025 * cbSceneParam._m0[_2092].x)));
        float _2120 = cbSceneParam._m0[33u].z * _2115;
        float _2122 = cbSceneParam._m0[33u].w * _2115;
        float _2125 = fma(_2037, cbSceneParam._m0[_2084].w, fma(_2033, cbSceneParam._m0[_2084].z, fma(_2029, cbSceneParam._m0[_2084].y, _2025 * cbSceneParam._m0[_2084].x))) / _2115;
        float _2173 = (cbSceneParam._m0[33u].x - sqrt(((_2039 * _2039) + (_2038 * _2038)) + (_2040 * _2040))) * cbSceneParam._m0[33u].y;
        float _4482 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2180 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2120 + _2103) / _2115, (_2122 + _2107) / _2115), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 + _2103) / _2115, (_2107 - _2120) / _2115), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 - _2120) / _2115, (_2107 - _2122) / _2115), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 - _2122) / _2115, (_2120 + _2107) / _2115), _2125), 0.0)).x), vec4(0.25)));
        _2187 = 1.0 - (_2180 * cbSceneParam._m0[34u].x);
        _2188 = 1.0 - (_2180 * cbSceneParam._m0[34u].y);
        _2189 = 1.0 - (_2180 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2187 = 1.0;
        _2188 = 1.0;
        _2189 = 1.0;
    }
    float _2253;
    float _2255;
    float _2257;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2241 = fma(_2037, cbSceneParam._m0[63u].w, fma(_2033, cbSceneParam._m0[63u].z, fma(_2029, cbSceneParam._m0[63u].y, _2025 * cbSceneParam._m0[63u].x)));
        float _2242 = fma(_2037, cbSceneParam._m0[60u].w, fma(_2033, cbSceneParam._m0[60u].z, fma(_2029, cbSceneParam._m0[60u].y, _2025 * cbSceneParam._m0[60u].x))) / _2241;
        float _2243 = fma(_2037, cbSceneParam._m0[61u].w, fma(_2033, cbSceneParam._m0[61u].z, fma(_2029, cbSceneParam._m0[61u].y, _2025 * cbSceneParam._m0[61u].x))) / _2241;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2242 >= cbSceneParam._m0[64u].x) && (_2243 >= cbSceneParam._m0[64u].y)) && (_2242 <= cbSceneParam._m0[64u].z)) && (_2243 <= cbSceneParam._m0[64u].w))
        {
            float _2381 = fma(_2037, cbSceneParam._m0[62u].w, fma(_2033, cbSceneParam._m0[62u].z, fma(_2029, cbSceneParam._m0[62u].y, _2025 * cbSceneParam._m0[62u].x))) / _2241;
            float _2385 = isnan(cbSceneParam._m0[41u].w) ? _2381 : (isnan(_2381) ? cbSceneParam._m0[41u].w : max(_2381, cbSceneParam._m0[41u].w));
            float _2428 = (cbSceneParam._m0[33u].x - sqrt(((_2039 * _2039) + (_2038 * _2038)) + (_2040 * _2040))) * cbSceneParam._m0[33u].y;
            float _4498 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
            float _2435 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2242, cbSceneParam._m0[33u].w + _2243), _2385), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2242, _2243 - cbSceneParam._m0[33u].z), _2385), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2242 - cbSceneParam._m0[33u].z, _2243 - cbSceneParam._m0[33u].w), _2385), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2242 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2243), _2385), 0.0)).x), vec4(0.25)));
            float _2439 = 1.0 - (_2435 * cbSceneParam._m0[34u].x);
            float _2440 = 1.0 - (_2435 * cbSceneParam._m0[34u].y);
            float _2441 = 1.0 - (_2435 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2440) ? _2188 : (isnan(_2188) ? _2440 : min(_2188, _2440));
            frontier_phi_36_35_ladder_1 = isnan(_2441) ? _2189 : (isnan(_2189) ? _2441 : min(_2189, _2441));
            frontier_phi_36_35_ladder_2 = isnan(_2439) ? _2187 : (isnan(_2187) ? _2439 : min(_2187, _2439));
        }
        else
        {
            frontier_phi_36_35_ladder = _2188;
            frontier_phi_36_35_ladder_1 = _2189;
            frontier_phi_36_35_ladder_2 = _2187;
        }
        _2253 = frontier_phi_36_35_ladder_2;
        _2255 = frontier_phi_36_35_ladder;
        _2257 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2253 = _2187;
        _2255 = _2188;
        _2257 = _2189;
    }
    uvec4 _2262 = floatBitsToUint(cbInstanceData._m0[_919 + 5u]);
    uint _2264 = _2262.x * 14u;
    uint _2265 = _2264 + 13u;
    float _2272 = _959 + (-1.0);
    float _2277 = (cbLight._m0[_2265].x * _2272) + 1.0;
    float _2278 = (cbLight._m0[_2265].y * _2272) + 1.0;
    float _2279 = (cbLight._m0[_2265].z * _2272) + 1.0;
    float _2280 = (cbLight._m0[_2265].w * _2272) + 1.0;
    uint _2281 = _2264 + 5u;
    float _2287 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
    uint _2291 = _2264 + 4u;
    float _2300 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
    uint _2304 = _2264 | 1u;
    float _2315 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_793, _794, _795));
    float _2318 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_793, _794, _795));
    float _4534 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _4545 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2323 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.3183098733425140380859375;
    float _2325 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * 0.3183098733425140380859375;
    float _2332 = ((cbLight._m0[_2281].x * _2287) * _2325) + (((cbLight._m0[_2291].x * _2253) * _2300) * _2323);
    float _2333 = ((_2287 * cbLight._m0[_2281].y) * _2325) + (((cbLight._m0[_2291].y * _2255) * _2300) * _2323);
    float _2334 = ((_2287 * cbLight._m0[_2281].z) * _2325) + (((cbLight._m0[_2291].z * _2257) * _2300) * _2323);
    uvec4 _2338 = floatBitsToUint(cbLight._m0[_2264 + 12u]);
    bool _2340 = _2338.x == 0u;
    float _2442;
    float _2444;
    float _2446;
    if (_2340)
    {
        _2442 = _2332;
        _2444 = _2333;
        _2446 = _2334;
    }
    else
    {
        uint _2450 = _2264 + 6u;
        float _2466 = (dot(vec3(cbLight._m0[_2264 + 2u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2467 = _2466 * _2466;
        float _4556 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2468 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2469 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2442 = (((cbLight._m0[_2450].x * 0.3183098733425140380859375) * _2468) * _2469) + _2332;
        _2444 = (((cbLight._m0[_2450].y * 0.3183098733425140380859375) * _2468) * _2469) + _2333;
        _2446 = (((cbLight._m0[_2450].z * 0.3183098733425140380859375) * _2468) * _2469) + _2334;
    }
    bool _2449 = _2338.y == 0u;
    float _2504;
    float _2506;
    float _2508;
    if (_2449)
    {
        _2504 = _2442;
        _2506 = _2444;
        _2508 = _2446;
    }
    else
    {
        uint _2677 = _2264 + 7u;
        float _2693 = (dot(vec3(cbLight._m0[_2264 + 3u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2694 = _2693 * _2693;
        float _4572 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2695 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2696 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2504 = (((cbLight._m0[_2677].x * 0.3183098733425140380859375) * _2695) * _2696) + _2442;
        _2506 = (((cbLight._m0[_2677].y * 0.3183098733425140380859375) * _2695) * _2696) + _2444;
        _2508 = (((cbLight._m0[_2677].z * 0.3183098733425140380859375) * _2695) * _2696) + _2446;
    }
    uint _2511 = _2264 + 8u;
    float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2264].w)) * _796) * 0.949999988079071044921875);
    float _2525 = _2524 * _2524;
    float _2526 = cbLight._m0[_2264].x + _873;
    float _2527 = cbLight._m0[_2264].y + _874;
    float _2528 = cbLight._m0[_2264].z + _875;
    float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
    float _2533 = _2532 * _2526;
    float _2534 = _2532 * _2527;
    float _2535 = _2532 * _2528;
    float _2536 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2264].xyz));
    float _4588 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _4599 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _2540 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2541 = dot(vec3(_793, _794, _795), vec3(_2533, _2534, _2535));
    float _4610 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2545 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_2533, _2534, _2535));
    float _4621 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2549 = _2525 * _2525;
    float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
    float _2561 = exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0);
    float _2562 = 0.959999978542327880859375 - _941;
    float _2564 = 0.959999978542327880859375 - _942;
    float _2565 = 0.959999978542327880859375 - _943;
    float _2572 = 1.0 - _2525;
    float _2583 = (0.5 / (((_2540 * ((_2539 * _2572) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2540 * _2572) + _2525) * _2539))) * _2539;
    float _4632 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2585 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
    uint _2599 = _2264 + 9u;
    float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _796) * 0.949999988079071044921875);
    float _2611 = _2610 * _2610;
    float _2612 = cbLight._m0[_2304].x + _873;
    float _2613 = cbLight._m0[_2304].y + _874;
    float _2614 = cbLight._m0[_2304].z + _875;
    float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
    float _2619 = _2618 * _2612;
    float _2620 = _2618 * _2613;
    float _2621 = _2618 * _2614;
    float _2622 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2304].xyz));
    float _4643 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2625 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2626 = dot(vec3(_793, _794, _795), vec3(_2619, _2620, _2621));
    float _4654 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2629 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _2630 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2619, _2620, _2621));
    float _4665 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2634 = _2611 * _2611;
    float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
    float _2645 = exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0);
    float _2652 = 1.0 - _2611;
    float _2662 = (0.5 / (((_2540 * ((_2625 * _2652) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2540 * _2652) + _2611) * _2625))) * _2625;
    float _4676 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2664 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
    float _2674 = (((((_2645 * _2562) + _944) * cbLight._m0[_2599].x) * _2664) * _2287) + ((((cbLight._m0[_2511].x * _2253) * ((_2561 * _2562) + _944)) * _2585) * _2300);
    float _2675 = (((((_2645 * _2564) + _946) * cbLight._m0[_2599].y) * _2664) * _2287) + ((((cbLight._m0[_2511].y * _2255) * ((_2561 * _2564) + _946)) * _2585) * _2300);
    float _2676 = (((((_2645 * _2565) + _947) * cbLight._m0[_2599].z) * _2664) * _2287) + ((((cbLight._m0[_2511].z * _2257) * ((_2561 * _2565) + _947)) * _2585) * _2300);
    float _2732;
    float _2734;
    float _2736;
    if (_2340)
    {
        _2732 = _2674;
        _2734 = _2675;
        _2736 = _2676;
    }
    else
    {
        uint _2738 = _2264 + 2u;
        uint _2742 = _2264 + 10u;
        float _2756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2738].w)) * _796) * 0.949999988079071044921875);
        float _2757 = _2756 * _2756;
        float _2758 = cbLight._m0[_2738].x + _873;
        float _2759 = cbLight._m0[_2738].y + _874;
        float _2760 = cbLight._m0[_2738].z + _875;
        float _2764 = inversesqrt(dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760)));
        float _2765 = _2764 * _2758;
        float _2766 = _2764 * _2759;
        float _2767 = _2764 * _2760;
        float _2768 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2738].xyz));
        float _4687 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2771 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2772 = dot(vec3(_793, _794, _795), vec3(_2765, _2766, _2767));
        float _4698 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2775 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2776 = dot(vec3(cbLight._m0[_2738].xyz), vec3(_2765, _2766, _2767));
        float _4709 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2780 = _2757 * _2757;
        float _2784 = ((_2775 * _2775) * (_2780 + (-1.0))) + 1.0;
        float _2791 = exp2(log2(1.0 - (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) * 5.0);
        float _2798 = 1.0 - _2757;
        float _2808 = (0.5 / (((_2540 * ((_2771 * _2798) + _2757)) + 9.9999999392252902907785028219223e-09) + (((_2540 * _2798) + _2757) * _2771))) * _2771;
        float _4720 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2810 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2780 / ((_2784 * _2784) * 3.141590118408203125));
        float _2811 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2732 = (((((_2791 * _2562) + _944) * cbLight._m0[_2742].x) * _2810) * _2811) + _2674;
        _2734 = (((((_2791 * _2564) + _946) * cbLight._m0[_2742].y) * _2810) * _2811) + _2675;
        _2736 = (((((_2791 * _2565) + _947) * cbLight._m0[_2742].z) * _2810) * _2811) + _2676;
    }
    float _2842;
    float _2844;
    float _2846;
    if (_2449)
    {
        _2842 = _2732;
        _2844 = _2734;
        _2846 = _2736;
    }
    else
    {
        uint _2853 = _2264 + 3u;
        uint _2857 = _2264 + 11u;
        float _2871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2853].w)) * _796) * 0.949999988079071044921875);
        float _2872 = _2871 * _2871;
        float _2873 = cbLight._m0[_2853].x + _873;
        float _2874 = cbLight._m0[_2853].y + _874;
        float _2875 = cbLight._m0[_2853].z + _875;
        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
        float _2880 = _2879 * _2873;
        float _2881 = _2879 * _2874;
        float _2882 = _2879 * _2875;
        float _2883 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2853].xyz));
        float _4736 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2886 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2887 = dot(vec3(_793, _794, _795), vec3(_2880, _2881, _2882));
        float _4747 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2890 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2891 = dot(vec3(cbLight._m0[_2853].xyz), vec3(_2880, _2881, _2882));
        float _4758 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2895 = _2872 * _2872;
        float _2899 = ((_2890 * _2890) * (_2895 + (-1.0))) + 1.0;
        float _2906 = exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0);
        float _2913 = 1.0 - _2872;
        float _2923 = (0.5 / (((_2540 * ((_2886 * _2913) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2540 * _2913) + _2872) * _2886))) * _2886;
        float _4769 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2925 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2895 / ((_2899 * _2899) * 3.141590118408203125));
        float _2926 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2842 = (((((_2906 * _2562) + _944) * cbLight._m0[_2857].x) * _2925) * _2926) + _2732;
        _2844 = (((((_2906 * _2564) + _946) * cbLight._m0[_2857].y) * _2925) * _2926) + _2734;
        _2846 = (((((_2906 * _2565) + _947) * cbLight._m0[_2857].z) * _2925) * _2926) + _2736;
    }
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    if (_2262.y == 0u)
    {
        uvec4 _2947 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2948 = _2947.x;
        uint _2959 = uint((float(_2947.y) * floor(float(uint(cbSceneParam._m0[85u].y * _882) / _2948))) + floor(float(uint(cbSceneParam._m0[85u].x * _881) / _2948)));
        float _2969 = (log2(_2040 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2970 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        uint _2973 = uint(isnan(14.0) ? _2970 : (isnan(_2970) ? 14.0 : min(_2970, 14.0)));
        uvec4 _2978 = texelFetch(g_lightClusterGridBuffer, int(((_2973 << 2u) + (_2959 << 6u)) >> 2u));
        uint _2979 = _2978.x;
        uint _2980 = _2947.z;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        if (((((1u << ((_2980 >> 4u) & 15u)) + 4294967295u) & _2979) == 0u) || ((_2980 & 240u) == 0u))
        {
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
        }
        else
        {
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            uint _3208 = 0u;
            uint _3217;
            bool _3218;
            for (;;)
            {
                _3217 = texelFetch(g_lightClassification, int((((_2973 << 5u) + (_2959 << 9u)) + (_3208 << 2u)) >> 2u)).x;
                _3218 = _3217 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3218)
                {
                    frontier_phi_68_pred = _3207;
                    frontier_phi_68_pred_1 = _3206;
                    frontier_phi_68_pred_2 = _3205;
                    frontier_phi_68_pred_3 = _3203;
                    frontier_phi_68_pred_4 = _3202;
                    frontier_phi_68_pred_5 = _3204;
                }
                else
                {
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    uint _3332;
                    _3326 = _3202;
                    _3327 = _3203;
                    _3328 = _3204;
                    _3329 = _3205;
                    _3330 = _3206;
                    _3331 = _3207;
                    _3332 = _3217;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    for (;;)
                    {
                        uint _3336 = uint(findLSB(_3332)) + (_3208 << 5u);
                        uint _3333 = (_3332 + 4294967295u) & _3332;
                        uint _3338 = _3336 * 48u;
                        vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 3u)).x));
                        uint _3358 = (_3336 * 48u) + 4u;
                        vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 3u)).x));
                        uint _3377 = (_3336 * 48u) + 8u;
                        vec3 _3388 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3377)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 2u)).x));
                        float _3392 = _3352.x - _2038;
                        float _3393 = _3352.y - _2039;
                        float _3394 = _3352.z - _2040;
                        float _3395 = dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394));
                        float _3398 = inversesqrt(_3395);
                        float _3399 = _3398 * _3392;
                        float _3400 = _3398 * _3393;
                        float _3401 = _3398 * _3394;
                        float _3402 = dot(vec3(_900, _903, _906), vec3(_3399, _3400, _3401));
                        float _3407 = 1.0 - (_3395 * _3352.w);
                        float _4795 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3409 = sqrt(_3395) * _3371.w;
                        float _3412 = 1.39999997615814208984375 / (_3409 + 1.39999997615814208984375);
                        float _3413 = _3412 * _3412;
                        float _3416 = ((1.0 - _3413) * _3402) + _3413;
                        float _3419 = _3409 * _3409;
                        float _3423 = ((isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0))) * _3408) / ((_3419 * 0.699999988079071044921875) + 1.0);
                        float _3427 = (-0.0) - _2038;
                        float _3428 = (-0.0) - _2039;
                        float _3429 = (-0.0) - _2040;
                        float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                        float _3434 = _3433 * _3427;
                        float _3435 = _3433 * _3428;
                        float _3436 = _3433 * _3429;
                        float _3443 = exp2(log2(1.0 / ((_3419 * 3.5) + 5.0)) * 0.25);
                        float _3444 = 1.0 - _975;
                        float _3451 = sqrt(1.0 - ((1.0 - (_3444 * _3444)) * (1.0 - (_3443 * _3443))));
                        float _3452 = _3451 * _3451;
                        float _3453 = _3452 * _3452;
                        float _3454 = _3434 + _3399;
                        float _3455 = _3435 + _3400;
                        float _3456 = _3436 + _3401;
                        float _3460 = inversesqrt(dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456)));
                        float _3464 = dot(vec3(_900, _903, _906), vec3(_3434, _3435, _3436));
                        float _4811 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3467 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3468 = dot(vec3(_900, _903, _906), vec3(_3460 * _3454, _3460 * _3455, _3460 * _3456));
                        float _4822 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3471 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3475 = ((_3471 * _3471) * (_3453 + (-1.0))) + 1.0;
                        float _3476 = _3412 * _3452;
                        float _3477 = _3476 * _3476;
                        float _3480 = ((1.0 - _3477) * _3402) + _3477;
                        float _4833 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3481 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3482 = 1.0 - _3452;
                        float _3492 = (0.5 / (((_3481 * ((_3467 * _3482) + _3452)) + 9.9999999392252902907785028219223e-09) + (((_3481 * _3482) + _3452) * _3467))) * _3481;
                        float _4844 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3503 = (((_3453 * 3.1415927410125732421875) * (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0)))) / ((_3475 * _3475) * ((_3419 * 2.1991131305694580078125) + 3.141590118408203125))) * _3408;
                        _3261 = (_3423 * _3371.x) + _3329;
                        _3262 = (_3423 * _3371.y) + _3330;
                        _3263 = (_3423 * _3371.z) + _3331;
                        _3258 = (_3503 * _3388.x) + _3326;
                        _3259 = (_3503 * _3388.y) + _3327;
                        _3260 = (_3503 * _3388.z) + _3328;
                        if (_3333 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3326 = _3258;
                            _3327 = _3259;
                            _3328 = _3260;
                            _3329 = _3261;
                            _3330 = _3262;
                            _3331 = _3263;
                            _3332 = _3333;
                        }
                    }
                    frontier_phi_68_pred = _3263;
                    frontier_phi_68_pred_1 = _3262;
                    frontier_phi_68_pred_2 = _3261;
                    frontier_phi_68_pred_3 = _3259;
                    frontier_phi_68_pred_4 = _3258;
                    frontier_phi_68_pred_5 = _3260;
                }
                _3069 = frontier_phi_68_pred;
                _3067 = frontier_phi_68_pred_1;
                _3065 = frontier_phi_68_pred_2;
                _3061 = frontier_phi_68_pred_3;
                _3059 = frontier_phi_68_pred_4;
                _3063 = frontier_phi_68_pred_5;
                uint _3209 = _3208 + 1u;
                if (_3209 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3202 = _3059;
                    _3203 = _3061;
                    _3204 = _3063;
                    _3205 = _3065;
                    _3206 = _3067;
                    _3207 = _3069;
                    _3208 = _3209;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
        }
        uvec4 _3072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3073 = _3072.z;
        uint _3075 = (_3073 >> 8u) & 15u;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        if (((4294967295u << _3075) & _2979) == 0u)
        {
            _3170 = _3058;
            _3172 = _3060;
            _3174 = _3062;
            _3176 = _3064;
            _3178 = _3066;
            _3180 = _3068;
        }
        else
        {
            float _3195 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
            float _3196 = _3195 * _2038;
            float _3197 = _3195 * _2039;
            float _3198 = _3195 * _2040;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3075 < ((_3073 >> 12u) & 15u))
            {
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3181;
                float _3309 = _3058;
                float _3310 = _3060;
                float _3311 = _3062;
                float _3312 = _3064;
                float _3313 = _3066;
                float _3314 = _3068;
                uint _3315 = _3075;
                uint _3324;
                bool _3325;
                for (;;)
                {
                    _3324 = texelFetch(g_lightClassification, int((((_2973 << 5u) + (_2959 << 9u)) + (_3315 << 2u)) >> 2u)).x;
                    _3325 = _3324 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3325)
                    {
                        frontier_phi_74_pred = _3311;
                        frontier_phi_74_pred_1 = _3310;
                        frontier_phi_74_pred_2 = _3309;
                        frontier_phi_74_pred_3 = _3314;
                        frontier_phi_74_pred_4 = _3313;
                        frontier_phi_74_pred_5 = _3312;
                    }
                    else
                    {
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3521 = _3309;
                        float _3522 = _3310;
                        float _3523 = _3311;
                        float _3524 = _3312;
                        float _3525 = _3313;
                        float _3526 = _3314;
                        uint _3527 = _3324;
                        uint _3528;
                        vec4 _3553;
                        float _3554;
                        vec4 _3569;
                        vec3 _3581;
                        vec4 _3596;
                        vec4 _3612;
                        float _3659;
                        bool _3660;
                        for (;;)
                        {
                            uint _3538 = ((_3315 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3527));
                            _3528 = (_3527 + 4294967295u) & _3527;
                            uint _3540 = _3538 * 40u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            _3554 = _3553.w;
                            uint _3556 = (_3538 * 40u) + 4u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3571 = (_3538 * 40u) + 8u;
                            _3581 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x));
                            uint _3583 = (_3538 * 40u) + 16u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3599 = (_3538 * 40u) + 20u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3615 = (_3538 * 40u) + 24u;
                            vec4 _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3634 = (_3538 * 40u) + 28u;
                            vec4 _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            _3659 = fma(_2040, _3647.z, fma(_2039, _3647.y, _3647.x * _2038)) + _3647.w;
                            _3660 = !((fma(_2040, _3628.z, fma(_2039, _3628.y, _3628.x * _2038)) + _3628.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3660)
                            {
                                float _3687 = _3553.x - _2038;
                                float _3688 = _3553.y - _2039;
                                float _3689 = _3553.z - _2040;
                                float _3690 = dot(vec3(_3687, _3688, _3689), vec3(_3687, _3688, _3689));
                                float _3693 = inversesqrt(_3690);
                                float _3694 = _3693 * _3687;
                                float _3695 = _3693 * _3688;
                                float _3696 = _3693 * _3689;
                                float _3700 = 1.0 - (_3690 / (_3554 * _3554));
                                float _4855 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3705 = sqrt(_3690) * _3569.w;
                                float _3707 = 1.39999997615814208984375 / (_3705 + 1.39999997615814208984375);
                                float _3708 = _3707 * _3707;
                                float _3711 = ((1.0 - _3708) * dot(vec3(_3694, _3695, _3696), vec3(_900, _903, _906))) + _3708;
                                float _3714 = _3705 * _3705;
                                float _3718 = (fma(_2040, _3596.z, fma(_2039, _3596.y, _3596.x * _2038)) + _3596.w) / _3659;
                                float _3719 = (fma(_2040, _3612.z, fma(_2039, _3612.y, _3612.x * _2038)) + _3612.w) / _3659;
                                float _3723 = 1.0 - dot(vec2(_3718, _3719), vec2(_3718, _3719));
                                float _4871 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3724 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3725 = _3724 * (((isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0))) * _3701) / ((_3714 * 0.699999988079071044921875) + 1.0));
                                float _3737 = exp2(log2(1.0 / ((_3714 * 3.5) + 5.0)) * 0.25);
                                float _3738 = 1.0 - _975;
                                float _3745 = sqrt(1.0 - ((1.0 - (_3738 * _3738)) * (1.0 - (_3737 * _3737))));
                                float _3746 = _3745 * _3745;
                                float _3747 = _3746 * _3746;
                                float _3748 = _3694 - _3196;
                                float _3749 = _3695 - _3197;
                                float _3750 = _3696 - _3198;
                                float _3754 = inversesqrt(dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750)));
                                float _3758 = dot(vec3(_900, _903, _906), vec3((-0.0) - _3196, (-0.0) - _3197, (-0.0) - _3198));
                                float _4882 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3761 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3762 = dot(vec3(_900, _903, _906), vec3(_3754 * _3748, _3754 * _3749, _3754 * _3750));
                                float _4893 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3765 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3769 = ((_3765 * _3765) * (_3747 + (-1.0))) + 1.0;
                                float _3770 = _3707 * _3746;
                                float _3771 = _3770 * _3770;
                                float _3777 = ((1.0 - _3771) * dot(vec3(_900, _903, _906), vec3(_3694, _3695, _3696))) + _3771;
                                float _4904 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3778 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3779 = 1.0 - _3746;
                                float _3789 = (0.5 / (((_3778 * ((_3761 * _3779) + _3746)) + 9.9999999392252902907785028219223e-09) + (((_3778 * _3779) + _3746) * _3761))) * _3778;
                                float _4915 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3799 = (_3724 * _3701) * (((_3747 * 3.1415927410125732421875) * (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) / ((_3769 * _3769) * ((_3714 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3799 * _3581.z;
                                frontier_phi_80_pred_1 = _3799 * _3581.y;
                                frontier_phi_80_pred_2 = _3799 * _3581.x;
                                frontier_phi_80_pred_3 = _3725 * _3569.z;
                                frontier_phi_80_pred_4 = _3725 * _3569.y;
                                frontier_phi_80_pred_5 = _3725 * _3569.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3805 = frontier_phi_80_pred;
                            _3804 = frontier_phi_80_pred_1;
                            _3803 = frontier_phi_80_pred_2;
                            _3808 = frontier_phi_80_pred_3;
                            _3807 = frontier_phi_80_pred_4;
                            _3806 = frontier_phi_80_pred_5;
                            _3511 = _3806 + _3524;
                            _3512 = _3807 + _3525;
                            _3513 = _3808 + _3526;
                            _3508 = _3803 + _3521;
                            _3509 = _3804 + _3522;
                            _3510 = _3805 + _3523;
                            if (_3528 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3528;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3510;
                        frontier_phi_74_pred_1 = _3509;
                        frontier_phi_74_pred_2 = _3508;
                        frontier_phi_74_pred_3 = _3513;
                        frontier_phi_74_pred_4 = _3512;
                        frontier_phi_74_pred_5 = _3511;
                    }
                    _3175 = frontier_phi_74_pred;
                    _3173 = frontier_phi_74_pred_1;
                    _3171 = frontier_phi_74_pred_2;
                    _3181 = frontier_phi_74_pred_3;
                    _3179 = frontier_phi_74_pred_4;
                    _3177 = frontier_phi_74_pred_5;
                    uint _3316 = _3315 + 1u;
                    if (_3316 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3309 = _3171;
                        _3310 = _3173;
                        _3311 = _3175;
                        _3312 = _3177;
                        _3313 = _3179;
                        _3314 = _3181;
                        _3315 = _3316;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3179;
                frontier_phi_62_63_ladder_1 = _3177;
                frontier_phi_62_63_ladder_2 = _3175;
                frontier_phi_62_63_ladder_3 = _3181;
                frontier_phi_62_63_ladder_4 = _3173;
                frontier_phi_62_63_ladder_5 = _3171;
            }
            else
            {
                frontier_phi_62_63_ladder = _3066;
                frontier_phi_62_63_ladder_1 = _3064;
                frontier_phi_62_63_ladder_2 = _3062;
                frontier_phi_62_63_ladder_3 = _3068;
                frontier_phi_62_63_ladder_4 = _3060;
                frontier_phi_62_63_ladder_5 = _3058;
            }
            _3170 = frontier_phi_62_63_ladder_5;
            _3172 = frontier_phi_62_63_ladder_4;
            _3174 = frontier_phi_62_63_ladder_2;
            _3176 = frontier_phi_62_63_ladder_1;
            _3178 = frontier_phi_62_63_ladder;
            _3180 = frontier_phi_62_63_ladder_3;
        }
        float _3185 = isnan(1.0) ? _959 : (isnan(_959) ? 1.0 : min(_959, 1.0));
        _2991 = (_3185 * _3176) + _2504;
        _2993 = (_3185 * _3178) + _2506;
        _2995 = (_3185 * _3180) + _2508;
        _2997 = ((_3170 * _944) * _3185) + _2842;
        _2999 = ((_3172 * _946) * _3185) + _2844;
        _3001 = ((_3174 * _947) * _3185) + _2846;
    }
    else
    {
        _2991 = _2504;
        _2993 = _2506;
        _2995 = _2508;
        _2997 = _2842;
        _2999 = _2844;
        _3001 = _2846;
    }
    float _4931 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4942 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4953 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    uint _3021 = _919 + 6u;
    float _3029 = _881 / cbSceneParam._m0[86u].x;
    float _3030 = _882 / cbSceneParam._m0[86u].y;
    vec4 _3044 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3046 = _3044.x;
    float _3047 = _3044.y;
    float _3048 = _3044.z;
    float _3049 = _3044.w;
    float _3120;
    float _3122;
    float _3124;
    float _3126;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _3083 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _3084 = _3083 / _816;
        float _3095 = _3084 * _866;
        float _3096 = _867 * _3084;
        float _3097 = (-0.0) - _3096;
        float _3098 = _3084 * _868;
        float _3100 = (cbSceneParam._m0[77u].w * _3097) / _3083;
        float _3101 = _3100 + cbSceneParam._m0[79u].w;
        float _3102 = cbSceneParam._m0[79u].w - _3096;
        float _3108 = sqrt(((_3095 * _3095) + (_3096 * _3096)) + (_3098 * _3098));
        float _3111 = (1.0 - (cbSceneParam._m0[77u].w / _3083)) * _3108;
        float _3116 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3118 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3271;
        if (abs((_3097 - _3100) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3271 = ((((_3101 > 0.0) ? exp2(_3116 * _3101) : (2.0 - exp2(_3118 * _3101))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3111;
        }
        else
        {
            float _3231 = 1.0 / cbSceneParam._m0[80u].x;
            float _3232 = isnan(_3102) ? _3101 : (isnan(_3101) ? _3102 : max(_3101, _3102));
            float _3233 = isnan(_3102) ? _3101 : (isnan(_3101) ? _3102 : min(_3101, _3102));
            float _3242 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : min(_3232, 0.0));
            float _3243 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : min(_3233, 0.0));
            _3271 = ((abs(_3108 / _3097) * cbSceneParam._m0[80u].y) * ((((_3242 - _3243) * 2.0) - ((exp2(_3116 * (isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0)))) - exp2(_3116 * (isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))))) * _3231)) - ((exp2(_3118 * _3242) - exp2(_3118 * _3243)) * _3231))) + (_3111 * cbSceneParam._m0[80u].z);
        }
        vec4 _3273 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, 1.0), 0.0);
        float _3282 = exp2((_3271 * (-1.44269502162933349609375)) * (1.0 - _3273.w));
        float _3283 = log2(_3282);
        float _3299 = log2(_3049);
        _3120 = (exp2(_3299 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].x)) * _3273.x) / cbSceneParam._m0[78u].x)) + _3046;
        _3122 = (exp2(_3299 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].y)) * _3273.y) / cbSceneParam._m0[78u].y)) + _3047;
        _3124 = (exp2(_3299 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].z)) * _3273.z) / cbSceneParam._m0[78u].z)) + _3048;
        _3126 = _3282 * _3049;
    }
    else
    {
        _3120 = _3046;
        _3122 = _3047;
        _3124 = _3048;
        _3126 = _3049;
    }
    float _3138 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3139 = _3138 == 3.0;
    float _3140 = log2(_3126);
    float _3147 = exp2(_3140 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2991 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _959))) + ((_2997 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1769)) * cbPerFrame._m0[3u].x));
    float _3148 = exp2(_3140 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2993 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _959))) + ((_2999 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1769)) * cbPerFrame._m0[3u].x));
    float _3149 = exp2(_3140 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2995 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _959))) + ((_3001 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1769)) * cbPerFrame._m0[3u].x));
    float _3158 = (_3138 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3158 * (_3139 ? _3147 : (_3147 + (cbSceneParam._m0[72u].w * _3120)));
    SV_Target.y = _3158 * (_3139 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3122)));
    SV_Target.z = _3158 * (_3139 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3124)));
    SV_Target.w = cbInstanceData._m0[_3021].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3021].w;
}


