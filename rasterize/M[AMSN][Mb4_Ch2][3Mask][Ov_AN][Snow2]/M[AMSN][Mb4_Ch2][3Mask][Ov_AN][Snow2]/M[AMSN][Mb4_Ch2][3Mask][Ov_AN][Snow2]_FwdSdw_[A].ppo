#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1379;
float _4047;
float _4048;
float _4049;
float _4050;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251;
    float _252;
    float _253;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
    }
    else
    {
        _251 = _237;
        _252 = _238;
        _253 = _239;
    }
    vec4 _276 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _301 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _312 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _276.x) * 2.0) - _301)) + 1.0;
    float _4059 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _313 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    vec4 _326 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _343 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _345 = _343.x;
    float _346 = _343.y;
    float _347 = _343.z;
    float _354 = ((_326.x - _345) * _313) + _345;
    float _355 = ((_326.y - _346) * _313) + _346;
    float _356 = ((_326.z - _347) * _313) + _347;
    float _362 = (((((1.0 - _276.y) * 2.0) - _301) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].z) + 1.0;
    float _4070 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    vec4 _375 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _386 = ((_375.x - _354) * _363) + _354;
    float _387 = ((_375.y - _355) * _363) + _355;
    float _388 = ((_375.z - _356) * _363) + _356;
    float _394 = (((((1.0 - _276.z) * 2.0) - _301) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].y) + 1.0;
    float _4081 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    vec4 _407 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w));
    float _420 = ((_407.z - _388) * _395) + _388;
    float _423 = ((((_407.x - _386) * _395) + _386) * 2.0) + (-1.0);
    float _425 = ((((_407.y - _387) * _395) + _387) * 2.0) + (-1.0);
    float _426 = dot(vec2(_423, _425), vec2(_423, _425));
    float _4092 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))));
    float _432 = fma(_431, _251, 0.0);
    float _433 = fma(_431, _252, 0.0);
    float _434 = fma(_431, _253, 0.0);
    float _438 = inversesqrt(dot(vec3(_432, _433, _434), vec3(_432, _433, _434)));
    float _446 = cbMtdParam._m0[14u].z + dot(vec4(_438 * _432, _438 * _433, _438 * _434, 0.0), vec4(cbMtdParam._m0[15u].w, cbMtdParam._m0[16u].xy, 0.0));
    float _4103 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    vec4 _466 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _471 = _466.x * cbMtdParam._m0[10u].x;
    float _472 = _466.y * cbMtdParam._m0[10u].y;
    float _473 = _466.z * cbMtdParam._m0[10u].z;
    vec4 _492 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _506 = (((_492.x * cbMtdParam._m0[11u].x) - _471) * _313) + _471;
    float _507 = (((_492.y * cbMtdParam._m0[11u].y) - _472) * _313) + _472;
    float _508 = (((_492.z * cbMtdParam._m0[11u].z) - _473) * _313) + _473;
    vec4 _526 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _540 = (((_526.x * cbMtdParam._m0[12u].x) - _506) * _363) + _506;
    float _541 = (((_526.y * cbMtdParam._m0[12u].y) - _507) * _363) + _507;
    float _542 = (((_526.z * cbMtdParam._m0[12u].z) - _508) * _363) + _508;
    vec4 _561 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w));
    vec4 _595 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _603 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_561.x * cbMtdParam._m0[13u].x) - _540) * _395) + _540)) * _595.x;
    float _606 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_561.y * cbMtdParam._m0[13u].y) - _541) * _395) + _541)) * _595.y;
    float _609 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_561.z * cbMtdParam._m0[13u].z) - _542) * _395) + _542)) * _595.z;
    vec4 _621 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _632 = ((_621.x - _603) * _447) + _603;
    float _633 = ((_621.y - _606) * _447) + _606;
    float _634 = ((_621.z - _609) * _447) + _609;
    vec4 _647 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _649 = _647.x;
    float _666 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _649) * _313) + _649;
    float _683 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x - _666) * _363) + _666;
    vec4 _712 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _714 = _712.x;
    float _4114 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _718 = (((((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _683) * _395) + _683) - _714) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) + _714;
    float _720 = _718 - (_718 * _447);
    vec4 _732 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _739 = (_732.x * 2.0) + (-1.0);
    float _740 = (_732.y * 2.0) + (-1.0);
    float _741 = dot(vec2(_739, _740), vec2(_739, _740));
    float _4125 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _749 = ((_732.z - _420) * _447) + _420;
    float _758 = ((sqrt(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) - _431) * _447) + _431;
    vec4 _772 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _782 = (((_739 - _423) * _447) + _423) + (((_772.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].w);
    float _783 = (((_740 - _425) * _447) + _425) + (((_772.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].w);
    float _786 = fma(_758, _251, fma(_783, _243 * TANGENT.x, (_229 * _221) * _782));
    float _789 = fma(_758, _252, fma(_783, _243 * TANGENT.y, (_229 * _222) * _782));
    float _792 = fma(_758, _253, fma(_783, _243 * TANGENT.z, (_229 * _223) * _782));
    float _796 = inversesqrt(dot(vec3(_786, _789, _792), vec3(_786, _789, _792)));
    float _797 = _796 * _786;
    float _798 = _796 * _789;
    float _799 = _796 * _792;
    float _4136 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _800 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _4147 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4158 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4169 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4180 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _804 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _820 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _870 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _860);
    float _871 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _860);
    float _872 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _860);
    float _876 = inversesqrt(dot(vec3(_870, _871, _872), vec3(_870, _871, _872)));
    float _877 = _870 * _876;
    float _878 = _871 * _876;
    float _879 = _872 * _876;
    vec4 _884 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _886 = _884.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1058 = sqrt(((_870 * _870) + (_871 * _871)) + (_872 * _872));
        float _1064 = (cbMatDynParam._m0[5u].x * _1058) + cbMatDynParam._m0[5u].y;
        float _4191 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1069 = (cbMatDynParam._m0[5u].z * _1058) + cbMatDynParam._m0[5u].w;
        float _4202 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) - _1065)) + _1065) < ((_886 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _897 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _898 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _916 = fma(_799, cbSceneParam._m0[5u].z, fma(_798, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _797));
    float _919 = fma(_799, cbSceneParam._m0[6u].z, fma(_798, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _797));
    float _922 = fma(_799, cbSceneParam._m0[7u].z, fma(_798, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _797));
    uint _935 = uint(roundEven(NORMAL.w)) * 13u;
    uint _936 = _935 + 9u;
    uint _937 = _936 + uint(cbMatDynParam._m0[0u].w);
    float _943 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * cbInstanceData._m0[_937].x;
    float _944 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * cbInstanceData._m0[_937].y;
    float _945 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * cbInstanceData._m0[_937].z;
    float _4213 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _4235 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _949 = 1.0 - _804;
    float _950 = _946 * _949;
    float _951 = _947 * _949;
    float _952 = _948 * _949;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _804;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _804;
    float _959 = (_948 + (-0.039999999105930328369140625)) * _804;
    float _960 = _957 + 0.039999999105930328369140625;
    float _962 = _958 + 0.039999999105930328369140625;
    float _963 = _959 + 0.039999999105930328369140625;
    vec4 _972 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _897, cbSceneParam._m0[86u].y * _898));
    float _975 = _972.x * TEXCOORD_4;
    float _976 = dot(vec3(_797, _798, _799), vec3(_877, _878, _879));
    float _979 = _976 * 2.0;
    float _983 = (_979 * _797) - _877;
    float _984 = (_979 * _798) - _878;
    float _985 = (_979 * _799) - _879;
    float _989 = abs(dot(vec3(_877, _878, _879), vec3(_797, _798, _799)));
    float _4246 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _991 = sqrt(_800);
    float _1004 = exp2((_991 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_991 * 3.0));
    float _1010 = (1.0 - _1004) * ((_991 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1011 = _1004 * _991;
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1378;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1103 = fma(_1047, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039));
        float _1107 = fma(_1047, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039));
        float _1111 = fma(_1047, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039));
        float _1136 = _1039 + _797;
        float _1137 = _1043 + _798;
        float _1138 = _1047 + _799;
        float _1148 = fma(_1138, cbModelParam._m0[26u].z, fma(_1137, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1136)) - _1103;
        float _1149 = fma(_1138, cbModelParam._m0[27u].z, fma(_1137, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1136)) - _1107;
        float _1150 = fma(_1138, cbModelParam._m0[28u].z, fma(_1137, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1136)) - _1111;
        float _1154 = inversesqrt(dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150)));
        float _1167 = ((_1154 * _1148) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1103 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1154 * _1149) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1107 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1154 * _1150) / cbModelParam._m0[34u].z) + ((((((_1111 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        float _1206 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1172.x + (-0.5));
        float _1208 = _1206 * (_1172.y + (-0.5));
        float _1209 = _1206 * (_1172.z + (-0.5));
        float _1216 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1179.x + (-0.5));
        float _1218 = _1216 * (_1179.y + (-0.5));
        float _1219 = _1216 * (_1179.z + (-0.5));
        float _1226 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1186.x + (-0.5));
        float _1228 = _1226 * (_1186.y + (-0.5));
        float _1229 = _1226 * (_1186.z + (-0.5));
        float _1236 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1193.x + (-0.5));
        float _1238 = _1236 * (_1193.y + (-0.5));
        float _1239 = _1236 * (_1193.z + (-0.5));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = _1207 * 0.5;
        float _1244 = _1217 * 0.5;
        float _1245 = _1227 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1260 = (dot(vec3(_797, _798, _799), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1270 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4294 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1272 + 1.0))) + _1277) * _1240;
        float _1287 = _1208 * 0.5;
        float _1288 = _1218 * 0.5;
        float _1289 = _1228 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_797, _798, _799), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4327 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1314 + 1.0))) + _1319) * _1241;
        float _1329 = _1209 * 0.5;
        float _1330 = _1219 * 0.5;
        float _1331 = _1229 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_797, _798, _799), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4360 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1356 + 1.0))) + _1361) * _1242;
        _1378 = _1209;
        _1380 = _1208;
        _1381 = _1207;
        _1382 = _1219;
        _1383 = _1218;
        _1384 = _1217;
        _1385 = _1229;
        _1386 = _1228;
        _1387 = _1227;
        _1388 = _1242;
        _1389 = _1241;
        _1390 = _1240;
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
    }
    else
    {
        _1378 = _1379;
        _1380 = _1379;
        _1381 = _1379;
        _1382 = _1379;
        _1383 = _1379;
        _1384 = _1379;
        _1385 = _1379;
        _1386 = _1379;
        _1387 = _1379;
        _1388 = _1379;
        _1389 = _1379;
        _1390 = _1379;
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
    }
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1422 = fma(_1047, cbModelParam._m0[30u].z, fma(_1043, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1039));
        float _1426 = fma(_1047, cbModelParam._m0[31u].z, fma(_1043, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1039));
        float _1430 = fma(_1047, cbModelParam._m0[32u].z, fma(_1043, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1039));
        float _1453 = _1039 + _797;
        float _1454 = _1043 + _798;
        float _1455 = _1047 + _799;
        float _1465 = fma(_1455, cbModelParam._m0[30u].z, fma(_1454, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1453)) - _1422;
        float _1466 = fma(_1455, cbModelParam._m0[31u].z, fma(_1454, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1453)) - _1426;
        float _1467 = fma(_1455, cbModelParam._m0[32u].z, fma(_1454, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1453)) - _1430;
        float _1471 = inversesqrt(dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467)));
        float _1484 = ((_1471 * _1465) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1422 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1471 * _1466) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1426 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1471 * _1467) / cbModelParam._m0[35u].z) + ((((((_1430 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        float _1521 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1488.x + (-0.5));
        float _1523 = _1521 * (_1488.y + (-0.5));
        float _1524 = _1521 * (_1488.z + (-0.5));
        float _1531 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1495.x + (-0.5));
        float _1533 = _1531 * (_1495.y + (-0.5));
        float _1534 = _1531 * (_1495.z + (-0.5));
        float _1541 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1502.x + (-0.5));
        float _1543 = _1541 * (_1502.y + (-0.5));
        float _1544 = _1541 * (_1502.z + (-0.5));
        float _1551 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1509.x + (-0.5));
        float _1553 = _1551 * (_1509.y + (-0.5));
        float _1554 = _1551 * (_1509.z + (-0.5));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = _1522 * 0.5;
        float _1559 = _1532 * 0.5;
        float _1560 = _1542 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_797, _798, _799), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4423 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1585 + 1.0))) + _1590) * _1555;
        float _1600 = _1523 * 0.5;
        float _1601 = _1533 * 0.5;
        float _1602 = _1543 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_797, _798, _799), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4456 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1627 + 1.0))) + _1632) * _1556;
        float _1642 = _1524 * 0.5;
        float _1643 = _1534 * 0.5;
        float _1644 = _1544 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_797, _798, _799), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4467 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4478 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4489 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_1669 + 1.0))) + _1674) * _1557;
        _1691 = _1524;
        _1692 = _1523;
        _1693 = _1522;
        _1694 = _1534;
        _1695 = _1533;
        _1696 = _1532;
        _1697 = _1544;
        _1698 = _1543;
        _1699 = _1542;
        _1700 = _1557;
        _1701 = _1556;
        _1702 = _1555;
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
    }
    else
    {
        _1691 = _1379;
        _1692 = _1379;
        _1693 = _1379;
        _1694 = _1379;
        _1695 = _1379;
        _1696 = _1379;
        _1697 = _1379;
        _1698 = _1379;
        _1699 = _1379;
        _1700 = _1379;
        _1701 = _1379;
        _1702 = _1379;
        _1703 = 0.0;
        _1704 = 0.0;
        _1705 = 0.0;
    }
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1391)) + _1391;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1392)) + _1392;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1393)) + _1393;
    float _1738 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1715));
    float _1759 = _983 * 0.5;
    float _1760 = _984 * 0.5;
    float _1761 = _985 * 0.5;
    float _1762 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1765 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1768 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1802;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1775 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1378, _1382, _1385, _1388));
        float _1779 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1783 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1790 = dot(vec4(cbModelParam._m0[39u]), vec4(_1759, _1760, _1761, 1.0));
        _1802 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1802 = 1.0;
    }
    float _1813;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1804 = dot(vec4(cbModelParam._m0[40u]), vec4(_1759, _1760, _1761, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1817 = (_1813 * cbModelParam._m0[1u].x) + (_1802 * (1.0 - cbModelParam._m0[1u].x));
    float _1827 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _800);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1827 : min(cbModelParam._m0[25u].z, _1827));
    float _1908;
    float _1910;
    float _1912;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1875 = fma(_1047, cbModelParam._m0[13u].z, fma(_1043, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1039)) + cbModelParam._m0[13u].w;
        float _1879 = fma(_1047, cbModelParam._m0[14u].z, fma(_1043, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1039)) + cbModelParam._m0[14u].w;
        float _1883 = fma(_1047, cbModelParam._m0[15u].z, fma(_1043, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1039)) + cbModelParam._m0[15u].w;
        float _1886 = fma(_985, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983));
        float _1889 = fma(_985, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983));
        float _1892 = fma(_985, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983));
        float _1920;
        if (_1886 > 0.0)
        {
            _1920 = abs((1.0 - _1875) / _1886);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1875 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1920 = frontier_phi_19_17_ladder;
        }
        float _2094;
        if (_1889 > 0.0)
        {
            _2094 = abs((1.0 - _1879) / _1889);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1879 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2094 = frontier_phi_28_24_ladder;
        }
        float _2389;
        if (_1892 > 0.0)
        {
            _2389 = abs((1.0 - _1883) / _1892);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1883 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2389 = frontier_phi_40_35_ladder;
        }
        float _2391 = isnan(_2094) ? _1920 : (isnan(_1920) ? _2094 : min(_1920, _2094));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1886) + _1875;
        float _2397 = (_2392 * _1889) + _1879;
        float _2398 = (_2392 * _1892) + _1883;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2399;
        float _2403 = _2399 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 > _2403) || ((_2397 < _2401) || ((_2396 < _2401) || (_2396 > _2403))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2398, cbModelParam._m0[9u].z, fma(_2397, cbModelParam._m0[9u].y, _2396 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2398, cbModelParam._m0[10u].z, fma(_2397, cbModelParam._m0[10u].y, _2396 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2398, cbModelParam._m0[11u].z, fma(_2397, cbModelParam._m0[11u].y, _2396 * cbModelParam._m0[11u].x))), _1828);
            frontier_phi_18_40_ladder = _2543.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2543.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2543.x * cbModelParam._m0[1u].y;
        }
        _1908 = frontier_phi_18_40_ladder_2;
        _1910 = frontier_phi_18_40_ladder_1;
        _1912 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1896 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_983, _984, _985), _1828);
        _1908 = _1896.x * cbModelParam._m0[1u].y;
        _1910 = _1896.y * cbModelParam._m0[1u].y;
        _1912 = _1896.z * cbModelParam._m0[1u].y;
    }
    float _1916 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _800);
    float _1917 = isnan(_1916) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1916 : min(cbModelParam._m0[25u].w, _1916));
    float _2009;
    float _2011;
    float _2013;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1973 = fma(_1047, cbModelParam._m0[21u].z, fma(_1043, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1039)) + cbModelParam._m0[21u].w;
        float _1977 = fma(_1047, cbModelParam._m0[22u].z, fma(_1043, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1039)) + cbModelParam._m0[22u].w;
        float _1981 = fma(_1047, cbModelParam._m0[23u].z, fma(_1043, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1039)) + cbModelParam._m0[23u].w;
        float _1984 = fma(_985, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983));
        float _1987 = fma(_985, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983));
        float _1990 = fma(_985, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983));
        float _2099;
        if (_1984 > 0.0)
        {
            _2099 = abs((1.0 - _1973) / _1984);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1973 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2099 = frontier_phi_30_26_ladder;
        }
        float _2416;
        if (_1987 > 0.0)
        {
            _2416 = abs((1.0 - _1977) / _1987);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1977 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2416 = frontier_phi_42_37_ladder;
        }
        float _2754;
        if (_1990 > 0.0)
        {
            _2754 = abs((1.0 - _1981) / _1990);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1981 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2754 = frontier_phi_52_49_ladder;
        }
        float _2756 = isnan(_2416) ? _2099 : (isnan(_2099) ? _2416 : min(_2099, _2416));
        float _2757 = isnan(_2754) ? _2756 : (isnan(_2756) ? _2754 : min(_2756, _2754));
        float _2761 = (_2757 * _1984) + _1973;
        float _2762 = (_2757 * _1987) + _1977;
        float _2763 = (_2757 * _1990) + _1981;
        float _2764 = _2757 * 9.9999997473787516355514526367188e-05;
        float _2765 = (-1.0) - _2764;
        float _2767 = _2764 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2763 > _2767) || ((_2763 < _2765) || ((_2762 > _2767) || ((_2762 < _2765) || ((_2761 < _2765) || (_2761 > _2767))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2763, cbModelParam._m0[17u].z, fma(_2762, cbModelParam._m0[17u].y, _2761 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2763, cbModelParam._m0[18u].z, fma(_2762, cbModelParam._m0[18u].y, _2761 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2763, cbModelParam._m0[19u].z, fma(_2762, cbModelParam._m0[19u].y, _2761 * cbModelParam._m0[19u].x))), _1917);
            frontier_phi_27_52_ladder = _2885.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2885.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2885.x * cbModelParam._m0[1u].z;
        }
        _2009 = frontier_phi_27_52_ladder_2;
        _2011 = frontier_phi_27_52_ladder_1;
        _2013 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1993 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_983, _984, _985), _1917);
        _2009 = _1993.x * cbModelParam._m0[1u].z;
        _2011 = _1993.y * cbModelParam._m0[1u].z;
        _2013 = _1993.z * cbModelParam._m0[1u].z;
    }
    float _2026 = (((_1010 * _960) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_2009 - _1908)) + _1908);
    float _2028 = (((_1010 * _962) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_2011 - _1910)) + _1910);
    float _2030 = (((_1010 * _963) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_2013 - _1912)) + _1912);
    float _2033 = fma(_2030, cbSceneParam._m0[89u].z, fma(_2028, cbSceneParam._m0[89u].y, _2026 * cbSceneParam._m0[89u].x));
    float _2036 = fma(_2030, cbSceneParam._m0[90u].z, fma(_2028, cbSceneParam._m0[90u].y, _2026 * cbSceneParam._m0[90u].x));
    float _2039 = fma(_2030, cbSceneParam._m0[91u].z, fma(_2028, cbSceneParam._m0[91u].y, _2026 * cbSceneParam._m0[91u].x));
    float _2073 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2077 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2081 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2085 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2086 = _2073 / _2085;
    float _2087 = _2077 / _2085;
    float _2088 = _2081 / _2085;
    float _2235;
    float _2236;
    float _2237;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2115 = ((uint(_2088 > cbSceneParam._m0[59u].y) + uint(_2088 > cbSceneParam._m0[59u].x)) + uint(_2088 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2116 = _2115 + 43u;
        uint _2124 = _2115 + 44u;
        uint _2132 = _2115 + 45u;
        uint _2140 = _2115 + 46u;
        float _2151 = fma(_2085, cbSceneParam._m0[_2116].w, fma(_2081, cbSceneParam._m0[_2116].z, fma(_2077, cbSceneParam._m0[_2116].y, _2073 * cbSceneParam._m0[_2116].x)));
        float _2155 = fma(_2085, cbSceneParam._m0[_2124].w, fma(_2081, cbSceneParam._m0[_2124].z, fma(_2077, cbSceneParam._m0[_2124].y, _2073 * cbSceneParam._m0[_2124].x)));
        float _2163 = fma(_2085, cbSceneParam._m0[_2140].w, fma(_2081, cbSceneParam._m0[_2140].z, fma(_2077, cbSceneParam._m0[_2140].y, _2073 * cbSceneParam._m0[_2140].x)));
        float _2168 = cbSceneParam._m0[33u].z * _2163;
        float _2170 = cbSceneParam._m0[33u].w * _2163;
        float _2173 = fma(_2085, cbSceneParam._m0[_2132].w, fma(_2081, cbSceneParam._m0[_2132].z, fma(_2077, cbSceneParam._m0[_2132].y, _2073 * cbSceneParam._m0[_2132].x))) / _2163;
        float _2221 = (cbSceneParam._m0[33u].x - sqrt(((_2087 * _2087) + (_2086 * _2086)) + (_2088 * _2088))) * cbSceneParam._m0[33u].y;
        float _4615 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2228 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 + _2151) / _2163, (_2170 + _2155) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 + _2151) / _2163, (_2155 - _2168) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 - _2168) / _2163, (_2155 - _2170) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 - _2170) / _2163, (_2168 + _2155) / _2163), _2173), 0.0)).x), vec4(0.25)));
        _2235 = 1.0 - (_2228 * cbSceneParam._m0[34u].x);
        _2236 = 1.0 - (_2228 * cbSceneParam._m0[34u].y);
        _2237 = 1.0 - (_2228 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2235 = 1.0;
        _2236 = 1.0;
        _2237 = 1.0;
    }
    float _2301;
    float _2303;
    float _2305;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2289 = fma(_2085, cbSceneParam._m0[63u].w, fma(_2081, cbSceneParam._m0[63u].z, fma(_2077, cbSceneParam._m0[63u].y, _2073 * cbSceneParam._m0[63u].x)));
        float _2290 = fma(_2085, cbSceneParam._m0[60u].w, fma(_2081, cbSceneParam._m0[60u].z, fma(_2077, cbSceneParam._m0[60u].y, _2073 * cbSceneParam._m0[60u].x))) / _2289;
        float _2291 = fma(_2085, cbSceneParam._m0[61u].w, fma(_2081, cbSceneParam._m0[61u].z, fma(_2077, cbSceneParam._m0[61u].y, _2073 * cbSceneParam._m0[61u].x))) / _2289;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2290 >= cbSceneParam._m0[64u].x) && (_2291 >= cbSceneParam._m0[64u].y)) && (_2290 <= cbSceneParam._m0[64u].z)) && (_2291 <= cbSceneParam._m0[64u].w))
        {
            float _2429 = fma(_2085, cbSceneParam._m0[62u].w, fma(_2081, cbSceneParam._m0[62u].z, fma(_2077, cbSceneParam._m0[62u].y, _2073 * cbSceneParam._m0[62u].x))) / _2289;
            float _2433 = isnan(cbSceneParam._m0[41u].w) ? _2429 : (isnan(_2429) ? cbSceneParam._m0[41u].w : max(_2429, cbSceneParam._m0[41u].w));
            float _2476 = (cbSceneParam._m0[33u].x - sqrt(((_2087 * _2087) + (_2086 * _2086)) + (_2088 * _2088))) * cbSceneParam._m0[33u].y;
            float _4631 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
            float _2483 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2290, cbSceneParam._m0[33u].w + _2291), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2290, _2291 - cbSceneParam._m0[33u].z), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2290 - cbSceneParam._m0[33u].z, _2291 - cbSceneParam._m0[33u].w), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2290 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2291), _2433), 0.0)).x), vec4(0.25)));
            float _2487 = 1.0 - (_2483 * cbSceneParam._m0[34u].x);
            float _2488 = 1.0 - (_2483 * cbSceneParam._m0[34u].y);
            float _2489 = 1.0 - (_2483 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2488) ? _2236 : (isnan(_2236) ? _2488 : min(_2236, _2488));
            frontier_phi_39_38_ladder_1 = isnan(_2487) ? _2235 : (isnan(_2235) ? _2487 : min(_2235, _2487));
            frontier_phi_39_38_ladder_2 = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
        }
        else
        {
            frontier_phi_39_38_ladder = _2236;
            frontier_phi_39_38_ladder_1 = _2235;
            frontier_phi_39_38_ladder_2 = _2237;
        }
        _2301 = frontier_phi_39_38_ladder_1;
        _2303 = frontier_phi_39_38_ladder;
        _2305 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2301 = _2235;
        _2303 = _2236;
        _2305 = _2237;
    }
    uvec4 _2310 = floatBitsToUint(cbInstanceData._m0[_935 + 5u]);
    uint _2312 = _2310.x * 14u;
    uint _2313 = _2312 + 13u;
    float _2320 = _975 + (-1.0);
    float _2325 = (cbLight._m0[_2313].x * _2320) + 1.0;
    float _2326 = (cbLight._m0[_2313].y * _2320) + 1.0;
    float _2327 = (cbLight._m0[_2313].z * _2320) + 1.0;
    float _2328 = (cbLight._m0[_2313].w * _2320) + 1.0;
    uint _2329 = _2312 + 5u;
    float _2335 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
    uint _2339 = _2312 + 4u;
    float _2348 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
    uint _2352 = _2312 | 1u;
    float _2363 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_797, _798, _799));
    float _2366 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_797, _798, _799));
    float _4667 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _4678 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2371 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * 0.3183098733425140380859375;
    float _2373 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * 0.3183098733425140380859375;
    float _2380 = ((cbLight._m0[_2329].x * _2335) * _2373) + (((cbLight._m0[_2339].x * _2301) * _2348) * _2371);
    float _2381 = ((_2335 * cbLight._m0[_2329].y) * _2373) + (((cbLight._m0[_2339].y * _2303) * _2348) * _2371);
    float _2382 = ((_2335 * cbLight._m0[_2329].z) * _2373) + (((cbLight._m0[_2339].z * _2305) * _2348) * _2371);
    uvec4 _2386 = floatBitsToUint(cbLight._m0[_2312 + 12u]);
    bool _2388 = _2386.x == 0u;
    float _2490;
    float _2492;
    float _2494;
    if (_2388)
    {
        _2490 = _2380;
        _2492 = _2381;
        _2494 = _2382;
    }
    else
    {
        uint _2498 = _2312 + 6u;
        float _2514 = (dot(vec3(cbLight._m0[_2312 + 2u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2515 = _2514 * _2514;
        float _4689 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2516 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2517 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2490 = (((cbLight._m0[_2498].x * 0.3183098733425140380859375) * _2516) * _2517) + _2380;
        _2492 = (((cbLight._m0[_2498].y * 0.3183098733425140380859375) * _2516) * _2517) + _2381;
        _2494 = (((cbLight._m0[_2498].z * 0.3183098733425140380859375) * _2516) * _2517) + _2382;
    }
    bool _2497 = _2386.y == 0u;
    float _2552;
    float _2554;
    float _2556;
    if (_2497)
    {
        _2552 = _2490;
        _2554 = _2492;
        _2556 = _2494;
    }
    else
    {
        uint _2725 = _2312 + 7u;
        float _2741 = (dot(vec3(cbLight._m0[_2312 + 3u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2742 = _2741 * _2741;
        float _4705 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2743 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2744 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2552 = (((cbLight._m0[_2725].x * 0.3183098733425140380859375) * _2743) * _2744) + _2490;
        _2554 = (((cbLight._m0[_2725].y * 0.3183098733425140380859375) * _2743) * _2744) + _2492;
        _2556 = (((cbLight._m0[_2725].z * 0.3183098733425140380859375) * _2743) * _2744) + _2494;
    }
    uint _2559 = _2312 + 8u;
    float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _800) * 0.949999988079071044921875);
    float _2573 = _2572 * _2572;
    float _2574 = cbLight._m0[_2312].x + _877;
    float _2575 = cbLight._m0[_2312].y + _878;
    float _2576 = cbLight._m0[_2312].z + _879;
    float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
    float _2581 = _2580 * _2574;
    float _2582 = _2580 * _2575;
    float _2583 = _2580 * _2576;
    float _2584 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2312].xyz));
    float _4721 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _4732 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _2588 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2589 = dot(vec3(_797, _798, _799), vec3(_2581, _2582, _2583));
    float _4743 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
    float _2593 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2581, _2582, _2583));
    float _4754 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2597 = _2573 * _2573;
    float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
    float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0);
    float _2610 = 0.959999978542327880859375 - _957;
    float _2612 = 0.959999978542327880859375 - _958;
    float _2613 = 0.959999978542327880859375 - _959;
    float _2620 = 1.0 - _2573;
    float _2631 = (0.5 / (((_2588 * ((_2587 * _2620) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2620) + _2573) * _2587))) * _2587;
    float _4765 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2633 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
    uint _2647 = _2312 + 9u;
    float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _800) * 0.949999988079071044921875);
    float _2659 = _2658 * _2658;
    float _2660 = cbLight._m0[_2352].x + _877;
    float _2661 = cbLight._m0[_2352].y + _878;
    float _2662 = cbLight._m0[_2352].z + _879;
    float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
    float _2667 = _2666 * _2660;
    float _2668 = _2666 * _2661;
    float _2669 = _2666 * _2662;
    float _2670 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2352].xyz));
    float _4776 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2673 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2674 = dot(vec3(_797, _798, _799), vec3(_2667, _2668, _2669));
    float _4787 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2677 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
    float _2678 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2667, _2668, _2669));
    float _4798 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2682 = _2659 * _2659;
    float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
    float _2693 = exp2(log2(1.0 - (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) * 5.0);
    float _2700 = 1.0 - _2659;
    float _2710 = (0.5 / (((_2588 * ((_2673 * _2700) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2700) + _2659) * _2673))) * _2673;
    float _4809 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2712 = (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
    float _2722 = (((((_2693 * _2610) + _960) * cbLight._m0[_2647].x) * _2712) * _2335) + ((((cbLight._m0[_2559].x * _2301) * ((_2609 * _2610) + _960)) * _2633) * _2348);
    float _2723 = (((((_2693 * _2612) + _962) * cbLight._m0[_2647].y) * _2712) * _2335) + ((((cbLight._m0[_2559].y * _2303) * ((_2609 * _2612) + _962)) * _2633) * _2348);
    float _2724 = (((((_2693 * _2613) + _963) * cbLight._m0[_2647].z) * _2712) * _2335) + ((((cbLight._m0[_2559].z * _2305) * ((_2609 * _2613) + _963)) * _2633) * _2348);
    float _2780;
    float _2782;
    float _2784;
    if (_2388)
    {
        _2780 = _2722;
        _2782 = _2723;
        _2784 = _2724;
    }
    else
    {
        uint _2786 = _2312 + 2u;
        uint _2790 = _2312 + 10u;
        float _2804 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2786].w)) * _800) * 0.949999988079071044921875);
        float _2805 = _2804 * _2804;
        float _2806 = cbLight._m0[_2786].x + _877;
        float _2807 = cbLight._m0[_2786].y + _878;
        float _2808 = cbLight._m0[_2786].z + _879;
        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
        float _2813 = _2812 * _2806;
        float _2814 = _2812 * _2807;
        float _2815 = _2812 * _2808;
        float _2816 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2786].xyz));
        float _4820 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2820 = dot(vec3(_797, _798, _799), vec3(_2813, _2814, _2815));
        float _4831 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2823 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2824 = dot(vec3(cbLight._m0[_2786].xyz), vec3(_2813, _2814, _2815));
        float _4842 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2828 = _2805 * _2805;
        float _2832 = ((_2823 * _2823) * (_2828 + (-1.0))) + 1.0;
        float _2839 = exp2(log2(1.0 - (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) * 5.0);
        float _2846 = 1.0 - _2805;
        float _2856 = (0.5 / (((_2588 * ((_2819 * _2846) + _2805)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2846) + _2805) * _2819))) * _2819;
        float _4853 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2858 = (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2828 / ((_2832 * _2832) * 3.141590118408203125));
        float _2859 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2780 = (((((_2839 * _2610) + _960) * cbLight._m0[_2790].x) * _2858) * _2859) + _2722;
        _2782 = (((((_2839 * _2612) + _962) * cbLight._m0[_2790].y) * _2858) * _2859) + _2723;
        _2784 = (((((_2839 * _2613) + _963) * cbLight._m0[_2790].z) * _2858) * _2859) + _2724;
    }
    float _2890;
    float _2892;
    float _2894;
    if (_2497)
    {
        _2890 = _2780;
        _2892 = _2782;
        _2894 = _2784;
    }
    else
    {
        uint _2901 = _2312 + 3u;
        uint _2905 = _2312 + 11u;
        float _2919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2901].w)) * _800) * 0.949999988079071044921875);
        float _2920 = _2919 * _2919;
        float _2921 = cbLight._m0[_2901].x + _877;
        float _2922 = cbLight._m0[_2901].y + _878;
        float _2923 = cbLight._m0[_2901].z + _879;
        float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
        float _2928 = _2927 * _2921;
        float _2929 = _2927 * _2922;
        float _2930 = _2927 * _2923;
        float _2931 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2901].xyz));
        float _4869 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2934 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2935 = dot(vec3(_797, _798, _799), vec3(_2928, _2929, _2930));
        float _4880 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2938 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
        float _2939 = dot(vec3(cbLight._m0[_2901].xyz), vec3(_2928, _2929, _2930));
        float _4891 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2943 = _2920 * _2920;
        float _2947 = ((_2938 * _2938) * (_2943 + (-1.0))) + 1.0;
        float _2954 = exp2(log2(1.0 - (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) * 5.0);
        float _2961 = 1.0 - _2920;
        float _2971 = (0.5 / (((_2588 * ((_2934 * _2961) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2961) + _2920) * _2934))) * _2934;
        float _4902 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2973 = (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2943 / ((_2947 * _2947) * 3.141590118408203125));
        float _2974 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2890 = (((((_2954 * _2610) + _960) * cbLight._m0[_2905].x) * _2973) * _2974) + _2780;
        _2892 = (((((_2954 * _2612) + _962) * cbLight._m0[_2905].y) * _2973) * _2974) + _2782;
        _2894 = (((((_2954 * _2613) + _963) * cbLight._m0[_2905].z) * _2973) * _2974) + _2784;
    }
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    if (_2310.y == 0u)
    {
        uvec4 _2995 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2996 = _2995.x;
        uint _3007 = uint((float(_2995.y) * floor(float(uint(cbSceneParam._m0[85u].y * _898) / _2996))) + floor(float(uint(cbSceneParam._m0[85u].x * _897) / _2996)));
        float _3017 = (log2(_2088 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3018 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
        uint _3021 = uint(isnan(14.0) ? _3018 : (isnan(_3018) ? 14.0 : min(_3018, 14.0)));
        uvec4 _3026 = texelFetch(g_lightClusterGridBuffer, int(((_3021 << 2u) + (_3007 << 6u)) >> 2u));
        uint _3027 = _3026.x;
        uint _3028 = _2995.z;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((((1u << ((_3028 >> 4u) & 15u)) + 4294967295u) & _3027) == 0u) || ((_3028 & 240u) == 0u))
        {
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
        }
        else
        {
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            uint _3264 = 0u;
            uint _3273;
            bool _3274;
            for (;;)
            {
                _3273 = texelFetch(g_lightClassification, int((((_3021 << 5u) + (_3007 << 9u)) + (_3264 << 2u)) >> 2u)).x;
                _3274 = _3273 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3274)
                {
                    frontier_phi_73_pred = _3263;
                    frontier_phi_73_pred_1 = _3262;
                    frontier_phi_73_pred_2 = _3261;
                    frontier_phi_73_pred_3 = _3260;
                    frontier_phi_73_pred_4 = _3259;
                    frontier_phi_73_pred_5 = _3258;
                }
                else
                {
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    uint _3409;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3273;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    for (;;)
                    {
                        uint _3413 = uint(findLSB(_3409)) + (_3264 << 5u);
                        uint _3410 = (_3409 + 4294967295u) & _3409;
                        uint _3415 = _3413 * 48u;
                        vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3415)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 3u)).x));
                        uint _3435 = (_3413 * 48u) + 4u;
                        vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 3u)).x));
                        uint _3454 = (_3413 * 48u) + 8u;
                        vec3 _3465 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x));
                        float _3469 = _3429.x - _2086;
                        float _3470 = _3429.y - _2087;
                        float _3471 = _3429.z - _2088;
                        float _3472 = dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471));
                        float _3475 = inversesqrt(_3472);
                        float _3476 = _3475 * _3469;
                        float _3477 = _3475 * _3470;
                        float _3478 = _3475 * _3471;
                        float _3479 = dot(vec3(_916, _919, _922), vec3(_3476, _3477, _3478));
                        float _3484 = 1.0 - (_3472 * _3429.w);
                        float _4928 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3485 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                        float _3486 = sqrt(_3472) * _3448.w;
                        float _3489 = 1.39999997615814208984375 / (_3486 + 1.39999997615814208984375);
                        float _3490 = _3489 * _3489;
                        float _3493 = ((1.0 - _3490) * _3479) + _3490;
                        float _3496 = _3486 * _3486;
                        float _3500 = ((isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0))) * _3485) / ((_3496 * 0.699999988079071044921875) + 1.0);
                        float _3504 = (-0.0) - _2086;
                        float _3505 = (-0.0) - _2087;
                        float _3506 = (-0.0) - _2088;
                        float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                        float _3511 = _3510 * _3504;
                        float _3512 = _3510 * _3505;
                        float _3513 = _3510 * _3506;
                        float _3520 = exp2(log2(1.0 / ((_3496 * 3.5) + 5.0)) * 0.25);
                        float _3521 = 1.0 - _991;
                        float _3528 = sqrt(1.0 - ((1.0 - (_3521 * _3521)) * (1.0 - (_3520 * _3520))));
                        float _3529 = _3528 * _3528;
                        float _3530 = _3529 * _3529;
                        float _3531 = _3511 + _3476;
                        float _3532 = _3512 + _3477;
                        float _3533 = _3513 + _3478;
                        float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                        float _3541 = dot(vec3(_916, _919, _922), vec3(_3511, _3512, _3513));
                        float _4944 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3544 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3545 = dot(vec3(_916, _919, _922), vec3(_3537 * _3531, _3537 * _3532, _3537 * _3533));
                        float _4955 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                        float _3548 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3552 = ((_3548 * _3548) * (_3530 + (-1.0))) + 1.0;
                        float _3553 = _3489 * _3529;
                        float _3554 = _3553 * _3553;
                        float _3557 = ((1.0 - _3554) * _3479) + _3554;
                        float _4966 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                        float _3558 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                        float _3559 = 1.0 - _3529;
                        float _3569 = (0.5 / (((_3558 * ((_3544 * _3559) + _3529)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3529) * _3544))) * _3558;
                        float _4977 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                        float _3580 = (((_3530 * 3.1415927410125732421875) * (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) / ((_3552 * _3552) * ((_3496 * 2.1991131305694580078125) + 3.141590118408203125))) * _3485;
                        _3333 = (_3500 * _3448.x) + _3406;
                        _3334 = (_3500 * _3448.y) + _3407;
                        _3335 = (_3500 * _3448.z) + _3408;
                        _3330 = (_3580 * _3465.x) + _3403;
                        _3331 = (_3580 * _3465.y) + _3404;
                        _3332 = (_3580 * _3465.z) + _3405;
                        if (_3410 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3410;
                        }
                    }
                    frontier_phi_73_pred = _3335;
                    frontier_phi_73_pred_1 = _3334;
                    frontier_phi_73_pred_2 = _3333;
                    frontier_phi_73_pred_3 = _3332;
                    frontier_phi_73_pred_4 = _3331;
                    frontier_phi_73_pred_5 = _3330;
                }
                _3117 = frontier_phi_73_pred;
                _3115 = frontier_phi_73_pred_1;
                _3113 = frontier_phi_73_pred_2;
                _3111 = frontier_phi_73_pred_3;
                _3109 = frontier_phi_73_pred_4;
                _3107 = frontier_phi_73_pred_5;
                uint _3265 = _3264 + 1u;
                if (_3265 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3258 = _3107;
                    _3259 = _3109;
                    _3260 = _3111;
                    _3261 = _3113;
                    _3262 = _3115;
                    _3263 = _3117;
                    _3264 = _3265;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
        }
        uvec4 _3120 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3121 = _3120.z;
        uint _3123 = (_3121 >> 8u) & 15u;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        if (((4294967295u << _3123) & _3027) == 0u)
        {
            _3226 = _3106;
            _3228 = _3108;
            _3230 = _3110;
            _3232 = _3112;
            _3234 = _3114;
            _3236 = _3116;
        }
        else
        {
            float _3251 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
            float _3252 = _3251 * _2086;
            float _3253 = _3251 * _2087;
            float _3254 = _3251 * _2088;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3123 < ((_3121 >> 12u) & 15u))
            {
                float _3227;
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3386 = _3106;
                float _3387 = _3108;
                float _3388 = _3110;
                float _3389 = _3112;
                float _3390 = _3114;
                float _3391 = _3116;
                uint _3392 = _3123;
                uint _3401;
                bool _3402;
                for (;;)
                {
                    _3401 = texelFetch(g_lightClassification, int((((_3021 << 5u) + (_3007 << 9u)) + (_3392 << 2u)) >> 2u)).x;
                    _3402 = _3401 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3402)
                    {
                        frontier_phi_84_pred = _3390;
                        frontier_phi_84_pred_1 = _3389;
                        frontier_phi_84_pred_2 = _3388;
                        frontier_phi_84_pred_3 = _3387;
                        frontier_phi_84_pred_4 = _3386;
                        frontier_phi_84_pred_5 = _3391;
                    }
                    else
                    {
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3607 = _3386;
                        float _3608 = _3387;
                        float _3609 = _3388;
                        float _3610 = _3389;
                        float _3611 = _3390;
                        float _3612 = _3391;
                        uint _3613 = _3401;
                        uint _3614;
                        vec4 _3639;
                        float _3640;
                        vec4 _3655;
                        vec3 _3667;
                        vec4 _3682;
                        vec4 _3698;
                        float _3745;
                        bool _3746;
                        for (;;)
                        {
                            uint _3624 = ((_3392 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3613));
                            _3614 = (_3613 + 4294967295u) & _3613;
                            uint _3626 = _3624 * 40u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            _3640 = _3639.w;
                            uint _3642 = (_3624 * 40u) + 4u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3624 * 40u) + 8u;
                            _3667 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x));
                            uint _3669 = (_3624 * 40u) + 16u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3685 = (_3624 * 40u) + 20u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3701 = (_3624 * 40u) + 24u;
                            vec4 _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            uint _3720 = (_3624 * 40u) + 28u;
                            vec4 _3733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 3u)).x));
                            _3745 = fma(_2088, _3733.z, fma(_2087, _3733.y, _3733.x * _2086)) + _3733.w;
                            _3746 = !((fma(_2088, _3714.z, fma(_2087, _3714.y, _3714.x * _2086)) + _3714.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3746)
                            {
                                float _3773 = _3639.x - _2086;
                                float _3774 = _3639.y - _2087;
                                float _3775 = _3639.z - _2088;
                                float _3776 = dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775));
                                float _3779 = inversesqrt(_3776);
                                float _3780 = _3779 * _3773;
                                float _3781 = _3779 * _3774;
                                float _3782 = _3779 * _3775;
                                float _3786 = 1.0 - (_3776 / (_3640 * _3640));
                                float _4988 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3787 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                                float _3791 = sqrt(_3776) * _3655.w;
                                float _3793 = 1.39999997615814208984375 / (_3791 + 1.39999997615814208984375);
                                float _3794 = _3793 * _3793;
                                float _3797 = ((1.0 - _3794) * dot(vec3(_3780, _3781, _3782), vec3(_916, _919, _922))) + _3794;
                                float _3800 = _3791 * _3791;
                                float _3804 = (fma(_2088, _3682.z, fma(_2087, _3682.y, _3682.x * _2086)) + _3682.w) / _3745;
                                float _3805 = (fma(_2088, _3698.z, fma(_2087, _3698.y, _3698.x * _2086)) + _3698.w) / _3745;
                                float _3809 = 1.0 - dot(vec2(_3804, _3805), vec2(_3804, _3805));
                                float _5004 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3810 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3811 = _3810 * (((isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0))) * _3787) / ((_3800 * 0.699999988079071044921875) + 1.0));
                                float _3823 = exp2(log2(1.0 / ((_3800 * 3.5) + 5.0)) * 0.25);
                                float _3824 = 1.0 - _991;
                                float _3831 = sqrt(1.0 - ((1.0 - (_3824 * _3824)) * (1.0 - (_3823 * _3823))));
                                float _3832 = _3831 * _3831;
                                float _3833 = _3832 * _3832;
                                float _3834 = _3780 - _3252;
                                float _3835 = _3781 - _3253;
                                float _3836 = _3782 - _3254;
                                float _3840 = inversesqrt(dot(vec3(_3834, _3835, _3836), vec3(_3834, _3835, _3836)));
                                float _3844 = dot(vec3(_916, _919, _922), vec3((-0.0) - _3252, (-0.0) - _3253, (-0.0) - _3254));
                                float _5015 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3847 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3848 = dot(vec3(_916, _919, _922), vec3(_3840 * _3834, _3840 * _3835, _3840 * _3836));
                                float _5026 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3851 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3855 = ((_3851 * _3851) * (_3833 + (-1.0))) + 1.0;
                                float _3856 = _3793 * _3832;
                                float _3857 = _3856 * _3856;
                                float _3863 = ((1.0 - _3857) * dot(vec3(_916, _919, _922), vec3(_3780, _3781, _3782))) + _3857;
                                float _5037 = isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0));
                                float _3864 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                                float _3865 = 1.0 - _3832;
                                float _3875 = (0.5 / (((_3864 * ((_3847 * _3865) + _3832)) + 9.9999999392252902907785028219223e-09) + (((_3864 * _3865) + _3832) * _3847))) * _3864;
                                float _5048 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3885 = (_3810 * _3787) * (((_3833 * 3.1415927410125732421875) * (isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0)))) / ((_3855 * _3855) * ((_3800 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3811 * _3655.y;
                                frontier_phi_90_pred_1 = _3811 * _3655.x;
                                frontier_phi_90_pred_2 = _3885 * _3667.z;
                                frontier_phi_90_pred_3 = _3885 * _3667.y;
                                frontier_phi_90_pred_4 = _3885 * _3667.x;
                                frontier_phi_90_pred_5 = _3811 * _3655.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3893 = frontier_phi_90_pred;
                            _3892 = frontier_phi_90_pred_1;
                            _3891 = frontier_phi_90_pred_2;
                            _3890 = frontier_phi_90_pred_3;
                            _3889 = frontier_phi_90_pred_4;
                            _3894 = frontier_phi_90_pred_5;
                            _3597 = _3892 + _3610;
                            _3598 = _3893 + _3611;
                            _3599 = _3894 + _3612;
                            _3594 = _3889 + _3607;
                            _3595 = _3890 + _3608;
                            _3596 = _3891 + _3609;
                            if (_3614 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3614;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3598;
                        frontier_phi_84_pred_1 = _3597;
                        frontier_phi_84_pred_2 = _3596;
                        frontier_phi_84_pred_3 = _3595;
                        frontier_phi_84_pred_4 = _3594;
                        frontier_phi_84_pred_5 = _3599;
                    }
                    _3235 = frontier_phi_84_pred;
                    _3233 = frontier_phi_84_pred_1;
                    _3231 = frontier_phi_84_pred_2;
                    _3229 = frontier_phi_84_pred_3;
                    _3227 = frontier_phi_84_pred_4;
                    _3237 = frontier_phi_84_pred_5;
                    uint _3393 = _3392 + 1u;
                    if (_3393 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3386 = _3227;
                        _3387 = _3229;
                        _3388 = _3231;
                        _3389 = _3233;
                        _3390 = _3235;
                        _3391 = _3237;
                        _3392 = _3393;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3237;
                frontier_phi_65_66_ladder_1 = _3233;
                frontier_phi_65_66_ladder_2 = _3235;
                frontier_phi_65_66_ladder_3 = _3229;
                frontier_phi_65_66_ladder_4 = _3227;
                frontier_phi_65_66_ladder_5 = _3231;
            }
            else
            {
                frontier_phi_65_66_ladder = _3116;
                frontier_phi_65_66_ladder_1 = _3112;
                frontier_phi_65_66_ladder_2 = _3114;
                frontier_phi_65_66_ladder_3 = _3108;
                frontier_phi_65_66_ladder_4 = _3106;
                frontier_phi_65_66_ladder_5 = _3110;
            }
            _3226 = frontier_phi_65_66_ladder_4;
            _3228 = frontier_phi_65_66_ladder_3;
            _3230 = frontier_phi_65_66_ladder_5;
            _3232 = frontier_phi_65_66_ladder_1;
            _3234 = frontier_phi_65_66_ladder_2;
            _3236 = frontier_phi_65_66_ladder;
        }
        float _3241 = isnan(1.0) ? _975 : (isnan(_975) ? 1.0 : min(_975, 1.0));
        _3039 = (_3241 * _3232) + _2552;
        _3041 = (_3241 * _3234) + _2554;
        _3043 = (_3241 * _3236) + _2556;
        _3045 = ((_3226 * _960) * _3241) + _2890;
        _3047 = ((_3228 * _962) * _3241) + _2892;
        _3049 = ((_3230 * _963) * _3241) + _2894;
    }
    else
    {
        _3039 = _2552;
        _3041 = _2554;
        _3043 = _2556;
        _3045 = _2890;
        _3047 = _2892;
        _3049 = _2894;
    }
    float _5064 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _5075 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _5086 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _3066 = ((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3039 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _975))) + ((_3045 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    float _3067 = ((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3041 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _975))) + ((_3047 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    float _3068 = ((isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0))) * (_3043 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _975))) + ((_3049 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    uint _3069 = _935 + 6u;
    float _3077 = _897 / cbSceneParam._m0[86u].x;
    float _3078 = _898 / cbSceneParam._m0[86u].y;
    vec4 _3092 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3077, _3078, (log2((isnan(cbSceneParam._m0[77u].w) ? _820 : (isnan(_820) ? cbSceneParam._m0[77u].w : min(_820, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3094 = _3092.x;
    float _3095 = _3092.y;
    float _3096 = _3092.z;
    float _3097 = _3092.w;
    float _3168;
    float _3170;
    float _3172;
    float _3174;
    if (_820 > cbSceneParam._m0[78u].w)
    {
        float _3131 = isnan(_820) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _820 : min(cbSceneParam._m0[80u].w, _820));
        float _3132 = _3131 / _820;
        float _3143 = _3132 * _870;
        float _3144 = _871 * _3132;
        float _3145 = (-0.0) - _3144;
        float _3146 = _3132 * _872;
        float _3148 = (cbSceneParam._m0[77u].w * _3145) / _3131;
        float _3149 = _3148 + cbSceneParam._m0[79u].w;
        float _3150 = cbSceneParam._m0[79u].w - _3144;
        float _3156 = sqrt(((_3143 * _3143) + (_3144 * _3144)) + (_3146 * _3146));
        float _3159 = (1.0 - (cbSceneParam._m0[77u].w / _3131)) * _3156;
        float _3164 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3166 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3343;
        if (abs((_3145 - _3148) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3343 = ((((_3149 > 0.0) ? exp2(_3164 * _3149) : (2.0 - exp2(_3166 * _3149))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3159;
        }
        else
        {
            float _3287 = 1.0 / cbSceneParam._m0[80u].x;
            float _3288 = isnan(_3150) ? _3149 : (isnan(_3149) ? _3150 : max(_3149, _3150));
            float _3289 = isnan(_3150) ? _3149 : (isnan(_3149) ? _3150 : min(_3149, _3150));
            float _3298 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : min(_3288, 0.0));
            float _3299 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : min(_3289, 0.0));
            _3343 = ((abs(_3156 / _3145) * cbSceneParam._m0[80u].y) * ((((_3298 - _3299) * 2.0) - ((exp2(_3164 * (isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0)))) - exp2(_3164 * (isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))))) * _3287)) - ((exp2(_3166 * _3298) - exp2(_3166 * _3299)) * _3287))) + (_3159 * cbSceneParam._m0[80u].z);
        }
        vec4 _3345 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3077, _3078, 1.0), 0.0);
        float _3354 = exp2((_3343 * (-1.44269502162933349609375)) * (1.0 - _3345.w));
        float _3355 = log2(_3354);
        float _3371 = log2(_3097);
        _3168 = (exp2(_3371 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3355 * cbSceneParam._m0[78u].x)) * _3345.x) / cbSceneParam._m0[78u].x)) + _3094;
        _3170 = (exp2(_3371 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3355 * cbSceneParam._m0[78u].y)) * _3345.y) / cbSceneParam._m0[78u].y)) + _3095;
        _3172 = (exp2(_3371 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3355 * cbSceneParam._m0[78u].z)) * _3345.z) / cbSceneParam._m0[78u].z)) + _3096;
        _3174 = _3354 * _3097;
    }
    else
    {
        _3168 = _3094;
        _3170 = _3095;
        _3172 = _3096;
        _3174 = _3097;
    }
    bool _3381;
    vec4 _3184;
    vec4 _3206;
    float _3208;
    float _3212;
    float _3213;
    float _3214;
    float _3215;
    bool _3225;
    for (;;)
    {
        _3184 = cbMatDynParam._m0[0u];
        float _3186 = roundEven(_3184.y);
        bool _3187 = _3186 == 3.0;
        float _3188 = log2(_3174);
        float _3195 = exp2(_3188 * cbSceneParam._m0[78u].x) * _3066;
        float _3196 = exp2(_3188 * cbSceneParam._m0[78u].y) * _3067;
        float _3197 = exp2(_3188 * cbSceneParam._m0[78u].z) * _3068;
        float _3204 = _886 + (-0.5);
        _3206 = cbMtdParam._m0[1u];
        _3208 = _3206.y * _3204;
        float _3211 = (_3186 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3212 = _3211 * (_3187 ? _3195 : (_3195 + (cbSceneParam._m0[72u].w * _3168)));
        _3213 = _3211 * (_3187 ? _3196 : (_3196 + (cbSceneParam._m0[72u].w * _3170)));
        _3214 = _3211 * (_3187 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3172)));
        _3215 = _3204 * 0.999000012874603271484375;
        _3225 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3225)
        {
            if ((cbInstanceData._m0[_935 + 7u].x + _3215) < 0.5)
            {
                _3381 = true;
                break;
            }
        }
        uint _3322 = _936 + uint(_3184.w);
        if ((cbInstanceData._m0[_3322].w < 1.0) && ((cbInstanceData._m0[_3322].w + _3215) < 0.5))
        {
            _3381 = true;
            break;
        }
        if ((_3208 + 1.0) < _3206.x)
        {
            _3381 = true;
            break;
        }
        _3381 = false;
        break;
    }
    float _3585;
    if (_3381)
    {
        discard_state = true;
        _3585 = 0.0;
    }
    else
    {
        _3585 = cbInstanceData._m0[_3069].w;
    }
    SV_Target.x = _3212;
    SV_Target.y = _3213;
    SV_Target.z = _3214;
    SV_Target.w = _3585;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3069].w;
    discard_exit();
}


