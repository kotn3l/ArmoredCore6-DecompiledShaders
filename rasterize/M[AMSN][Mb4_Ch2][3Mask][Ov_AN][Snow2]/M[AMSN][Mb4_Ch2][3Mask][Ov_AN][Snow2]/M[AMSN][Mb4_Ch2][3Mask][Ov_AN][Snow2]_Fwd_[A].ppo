#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1375;
float _3760;
float _3761;
float _3762;
float _3763;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    vec4 _272 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _297 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _308 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _272.x) * 2.0) - _297)) + 1.0;
    float _3772 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _309 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    vec4 _322 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _339 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _341 = _339.x;
    float _342 = _339.y;
    float _343 = _339.z;
    float _350 = ((_322.x - _341) * _309) + _341;
    float _351 = ((_322.y - _342) * _309) + _342;
    float _352 = ((_322.z - _343) * _309) + _343;
    float _358 = (((((1.0 - _272.y) * 2.0) - _297) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].z) + 1.0;
    float _3783 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    vec4 _371 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _382 = ((_371.x - _350) * _359) + _350;
    float _383 = ((_371.y - _351) * _359) + _351;
    float _384 = ((_371.z - _352) * _359) + _352;
    float _390 = (((((1.0 - _272.z) * 2.0) - _297) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].y) + 1.0;
    float _3794 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    vec4 _403 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w));
    float _416 = ((_403.z - _384) * _391) + _384;
    float _419 = ((((_403.x - _382) * _391) + _382) * 2.0) + (-1.0);
    float _421 = ((((_403.y - _383) * _391) + _383) * 2.0) + (-1.0);
    float _422 = dot(vec2(_419, _421), vec2(_419, _421));
    float _3805 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _427 = sqrt(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))));
    float _428 = fma(_427, _247, 0.0);
    float _429 = fma(_427, _248, 0.0);
    float _430 = fma(_427, _249, 0.0);
    float _434 = inversesqrt(dot(vec3(_428, _429, _430), vec3(_428, _429, _430)));
    float _442 = cbMtdParam._m0[14u].z + dot(vec4(_434 * _428, _434 * _429, _434 * _430, 0.0), vec4(cbMtdParam._m0[15u].w, cbMtdParam._m0[16u].xy, 0.0));
    float _3816 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    vec4 _462 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _467 = _462.x * cbMtdParam._m0[10u].x;
    float _468 = _462.y * cbMtdParam._m0[10u].y;
    float _469 = _462.z * cbMtdParam._m0[10u].z;
    vec4 _488 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _502 = (((_488.x * cbMtdParam._m0[11u].x) - _467) * _309) + _467;
    float _503 = (((_488.y * cbMtdParam._m0[11u].y) - _468) * _309) + _468;
    float _504 = (((_488.z * cbMtdParam._m0[11u].z) - _469) * _309) + _469;
    vec4 _522 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _536 = (((_522.x * cbMtdParam._m0[12u].x) - _502) * _359) + _502;
    float _537 = (((_522.y * cbMtdParam._m0[12u].y) - _503) * _359) + _503;
    float _538 = (((_522.z * cbMtdParam._m0[12u].z) - _504) * _359) + _504;
    vec4 _557 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w));
    vec4 _591 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _599 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_557.x * cbMtdParam._m0[13u].x) - _536) * _391) + _536)) * _591.x;
    float _602 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_557.y * cbMtdParam._m0[13u].y) - _537) * _391) + _537)) * _591.y;
    float _605 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_557.z * cbMtdParam._m0[13u].z) - _538) * _391) + _538)) * _591.z;
    vec4 _617 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _628 = ((_617.x - _599) * _443) + _599;
    float _629 = ((_617.y - _602) * _443) + _602;
    float _630 = ((_617.z - _605) * _443) + _605;
    vec4 _643 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _645 = _643.x;
    float _662 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _645) * _309) + _645;
    float _679 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x - _662) * _359) + _662;
    vec4 _708 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _710 = _708.x;
    float _3827 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _714 = (((((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _679) * _391) + _679) - _710) * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) + _710;
    float _716 = _714 - (_714 * _443);
    vec4 _728 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _735 = (_728.x * 2.0) + (-1.0);
    float _736 = (_728.y * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _3838 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _745 = ((_728.z - _416) * _443) + _416;
    float _754 = ((sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) - _427) * _443) + _427;
    vec4 _768 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _778 = (((_735 - _419) * _443) + _419) + (((_768.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].w);
    float _779 = (((_736 - _421) * _443) + _421) + (((_768.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].w);
    float _782 = fma(_754, _247, fma(_779, _239 * TANGENT.x, (_225 * _217) * _778));
    float _785 = fma(_754, _248, fma(_779, _239 * TANGENT.y, (_225 * _218) * _778));
    float _788 = fma(_754, _249, fma(_779, _239 * TANGENT.z, (_225 * _219) * _778));
    float _792 = inversesqrt(dot(vec3(_782, _785, _788), vec3(_782, _785, _788)));
    float _793 = _792 * _782;
    float _794 = _792 * _785;
    float _795 = _792 * _788;
    float _3849 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _796 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3871 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3882 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3893 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _800 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _866 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _856);
    float _867 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _856);
    float _868 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _856);
    float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
    float _873 = _866 * _872;
    float _874 = _867 * _872;
    float _875 = _868 * _872;
    vec4 _880 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _882 = _880.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1054 = sqrt(((_866 * _866) + (_867 * _867)) + (_868 * _868));
        float _1060 = (cbMatDynParam._m0[5u].x * _1054) + cbMatDynParam._m0[5u].y;
        float _3904 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1065 = (cbMatDynParam._m0[5u].z * _1054) + cbMatDynParam._m0[5u].w;
        float _3915 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) - _1061)) + _1061) < ((_882 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _893 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _894 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _912 = fma(_795, cbSceneParam._m0[5u].z, fma(_794, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _793));
    float _915 = fma(_795, cbSceneParam._m0[6u].z, fma(_794, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _793));
    float _918 = fma(_795, cbSceneParam._m0[7u].z, fma(_794, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _793));
    uint _931 = uint(roundEven(NORMAL.w)) * 13u;
    uint _932 = _931 + 9u;
    uint _933 = _932 + uint(cbMatDynParam._m0[0u].w);
    float _939 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_933].x;
    float _940 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_933].y;
    float _941 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_933].z;
    float _3926 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _945 = 1.0 - _800;
    float _946 = _942 * _945;
    float _947 = _943 * _945;
    float _948 = _944 * _945;
    float _953 = (_942 + (-0.039999999105930328369140625)) * _800;
    float _954 = (_943 + (-0.039999999105930328369140625)) * _800;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _800;
    float _956 = _953 + 0.039999999105930328369140625;
    float _958 = _954 + 0.039999999105930328369140625;
    float _959 = _955 + 0.039999999105930328369140625;
    vec4 _968 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _893, cbSceneParam._m0[86u].y * _894));
    float _971 = _968.x * TEXCOORD_4;
    float _972 = dot(vec3(_793, _794, _795), vec3(_873, _874, _875));
    float _975 = _972 * 2.0;
    float _979 = (_975 * _793) - _873;
    float _980 = (_975 * _794) - _874;
    float _981 = (_975 * _795) - _875;
    float _985 = abs(dot(vec3(_873, _874, _875), vec3(_793, _794, _795)));
    float _3959 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _987 = sqrt(_796);
    float _1000 = exp2((_987 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_987 * 3.0));
    float _1006 = (1.0 - _1000) * ((_987 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1007 = _1000 * _987;
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1374;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1099 = fma(_1043, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1035));
        float _1103 = fma(_1043, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1035));
        float _1107 = fma(_1043, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1035));
        float _1132 = _1035 + _793;
        float _1133 = _1039 + _794;
        float _1134 = _1043 + _795;
        float _1144 = fma(_1134, cbModelParam._m0[26u].z, fma(_1133, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1132)) - _1099;
        float _1145 = fma(_1134, cbModelParam._m0[27u].z, fma(_1133, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1132)) - _1103;
        float _1146 = fma(_1134, cbModelParam._m0[28u].z, fma(_1133, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1132)) - _1107;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1099 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1103 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[34u].z) + ((((((_1107 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1202 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1168.x + (-0.5));
        float _1204 = _1202 * (_1168.y + (-0.5));
        float _1205 = _1202 * (_1168.z + (-0.5));
        float _1212 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1175.x + (-0.5));
        float _1214 = _1212 * (_1175.y + (-0.5));
        float _1215 = _1212 * (_1175.z + (-0.5));
        float _1222 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1182.x + (-0.5));
        float _1224 = _1222 * (_1182.y + (-0.5));
        float _1225 = _1222 * (_1182.z + (-0.5));
        float _1232 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1189.x + (-0.5));
        float _1234 = _1232 * (_1189.y + (-0.5));
        float _1235 = _1232 * (_1189.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1256 = (dot(vec3(_793, _794, _795), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1266 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4007 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1268 + 1.0))) + _1273) * _1236;
        float _1283 = _1204 * 0.5;
        float _1284 = _1214 * 0.5;
        float _1285 = _1224 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_793, _794, _795), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4040 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1310 + 1.0))) + _1315) * _1237;
        float _1325 = _1205 * 0.5;
        float _1326 = _1215 * 0.5;
        float _1327 = _1225 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_793, _794, _795), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4073 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1352 + 1.0))) + _1357) * _1238;
        _1374 = _1205;
        _1376 = _1204;
        _1377 = _1203;
        _1378 = _1215;
        _1379 = _1214;
        _1380 = _1213;
        _1381 = _1225;
        _1382 = _1224;
        _1383 = _1223;
        _1384 = _1238;
        _1385 = _1237;
        _1386 = _1236;
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
    }
    else
    {
        _1374 = _1375;
        _1376 = _1375;
        _1377 = _1375;
        _1378 = _1375;
        _1379 = _1375;
        _1380 = _1375;
        _1381 = _1375;
        _1382 = _1375;
        _1383 = _1375;
        _1384 = _1375;
        _1385 = _1375;
        _1386 = _1375;
        _1387 = 0.0;
        _1388 = 0.0;
        _1389 = 0.0;
    }
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1418 = fma(_1043, cbModelParam._m0[30u].z, fma(_1039, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1035));
        float _1422 = fma(_1043, cbModelParam._m0[31u].z, fma(_1039, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1035));
        float _1426 = fma(_1043, cbModelParam._m0[32u].z, fma(_1039, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1035));
        float _1449 = _1035 + _793;
        float _1450 = _1039 + _794;
        float _1451 = _1043 + _795;
        float _1461 = fma(_1451, cbModelParam._m0[30u].z, fma(_1450, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1449)) - _1418;
        float _1462 = fma(_1451, cbModelParam._m0[31u].z, fma(_1450, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1449)) - _1422;
        float _1463 = fma(_1451, cbModelParam._m0[32u].z, fma(_1450, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1449)) - _1426;
        float _1467 = inversesqrt(dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463)));
        float _1480 = ((_1467 * _1461) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1418 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1467 * _1462) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1422 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1467 * _1463) / cbModelParam._m0[35u].z) + ((((((_1426 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        float _1517 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1484.x + (-0.5));
        float _1519 = _1517 * (_1484.y + (-0.5));
        float _1520 = _1517 * (_1484.z + (-0.5));
        float _1527 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1491.x + (-0.5));
        float _1529 = _1527 * (_1491.y + (-0.5));
        float _1530 = _1527 * (_1491.z + (-0.5));
        float _1537 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1498.x + (-0.5));
        float _1539 = _1537 * (_1498.y + (-0.5));
        float _1540 = _1537 * (_1498.z + (-0.5));
        float _1547 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1505.x + (-0.5));
        float _1549 = _1547 * (_1505.y + (-0.5));
        float _1550 = _1547 * (_1505.z + (-0.5));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = _1518 * 0.5;
        float _1555 = _1528 * 0.5;
        float _1556 = _1538 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_793, _794, _795), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4136 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1581 + 1.0))) + _1586) * _1551;
        float _1596 = _1519 * 0.5;
        float _1597 = _1529 * 0.5;
        float _1598 = _1539 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_793, _794, _795), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4169 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1623 + 1.0))) + _1628) * _1552;
        float _1638 = _1520 * 0.5;
        float _1639 = _1530 * 0.5;
        float _1640 = _1540 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_793, _794, _795), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4202 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1665 + 1.0))) + _1670) * _1553;
        _1687 = _1520;
        _1688 = _1519;
        _1689 = _1518;
        _1690 = _1530;
        _1691 = _1529;
        _1692 = _1528;
        _1693 = _1540;
        _1694 = _1539;
        _1695 = _1538;
        _1696 = _1553;
        _1697 = _1552;
        _1698 = _1551;
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
    }
    else
    {
        _1687 = _1375;
        _1688 = _1375;
        _1689 = _1375;
        _1690 = _1375;
        _1691 = _1375;
        _1692 = _1375;
        _1693 = _1375;
        _1694 = _1375;
        _1695 = _1375;
        _1696 = _1375;
        _1697 = _1375;
        _1698 = _1375;
        _1699 = 0.0;
        _1700 = 0.0;
        _1701 = 0.0;
    }
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1387)) + _1387;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1388)) + _1388;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1389)) + _1389;
    float _1734 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1712, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1712, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1712, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1711));
    float _1755 = _979 * 0.5;
    float _1756 = _980 * 0.5;
    float _1757 = _981 * 0.5;
    float _1758 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1761 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1764 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1798;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1771 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1374, _1378, _1381, _1384));
        float _1775 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1779 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1786 = dot(vec4(cbModelParam._m0[39u]), vec4(_1755, _1756, _1757, 1.0));
        _1798 = dot(vec3(isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1798 = 1.0;
    }
    float _1809;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1800 = dot(vec4(cbModelParam._m0[40u]), vec4(_1755, _1756, _1757, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1800) ? 0.0 : (isnan(0.0) ? _1800 : max(0.0, _1800))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1813 = (_1809 * cbModelParam._m0[1u].x) + (_1798 * (1.0 - cbModelParam._m0[1u].x));
    float _1823 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _796);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1823 : min(cbModelParam._m0[25u].z, _1823));
    float _1904;
    float _1906;
    float _1908;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1871 = fma(_1043, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1035)) + cbModelParam._m0[13u].w;
        float _1875 = fma(_1043, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1035)) + cbModelParam._m0[14u].w;
        float _1879 = fma(_1043, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1035)) + cbModelParam._m0[15u].w;
        float _1882 = fma(_981, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979));
        float _1885 = fma(_981, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979));
        float _1888 = fma(_981, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979));
        float _1916;
        if (_1882 > 0.0)
        {
            _1916 = abs((1.0 - _1871) / _1882);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1871 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1916 = frontier_phi_19_17_ladder;
        }
        float _2121;
        if (_1885 > 0.0)
        {
            _2121 = abs((1.0 - _1875) / _1885);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1875 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2121 = frontier_phi_28_24_ladder;
        }
        float _2375;
        if (_1888 > 0.0)
        {
            _2375 = abs((1.0 - _1879) / _1888);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1879 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2375 = frontier_phi_40_35_ladder;
        }
        float _2377 = isnan(_2121) ? _1916 : (isnan(_1916) ? _2121 : min(_1916, _2121));
        float _2378 = isnan(_2375) ? _2377 : (isnan(_2377) ? _2375 : min(_2377, _2375));
        float _2382 = (_2378 * _1882) + _1871;
        float _2383 = (_2378 * _1885) + _1875;
        float _2384 = (_2378 * _1888) + _1879;
        float _2385 = _2378 * 9.9999997473787516355514526367188e-05;
        float _2387 = (-1.0) - _2385;
        float _2389 = _2385 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2384 > _2389) || ((_2384 < _2387) || ((_2383 > _2389) || ((_2383 < _2387) || ((_2382 < _2387) || (_2382 > _2389))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2384, cbModelParam._m0[9u].z, fma(_2383, cbModelParam._m0[9u].y, _2382 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2384, cbModelParam._m0[10u].z, fma(_2383, cbModelParam._m0[10u].y, _2382 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2384, cbModelParam._m0[11u].z, fma(_2383, cbModelParam._m0[11u].y, _2382 * cbModelParam._m0[11u].x))), _1824);
            frontier_phi_18_40_ladder = _2512.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2512.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2512.x * cbModelParam._m0[1u].y;
        }
        _1904 = frontier_phi_18_40_ladder_2;
        _1906 = frontier_phi_18_40_ladder_1;
        _1908 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1892 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_979, _980, _981), _1824);
        _1904 = _1892.x * cbModelParam._m0[1u].y;
        _1906 = _1892.y * cbModelParam._m0[1u].y;
        _1908 = _1892.z * cbModelParam._m0[1u].y;
    }
    float _1912 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _796);
    float _1913 = isnan(_1912) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1912 : min(cbModelParam._m0[25u].w, _1912));
    float _2005;
    float _2007;
    float _2009;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1969 = fma(_1043, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1035)) + cbModelParam._m0[21u].w;
        float _1973 = fma(_1043, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1035)) + cbModelParam._m0[22u].w;
        float _1977 = fma(_1043, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1035)) + cbModelParam._m0[23u].w;
        float _1980 = fma(_981, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979));
        float _1983 = fma(_981, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979));
        float _1986 = fma(_981, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979));
        float _2126;
        if (_1980 > 0.0)
        {
            _2126 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2126 = frontier_phi_30_26_ladder;
        }
        float _2402;
        if (_1983 > 0.0)
        {
            _2402 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2402 = frontier_phi_42_37_ladder;
        }
        float _2615;
        if (_1986 > 0.0)
        {
            _2615 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2615 = frontier_phi_51_48_ladder;
        }
        float _2617 = isnan(_2402) ? _2126 : (isnan(_2126) ? _2402 : min(_2126, _2402));
        float _2618 = isnan(_2615) ? _2617 : (isnan(_2617) ? _2615 : min(_2617, _2615));
        float _2622 = (_2618 * _1980) + _1969;
        float _2623 = (_2618 * _1983) + _1973;
        float _2624 = (_2618 * _1986) + _1977;
        float _2625 = _2618 * 9.9999997473787516355514526367188e-05;
        float _2626 = (-1.0) - _2625;
        float _2628 = _2625 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2624 > _2628) || ((_2624 < _2626) || ((_2623 > _2628) || ((_2623 < _2626) || ((_2622 < _2626) || (_2622 > _2628))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2822 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2624, cbModelParam._m0[17u].z, fma(_2623, cbModelParam._m0[17u].y, _2622 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2624, cbModelParam._m0[18u].z, fma(_2623, cbModelParam._m0[18u].y, _2622 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2624, cbModelParam._m0[19u].z, fma(_2623, cbModelParam._m0[19u].y, _2622 * cbModelParam._m0[19u].x))), _1913);
            frontier_phi_27_51_ladder = _2822.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2822.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2822.x * cbModelParam._m0[1u].z;
        }
        _2005 = frontier_phi_27_51_ladder_2;
        _2007 = frontier_phi_27_51_ladder_1;
        _2009 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1989 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_979, _980, _981), _1913);
        _2005 = _1989.x * cbModelParam._m0[1u].z;
        _2007 = _1989.y * cbModelParam._m0[1u].z;
        _2009 = _1989.z * cbModelParam._m0[1u].z;
    }
    float _2022 = (((_1006 * _956) + _1007) * _971) * ((cbModelParam._m0[1u].w * (_2005 - _1904)) + _1904);
    float _2024 = (((_1006 * _958) + _1007) * _971) * ((cbModelParam._m0[1u].w * (_2007 - _1906)) + _1906);
    float _2026 = (((_1006 * _959) + _1007) * _971) * ((cbModelParam._m0[1u].w * (_2009 - _1908)) + _1908);
    float _2029 = fma(_2026, cbSceneParam._m0[89u].z, fma(_2024, cbSceneParam._m0[89u].y, _2022 * cbSceneParam._m0[89u].x));
    float _2032 = fma(_2026, cbSceneParam._m0[90u].z, fma(_2024, cbSceneParam._m0[90u].y, _2022 * cbSceneParam._m0[90u].x));
    float _2035 = fma(_2026, cbSceneParam._m0[91u].z, fma(_2024, cbSceneParam._m0[91u].y, _2022 * cbSceneParam._m0[91u].x));
    uvec4 _2045 = floatBitsToUint(cbInstanceData._m0[_931 + 5u]);
    uint _2047 = _2045.x * 14u;
    uint _2048 = _2047 + 13u;
    float _2055 = _971 + (-1.0);
    float _2060 = (cbLight._m0[_2048].x * _2055) + 1.0;
    float _2061 = (cbLight._m0[_2048].y * _2055) + 1.0;
    float _2062 = (cbLight._m0[_2048].z * _2055) + 1.0;
    float _2063 = (cbLight._m0[_2048].w * _2055) + 1.0;
    uint _2064 = _2047 + 5u;
    float _2070 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2074 = _2047 + 4u;
    float _2080 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
    uint _2084 = _2047 | 1u;
    float _2095 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_793, _794, _795));
    float _2098 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_793, _794, _795));
    float _4338 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _4349 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2103 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.3183098733425140380859375;
    float _2105 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2112 = ((cbLight._m0[_2064].x * _2070) * _2105) + ((cbLight._m0[_2074].x * _2080) * _2103);
    float _2113 = ((_2070 * cbLight._m0[_2064].y) * _2105) + ((_2080 * cbLight._m0[_2074].y) * _2103);
    float _2114 = ((_2070 * cbLight._m0[_2064].z) * _2105) + ((_2080 * cbLight._m0[_2074].z) * _2103);
    uvec4 _2118 = floatBitsToUint(cbLight._m0[_2047 + 12u]);
    bool _2120 = _2118.x == 0u;
    float _2131;
    float _2133;
    float _2135;
    if (_2120)
    {
        _2131 = _2112;
        _2133 = _2113;
        _2135 = _2114;
    }
    else
    {
        uint _2139 = _2047 + 6u;
        float _2155 = (dot(vec3(cbLight._m0[_2047 + 2u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2156 = _2155 * _2155;
        float _4360 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2157 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2158 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2131 = (((cbLight._m0[_2139].x * 0.3183098733425140380859375) * _2157) * _2158) + _2112;
        _2133 = (((cbLight._m0[_2139].y * 0.3183098733425140380859375) * _2157) * _2158) + _2113;
        _2135 = (((cbLight._m0[_2139].z * 0.3183098733425140380859375) * _2157) * _2158) + _2114;
    }
    bool _2138 = _2118.y == 0u;
    float _2176;
    float _2178;
    float _2180;
    if (_2138)
    {
        _2176 = _2131;
        _2178 = _2133;
        _2180 = _2135;
    }
    else
    {
        uint _2346 = _2047 + 7u;
        float _2362 = (dot(vec3(cbLight._m0[_2047 + 3u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2363 = _2362 * _2362;
        float _4376 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2364 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2365 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2176 = (((cbLight._m0[_2346].x * 0.3183098733425140380859375) * _2364) * _2365) + _2131;
        _2178 = (((cbLight._m0[_2346].y * 0.3183098733425140380859375) * _2364) * _2365) + _2133;
        _2180 = (((cbLight._m0[_2346].z * 0.3183098733425140380859375) * _2364) * _2365) + _2135;
    }
    uint _2183 = _2047 + 8u;
    float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _796) * 0.949999988079071044921875);
    float _2197 = _2196 * _2196;
    float _2198 = cbLight._m0[_2047].x + _873;
    float _2199 = cbLight._m0[_2047].y + _874;
    float _2200 = cbLight._m0[_2047].z + _875;
    float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
    float _2205 = _2204 * _2198;
    float _2206 = _2204 * _2199;
    float _2207 = _2204 * _2200;
    float _2208 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2047].xyz));
    float _4392 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _4403 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _2212 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2213 = dot(vec3(_793, _794, _795), vec3(_2205, _2206, _2207));
    float _4414 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2217 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2205, _2206, _2207));
    float _4425 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2221 = _2197 * _2197;
    float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
    float _2233 = exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0);
    float _2234 = 0.959999978542327880859375 - _953;
    float _2236 = 0.959999978542327880859375 - _954;
    float _2237 = 0.959999978542327880859375 - _955;
    float _2244 = 1.0 - _2197;
    float _2255 = (0.5 / (((_2212 * ((_2211 * _2244) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2244) + _2197) * _2211))) * _2211;
    float _4436 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2257 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
    uint _2268 = _2047 + 9u;
    float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _796) * 0.949999988079071044921875);
    float _2280 = _2279 * _2279;
    float _2281 = cbLight._m0[_2084].x + _873;
    float _2282 = cbLight._m0[_2084].y + _874;
    float _2283 = cbLight._m0[_2084].z + _875;
    float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
    float _2288 = _2287 * _2281;
    float _2289 = _2287 * _2282;
    float _2290 = _2287 * _2283;
    float _2291 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2084].xyz));
    float _4447 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2295 = dot(vec3(_793, _794, _795), vec3(_2288, _2289, _2290));
    float _4458 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2288, _2289, _2290));
    float _4469 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2280 * _2280;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2314 = exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0);
    float _2321 = 1.0 - _2280;
    float _2331 = (0.5 / (((_2212 * ((_2294 * _2321) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2321) + _2280) * _2294))) * _2294;
    float _4480 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2333 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    float _2343 = (((((_2314 * _2234) + _956) * cbLight._m0[_2268].x) * _2333) * _2070) + (((((_2233 * _2234) + _956) * cbLight._m0[_2183].x) * _2257) * _2080);
    float _2344 = (((((_2314 * _2236) + _958) * cbLight._m0[_2268].y) * _2333) * _2070) + (((((_2233 * _2236) + _958) * cbLight._m0[_2183].y) * _2257) * _2080);
    float _2345 = (((((_2314 * _2237) + _959) * cbLight._m0[_2268].z) * _2333) * _2070) + (((((_2233 * _2237) + _959) * cbLight._m0[_2183].z) * _2257) * _2080);
    float _2407;
    float _2409;
    float _2411;
    if (_2120)
    {
        _2407 = _2343;
        _2409 = _2344;
        _2411 = _2345;
    }
    else
    {
        uint _2413 = _2047 + 2u;
        uint _2417 = _2047 + 10u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _796) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _873;
        float _2434 = cbLight._m0[_2413].y + _874;
        float _2435 = cbLight._m0[_2413].z + _875;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2413].xyz));
        float _4491 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2447 = dot(vec3(_793, _794, _795), vec3(_2440, _2441, _2442));
        float _4502 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4513 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0);
        float _2473 = 1.0 - _2432;
        float _2483 = (0.5 / (((_2212 * ((_2446 * _2473) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2473) + _2432) * _2446))) * _2446;
        float _4524 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2485 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2486 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2407 = (((((_2466 * _2234) + _956) * cbLight._m0[_2417].x) * _2485) * _2486) + _2343;
        _2409 = (((((_2466 * _2236) + _958) * cbLight._m0[_2417].y) * _2485) * _2486) + _2344;
        _2411 = (((((_2466 * _2237) + _959) * cbLight._m0[_2417].z) * _2485) * _2486) + _2345;
    }
    float _2521;
    float _2523;
    float _2525;
    if (_2138)
    {
        _2521 = _2407;
        _2523 = _2409;
        _2525 = _2411;
    }
    else
    {
        uint _2532 = _2047 + 3u;
        uint _2536 = _2047 + 11u;
        float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2532].w)) * _796) * 0.949999988079071044921875);
        float _2551 = _2550 * _2550;
        float _2552 = cbLight._m0[_2532].x + _873;
        float _2553 = cbLight._m0[_2532].y + _874;
        float _2554 = cbLight._m0[_2532].z + _875;
        float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
        float _2559 = _2558 * _2552;
        float _2560 = _2558 * _2553;
        float _2561 = _2558 * _2554;
        float _2562 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2532].xyz));
        float _4540 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2566 = dot(vec3(_793, _794, _795), vec3(_2559, _2560, _2561));
        float _4551 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2570 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_2559, _2560, _2561));
        float _4562 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2574 = _2551 * _2551;
        float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
        float _2585 = exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0);
        float _2592 = 1.0 - _2551;
        float _2602 = (0.5 / (((_2212 * ((_2565 * _2592) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2592) + _2551) * _2565))) * _2565;
        float _4573 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2604 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
        float _2605 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2521 = (((((_2585 * _2234) + _956) * cbLight._m0[_2536].x) * _2604) * _2605) + _2407;
        _2523 = (((((_2585 * _2236) + _958) * cbLight._m0[_2536].y) * _2604) * _2605) + _2409;
        _2525 = (((((_2585 * _2237) + _959) * cbLight._m0[_2536].z) * _2604) * _2605) + _2411;
    }
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    float _2749;
    if (_2045.y == 0u)
    {
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2680;
        float _2682 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2680;
        float _2683 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2680;
        uvec4 _2695 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2696 = _2695.x;
        uint _2707 = uint((float(_2695.y) * floor(float(uint(cbSceneParam._m0[85u].y * _894) / _2696))) + floor(float(uint(cbSceneParam._m0[85u].x * _893) / _2696)));
        float _2717 = (log2(_2683 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2718 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        uint _2721 = uint(isnan(14.0) ? _2718 : (isnan(_2718) ? 14.0 : min(_2718, 14.0)));
        uvec4 _2726 = texelFetch(g_lightClusterGridBuffer, int(((_2721 << 2u) + (_2707 << 6u)) >> 2u));
        uint _2727 = _2726.x;
        uint _2728 = _2695.z;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((((1u << ((_2728 >> 4u) & 15u)) + 4294967295u) & _2727) == 0u) || ((_2728 & 240u) == 0u))
        {
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
        }
        else
        {
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            uint _2985 = 0u;
            uint _2994;
            bool _2995;
            for (;;)
            {
                _2994 = texelFetch(g_lightClassification, int((((_2721 << 5u) + (_2707 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                _2995 = _2994 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2995)
                {
                    frontier_phi_68_pred = _2981;
                    frontier_phi_68_pred_1 = _2984;
                    frontier_phi_68_pred_2 = _2983;
                    frontier_phi_68_pred_3 = _2982;
                    frontier_phi_68_pred_4 = _2980;
                    frontier_phi_68_pred_5 = _2979;
                }
                else
                {
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    uint _3130;
                    _3124 = _2979;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2994;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    for (;;)
                    {
                        uint _3134 = uint(findLSB(_3130)) + (_2985 << 5u);
                        uint _3131 = (_3130 + 4294967295u) & _3130;
                        uint _3136 = _3134 * 48u;
                        vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 3u)).x));
                        uint _3156 = (_3134 * 48u) + 4u;
                        vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3175 = (_3134 * 48u) + 8u;
                        vec3 _3186 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x));
                        float _3190 = _3150.x - _2681;
                        float _3191 = _3150.y - _2682;
                        float _3192 = _3150.z - _2683;
                        float _3193 = dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192));
                        float _3196 = inversesqrt(_3193);
                        float _3197 = _3196 * _3190;
                        float _3198 = _3196 * _3191;
                        float _3199 = _3196 * _3192;
                        float _3200 = dot(vec3(_912, _915, _918), vec3(_3197, _3198, _3199));
                        float _3205 = 1.0 - (_3193 * _3150.w);
                        float _4599 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3206 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3207 = sqrt(_3193) * _3169.w;
                        float _3210 = 1.39999997615814208984375 / (_3207 + 1.39999997615814208984375);
                        float _3211 = _3210 * _3210;
                        float _3214 = ((1.0 - _3211) * _3200) + _3211;
                        float _3217 = _3207 * _3207;
                        float _3221 = ((isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))) * _3206) / ((_3217 * 0.699999988079071044921875) + 1.0);
                        float _3225 = (-0.0) - _2681;
                        float _3226 = (-0.0) - _2682;
                        float _3227 = (-0.0) - _2683;
                        float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                        float _3232 = _3231 * _3225;
                        float _3233 = _3231 * _3226;
                        float _3234 = _3231 * _3227;
                        float _3242 = exp2(log2(1.0 / ((_3217 * 3.5) + 5.0)) * 0.25);
                        float _3243 = 1.0 - _987;
                        float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                        float _3251 = _3250 * _3250;
                        float _3252 = _3251 * _3251;
                        float _3253 = _3232 + _3197;
                        float _3254 = _3233 + _3198;
                        float _3255 = _3234 + _3199;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3263 = dot(vec3(_912, _915, _918), vec3(_3232, _3233, _3234));
                        float _4615 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3266 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3267 = dot(vec3(_912, _915, _918), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                        float _4626 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                        float _3275 = _3210 * _3251;
                        float _3276 = _3275 * _3275;
                        float _3279 = ((1.0 - _3276) * _3200) + _3276;
                        float _4637 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3280 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3281 = 1.0 - _3251;
                        float _3291 = (0.5 / (((_3280 * ((_3266 * _3281) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3280 * _3281) + _3251) * _3266))) * _3280;
                        float _4648 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3302 = (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) / ((_3274 * _3274) * ((_3217 * 2.1991131305694580078125) + 3.141590118408203125))) * _3206;
                        _3054 = (_3221 * _3169.x) + _3127;
                        _3055 = (_3221 * _3169.y) + _3128;
                        _3056 = (_3221 * _3169.z) + _3129;
                        _3051 = (_3302 * _3186.x) + _3124;
                        _3052 = (_3302 * _3186.y) + _3125;
                        _3053 = (_3302 * _3186.z) + _3126;
                        if (_3131 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3124 = _3051;
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3131;
                        }
                    }
                    frontier_phi_68_pred = _3053;
                    frontier_phi_68_pred_1 = _3056;
                    frontier_phi_68_pred_2 = _3055;
                    frontier_phi_68_pred_3 = _3054;
                    frontier_phi_68_pred_4 = _3052;
                    frontier_phi_68_pred_5 = _3051;
                }
                _2832 = frontier_phi_68_pred;
                _2838 = frontier_phi_68_pred_1;
                _2836 = frontier_phi_68_pred_2;
                _2834 = frontier_phi_68_pred_3;
                _2830 = frontier_phi_68_pred_4;
                _2828 = frontier_phi_68_pred_5;
                uint _2986 = _2985 + 1u;
                if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2979 = _2828;
                    _2980 = _2830;
                    _2981 = _2832;
                    _2982 = _2834;
                    _2983 = _2836;
                    _2984 = _2838;
                    _2985 = _2986;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
        }
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.z;
        uint _2844 = (_2842 >> 8u) & 15u;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((4294967295u << _2844) & _2727) == 0u)
        {
            _2947 = _2827;
            _2949 = _2829;
            _2951 = _2831;
            _2953 = _2833;
            _2955 = _2835;
            _2957 = _2837;
        }
        else
        {
            float _2972 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
            float _2973 = _2972 * _2681;
            float _2974 = _2972 * _2682;
            float _2975 = _2972 * _2683;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2844 < ((_2842 >> 12u) & 15u))
            {
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _3107 = _2827;
                float _3108 = _2829;
                float _3109 = _2831;
                float _3110 = _2833;
                float _3111 = _2835;
                float _3112 = _2837;
                uint _3113 = _2844;
                uint _3122;
                bool _3123;
                for (;;)
                {
                    _3122 = texelFetch(g_lightClassification, int((((_2721 << 5u) + (_2707 << 9u)) + (_3113 << 2u)) >> 2u)).x;
                    _3123 = _3122 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3123)
                    {
                        frontier_phi_79_pred = _3112;
                        frontier_phi_79_pred_1 = _3111;
                        frontier_phi_79_pred_2 = _3110;
                        frontier_phi_79_pred_3 = _3109;
                        frontier_phi_79_pred_4 = _3108;
                        frontier_phi_79_pred_5 = _3107;
                    }
                    else
                    {
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3329 = _3107;
                        float _3330 = _3108;
                        float _3331 = _3109;
                        float _3332 = _3110;
                        float _3333 = _3111;
                        float _3334 = _3112;
                        uint _3335 = _3122;
                        uint _3336;
                        vec4 _3361;
                        float _3362;
                        vec4 _3377;
                        vec3 _3389;
                        vec4 _3404;
                        vec4 _3420;
                        float _3467;
                        bool _3468;
                        for (;;)
                        {
                            uint _3346 = ((_3113 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3335));
                            _3336 = (_3335 + 4294967295u) & _3335;
                            uint _3348 = _3346 * 40u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3362 = _3361.w;
                            uint _3364 = (_3346 * 40u) + 4u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3346 * 40u) + 8u;
                            _3389 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x));
                            uint _3391 = (_3346 * 40u) + 16u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3407 = (_3346 * 40u) + 20u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3423 = (_3346 * 40u) + 24u;
                            vec4 _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3442 = (_3346 * 40u) + 28u;
                            vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            _3467 = fma(_2683, _3455.z, fma(_2682, _3455.y, _3455.x * _2681)) + _3455.w;
                            _3468 = !((fma(_2683, _3436.z, fma(_2682, _3436.y, _3436.x * _2681)) + _3436.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3468)
                            {
                                float _3495 = _3361.x - _2681;
                                float _3496 = _3361.y - _2682;
                                float _3497 = _3361.z - _2683;
                                float _3498 = dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497));
                                float _3501 = inversesqrt(_3498);
                                float _3502 = _3501 * _3495;
                                float _3503 = _3501 * _3496;
                                float _3504 = _3501 * _3497;
                                float _3508 = 1.0 - (_3498 / (_3362 * _3362));
                                float _4659 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3509 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3513 = sqrt(_3498) * _3377.w;
                                float _3515 = 1.39999997615814208984375 / (_3513 + 1.39999997615814208984375);
                                float _3516 = _3515 * _3515;
                                float _3519 = ((1.0 - _3516) * dot(vec3(_3502, _3503, _3504), vec3(_912, _915, _918))) + _3516;
                                float _3522 = _3513 * _3513;
                                float _3526 = (fma(_2683, _3404.z, fma(_2682, _3404.y, _3404.x * _2681)) + _3404.w) / _3467;
                                float _3527 = (fma(_2683, _3420.z, fma(_2682, _3420.y, _3420.x * _2681)) + _3420.w) / _3467;
                                float _3531 = 1.0 - dot(vec2(_3526, _3527), vec2(_3526, _3527));
                                float _4675 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3533 = _3532 * (((isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0))) * _3509) / ((_3522 * 0.699999988079071044921875) + 1.0));
                                float _3545 = exp2(log2(1.0 / ((_3522 * 3.5) + 5.0)) * 0.25);
                                float _3546 = 1.0 - _987;
                                float _3553 = sqrt(1.0 - ((1.0 - (_3546 * _3546)) * (1.0 - (_3545 * _3545))));
                                float _3554 = _3553 * _3553;
                                float _3555 = _3554 * _3554;
                                float _3556 = _3502 - _2973;
                                float _3557 = _3503 - _2974;
                                float _3558 = _3504 - _2975;
                                float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                                float _3566 = dot(vec3(_912, _915, _918), vec3((-0.0) - _2973, (-0.0) - _2974, (-0.0) - _2975));
                                float _4686 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3569 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3570 = dot(vec3(_912, _915, _918), vec3(_3562 * _3556, _3562 * _3557, _3562 * _3558));
                                float _4697 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3577 = ((_3573 * _3573) * (_3555 + (-1.0))) + 1.0;
                                float _3578 = _3515 * _3554;
                                float _3579 = _3578 * _3578;
                                float _3585 = ((1.0 - _3579) * dot(vec3(_912, _915, _918), vec3(_3502, _3503, _3504))) + _3579;
                                float _4708 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3587 = 1.0 - _3554;
                                float _3597 = (0.5 / (((_3586 * ((_3569 * _3587) + _3554)) + 9.9999999392252902907785028219223e-09) + (((_3586 * _3587) + _3554) * _3569))) * _3586;
                                float _4719 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3607 = (_3532 * _3509) * (((_3555 * 3.1415927410125732421875) * (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) / ((_3577 * _3577) * ((_3522 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3533 * _3377.z;
                                frontier_phi_85_pred_1 = _3533 * _3377.y;
                                frontier_phi_85_pred_2 = _3533 * _3377.x;
                                frontier_phi_85_pred_3 = _3607 * _3389.z;
                                frontier_phi_85_pred_4 = _3607 * _3389.y;
                                frontier_phi_85_pred_5 = _3607 * _3389.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3616 = frontier_phi_85_pred;
                            _3615 = frontier_phi_85_pred_1;
                            _3614 = frontier_phi_85_pred_2;
                            _3613 = frontier_phi_85_pred_3;
                            _3612 = frontier_phi_85_pred_4;
                            _3611 = frontier_phi_85_pred_5;
                            _3319 = _3614 + _3332;
                            _3320 = _3615 + _3333;
                            _3321 = _3616 + _3334;
                            _3316 = _3611 + _3329;
                            _3317 = _3612 + _3330;
                            _3318 = _3613 + _3331;
                            if (_3336 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3336;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3321;
                        frontier_phi_79_pred_1 = _3320;
                        frontier_phi_79_pred_2 = _3319;
                        frontier_phi_79_pred_3 = _3318;
                        frontier_phi_79_pred_4 = _3317;
                        frontier_phi_79_pred_5 = _3316;
                    }
                    _2958 = frontier_phi_79_pred;
                    _2956 = frontier_phi_79_pred_1;
                    _2954 = frontier_phi_79_pred_2;
                    _2952 = frontier_phi_79_pred_3;
                    _2950 = frontier_phi_79_pred_4;
                    _2948 = frontier_phi_79_pred_5;
                    uint _3114 = _3113 + 1u;
                    if (_3114 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3107 = _2948;
                        _3108 = _2950;
                        _3109 = _2952;
                        _3110 = _2954;
                        _3111 = _2956;
                        _3112 = _2958;
                        _3113 = _3114;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2954;
                frontier_phi_60_61_ladder_1 = _2958;
                frontier_phi_60_61_ladder_2 = _2956;
                frontier_phi_60_61_ladder_3 = _2952;
                frontier_phi_60_61_ladder_4 = _2950;
                frontier_phi_60_61_ladder_5 = _2948;
            }
            else
            {
                frontier_phi_60_61_ladder = _2833;
                frontier_phi_60_61_ladder_1 = _2837;
                frontier_phi_60_61_ladder_2 = _2835;
                frontier_phi_60_61_ladder_3 = _2831;
                frontier_phi_60_61_ladder_4 = _2829;
                frontier_phi_60_61_ladder_5 = _2827;
            }
            _2947 = frontier_phi_60_61_ladder_5;
            _2949 = frontier_phi_60_61_ladder_4;
            _2951 = frontier_phi_60_61_ladder_3;
            _2953 = frontier_phi_60_61_ladder;
            _2955 = frontier_phi_60_61_ladder_2;
            _2957 = frontier_phi_60_61_ladder_1;
        }
        float _2962 = isnan(1.0) ? _971 : (isnan(_971) ? 1.0 : min(_971, 1.0));
        _2739 = (_2962 * _2953) + _2176;
        _2741 = (_2962 * _2955) + _2178;
        _2743 = (_2962 * _2957) + _2180;
        _2745 = ((_2947 * _956) * _2962) + _2521;
        _2747 = ((_2949 * _958) * _2962) + _2523;
        _2749 = ((_2951 * _959) * _2962) + _2525;
    }
    else
    {
        _2739 = _2176;
        _2741 = _2178;
        _2743 = _2180;
        _2745 = _2521;
        _2747 = _2523;
        _2749 = _2525;
    }
    float _4735 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4746 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4757 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _2766 = ((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2739 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _971))) + ((_2745 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    float _2767 = ((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2741 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _971))) + ((_2747 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    float _2768 = ((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2743 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _971))) + ((_2749 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    uint _2769 = _931 + 6u;
    float _2777 = _893 / cbSceneParam._m0[86u].x;
    float _2778 = _894 / cbSceneParam._m0[86u].y;
    vec4 _2792 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2777, _2778, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2794 = _2792.x;
    float _2795 = _2792.y;
    float _2796 = _2792.z;
    float _2797 = _2792.w;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _2852 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _2853 = _2852 / _816;
        float _2864 = _2853 * _866;
        float _2865 = _867 * _2853;
        float _2866 = (-0.0) - _2865;
        float _2867 = _2853 * _868;
        float _2869 = (cbSceneParam._m0[77u].w * _2866) / _2852;
        float _2870 = _2869 + cbSceneParam._m0[79u].w;
        float _2871 = cbSceneParam._m0[79u].w - _2865;
        float _2877 = sqrt(((_2864 * _2864) + (_2865 * _2865)) + (_2867 * _2867));
        float _2880 = (1.0 - (cbSceneParam._m0[77u].w / _2852)) * _2877;
        float _2885 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2887 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3064;
        if (abs((_2866 - _2869) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3064 = ((((_2870 > 0.0) ? exp2(_2885 * _2870) : (2.0 - exp2(_2887 * _2870))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2880;
        }
        else
        {
            float _3008 = 1.0 / cbSceneParam._m0[80u].x;
            float _3009 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : max(_2870, _2871));
            float _3010 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : min(_2870, _2871));
            float _3019 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : min(_3009, 0.0));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            _3064 = ((abs(_2877 / _2866) * cbSceneParam._m0[80u].y) * ((((_3019 - _3020) * 2.0) - ((exp2(_2885 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0)))) - exp2(_2885 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))))) * _3008)) - ((exp2(_2887 * _3019) - exp2(_2887 * _3020)) * _3008))) + (_2880 * cbSceneParam._m0[80u].z);
        }
        vec4 _3066 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2777, _2778, 1.0), 0.0);
        float _3075 = exp2((_3064 * (-1.44269502162933349609375)) * (1.0 - _3066.w));
        float _3076 = log2(_3075);
        float _3092 = log2(_2797);
        _2889 = (exp2(_3092 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].x)) * _3066.x) / cbSceneParam._m0[78u].x)) + _2794;
        _2891 = (exp2(_3092 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].y)) * _3066.y) / cbSceneParam._m0[78u].y)) + _2795;
        _2893 = (exp2(_3092 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].z)) * _3066.z) / cbSceneParam._m0[78u].z)) + _2796;
        _2895 = _3075 * _2797;
    }
    else
    {
        _2889 = _2794;
        _2891 = _2795;
        _2893 = _2796;
        _2895 = _2797;
    }
    bool _3102;
    vec4 _2905;
    vec4 _2927;
    float _2929;
    float _2933;
    float _2934;
    float _2935;
    float _2936;
    bool _2946;
    for (;;)
    {
        _2905 = cbMatDynParam._m0[0u];
        float _2907 = roundEven(_2905.y);
        bool _2908 = _2907 == 3.0;
        float _2909 = log2(_2895);
        float _2916 = exp2(_2909 * cbSceneParam._m0[78u].x) * _2766;
        float _2917 = exp2(_2909 * cbSceneParam._m0[78u].y) * _2767;
        float _2918 = exp2(_2909 * cbSceneParam._m0[78u].z) * _2768;
        float _2925 = _882 + (-0.5);
        _2927 = cbMtdParam._m0[1u];
        _2929 = _2927.y * _2925;
        float _2932 = (_2907 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2933 = _2932 * (_2908 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2889)));
        _2934 = _2932 * (_2908 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2891)));
        _2935 = _2932 * (_2908 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2893)));
        _2936 = _2925 * 0.999000012874603271484375;
        _2946 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2946)
        {
            if ((cbInstanceData._m0[_931 + 7u].x + _2936) < 0.5)
            {
                _3102 = true;
                break;
            }
        }
        uint _3043 = _932 + uint(_2905.w);
        if ((cbInstanceData._m0[_3043].w < 1.0) && ((cbInstanceData._m0[_3043].w + _2936) < 0.5))
        {
            _3102 = true;
            break;
        }
        if ((_2929 + 1.0) < _2927.x)
        {
            _3102 = true;
            break;
        }
        _3102 = false;
        break;
    }
    float _3307;
    if (_3102)
    {
        discard_state = true;
        _3307 = 0.0;
    }
    else
    {
        _3307 = cbInstanceData._m0[_2769].w;
    }
    SV_Target.x = _2933;
    SV_Target.y = _2934;
    SV_Target.z = _2935;
    SV_Target.w = _3307;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2769].w;
    discard_exit();
}


