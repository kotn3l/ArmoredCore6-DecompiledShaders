#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1377;
float _3786;
float _3787;
float _3788;
float _3789;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    vec4 _274 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _299 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _310 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _274.x) * 2.0) - _299)) + 1.0;
    float _3798 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _311 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    vec4 _324 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _341 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _343 = _341.x;
    float _344 = _341.y;
    float _345 = _341.z;
    float _352 = ((_324.x - _343) * _311) + _343;
    float _353 = ((_324.y - _344) * _311) + _344;
    float _354 = ((_324.z - _345) * _311) + _345;
    float _360 = (((((1.0 - _274.y) * 2.0) - _299) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].z) + 1.0;
    float _3809 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _361 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    vec4 _373 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _384 = ((_373.x - _352) * _361) + _352;
    float _385 = ((_373.y - _353) * _361) + _353;
    float _386 = ((_373.z - _354) * _361) + _354;
    float _392 = (((((1.0 - _274.z) * 2.0) - _299) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].y) + 1.0;
    float _3820 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    vec4 _405 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w));
    float _418 = ((_405.z - _386) * _393) + _386;
    float _421 = ((((_405.x - _384) * _393) + _384) * 2.0) + (-1.0);
    float _423 = ((((_405.y - _385) * _393) + _385) * 2.0) + (-1.0);
    float _424 = dot(vec2(_421, _423), vec2(_421, _423));
    float _3831 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))));
    float _430 = fma(_429, _249, 0.0);
    float _431 = fma(_429, _250, 0.0);
    float _432 = fma(_429, _251, 0.0);
    float _436 = inversesqrt(dot(vec3(_430, _431, _432), vec3(_430, _431, _432)));
    float _444 = cbMtdParam._m0[14u].z + dot(vec4(_436 * _430, _436 * _431, _436 * _432, 0.0), vec4(cbMtdParam._m0[15u].w, cbMtdParam._m0[16u].xy, 0.0));
    float _3842 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    vec4 _464 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _469 = _464.x * cbMtdParam._m0[10u].x;
    float _470 = _464.y * cbMtdParam._m0[10u].y;
    float _471 = _464.z * cbMtdParam._m0[10u].z;
    vec4 _490 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _504 = (((_490.x * cbMtdParam._m0[11u].x) - _469) * _311) + _469;
    float _505 = (((_490.y * cbMtdParam._m0[11u].y) - _470) * _311) + _470;
    float _506 = (((_490.z * cbMtdParam._m0[11u].z) - _471) * _311) + _471;
    vec4 _524 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _538 = (((_524.x * cbMtdParam._m0[12u].x) - _504) * _361) + _504;
    float _539 = (((_524.y * cbMtdParam._m0[12u].y) - _505) * _361) + _505;
    float _540 = (((_524.z * cbMtdParam._m0[12u].z) - _506) * _361) + _506;
    vec4 _559 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w));
    vec4 _593 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _601 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_559.x * cbMtdParam._m0[13u].x) - _538) * _393) + _538)) * _593.x;
    float _604 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_559.y * cbMtdParam._m0[13u].y) - _539) * _393) + _539)) * _593.y;
    float _607 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_559.z * cbMtdParam._m0[13u].z) - _540) * _393) + _540)) * _593.z;
    vec4 _619 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _630 = ((_619.x - _601) * _445) + _601;
    float _631 = ((_619.y - _604) * _445) + _604;
    float _632 = ((_619.z - _607) * _445) + _607;
    vec4 _645 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _647 = _645.x;
    float _664 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _647) * _311) + _647;
    float _681 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x - _664) * _361) + _664;
    vec4 _710 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _712 = _710.x;
    float _3853 = isnan(0.0) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.0 : max(cbMtdParam._m0[14u].y, 0.0));
    float _716 = (((((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _681) * _393) + _681) - _712) * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) + _712;
    float _718 = _716 - (_716 * _445);
    vec4 _730 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _737 = (_730.x * 2.0) + (-1.0);
    float _738 = (_730.y * 2.0) + (-1.0);
    float _739 = dot(vec2(_737, _738), vec2(_737, _738));
    float _3864 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _747 = ((_730.z - _418) * _445) + _418;
    float _756 = ((sqrt(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) - _429) * _445) + _429;
    vec4 _770 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _780 = (((_737 - _421) * _445) + _421) + (((_770.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].w);
    float _781 = (((_738 - _423) * _445) + _423) + (((_770.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].w);
    float _784 = fma(_756, _249, fma(_781, _241 * TANGENT.x, (_227 * _219) * _780));
    float _787 = fma(_756, _250, fma(_781, _241 * TANGENT.y, (_227 * _220) * _780));
    float _790 = fma(_756, _251, fma(_781, _241 * TANGENT.z, (_227 * _221) * _780));
    float _794 = inversesqrt(dot(vec3(_784, _787, _790), vec3(_784, _787, _790)));
    float _795 = _794 * _784;
    float _796 = _794 * _787;
    float _797 = _794 * _790;
    float _3875 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _798 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3897 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3908 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3919 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _802 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _818 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _868 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _858);
    float _869 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _858);
    float _870 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _858);
    float _874 = inversesqrt(dot(vec3(_868, _869, _870), vec3(_868, _869, _870)));
    float _875 = _868 * _874;
    float _876 = _869 * _874;
    float _877 = _870 * _874;
    vec4 _882 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _884 = _882.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1056 = sqrt(((_868 * _868) + (_869 * _869)) + (_870 * _870));
        float _1062 = (cbMatDynParam._m0[5u].x * _1056) + cbMatDynParam._m0[5u].y;
        float _3930 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1067 = (cbMatDynParam._m0[5u].z * _1056) + cbMatDynParam._m0[5u].w;
        float _3941 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) - _1063)) + _1063) < ((_884 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _895 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _896 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _914 = fma(_797, cbSceneParam._m0[5u].z, fma(_796, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _795));
    float _917 = fma(_797, cbSceneParam._m0[6u].z, fma(_796, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _795));
    float _920 = fma(_797, cbSceneParam._m0[7u].z, fma(_796, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _795));
    uint _933 = uint(roundEven(NORMAL.w)) * 13u;
    uint _934 = _933 + 9u;
    uint _935 = _934 + uint(cbMatDynParam._m0[0u].w);
    float _941 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_935].x;
    float _942 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_935].y;
    float _943 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * cbInstanceData._m0[_935].z;
    float _3952 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _947 = 1.0 - _802;
    float _948 = _944 * _947;
    float _949 = _945 * _947;
    float _950 = _946 * _947;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _802;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _802;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _802;
    float _958 = _955 + 0.039999999105930328369140625;
    float _960 = _956 + 0.039999999105930328369140625;
    float _961 = _957 + 0.039999999105930328369140625;
    vec4 _970 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _895, cbSceneParam._m0[86u].y * _896));
    float _973 = _970.x * TEXCOORD_4;
    float _974 = dot(vec3(_795, _796, _797), vec3(_875, _876, _877));
    float _977 = _974 * 2.0;
    float _981 = (_977 * _795) - _875;
    float _982 = (_977 * _796) - _876;
    float _983 = (_977 * _797) - _877;
    float _987 = abs(dot(vec3(_875, _876, _877), vec3(_795, _796, _797)));
    float _3985 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _989 = sqrt(_798);
    float _1002 = exp2((_989 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_989 * 3.0));
    float _1008 = (1.0 - _1002) * ((_989 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1009 = _1002 * _989;
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1376;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1101 = fma(_1045, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037));
        float _1105 = fma(_1045, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037));
        float _1109 = fma(_1045, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037));
        float _1134 = _1037 + _795;
        float _1135 = _1041 + _796;
        float _1136 = _1045 + _797;
        float _1146 = fma(_1136, cbModelParam._m0[26u].z, fma(_1135, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1134)) - _1101;
        float _1147 = fma(_1136, cbModelParam._m0[27u].z, fma(_1135, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1134)) - _1105;
        float _1148 = fma(_1136, cbModelParam._m0[28u].z, fma(_1135, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1134)) - _1109;
        float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
        float _1165 = ((_1152 * _1146) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1101 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1152 * _1147) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1105 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1152 * _1148) / cbModelParam._m0[34u].z) + ((((((_1109 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        float _1204 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1170.x + (-0.5));
        float _1206 = _1204 * (_1170.y + (-0.5));
        float _1207 = _1204 * (_1170.z + (-0.5));
        float _1214 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1177.x + (-0.5));
        float _1216 = _1214 * (_1177.y + (-0.5));
        float _1217 = _1214 * (_1177.z + (-0.5));
        float _1224 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1184.x + (-0.5));
        float _1226 = _1224 * (_1184.y + (-0.5));
        float _1227 = _1224 * (_1184.z + (-0.5));
        float _1234 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1191.x + (-0.5));
        float _1236 = _1234 * (_1191.y + (-0.5));
        float _1237 = _1234 * (_1191.z + (-0.5));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = _1205 * 0.5;
        float _1242 = _1215 * 0.5;
        float _1243 = _1225 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1258 = (dot(vec3(_795, _796, _797), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1268 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4033 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1270 + 1.0))) + _1275) * _1238;
        float _1285 = _1206 * 0.5;
        float _1286 = _1216 * 0.5;
        float _1287 = _1226 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_795, _796, _797), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4066 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1312 + 1.0))) + _1317) * _1239;
        float _1327 = _1207 * 0.5;
        float _1328 = _1217 * 0.5;
        float _1329 = _1227 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_795, _796, _797), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4099 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1354 + 1.0))) + _1359) * _1240;
        _1376 = _1207;
        _1378 = _1206;
        _1379 = _1205;
        _1380 = _1217;
        _1381 = _1216;
        _1382 = _1215;
        _1383 = _1227;
        _1384 = _1226;
        _1385 = _1225;
        _1386 = _1240;
        _1387 = _1239;
        _1388 = _1238;
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
    }
    else
    {
        _1376 = _1377;
        _1378 = _1377;
        _1379 = _1377;
        _1380 = _1377;
        _1381 = _1377;
        _1382 = _1377;
        _1383 = _1377;
        _1384 = _1377;
        _1385 = _1377;
        _1386 = _1377;
        _1387 = _1377;
        _1388 = _1377;
        _1389 = 0.0;
        _1390 = 0.0;
        _1391 = 0.0;
    }
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1420 = fma(_1045, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1037));
        float _1424 = fma(_1045, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1037));
        float _1428 = fma(_1045, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1037));
        float _1451 = _1037 + _795;
        float _1452 = _1041 + _796;
        float _1453 = _1045 + _797;
        float _1463 = fma(_1453, cbModelParam._m0[30u].z, fma(_1452, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1451)) - _1420;
        float _1464 = fma(_1453, cbModelParam._m0[31u].z, fma(_1452, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1451)) - _1424;
        float _1465 = fma(_1453, cbModelParam._m0[32u].z, fma(_1452, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1451)) - _1428;
        float _1469 = inversesqrt(dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465)));
        float _1482 = ((_1469 * _1463) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1420 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1469 * _1464) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1424 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1469 * _1465) / cbModelParam._m0[35u].z) + ((((((_1428 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        float _1519 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1486.x + (-0.5));
        float _1521 = _1519 * (_1486.y + (-0.5));
        float _1522 = _1519 * (_1486.z + (-0.5));
        float _1529 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1493.x + (-0.5));
        float _1531 = _1529 * (_1493.y + (-0.5));
        float _1532 = _1529 * (_1493.z + (-0.5));
        float _1539 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1500.x + (-0.5));
        float _1541 = _1539 * (_1500.y + (-0.5));
        float _1542 = _1539 * (_1500.z + (-0.5));
        float _1549 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1507.x + (-0.5));
        float _1551 = _1549 * (_1507.y + (-0.5));
        float _1552 = _1549 * (_1507.z + (-0.5));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = _1520 * 0.5;
        float _1557 = _1530 * 0.5;
        float _1558 = _1540 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_795, _796, _797), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4162 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1583 + 1.0))) + _1588) * _1553;
        float _1598 = _1521 * 0.5;
        float _1599 = _1531 * 0.5;
        float _1600 = _1541 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_795, _796, _797), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4195 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1625 + 1.0))) + _1630) * _1554;
        float _1640 = _1522 * 0.5;
        float _1641 = _1532 * 0.5;
        float _1642 = _1542 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_795, _796, _797), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4228 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1667 + 1.0))) + _1672) * _1555;
        _1689 = _1522;
        _1690 = _1521;
        _1691 = _1520;
        _1692 = _1532;
        _1693 = _1531;
        _1694 = _1530;
        _1695 = _1542;
        _1696 = _1541;
        _1697 = _1540;
        _1698 = _1555;
        _1699 = _1554;
        _1700 = _1553;
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
    }
    else
    {
        _1689 = _1377;
        _1690 = _1377;
        _1691 = _1377;
        _1692 = _1377;
        _1693 = _1377;
        _1694 = _1377;
        _1695 = _1377;
        _1696 = _1377;
        _1697 = _1377;
        _1698 = _1377;
        _1699 = _1377;
        _1700 = _1377;
        _1701 = 0.0;
        _1702 = 0.0;
        _1703 = 0.0;
    }
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1389)) + _1389;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1390)) + _1390;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1391)) + _1391;
    float _1736 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1713 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1713 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1713));
    float _1757 = _981 * 0.5;
    float _1758 = _982 * 0.5;
    float _1759 = _983 * 0.5;
    float _1760 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1763 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1766 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1800;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1773 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1376, _1380, _1383, _1386));
        float _1777 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1781 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1788 = dot(vec4(cbModelParam._m0[39u]), vec4(_1757, _1758, _1759, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1811;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1802 = dot(vec4(cbModelParam._m0[40u]), vec4(_1757, _1758, _1759, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1815 = (_1811 * cbModelParam._m0[1u].x) + (_1800 * (1.0 - cbModelParam._m0[1u].x));
    float _1825 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _798);
    float _1826 = isnan(_1825) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1825 : min(cbModelParam._m0[25u].z, _1825));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1873 = fma(_1045, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037)) + cbModelParam._m0[13u].w;
        float _1877 = fma(_1045, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037)) + cbModelParam._m0[14u].w;
        float _1881 = fma(_1045, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037)) + cbModelParam._m0[15u].w;
        float _1884 = fma(_983, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981));
        float _1887 = fma(_983, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981));
        float _1890 = fma(_983, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981));
        float _1918;
        if (_1884 > 0.0)
        {
            _1918 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1918 = frontier_phi_19_17_ladder;
        }
        float _2144;
        if (_1887 > 0.0)
        {
            _2144 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2144 = frontier_phi_28_24_ladder;
        }
        float _2401;
        if (_1890 > 0.0)
        {
            _2401 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2401 = frontier_phi_40_35_ladder;
        }
        float _2403 = isnan(_2144) ? _1918 : (isnan(_1918) ? _2144 : min(_1918, _2144));
        float _2404 = isnan(_2401) ? _2403 : (isnan(_2403) ? _2401 : min(_2403, _2401));
        float _2408 = (_2404 * _1884) + _1873;
        float _2409 = (_2404 * _1887) + _1877;
        float _2410 = (_2404 * _1890) + _1881;
        float _2411 = _2404 * 9.9999997473787516355514526367188e-05;
        float _2413 = (-1.0) - _2411;
        float _2415 = _2411 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2410 > _2415) || ((_2410 < _2413) || ((_2409 > _2415) || ((_2409 < _2413) || ((_2408 < _2413) || (_2408 > _2415))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2410, cbModelParam._m0[9u].z, fma(_2409, cbModelParam._m0[9u].y, _2408 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2410, cbModelParam._m0[10u].z, fma(_2409, cbModelParam._m0[10u].y, _2408 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2410, cbModelParam._m0[11u].z, fma(_2409, cbModelParam._m0[11u].y, _2408 * cbModelParam._m0[11u].x))), _1826);
            frontier_phi_18_40_ladder = _2538.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2538.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2538.x * cbModelParam._m0[1u].y;
        }
        _1906 = frontier_phi_18_40_ladder_2;
        _1908 = frontier_phi_18_40_ladder_1;
        _1910 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_981, _982, _983), _1826);
        _1906 = _1894.x * cbModelParam._m0[1u].y;
        _1908 = _1894.y * cbModelParam._m0[1u].y;
        _1910 = _1894.z * cbModelParam._m0[1u].y;
    }
    float _1914 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _798);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1914 : min(cbModelParam._m0[25u].w, _1914));
    float _2007;
    float _2009;
    float _2011;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1971 = fma(_1045, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037)) + cbModelParam._m0[21u].w;
        float _1975 = fma(_1045, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037)) + cbModelParam._m0[22u].w;
        float _1979 = fma(_1045, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037)) + cbModelParam._m0[23u].w;
        float _1982 = fma(_983, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981));
        float _1985 = fma(_983, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981));
        float _1988 = fma(_983, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981));
        float _2149;
        if (_1982 > 0.0)
        {
            _2149 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2149 = frontier_phi_30_26_ladder;
        }
        float _2428;
        if (_1985 > 0.0)
        {
            _2428 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2428 = frontier_phi_42_37_ladder;
        }
        float _2641;
        if (_1988 > 0.0)
        {
            _2641 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2641 = frontier_phi_51_48_ladder;
        }
        float _2643 = isnan(_2428) ? _2149 : (isnan(_2149) ? _2428 : min(_2149, _2428));
        float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
        float _2648 = (_2644 * _1982) + _1971;
        float _2649 = (_2644 * _1985) + _1975;
        float _2650 = (_2644 * _1988) + _1979;
        float _2651 = _2644 * 9.9999997473787516355514526367188e-05;
        float _2652 = (-1.0) - _2651;
        float _2654 = _2651 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2650 > _2654) || ((_2650 < _2652) || ((_2649 > _2654) || ((_2649 < _2652) || ((_2648 < _2652) || (_2648 > _2654))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2650, cbModelParam._m0[17u].z, fma(_2649, cbModelParam._m0[17u].y, _2648 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2650, cbModelParam._m0[18u].z, fma(_2649, cbModelParam._m0[18u].y, _2648 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2650, cbModelParam._m0[19u].z, fma(_2649, cbModelParam._m0[19u].y, _2648 * cbModelParam._m0[19u].x))), _1915);
            frontier_phi_27_51_ladder = _2848.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2848.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2848.x * cbModelParam._m0[1u].z;
        }
        _2007 = frontier_phi_27_51_ladder_2;
        _2009 = frontier_phi_27_51_ladder_1;
        _2011 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1991 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_981, _982, _983), _1915);
        _2007 = _1991.x * cbModelParam._m0[1u].z;
        _2009 = _1991.y * cbModelParam._m0[1u].z;
        _2011 = _1991.z * cbModelParam._m0[1u].z;
    }
    float _2024 = (((_1008 * _958) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_2007 - _1906)) + _1906);
    float _2026 = (((_1008 * _960) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_2009 - _1908)) + _1908);
    float _2028 = (((_1008 * _961) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_2011 - _1910)) + _1910);
    float _2031 = fma(_2028, cbSceneParam._m0[89u].z, fma(_2026, cbSceneParam._m0[89u].y, _2024 * cbSceneParam._m0[89u].x));
    float _2034 = fma(_2028, cbSceneParam._m0[90u].z, fma(_2026, cbSceneParam._m0[90u].y, _2024 * cbSceneParam._m0[90u].x));
    float _2037 = fma(_2028, cbSceneParam._m0[91u].z, fma(_2026, cbSceneParam._m0[91u].y, _2024 * cbSceneParam._m0[91u].x));
    vec4 _2045 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_895, _896));
    float _2047 = _2045.w;
    float _2059 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2047);
    float _2060 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2047);
    float _2061 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2047);
    uvec4 _2065 = floatBitsToUint(cbInstanceData._m0[_933 + 5u]);
    uint _2067 = _2065.x * 14u;
    uint _2068 = _2067 + 13u;
    float _2075 = _973 + (-1.0);
    float _2080 = (cbLight._m0[_2068].x * _2075) + 1.0;
    float _2081 = (cbLight._m0[_2068].y * _2075) + 1.0;
    float _2082 = (cbLight._m0[_2068].z * _2075) + 1.0;
    float _2083 = (cbLight._m0[_2068].w * _2075) + 1.0;
    uint _2084 = _2067 + 5u;
    float _2090 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
    uint _2094 = _2067 + 4u;
    float _2103 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2107 = _2067 | 1u;
    float _2118 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_795, _796, _797));
    float _2121 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_795, _796, _797));
    float _4364 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _4375 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2126 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * 0.3183098733425140380859375;
    float _2128 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * 0.3183098733425140380859375;
    float _2135 = ((cbLight._m0[_2084].x * _2090) * _2128) + (((cbLight._m0[_2094].x * _2059) * _2103) * _2126);
    float _2136 = ((_2090 * cbLight._m0[_2084].y) * _2128) + (((cbLight._m0[_2094].y * _2060) * _2103) * _2126);
    float _2137 = ((_2090 * cbLight._m0[_2084].z) * _2128) + (((cbLight._m0[_2094].z * _2061) * _2103) * _2126);
    uvec4 _2141 = floatBitsToUint(cbLight._m0[_2067 + 12u]);
    bool _2143 = _2141.x == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2143)
    {
        _2154 = _2135;
        _2156 = _2136;
        _2158 = _2137;
    }
    else
    {
        uint _2162 = _2067 + 6u;
        float _2178 = (dot(vec3(cbLight._m0[_2067 + 2u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2179 = _2178 * _2178;
        float _4386 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2180 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2181 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2154 = (((cbLight._m0[_2162].x * 0.3183098733425140380859375) * _2180) * _2181) + _2135;
        _2156 = (((cbLight._m0[_2162].y * 0.3183098733425140380859375) * _2180) * _2181) + _2136;
        _2158 = (((cbLight._m0[_2162].z * 0.3183098733425140380859375) * _2180) * _2181) + _2137;
    }
    bool _2161 = _2141.y == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2161)
    {
        _2199 = _2154;
        _2201 = _2156;
        _2203 = _2158;
    }
    else
    {
        uint _2372 = _2067 + 7u;
        float _2388 = (dot(vec3(cbLight._m0[_2067 + 3u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2389 = _2388 * _2388;
        float _4402 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2390 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2391 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2199 = (((cbLight._m0[_2372].x * 0.3183098733425140380859375) * _2390) * _2391) + _2154;
        _2201 = (((cbLight._m0[_2372].y * 0.3183098733425140380859375) * _2390) * _2391) + _2156;
        _2203 = (((cbLight._m0[_2372].z * 0.3183098733425140380859375) * _2390) * _2391) + _2158;
    }
    uint _2206 = _2067 + 8u;
    float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _798) * 0.949999988079071044921875);
    float _2220 = _2219 * _2219;
    float _2221 = cbLight._m0[_2067].x + _875;
    float _2222 = cbLight._m0[_2067].y + _876;
    float _2223 = cbLight._m0[_2067].z + _877;
    float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
    float _2228 = _2227 * _2221;
    float _2229 = _2227 * _2222;
    float _2230 = _2227 * _2223;
    float _2231 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2067].xyz));
    float _4418 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _4429 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _2235 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2236 = dot(vec3(_795, _796, _797), vec3(_2228, _2229, _2230));
    float _4440 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2228, _2229, _2230));
    float _4451 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2220 * _2220;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0);
    float _2257 = 0.959999978542327880859375 - _955;
    float _2259 = 0.959999978542327880859375 - _956;
    float _2260 = 0.959999978542327880859375 - _957;
    float _2267 = 1.0 - _2220;
    float _2278 = (0.5 / (((_2235 * ((_2234 * _2267) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2267) + _2220) * _2234))) * _2234;
    float _4462 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2280 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    uint _2294 = _2067 + 9u;
    float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _798) * 0.949999988079071044921875);
    float _2306 = _2305 * _2305;
    float _2307 = cbLight._m0[_2107].x + _875;
    float _2308 = cbLight._m0[_2107].y + _876;
    float _2309 = cbLight._m0[_2107].z + _877;
    float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
    float _2314 = _2313 * _2307;
    float _2315 = _2313 * _2308;
    float _2316 = _2313 * _2309;
    float _2317 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2107].xyz));
    float _4473 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2321 = dot(vec3(_795, _796, _797), vec3(_2314, _2315, _2316));
    float _4484 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2325 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2314, _2315, _2316));
    float _4495 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2329 = _2306 * _2306;
    float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
    float _2340 = exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0);
    float _2347 = 1.0 - _2306;
    float _2357 = (0.5 / (((_2235 * ((_2320 * _2347) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2347) + _2306) * _2320))) * _2320;
    float _4506 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2359 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
    float _2369 = (((((_2340 * _2257) + _958) * cbLight._m0[_2294].x) * _2359) * _2090) + ((((cbLight._m0[_2206].x * _2059) * ((_2256 * _2257) + _958)) * _2280) * _2103);
    float _2370 = (((((_2340 * _2259) + _960) * cbLight._m0[_2294].y) * _2359) * _2090) + ((((cbLight._m0[_2206].y * _2060) * ((_2256 * _2259) + _960)) * _2280) * _2103);
    float _2371 = (((((_2340 * _2260) + _961) * cbLight._m0[_2294].z) * _2359) * _2090) + ((((cbLight._m0[_2206].z * _2061) * ((_2256 * _2260) + _961)) * _2280) * _2103);
    float _2433;
    float _2435;
    float _2437;
    if (_2143)
    {
        _2433 = _2369;
        _2435 = _2370;
        _2437 = _2371;
    }
    else
    {
        uint _2439 = _2067 + 2u;
        uint _2443 = _2067 + 10u;
        float _2457 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2439].w)) * _798) * 0.949999988079071044921875);
        float _2458 = _2457 * _2457;
        float _2459 = cbLight._m0[_2439].x + _875;
        float _2460 = cbLight._m0[_2439].y + _876;
        float _2461 = cbLight._m0[_2439].z + _877;
        float _2465 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
        float _2466 = _2465 * _2459;
        float _2467 = _2465 * _2460;
        float _2468 = _2465 * _2461;
        float _2469 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2439].xyz));
        float _4517 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2473 = dot(vec3(_795, _796, _797), vec3(_2466, _2467, _2468));
        float _4528 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2477 = dot(vec3(cbLight._m0[_2439].xyz), vec3(_2466, _2467, _2468));
        float _4539 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2481 = _2458 * _2458;
        float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
        float _2492 = exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0);
        float _2499 = 1.0 - _2458;
        float _2509 = (0.5 / (((_2235 * ((_2472 * _2499) + _2458)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2499) + _2458) * _2472))) * _2472;
        float _4550 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2511 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
        float _2512 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2433 = (((((_2492 * _2257) + _958) * cbLight._m0[_2443].x) * _2511) * _2512) + _2369;
        _2435 = (((((_2492 * _2259) + _960) * cbLight._m0[_2443].y) * _2511) * _2512) + _2370;
        _2437 = (((((_2492 * _2260) + _961) * cbLight._m0[_2443].z) * _2511) * _2512) + _2371;
    }
    float _2547;
    float _2549;
    float _2551;
    if (_2161)
    {
        _2547 = _2433;
        _2549 = _2435;
        _2551 = _2437;
    }
    else
    {
        uint _2558 = _2067 + 3u;
        uint _2562 = _2067 + 11u;
        float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2558].w)) * _798) * 0.949999988079071044921875);
        float _2577 = _2576 * _2576;
        float _2578 = cbLight._m0[_2558].x + _875;
        float _2579 = cbLight._m0[_2558].y + _876;
        float _2580 = cbLight._m0[_2558].z + _877;
        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
        float _2585 = _2584 * _2578;
        float _2586 = _2584 * _2579;
        float _2587 = _2584 * _2580;
        float _2588 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2558].xyz));
        float _4566 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2592 = dot(vec3(_795, _796, _797), vec3(_2585, _2586, _2587));
        float _4577 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2596 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_2585, _2586, _2587));
        float _4588 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2600 = _2577 * _2577;
        float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
        float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0);
        float _2618 = 1.0 - _2577;
        float _2628 = (0.5 / (((_2235 * ((_2591 * _2618) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2618) + _2577) * _2591))) * _2591;
        float _4599 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2547 = (((((_2611 * _2257) + _958) * cbLight._m0[_2562].x) * _2630) * _2631) + _2433;
        _2549 = (((((_2611 * _2259) + _960) * cbLight._m0[_2562].y) * _2630) * _2631) + _2435;
        _2551 = (((((_2611 * _2260) + _961) * cbLight._m0[_2562].z) * _2630) * _2631) + _2437;
    }
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_2065.y == 0u)
    {
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2706;
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2706;
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2706;
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.x;
        uint _2733 = uint((float(_2721.y) * floor(float(uint(cbSceneParam._m0[85u].y * _896) / _2722))) + floor(float(uint(cbSceneParam._m0[85u].x * _895) / _2722)));
        float _2743 = (log2(_2709 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2744 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        uint _2747 = uint(isnan(14.0) ? _2744 : (isnan(_2744) ? 14.0 : min(_2744, 14.0)));
        uvec4 _2752 = texelFetch(g_lightClusterGridBuffer, int(((_2747 << 2u) + (_2733 << 6u)) >> 2u));
        uint _2753 = _2752.x;
        uint _2754 = _2721.z;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        if (((((1u << ((_2754 >> 4u) & 15u)) + 4294967295u) & _2753) == 0u) || ((_2754 & 240u) == 0u))
        {
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
        }
        else
        {
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            uint _3011 = 0u;
            uint _3020;
            bool _3021;
            for (;;)
            {
                _3020 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3011 << 2u)) >> 2u)).x;
                _3021 = _3020 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3021)
                {
                    frontier_phi_68_pred = _3007;
                    frontier_phi_68_pred_1 = _3010;
                    frontier_phi_68_pred_2 = _3009;
                    frontier_phi_68_pred_3 = _3008;
                    frontier_phi_68_pred_4 = _3006;
                    frontier_phi_68_pred_5 = _3005;
                }
                else
                {
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    uint _3156;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3020;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    for (;;)
                    {
                        uint _3160 = uint(findLSB(_3156)) + (_3011 << 5u);
                        uint _3157 = (_3156 + 4294967295u) & _3156;
                        uint _3162 = _3160 * 48u;
                        vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 3u)).x));
                        uint _3182 = (_3160 * 48u) + 4u;
                        vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 3u)).x));
                        uint _3201 = (_3160 * 48u) + 8u;
                        vec3 _3212 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x));
                        float _3216 = _3176.x - _2707;
                        float _3217 = _3176.y - _2708;
                        float _3218 = _3176.z - _2709;
                        float _3219 = dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218));
                        float _3222 = inversesqrt(_3219);
                        float _3223 = _3222 * _3216;
                        float _3224 = _3222 * _3217;
                        float _3225 = _3222 * _3218;
                        float _3226 = dot(vec3(_914, _917, _920), vec3(_3223, _3224, _3225));
                        float _3231 = 1.0 - (_3219 * _3176.w);
                        float _4625 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3232 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3233 = sqrt(_3219) * _3195.w;
                        float _3236 = 1.39999997615814208984375 / (_3233 + 1.39999997615814208984375);
                        float _3237 = _3236 * _3236;
                        float _3240 = ((1.0 - _3237) * _3226) + _3237;
                        float _3243 = _3233 * _3233;
                        float _3247 = ((isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))) * _3232) / ((_3243 * 0.699999988079071044921875) + 1.0);
                        float _3251 = (-0.0) - _2707;
                        float _3252 = (-0.0) - _2708;
                        float _3253 = (-0.0) - _2709;
                        float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                        float _3258 = _3257 * _3251;
                        float _3259 = _3257 * _3252;
                        float _3260 = _3257 * _3253;
                        float _3268 = exp2(log2(1.0 / ((_3243 * 3.5) + 5.0)) * 0.25);
                        float _3269 = 1.0 - _989;
                        float _3276 = sqrt(1.0 - ((1.0 - (_3269 * _3269)) * (1.0 - (_3268 * _3268))));
                        float _3277 = _3276 * _3276;
                        float _3278 = _3277 * _3277;
                        float _3279 = _3258 + _3223;
                        float _3280 = _3259 + _3224;
                        float _3281 = _3260 + _3225;
                        float _3285 = inversesqrt(dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281)));
                        float _3289 = dot(vec3(_914, _917, _920), vec3(_3258, _3259, _3260));
                        float _4641 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3292 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3293 = dot(vec3(_914, _917, _920), vec3(_3285 * _3279, _3285 * _3280, _3285 * _3281));
                        float _4652 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3296 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3300 = ((_3296 * _3296) * (_3278 + (-1.0))) + 1.0;
                        float _3301 = _3236 * _3277;
                        float _3302 = _3301 * _3301;
                        float _3305 = ((1.0 - _3302) * _3226) + _3302;
                        float _4663 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3306 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3307 = 1.0 - _3277;
                        float _3317 = (0.5 / (((_3306 * ((_3292 * _3307) + _3277)) + 9.9999999392252902907785028219223e-09) + (((_3306 * _3307) + _3277) * _3292))) * _3306;
                        float _4674 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3328 = (((_3278 * 3.1415927410125732421875) * (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) / ((_3300 * _3300) * ((_3243 * 2.1991131305694580078125) + 3.141590118408203125))) * _3232;
                        _3080 = (_3247 * _3195.x) + _3153;
                        _3081 = (_3247 * _3195.y) + _3154;
                        _3082 = (_3247 * _3195.z) + _3155;
                        _3077 = (_3328 * _3212.x) + _3150;
                        _3078 = (_3328 * _3212.y) + _3151;
                        _3079 = (_3328 * _3212.z) + _3152;
                        if (_3157 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3157;
                        }
                    }
                    frontier_phi_68_pred = _3079;
                    frontier_phi_68_pred_1 = _3082;
                    frontier_phi_68_pred_2 = _3081;
                    frontier_phi_68_pred_3 = _3080;
                    frontier_phi_68_pred_4 = _3078;
                    frontier_phi_68_pred_5 = _3077;
                }
                _2858 = frontier_phi_68_pred;
                _2864 = frontier_phi_68_pred_1;
                _2862 = frontier_phi_68_pred_2;
                _2860 = frontier_phi_68_pred_3;
                _2856 = frontier_phi_68_pred_4;
                _2854 = frontier_phi_68_pred_5;
                uint _3012 = _3011 + 1u;
                if (_3012 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3005 = _2854;
                    _3006 = _2856;
                    _3007 = _2858;
                    _3008 = _2860;
                    _3009 = _2862;
                    _3010 = _2864;
                    _3011 = _3012;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
        }
        uvec4 _2867 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2868 = _2867.z;
        uint _2870 = (_2868 >> 8u) & 15u;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        if (((4294967295u << _2870) & _2753) == 0u)
        {
            _2973 = _2853;
            _2975 = _2855;
            _2977 = _2857;
            _2979 = _2859;
            _2981 = _2861;
            _2983 = _2863;
        }
        else
        {
            float _2998 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
            float _2999 = _2998 * _2707;
            float _3000 = _2998 * _2708;
            float _3001 = _2998 * _2709;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2870 < ((_2868 >> 12u) & 15u))
            {
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _3133 = _2853;
                float _3134 = _2855;
                float _3135 = _2857;
                float _3136 = _2859;
                float _3137 = _2861;
                float _3138 = _2863;
                uint _3139 = _2870;
                uint _3148;
                bool _3149;
                for (;;)
                {
                    _3148 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3139 << 2u)) >> 2u)).x;
                    _3149 = _3148 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3149)
                    {
                        frontier_phi_79_pred = _3138;
                        frontier_phi_79_pred_1 = _3137;
                        frontier_phi_79_pred_2 = _3136;
                        frontier_phi_79_pred_3 = _3135;
                        frontier_phi_79_pred_4 = _3134;
                        frontier_phi_79_pred_5 = _3133;
                    }
                    else
                    {
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3355 = _3133;
                        float _3356 = _3134;
                        float _3357 = _3135;
                        float _3358 = _3136;
                        float _3359 = _3137;
                        float _3360 = _3138;
                        uint _3361 = _3148;
                        uint _3362;
                        vec4 _3387;
                        float _3388;
                        vec4 _3403;
                        vec3 _3415;
                        vec4 _3430;
                        vec4 _3446;
                        float _3493;
                        bool _3494;
                        for (;;)
                        {
                            uint _3372 = ((_3139 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3361));
                            _3362 = (_3361 + 4294967295u) & _3361;
                            uint _3374 = _3372 * 40u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            _3388 = _3387.w;
                            uint _3390 = (_3372 * 40u) + 4u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3405 = (_3372 * 40u) + 8u;
                            _3415 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x));
                            uint _3417 = (_3372 * 40u) + 16u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3433 = (_3372 * 40u) + 20u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3449 = (_3372 * 40u) + 24u;
                            vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3468 = (_3372 * 40u) + 28u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            _3493 = fma(_2709, _3481.z, fma(_2708, _3481.y, _3481.x * _2707)) + _3481.w;
                            _3494 = !((fma(_2709, _3462.z, fma(_2708, _3462.y, _3462.x * _2707)) + _3462.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3494)
                            {
                                float _3521 = _3387.x - _2707;
                                float _3522 = _3387.y - _2708;
                                float _3523 = _3387.z - _2709;
                                float _3524 = dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523));
                                float _3527 = inversesqrt(_3524);
                                float _3528 = _3527 * _3521;
                                float _3529 = _3527 * _3522;
                                float _3530 = _3527 * _3523;
                                float _3534 = 1.0 - (_3524 / (_3388 * _3388));
                                float _4685 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3539 = sqrt(_3524) * _3403.w;
                                float _3541 = 1.39999997615814208984375 / (_3539 + 1.39999997615814208984375);
                                float _3542 = _3541 * _3541;
                                float _3545 = ((1.0 - _3542) * dot(vec3(_3528, _3529, _3530), vec3(_914, _917, _920))) + _3542;
                                float _3548 = _3539 * _3539;
                                float _3552 = (fma(_2709, _3430.z, fma(_2708, _3430.y, _3430.x * _2707)) + _3430.w) / _3493;
                                float _3553 = (fma(_2709, _3446.z, fma(_2708, _3446.y, _3446.x * _2707)) + _3446.w) / _3493;
                                float _3557 = 1.0 - dot(vec2(_3552, _3553), vec2(_3552, _3553));
                                float _4701 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3559 = _3558 * (((isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0))) * _3535) / ((_3548 * 0.699999988079071044921875) + 1.0));
                                float _3571 = exp2(log2(1.0 / ((_3548 * 3.5) + 5.0)) * 0.25);
                                float _3572 = 1.0 - _989;
                                float _3579 = sqrt(1.0 - ((1.0 - (_3572 * _3572)) * (1.0 - (_3571 * _3571))));
                                float _3580 = _3579 * _3579;
                                float _3581 = _3580 * _3580;
                                float _3582 = _3528 - _2999;
                                float _3583 = _3529 - _3000;
                                float _3584 = _3530 - _3001;
                                float _3588 = inversesqrt(dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584)));
                                float _3592 = dot(vec3(_914, _917, _920), vec3((-0.0) - _2999, (-0.0) - _3000, (-0.0) - _3001));
                                float _4712 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3595 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3596 = dot(vec3(_914, _917, _920), vec3(_3588 * _3582, _3588 * _3583, _3588 * _3584));
                                float _4723 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3599 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3603 = ((_3599 * _3599) * (_3581 + (-1.0))) + 1.0;
                                float _3604 = _3541 * _3580;
                                float _3605 = _3604 * _3604;
                                float _3611 = ((1.0 - _3605) * dot(vec3(_914, _917, _920), vec3(_3528, _3529, _3530))) + _3605;
                                float _4734 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3613 = 1.0 - _3580;
                                float _3623 = (0.5 / (((_3612 * ((_3595 * _3613) + _3580)) + 9.9999999392252902907785028219223e-09) + (((_3612 * _3613) + _3580) * _3595))) * _3612;
                                float _4745 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3633 = (_3558 * _3535) * (((_3581 * 3.1415927410125732421875) * (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) / ((_3603 * _3603) * ((_3548 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3559 * _3403.z;
                                frontier_phi_85_pred_1 = _3559 * _3403.y;
                                frontier_phi_85_pred_2 = _3559 * _3403.x;
                                frontier_phi_85_pred_3 = _3633 * _3415.z;
                                frontier_phi_85_pred_4 = _3633 * _3415.y;
                                frontier_phi_85_pred_5 = _3633 * _3415.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3642 = frontier_phi_85_pred;
                            _3641 = frontier_phi_85_pred_1;
                            _3640 = frontier_phi_85_pred_2;
                            _3639 = frontier_phi_85_pred_3;
                            _3638 = frontier_phi_85_pred_4;
                            _3637 = frontier_phi_85_pred_5;
                            _3345 = _3640 + _3358;
                            _3346 = _3641 + _3359;
                            _3347 = _3642 + _3360;
                            _3342 = _3637 + _3355;
                            _3343 = _3638 + _3356;
                            _3344 = _3639 + _3357;
                            if (_3362 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3362;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3347;
                        frontier_phi_79_pred_1 = _3346;
                        frontier_phi_79_pred_2 = _3345;
                        frontier_phi_79_pred_3 = _3344;
                        frontier_phi_79_pred_4 = _3343;
                        frontier_phi_79_pred_5 = _3342;
                    }
                    _2984 = frontier_phi_79_pred;
                    _2982 = frontier_phi_79_pred_1;
                    _2980 = frontier_phi_79_pred_2;
                    _2978 = frontier_phi_79_pred_3;
                    _2976 = frontier_phi_79_pred_4;
                    _2974 = frontier_phi_79_pred_5;
                    uint _3140 = _3139 + 1u;
                    if (_3140 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3133 = _2974;
                        _3134 = _2976;
                        _3135 = _2978;
                        _3136 = _2980;
                        _3137 = _2982;
                        _3138 = _2984;
                        _3139 = _3140;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2980;
                frontier_phi_60_61_ladder_1 = _2984;
                frontier_phi_60_61_ladder_2 = _2982;
                frontier_phi_60_61_ladder_3 = _2978;
                frontier_phi_60_61_ladder_4 = _2976;
                frontier_phi_60_61_ladder_5 = _2974;
            }
            else
            {
                frontier_phi_60_61_ladder = _2859;
                frontier_phi_60_61_ladder_1 = _2863;
                frontier_phi_60_61_ladder_2 = _2861;
                frontier_phi_60_61_ladder_3 = _2857;
                frontier_phi_60_61_ladder_4 = _2855;
                frontier_phi_60_61_ladder_5 = _2853;
            }
            _2973 = frontier_phi_60_61_ladder_5;
            _2975 = frontier_phi_60_61_ladder_4;
            _2977 = frontier_phi_60_61_ladder_3;
            _2979 = frontier_phi_60_61_ladder;
            _2981 = frontier_phi_60_61_ladder_2;
            _2983 = frontier_phi_60_61_ladder_1;
        }
        float _2988 = isnan(1.0) ? _973 : (isnan(_973) ? 1.0 : min(_973, 1.0));
        _2765 = (_2988 * _2979) + _2199;
        _2767 = (_2988 * _2981) + _2201;
        _2769 = (_2988 * _2983) + _2203;
        _2771 = ((_2973 * _958) * _2988) + _2547;
        _2773 = ((_2975 * _960) * _2988) + _2549;
        _2775 = ((_2977 * _961) * _2988) + _2551;
    }
    else
    {
        _2765 = _2199;
        _2767 = _2201;
        _2769 = _2203;
        _2771 = _2547;
        _2773 = _2549;
        _2775 = _2551;
    }
    float _4761 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4772 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4783 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _2792 = ((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2765 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _973))) + ((_2771 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1815)) * cbPerFrame._m0[3u].x);
    float _2793 = ((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2767 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _973))) + ((_2773 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1815)) * cbPerFrame._m0[3u].x);
    float _2794 = ((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2769 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _973))) + ((_2775 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1815)) * cbPerFrame._m0[3u].x);
    uint _2795 = _933 + 6u;
    float _2803 = _895 / cbSceneParam._m0[86u].x;
    float _2804 = _896 / cbSceneParam._m0[86u].y;
    vec4 _2818 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, (log2((isnan(cbSceneParam._m0[77u].w) ? _818 : (isnan(_818) ? cbSceneParam._m0[77u].w : min(_818, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2820 = _2818.x;
    float _2821 = _2818.y;
    float _2822 = _2818.z;
    float _2823 = _2818.w;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    if (_818 > cbSceneParam._m0[78u].w)
    {
        float _2878 = isnan(_818) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _818 : min(cbSceneParam._m0[80u].w, _818));
        float _2879 = _2878 / _818;
        float _2890 = _2879 * _868;
        float _2891 = _869 * _2879;
        float _2892 = (-0.0) - _2891;
        float _2893 = _2879 * _870;
        float _2895 = (cbSceneParam._m0[77u].w * _2892) / _2878;
        float _2896 = _2895 + cbSceneParam._m0[79u].w;
        float _2897 = cbSceneParam._m0[79u].w - _2891;
        float _2903 = sqrt(((_2890 * _2890) + (_2891 * _2891)) + (_2893 * _2893));
        float _2906 = (1.0 - (cbSceneParam._m0[77u].w / _2878)) * _2903;
        float _2911 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2913 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3090;
        if (abs((_2892 - _2895) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3090 = ((((_2896 > 0.0) ? exp2(_2911 * _2896) : (2.0 - exp2(_2913 * _2896))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2906;
        }
        else
        {
            float _3034 = 1.0 / cbSceneParam._m0[80u].x;
            float _3035 = isnan(_2897) ? _2896 : (isnan(_2896) ? _2897 : max(_2896, _2897));
            float _3036 = isnan(_2897) ? _2896 : (isnan(_2896) ? _2897 : min(_2896, _2897));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            float _3046 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : min(_3036, 0.0));
            _3090 = ((abs(_2903 / _2892) * cbSceneParam._m0[80u].y) * ((((_3045 - _3046) * 2.0) - ((exp2(_2911 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0)))) - exp2(_2911 * (isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))))) * _3034)) - ((exp2(_2913 * _3045) - exp2(_2913 * _3046)) * _3034))) + (_2906 * cbSceneParam._m0[80u].z);
        }
        vec4 _3092 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, 1.0), 0.0);
        float _3101 = exp2((_3090 * (-1.44269502162933349609375)) * (1.0 - _3092.w));
        float _3102 = log2(_3101);
        float _3118 = log2(_2823);
        _2915 = (exp2(_3118 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3102 * cbSceneParam._m0[78u].x)) * _3092.x) / cbSceneParam._m0[78u].x)) + _2820;
        _2917 = (exp2(_3118 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3102 * cbSceneParam._m0[78u].y)) * _3092.y) / cbSceneParam._m0[78u].y)) + _2821;
        _2919 = (exp2(_3118 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3102 * cbSceneParam._m0[78u].z)) * _3092.z) / cbSceneParam._m0[78u].z)) + _2822;
        _2921 = _3101 * _2823;
    }
    else
    {
        _2915 = _2820;
        _2917 = _2821;
        _2919 = _2822;
        _2921 = _2823;
    }
    bool _3128;
    vec4 _2931;
    vec4 _2953;
    float _2955;
    float _2959;
    float _2960;
    float _2961;
    float _2962;
    bool _2972;
    for (;;)
    {
        _2931 = cbMatDynParam._m0[0u];
        float _2933 = roundEven(_2931.y);
        bool _2934 = _2933 == 3.0;
        float _2935 = log2(_2921);
        float _2942 = exp2(_2935 * cbSceneParam._m0[78u].x) * _2792;
        float _2943 = exp2(_2935 * cbSceneParam._m0[78u].y) * _2793;
        float _2944 = exp2(_2935 * cbSceneParam._m0[78u].z) * _2794;
        float _2951 = _884 + (-0.5);
        _2953 = cbMtdParam._m0[1u];
        _2955 = _2953.y * _2951;
        float _2958 = (_2933 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2959 = _2958 * (_2934 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2915)));
        _2960 = _2958 * (_2934 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2917)));
        _2961 = _2958 * (_2934 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2919)));
        _2962 = _2951 * 0.999000012874603271484375;
        _2972 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2972)
        {
            if ((cbInstanceData._m0[_933 + 7u].x + _2962) < 0.5)
            {
                _3128 = true;
                break;
            }
        }
        uint _3069 = _934 + uint(_2931.w);
        if ((cbInstanceData._m0[_3069].w < 1.0) && ((cbInstanceData._m0[_3069].w + _2962) < 0.5))
        {
            _3128 = true;
            break;
        }
        if ((_2955 + 1.0) < _2953.x)
        {
            _3128 = true;
            break;
        }
        _3128 = false;
        break;
    }
    float _3333;
    if (_3128)
    {
        discard_state = true;
        _3333 = 0.0;
    }
    else
    {
        _3333 = cbInstanceData._m0[_2795].w;
    }
    SV_Target.x = _2959;
    SV_Target.y = _2960;
    SV_Target.z = _2961;
    SV_Target.w = _3333;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2795].w;
    discard_exit();
}


