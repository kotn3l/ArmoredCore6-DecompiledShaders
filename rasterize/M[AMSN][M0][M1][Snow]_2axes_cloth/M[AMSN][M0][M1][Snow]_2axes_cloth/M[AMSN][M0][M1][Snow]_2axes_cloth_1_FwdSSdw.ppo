#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _922;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _243 = _238.z;
    float _247 = (_238.x * 2.0) + (-1.0);
    float _249 = (_238.y * 2.0) + (-1.0);
    float _250 = dot(vec2(_247, _249), vec2(_247, _249));
    float _3260 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _256 = sqrt(1.0 - (isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0))));
    float _259 = fma(_256, _213, fma(_249, _206, _247 * _192));
    float _262 = fma(_256, _214, fma(_249, _207, _247 * _193));
    float _265 = fma(_256, _215, fma(_249, _208, _247 * _194));
    float _269 = inversesqrt(dot(vec3(_259, _262, _265), vec3(_259, _262, _265)));
    float _270 = _269 * _259;
    float _271 = _269 * _262;
    float _272 = _269 * _265;
    float _277 = cbMtdParam._m0[10u].x + dot(vec4(_270, _271, _272, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3271 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _285 = dot(vec4(_270, _271, _272, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _3282 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _287 = (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) + (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0)));
    vec4 _305 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _310 = _305.x * cbMtdParam._m0[9u].x;
    float _311 = _305.y * cbMtdParam._m0[9u].y;
    float _312 = _305.z * cbMtdParam._m0[9u].z;
    vec4 _324 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _335 = ((_324.x - _310) * _287) + _310;
    float _336 = ((_324.y - _311) * _287) + _311;
    float _337 = ((_324.z - _312) * _287) + _312;
    vec4 _350 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _357 = (_350.x * 2.0) + (-1.0);
    float _358 = (_350.y * 2.0) + (-1.0);
    float _359 = dot(vec2(_357, _358), vec2(_357, _358));
    float _3293 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _367 = ((_350.z - _243) * _287) + _243;
    float _376 = ((sqrt(1.0 - (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) - _256) * _287) + _256;
    float _380 = (((_357 - _247) * _287) + _247) + (cbMtdParam._m0[10u].y * _247);
    float _381 = (((_358 - _249) * _287) + _249) + (cbMtdParam._m0[10u].y * _249);
    float _384 = fma(_376, _213, fma(_381, _206, _380 * _192));
    float _387 = fma(_376, _214, fma(_381, _207, _380 * _193));
    float _390 = fma(_376, _215, fma(_381, _208, _380 * _194));
    float _394 = inversesqrt(dot(vec3(_384, _387, _390), vec3(_384, _387, _390)));
    float _395 = _394 * _384;
    float _396 = _394 * _387;
    float _397 = _394 * _390;
    float _3304 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _398 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
    float _3315 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3326 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3337 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _417 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _458 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _468 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _458);
    float _469 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _458);
    float _470 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _458);
    float _474 = inversesqrt(dot(vec3(_468, _469, _470), vec3(_468, _469, _470)));
    float _475 = _468 * _474;
    float _476 = _469 * _474;
    float _477 = _470 * _474;
    float _483 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _484 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _505 = fma(_397, cbSceneParam._m0[5u].z, fma(_396, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _395));
    float _508 = fma(_397, cbSceneParam._m0[6u].z, fma(_396, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _395));
    float _511 = fma(_397, cbSceneParam._m0[7u].z, fma(_396, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _395));
    uint _524 = uint(roundEven(NORMAL.w)) * 13u;
    uint _527 = (_524 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _533 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0)))) * cbInstanceData._m0[_527].x;
    float _534 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0)))) * cbInstanceData._m0[_527].y;
    float _535 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0)))) * cbInstanceData._m0[_527].z;
    float _3348 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _3359 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _537 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    float _3370 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
    vec4 _547 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _483, cbSceneParam._m0[86u].y * _484));
    float _550 = _547.x * TEXCOORD.z;
    float _551 = dot(vec3(_395, _396, _397), vec3(_475, _476, _477));
    float _554 = _551 * 2.0;
    float _558 = (_554 * _395) - _475;
    float _559 = (_554 * _396) - _476;
    float _560 = (_554 * _397) - _477;
    float _564 = abs(dot(vec3(_475, _476, _477), vec3(_395, _396, _397)));
    float _3381 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _566 = sqrt(_398);
    float _579 = exp2((_566 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_566 * 3.0));
    float _611 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _921;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _646 = fma(_619, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611));
        float _650 = fma(_619, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611));
        float _654 = fma(_619, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611));
        float _679 = _611 + _395;
        float _680 = _615 + _396;
        float _681 = _619 + _397;
        float _691 = fma(_681, cbModelParam._m0[26u].z, fma(_680, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _679)) - _646;
        float _692 = fma(_681, cbModelParam._m0[27u].z, fma(_680, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _679)) - _650;
        float _693 = fma(_681, cbModelParam._m0[28u].z, fma(_680, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _679)) - _654;
        float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
        float _710 = ((_697 * _691) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_646 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _711 = ((_697 * _692) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_650 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _712 = ((_697 * _693) / cbModelParam._m0[34u].z) + ((((((_654 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        float _749 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_715.x + (-0.5));
        float _751 = _749 * (_715.y + (-0.5));
        float _752 = _749 * (_715.z + (-0.5));
        float _759 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_722.x + (-0.5));
        float _761 = _759 * (_722.y + (-0.5));
        float _762 = _759 * (_722.z + (-0.5));
        float _769 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_729.x + (-0.5));
        float _771 = _769 * (_729.y + (-0.5));
        float _772 = _769 * (_729.z + (-0.5));
        float _779 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_736.x + (-0.5));
        float _781 = _779 * (_736.y + (-0.5));
        float _782 = _779 * (_736.z + (-0.5));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = _750 * 0.5;
        float _787 = _760 * 0.5;
        float _788 = _770 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _803 = (dot(vec3(_395, _396, _397), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3407 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _813 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3418 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _815 = _814 * 2.0;
        float _819 = (1.0 - _814) / (_814 + 1.0);
        float _3429 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _829 = ((((1.0 - _820) * (_815 + 2.0)) * exp2(log2(isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) * (_815 + 1.0))) + _820) * _783;
        float _830 = _751 * 0.5;
        float _831 = _761 * 0.5;
        float _832 = _771 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _846 = (dot(vec3(_395, _396, _397), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3440 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _855 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3451 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3462 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * (_857 + 1.0))) + _862) * _784;
        float _872 = _752 * 0.5;
        float _873 = _762 * 0.5;
        float _874 = _772 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _888 = (dot(vec3(_395, _396, _397), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _897 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3495 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_899 + 1.0))) + _904) * _785;
        _921 = _752;
        _923 = _751;
        _924 = _750;
        _925 = _762;
        _926 = _761;
        _927 = _760;
        _928 = _772;
        _929 = _771;
        _930 = _770;
        _931 = _785;
        _932 = _784;
        _933 = _783;
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0)));
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
    }
    else
    {
        _921 = _922;
        _923 = _922;
        _924 = _922;
        _925 = _922;
        _926 = _922;
        _927 = _922;
        _928 = _922;
        _929 = _922;
        _930 = _922;
        _931 = _922;
        _932 = _922;
        _933 = _922;
        _934 = 0.0;
        _935 = 0.0;
        _936 = 0.0;
    }
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _962 = fma(_619, cbModelParam._m0[30u].z, fma(_615, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _611));
        float _966 = fma(_619, cbModelParam._m0[31u].z, fma(_615, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _611));
        float _970 = fma(_619, cbModelParam._m0[32u].z, fma(_615, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _611));
        float _993 = _611 + _395;
        float _994 = _615 + _396;
        float _995 = _619 + _397;
        float _1005 = fma(_995, cbModelParam._m0[30u].z, fma(_994, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993)) - _962;
        float _1006 = fma(_995, cbModelParam._m0[31u].z, fma(_994, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993)) - _966;
        float _1007 = fma(_995, cbModelParam._m0[32u].z, fma(_994, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993)) - _970;
        float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
        float _1024 = ((_1011 * _1005) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_962 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1011 * _1006) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_966 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1011 * _1007) / cbModelParam._m0[35u].z) + ((((((_970 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        float _1061 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1028.x + (-0.5));
        float _1063 = _1061 * (_1028.y + (-0.5));
        float _1064 = _1061 * (_1028.z + (-0.5));
        float _1071 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1035.x + (-0.5));
        float _1073 = _1071 * (_1035.y + (-0.5));
        float _1074 = _1071 * (_1035.z + (-0.5));
        float _1081 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1042.x + (-0.5));
        float _1083 = _1081 * (_1042.y + (-0.5));
        float _1084 = _1081 * (_1042.z + (-0.5));
        float _1091 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1049.x + (-0.5));
        float _1093 = _1091 * (_1049.y + (-0.5));
        float _1094 = _1091 * (_1049.z + (-0.5));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = _1062 * 0.5;
        float _1099 = _1072 * 0.5;
        float _1100 = _1082 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_395, _396, _397), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3558 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_1125 + 1.0))) + _1130) * _1095;
        float _1140 = _1063 * 0.5;
        float _1141 = _1073 * 0.5;
        float _1142 = _1083 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_395, _396, _397), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3591 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_1167 + 1.0))) + _1172) * _1096;
        float _1182 = _1064 * 0.5;
        float _1183 = _1074 * 0.5;
        float _1184 = _1084 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_395, _396, _397), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3624 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1209 + 1.0))) + _1214) * _1097;
        _1231 = _1064;
        _1232 = _1063;
        _1233 = _1062;
        _1234 = _1074;
        _1235 = _1073;
        _1236 = _1072;
        _1237 = _1084;
        _1238 = _1083;
        _1239 = _1082;
        _1240 = _1097;
        _1241 = _1096;
        _1242 = _1095;
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
    }
    else
    {
        _1231 = _922;
        _1232 = _922;
        _1233 = _922;
        _1234 = _922;
        _1235 = _922;
        _1236 = _922;
        _1237 = _922;
        _1238 = _922;
        _1239 = _922;
        _1240 = _922;
        _1241 = _922;
        _1242 = _922;
        _1243 = 0.0;
        _1244 = 0.0;
        _1245 = 0.0;
    }
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _934)) + _934;
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _935)) + _935;
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _936)) + _936;
    float _1278 = fma(_1257, cbSceneParam._m0[89u].z, fma(_1256, cbSceneParam._m0[89u].y, _1255 * cbSceneParam._m0[89u].x));
    float _1281 = fma(_1257, cbSceneParam._m0[90u].z, fma(_1256, cbSceneParam._m0[90u].y, _1255 * cbSceneParam._m0[90u].x));
    float _1284 = fma(_1257, cbSceneParam._m0[91u].z, fma(_1256, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1255));
    float _1299 = _558 * 0.5;
    float _1300 = _559 * 0.5;
    float _1301 = _560 * 0.5;
    float _1302 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1305 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1308 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1342;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1315 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_921, _925, _928, _931));
        float _1319 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_923, _926, _929, _932));
        float _1323 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_924, _927, _930, _933));
        float _1330 = dot(vec4(cbModelParam._m0[39u]), vec4(_1299, _1300, _1301, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1330) ? 0.0 : (isnan(0.0) ? _1330 : max(0.0, _1330))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1353;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1344 = dot(vec4(cbModelParam._m0[40u]), vec4(_1299, _1300, _1301, 1.0));
        _1353 = dot(vec3(isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1344) ? 0.0 : (isnan(0.0) ? _1344 : max(0.0, _1344))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1353 = 1.0;
    }
    float _1357 = (_1353 * cbModelParam._m0[1u].x) + (_1342 * (1.0 - cbModelParam._m0[1u].x));
    float _1367 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _398);
    float _1368 = isnan(_1367) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1367 : min(cbModelParam._m0[25u].z, _1367));
    float _1450;
    float _1452;
    float _1454;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1417 = fma(_619, cbModelParam._m0[13u].z, fma(_615, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611)) + cbModelParam._m0[13u].w;
        float _1421 = fma(_619, cbModelParam._m0[14u].z, fma(_615, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611)) + cbModelParam._m0[14u].w;
        float _1425 = fma(_619, cbModelParam._m0[15u].z, fma(_615, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611)) + cbModelParam._m0[15u].w;
        float _1428 = fma(_560, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558));
        float _1431 = fma(_560, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558));
        float _1434 = fma(_560, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558));
        float _1462;
        if (_1428 > 0.0)
        {
            _1462 = abs((1.0 - _1417) / _1428);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1417 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1462 = frontier_phi_16_14_ladder;
        }
        float _1687;
        if (_1431 > 0.0)
        {
            _1687 = abs((1.0 - _1421) / _1431);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1421 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1687 = frontier_phi_25_21_ladder;
        }
        float _1933;
        if (_1434 > 0.0)
        {
            _1933 = abs((1.0 - _1425) / _1434);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1425 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1933 = frontier_phi_37_32_ladder;
        }
        float _1935 = isnan(_1687) ? _1462 : (isnan(_1462) ? _1687 : min(_1462, _1687));
        float _1936 = isnan(_1933) ? _1935 : (isnan(_1935) ? _1933 : min(_1935, _1933));
        float _1940 = (_1936 * _1428) + _1417;
        float _1941 = (_1936 * _1431) + _1421;
        float _1942 = (_1936 * _1434) + _1425;
        float _1943 = _1936 * 9.9999997473787516355514526367188e-05;
        float _1945 = (-1.0) - _1943;
        float _1947 = _1943 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1942 > _1947) || ((_1942 < _1945) || ((_1941 > _1947) || ((_1941 < _1945) || ((_1940 < _1945) || (_1940 > _1947))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1942, cbModelParam._m0[9u].z, fma(_1941, cbModelParam._m0[9u].y, _1940 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1942, cbModelParam._m0[10u].z, fma(_1941, cbModelParam._m0[10u].y, _1940 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1942, cbModelParam._m0[11u].z, fma(_1941, cbModelParam._m0[11u].y, _1940 * cbModelParam._m0[11u].x))), _1368);
            frontier_phi_15_37_ladder = _2066.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2066.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2066.x * cbModelParam._m0[1u].y;
        }
        _1450 = frontier_phi_15_37_ladder_2;
        _1452 = frontier_phi_15_37_ladder_1;
        _1454 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1438 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_558, _559, _560), _1368);
        _1450 = _1438.x * cbModelParam._m0[1u].y;
        _1452 = _1438.y * cbModelParam._m0[1u].y;
        _1454 = _1438.z * cbModelParam._m0[1u].y;
    }
    float _1458 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _398);
    float _1459 = isnan(_1458) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1458 : min(cbModelParam._m0[25u].w, _1458));
    float _1552;
    float _1554;
    float _1556;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1516 = fma(_619, cbModelParam._m0[21u].z, fma(_615, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611)) + cbModelParam._m0[21u].w;
        float _1520 = fma(_619, cbModelParam._m0[22u].z, fma(_615, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611)) + cbModelParam._m0[22u].w;
        float _1524 = fma(_619, cbModelParam._m0[23u].z, fma(_615, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611)) + cbModelParam._m0[23u].w;
        float _1527 = fma(_560, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558));
        float _1530 = fma(_560, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558));
        float _1533 = fma(_560, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558));
        float _1692;
        if (_1527 > 0.0)
        {
            _1692 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1692 = frontier_phi_27_23_ladder;
        }
        float _1960;
        if (_1530 > 0.0)
        {
            _1960 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1960 = frontier_phi_39_34_ladder;
        }
        float _2165;
        if (_1533 > 0.0)
        {
            _2165 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2165 = frontier_phi_48_45_ladder;
        }
        float _2167 = isnan(_1960) ? _1692 : (isnan(_1692) ? _1960 : min(_1692, _1960));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1527) + _1516;
        float _2173 = (_2168 * _1530) + _1520;
        float _2174 = (_2168 * _1533) + _1524;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2176 = (-1.0) - _2175;
        float _2178 = _2175 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2174 > _2178) || ((_2174 < _2176) || ((_2173 > _2178) || ((_2173 < _2176) || ((_2172 < _2176) || (_2172 > _2178))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2372 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2174, cbModelParam._m0[17u].z, fma(_2173, cbModelParam._m0[17u].y, _2172 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2174, cbModelParam._m0[18u].z, fma(_2173, cbModelParam._m0[18u].y, _2172 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2174, cbModelParam._m0[19u].z, fma(_2173, cbModelParam._m0[19u].y, _2172 * cbModelParam._m0[19u].x))), _1459);
            frontier_phi_24_48_ladder = _2372.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2372.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2372.x * cbModelParam._m0[1u].z;
        }
        _1552 = frontier_phi_24_48_ladder_2;
        _1554 = frontier_phi_24_48_ladder_1;
        _1556 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_558, _559, _560), _1459);
        _1552 = _1536.x * cbModelParam._m0[1u].z;
        _1554 = _1536.y * cbModelParam._m0[1u].z;
        _1556 = _1536.z * cbModelParam._m0[1u].z;
    }
    float _1568 = ((((1.0 - _579) * ((_566 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_579 * _566)) * _550;
    float _1569 = _1568 * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1570 = _1568 * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1571 = _1568 * ((cbModelParam._m0[1u].w * (_1556 - _1454)) + _1454);
    float _1574 = fma(_1571, cbSceneParam._m0[89u].z, fma(_1570, cbSceneParam._m0[89u].y, _1569 * cbSceneParam._m0[89u].x));
    float _1577 = fma(_1571, cbSceneParam._m0[90u].z, fma(_1570, cbSceneParam._m0[90u].y, _1569 * cbSceneParam._m0[90u].x));
    float _1580 = fma(_1571, cbSceneParam._m0[91u].z, fma(_1570, cbSceneParam._m0[91u].y, _1569 * cbSceneParam._m0[91u].x));
    vec4 _1588 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_483, _484));
    float _1590 = _1588.w;
    float _1602 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1590);
    float _1603 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1590);
    float _1604 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1590);
    uvec4 _1608 = floatBitsToUint(cbInstanceData._m0[_524 + 5u]);
    uint _1610 = _1608.x * 14u;
    uint _1611 = _1610 + 13u;
    float _1618 = _550 + (-1.0);
    float _1623 = (cbLight._m0[_1611].x * _1618) + 1.0;
    float _1624 = (cbLight._m0[_1611].y * _1618) + 1.0;
    float _1625 = (cbLight._m0[_1611].z * _1618) + 1.0;
    float _1626 = (cbLight._m0[_1611].w * _1618) + 1.0;
    uint _1627 = _1610 + 5u;
    float _1633 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
    uint _1637 = _1610 + 4u;
    float _1646 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
    uint _1650 = _1610 | 1u;
    float _1661 = dot(vec3(cbLight._m0[_1610].xyz), vec3(_395, _396, _397));
    float _1664 = dot(vec3(cbLight._m0[_1650].xyz), vec3(_395, _396, _397));
    float _3760 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _3771 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1669 = (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * 0.3183098733425140380859375;
    float _1671 = (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.3183098733425140380859375;
    float _1678 = ((cbLight._m0[_1627].x * _1633) * _1671) + (((cbLight._m0[_1637].x * _1602) * _1646) * _1669);
    float _1679 = ((_1633 * cbLight._m0[_1627].y) * _1671) + (((cbLight._m0[_1637].y * _1603) * _1646) * _1669);
    float _1680 = ((_1633 * cbLight._m0[_1627].z) * _1671) + (((cbLight._m0[_1637].z * _1604) * _1646) * _1669);
    uvec4 _1684 = floatBitsToUint(cbLight._m0[_1610 + 12u]);
    bool _1686 = _1684.x == 0u;
    float _1697;
    float _1699;
    float _1701;
    if (_1686)
    {
        _1697 = _1678;
        _1699 = _1679;
        _1701 = _1680;
    }
    else
    {
        uint _1705 = _1610 + 6u;
        float _1721 = (dot(vec3(cbLight._m0[_1610 + 2u].xyz), vec3(_395, _396, _397)) * 0.5) + 0.5;
        float _1722 = _1721 * _1721;
        float _3782 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1724 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _1697 = (((cbLight._m0[_1705].x * 0.3183098733425140380859375) * _1723) * _1724) + _1678;
        _1699 = (((cbLight._m0[_1705].y * 0.3183098733425140380859375) * _1723) * _1724) + _1679;
        _1701 = (((cbLight._m0[_1705].z * 0.3183098733425140380859375) * _1723) * _1724) + _1680;
    }
    bool _1704 = _1684.y == 0u;
    float _1742;
    float _1744;
    float _1746;
    if (_1704)
    {
        _1742 = _1697;
        _1744 = _1699;
        _1746 = _1701;
    }
    else
    {
        uint _1904 = _1610 + 7u;
        float _1920 = (dot(vec3(cbLight._m0[_1610 + 3u].xyz), vec3(_395, _396, _397)) * 0.5) + 0.5;
        float _1921 = _1920 * _1920;
        float _3798 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1923 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
        _1742 = (((cbLight._m0[_1904].x * 0.3183098733425140380859375) * _1922) * _1923) + _1697;
        _1744 = (((cbLight._m0[_1904].y * 0.3183098733425140380859375) * _1922) * _1923) + _1699;
        _1746 = (((cbLight._m0[_1904].z * 0.3183098733425140380859375) * _1922) * _1923) + _1701;
    }
    uint _1749 = _1610 + 8u;
    float _1762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1610].w)) * _398) * 0.949999988079071044921875);
    float _1763 = _1762 * _1762;
    float _1764 = cbLight._m0[_1610].x + _475;
    float _1765 = cbLight._m0[_1610].y + _476;
    float _1766 = cbLight._m0[_1610].z + _477;
    float _1770 = inversesqrt(dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766)));
    float _1771 = _1770 * _1764;
    float _1772 = _1770 * _1765;
    float _1773 = _1770 * _1766;
    float _1774 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1610].xyz));
    float _3814 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1777 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _1778 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _1779 = dot(vec3(_395, _396, _397), vec3(_1771, _1772, _1773));
    float _3836 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1782 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _1783 = dot(vec3(cbLight._m0[_1610].xyz), vec3(_1771, _1772, _1773));
    float _3847 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1787 = _1763 * _1763;
    float _1791 = ((_1782 * _1782) * (_1787 + (-1.0))) + 1.0;
    float _1802 = (exp2(log2(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1803 = 1.0 - _1763;
    float _1814 = (0.5 / (((_1778 * ((_1777 * _1803) + _1763)) + 9.9999999392252902907785028219223e-09) + (((_1778 * _1803) + _1763) * _1777))) * _1777;
    float _3858 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1816 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1787 / ((_1791 * _1791) * 3.141590118408203125));
    uint _1830 = _1610 + 9u;
    float _1841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1650].w)) * _398) * 0.949999988079071044921875);
    float _1842 = _1841 * _1841;
    float _1843 = cbLight._m0[_1650].x + _475;
    float _1844 = cbLight._m0[_1650].y + _476;
    float _1845 = cbLight._m0[_1650].z + _477;
    float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
    float _1850 = _1849 * _1843;
    float _1851 = _1849 * _1844;
    float _1852 = _1849 * _1845;
    float _1853 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1650].xyz));
    float _3869 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _1857 = dot(vec3(_395, _396, _397), vec3(_1850, _1851, _1852));
    float _3880 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1650].xyz), vec3(_1850, _1851, _1852));
    float _3891 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1842 * _1842;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1878 = (exp2(log2(1.0 - (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1879 = 1.0 - _1842;
    float _1889 = (0.5 / (((_1778 * ((_1856 * _1879) + _1842)) + 9.9999999392252902907785028219223e-09) + (((_1778 * _1879) + _1842) * _1856))) * _1856;
    float _3902 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    float _1901 = (((_1878 * cbLight._m0[_1830].x) * _1891) * _1633) + ((((cbLight._m0[_1749].x * _1602) * _1802) * _1816) * _1646);
    float _1902 = (((_1878 * cbLight._m0[_1830].y) * _1891) * _1633) + ((((cbLight._m0[_1749].y * _1603) * _1802) * _1816) * _1646);
    float _1903 = (((_1878 * cbLight._m0[_1830].z) * _1891) * _1633) + ((((cbLight._m0[_1749].z * _1604) * _1802) * _1816) * _1646);
    float _1965;
    float _1967;
    float _1969;
    if (_1686)
    {
        _1965 = _1901;
        _1967 = _1902;
        _1969 = _1903;
    }
    else
    {
        uint _1971 = _1610 + 2u;
        uint _1975 = _1610 + 10u;
        float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _398) * 0.949999988079071044921875);
        float _1990 = _1989 * _1989;
        float _1991 = cbLight._m0[_1971].x + _475;
        float _1992 = cbLight._m0[_1971].y + _476;
        float _1993 = cbLight._m0[_1971].z + _477;
        float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
        float _1998 = _1997 * _1991;
        float _1999 = _1997 * _1992;
        float _2000 = _1997 * _1993;
        float _2001 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1971].xyz));
        float _3913 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2004 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _2005 = dot(vec3(_395, _396, _397), vec3(_1998, _1999, _2000));
        float _3924 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2008 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _2009 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_1998, _1999, _2000));
        float _3935 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2013 = _1990 * _1990;
        float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
        float _2026 = (exp2(log2(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2027 = 1.0 - _1990;
        float _2037 = (0.5 / (((_1778 * ((_2004 * _2027) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_1778 * _2027) + _1990) * _2004))) * _2004;
        float _3946 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2039 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
        float _2040 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
        _1965 = (((_2026 * cbLight._m0[_1975].x) * _2039) * _2040) + _1901;
        _1967 = (((_2026 * cbLight._m0[_1975].y) * _2039) * _2040) + _1902;
        _1969 = (((_2026 * cbLight._m0[_1975].z) * _2039) * _2040) + _1903;
    }
    float _2075;
    float _2077;
    float _2079;
    if (_1704)
    {
        _2075 = _1965;
        _2077 = _1967;
        _2079 = _1969;
    }
    else
    {
        uint _2086 = _1610 + 3u;
        uint _2090 = _1610 + 11u;
        float _2104 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _398) * 0.949999988079071044921875);
        float _2105 = _2104 * _2104;
        float _2106 = cbLight._m0[_2086].x + _475;
        float _2107 = cbLight._m0[_2086].y + _476;
        float _2108 = cbLight._m0[_2086].z + _477;
        float _2112 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
        float _2113 = _2112 * _2106;
        float _2114 = _2112 * _2107;
        float _2115 = _2112 * _2108;
        float _2116 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_2086].xyz));
        float _3962 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2119 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _2120 = dot(vec3(_395, _396, _397), vec3(_2113, _2114, _2115));
        float _3973 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _2124 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2113, _2114, _2115));
        float _3984 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2128 = _2105 * _2105;
        float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
        float _2141 = (exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2142 = 1.0 - _2105;
        float _2152 = (0.5 / (((_1778 * ((_2119 * _2142) + _2105)) + 9.9999999392252902907785028219223e-09) + (((_1778 * _2142) + _2105) * _2119))) * _2119;
        float _3995 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2154 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
        float _2155 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
        _2075 = (((_2141 * cbLight._m0[_2090].x) * _2154) * _2155) + _1965;
        _2077 = (((_2141 * cbLight._m0[_2090].y) * _2154) * _2155) + _1967;
        _2079 = (((_2141 * cbLight._m0[_2090].z) * _2154) * _2155) + _1969;
    }
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    if (_1608.y == 0u)
    {
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2230;
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2230;
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2230;
        uvec4 _2245 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2246 = _2245.x;
        uint _2257 = uint((float(_2245.y) * floor(float(uint(cbSceneParam._m0[85u].y * _484) / _2246))) + floor(float(uint(cbSceneParam._m0[85u].x * _483) / _2246)));
        float _2267 = (log2(_2233 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2268 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        uint _2271 = uint(isnan(14.0) ? _2268 : (isnan(_2268) ? 14.0 : min(_2268, 14.0)));
        uvec4 _2276 = texelFetch(g_lightClusterGridBuffer, int(((_2271 << 2u) + (_2257 << 6u)) >> 2u));
        uint _2277 = _2276.x;
        uint _2278 = _2245.z;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        if (((((1u << ((_2278 >> 4u) & 15u)) + 4294967295u) & _2277) == 0u) || ((_2278 & 240u) == 0u))
        {
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
        }
        else
        {
            float _2378;
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            uint _2527 = 0u;
            uint _2536;
            bool _2537;
            for (;;)
            {
                _2536 = texelFetch(g_lightClassification, int((((_2271 << 5u) + (_2257 << 9u)) + (_2527 << 2u)) >> 2u)).x;
                _2537 = _2536 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2537)
                {
                    frontier_phi_63_pred = _2526;
                    frontier_phi_63_pred_1 = _2525;
                    frontier_phi_63_pred_2 = _2524;
                    frontier_phi_63_pred_3 = _2523;
                    frontier_phi_63_pred_4 = _2522;
                    frontier_phi_63_pred_5 = _2521;
                }
                else
                {
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    uint _2651;
                    _2645 = _2521;
                    _2646 = _2522;
                    _2647 = _2523;
                    _2648 = _2524;
                    _2649 = _2525;
                    _2650 = _2526;
                    _2651 = _2536;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    for (;;)
                    {
                        uint _2655 = uint(findLSB(_2651)) + (_2527 << 5u);
                        uint _2652 = (_2651 + 4294967295u) & _2651;
                        uint _2657 = _2655 * 48u;
                        vec4 _2671 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2657)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 3u)).x));
                        uint _2677 = (_2655 * 48u) + 4u;
                        vec4 _2690 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2677)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 3u)).x));
                        uint _2696 = (_2655 * 48u) + 8u;
                        vec3 _2707 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2696)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 2u)).x));
                        float _2711 = _2671.x - _2231;
                        float _2712 = _2671.y - _2232;
                        float _2713 = _2671.z - _2233;
                        float _2714 = dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713));
                        float _2717 = inversesqrt(_2714);
                        float _2718 = _2717 * _2711;
                        float _2719 = _2717 * _2712;
                        float _2720 = _2717 * _2713;
                        float _2721 = dot(vec3(_505, _508, _511), vec3(_2718, _2719, _2720));
                        float _2726 = 1.0 - (_2714 * _2671.w);
                        float _4021 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2727 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                        float _2728 = sqrt(_2714) * _2690.w;
                        float _2731 = 1.39999997615814208984375 / (_2728 + 1.39999997615814208984375);
                        float _2732 = _2731 * _2731;
                        float _2735 = ((1.0 - _2732) * _2721) + _2732;
                        float _2738 = _2728 * _2728;
                        float _2742 = ((isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0))) * _2727) / ((_2738 * 0.699999988079071044921875) + 1.0);
                        float _2746 = (-0.0) - _2231;
                        float _2747 = (-0.0) - _2232;
                        float _2748 = (-0.0) - _2233;
                        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
                        float _2753 = _2752 * _2746;
                        float _2754 = _2752 * _2747;
                        float _2755 = _2752 * _2748;
                        float _2763 = exp2(log2(1.0 / ((_2738 * 3.5) + 5.0)) * 0.25);
                        float _2764 = 1.0 - _566;
                        float _2771 = sqrt(1.0 - ((1.0 - (_2764 * _2764)) * (1.0 - (_2763 * _2763))));
                        float _2772 = _2771 * _2771;
                        float _2773 = _2772 * _2772;
                        float _2774 = _2753 + _2718;
                        float _2775 = _2754 + _2719;
                        float _2776 = _2755 + _2720;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2784 = dot(vec3(_505, _508, _511), vec3(_2753, _2754, _2755));
                        float _4037 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2787 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                        float _2788 = dot(vec3(_505, _508, _511), vec3(_2780 * _2774, _2780 * _2775, _2780 * _2776));
                        float _4048 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2791 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                        float _2795 = ((_2791 * _2791) * (_2773 + (-1.0))) + 1.0;
                        float _2796 = _2731 * _2772;
                        float _2797 = _2796 * _2796;
                        float _2800 = ((1.0 - _2797) * _2721) + _2797;
                        float _4059 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2801 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                        float _2802 = 1.0 - _2772;
                        float _2812 = (0.5 / (((_2801 * ((_2787 * _2802) + _2772)) + 9.9999999392252902907785028219223e-09) + (((_2801 * _2802) + _2772) * _2787))) * _2801;
                        float _4070 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2823 = (((_2773 * 3.1415927410125732421875) * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) / ((_2795 * _2795) * ((_2738 * 2.1991131305694580078125) + 3.141590118408203125))) * _2727;
                        _2580 = (_2742 * _2690.x) + _2648;
                        _2581 = (_2742 * _2690.y) + _2649;
                        _2582 = (_2742 * _2690.z) + _2650;
                        _2577 = (_2823 * _2707.x) + _2645;
                        _2578 = (_2823 * _2707.y) + _2646;
                        _2579 = (_2823 * _2707.z) + _2647;
                        if (_2652 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2645 = _2577;
                            _2646 = _2578;
                            _2647 = _2579;
                            _2648 = _2580;
                            _2649 = _2581;
                            _2650 = _2582;
                            _2651 = _2652;
                        }
                    }
                    frontier_phi_63_pred = _2582;
                    frontier_phi_63_pred_1 = _2581;
                    frontier_phi_63_pred_2 = _2580;
                    frontier_phi_63_pred_3 = _2579;
                    frontier_phi_63_pred_4 = _2578;
                    frontier_phi_63_pred_5 = _2577;
                }
                _2388 = frontier_phi_63_pred;
                _2386 = frontier_phi_63_pred_1;
                _2384 = frontier_phi_63_pred_2;
                _2382 = frontier_phi_63_pred_3;
                _2380 = frontier_phi_63_pred_4;
                _2378 = frontier_phi_63_pred_5;
                uint _2528 = _2527 + 1u;
                if (_2528 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2521 = _2378;
                    _2522 = _2380;
                    _2523 = _2382;
                    _2524 = _2384;
                    _2525 = _2386;
                    _2526 = _2388;
                    _2527 = _2528;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
        }
        uvec4 _2391 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2392 = _2391.z;
        uint _2394 = (_2392 >> 8u) & 15u;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        if (((4294967295u << _2394) & _2277) == 0u)
        {
            _2489 = _2377;
            _2491 = _2379;
            _2493 = _2381;
            _2495 = _2383;
            _2497 = _2385;
            _2499 = _2387;
        }
        else
        {
            float _2514 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
            float _2515 = _2514 * _2231;
            float _2516 = _2514 * _2232;
            float _2517 = _2514 * _2233;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2394 < ((_2392 >> 12u) & 15u))
            {
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2628 = _2377;
                float _2629 = _2379;
                float _2630 = _2381;
                float _2631 = _2383;
                float _2632 = _2385;
                float _2633 = _2387;
                uint _2634 = _2394;
                uint _2643;
                bool _2644;
                for (;;)
                {
                    _2643 = texelFetch(g_lightClassification, int((((_2271 << 5u) + (_2257 << 9u)) + (_2634 << 2u)) >> 2u)).x;
                    _2644 = _2643 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2644)
                    {
                        frontier_phi_69_pred = _2633;
                        frontier_phi_69_pred_1 = _2632;
                        frontier_phi_69_pred_2 = _2631;
                        frontier_phi_69_pred_3 = _2630;
                        frontier_phi_69_pred_4 = _2629;
                        frontier_phi_69_pred_5 = _2628;
                    }
                    else
                    {
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _2841 = _2628;
                        float _2842 = _2629;
                        float _2843 = _2630;
                        float _2844 = _2631;
                        float _2845 = _2632;
                        float _2846 = _2633;
                        uint _2847 = _2643;
                        uint _2848;
                        vec4 _2873;
                        float _2874;
                        vec4 _2889;
                        vec3 _2901;
                        vec4 _2917;
                        vec4 _2933;
                        float _2980;
                        bool _2981;
                        for (;;)
                        {
                            uint _2858 = ((_2634 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2847));
                            _2848 = (_2847 + 4294967295u) & _2847;
                            uint _2860 = _2858 * 40u;
                            _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            _2874 = _2873.w;
                            uint _2876 = (_2858 * 40u) + 4u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2891 = (_2858 * 40u) + 8u;
                            _2901 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x));
                            uint _2904 = (_2858 * 40u) + 16u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2920 = (_2858 * 40u) + 20u;
                            _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            uint _2936 = (_2858 * 40u) + 24u;
                            vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2955 = (_2858 * 40u) + 28u;
                            vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            _2980 = fma(_2233, _2968.z, fma(_2232, _2968.y, _2968.x * _2231)) + _2968.w;
                            _2981 = !((fma(_2233, _2949.z, fma(_2232, _2949.y, _2949.x * _2231)) + _2949.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2981)
                            {
                                float _3008 = _2873.x - _2231;
                                float _3009 = _2873.y - _2232;
                                float _3010 = _2873.z - _2233;
                                float _3011 = dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010));
                                float _3014 = inversesqrt(_3011);
                                float _3015 = _3014 * _3008;
                                float _3016 = _3014 * _3009;
                                float _3017 = _3014 * _3010;
                                float _3021 = 1.0 - (_3011 / (_2874 * _2874));
                                float _4081 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3022 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                                float _3026 = sqrt(_3011) * _2889.w;
                                float _3028 = 1.39999997615814208984375 / (_3026 + 1.39999997615814208984375);
                                float _3029 = _3028 * _3028;
                                float _3032 = ((1.0 - _3029) * dot(vec3(_3015, _3016, _3017), vec3(_505, _508, _511))) + _3029;
                                float _3035 = _3026 * _3026;
                                float _3039 = (fma(_2233, _2917.z, fma(_2232, _2917.y, _2917.x * _2231)) + _2917.w) / _2980;
                                float _3040 = (fma(_2233, _2933.z, fma(_2232, _2933.y, _2933.x * _2231)) + _2933.w) / _2980;
                                float _3044 = 1.0 - dot(vec2(_3039, _3040), vec2(_3039, _3040));
                                float _4097 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3045 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                                float _3046 = _3045 * (((isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0))) * _3022) / ((_3035 * 0.699999988079071044921875) + 1.0));
                                float _3058 = exp2(log2(1.0 / ((_3035 * 3.5) + 5.0)) * 0.25);
                                float _3059 = 1.0 - _566;
                                float _3066 = sqrt(1.0 - ((1.0 - (_3059 * _3059)) * (1.0 - (_3058 * _3058))));
                                float _3067 = _3066 * _3066;
                                float _3068 = _3067 * _3067;
                                float _3069 = _3015 - _2515;
                                float _3070 = _3016 - _2516;
                                float _3071 = _3017 - _2517;
                                float _3075 = inversesqrt(dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071)));
                                float _3079 = dot(vec3(_505, _508, _511), vec3((-0.0) - _2515, (-0.0) - _2516, (-0.0) - _2517));
                                float _4108 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3082 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3083 = dot(vec3(_505, _508, _511), vec3(_3075 * _3069, _3075 * _3070, _3075 * _3071));
                                float _4119 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3086 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3090 = ((_3086 * _3086) * (_3068 + (-1.0))) + 1.0;
                                float _3091 = _3028 * _3067;
                                float _3092 = _3091 * _3091;
                                float _3098 = ((1.0 - _3092) * dot(vec3(_505, _508, _511), vec3(_3015, _3016, _3017))) + _3092;
                                float _4130 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                                float _3100 = 1.0 - _3067;
                                float _3110 = (0.5 / (((_3099 * ((_3082 * _3100) + _3067)) + 9.9999999392252902907785028219223e-09) + (((_3099 * _3100) + _3067) * _3082))) * _3099;
                                float _4141 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3120 = (_3045 * _3022) * (((_3068 * 3.1415927410125732421875) * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) / ((_3090 * _3090) * ((_3035 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3046 * _2889.z;
                                frontier_phi_75_pred_1 = _3046 * _2889.y;
                                frontier_phi_75_pred_2 = _3046 * _2889.x;
                                frontier_phi_75_pred_3 = _3120 * _2901.z;
                                frontier_phi_75_pred_4 = _3120 * _2901.y;
                                frontier_phi_75_pred_5 = _3120 * _2901.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3129 = frontier_phi_75_pred;
                            _3128 = frontier_phi_75_pred_1;
                            _3127 = frontier_phi_75_pred_2;
                            _3126 = frontier_phi_75_pred_3;
                            _3125 = frontier_phi_75_pred_4;
                            _3124 = frontier_phi_75_pred_5;
                            _2831 = _3127 + _2844;
                            _2832 = _3128 + _2845;
                            _2833 = _3129 + _2846;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            _2830 = _3126 + _2843;
                            if (_2848 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2848;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2833;
                        frontier_phi_69_pred_1 = _2832;
                        frontier_phi_69_pred_2 = _2831;
                        frontier_phi_69_pred_3 = _2830;
                        frontier_phi_69_pred_4 = _2829;
                        frontier_phi_69_pred_5 = _2828;
                    }
                    _2500 = frontier_phi_69_pred;
                    _2498 = frontier_phi_69_pred_1;
                    _2496 = frontier_phi_69_pred_2;
                    _2494 = frontier_phi_69_pred_3;
                    _2492 = frontier_phi_69_pred_4;
                    _2490 = frontier_phi_69_pred_5;
                    uint _2635 = _2634 + 1u;
                    if (_2635 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2628 = _2490;
                        _2629 = _2492;
                        _2630 = _2494;
                        _2631 = _2496;
                        _2632 = _2498;
                        _2633 = _2500;
                        _2634 = _2635;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2500;
                frontier_phi_57_58_ladder_1 = _2498;
                frontier_phi_57_58_ladder_2 = _2496;
                frontier_phi_57_58_ladder_3 = _2494;
                frontier_phi_57_58_ladder_4 = _2492;
                frontier_phi_57_58_ladder_5 = _2490;
            }
            else
            {
                frontier_phi_57_58_ladder = _2387;
                frontier_phi_57_58_ladder_1 = _2385;
                frontier_phi_57_58_ladder_2 = _2383;
                frontier_phi_57_58_ladder_3 = _2381;
                frontier_phi_57_58_ladder_4 = _2379;
                frontier_phi_57_58_ladder_5 = _2377;
            }
            _2489 = frontier_phi_57_58_ladder_5;
            _2491 = frontier_phi_57_58_ladder_4;
            _2493 = frontier_phi_57_58_ladder_3;
            _2495 = frontier_phi_57_58_ladder_2;
            _2497 = frontier_phi_57_58_ladder_1;
            _2499 = frontier_phi_57_58_ladder;
        }
        float _2504 = isnan(1.0) ? _550 : (isnan(_550) ? 1.0 : min(_550, 1.0));
        _2289 = (_2504 * _2495) + _1742;
        _2291 = (_2504 * _2497) + _1744;
        _2293 = (_2504 * _2499) + _1746;
        _2295 = ((_2489 * 0.039999999105930328369140625) * _2504) + _2075;
        _2297 = ((_2491 * 0.039999999105930328369140625) * _2504) + _2077;
        _2299 = ((_2493 * 0.039999999105930328369140625) * _2504) + _2079;
    }
    else
    {
        _2289 = _1742;
        _2291 = _1744;
        _2293 = _1746;
        _2295 = _2075;
        _2297 = _2077;
        _2299 = _2079;
    }
    float _4157 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4168 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _4179 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    uint _2319 = _524 + 6u;
    float _2327 = _483 / cbSceneParam._m0[86u].x;
    float _2328 = _484 / cbSceneParam._m0[86u].y;
    vec4 _2342 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, (log2((isnan(cbSceneParam._m0[77u].w) ? _417 : (isnan(_417) ? cbSceneParam._m0[77u].w : min(_417, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2344 = _2342.x;
    float _2345 = _2342.y;
    float _2346 = _2342.z;
    float _2347 = _2342.w;
    float _2439;
    float _2441;
    float _2443;
    float _2445;
    if (_417 > cbSceneParam._m0[78u].w)
    {
        float _2402 = isnan(_417) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _417 : min(cbSceneParam._m0[80u].w, _417));
        float _2403 = _2402 / _417;
        float _2414 = _2403 * _468;
        float _2415 = _469 * _2403;
        float _2416 = (-0.0) - _2415;
        float _2417 = _2403 * _470;
        float _2419 = (cbSceneParam._m0[77u].w * _2416) / _2402;
        float _2420 = _2419 + cbSceneParam._m0[79u].w;
        float _2421 = cbSceneParam._m0[79u].w - _2415;
        float _2427 = sqrt(((_2414 * _2414) + (_2415 * _2415)) + (_2417 * _2417));
        float _2430 = (1.0 - (cbSceneParam._m0[77u].w / _2402)) * _2427;
        float _2435 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2437 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2590;
        if (abs((_2416 - _2419) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2590 = ((((_2420 > 0.0) ? exp2(_2435 * _2420) : (2.0 - exp2(_2437 * _2420))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2430;
        }
        else
        {
            float _2550 = 1.0 / cbSceneParam._m0[80u].x;
            float _2551 = isnan(_2421) ? _2420 : (isnan(_2420) ? _2421 : max(_2420, _2421));
            float _2552 = isnan(_2421) ? _2420 : (isnan(_2420) ? _2421 : min(_2420, _2421));
            float _2561 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : min(_2551, 0.0));
            float _2562 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : min(_2552, 0.0));
            _2590 = ((abs(_2427 / _2416) * cbSceneParam._m0[80u].y) * ((((_2561 - _2562) * 2.0) - ((exp2(_2435 * (isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0)))) - exp2(_2435 * (isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0))))) * _2550)) - ((exp2(_2437 * _2561) - exp2(_2437 * _2562)) * _2550))) + (_2430 * cbSceneParam._m0[80u].z);
        }
        vec4 _2592 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, 1.0), 0.0);
        float _2601 = exp2((_2590 * (-1.44269502162933349609375)) * (1.0 - _2592.w));
        float _2602 = log2(_2601);
        float _2618 = log2(_2347);
        _2439 = (exp2(_2618 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2602 * cbSceneParam._m0[78u].x)) * _2592.x) / cbSceneParam._m0[78u].x)) + _2344;
        _2441 = (exp2(_2618 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2602 * cbSceneParam._m0[78u].y)) * _2592.y) / cbSceneParam._m0[78u].y)) + _2345;
        _2443 = (exp2(_2618 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2602 * cbSceneParam._m0[78u].z)) * _2592.z) / cbSceneParam._m0[78u].z)) + _2346;
        _2445 = _2601 * _2347;
    }
    else
    {
        _2439 = _2344;
        _2441 = _2345;
        _2443 = _2346;
        _2445 = _2347;
    }
    float _2457 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2458 = _2457 == 3.0;
    float _2459 = log2(_2445);
    float _2466 = exp2(_2459 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2289 + ((isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))) * _550))) + ((_2295 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _1357)) * cbPerFrame._m0[3u].x));
    float _2467 = exp2(_2459 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2291 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _550))) + ((_2297 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1357)) * cbPerFrame._m0[3u].x));
    float _2468 = exp2(_2459 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2293 + ((isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))) * _550))) + ((_2299 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1357)) * cbPerFrame._m0[3u].x));
    float _2477 = (_2457 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2477 * (_2458 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2439)));
    SV_Target.y = _2477 * (_2458 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2441)));
    SV_Target.z = _2477 * (_2458 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2443)));
    SV_Target.w = cbInstanceData._m0[_2319].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2319].w;
}


