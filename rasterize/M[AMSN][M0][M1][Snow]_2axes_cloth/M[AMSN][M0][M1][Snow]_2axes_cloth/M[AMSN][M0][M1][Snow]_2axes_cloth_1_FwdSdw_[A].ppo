#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _969;
float _3620;
float _3621;
float _3622;
float _3623;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _249 = _244.z;
    float _253 = (_244.x * 2.0) + (-1.0);
    float _255 = (_244.y * 2.0) + (-1.0);
    float _256 = dot(vec2(_253, _255), vec2(_253, _255));
    float _3632 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _262 = sqrt(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))));
    float _265 = fma(_262, _219, fma(_255, _212, _253 * _198));
    float _268 = fma(_262, _220, fma(_255, _213, _253 * _199));
    float _271 = fma(_262, _221, fma(_255, _214, _253 * _200));
    float _275 = inversesqrt(dot(vec3(_265, _268, _271), vec3(_265, _268, _271)));
    float _276 = _275 * _265;
    float _277 = _275 * _268;
    float _278 = _275 * _271;
    float _283 = cbMtdParam._m0[10u].x + dot(vec4(_276, _277, _278, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3643 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _291 = dot(vec4(_276, _277, _278, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _3654 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _293 = (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) + (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)));
    vec4 _311 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _316 = _311.x * cbMtdParam._m0[9u].x;
    float _317 = _311.y * cbMtdParam._m0[9u].y;
    float _318 = _311.z * cbMtdParam._m0[9u].z;
    vec4 _330 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _341 = ((_330.x - _316) * _293) + _316;
    float _342 = ((_330.y - _317) * _293) + _317;
    float _343 = ((_330.z - _318) * _293) + _318;
    vec4 _356 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _363 = (_356.x * 2.0) + (-1.0);
    float _364 = (_356.y * 2.0) + (-1.0);
    float _365 = dot(vec2(_363, _364), vec2(_363, _364));
    float _3665 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _373 = ((_356.z - _249) * _293) + _249;
    float _382 = ((sqrt(1.0 - (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) - _262) * _293) + _262;
    float _386 = (((_363 - _253) * _293) + _253) + (cbMtdParam._m0[10u].y * _253);
    float _387 = (((_364 - _255) * _293) + _255) + (cbMtdParam._m0[10u].y * _255);
    float _390 = fma(_382, _219, fma(_387, _212, _386 * _198));
    float _393 = fma(_382, _220, fma(_387, _213, _386 * _199));
    float _396 = fma(_382, _221, fma(_387, _214, _386 * _200));
    float _400 = inversesqrt(dot(vec3(_390, _393, _396), vec3(_390, _393, _396)));
    float _401 = _400 * _390;
    float _402 = _400 * _393;
    float _403 = _400 * _396;
    float _3676 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _404 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3698 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3709 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _423 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _464 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _474 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _464);
    float _475 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _464);
    float _476 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _464);
    float _480 = inversesqrt(dot(vec3(_474, _475, _476), vec3(_474, _475, _476)));
    float _481 = _474 * _480;
    float _482 = _475 * _480;
    float _483 = _476 * _480;
    vec4 _488 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _490 = _488.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _648 = sqrt(((_474 * _474) + (_475 * _475)) + (_476 * _476));
        float _654 = (cbMatDynParam._m0[5u].x * _648) + cbMatDynParam._m0[5u].y;
        float _3720 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _655 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _659 = (cbMatDynParam._m0[5u].z * _648) + cbMatDynParam._m0[5u].w;
        float _3731 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) - _655)) + _655) < ((_490 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _502 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _503 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _523 = fma(_403, cbSceneParam._m0[5u].z, fma(_402, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _401));
    float _526 = fma(_403, cbSceneParam._m0[6u].z, fma(_402, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _401));
    float _529 = fma(_403, cbSceneParam._m0[7u].z, fma(_402, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _401));
    uint _542 = uint(roundEven(NORMAL.w)) * 13u;
    uint _544 = _542 + 9u;
    uint _545 = _544 + uint(cbMatDynParam._m0[0u].w);
    float _551 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_545].x;
    float _552 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_545].y;
    float _553 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_545].z;
    float _3742 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _554 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _555 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _556 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    vec4 _565 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _502, cbSceneParam._m0[86u].y * _503));
    float _568 = _565.x * TEXCOORD.z;
    float _569 = dot(vec3(_401, _402, _403), vec3(_481, _482, _483));
    float _572 = _569 * 2.0;
    float _576 = (_572 * _401) - _481;
    float _577 = (_572 * _402) - _482;
    float _578 = (_572 * _403) - _483;
    float _582 = abs(dot(vec3(_481, _482, _483), vec3(_401, _402, _403)));
    float _3775 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _584 = sqrt(_404);
    float _597 = exp2((_584 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_584 * 3.0));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _968;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _693 = fma(_637, cbModelParam._m0[26u].z, fma(_633, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _629));
        float _697 = fma(_637, cbModelParam._m0[27u].z, fma(_633, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _629));
        float _701 = fma(_637, cbModelParam._m0[28u].z, fma(_633, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _629));
        float _726 = _629 + _401;
        float _727 = _633 + _402;
        float _728 = _637 + _403;
        float _738 = fma(_728, cbModelParam._m0[26u].z, fma(_727, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726)) - _693;
        float _739 = fma(_728, cbModelParam._m0[27u].z, fma(_727, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726)) - _697;
        float _740 = fma(_728, cbModelParam._m0[28u].z, fma(_727, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726)) - _701;
        float _744 = inversesqrt(dot(vec3(_738, _739, _740), vec3(_738, _739, _740)));
        float _757 = ((_744 * _738) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_693 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _758 = ((_744 * _739) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_697 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _759 = ((_744 * _740) / cbModelParam._m0[34u].z) + ((((((_701 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        float _796 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_762.x + (-0.5));
        float _798 = _796 * (_762.y + (-0.5));
        float _799 = _796 * (_762.z + (-0.5));
        float _806 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_769.x + (-0.5));
        float _808 = _806 * (_769.y + (-0.5));
        float _809 = _806 * (_769.z + (-0.5));
        float _816 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_776.x + (-0.5));
        float _818 = _816 * (_776.y + (-0.5));
        float _819 = _816 * (_776.z + (-0.5));
        float _826 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_783.x + (-0.5));
        float _828 = _826 * (_783.y + (-0.5));
        float _829 = _826 * (_783.z + (-0.5));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = _797 * 0.5;
        float _834 = _807 * 0.5;
        float _835 = _817 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _850 = (dot(vec3(_401, _402, _403), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _860 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3823 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_862 + 1.0))) + _867) * _830;
        float _877 = _798 * 0.5;
        float _878 = _808 * 0.5;
        float _879 = _818 * 0.5;
        float _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
        float _885 = (_880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_880);
        float _893 = (dot(vec3(_401, _402, _403), vec3(_885 * _877, _885 * _878, _885 * _879)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _902 = sqrt(((_878 * _878) + (_877 * _877)) + (_879 * _879)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3856 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_904 + 1.0))) + _909) * _831;
        float _919 = _799 * 0.5;
        float _920 = _809 * 0.5;
        float _921 = _819 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _935 = (dot(vec3(_401, _402, _403), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _944 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3889 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_946 + 1.0))) + _951) * _832;
        _968 = _799;
        _970 = _798;
        _971 = _797;
        _972 = _809;
        _973 = _808;
        _974 = _807;
        _975 = _819;
        _976 = _818;
        _977 = _817;
        _978 = _832;
        _979 = _831;
        _980 = _830;
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
        _983 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
    }
    else
    {
        _968 = _969;
        _970 = _969;
        _971 = _969;
        _972 = _969;
        _973 = _969;
        _974 = _969;
        _975 = _969;
        _976 = _969;
        _977 = _969;
        _978 = _969;
        _979 = _969;
        _980 = _969;
        _981 = 0.0;
        _982 = 0.0;
        _983 = 0.0;
    }
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1012 = fma(_637, cbModelParam._m0[30u].z, fma(_633, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _629));
        float _1016 = fma(_637, cbModelParam._m0[31u].z, fma(_633, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _629));
        float _1020 = fma(_637, cbModelParam._m0[32u].z, fma(_633, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _629));
        float _1043 = _629 + _401;
        float _1044 = _633 + _402;
        float _1045 = _637 + _403;
        float _1055 = fma(_1045, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043)) - _1012;
        float _1056 = fma(_1045, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043)) - _1016;
        float _1057 = fma(_1045, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043)) - _1020;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1012 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1016 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[35u].z) + ((((((_1020 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1111 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1078.x + (-0.5));
        float _1113 = _1111 * (_1078.y + (-0.5));
        float _1114 = _1111 * (_1078.z + (-0.5));
        float _1121 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1085.x + (-0.5));
        float _1123 = _1121 * (_1085.y + (-0.5));
        float _1124 = _1121 * (_1085.z + (-0.5));
        float _1131 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1092.x + (-0.5));
        float _1133 = _1131 * (_1092.y + (-0.5));
        float _1134 = _1131 * (_1092.z + (-0.5));
        float _1141 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1099.x + (-0.5));
        float _1143 = _1141 * (_1099.y + (-0.5));
        float _1144 = _1141 * (_1099.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_401, _402, _403), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3952 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1175 + 1.0))) + _1180) * _1145;
        float _1190 = _1113 * 0.5;
        float _1191 = _1123 * 0.5;
        float _1192 = _1133 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_401, _402, _403), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3985 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1217 + 1.0))) + _1222) * _1146;
        float _1232 = _1114 * 0.5;
        float _1233 = _1124 * 0.5;
        float _1234 = _1134 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_401, _402, _403), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4018 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1259 + 1.0))) + _1264) * _1147;
        _1281 = _1114;
        _1282 = _1113;
        _1283 = _1112;
        _1284 = _1124;
        _1285 = _1123;
        _1286 = _1122;
        _1287 = _1134;
        _1288 = _1133;
        _1289 = _1132;
        _1290 = _1147;
        _1291 = _1146;
        _1292 = _1145;
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _969;
        _1282 = _969;
        _1283 = _969;
        _1284 = _969;
        _1285 = _969;
        _1286 = _969;
        _1287 = _969;
        _1288 = _969;
        _1289 = _969;
        _1290 = _969;
        _1291 = _969;
        _1292 = _969;
        _1293 = 0.0;
        _1294 = 0.0;
        _1295 = 0.0;
    }
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _981)) + _981;
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _982)) + _982;
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _983)) + _983;
    float _1328 = fma(_1307, cbSceneParam._m0[89u].z, fma(_1306, cbSceneParam._m0[89u].y, _1305 * cbSceneParam._m0[89u].x));
    float _1331 = fma(_1307, cbSceneParam._m0[90u].z, fma(_1306, cbSceneParam._m0[90u].y, _1305 * cbSceneParam._m0[90u].x));
    float _1334 = fma(_1307, cbSceneParam._m0[91u].z, fma(_1306, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1305));
    float _1349 = _576 * 0.5;
    float _1350 = _577 * 0.5;
    float _1351 = _578 * 0.5;
    float _1352 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1355 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1358 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1392;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1365 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_968, _972, _975, _978));
        float _1369 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_970, _973, _976, _979));
        float _1373 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_971, _974, _977, _980));
        float _1380 = dot(vec4(cbModelParam._m0[39u]), vec4(_1349, _1350, _1351, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1380) ? 0.0 : (isnan(0.0) ? _1380 : max(0.0, _1380))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1403;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1394 = dot(vec4(cbModelParam._m0[40u]), vec4(_1349, _1350, _1351, 1.0));
        _1403 = dot(vec3(isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1403 = 1.0;
    }
    float _1407 = (_1403 * cbModelParam._m0[1u].x) + (_1392 * (1.0 - cbModelParam._m0[1u].x));
    float _1417 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _404);
    float _1418 = isnan(_1417) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1417 : min(cbModelParam._m0[25u].z, _1417));
    float _1500;
    float _1502;
    float _1504;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1467 = fma(_637, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _629)) + cbModelParam._m0[13u].w;
        float _1471 = fma(_637, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _629)) + cbModelParam._m0[14u].w;
        float _1475 = fma(_637, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _629)) + cbModelParam._m0[15u].w;
        float _1478 = fma(_578, cbModelParam._m0[13u].z, fma(_577, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _576));
        float _1481 = fma(_578, cbModelParam._m0[14u].z, fma(_577, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _576));
        float _1484 = fma(_578, cbModelParam._m0[15u].z, fma(_577, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _576));
        float _1512;
        if (_1478 > 0.0)
        {
            _1512 = abs((1.0 - _1467) / _1478);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1467 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1512 = frontier_phi_19_17_ladder;
        }
        float _1685;
        if (_1481 > 0.0)
        {
            _1685 = abs((1.0 - _1471) / _1481);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1471 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1685 = frontier_phi_28_24_ladder;
        }
        float _1980;
        if (_1484 > 0.0)
        {
            _1980 = abs((1.0 - _1475) / _1484);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1475 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1980 = frontier_phi_40_35_ladder;
        }
        float _1982 = isnan(_1685) ? _1512 : (isnan(_1512) ? _1685 : min(_1512, _1685));
        float _1983 = isnan(_1980) ? _1982 : (isnan(_1982) ? _1980 : min(_1982, _1980));
        float _1987 = (_1983 * _1478) + _1467;
        float _1988 = (_1983 * _1481) + _1471;
        float _1989 = (_1983 * _1484) + _1475;
        float _1990 = _1983 * 9.9999997473787516355514526367188e-05;
        float _1992 = (-1.0) - _1990;
        float _1994 = _1990 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1989 > _1994) || ((_1989 < _1992) || ((_1988 > _1994) || ((_1988 < _1992) || ((_1987 < _1992) || (_1987 > _1994))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2134 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1989, cbModelParam._m0[9u].z, fma(_1988, cbModelParam._m0[9u].y, _1987 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1989, cbModelParam._m0[10u].z, fma(_1988, cbModelParam._m0[10u].y, _1987 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1989, cbModelParam._m0[11u].z, fma(_1988, cbModelParam._m0[11u].y, _1987 * cbModelParam._m0[11u].x))), _1418);
            frontier_phi_18_40_ladder = _2134.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2134.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2134.x * cbModelParam._m0[1u].y;
        }
        _1500 = frontier_phi_18_40_ladder_2;
        _1502 = frontier_phi_18_40_ladder_1;
        _1504 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_576, _577, _578), _1418);
        _1500 = _1488.x * cbModelParam._m0[1u].y;
        _1502 = _1488.y * cbModelParam._m0[1u].y;
        _1504 = _1488.z * cbModelParam._m0[1u].y;
    }
    float _1508 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _404);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1508 : min(cbModelParam._m0[25u].w, _1508));
    float _1602;
    float _1604;
    float _1606;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1566 = fma(_637, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _629)) + cbModelParam._m0[21u].w;
        float _1570 = fma(_637, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _629)) + cbModelParam._m0[22u].w;
        float _1574 = fma(_637, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _629)) + cbModelParam._m0[23u].w;
        float _1577 = fma(_578, cbModelParam._m0[21u].z, fma(_577, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _576));
        float _1580 = fma(_578, cbModelParam._m0[22u].z, fma(_577, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _576));
        float _1583 = fma(_578, cbModelParam._m0[23u].z, fma(_577, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _576));
        float _1690;
        if (_1577 > 0.0)
        {
            _1690 = abs((1.0 - _1566) / _1577);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1566 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1690 = frontier_phi_30_26_ladder;
        }
        float _2007;
        if (_1580 > 0.0)
        {
            _2007 = abs((1.0 - _1570) / _1580);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1570 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2007 = frontier_phi_42_37_ladder;
        }
        float _2334;
        if (_1583 > 0.0)
        {
            _2334 = abs((1.0 - _1574) / _1583);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1574 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2334 = frontier_phi_52_49_ladder;
        }
        float _2336 = isnan(_2007) ? _1690 : (isnan(_1690) ? _2007 : min(_1690, _2007));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1577) + _1566;
        float _2342 = (_2337 * _1580) + _1570;
        float _2343 = (_2337 * _1583) + _1574;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2344;
        float _2347 = _2344 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2343 > _2347) || ((_2343 < _2345) || ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 < _2345) || (_2341 > _2347))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2461 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2343, cbModelParam._m0[17u].z, fma(_2342, cbModelParam._m0[17u].y, _2341 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2343, cbModelParam._m0[18u].z, fma(_2342, cbModelParam._m0[18u].y, _2341 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2343, cbModelParam._m0[19u].z, fma(_2342, cbModelParam._m0[19u].y, _2341 * cbModelParam._m0[19u].x))), _1509);
            frontier_phi_27_52_ladder = _2461.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2461.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2461.x * cbModelParam._m0[1u].z;
        }
        _1602 = frontier_phi_27_52_ladder_2;
        _1604 = frontier_phi_27_52_ladder_1;
        _1606 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1586 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_576, _577, _578), _1509);
        _1602 = _1586.x * cbModelParam._m0[1u].z;
        _1604 = _1586.y * cbModelParam._m0[1u].z;
        _1606 = _1586.z * cbModelParam._m0[1u].z;
    }
    float _1618 = ((((1.0 - _597) * ((_584 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_597 * _584)) * _568;
    float _1619 = _1618 * ((cbModelParam._m0[1u].w * (_1602 - _1500)) + _1500);
    float _1620 = _1618 * ((cbModelParam._m0[1u].w * (_1604 - _1502)) + _1502);
    float _1621 = _1618 * ((cbModelParam._m0[1u].w * (_1606 - _1504)) + _1504);
    float _1624 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1627 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1630 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, _1619 * cbSceneParam._m0[91u].x));
    float _1664 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1668 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1672 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1676 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1677 = _1664 / _1676;
    float _1678 = _1668 / _1676;
    float _1679 = _1672 / _1676;
    float _1826;
    float _1827;
    float _1828;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1706 = ((uint(_1679 > cbSceneParam._m0[59u].y) + uint(_1679 > cbSceneParam._m0[59u].x)) + uint(_1679 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1707 = _1706 + 43u;
        uint _1715 = _1706 + 44u;
        uint _1723 = _1706 + 45u;
        uint _1731 = _1706 + 46u;
        float _1742 = fma(_1676, cbSceneParam._m0[_1707].w, fma(_1672, cbSceneParam._m0[_1707].z, fma(_1668, cbSceneParam._m0[_1707].y, _1664 * cbSceneParam._m0[_1707].x)));
        float _1746 = fma(_1676, cbSceneParam._m0[_1715].w, fma(_1672, cbSceneParam._m0[_1715].z, fma(_1668, cbSceneParam._m0[_1715].y, _1664 * cbSceneParam._m0[_1715].x)));
        float _1754 = fma(_1676, cbSceneParam._m0[_1731].w, fma(_1672, cbSceneParam._m0[_1731].z, fma(_1668, cbSceneParam._m0[_1731].y, _1664 * cbSceneParam._m0[_1731].x)));
        float _1759 = cbSceneParam._m0[33u].z * _1754;
        float _1761 = cbSceneParam._m0[33u].w * _1754;
        float _1764 = fma(_1676, cbSceneParam._m0[_1723].w, fma(_1672, cbSceneParam._m0[_1723].z, fma(_1668, cbSceneParam._m0[_1723].y, _1664 * cbSceneParam._m0[_1723].x))) / _1754;
        float _1812 = (cbSceneParam._m0[33u].x - sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679))) * cbSceneParam._m0[33u].y;
        float _4144 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1819 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1759 + _1742) / _1754, (_1761 + _1746) / _1754), _1764), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1761 + _1742) / _1754, (_1746 - _1759) / _1754), _1764), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1742 - _1759) / _1754, (_1746 - _1761) / _1754), _1764), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1742 - _1761) / _1754, (_1759 + _1746) / _1754), _1764), 0.0)).x), vec4(0.25)));
        _1826 = 1.0 - (_1819 * cbSceneParam._m0[34u].x);
        _1827 = 1.0 - (_1819 * cbSceneParam._m0[34u].y);
        _1828 = 1.0 - (_1819 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1826 = 1.0;
        _1827 = 1.0;
        _1828 = 1.0;
    }
    float _1892;
    float _1894;
    float _1896;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1880 = fma(_1676, cbSceneParam._m0[63u].w, fma(_1672, cbSceneParam._m0[63u].z, fma(_1668, cbSceneParam._m0[63u].y, _1664 * cbSceneParam._m0[63u].x)));
        float _1881 = fma(_1676, cbSceneParam._m0[60u].w, fma(_1672, cbSceneParam._m0[60u].z, fma(_1668, cbSceneParam._m0[60u].y, _1664 * cbSceneParam._m0[60u].x))) / _1880;
        float _1882 = fma(_1676, cbSceneParam._m0[61u].w, fma(_1672, cbSceneParam._m0[61u].z, fma(_1668, cbSceneParam._m0[61u].y, _1664 * cbSceneParam._m0[61u].x))) / _1880;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1881 >= cbSceneParam._m0[64u].x) && (_1882 >= cbSceneParam._m0[64u].y)) && (_1881 <= cbSceneParam._m0[64u].z)) && (_1882 <= cbSceneParam._m0[64u].w))
        {
            float _2020 = fma(_1676, cbSceneParam._m0[62u].w, fma(_1672, cbSceneParam._m0[62u].z, fma(_1668, cbSceneParam._m0[62u].y, _1664 * cbSceneParam._m0[62u].x))) / _1880;
            float _2024 = isnan(cbSceneParam._m0[41u].w) ? _2020 : (isnan(_2020) ? cbSceneParam._m0[41u].w : max(_2020, cbSceneParam._m0[41u].w));
            float _2067 = (cbSceneParam._m0[33u].x - sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679))) * cbSceneParam._m0[33u].y;
            float _4160 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
            float _2074 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1881, cbSceneParam._m0[33u].w + _1882), _2024), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1881, _1882 - cbSceneParam._m0[33u].z), _2024), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1881 - cbSceneParam._m0[33u].z, _1882 - cbSceneParam._m0[33u].w), _2024), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1881 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1882), _2024), 0.0)).x), vec4(0.25)));
            float _2078 = 1.0 - (_2074 * cbSceneParam._m0[34u].x);
            float _2079 = 1.0 - (_2074 * cbSceneParam._m0[34u].y);
            float _2080 = 1.0 - (_2074 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2079) ? _1827 : (isnan(_1827) ? _2079 : min(_1827, _2079));
            frontier_phi_39_38_ladder_1 = isnan(_2078) ? _1826 : (isnan(_1826) ? _2078 : min(_1826, _2078));
            frontier_phi_39_38_ladder_2 = isnan(_2080) ? _1828 : (isnan(_1828) ? _2080 : min(_1828, _2080));
        }
        else
        {
            frontier_phi_39_38_ladder = _1827;
            frontier_phi_39_38_ladder_1 = _1826;
            frontier_phi_39_38_ladder_2 = _1828;
        }
        _1892 = frontier_phi_39_38_ladder_1;
        _1894 = frontier_phi_39_38_ladder;
        _1896 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1892 = _1826;
        _1894 = _1827;
        _1896 = _1828;
    }
    uvec4 _1901 = floatBitsToUint(cbInstanceData._m0[_542 + 5u]);
    uint _1903 = _1901.x * 14u;
    uint _1904 = _1903 + 13u;
    float _1911 = _568 + (-1.0);
    float _1916 = (cbLight._m0[_1904].x * _1911) + 1.0;
    float _1917 = (cbLight._m0[_1904].y * _1911) + 1.0;
    float _1918 = (cbLight._m0[_1904].z * _1911) + 1.0;
    float _1919 = (cbLight._m0[_1904].w * _1911) + 1.0;
    uint _1920 = _1903 + 5u;
    float _1926 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1930 = _1903 + 4u;
    float _1939 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1943 = _1903 | 1u;
    float _1954 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_401, _402, _403));
    float _1957 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_401, _402, _403));
    float _4196 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _4207 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1962 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.3183098733425140380859375;
    float _1964 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * 0.3183098733425140380859375;
    float _1971 = ((cbLight._m0[_1920].x * _1926) * _1964) + (((cbLight._m0[_1930].x * _1892) * _1939) * _1962);
    float _1972 = ((_1926 * cbLight._m0[_1920].y) * _1964) + (((cbLight._m0[_1930].y * _1894) * _1939) * _1962);
    float _1973 = ((_1926 * cbLight._m0[_1920].z) * _1964) + (((cbLight._m0[_1930].z * _1896) * _1939) * _1962);
    uvec4 _1977 = floatBitsToUint(cbLight._m0[_1903 + 12u]);
    bool _1979 = _1977.x == 0u;
    float _2081;
    float _2083;
    float _2085;
    if (_1979)
    {
        _2081 = _1971;
        _2083 = _1972;
        _2085 = _1973;
    }
    else
    {
        uint _2089 = _1903 + 6u;
        float _2105 = (dot(vec3(cbLight._m0[_1903 + 2u].xyz), vec3(_401, _402, _403)) * 0.5) + 0.5;
        float _2106 = _2105 * _2105;
        float _4218 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2107 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2108 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2081 = (((cbLight._m0[_2089].x * 0.3183098733425140380859375) * _2107) * _2108) + _1971;
        _2083 = (((cbLight._m0[_2089].y * 0.3183098733425140380859375) * _2107) * _2108) + _1972;
        _2085 = (((cbLight._m0[_2089].z * 0.3183098733425140380859375) * _2107) * _2108) + _1973;
    }
    bool _2088 = _1977.y == 0u;
    float _2143;
    float _2145;
    float _2147;
    if (_2088)
    {
        _2143 = _2081;
        _2145 = _2083;
        _2147 = _2085;
    }
    else
    {
        uint _2305 = _1903 + 7u;
        float _2321 = (dot(vec3(cbLight._m0[_1903 + 3u].xyz), vec3(_401, _402, _403)) * 0.5) + 0.5;
        float _2322 = _2321 * _2321;
        float _4234 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2323 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2324 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2143 = (((cbLight._m0[_2305].x * 0.3183098733425140380859375) * _2323) * _2324) + _2081;
        _2145 = (((cbLight._m0[_2305].y * 0.3183098733425140380859375) * _2323) * _2324) + _2083;
        _2147 = (((cbLight._m0[_2305].z * 0.3183098733425140380859375) * _2323) * _2324) + _2085;
    }
    uint _2150 = _1903 + 8u;
    float _2163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _404) * 0.949999988079071044921875);
    float _2164 = _2163 * _2163;
    float _2165 = cbLight._m0[_1903].x + _481;
    float _2166 = cbLight._m0[_1903].y + _482;
    float _2167 = cbLight._m0[_1903].z + _483;
    float _2171 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
    float _2172 = _2171 * _2165;
    float _2173 = _2171 * _2166;
    float _2174 = _2171 * _2167;
    float _2175 = dot(vec3(_401, _402, _403), vec3(cbLight._m0[_1903].xyz));
    float _4250 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _4261 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _2179 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2180 = dot(vec3(_401, _402, _403), vec3(_2172, _2173, _2174));
    float _4272 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _2184 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2172, _2173, _2174));
    float _4283 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2188 = _2164 * _2164;
    float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
    float _2203 = (exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2204 = 1.0 - _2164;
    float _2215 = (0.5 / (((_2179 * ((_2178 * _2204) + _2164)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2204) + _2164) * _2178))) * _2178;
    float _4294 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2217 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
    uint _2231 = _1903 + 9u;
    float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _404) * 0.949999988079071044921875);
    float _2243 = _2242 * _2242;
    float _2244 = cbLight._m0[_1943].x + _481;
    float _2245 = cbLight._m0[_1943].y + _482;
    float _2246 = cbLight._m0[_1943].z + _483;
    float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
    float _2251 = _2250 * _2244;
    float _2252 = _2250 * _2245;
    float _2253 = _2250 * _2246;
    float _2254 = dot(vec3(_401, _402, _403), vec3(cbLight._m0[_1943].xyz));
    float _4305 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2258 = dot(vec3(_401, _402, _403), vec3(_2251, _2252, _2253));
    float _4316 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2262 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_2251, _2252, _2253));
    float _4327 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2266 = _2243 * _2243;
    float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
    float _2279 = (exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2280 = 1.0 - _2243;
    float _2290 = (0.5 / (((_2179 * ((_2257 * _2280) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2280) + _2243) * _2257))) * _2257;
    float _4338 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
    float _2302 = (((_2279 * cbLight._m0[_2231].x) * _2292) * _1926) + ((((cbLight._m0[_2150].x * _1892) * _2203) * _2217) * _1939);
    float _2303 = (((_2279 * cbLight._m0[_2231].y) * _2292) * _1926) + ((((cbLight._m0[_2150].y * _1894) * _2203) * _2217) * _1939);
    float _2304 = (((_2279 * cbLight._m0[_2231].z) * _2292) * _1926) + ((((cbLight._m0[_2150].z * _1896) * _2203) * _2217) * _1939);
    float _2360;
    float _2362;
    float _2364;
    if (_1979)
    {
        _2360 = _2302;
        _2362 = _2303;
        _2364 = _2304;
    }
    else
    {
        uint _2366 = _1903 + 2u;
        uint _2370 = _1903 + 10u;
        float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _404) * 0.949999988079071044921875);
        float _2385 = _2384 * _2384;
        float _2386 = cbLight._m0[_2366].x + _481;
        float _2387 = cbLight._m0[_2366].y + _482;
        float _2388 = cbLight._m0[_2366].z + _483;
        float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
        float _2393 = _2392 * _2386;
        float _2394 = _2392 * _2387;
        float _2395 = _2392 * _2388;
        float _2396 = dot(vec3(_401, _402, _403), vec3(cbLight._m0[_2366].xyz));
        float _4349 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2400 = dot(vec3(_401, _402, _403), vec3(_2393, _2394, _2395));
        float _4360 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2404 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2393, _2394, _2395));
        float _4371 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2408 = _2385 * _2385;
        float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
        float _2421 = (exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2422 = 1.0 - _2385;
        float _2432 = (0.5 / (((_2179 * ((_2399 * _2422) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2422) + _2385) * _2399))) * _2399;
        float _4382 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2434 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
        float _2435 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2360 = (((_2421 * cbLight._m0[_2370].x) * _2434) * _2435) + _2302;
        _2362 = (((_2421 * cbLight._m0[_2370].y) * _2434) * _2435) + _2303;
        _2364 = (((_2421 * cbLight._m0[_2370].z) * _2434) * _2435) + _2304;
    }
    float _2466;
    float _2468;
    float _2470;
    if (_2088)
    {
        _2466 = _2360;
        _2468 = _2362;
        _2470 = _2364;
    }
    else
    {
        uint _2477 = _1903 + 3u;
        uint _2481 = _1903 + 11u;
        float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2477].w)) * _404) * 0.949999988079071044921875);
        float _2496 = _2495 * _2495;
        float _2497 = cbLight._m0[_2477].x + _481;
        float _2498 = cbLight._m0[_2477].y + _482;
        float _2499 = cbLight._m0[_2477].z + _483;
        float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
        float _2504 = _2503 * _2497;
        float _2505 = _2503 * _2498;
        float _2506 = _2503 * _2499;
        float _2507 = dot(vec3(_401, _402, _403), vec3(cbLight._m0[_2477].xyz));
        float _4398 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2511 = dot(vec3(_401, _402, _403), vec3(_2504, _2505, _2506));
        float _4409 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2515 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_2504, _2505, _2506));
        float _4420 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2519 = _2496 * _2496;
        float _2523 = ((_2514 * _2514) * (_2519 + (-1.0))) + 1.0;
        float _2532 = (exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2533 = 1.0 - _2496;
        float _2543 = (0.5 / (((_2179 * ((_2510 * _2533) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2533) + _2496) * _2510))) * _2510;
        float _4431 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2545 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2519 / ((_2523 * _2523) * 3.141590118408203125));
        float _2546 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2466 = (((_2532 * cbLight._m0[_2481].x) * _2545) * _2546) + _2360;
        _2468 = (((_2532 * cbLight._m0[_2481].y) * _2545) * _2546) + _2362;
        _2470 = (((_2532 * cbLight._m0[_2481].z) * _2545) * _2546) + _2364;
    }
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    if (_1901.y == 0u)
    {
        uvec4 _2567 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2568 = _2567.x;
        uint _2579 = uint((float(_2567.y) * floor(float(uint(cbSceneParam._m0[85u].y * _503) / _2568))) + floor(float(uint(cbSceneParam._m0[85u].x * _502) / _2568)));
        float _2589 = (log2(_1679 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2590 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        uint _2593 = uint(isnan(14.0) ? _2590 : (isnan(_2590) ? 14.0 : min(_2590, 14.0)));
        uvec4 _2598 = texelFetch(g_lightClusterGridBuffer, int(((_2593 << 2u) + (_2579 << 6u)) >> 2u));
        uint _2599 = _2598.x;
        uint _2600 = _2567.z;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        if (((((1u << ((_2600 >> 4u) & 15u)) + 4294967295u) & _2599) == 0u) || ((_2600 & 240u) == 0u))
        {
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
        }
        else
        {
            float _2679;
            float _2681;
            float _2683;
            float _2685;
            float _2687;
            float _2689;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            uint _2836 = 0u;
            uint _2845;
            bool _2846;
            for (;;)
            {
                _2845 = texelFetch(g_lightClassification, int((((_2593 << 5u) + (_2579 << 9u)) + (_2836 << 2u)) >> 2u)).x;
                _2846 = _2845 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2846)
                {
                    frontier_phi_73_pred = _2835;
                    frontier_phi_73_pred_1 = _2834;
                    frontier_phi_73_pred_2 = _2833;
                    frontier_phi_73_pred_3 = _2832;
                    frontier_phi_73_pred_4 = _2831;
                    frontier_phi_73_pred_5 = _2830;
                }
                else
                {
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    uint _2981;
                    _2975 = _2830;
                    _2976 = _2831;
                    _2977 = _2832;
                    _2978 = _2833;
                    _2979 = _2834;
                    _2980 = _2835;
                    _2981 = _2845;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    for (;;)
                    {
                        uint _2985 = uint(findLSB(_2981)) + (_2836 << 5u);
                        uint _2982 = (_2981 + 4294967295u) & _2981;
                        uint _2987 = _2985 * 48u;
                        vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 3u)).x));
                        uint _3007 = (_2985 * 48u) + 4u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3026 = (_2985 * 48u) + 8u;
                        vec3 _3037 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x));
                        float _3041 = _3001.x - _1677;
                        float _3042 = _3001.y - _1678;
                        float _3043 = _3001.z - _1679;
                        float _3044 = dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043));
                        float _3047 = inversesqrt(_3044);
                        float _3048 = _3047 * _3041;
                        float _3049 = _3047 * _3042;
                        float _3050 = _3047 * _3043;
                        float _3051 = dot(vec3(_523, _526, _529), vec3(_3048, _3049, _3050));
                        float _3056 = 1.0 - (_3044 * _3001.w);
                        float _4457 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3057 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3058 = sqrt(_3044) * _3020.w;
                        float _3061 = 1.39999997615814208984375 / (_3058 + 1.39999997615814208984375);
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _3051) + _3062;
                        float _3068 = _3058 * _3058;
                        float _3072 = ((isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0))) * _3057) / ((_3068 * 0.699999988079071044921875) + 1.0);
                        float _3076 = (-0.0) - _1677;
                        float _3077 = (-0.0) - _1678;
                        float _3078 = (-0.0) - _1679;
                        float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                        float _3083 = _3082 * _3076;
                        float _3084 = _3082 * _3077;
                        float _3085 = _3082 * _3078;
                        float _3092 = exp2(log2(1.0 / ((_3068 * 3.5) + 5.0)) * 0.25);
                        float _3093 = 1.0 - _584;
                        float _3100 = sqrt(1.0 - ((1.0 - (_3093 * _3093)) * (1.0 - (_3092 * _3092))));
                        float _3101 = _3100 * _3100;
                        float _3102 = _3101 * _3101;
                        float _3103 = _3083 + _3048;
                        float _3104 = _3084 + _3049;
                        float _3105 = _3085 + _3050;
                        float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                        float _3113 = dot(vec3(_523, _526, _529), vec3(_3083, _3084, _3085));
                        float _4473 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3116 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3117 = dot(vec3(_523, _526, _529), vec3(_3109 * _3103, _3109 * _3104, _3109 * _3105));
                        float _4484 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3120 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3124 = ((_3120 * _3120) * (_3102 + (-1.0))) + 1.0;
                        float _3125 = _3061 * _3101;
                        float _3126 = _3125 * _3125;
                        float _3129 = ((1.0 - _3126) * _3051) + _3126;
                        float _4495 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3131 = 1.0 - _3101;
                        float _3141 = (0.5 / (((_3130 * ((_3116 * _3131) + _3101)) + 9.9999999392252902907785028219223e-09) + (((_3130 * _3131) + _3101) * _3116))) * _3130;
                        float _4506 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3152 = (((_3102 * 3.1415927410125732421875) * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) / ((_3124 * _3124) * ((_3068 * 2.1991131305694580078125) + 3.141590118408203125))) * _3057;
                        _2905 = (_3072 * _3020.x) + _2978;
                        _2906 = (_3072 * _3020.y) + _2979;
                        _2907 = (_3072 * _3020.z) + _2980;
                        _2902 = (_3152 * _3037.x) + _2975;
                        _2903 = (_3152 * _3037.y) + _2976;
                        _2904 = (_3152 * _3037.z) + _2977;
                        if (_2982 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2975 = _2902;
                            _2976 = _2903;
                            _2977 = _2904;
                            _2978 = _2905;
                            _2979 = _2906;
                            _2980 = _2907;
                            _2981 = _2982;
                        }
                    }
                    frontier_phi_73_pred = _2907;
                    frontier_phi_73_pred_1 = _2906;
                    frontier_phi_73_pred_2 = _2905;
                    frontier_phi_73_pred_3 = _2904;
                    frontier_phi_73_pred_4 = _2903;
                    frontier_phi_73_pred_5 = _2902;
                }
                _2689 = frontier_phi_73_pred;
                _2687 = frontier_phi_73_pred_1;
                _2685 = frontier_phi_73_pred_2;
                _2683 = frontier_phi_73_pred_3;
                _2681 = frontier_phi_73_pred_4;
                _2679 = frontier_phi_73_pred_5;
                uint _2837 = _2836 + 1u;
                if (_2837 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2830 = _2679;
                    _2831 = _2681;
                    _2832 = _2683;
                    _2833 = _2685;
                    _2834 = _2687;
                    _2835 = _2689;
                    _2836 = _2837;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
        }
        uvec4 _2692 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2693 = _2692.z;
        uint _2695 = (_2693 >> 8u) & 15u;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((4294967295u << _2695) & _2599) == 0u)
        {
            _2798 = _2678;
            _2800 = _2680;
            _2802 = _2682;
            _2804 = _2684;
            _2806 = _2686;
            _2808 = _2688;
        }
        else
        {
            float _2823 = inversesqrt(dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679)));
            float _2824 = _2823 * _1677;
            float _2825 = _2823 * _1678;
            float _2826 = _2823 * _1679;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2695 < ((_2693 >> 12u) & 15u))
            {
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2958 = _2678;
                float _2959 = _2680;
                float _2960 = _2682;
                float _2961 = _2684;
                float _2962 = _2686;
                float _2963 = _2688;
                uint _2964 = _2695;
                uint _2973;
                bool _2974;
                for (;;)
                {
                    _2973 = texelFetch(g_lightClassification, int((((_2593 << 5u) + (_2579 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                    _2974 = _2973 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2974)
                    {
                        frontier_phi_84_pred = _2962;
                        frontier_phi_84_pred_1 = _2961;
                        frontier_phi_84_pred_2 = _2960;
                        frontier_phi_84_pred_3 = _2959;
                        frontier_phi_84_pred_4 = _2958;
                        frontier_phi_84_pred_5 = _2963;
                    }
                    else
                    {
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3179 = _2958;
                        float _3180 = _2959;
                        float _3181 = _2960;
                        float _3182 = _2961;
                        float _3183 = _2962;
                        float _3184 = _2963;
                        uint _3185 = _2973;
                        uint _3186;
                        vec4 _3211;
                        float _3212;
                        vec4 _3227;
                        vec3 _3239;
                        vec4 _3255;
                        vec4 _3271;
                        float _3318;
                        bool _3319;
                        for (;;)
                        {
                            uint _3196 = ((_2964 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3185));
                            _3186 = (_3185 + 4294967295u) & _3185;
                            uint _3198 = _3196 * 40u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            _3212 = _3211.w;
                            uint _3214 = (_3196 * 40u) + 4u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3229 = (_3196 * 40u) + 8u;
                            _3239 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x));
                            uint _3242 = (_3196 * 40u) + 16u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3258 = (_3196 * 40u) + 20u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3274 = (_3196 * 40u) + 24u;
                            vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3293 = (_3196 * 40u) + 28u;
                            vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3318 = fma(_1679, _3306.z, fma(_1678, _3306.y, _3306.x * _1677)) + _3306.w;
                            _3319 = !((fma(_1679, _3287.z, fma(_1678, _3287.y, _3287.x * _1677)) + _3287.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3319)
                            {
                                float _3346 = _3211.x - _1677;
                                float _3347 = _3211.y - _1678;
                                float _3348 = _3211.z - _1679;
                                float _3349 = dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348));
                                float _3352 = inversesqrt(_3349);
                                float _3353 = _3352 * _3346;
                                float _3354 = _3352 * _3347;
                                float _3355 = _3352 * _3348;
                                float _3359 = 1.0 - (_3349 / (_3212 * _3212));
                                float _4517 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3364 = sqrt(_3349) * _3227.w;
                                float _3366 = 1.39999997615814208984375 / (_3364 + 1.39999997615814208984375);
                                float _3367 = _3366 * _3366;
                                float _3370 = ((1.0 - _3367) * dot(vec3(_3353, _3354, _3355), vec3(_523, _526, _529))) + _3367;
                                float _3373 = _3364 * _3364;
                                float _3377 = (fma(_1679, _3255.z, fma(_1678, _3255.y, _3255.x * _1677)) + _3255.w) / _3318;
                                float _3378 = (fma(_1679, _3271.z, fma(_1678, _3271.y, _3271.x * _1677)) + _3271.w) / _3318;
                                float _3382 = 1.0 - dot(vec2(_3377, _3378), vec2(_3377, _3378));
                                float _4533 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3384 = _3383 * (((isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))) * _3360) / ((_3373 * 0.699999988079071044921875) + 1.0));
                                float _3396 = exp2(log2(1.0 / ((_3373 * 3.5) + 5.0)) * 0.25);
                                float _3397 = 1.0 - _584;
                                float _3404 = sqrt(1.0 - ((1.0 - (_3397 * _3397)) * (1.0 - (_3396 * _3396))));
                                float _3405 = _3404 * _3404;
                                float _3406 = _3405 * _3405;
                                float _3407 = _3353 - _2824;
                                float _3408 = _3354 - _2825;
                                float _3409 = _3355 - _2826;
                                float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                                float _3417 = dot(vec3(_523, _526, _529), vec3((-0.0) - _2824, (-0.0) - _2825, (-0.0) - _2826));
                                float _4544 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3420 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3421 = dot(vec3(_523, _526, _529), vec3(_3413 * _3407, _3413 * _3408, _3413 * _3409));
                                float _4555 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3424 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3428 = ((_3424 * _3424) * (_3406 + (-1.0))) + 1.0;
                                float _3429 = _3366 * _3405;
                                float _3430 = _3429 * _3429;
                                float _3436 = ((1.0 - _3430) * dot(vec3(_523, _526, _529), vec3(_3353, _3354, _3355))) + _3430;
                                float _4566 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3438 = 1.0 - _3405;
                                float _3448 = (0.5 / (((_3437 * ((_3420 * _3438) + _3405)) + 9.9999999392252902907785028219223e-09) + (((_3437 * _3438) + _3405) * _3420))) * _3437;
                                float _4577 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3458 = (_3383 * _3360) * (((_3406 * 3.1415927410125732421875) * (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) / ((_3428 * _3428) * ((_3373 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3384 * _3227.y;
                                frontier_phi_90_pred_1 = _3384 * _3227.x;
                                frontier_phi_90_pred_2 = _3458 * _3239.z;
                                frontier_phi_90_pred_3 = _3458 * _3239.y;
                                frontier_phi_90_pred_4 = _3458 * _3239.x;
                                frontier_phi_90_pred_5 = _3384 * _3227.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3466 = frontier_phi_90_pred;
                            _3465 = frontier_phi_90_pred_1;
                            _3464 = frontier_phi_90_pred_2;
                            _3463 = frontier_phi_90_pred_3;
                            _3462 = frontier_phi_90_pred_4;
                            _3467 = frontier_phi_90_pred_5;
                            _3169 = _3465 + _3182;
                            _3170 = _3466 + _3183;
                            _3171 = _3467 + _3184;
                            _3166 = _3462 + _3179;
                            _3167 = _3463 + _3180;
                            _3168 = _3464 + _3181;
                            if (_3186 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3186;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3170;
                        frontier_phi_84_pred_1 = _3169;
                        frontier_phi_84_pred_2 = _3168;
                        frontier_phi_84_pred_3 = _3167;
                        frontier_phi_84_pred_4 = _3166;
                        frontier_phi_84_pred_5 = _3171;
                    }
                    _2807 = frontier_phi_84_pred;
                    _2805 = frontier_phi_84_pred_1;
                    _2803 = frontier_phi_84_pred_2;
                    _2801 = frontier_phi_84_pred_3;
                    _2799 = frontier_phi_84_pred_4;
                    _2809 = frontier_phi_84_pred_5;
                    uint _2965 = _2964 + 1u;
                    if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2958 = _2799;
                        _2959 = _2801;
                        _2960 = _2803;
                        _2961 = _2805;
                        _2962 = _2807;
                        _2963 = _2809;
                        _2964 = _2965;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2809;
                frontier_phi_65_66_ladder_1 = _2805;
                frontier_phi_65_66_ladder_2 = _2807;
                frontier_phi_65_66_ladder_3 = _2801;
                frontier_phi_65_66_ladder_4 = _2799;
                frontier_phi_65_66_ladder_5 = _2803;
            }
            else
            {
                frontier_phi_65_66_ladder = _2688;
                frontier_phi_65_66_ladder_1 = _2684;
                frontier_phi_65_66_ladder_2 = _2686;
                frontier_phi_65_66_ladder_3 = _2680;
                frontier_phi_65_66_ladder_4 = _2678;
                frontier_phi_65_66_ladder_5 = _2682;
            }
            _2798 = frontier_phi_65_66_ladder_4;
            _2800 = frontier_phi_65_66_ladder_3;
            _2802 = frontier_phi_65_66_ladder_5;
            _2804 = frontier_phi_65_66_ladder_1;
            _2806 = frontier_phi_65_66_ladder_2;
            _2808 = frontier_phi_65_66_ladder;
        }
        float _2813 = isnan(1.0) ? _568 : (isnan(_568) ? 1.0 : min(_568, 1.0));
        _2611 = (_2813 * _2804) + _2143;
        _2613 = (_2813 * _2806) + _2145;
        _2615 = (_2813 * _2808) + _2147;
        _2617 = ((_2798 * 0.039999999105930328369140625) * _2813) + _2466;
        _2619 = ((_2800 * 0.039999999105930328369140625) * _2813) + _2468;
        _2621 = ((_2802 * 0.039999999105930328369140625) * _2813) + _2470;
    }
    else
    {
        _2611 = _2143;
        _2613 = _2145;
        _2615 = _2147;
        _2617 = _2466;
        _2619 = _2468;
        _2621 = _2470;
    }
    float _4593 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _4604 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _4615 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _2638 = ((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2611 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _568))) + ((_2617 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1407)) * cbPerFrame._m0[3u].x);
    float _2639 = ((isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2613 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _568))) + ((_2619 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1407)) * cbPerFrame._m0[3u].x);
    float _2640 = ((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2615 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _568))) + ((_2621 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1407)) * cbPerFrame._m0[3u].x);
    uint _2641 = _542 + 6u;
    float _2649 = _502 / cbSceneParam._m0[86u].x;
    float _2650 = _503 / cbSceneParam._m0[86u].y;
    vec4 _2664 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2649, _2650, (log2((isnan(cbSceneParam._m0[77u].w) ? _423 : (isnan(_423) ? cbSceneParam._m0[77u].w : min(_423, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2666 = _2664.x;
    float _2667 = _2664.y;
    float _2668 = _2664.z;
    float _2669 = _2664.w;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    if (_423 > cbSceneParam._m0[78u].w)
    {
        float _2703 = isnan(_423) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _423 : min(cbSceneParam._m0[80u].w, _423));
        float _2704 = _2703 / _423;
        float _2715 = _2704 * _474;
        float _2716 = _475 * _2704;
        float _2717 = (-0.0) - _2716;
        float _2718 = _2704 * _476;
        float _2720 = (cbSceneParam._m0[77u].w * _2717) / _2703;
        float _2721 = _2720 + cbSceneParam._m0[79u].w;
        float _2722 = cbSceneParam._m0[79u].w - _2716;
        float _2728 = sqrt(((_2715 * _2715) + (_2716 * _2716)) + (_2718 * _2718));
        float _2731 = (1.0 - (cbSceneParam._m0[77u].w / _2703)) * _2728;
        float _2736 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2738 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2915;
        if (abs((_2717 - _2720) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2915 = ((((_2721 > 0.0) ? exp2(_2736 * _2721) : (2.0 - exp2(_2738 * _2721))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2731;
        }
        else
        {
            float _2859 = 1.0 / cbSceneParam._m0[80u].x;
            float _2860 = isnan(_2722) ? _2721 : (isnan(_2721) ? _2722 : max(_2721, _2722));
            float _2861 = isnan(_2722) ? _2721 : (isnan(_2721) ? _2722 : min(_2721, _2722));
            float _2870 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : min(_2860, 0.0));
            float _2871 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : min(_2861, 0.0));
            _2915 = ((abs(_2728 / _2717) * cbSceneParam._m0[80u].y) * ((((_2870 - _2871) * 2.0) - ((exp2(_2736 * (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0)))) - exp2(_2736 * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))))) * _2859)) - ((exp2(_2738 * _2870) - exp2(_2738 * _2871)) * _2859))) + (_2731 * cbSceneParam._m0[80u].z);
        }
        vec4 _2917 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2649, _2650, 1.0), 0.0);
        float _2926 = exp2((_2915 * (-1.44269502162933349609375)) * (1.0 - _2917.w));
        float _2927 = log2(_2926);
        float _2943 = log2(_2669);
        _2740 = (exp2(_2943 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].x)) * _2917.x) / cbSceneParam._m0[78u].x)) + _2666;
        _2742 = (exp2(_2943 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].y)) * _2917.y) / cbSceneParam._m0[78u].y)) + _2667;
        _2744 = (exp2(_2943 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].z)) * _2917.z) / cbSceneParam._m0[78u].z)) + _2668;
        _2746 = _2926 * _2669;
    }
    else
    {
        _2740 = _2666;
        _2742 = _2667;
        _2744 = _2668;
        _2746 = _2669;
    }
    bool _2953;
    vec4 _2756;
    vec4 _2778;
    float _2780;
    float _2784;
    float _2785;
    float _2786;
    float _2787;
    bool _2797;
    for (;;)
    {
        _2756 = cbMatDynParam._m0[0u];
        float _2758 = roundEven(_2756.y);
        bool _2759 = _2758 == 3.0;
        float _2760 = log2(_2746);
        float _2767 = exp2(_2760 * cbSceneParam._m0[78u].x) * _2638;
        float _2768 = exp2(_2760 * cbSceneParam._m0[78u].y) * _2639;
        float _2769 = exp2(_2760 * cbSceneParam._m0[78u].z) * _2640;
        float _2776 = _490 + (-0.5);
        _2778 = cbMtdParam._m0[1u];
        _2780 = _2778.y * _2776;
        float _2783 = (_2758 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2784 = _2783 * (_2759 ? _2767 : (_2767 + (cbSceneParam._m0[72u].w * _2740)));
        _2785 = _2783 * (_2759 ? _2768 : (_2768 + (cbSceneParam._m0[72u].w * _2742)));
        _2786 = _2783 * (_2759 ? _2769 : (_2769 + (cbSceneParam._m0[72u].w * _2744)));
        _2787 = _2776 * 0.999000012874603271484375;
        _2797 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2797)
        {
            if ((cbInstanceData._m0[_542 + 7u].x + _2787) < 0.5)
            {
                _2953 = true;
                break;
            }
        }
        uint _2894 = _544 + uint(_2756.w);
        if ((cbInstanceData._m0[_2894].w < 1.0) && ((cbInstanceData._m0[_2894].w + _2787) < 0.5))
        {
            _2953 = true;
            break;
        }
        if ((_2780 + 1.0) < _2778.x)
        {
            _2953 = true;
            break;
        }
        _2953 = false;
        break;
    }
    float _3157;
    if (_2953)
    {
        discard_state = true;
        _3157 = 0.0;
    }
    else
    {
        _3157 = cbInstanceData._m0[_2641].w;
    }
    SV_Target.x = _2784;
    SV_Target.y = _2785;
    SV_Target.z = _2786;
    SV_Target.w = _3157;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2641].w;
    discard_exit();
}


