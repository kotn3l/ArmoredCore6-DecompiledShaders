#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _920;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _236 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _241 = _236.z;
    float _245 = (_236.x * 2.0) + (-1.0);
    float _247 = (_236.y * 2.0) + (-1.0);
    float _248 = dot(vec2(_245, _247), vec2(_245, _247));
    float _3234 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _254 = sqrt(1.0 - (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))));
    float _257 = fma(_254, _211, fma(_247, _204, _245 * _190));
    float _260 = fma(_254, _212, fma(_247, _205, _245 * _191));
    float _263 = fma(_254, _213, fma(_247, _206, _245 * _192));
    float _267 = inversesqrt(dot(vec3(_257, _260, _263), vec3(_257, _260, _263)));
    float _268 = _267 * _257;
    float _269 = _267 * _260;
    float _270 = _267 * _263;
    float _275 = cbMtdParam._m0[10u].x + dot(vec4(_268, _269, _270, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3245 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _283 = dot(vec4(_268, _269, _270, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _3256 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _285 = (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))) + (isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0)));
    vec4 _303 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _308 = _303.x * cbMtdParam._m0[9u].x;
    float _309 = _303.y * cbMtdParam._m0[9u].y;
    float _310 = _303.z * cbMtdParam._m0[9u].z;
    vec4 _322 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _333 = ((_322.x - _308) * _285) + _308;
    float _334 = ((_322.y - _309) * _285) + _309;
    float _335 = ((_322.z - _310) * _285) + _310;
    vec4 _348 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _355 = (_348.x * 2.0) + (-1.0);
    float _356 = (_348.y * 2.0) + (-1.0);
    float _357 = dot(vec2(_355, _356), vec2(_355, _356));
    float _3267 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _365 = ((_348.z - _241) * _285) + _241;
    float _374 = ((sqrt(1.0 - (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0)))) - _254) * _285) + _254;
    float _378 = (((_355 - _245) * _285) + _245) + (cbMtdParam._m0[10u].y * _245);
    float _379 = (((_356 - _247) * _285) + _247) + (cbMtdParam._m0[10u].y * _247);
    float _382 = fma(_374, _211, fma(_379, _204, _378 * _190));
    float _385 = fma(_374, _212, fma(_379, _205, _378 * _191));
    float _388 = fma(_374, _213, fma(_379, _206, _378 * _192));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    float _393 = _392 * _382;
    float _394 = _392 * _385;
    float _395 = _392 * _388;
    float _3278 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _396 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
    float _3289 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3300 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3311 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _415 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _456 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _466 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _456);
    float _467 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _456);
    float _468 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _456);
    float _472 = inversesqrt(dot(vec3(_466, _467, _468), vec3(_466, _467, _468)));
    float _473 = _466 * _472;
    float _474 = _467 * _472;
    float _475 = _468 * _472;
    float _481 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _482 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _503 = fma(_395, cbSceneParam._m0[5u].z, fma(_394, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _393));
    float _506 = fma(_395, cbSceneParam._m0[6u].z, fma(_394, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _393));
    float _509 = fma(_395, cbSceneParam._m0[7u].z, fma(_394, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _393));
    uint _522 = uint(roundEven(NORMAL.w)) * 13u;
    uint _525 = (_522 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _531 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0)))) * cbInstanceData._m0[_525].x;
    float _532 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0)))) * cbInstanceData._m0[_525].y;
    float _533 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0)))) * cbInstanceData._m0[_525].z;
    float _3322 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _3333 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _535 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _3344 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    vec4 _545 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _481, cbSceneParam._m0[86u].y * _482));
    float _548 = _545.x * TEXCOORD.z;
    float _549 = dot(vec3(_393, _394, _395), vec3(_473, _474, _475));
    float _552 = _549 * 2.0;
    float _556 = (_552 * _393) - _473;
    float _557 = (_552 * _394) - _474;
    float _558 = (_552 * _395) - _475;
    float _562 = abs(dot(vec3(_473, _474, _475), vec3(_393, _394, _395)));
    float _3355 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _564 = sqrt(_396);
    float _577 = exp2((_564 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_564 * 3.0));
    float _609 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _919;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _644 = fma(_617, cbModelParam._m0[26u].z, fma(_613, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _609));
        float _648 = fma(_617, cbModelParam._m0[27u].z, fma(_613, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _609));
        float _652 = fma(_617, cbModelParam._m0[28u].z, fma(_613, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _609));
        float _677 = _609 + _393;
        float _678 = _613 + _394;
        float _679 = _617 + _395;
        float _689 = fma(_679, cbModelParam._m0[26u].z, fma(_678, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _677)) - _644;
        float _690 = fma(_679, cbModelParam._m0[27u].z, fma(_678, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _677)) - _648;
        float _691 = fma(_679, cbModelParam._m0[28u].z, fma(_678, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _677)) - _652;
        float _695 = inversesqrt(dot(vec3(_689, _690, _691), vec3(_689, _690, _691)));
        float _708 = ((_695 * _689) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_644 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _709 = ((_695 * _690) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_648 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _710 = ((_695 * _691) / cbModelParam._m0[34u].z) + ((((((_652 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_708, _709, _710), 0.0);
        float _747 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_713.x + (-0.5));
        float _749 = _747 * (_713.y + (-0.5));
        float _750 = _747 * (_713.z + (-0.5));
        float _757 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_720.x + (-0.5));
        float _759 = _757 * (_720.y + (-0.5));
        float _760 = _757 * (_720.z + (-0.5));
        float _767 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_727.x + (-0.5));
        float _769 = _767 * (_727.y + (-0.5));
        float _770 = _767 * (_727.z + (-0.5));
        float _777 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_734.x + (-0.5));
        float _779 = _777 * (_734.y + (-0.5));
        float _780 = _777 * (_734.z + (-0.5));
        float _781 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = _748 * 0.5;
        float _785 = _758 * 0.5;
        float _786 = _768 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _801 = (dot(vec3(_393, _394, _395), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3381 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _811 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_781 + 9.9999997473787516355514526367188e-06);
        float _3392 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3403 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) * (_813 + 1.0))) + _818) * _781;
        float _828 = _749 * 0.5;
        float _829 = _759 * 0.5;
        float _830 = _769 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _844 = (dot(vec3(_393, _394, _395), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3414 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _853 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3425 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3436 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * (_855 + 1.0))) + _860) * _782;
        float _870 = _750 * 0.5;
        float _871 = _760 * 0.5;
        float _872 = _770 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _886 = (dot(vec3(_393, _394, _395), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _895 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3469 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_897 + 1.0))) + _902) * _783;
        _919 = _750;
        _921 = _749;
        _922 = _748;
        _923 = _760;
        _924 = _759;
        _925 = _758;
        _926 = _770;
        _927 = _769;
        _928 = _768;
        _929 = _783;
        _930 = _782;
        _931 = _781;
        _932 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
    }
    else
    {
        _919 = _920;
        _921 = _920;
        _922 = _920;
        _923 = _920;
        _924 = _920;
        _925 = _920;
        _926 = _920;
        _927 = _920;
        _928 = _920;
        _929 = _920;
        _930 = _920;
        _931 = _920;
        _932 = 0.0;
        _933 = 0.0;
        _934 = 0.0;
    }
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _960 = fma(_617, cbModelParam._m0[30u].z, fma(_613, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _609));
        float _964 = fma(_617, cbModelParam._m0[31u].z, fma(_613, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _609));
        float _968 = fma(_617, cbModelParam._m0[32u].z, fma(_613, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _609));
        float _991 = _609 + _393;
        float _992 = _613 + _394;
        float _993 = _617 + _395;
        float _1003 = fma(_993, cbModelParam._m0[30u].z, fma(_992, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _991)) - _960;
        float _1004 = fma(_993, cbModelParam._m0[31u].z, fma(_992, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _991)) - _964;
        float _1005 = fma(_993, cbModelParam._m0[32u].z, fma(_992, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _991)) - _968;
        float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
        float _1022 = ((_1009 * _1003) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_960 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1009 * _1004) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_964 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1009 * _1005) / cbModelParam._m0[35u].z) + ((((((_968 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        float _1059 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1026.x + (-0.5));
        float _1061 = _1059 * (_1026.y + (-0.5));
        float _1062 = _1059 * (_1026.z + (-0.5));
        float _1069 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1033.x + (-0.5));
        float _1071 = _1069 * (_1033.y + (-0.5));
        float _1072 = _1069 * (_1033.z + (-0.5));
        float _1079 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1040.x + (-0.5));
        float _1081 = _1079 * (_1040.y + (-0.5));
        float _1082 = _1079 * (_1040.z + (-0.5));
        float _1089 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1047.x + (-0.5));
        float _1091 = _1089 * (_1047.y + (-0.5));
        float _1092 = _1089 * (_1047.z + (-0.5));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = _1060 * 0.5;
        float _1097 = _1070 * 0.5;
        float _1098 = _1080 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_393, _394, _395), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3532 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_1123 + 1.0))) + _1128) * _1093;
        float _1138 = _1061 * 0.5;
        float _1139 = _1071 * 0.5;
        float _1140 = _1081 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_393, _394, _395), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3565 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_1165 + 1.0))) + _1170) * _1094;
        float _1180 = _1062 * 0.5;
        float _1181 = _1072 * 0.5;
        float _1182 = _1082 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_393, _394, _395), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3598 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_1207 + 1.0))) + _1212) * _1095;
        _1229 = _1062;
        _1230 = _1061;
        _1231 = _1060;
        _1232 = _1072;
        _1233 = _1071;
        _1234 = _1070;
        _1235 = _1082;
        _1236 = _1081;
        _1237 = _1080;
        _1238 = _1095;
        _1239 = _1094;
        _1240 = _1093;
        _1241 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _920;
        _1230 = _920;
        _1231 = _920;
        _1232 = _920;
        _1233 = _920;
        _1234 = _920;
        _1235 = _920;
        _1236 = _920;
        _1237 = _920;
        _1238 = _920;
        _1239 = _920;
        _1240 = _920;
        _1241 = 0.0;
        _1242 = 0.0;
        _1243 = 0.0;
    }
    float _1253 = (cbModelParam._m0[1u].x * (_1241 - _932)) + _932;
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _933)) + _933;
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _934)) + _934;
    float _1276 = fma(_1255, cbSceneParam._m0[89u].z, fma(_1254, cbSceneParam._m0[89u].y, _1253 * cbSceneParam._m0[89u].x));
    float _1279 = fma(_1255, cbSceneParam._m0[90u].z, fma(_1254, cbSceneParam._m0[90u].y, _1253 * cbSceneParam._m0[90u].x));
    float _1282 = fma(_1255, cbSceneParam._m0[91u].z, fma(_1254, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1253));
    float _1297 = _556 * 0.5;
    float _1298 = _557 * 0.5;
    float _1299 = _558 * 0.5;
    float _1300 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1303 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1306 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1229, _1232, _1235, _1238));
    float _1340;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1313 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_919, _923, _926, _929));
        float _1317 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_921, _924, _927, _930));
        float _1321 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_922, _925, _928, _931));
        float _1328 = dot(vec4(cbModelParam._m0[39u]), vec4(_1297, _1298, _1299, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1328) ? 0.0 : (isnan(0.0) ? _1328 : max(0.0, _1328))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1351;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1342 = dot(vec4(cbModelParam._m0[40u]), vec4(_1297, _1298, _1299, 1.0));
        _1351 = dot(vec3(isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1342) ? 0.0 : (isnan(0.0) ? _1342 : max(0.0, _1342))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1351 = 1.0;
    }
    float _1355 = (_1351 * cbModelParam._m0[1u].x) + (_1340 * (1.0 - cbModelParam._m0[1u].x));
    float _1365 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _396);
    float _1366 = isnan(_1365) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1365 : min(cbModelParam._m0[25u].z, _1365));
    float _1448;
    float _1450;
    float _1452;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1415 = fma(_617, cbModelParam._m0[13u].z, fma(_613, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _609)) + cbModelParam._m0[13u].w;
        float _1419 = fma(_617, cbModelParam._m0[14u].z, fma(_613, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _609)) + cbModelParam._m0[14u].w;
        float _1423 = fma(_617, cbModelParam._m0[15u].z, fma(_613, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _609)) + cbModelParam._m0[15u].w;
        float _1426 = fma(_558, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556));
        float _1429 = fma(_558, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556));
        float _1432 = fma(_558, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556));
        float _1460;
        if (_1426 > 0.0)
        {
            _1460 = abs((1.0 - _1415) / _1426);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1415 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1460 = frontier_phi_16_14_ladder;
        }
        float _1664;
        if (_1429 > 0.0)
        {
            _1664 = abs((1.0 - _1419) / _1429);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1419 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1664 = frontier_phi_25_21_ladder;
        }
        float _1907;
        if (_1432 > 0.0)
        {
            _1907 = abs((1.0 - _1423) / _1432);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1423 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1907 = frontier_phi_37_32_ladder;
        }
        float _1909 = isnan(_1664) ? _1460 : (isnan(_1460) ? _1664 : min(_1460, _1664));
        float _1910 = isnan(_1907) ? _1909 : (isnan(_1909) ? _1907 : min(_1909, _1907));
        float _1914 = (_1910 * _1426) + _1415;
        float _1915 = (_1910 * _1429) + _1419;
        float _1916 = (_1910 * _1432) + _1423;
        float _1917 = _1910 * 9.9999997473787516355514526367188e-05;
        float _1919 = (-1.0) - _1917;
        float _1921 = _1917 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1916 > _1921) || ((_1916 < _1919) || ((_1915 > _1921) || ((_1915 < _1919) || ((_1914 < _1919) || (_1914 > _1921))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2040 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1916, cbModelParam._m0[9u].z, fma(_1915, cbModelParam._m0[9u].y, _1914 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1916, cbModelParam._m0[10u].z, fma(_1915, cbModelParam._m0[10u].y, _1914 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1916, cbModelParam._m0[11u].z, fma(_1915, cbModelParam._m0[11u].y, _1914 * cbModelParam._m0[11u].x))), _1366);
            frontier_phi_15_37_ladder = _2040.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2040.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2040.x * cbModelParam._m0[1u].y;
        }
        _1448 = frontier_phi_15_37_ladder_2;
        _1450 = frontier_phi_15_37_ladder_1;
        _1452 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_556, _557, _558), _1366);
        _1448 = _1436.x * cbModelParam._m0[1u].y;
        _1450 = _1436.y * cbModelParam._m0[1u].y;
        _1452 = _1436.z * cbModelParam._m0[1u].y;
    }
    float _1456 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _396);
    float _1457 = isnan(_1456) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1456 : min(cbModelParam._m0[25u].w, _1456));
    float _1550;
    float _1552;
    float _1554;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1514 = fma(_617, cbModelParam._m0[21u].z, fma(_613, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _609)) + cbModelParam._m0[21u].w;
        float _1518 = fma(_617, cbModelParam._m0[22u].z, fma(_613, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _609)) + cbModelParam._m0[22u].w;
        float _1522 = fma(_617, cbModelParam._m0[23u].z, fma(_613, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _609)) + cbModelParam._m0[23u].w;
        float _1525 = fma(_558, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556));
        float _1528 = fma(_558, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556));
        float _1531 = fma(_558, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556));
        float _1669;
        if (_1525 > 0.0)
        {
            _1669 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1669 = frontier_phi_27_23_ladder;
        }
        float _1934;
        if (_1528 > 0.0)
        {
            _1934 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1934 = frontier_phi_39_34_ladder;
        }
        float _2139;
        if (_1531 > 0.0)
        {
            _2139 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2139 = frontier_phi_48_45_ladder;
        }
        float _2141 = isnan(_1934) ? _1669 : (isnan(_1669) ? _1934 : min(_1669, _1934));
        float _2142 = isnan(_2139) ? _2141 : (isnan(_2141) ? _2139 : min(_2141, _2139));
        float _2146 = (_2142 * _1525) + _1514;
        float _2147 = (_2142 * _1528) + _1518;
        float _2148 = (_2142 * _1531) + _1522;
        float _2149 = _2142 * 9.9999997473787516355514526367188e-05;
        float _2150 = (-1.0) - _2149;
        float _2152 = _2149 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2148 > _2152) || ((_2148 < _2150) || ((_2147 > _2152) || ((_2147 < _2150) || ((_2146 < _2150) || (_2146 > _2152))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2346 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2148, cbModelParam._m0[17u].z, fma(_2147, cbModelParam._m0[17u].y, _2146 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2148, cbModelParam._m0[18u].z, fma(_2147, cbModelParam._m0[18u].y, _2146 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2148, cbModelParam._m0[19u].z, fma(_2147, cbModelParam._m0[19u].y, _2146 * cbModelParam._m0[19u].x))), _1457);
            frontier_phi_24_48_ladder = _2346.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2346.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2346.x * cbModelParam._m0[1u].z;
        }
        _1550 = frontier_phi_24_48_ladder_2;
        _1552 = frontier_phi_24_48_ladder_1;
        _1554 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_556, _557, _558), _1457);
        _1550 = _1534.x * cbModelParam._m0[1u].z;
        _1552 = _1534.y * cbModelParam._m0[1u].z;
        _1554 = _1534.z * cbModelParam._m0[1u].z;
    }
    float _1566 = ((((1.0 - _577) * ((_564 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_577 * _564)) * _548;
    float _1567 = _1566 * ((cbModelParam._m0[1u].w * (_1550 - _1448)) + _1448);
    float _1568 = _1566 * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1569 = _1566 * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1572 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, _1567 * cbSceneParam._m0[91u].x));
    uvec4 _1588 = floatBitsToUint(cbInstanceData._m0[_522 + 5u]);
    uint _1590 = _1588.x * 14u;
    uint _1591 = _1590 + 13u;
    float _1598 = _548 + (-1.0);
    float _1603 = (cbLight._m0[_1591].x * _1598) + 1.0;
    float _1604 = (cbLight._m0[_1591].y * _1598) + 1.0;
    float _1605 = (cbLight._m0[_1591].z * _1598) + 1.0;
    float _1606 = (cbLight._m0[_1591].w * _1598) + 1.0;
    uint _1607 = _1590 + 5u;
    float _1613 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
    uint _1617 = _1590 + 4u;
    float _1623 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
    uint _1627 = _1590 | 1u;
    float _1638 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_393, _394, _395));
    float _1641 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_393, _394, _395));
    float _3734 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _3745 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1646 = (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * 0.3183098733425140380859375;
    float _1648 = (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.3183098733425140380859375;
    float _1655 = ((cbLight._m0[_1607].x * _1613) * _1648) + ((cbLight._m0[_1617].x * _1623) * _1646);
    float _1656 = ((_1613 * cbLight._m0[_1607].y) * _1648) + ((_1623 * cbLight._m0[_1617].y) * _1646);
    float _1657 = ((_1613 * cbLight._m0[_1607].z) * _1648) + ((_1623 * cbLight._m0[_1617].z) * _1646);
    uvec4 _1661 = floatBitsToUint(cbLight._m0[_1590 + 12u]);
    bool _1663 = _1661.x == 0u;
    float _1674;
    float _1676;
    float _1678;
    if (_1663)
    {
        _1674 = _1655;
        _1676 = _1656;
        _1678 = _1657;
    }
    else
    {
        uint _1682 = _1590 + 6u;
        float _1698 = (dot(vec3(cbLight._m0[_1590 + 2u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _1699 = _1698 * _1698;
        float _3756 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1701 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _1674 = (((cbLight._m0[_1682].x * 0.3183098733425140380859375) * _1700) * _1701) + _1655;
        _1676 = (((cbLight._m0[_1682].y * 0.3183098733425140380859375) * _1700) * _1701) + _1656;
        _1678 = (((cbLight._m0[_1682].z * 0.3183098733425140380859375) * _1700) * _1701) + _1657;
    }
    bool _1681 = _1661.y == 0u;
    float _1719;
    float _1721;
    float _1723;
    if (_1681)
    {
        _1719 = _1674;
        _1721 = _1676;
        _1723 = _1678;
    }
    else
    {
        uint _1878 = _1590 + 7u;
        float _1894 = (dot(vec3(cbLight._m0[_1590 + 3u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _3772 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1897 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _1719 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1674;
        _1721 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1676;
        _1723 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1678;
    }
    uint _1726 = _1590 + 8u;
    float _1739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1590].w)) * _396) * 0.949999988079071044921875);
    float _1740 = _1739 * _1739;
    float _1741 = cbLight._m0[_1590].x + _473;
    float _1742 = cbLight._m0[_1590].y + _474;
    float _1743 = cbLight._m0[_1590].z + _475;
    float _1747 = inversesqrt(dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743)));
    float _1748 = _1747 * _1741;
    float _1749 = _1747 * _1742;
    float _1750 = _1747 * _1743;
    float _1751 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1590].xyz));
    float _3788 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1754 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _1755 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _1756 = dot(vec3(_393, _394, _395), vec3(_1748, _1749, _1750));
    float _3810 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1759 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _1760 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_1748, _1749, _1750));
    float _3821 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1764 = _1740 * _1740;
    float _1768 = ((_1759 * _1759) * (_1764 + (-1.0))) + 1.0;
    float _1779 = (exp2(log2(1.0 - (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1780 = 1.0 - _1740;
    float _1791 = (0.5 / (((_1755 * ((_1754 * _1780) + _1740)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _1780) + _1740) * _1754))) * _1754;
    float _3832 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1793 = (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1764 / ((_1768 * _1768) * 3.141590118408203125));
    uint _1804 = _1590 + 9u;
    float _1815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1627].w)) * _396) * 0.949999988079071044921875);
    float _1816 = _1815 * _1815;
    float _1817 = cbLight._m0[_1627].x + _473;
    float _1818 = cbLight._m0[_1627].y + _474;
    float _1819 = cbLight._m0[_1627].z + _475;
    float _1823 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
    float _1824 = _1823 * _1817;
    float _1825 = _1823 * _1818;
    float _1826 = _1823 * _1819;
    float _1827 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1627].xyz));
    float _3843 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _1831 = dot(vec3(_393, _394, _395), vec3(_1824, _1825, _1826));
    float _3854 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _1835 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_1824, _1825, _1826));
    float _3865 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1839 = _1816 * _1816;
    float _1843 = ((_1834 * _1834) * (_1839 + (-1.0))) + 1.0;
    float _1852 = (exp2(log2(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1853 = 1.0 - _1816;
    float _1863 = (0.5 / (((_1755 * ((_1830 * _1853) + _1816)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _1853) + _1816) * _1830))) * _1830;
    float _3876 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1865 = (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1839 / ((_1843 * _1843) * 3.141590118408203125));
    float _1875 = (((_1852 * cbLight._m0[_1804].x) * _1865) * _1613) + (((_1779 * cbLight._m0[_1726].x) * _1793) * _1623);
    float _1876 = (((_1852 * cbLight._m0[_1804].y) * _1865) * _1613) + (((_1779 * cbLight._m0[_1726].y) * _1793) * _1623);
    float _1877 = (((_1852 * cbLight._m0[_1804].z) * _1865) * _1613) + (((_1779 * cbLight._m0[_1726].z) * _1793) * _1623);
    float _1939;
    float _1941;
    float _1943;
    if (_1663)
    {
        _1939 = _1875;
        _1941 = _1876;
        _1943 = _1877;
    }
    else
    {
        uint _1945 = _1590 + 2u;
        uint _1949 = _1590 + 10u;
        float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _396) * 0.949999988079071044921875);
        float _1964 = _1963 * _1963;
        float _1965 = cbLight._m0[_1945].x + _473;
        float _1966 = cbLight._m0[_1945].y + _474;
        float _1967 = cbLight._m0[_1945].z + _475;
        float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
        float _1972 = _1971 * _1965;
        float _1973 = _1971 * _1966;
        float _1974 = _1971 * _1967;
        float _1975 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1945].xyz));
        float _3887 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1978 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1979 = dot(vec3(_393, _394, _395), vec3(_1972, _1973, _1974));
        float _3898 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1982 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1983 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_1972, _1973, _1974));
        float _3909 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1987 = _1964 * _1964;
        float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
        float _2000 = (exp2(log2(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2001 = 1.0 - _1964;
        float _2011 = (0.5 / (((_1755 * ((_1978 * _2001) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _2001) + _1964) * _1978))) * _1978;
        float _3920 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2013 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
        float _2014 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _1939 = (((_2000 * cbLight._m0[_1949].x) * _2013) * _2014) + _1875;
        _1941 = (((_2000 * cbLight._m0[_1949].y) * _2013) * _2014) + _1876;
        _1943 = (((_2000 * cbLight._m0[_1949].z) * _2013) * _2014) + _1877;
    }
    float _2049;
    float _2051;
    float _2053;
    if (_1681)
    {
        _2049 = _1939;
        _2051 = _1941;
        _2053 = _1943;
    }
    else
    {
        uint _2060 = _1590 + 3u;
        uint _2064 = _1590 + 11u;
        float _2078 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2060].w)) * _396) * 0.949999988079071044921875);
        float _2079 = _2078 * _2078;
        float _2080 = cbLight._m0[_2060].x + _473;
        float _2081 = cbLight._m0[_2060].y + _474;
        float _2082 = cbLight._m0[_2060].z + _475;
        float _2086 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
        float _2087 = _2086 * _2080;
        float _2088 = _2086 * _2081;
        float _2089 = _2086 * _2082;
        float _2090 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2060].xyz));
        float _3936 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2093 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _2094 = dot(vec3(_393, _394, _395), vec3(_2087, _2088, _2089));
        float _3947 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2097 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _2098 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_2087, _2088, _2089));
        float _3958 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2102 = _2079 * _2079;
        float _2106 = ((_2097 * _2097) * (_2102 + (-1.0))) + 1.0;
        float _2115 = (exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2116 = 1.0 - _2079;
        float _2126 = (0.5 / (((_1755 * ((_2093 * _2116) + _2079)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _2116) + _2079) * _2093))) * _2093;
        float _3969 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2128 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_2102 / ((_2106 * _2106) * 3.141590118408203125));
        float _2129 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
        _2049 = (((_2115 * cbLight._m0[_2064].x) * _2128) * _2129) + _1939;
        _2051 = (((_2115 * cbLight._m0[_2064].y) * _2128) * _2129) + _1941;
        _2053 = (((_2115 * cbLight._m0[_2064].z) * _2128) * _2129) + _1943;
    }
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    if (_1588.y == 0u)
    {
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2204;
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2204;
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2204;
        uvec4 _2219 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2220 = _2219.x;
        uint _2231 = uint((float(_2219.y) * floor(float(uint(cbSceneParam._m0[85u].y * _482) / _2220))) + floor(float(uint(cbSceneParam._m0[85u].x * _481) / _2220)));
        float _2241 = (log2(_2207 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2242 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        uint _2245 = uint(isnan(14.0) ? _2242 : (isnan(_2242) ? 14.0 : min(_2242, 14.0)));
        uvec4 _2250 = texelFetch(g_lightClusterGridBuffer, int(((_2245 << 2u) + (_2231 << 6u)) >> 2u));
        uint _2251 = _2250.x;
        uint _2252 = _2219.z;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        if (((((1u << ((_2252 >> 4u) & 15u)) + 4294967295u) & _2251) == 0u) || ((_2252 & 240u) == 0u))
        {
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
        }
        else
        {
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2362;
            float _2495 = 0.0;
            float _2496 = 0.0;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            uint _2501 = 0u;
            uint _2510;
            bool _2511;
            for (;;)
            {
                _2510 = texelFetch(g_lightClassification, int((((_2245 << 5u) + (_2231 << 9u)) + (_2501 << 2u)) >> 2u)).x;
                _2511 = _2510 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2511)
                {
                    frontier_phi_63_pred = _2500;
                    frontier_phi_63_pred_1 = _2499;
                    frontier_phi_63_pred_2 = _2498;
                    frontier_phi_63_pred_3 = _2497;
                    frontier_phi_63_pred_4 = _2496;
                    frontier_phi_63_pred_5 = _2495;
                }
                else
                {
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    uint _2625;
                    _2619 = _2495;
                    _2620 = _2496;
                    _2621 = _2497;
                    _2622 = _2498;
                    _2623 = _2499;
                    _2624 = _2500;
                    _2625 = _2510;
                    float _2551;
                    float _2552;
                    float _2553;
                    float _2554;
                    float _2555;
                    float _2556;
                    for (;;)
                    {
                        uint _2629 = uint(findLSB(_2625)) + (_2501 << 5u);
                        uint _2626 = (_2625 + 4294967295u) & _2625;
                        uint _2631 = _2629 * 48u;
                        vec4 _2645 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2631)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 3u)).x));
                        uint _2651 = (_2629 * 48u) + 4u;
                        vec4 _2664 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 3u)).x));
                        uint _2670 = (_2629 * 48u) + 8u;
                        vec3 _2681 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2670)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 2u)).x));
                        float _2685 = _2645.x - _2205;
                        float _2686 = _2645.y - _2206;
                        float _2687 = _2645.z - _2207;
                        float _2688 = dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687));
                        float _2691 = inversesqrt(_2688);
                        float _2692 = _2691 * _2685;
                        float _2693 = _2691 * _2686;
                        float _2694 = _2691 * _2687;
                        float _2695 = dot(vec3(_503, _506, _509), vec3(_2692, _2693, _2694));
                        float _2700 = 1.0 - (_2688 * _2645.w);
                        float _3995 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2701 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
                        float _2702 = sqrt(_2688) * _2664.w;
                        float _2705 = 1.39999997615814208984375 / (_2702 + 1.39999997615814208984375);
                        float _2706 = _2705 * _2705;
                        float _2709 = ((1.0 - _2706) * _2695) + _2706;
                        float _2712 = _2702 * _2702;
                        float _2716 = ((isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0))) * _2701) / ((_2712 * 0.699999988079071044921875) + 1.0);
                        float _2720 = (-0.0) - _2205;
                        float _2721 = (-0.0) - _2206;
                        float _2722 = (-0.0) - _2207;
                        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
                        float _2727 = _2726 * _2720;
                        float _2728 = _2726 * _2721;
                        float _2729 = _2726 * _2722;
                        float _2737 = exp2(log2(1.0 / ((_2712 * 3.5) + 5.0)) * 0.25);
                        float _2738 = 1.0 - _564;
                        float _2745 = sqrt(1.0 - ((1.0 - (_2738 * _2738)) * (1.0 - (_2737 * _2737))));
                        float _2746 = _2745 * _2745;
                        float _2747 = _2746 * _2746;
                        float _2748 = _2727 + _2692;
                        float _2749 = _2728 + _2693;
                        float _2750 = _2729 + _2694;
                        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
                        float _2758 = dot(vec3(_503, _506, _509), vec3(_2727, _2728, _2729));
                        float _4011 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2761 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                        float _2762 = dot(vec3(_503, _506, _509), vec3(_2754 * _2748, _2754 * _2749, _2754 * _2750));
                        float _4022 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2765 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                        float _2769 = ((_2765 * _2765) * (_2747 + (-1.0))) + 1.0;
                        float _2770 = _2705 * _2746;
                        float _2771 = _2770 * _2770;
                        float _2774 = ((1.0 - _2771) * _2695) + _2771;
                        float _4033 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2775 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                        float _2776 = 1.0 - _2746;
                        float _2786 = (0.5 / (((_2775 * ((_2761 * _2776) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2775 * _2776) + _2746) * _2761))) * _2775;
                        float _4044 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2797 = (((_2747 * 3.1415927410125732421875) * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) / ((_2769 * _2769) * ((_2712 * 2.1991131305694580078125) + 3.141590118408203125))) * _2701;
                        _2554 = (_2716 * _2664.x) + _2622;
                        _2555 = (_2716 * _2664.y) + _2623;
                        _2556 = (_2716 * _2664.z) + _2624;
                        _2551 = (_2797 * _2681.x) + _2619;
                        _2552 = (_2797 * _2681.y) + _2620;
                        _2553 = (_2797 * _2681.z) + _2621;
                        if (_2626 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2619 = _2551;
                            _2620 = _2552;
                            _2621 = _2553;
                            _2622 = _2554;
                            _2623 = _2555;
                            _2624 = _2556;
                            _2625 = _2626;
                        }
                    }
                    frontier_phi_63_pred = _2556;
                    frontier_phi_63_pred_1 = _2555;
                    frontier_phi_63_pred_2 = _2554;
                    frontier_phi_63_pred_3 = _2553;
                    frontier_phi_63_pred_4 = _2552;
                    frontier_phi_63_pred_5 = _2551;
                }
                _2362 = frontier_phi_63_pred;
                _2360 = frontier_phi_63_pred_1;
                _2358 = frontier_phi_63_pred_2;
                _2356 = frontier_phi_63_pred_3;
                _2354 = frontier_phi_63_pred_4;
                _2352 = frontier_phi_63_pred_5;
                uint _2502 = _2501 + 1u;
                if (_2502 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2495 = _2352;
                    _2496 = _2354;
                    _2497 = _2356;
                    _2498 = _2358;
                    _2499 = _2360;
                    _2500 = _2362;
                    _2501 = _2502;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
        }
        uvec4 _2365 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2366 = _2365.z;
        uint _2368 = (_2366 >> 8u) & 15u;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        if (((4294967295u << _2368) & _2251) == 0u)
        {
            _2463 = _2351;
            _2465 = _2353;
            _2467 = _2355;
            _2469 = _2357;
            _2471 = _2359;
            _2473 = _2361;
        }
        else
        {
            float _2488 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
            float _2489 = _2488 * _2205;
            float _2490 = _2488 * _2206;
            float _2491 = _2488 * _2207;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2368 < ((_2366 >> 12u) & 15u))
            {
                float _2464;
                float _2466;
                float _2468;
                float _2470;
                float _2472;
                float _2474;
                float _2602 = _2351;
                float _2603 = _2353;
                float _2604 = _2355;
                float _2605 = _2357;
                float _2606 = _2359;
                float _2607 = _2361;
                uint _2608 = _2368;
                uint _2617;
                bool _2618;
                for (;;)
                {
                    _2617 = texelFetch(g_lightClassification, int((((_2245 << 5u) + (_2231 << 9u)) + (_2608 << 2u)) >> 2u)).x;
                    _2618 = _2617 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2618)
                    {
                        frontier_phi_69_pred = _2607;
                        frontier_phi_69_pred_1 = _2606;
                        frontier_phi_69_pred_2 = _2605;
                        frontier_phi_69_pred_3 = _2604;
                        frontier_phi_69_pred_4 = _2603;
                        frontier_phi_69_pred_5 = _2602;
                    }
                    else
                    {
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _2815 = _2602;
                        float _2816 = _2603;
                        float _2817 = _2604;
                        float _2818 = _2605;
                        float _2819 = _2606;
                        float _2820 = _2607;
                        uint _2821 = _2617;
                        uint _2822;
                        vec4 _2847;
                        float _2848;
                        vec4 _2863;
                        vec3 _2875;
                        vec4 _2891;
                        vec4 _2907;
                        float _2954;
                        bool _2955;
                        for (;;)
                        {
                            uint _2832 = ((_2608 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2821));
                            _2822 = (_2821 + 4294967295u) & _2821;
                            uint _2834 = _2832 * 40u;
                            _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            _2848 = _2847.w;
                            uint _2850 = (_2832 * 40u) + 4u;
                            _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2865 = (_2832 * 40u) + 8u;
                            _2875 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x));
                            uint _2878 = (_2832 * 40u) + 16u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2894 = (_2832 * 40u) + 20u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2910 = (_2832 * 40u) + 24u;
                            vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2929 = (_2832 * 40u) + 28u;
                            vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            _2954 = fma(_2207, _2942.z, fma(_2206, _2942.y, _2942.x * _2205)) + _2942.w;
                            _2955 = !((fma(_2207, _2923.z, fma(_2206, _2923.y, _2923.x * _2205)) + _2923.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2955)
                            {
                                float _2982 = _2847.x - _2205;
                                float _2983 = _2847.y - _2206;
                                float _2984 = _2847.z - _2207;
                                float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                                float _2988 = inversesqrt(_2985);
                                float _2989 = _2988 * _2982;
                                float _2990 = _2988 * _2983;
                                float _2991 = _2988 * _2984;
                                float _2995 = 1.0 - (_2985 / (_2848 * _2848));
                                float _4055 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                                float _3000 = sqrt(_2985) * _2863.w;
                                float _3002 = 1.39999997615814208984375 / (_3000 + 1.39999997615814208984375);
                                float _3003 = _3002 * _3002;
                                float _3006 = ((1.0 - _3003) * dot(vec3(_2989, _2990, _2991), vec3(_503, _506, _509))) + _3003;
                                float _3009 = _3000 * _3000;
                                float _3013 = (fma(_2207, _2891.z, fma(_2206, _2891.y, _2891.x * _2205)) + _2891.w) / _2954;
                                float _3014 = (fma(_2207, _2907.z, fma(_2206, _2907.y, _2907.x * _2205)) + _2907.w) / _2954;
                                float _3018 = 1.0 - dot(vec2(_3013, _3014), vec2(_3013, _3014));
                                float _4071 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                                float _3020 = _3019 * (((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2996) / ((_3009 * 0.699999988079071044921875) + 1.0));
                                float _3032 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                                float _3033 = 1.0 - _564;
                                float _3040 = sqrt(1.0 - ((1.0 - (_3033 * _3033)) * (1.0 - (_3032 * _3032))));
                                float _3041 = _3040 * _3040;
                                float _3042 = _3041 * _3041;
                                float _3043 = _2989 - _2489;
                                float _3044 = _2990 - _2490;
                                float _3045 = _2991 - _2491;
                                float _3049 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
                                float _3053 = dot(vec3(_503, _506, _509), vec3((-0.0) - _2489, (-0.0) - _2490, (-0.0) - _2491));
                                float _4082 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3056 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                                float _3057 = dot(vec3(_503, _506, _509), vec3(_3049 * _3043, _3049 * _3044, _3049 * _3045));
                                float _4093 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3060 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3064 = ((_3060 * _3060) * (_3042 + (-1.0))) + 1.0;
                                float _3065 = _3002 * _3041;
                                float _3066 = _3065 * _3065;
                                float _3072 = ((1.0 - _3066) * dot(vec3(_503, _506, _509), vec3(_2989, _2990, _2991))) + _3066;
                                float _4104 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3074 = 1.0 - _3041;
                                float _3084 = (0.5 / (((_3073 * ((_3056 * _3074) + _3041)) + 9.9999999392252902907785028219223e-09) + (((_3073 * _3074) + _3041) * _3056))) * _3073;
                                float _4115 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3094 = (_3019 * _2996) * (((_3042 * 3.1415927410125732421875) * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) / ((_3064 * _3064) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3020 * _2863.z;
                                frontier_phi_75_pred_1 = _3020 * _2863.y;
                                frontier_phi_75_pred_2 = _3020 * _2863.x;
                                frontier_phi_75_pred_3 = _3094 * _2875.z;
                                frontier_phi_75_pred_4 = _3094 * _2875.y;
                                frontier_phi_75_pred_5 = _3094 * _2875.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3103 = frontier_phi_75_pred;
                            _3102 = frontier_phi_75_pred_1;
                            _3101 = frontier_phi_75_pred_2;
                            _3100 = frontier_phi_75_pred_3;
                            _3099 = frontier_phi_75_pred_4;
                            _3098 = frontier_phi_75_pred_5;
                            _2805 = _3101 + _2818;
                            _2806 = _3102 + _2819;
                            _2807 = _3103 + _2820;
                            _2802 = _3098 + _2815;
                            _2803 = _3099 + _2816;
                            _2804 = _3100 + _2817;
                            if (_2822 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2822;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2807;
                        frontier_phi_69_pred_1 = _2806;
                        frontier_phi_69_pred_2 = _2805;
                        frontier_phi_69_pred_3 = _2804;
                        frontier_phi_69_pred_4 = _2803;
                        frontier_phi_69_pred_5 = _2802;
                    }
                    _2474 = frontier_phi_69_pred;
                    _2472 = frontier_phi_69_pred_1;
                    _2470 = frontier_phi_69_pred_2;
                    _2468 = frontier_phi_69_pred_3;
                    _2466 = frontier_phi_69_pred_4;
                    _2464 = frontier_phi_69_pred_5;
                    uint _2609 = _2608 + 1u;
                    if (_2609 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2602 = _2464;
                        _2603 = _2466;
                        _2604 = _2468;
                        _2605 = _2470;
                        _2606 = _2472;
                        _2607 = _2474;
                        _2608 = _2609;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2474;
                frontier_phi_57_58_ladder_1 = _2472;
                frontier_phi_57_58_ladder_2 = _2470;
                frontier_phi_57_58_ladder_3 = _2468;
                frontier_phi_57_58_ladder_4 = _2466;
                frontier_phi_57_58_ladder_5 = _2464;
            }
            else
            {
                frontier_phi_57_58_ladder = _2361;
                frontier_phi_57_58_ladder_1 = _2359;
                frontier_phi_57_58_ladder_2 = _2357;
                frontier_phi_57_58_ladder_3 = _2355;
                frontier_phi_57_58_ladder_4 = _2353;
                frontier_phi_57_58_ladder_5 = _2351;
            }
            _2463 = frontier_phi_57_58_ladder_5;
            _2465 = frontier_phi_57_58_ladder_4;
            _2467 = frontier_phi_57_58_ladder_3;
            _2469 = frontier_phi_57_58_ladder_2;
            _2471 = frontier_phi_57_58_ladder_1;
            _2473 = frontier_phi_57_58_ladder;
        }
        float _2478 = isnan(1.0) ? _548 : (isnan(_548) ? 1.0 : min(_548, 1.0));
        _2263 = (_2478 * _2469) + _1719;
        _2265 = (_2478 * _2471) + _1721;
        _2267 = (_2478 * _2473) + _1723;
        _2269 = ((_2463 * 0.039999999105930328369140625) * _2478) + _2049;
        _2271 = ((_2465 * 0.039999999105930328369140625) * _2478) + _2051;
        _2273 = ((_2467 * 0.039999999105930328369140625) * _2478) + _2053;
    }
    else
    {
        _2263 = _1719;
        _2265 = _1721;
        _2267 = _1723;
        _2269 = _2049;
        _2271 = _2051;
        _2273 = _2053;
    }
    float _4131 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4142 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4153 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    uint _2293 = _522 + 6u;
    float _2301 = _481 / cbSceneParam._m0[86u].x;
    float _2302 = _482 / cbSceneParam._m0[86u].y;
    vec4 _2316 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, (log2((isnan(cbSceneParam._m0[77u].w) ? _415 : (isnan(_415) ? cbSceneParam._m0[77u].w : min(_415, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2318 = _2316.x;
    float _2319 = _2316.y;
    float _2320 = _2316.z;
    float _2321 = _2316.w;
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    if (_415 > cbSceneParam._m0[78u].w)
    {
        float _2376 = isnan(_415) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _415 : min(cbSceneParam._m0[80u].w, _415));
        float _2377 = _2376 / _415;
        float _2388 = _2377 * _466;
        float _2389 = _467 * _2377;
        float _2390 = (-0.0) - _2389;
        float _2391 = _2377 * _468;
        float _2393 = (cbSceneParam._m0[77u].w * _2390) / _2376;
        float _2394 = _2393 + cbSceneParam._m0[79u].w;
        float _2395 = cbSceneParam._m0[79u].w - _2389;
        float _2401 = sqrt(((_2388 * _2388) + (_2389 * _2389)) + (_2391 * _2391));
        float _2404 = (1.0 - (cbSceneParam._m0[77u].w / _2376)) * _2401;
        float _2409 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2411 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2564;
        if (abs((_2390 - _2393) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2564 = ((((_2394 > 0.0) ? exp2(_2409 * _2394) : (2.0 - exp2(_2411 * _2394))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2404;
        }
        else
        {
            float _2524 = 1.0 / cbSceneParam._m0[80u].x;
            float _2525 = isnan(_2395) ? _2394 : (isnan(_2394) ? _2395 : max(_2394, _2395));
            float _2526 = isnan(_2395) ? _2394 : (isnan(_2394) ? _2395 : min(_2394, _2395));
            float _2535 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : min(_2525, 0.0));
            float _2536 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : min(_2526, 0.0));
            _2564 = ((abs(_2401 / _2390) * cbSceneParam._m0[80u].y) * ((((_2535 - _2536) * 2.0) - ((exp2(_2409 * (isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0)))) - exp2(_2409 * (isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0))))) * _2524)) - ((exp2(_2411 * _2535) - exp2(_2411 * _2536)) * _2524))) + (_2404 * cbSceneParam._m0[80u].z);
        }
        vec4 _2566 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, 1.0), 0.0);
        float _2575 = exp2((_2564 * (-1.44269502162933349609375)) * (1.0 - _2566.w));
        float _2576 = log2(_2575);
        float _2592 = log2(_2321);
        _2413 = (exp2(_2592 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].x)) * _2566.x) / cbSceneParam._m0[78u].x)) + _2318;
        _2415 = (exp2(_2592 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].y)) * _2566.y) / cbSceneParam._m0[78u].y)) + _2319;
        _2417 = (exp2(_2592 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].z)) * _2566.z) / cbSceneParam._m0[78u].z)) + _2320;
        _2419 = _2575 * _2321;
    }
    else
    {
        _2413 = _2318;
        _2415 = _2319;
        _2417 = _2320;
        _2419 = _2321;
    }
    float _2431 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2432 = _2431 == 3.0;
    float _2433 = log2(_2419);
    float _2440 = exp2(_2433 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2263 + ((isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))) * _548))) + ((_2269 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1355)) * cbPerFrame._m0[3u].x));
    float _2441 = exp2(_2433 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2265 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _548))) + ((_2271 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1355)) * cbPerFrame._m0[3u].x));
    float _2442 = exp2(_2433 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2267 + ((isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))) * _548))) + ((_2273 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1355)) * cbPerFrame._m0[3u].x));
    float _2451 = (_2431 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2451 * (_2432 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2413)));
    SV_Target.y = _2451 * (_2432 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2415)));
    SV_Target.z = _2451 * (_2432 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2417)));
    SV_Target.w = cbInstanceData._m0[_2293].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2293].w;
}


