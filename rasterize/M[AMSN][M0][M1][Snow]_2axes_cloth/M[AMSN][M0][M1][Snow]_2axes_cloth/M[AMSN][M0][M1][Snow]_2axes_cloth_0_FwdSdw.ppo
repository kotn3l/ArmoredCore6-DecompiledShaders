#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _961;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _247 = _242.z;
    float _251 = (_242.x * 2.0) + (-1.0);
    float _253 = (_242.y * 2.0) + (-1.0);
    float _254 = dot(vec2(_251, _253), vec2(_251, _253));
    float _3579 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _260 = sqrt(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))));
    float _263 = fma(_260, _217, fma(_253, _210, _251 * _196));
    float _266 = fma(_260, _218, fma(_253, _211, _251 * _197));
    float _269 = fma(_260, _219, fma(_253, _212, _251 * _198));
    float _273 = inversesqrt(dot(vec3(_263, _266, _269), vec3(_263, _266, _269)));
    float _274 = _273 * _263;
    float _275 = _273 * _266;
    float _276 = _273 * _269;
    float _281 = cbMtdParam._m0[10u].x + dot(vec4(_274, _275, _276, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3590 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _289 = dot(vec4(_274, _275, _276, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _3601 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _291 = (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) + (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)));
    vec4 _309 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _314 = _309.x * cbMtdParam._m0[9u].x;
    float _315 = _309.y * cbMtdParam._m0[9u].y;
    float _316 = _309.z * cbMtdParam._m0[9u].z;
    vec4 _328 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _339 = ((_328.x - _314) * _291) + _314;
    float _340 = ((_328.y - _315) * _291) + _315;
    float _341 = ((_328.z - _316) * _291) + _316;
    vec4 _353 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _355 = _353.x;
    float _357 = _355 - (_355 * _291);
    vec4 _370 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _377 = (_370.x * 2.0) + (-1.0);
    float _378 = (_370.y * 2.0) + (-1.0);
    float _379 = dot(vec2(_377, _378), vec2(_377, _378));
    float _3612 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _387 = ((_370.z - _247) * _291) + _247;
    float _396 = ((sqrt(1.0 - (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) - _260) * _291) + _260;
    float _400 = (((_377 - _251) * _291) + _251) + (cbMtdParam._m0[10u].y * _251);
    float _401 = (((_378 - _253) * _291) + _253) + (cbMtdParam._m0[10u].y * _253);
    float _404 = fma(_396, _217, fma(_401, _210, _400 * _196));
    float _407 = fma(_396, _218, fma(_401, _211, _400 * _197));
    float _410 = fma(_396, _219, fma(_401, _212, _400 * _198));
    float _414 = inversesqrt(dot(vec3(_404, _407, _410), vec3(_404, _407, _410)));
    float _415 = _414 * _404;
    float _416 = _414 * _407;
    float _417 = _414 * _410;
    float _3623 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _418 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _3634 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3645 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3656 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3667 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _422 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _438 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _479 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _489 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _479);
    float _490 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _479);
    float _491 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _479);
    float _495 = inversesqrt(dot(vec3(_489, _490, _491), vec3(_489, _490, _491)));
    float _496 = _489 * _495;
    float _497 = _490 * _495;
    float _498 = _491 * _495;
    float _504 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _505 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _526 = fma(_417, cbSceneParam._m0[5u].z, fma(_416, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _415));
    float _529 = fma(_417, cbSceneParam._m0[6u].z, fma(_416, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _415));
    float _532 = fma(_417, cbSceneParam._m0[7u].z, fma(_416, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _415));
    uint _545 = uint(roundEven(NORMAL.w)) * 13u;
    uint _548 = (_545 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _554 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * cbInstanceData._m0[_548].x;
    float _555 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * cbInstanceData._m0[_548].y;
    float _556 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * cbInstanceData._m0[_548].z;
    float _3678 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _557 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _558 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _3700 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _559 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _560 = 1.0 - _422;
    float _561 = _557 * _560;
    float _562 = _558 * _560;
    float _563 = _559 * _560;
    float _568 = (_557 + (-0.039999999105930328369140625)) * _422;
    float _569 = (_558 + (-0.039999999105930328369140625)) * _422;
    float _570 = (_559 + (-0.039999999105930328369140625)) * _422;
    float _571 = _568 + 0.039999999105930328369140625;
    float _573 = _569 + 0.039999999105930328369140625;
    float _574 = _570 + 0.039999999105930328369140625;
    vec4 _583 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _504, cbSceneParam._m0[86u].y * _505));
    float _586 = _583.x * TEXCOORD.z;
    float _587 = dot(vec3(_415, _416, _417), vec3(_496, _497, _498));
    float _590 = _587 * 2.0;
    float _594 = (_590 * _415) - _496;
    float _595 = (_590 * _416) - _497;
    float _596 = (_590 * _417) - _498;
    float _600 = abs(dot(vec3(_496, _497, _498), vec3(_415, _416, _417)));
    float _3711 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _602 = sqrt(_418);
    float _615 = exp2((_602 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_602 * 3.0));
    float _621 = (1.0 - _615) * ((_602 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _622 = _615 * _602;
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _654 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _960;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _685 = fma(_658, cbModelParam._m0[26u].z, fma(_654, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _650));
        float _689 = fma(_658, cbModelParam._m0[27u].z, fma(_654, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _650));
        float _693 = fma(_658, cbModelParam._m0[28u].z, fma(_654, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _650));
        float _718 = _650 + _415;
        float _719 = _654 + _416;
        float _720 = _658 + _417;
        float _730 = fma(_720, cbModelParam._m0[26u].z, fma(_719, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _718)) - _685;
        float _731 = fma(_720, cbModelParam._m0[27u].z, fma(_719, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _718)) - _689;
        float _732 = fma(_720, cbModelParam._m0[28u].z, fma(_719, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _718)) - _693;
        float _736 = inversesqrt(dot(vec3(_730, _731, _732), vec3(_730, _731, _732)));
        float _749 = ((_736 * _730) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_685 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _750 = ((_736 * _731) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_689 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _751 = ((_736 * _732) / cbModelParam._m0[34u].z) + ((((((_693 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_749, _750, _751), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_749, _750, _751), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_749, _750, _751), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_749, _750, _751), 0.0);
        float _788 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_754.x + (-0.5));
        float _790 = _788 * (_754.y + (-0.5));
        float _791 = _788 * (_754.z + (-0.5));
        float _798 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_761.x + (-0.5));
        float _800 = _798 * (_761.y + (-0.5));
        float _801 = _798 * (_761.z + (-0.5));
        float _808 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_768.x + (-0.5));
        float _810 = _808 * (_768.y + (-0.5));
        float _811 = _808 * (_768.z + (-0.5));
        float _818 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_775.x + (-0.5));
        float _820 = _818 * (_775.y + (-0.5));
        float _821 = _818 * (_775.z + (-0.5));
        float _822 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _825 = _789 * 0.5;
        float _826 = _799 * 0.5;
        float _827 = _809 * 0.5;
        float _828 = dot(vec3(_825, _826, _827), vec3(_825, _826, _827));
        float _833 = (_828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_828);
        float _842 = (dot(vec3(_415, _416, _417), vec3(_833 * _825, _833 * _826, _833 * _827)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _852 = sqrt(((_826 * _826) + (_825 * _825)) + (_827 * _827)) / (_822 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3759 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_854 + 1.0))) + _859) * _822;
        float _869 = _790 * 0.5;
        float _870 = _800 * 0.5;
        float _871 = _810 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _885 = (dot(vec3(_415, _416, _417), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _894 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3792 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_896 + 1.0))) + _901) * _823;
        float _911 = _791 * 0.5;
        float _912 = _801 * 0.5;
        float _913 = _811 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _927 = (dot(vec3(_415, _416, _417), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _936 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_824 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3825 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_938 + 1.0))) + _943) * _824;
        _960 = _791;
        _962 = _790;
        _963 = _789;
        _964 = _801;
        _965 = _800;
        _966 = _799;
        _967 = _811;
        _968 = _810;
        _969 = _809;
        _970 = _824;
        _971 = _823;
        _972 = _822;
        _973 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
        _975 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
    }
    else
    {
        _960 = _961;
        _962 = _961;
        _963 = _961;
        _964 = _961;
        _965 = _961;
        _966 = _961;
        _967 = _961;
        _968 = _961;
        _969 = _961;
        _970 = _961;
        _971 = _961;
        _972 = _961;
        _973 = 0.0;
        _974 = 0.0;
        _975 = 0.0;
    }
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1001 = fma(_658, cbModelParam._m0[30u].z, fma(_654, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _650));
        float _1005 = fma(_658, cbModelParam._m0[31u].z, fma(_654, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _650));
        float _1009 = fma(_658, cbModelParam._m0[32u].z, fma(_654, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _650));
        float _1032 = _650 + _415;
        float _1033 = _654 + _416;
        float _1034 = _658 + _417;
        float _1044 = fma(_1034, cbModelParam._m0[30u].z, fma(_1033, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032)) - _1001;
        float _1045 = fma(_1034, cbModelParam._m0[31u].z, fma(_1033, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032)) - _1005;
        float _1046 = fma(_1034, cbModelParam._m0[32u].z, fma(_1033, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032)) - _1009;
        float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
        float _1063 = ((_1050 * _1044) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1001 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1050 * _1045) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1005 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1050 * _1046) / cbModelParam._m0[35u].z) + ((((((_1009 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        float _1100 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1067.x + (-0.5));
        float _1102 = _1100 * (_1067.y + (-0.5));
        float _1103 = _1100 * (_1067.z + (-0.5));
        float _1110 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1074.x + (-0.5));
        float _1112 = _1110 * (_1074.y + (-0.5));
        float _1113 = _1110 * (_1074.z + (-0.5));
        float _1120 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1081.x + (-0.5));
        float _1122 = _1120 * (_1081.y + (-0.5));
        float _1123 = _1120 * (_1081.z + (-0.5));
        float _1130 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1088.x + (-0.5));
        float _1132 = _1130 * (_1088.y + (-0.5));
        float _1133 = _1130 * (_1088.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_415, _416, _417), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3888 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1164 + 1.0))) + _1169) * _1134;
        float _1179 = _1102 * 0.5;
        float _1180 = _1112 * 0.5;
        float _1181 = _1122 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_415, _416, _417), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3921 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1206 + 1.0))) + _1211) * _1135;
        float _1221 = _1103 * 0.5;
        float _1222 = _1113 * 0.5;
        float _1223 = _1123 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_415, _416, _417), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3954 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1248 + 1.0))) + _1253) * _1136;
        _1270 = _1103;
        _1271 = _1102;
        _1272 = _1101;
        _1273 = _1113;
        _1274 = _1112;
        _1275 = _1111;
        _1276 = _1123;
        _1277 = _1122;
        _1278 = _1121;
        _1279 = _1136;
        _1280 = _1135;
        _1281 = _1134;
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1284 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
    }
    else
    {
        _1270 = _961;
        _1271 = _961;
        _1272 = _961;
        _1273 = _961;
        _1274 = _961;
        _1275 = _961;
        _1276 = _961;
        _1277 = _961;
        _1278 = _961;
        _1279 = _961;
        _1280 = _961;
        _1281 = _961;
        _1282 = 0.0;
        _1283 = 0.0;
        _1284 = 0.0;
    }
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _973)) + _973;
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _974)) + _974;
    float _1296 = (cbModelParam._m0[1u].x * (_1284 - _975)) + _975;
    float _1317 = fma(_1296, cbSceneParam._m0[89u].z, fma(_1295, cbSceneParam._m0[89u].y, _1294 * cbSceneParam._m0[89u].x));
    float _1320 = fma(_1296, cbSceneParam._m0[90u].z, fma(_1295, cbSceneParam._m0[90u].y, _1294 * cbSceneParam._m0[90u].x));
    float _1323 = fma(_1296, cbSceneParam._m0[91u].z, fma(_1295, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1294));
    float _1338 = _594 * 0.5;
    float _1339 = _595 * 0.5;
    float _1340 = _596 * 0.5;
    float _1341 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1272, _1275, _1278, _1281));
    float _1344 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1347 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1381;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1354 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_960, _964, _967, _970));
        float _1358 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_962, _965, _968, _971));
        float _1362 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_963, _966, _969, _972));
        float _1369 = dot(vec4(cbModelParam._m0[39u]), vec4(_1338, _1339, _1340, 1.0));
        _1381 = dot(vec3(isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1369) ? 0.0 : (isnan(0.0) ? _1369 : max(0.0, _1369))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1381 = 1.0;
    }
    float _1392;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1383 = dot(vec4(cbModelParam._m0[40u]), vec4(_1338, _1339, _1340, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1383) ? 0.0 : (isnan(0.0) ? _1383 : max(0.0, _1383))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1396 = (_1392 * cbModelParam._m0[1u].x) + (_1381 * (1.0 - cbModelParam._m0[1u].x));
    float _1406 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _418);
    float _1407 = isnan(_1406) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1406 : min(cbModelParam._m0[25u].z, _1406));
    float _1489;
    float _1491;
    float _1493;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1456 = fma(_658, cbModelParam._m0[13u].z, fma(_654, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _650)) + cbModelParam._m0[13u].w;
        float _1460 = fma(_658, cbModelParam._m0[14u].z, fma(_654, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _650)) + cbModelParam._m0[14u].w;
        float _1464 = fma(_658, cbModelParam._m0[15u].z, fma(_654, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _650)) + cbModelParam._m0[15u].w;
        float _1467 = fma(_596, cbModelParam._m0[13u].z, fma(_595, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _594));
        float _1470 = fma(_596, cbModelParam._m0[14u].z, fma(_595, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _594));
        float _1473 = fma(_596, cbModelParam._m0[15u].z, fma(_595, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _594));
        float _1501;
        if (_1467 > 0.0)
        {
            _1501 = abs((1.0 - _1456) / _1467);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1456 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1501 = frontier_phi_16_14_ladder;
        }
        float _1676;
        if (_1470 > 0.0)
        {
            _1676 = abs((1.0 - _1460) / _1470);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1460 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1676 = frontier_phi_25_21_ladder;
        }
        float _1971;
        if (_1473 > 0.0)
        {
            _1971 = abs((1.0 - _1464) / _1473);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1464 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1971 = frontier_phi_37_32_ladder;
        }
        float _1973 = isnan(_1676) ? _1501 : (isnan(_1501) ? _1676 : min(_1501, _1676));
        float _1974 = isnan(_1971) ? _1973 : (isnan(_1973) ? _1971 : min(_1973, _1971));
        float _1978 = (_1974 * _1467) + _1456;
        float _1979 = (_1974 * _1470) + _1460;
        float _1980 = (_1974 * _1473) + _1464;
        float _1981 = _1974 * 9.9999997473787516355514526367188e-05;
        float _1983 = (-1.0) - _1981;
        float _1985 = _1981 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1980 > _1985) || ((_1980 < _1983) || ((_1979 > _1985) || ((_1979 < _1983) || ((_1978 < _1983) || (_1978 > _1985))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2125 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1980, cbModelParam._m0[9u].z, fma(_1979, cbModelParam._m0[9u].y, _1978 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1980, cbModelParam._m0[10u].z, fma(_1979, cbModelParam._m0[10u].y, _1978 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1980, cbModelParam._m0[11u].z, fma(_1979, cbModelParam._m0[11u].y, _1978 * cbModelParam._m0[11u].x))), _1407);
            frontier_phi_15_37_ladder = _2125.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2125.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2125.z * cbModelParam._m0[1u].y;
        }
        _1489 = frontier_phi_15_37_ladder_1;
        _1491 = frontier_phi_15_37_ladder;
        _1493 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1477 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_594, _595, _596), _1407);
        _1489 = _1477.x * cbModelParam._m0[1u].y;
        _1491 = _1477.y * cbModelParam._m0[1u].y;
        _1493 = _1477.z * cbModelParam._m0[1u].y;
    }
    float _1497 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _418);
    float _1498 = isnan(_1497) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1497 : min(cbModelParam._m0[25u].w, _1497));
    float _1591;
    float _1593;
    float _1595;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1555 = fma(_658, cbModelParam._m0[21u].z, fma(_654, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _650)) + cbModelParam._m0[21u].w;
        float _1559 = fma(_658, cbModelParam._m0[22u].z, fma(_654, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _650)) + cbModelParam._m0[22u].w;
        float _1563 = fma(_658, cbModelParam._m0[23u].z, fma(_654, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _650)) + cbModelParam._m0[23u].w;
        float _1566 = fma(_596, cbModelParam._m0[21u].z, fma(_595, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _594));
        float _1569 = fma(_596, cbModelParam._m0[22u].z, fma(_595, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _594));
        float _1572 = fma(_596, cbModelParam._m0[23u].z, fma(_595, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _594));
        float _1681;
        if (_1566 > 0.0)
        {
            _1681 = abs((1.0 - _1555) / _1566);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1555 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1681 = frontier_phi_27_23_ladder;
        }
        float _1998;
        if (_1569 > 0.0)
        {
            _1998 = abs((1.0 - _1559) / _1569);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1559 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1998 = frontier_phi_39_34_ladder;
        }
        float _2336;
        if (_1572 > 0.0)
        {
            _2336 = abs((1.0 - _1563) / _1572);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1563 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2336 = frontier_phi_49_46_ladder;
        }
        float _2338 = isnan(_1998) ? _1681 : (isnan(_1681) ? _1998 : min(_1681, _1998));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1566) + _1555;
        float _2344 = (_2339 * _1569) + _1559;
        float _2345 = (_2339 * _1572) + _1563;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2346;
        float _2349 = _2346 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2345 > _2349) || ((_2345 < _2347) || ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 < _2347) || (_2343 > _2349))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2467 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2345, cbModelParam._m0[17u].z, fma(_2344, cbModelParam._m0[17u].y, _2343 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2345, cbModelParam._m0[18u].z, fma(_2344, cbModelParam._m0[18u].y, _2343 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2345, cbModelParam._m0[19u].z, fma(_2344, cbModelParam._m0[19u].y, _2343 * cbModelParam._m0[19u].x))), _1498);
            frontier_phi_24_49_ladder = _2467.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2467.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2467.x * cbModelParam._m0[1u].z;
        }
        _1591 = frontier_phi_24_49_ladder_2;
        _1593 = frontier_phi_24_49_ladder_1;
        _1595 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1575 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_594, _595, _596), _1498);
        _1591 = _1575.x * cbModelParam._m0[1u].z;
        _1593 = _1575.y * cbModelParam._m0[1u].z;
        _1595 = _1575.z * cbModelParam._m0[1u].z;
    }
    float _1608 = (((_621 * _571) + _622) * _586) * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1610 = (((_621 * _573) + _622) * _586) * ((cbModelParam._m0[1u].w * (_1593 - _1491)) + _1491);
    float _1612 = (((_621 * _574) + _622) * _586) * ((cbModelParam._m0[1u].w * (_1595 - _1493)) + _1493);
    float _1615 = fma(_1612, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1608 * cbSceneParam._m0[89u].x));
    float _1618 = fma(_1612, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1608 * cbSceneParam._m0[90u].x));
    float _1621 = fma(_1612, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, _1608 * cbSceneParam._m0[91u].x));
    float _1655 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1659 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1663 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1667 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1668 = _1655 / _1667;
    float _1669 = _1659 / _1667;
    float _1670 = _1663 / _1667;
    float _1817;
    float _1818;
    float _1819;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1697 = ((uint(_1670 > cbSceneParam._m0[59u].y) + uint(_1670 > cbSceneParam._m0[59u].x)) + uint(_1670 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1698 = _1697 + 43u;
        uint _1706 = _1697 + 44u;
        uint _1714 = _1697 + 45u;
        uint _1722 = _1697 + 46u;
        float _1733 = fma(_1667, cbSceneParam._m0[_1698].w, fma(_1663, cbSceneParam._m0[_1698].z, fma(_1659, cbSceneParam._m0[_1698].y, _1655 * cbSceneParam._m0[_1698].x)));
        float _1737 = fma(_1667, cbSceneParam._m0[_1706].w, fma(_1663, cbSceneParam._m0[_1706].z, fma(_1659, cbSceneParam._m0[_1706].y, _1655 * cbSceneParam._m0[_1706].x)));
        float _1745 = fma(_1667, cbSceneParam._m0[_1722].w, fma(_1663, cbSceneParam._m0[_1722].z, fma(_1659, cbSceneParam._m0[_1722].y, _1655 * cbSceneParam._m0[_1722].x)));
        float _1750 = cbSceneParam._m0[33u].z * _1745;
        float _1752 = cbSceneParam._m0[33u].w * _1745;
        float _1755 = fma(_1667, cbSceneParam._m0[_1714].w, fma(_1663, cbSceneParam._m0[_1714].z, fma(_1659, cbSceneParam._m0[_1714].y, _1655 * cbSceneParam._m0[_1714].x))) / _1745;
        float _1803 = (cbSceneParam._m0[33u].x - sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670))) * cbSceneParam._m0[33u].y;
        float _4080 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1810 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1750 + _1733) / _1745, (_1752 + _1737) / _1745), _1755), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1752 + _1733) / _1745, (_1737 - _1750) / _1745), _1755), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1733 - _1750) / _1745, (_1737 - _1752) / _1745), _1755), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1733 - _1752) / _1745, (_1750 + _1737) / _1745), _1755), 0.0)).x), vec4(0.25)));
        _1817 = 1.0 - (_1810 * cbSceneParam._m0[34u].x);
        _1818 = 1.0 - (_1810 * cbSceneParam._m0[34u].y);
        _1819 = 1.0 - (_1810 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1817 = 1.0;
        _1818 = 1.0;
        _1819 = 1.0;
    }
    float _1883;
    float _1885;
    float _1887;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1871 = fma(_1667, cbSceneParam._m0[63u].w, fma(_1663, cbSceneParam._m0[63u].z, fma(_1659, cbSceneParam._m0[63u].y, _1655 * cbSceneParam._m0[63u].x)));
        float _1872 = fma(_1667, cbSceneParam._m0[60u].w, fma(_1663, cbSceneParam._m0[60u].z, fma(_1659, cbSceneParam._m0[60u].y, _1655 * cbSceneParam._m0[60u].x))) / _1871;
        float _1873 = fma(_1667, cbSceneParam._m0[61u].w, fma(_1663, cbSceneParam._m0[61u].z, fma(_1659, cbSceneParam._m0[61u].y, _1655 * cbSceneParam._m0[61u].x))) / _1871;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1872 >= cbSceneParam._m0[64u].x) && (_1873 >= cbSceneParam._m0[64u].y)) && (_1872 <= cbSceneParam._m0[64u].z)) && (_1873 <= cbSceneParam._m0[64u].w))
        {
            float _2011 = fma(_1667, cbSceneParam._m0[62u].w, fma(_1663, cbSceneParam._m0[62u].z, fma(_1659, cbSceneParam._m0[62u].y, _1655 * cbSceneParam._m0[62u].x))) / _1871;
            float _2015 = isnan(cbSceneParam._m0[41u].w) ? _2011 : (isnan(_2011) ? cbSceneParam._m0[41u].w : max(_2011, cbSceneParam._m0[41u].w));
            float _2058 = (cbSceneParam._m0[33u].x - sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670))) * cbSceneParam._m0[33u].y;
            float _4096 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
            float _2065 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1872, cbSceneParam._m0[33u].w + _1873), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1872, _1873 - cbSceneParam._m0[33u].z), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1872 - cbSceneParam._m0[33u].z, _1873 - cbSceneParam._m0[33u].w), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1872 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1873), _2015), 0.0)).x), vec4(0.25)));
            float _2069 = 1.0 - (_2065 * cbSceneParam._m0[34u].x);
            float _2070 = 1.0 - (_2065 * cbSceneParam._m0[34u].y);
            float _2071 = 1.0 - (_2065 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2070) ? _1818 : (isnan(_1818) ? _2070 : min(_1818, _2070));
            frontier_phi_36_35_ladder_1 = isnan(_2071) ? _1819 : (isnan(_1819) ? _2071 : min(_1819, _2071));
            frontier_phi_36_35_ladder_2 = isnan(_2069) ? _1817 : (isnan(_1817) ? _2069 : min(_1817, _2069));
        }
        else
        {
            frontier_phi_36_35_ladder = _1818;
            frontier_phi_36_35_ladder_1 = _1819;
            frontier_phi_36_35_ladder_2 = _1817;
        }
        _1883 = frontier_phi_36_35_ladder_2;
        _1885 = frontier_phi_36_35_ladder;
        _1887 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1883 = _1817;
        _1885 = _1818;
        _1887 = _1819;
    }
    uvec4 _1892 = floatBitsToUint(cbInstanceData._m0[_545 + 5u]);
    uint _1894 = _1892.x * 14u;
    uint _1895 = _1894 + 13u;
    float _1902 = _586 + (-1.0);
    float _1907 = (cbLight._m0[_1895].x * _1902) + 1.0;
    float _1908 = (cbLight._m0[_1895].y * _1902) + 1.0;
    float _1909 = (cbLight._m0[_1895].z * _1902) + 1.0;
    float _1910 = (cbLight._m0[_1895].w * _1902) + 1.0;
    uint _1911 = _1894 + 5u;
    float _1917 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
    uint _1921 = _1894 + 4u;
    float _1930 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1934 = _1894 | 1u;
    float _1945 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_415, _416, _417));
    float _1948 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_415, _416, _417));
    float _4132 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _4143 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1953 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * 0.3183098733425140380859375;
    float _1955 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * 0.3183098733425140380859375;
    float _1962 = ((cbLight._m0[_1911].x * _1917) * _1955) + (((cbLight._m0[_1921].x * _1883) * _1930) * _1953);
    float _1963 = ((_1917 * cbLight._m0[_1911].y) * _1955) + (((cbLight._m0[_1921].y * _1885) * _1930) * _1953);
    float _1964 = ((_1917 * cbLight._m0[_1911].z) * _1955) + (((cbLight._m0[_1921].z * _1887) * _1930) * _1953);
    uvec4 _1968 = floatBitsToUint(cbLight._m0[_1894 + 12u]);
    bool _1970 = _1968.x == 0u;
    float _2072;
    float _2074;
    float _2076;
    if (_1970)
    {
        _2072 = _1962;
        _2074 = _1963;
        _2076 = _1964;
    }
    else
    {
        uint _2080 = _1894 + 6u;
        float _2096 = (dot(vec3(cbLight._m0[_1894 + 2u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _2097 = _2096 * _2096;
        float _4154 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2099 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2072 = (((cbLight._m0[_2080].x * 0.3183098733425140380859375) * _2098) * _2099) + _1962;
        _2074 = (((cbLight._m0[_2080].y * 0.3183098733425140380859375) * _2098) * _2099) + _1963;
        _2076 = (((cbLight._m0[_2080].z * 0.3183098733425140380859375) * _2098) * _2099) + _1964;
    }
    bool _2079 = _1968.y == 0u;
    float _2134;
    float _2136;
    float _2138;
    if (_2079)
    {
        _2134 = _2072;
        _2136 = _2074;
        _2138 = _2076;
    }
    else
    {
        uint _2307 = _1894 + 7u;
        float _2323 = (dot(vec3(cbLight._m0[_1894 + 3u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _2324 = _2323 * _2323;
        float _4170 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2325 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2326 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2134 = (((cbLight._m0[_2307].x * 0.3183098733425140380859375) * _2325) * _2326) + _2072;
        _2136 = (((cbLight._m0[_2307].y * 0.3183098733425140380859375) * _2325) * _2326) + _2074;
        _2138 = (((cbLight._m0[_2307].z * 0.3183098733425140380859375) * _2325) * _2326) + _2076;
    }
    uint _2141 = _1894 + 8u;
    float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _418) * 0.949999988079071044921875);
    float _2155 = _2154 * _2154;
    float _2156 = cbLight._m0[_1894].x + _496;
    float _2157 = cbLight._m0[_1894].y + _497;
    float _2158 = cbLight._m0[_1894].z + _498;
    float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
    float _2163 = _2162 * _2156;
    float _2164 = _2162 * _2157;
    float _2165 = _2162 * _2158;
    float _2166 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1894].xyz));
    float _4186 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _2170 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2171 = dot(vec3(_415, _416, _417), vec3(_2163, _2164, _2165));
    float _4208 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2175 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_2163, _2164, _2165));
    float _4219 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2179 = _2155 * _2155;
    float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
    float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0);
    float _2192 = 0.959999978542327880859375 - _568;
    float _2194 = 0.959999978542327880859375 - _569;
    float _2195 = 0.959999978542327880859375 - _570;
    float _2202 = 1.0 - _2155;
    float _2213 = (0.5 / (((_2170 * ((_2169 * _2202) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2202) + _2155) * _2169))) * _2169;
    float _4230 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2215 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
    uint _2229 = _1894 + 9u;
    float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _418) * 0.949999988079071044921875);
    float _2241 = _2240 * _2240;
    float _2242 = cbLight._m0[_1934].x + _496;
    float _2243 = cbLight._m0[_1934].y + _497;
    float _2244 = cbLight._m0[_1934].z + _498;
    float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
    float _2249 = _2248 * _2242;
    float _2250 = _2248 * _2243;
    float _2251 = _2248 * _2244;
    float _2252 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1934].xyz));
    float _4241 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2256 = dot(vec3(_415, _416, _417), vec3(_2249, _2250, _2251));
    float _4252 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2249, _2250, _2251));
    float _4263 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2241 * _2241;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0);
    float _2282 = 1.0 - _2241;
    float _2292 = (0.5 / (((_2170 * ((_2255 * _2282) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2282) + _2241) * _2255))) * _2255;
    float _4274 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    float _2304 = (((((_2275 * _2192) + _571) * cbLight._m0[_2229].x) * _2294) * _1917) + ((((cbLight._m0[_2141].x * _1883) * ((_2191 * _2192) + _571)) * _2215) * _1930);
    float _2305 = (((((_2275 * _2194) + _573) * cbLight._m0[_2229].y) * _2294) * _1917) + ((((cbLight._m0[_2141].y * _1885) * ((_2191 * _2194) + _573)) * _2215) * _1930);
    float _2306 = (((((_2275 * _2195) + _574) * cbLight._m0[_2229].z) * _2294) * _1917) + ((((cbLight._m0[_2141].z * _1887) * ((_2191 * _2195) + _574)) * _2215) * _1930);
    float _2362;
    float _2364;
    float _2366;
    if (_1970)
    {
        _2362 = _2304;
        _2364 = _2305;
        _2366 = _2306;
    }
    else
    {
        uint _2368 = _1894 + 2u;
        uint _2372 = _1894 + 10u;
        float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2368].w)) * _418) * 0.949999988079071044921875);
        float _2387 = _2386 * _2386;
        float _2388 = cbLight._m0[_2368].x + _496;
        float _2389 = cbLight._m0[_2368].y + _497;
        float _2390 = cbLight._m0[_2368].z + _498;
        float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
        float _2395 = _2394 * _2388;
        float _2396 = _2394 * _2389;
        float _2397 = _2394 * _2390;
        float _2398 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2368].xyz));
        float _4285 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2402 = dot(vec3(_415, _416, _417), vec3(_2395, _2396, _2397));
        float _4296 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2406 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_2395, _2396, _2397));
        float _4307 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2410 = _2387 * _2387;
        float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
        float _2421 = exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0);
        float _2428 = 1.0 - _2387;
        float _2438 = (0.5 / (((_2170 * ((_2401 * _2428) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2428) + _2387) * _2401))) * _2401;
        float _4318 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2440 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
        float _2441 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2362 = (((((_2421 * _2192) + _571) * cbLight._m0[_2372].x) * _2440) * _2441) + _2304;
        _2364 = (((((_2421 * _2194) + _573) * cbLight._m0[_2372].y) * _2440) * _2441) + _2305;
        _2366 = (((((_2421 * _2195) + _574) * cbLight._m0[_2372].z) * _2440) * _2441) + _2306;
    }
    float _2472;
    float _2474;
    float _2476;
    if (_2079)
    {
        _2472 = _2362;
        _2474 = _2364;
        _2476 = _2366;
    }
    else
    {
        uint _2483 = _1894 + 3u;
        uint _2487 = _1894 + 11u;
        float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2483].w)) * _418) * 0.949999988079071044921875);
        float _2502 = _2501 * _2501;
        float _2503 = cbLight._m0[_2483].x + _496;
        float _2504 = cbLight._m0[_2483].y + _497;
        float _2505 = cbLight._m0[_2483].z + _498;
        float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
        float _2510 = _2509 * _2503;
        float _2511 = _2509 * _2504;
        float _2512 = _2509 * _2505;
        float _2513 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2483].xyz));
        float _4334 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2517 = dot(vec3(_415, _416, _417), vec3(_2510, _2511, _2512));
        float _4345 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2521 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_2510, _2511, _2512));
        float _4356 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2525 = _2502 * _2502;
        float _2529 = ((_2520 * _2520) * (_2525 + (-1.0))) + 1.0;
        float _2536 = exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0);
        float _2543 = 1.0 - _2502;
        float _2553 = (0.5 / (((_2170 * ((_2516 * _2543) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2543) + _2502) * _2516))) * _2516;
        float _4367 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2555 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2525 / ((_2529 * _2529) * 3.141590118408203125));
        float _2556 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2472 = (((((_2536 * _2192) + _571) * cbLight._m0[_2487].x) * _2555) * _2556) + _2362;
        _2474 = (((((_2536 * _2194) + _573) * cbLight._m0[_2487].y) * _2555) * _2556) + _2364;
        _2476 = (((((_2536 * _2195) + _574) * cbLight._m0[_2487].z) * _2555) * _2556) + _2366;
    }
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_1892.y == 0u)
    {
        uvec4 _2577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2578 = _2577.x;
        uint _2589 = uint((float(_2577.y) * floor(float(uint(cbSceneParam._m0[85u].y * _505) / _2578))) + floor(float(uint(cbSceneParam._m0[85u].x * _504) / _2578)));
        float _2599 = (log2(_1670 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2600 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        uint _2603 = uint(isnan(14.0) ? _2600 : (isnan(_2600) ? 14.0 : min(_2600, 14.0)));
        uvec4 _2608 = texelFetch(g_lightClusterGridBuffer, int(((_2603 << 2u) + (_2589 << 6u)) >> 2u));
        uint _2609 = _2608.x;
        uint _2610 = _2577.z;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        if (((((1u << ((_2610 >> 4u) & 15u)) + 4294967295u) & _2609) == 0u) || ((_2610 & 240u) == 0u))
        {
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
        }
        else
        {
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            uint _2838 = 0u;
            uint _2847;
            bool _2848;
            for (;;)
            {
                _2847 = texelFetch(g_lightClassification, int((((_2603 << 5u) + (_2589 << 9u)) + (_2838 << 2u)) >> 2u)).x;
                _2848 = _2847 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2848)
                {
                    frontier_phi_68_pred = _2837;
                    frontier_phi_68_pred_1 = _2836;
                    frontier_phi_68_pred_2 = _2835;
                    frontier_phi_68_pred_3 = _2833;
                    frontier_phi_68_pred_4 = _2832;
                    frontier_phi_68_pred_5 = _2834;
                }
                else
                {
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    uint _2962;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2836;
                    _2961 = _2837;
                    _2962 = _2847;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    for (;;)
                    {
                        uint _2966 = uint(findLSB(_2962)) + (_2838 << 5u);
                        uint _2963 = (_2962 + 4294967295u) & _2962;
                        uint _2968 = _2966 * 48u;
                        vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2968)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 3u)).x));
                        uint _2988 = (_2966 * 48u) + 4u;
                        vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 3u)).x));
                        uint _3007 = (_2966 * 48u) + 8u;
                        vec3 _3018 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x));
                        float _3022 = _2982.x - _1668;
                        float _3023 = _2982.y - _1669;
                        float _3024 = _2982.z - _1670;
                        float _3025 = dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024));
                        float _3028 = inversesqrt(_3025);
                        float _3029 = _3028 * _3022;
                        float _3030 = _3028 * _3023;
                        float _3031 = _3028 * _3024;
                        float _3032 = dot(vec3(_526, _529, _532), vec3(_3029, _3030, _3031));
                        float _3037 = 1.0 - (_3025 * _2982.w);
                        float _4393 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3038 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3039 = sqrt(_3025) * _3001.w;
                        float _3042 = 1.39999997615814208984375 / (_3039 + 1.39999997615814208984375);
                        float _3043 = _3042 * _3042;
                        float _3046 = ((1.0 - _3043) * _3032) + _3043;
                        float _3049 = _3039 * _3039;
                        float _3053 = ((isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0))) * _3038) / ((_3049 * 0.699999988079071044921875) + 1.0);
                        float _3057 = (-0.0) - _1668;
                        float _3058 = (-0.0) - _1669;
                        float _3059 = (-0.0) - _1670;
                        float _3063 = inversesqrt(dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059)));
                        float _3064 = _3063 * _3057;
                        float _3065 = _3063 * _3058;
                        float _3066 = _3063 * _3059;
                        float _3073 = exp2(log2(1.0 / ((_3049 * 3.5) + 5.0)) * 0.25);
                        float _3074 = 1.0 - _602;
                        float _3081 = sqrt(1.0 - ((1.0 - (_3074 * _3074)) * (1.0 - (_3073 * _3073))));
                        float _3082 = _3081 * _3081;
                        float _3083 = _3082 * _3082;
                        float _3084 = _3064 + _3029;
                        float _3085 = _3065 + _3030;
                        float _3086 = _3066 + _3031;
                        float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                        float _3094 = dot(vec3(_526, _529, _532), vec3(_3064, _3065, _3066));
                        float _4409 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3097 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3098 = dot(vec3(_526, _529, _532), vec3(_3090 * _3084, _3090 * _3085, _3090 * _3086));
                        float _4420 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3101 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                        float _3105 = ((_3101 * _3101) * (_3083 + (-1.0))) + 1.0;
                        float _3106 = _3042 * _3082;
                        float _3107 = _3106 * _3106;
                        float _3110 = ((1.0 - _3107) * _3032) + _3107;
                        float _4431 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3111 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3112 = 1.0 - _3082;
                        float _3122 = (0.5 / (((_3111 * ((_3097 * _3112) + _3082)) + 9.9999999392252902907785028219223e-09) + (((_3111 * _3112) + _3082) * _3097))) * _3111;
                        float _4442 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3133 = (((_3083 * 3.1415927410125732421875) * (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) / ((_3105 * _3105) * ((_3049 * 2.1991131305694580078125) + 3.141590118408203125))) * _3038;
                        _2891 = (_3053 * _3001.x) + _2959;
                        _2892 = (_3053 * _3001.y) + _2960;
                        _2893 = (_3053 * _3001.z) + _2961;
                        _2888 = (_3133 * _3018.x) + _2956;
                        _2889 = (_3133 * _3018.y) + _2957;
                        _2890 = (_3133 * _3018.z) + _2958;
                        if (_2963 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2892;
                            _2961 = _2893;
                            _2962 = _2963;
                        }
                    }
                    frontier_phi_68_pred = _2893;
                    frontier_phi_68_pred_1 = _2892;
                    frontier_phi_68_pred_2 = _2891;
                    frontier_phi_68_pred_3 = _2889;
                    frontier_phi_68_pred_4 = _2888;
                    frontier_phi_68_pred_5 = _2890;
                }
                _2699 = frontier_phi_68_pred;
                _2697 = frontier_phi_68_pred_1;
                _2695 = frontier_phi_68_pred_2;
                _2691 = frontier_phi_68_pred_3;
                _2689 = frontier_phi_68_pred_4;
                _2693 = frontier_phi_68_pred_5;
                uint _2839 = _2838 + 1u;
                if (_2839 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2832 = _2689;
                    _2833 = _2691;
                    _2834 = _2693;
                    _2835 = _2695;
                    _2836 = _2697;
                    _2837 = _2699;
                    _2838 = _2839;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
        }
        uvec4 _2702 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2703 = _2702.z;
        uint _2705 = (_2703 >> 8u) & 15u;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        if (((4294967295u << _2705) & _2609) == 0u)
        {
            _2800 = _2688;
            _2802 = _2690;
            _2804 = _2692;
            _2806 = _2694;
            _2808 = _2696;
            _2810 = _2698;
        }
        else
        {
            float _2825 = inversesqrt(dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670)));
            float _2826 = _2825 * _1668;
            float _2827 = _2825 * _1669;
            float _2828 = _2825 * _1670;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2705 < ((_2703 >> 12u) & 15u))
            {
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2939 = _2688;
                float _2940 = _2690;
                float _2941 = _2692;
                float _2942 = _2694;
                float _2943 = _2696;
                float _2944 = _2698;
                uint _2945 = _2705;
                uint _2954;
                bool _2955;
                for (;;)
                {
                    _2954 = texelFetch(g_lightClassification, int((((_2603 << 5u) + (_2589 << 9u)) + (_2945 << 2u)) >> 2u)).x;
                    _2955 = _2954 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2955)
                    {
                        frontier_phi_74_pred = _2941;
                        frontier_phi_74_pred_1 = _2940;
                        frontier_phi_74_pred_2 = _2939;
                        frontier_phi_74_pred_3 = _2944;
                        frontier_phi_74_pred_4 = _2943;
                        frontier_phi_74_pred_5 = _2942;
                    }
                    else
                    {
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3151 = _2939;
                        float _3152 = _2940;
                        float _3153 = _2941;
                        float _3154 = _2942;
                        float _3155 = _2943;
                        float _3156 = _2944;
                        uint _3157 = _2954;
                        uint _3158;
                        vec4 _3183;
                        float _3184;
                        vec4 _3199;
                        vec3 _3211;
                        vec4 _3227;
                        vec4 _3243;
                        float _3290;
                        bool _3291;
                        for (;;)
                        {
                            uint _3168 = ((_2945 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3157));
                            _3158 = (_3157 + 4294967295u) & _3157;
                            uint _3170 = _3168 * 40u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            _3184 = _3183.w;
                            uint _3186 = (_3168 * 40u) + 4u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3201 = (_3168 * 40u) + 8u;
                            _3211 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x));
                            uint _3214 = (_3168 * 40u) + 16u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3230 = (_3168 * 40u) + 20u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3246 = (_3168 * 40u) + 24u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3265 = (_3168 * 40u) + 28u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            _3290 = fma(_1670, _3278.z, fma(_1669, _3278.y, _3278.x * _1668)) + _3278.w;
                            _3291 = !((fma(_1670, _3259.z, fma(_1669, _3259.y, _3259.x * _1668)) + _3259.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3291)
                            {
                                float _3318 = _3183.x - _1668;
                                float _3319 = _3183.y - _1669;
                                float _3320 = _3183.z - _1670;
                                float _3321 = dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320));
                                float _3324 = inversesqrt(_3321);
                                float _3325 = _3324 * _3318;
                                float _3326 = _3324 * _3319;
                                float _3327 = _3324 * _3320;
                                float _3331 = 1.0 - (_3321 / (_3184 * _3184));
                                float _4453 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3336 = sqrt(_3321) * _3199.w;
                                float _3338 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                                float _3339 = _3338 * _3338;
                                float _3342 = ((1.0 - _3339) * dot(vec3(_3325, _3326, _3327), vec3(_526, _529, _532))) + _3339;
                                float _3345 = _3336 * _3336;
                                float _3349 = (fma(_1670, _3227.z, fma(_1669, _3227.y, _3227.x * _1668)) + _3227.w) / _3290;
                                float _3350 = (fma(_1670, _3243.z, fma(_1669, _3243.y, _3243.x * _1668)) + _3243.w) / _3290;
                                float _3354 = 1.0 - dot(vec2(_3349, _3350), vec2(_3349, _3350));
                                float _4469 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3356 = _3355 * (((isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0))) * _3332) / ((_3345 * 0.699999988079071044921875) + 1.0));
                                float _3368 = exp2(log2(1.0 / ((_3345 * 3.5) + 5.0)) * 0.25);
                                float _3369 = 1.0 - _602;
                                float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                                float _3377 = _3376 * _3376;
                                float _3378 = _3377 * _3377;
                                float _3379 = _3325 - _2826;
                                float _3380 = _3326 - _2827;
                                float _3381 = _3327 - _2828;
                                float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                                float _3389 = dot(vec3(_526, _529, _532), vec3((-0.0) - _2826, (-0.0) - _2827, (-0.0) - _2828));
                                float _4480 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3393 = dot(vec3(_526, _529, _532), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                                float _4491 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3396 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                                float _3401 = _3338 * _3377;
                                float _3402 = _3401 * _3401;
                                float _3408 = ((1.0 - _3402) * dot(vec3(_526, _529, _532), vec3(_3325, _3326, _3327))) + _3402;
                                float _4502 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3410 = 1.0 - _3377;
                                float _3420 = (0.5 / (((_3409 * ((_3392 * _3410) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3409 * _3410) + _3377) * _3392))) * _3409;
                                float _4513 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3430 = (_3355 * _3332) * (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) / ((_3400 * _3400) * ((_3345 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3430 * _3211.z;
                                frontier_phi_80_pred_1 = _3430 * _3211.y;
                                frontier_phi_80_pred_2 = _3430 * _3211.x;
                                frontier_phi_80_pred_3 = _3356 * _3199.z;
                                frontier_phi_80_pred_4 = _3356 * _3199.y;
                                frontier_phi_80_pred_5 = _3356 * _3199.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3436 = frontier_phi_80_pred;
                            _3435 = frontier_phi_80_pred_1;
                            _3434 = frontier_phi_80_pred_2;
                            _3439 = frontier_phi_80_pred_3;
                            _3438 = frontier_phi_80_pred_4;
                            _3437 = frontier_phi_80_pred_5;
                            _3141 = _3437 + _3154;
                            _3142 = _3438 + _3155;
                            _3143 = _3439 + _3156;
                            _3138 = _3434 + _3151;
                            _3139 = _3435 + _3152;
                            _3140 = _3436 + _3153;
                            if (_3158 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3158;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3140;
                        frontier_phi_74_pred_1 = _3139;
                        frontier_phi_74_pred_2 = _3138;
                        frontier_phi_74_pred_3 = _3143;
                        frontier_phi_74_pred_4 = _3142;
                        frontier_phi_74_pred_5 = _3141;
                    }
                    _2805 = frontier_phi_74_pred;
                    _2803 = frontier_phi_74_pred_1;
                    _2801 = frontier_phi_74_pred_2;
                    _2811 = frontier_phi_74_pred_3;
                    _2809 = frontier_phi_74_pred_4;
                    _2807 = frontier_phi_74_pred_5;
                    uint _2946 = _2945 + 1u;
                    if (_2946 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2939 = _2801;
                        _2940 = _2803;
                        _2941 = _2805;
                        _2942 = _2807;
                        _2943 = _2809;
                        _2944 = _2811;
                        _2945 = _2946;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2809;
                frontier_phi_62_63_ladder_1 = _2807;
                frontier_phi_62_63_ladder_2 = _2805;
                frontier_phi_62_63_ladder_3 = _2811;
                frontier_phi_62_63_ladder_4 = _2803;
                frontier_phi_62_63_ladder_5 = _2801;
            }
            else
            {
                frontier_phi_62_63_ladder = _2696;
                frontier_phi_62_63_ladder_1 = _2694;
                frontier_phi_62_63_ladder_2 = _2692;
                frontier_phi_62_63_ladder_3 = _2698;
                frontier_phi_62_63_ladder_4 = _2690;
                frontier_phi_62_63_ladder_5 = _2688;
            }
            _2800 = frontier_phi_62_63_ladder_5;
            _2802 = frontier_phi_62_63_ladder_4;
            _2804 = frontier_phi_62_63_ladder_2;
            _2806 = frontier_phi_62_63_ladder_1;
            _2808 = frontier_phi_62_63_ladder;
            _2810 = frontier_phi_62_63_ladder_3;
        }
        float _2815 = isnan(1.0) ? _586 : (isnan(_586) ? 1.0 : min(_586, 1.0));
        _2621 = (_2815 * _2806) + _2134;
        _2623 = (_2815 * _2808) + _2136;
        _2625 = (_2815 * _2810) + _2138;
        _2627 = ((_2800 * _571) * _2815) + _2472;
        _2629 = ((_2802 * _573) * _2815) + _2474;
        _2631 = ((_2804 * _574) * _2815) + _2476;
    }
    else
    {
        _2621 = _2134;
        _2623 = _2136;
        _2625 = _2138;
        _2627 = _2472;
        _2629 = _2474;
        _2631 = _2476;
    }
    float _4529 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _4540 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4551 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    uint _2651 = _545 + 6u;
    float _2659 = _504 / cbSceneParam._m0[86u].x;
    float _2660 = _505 / cbSceneParam._m0[86u].y;
    vec4 _2674 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2659, _2660, (log2((isnan(cbSceneParam._m0[77u].w) ? _438 : (isnan(_438) ? cbSceneParam._m0[77u].w : min(_438, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2676 = _2674.x;
    float _2677 = _2674.y;
    float _2678 = _2674.z;
    float _2679 = _2674.w;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_438 > cbSceneParam._m0[78u].w)
    {
        float _2713 = isnan(_438) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _438 : min(cbSceneParam._m0[80u].w, _438));
        float _2714 = _2713 / _438;
        float _2725 = _2714 * _489;
        float _2726 = _490 * _2714;
        float _2727 = (-0.0) - _2726;
        float _2728 = _2714 * _491;
        float _2730 = (cbSceneParam._m0[77u].w * _2727) / _2713;
        float _2731 = _2730 + cbSceneParam._m0[79u].w;
        float _2732 = cbSceneParam._m0[79u].w - _2726;
        float _2738 = sqrt(((_2725 * _2725) + (_2726 * _2726)) + (_2728 * _2728));
        float _2741 = (1.0 - (cbSceneParam._m0[77u].w / _2713)) * _2738;
        float _2746 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2748 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2901;
        if (abs((_2727 - _2730) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2901 = ((((_2731 > 0.0) ? exp2(_2746 * _2731) : (2.0 - exp2(_2748 * _2731))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2741;
        }
        else
        {
            float _2861 = 1.0 / cbSceneParam._m0[80u].x;
            float _2862 = isnan(_2732) ? _2731 : (isnan(_2731) ? _2732 : max(_2731, _2732));
            float _2863 = isnan(_2732) ? _2731 : (isnan(_2731) ? _2732 : min(_2731, _2732));
            float _2872 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : min(_2862, 0.0));
            float _2873 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : min(_2863, 0.0));
            _2901 = ((abs(_2738 / _2727) * cbSceneParam._m0[80u].y) * ((((_2872 - _2873) * 2.0) - ((exp2(_2746 * (isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0)))) - exp2(_2746 * (isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0))))) * _2861)) - ((exp2(_2748 * _2872) - exp2(_2748 * _2873)) * _2861))) + (_2741 * cbSceneParam._m0[80u].z);
        }
        vec4 _2903 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2659, _2660, 1.0), 0.0);
        float _2912 = exp2((_2901 * (-1.44269502162933349609375)) * (1.0 - _2903.w));
        float _2913 = log2(_2912);
        float _2929 = log2(_2679);
        _2750 = (exp2(_2929 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].x)) * _2903.x) / cbSceneParam._m0[78u].x)) + _2676;
        _2752 = (exp2(_2929 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].y)) * _2903.y) / cbSceneParam._m0[78u].y)) + _2677;
        _2754 = (exp2(_2929 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].z)) * _2903.z) / cbSceneParam._m0[78u].z)) + _2678;
        _2756 = _2912 * _2679;
    }
    else
    {
        _2750 = _2676;
        _2752 = _2677;
        _2754 = _2678;
        _2756 = _2679;
    }
    float _2768 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2769 = _2768 == 3.0;
    float _2770 = log2(_2756);
    float _2777 = exp2(_2770 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2621 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _586))) + ((_2627 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1396)) * cbPerFrame._m0[3u].x));
    float _2778 = exp2(_2770 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2623 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _586))) + ((_2629 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _1396)) * cbPerFrame._m0[3u].x));
    float _2779 = exp2(_2770 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2625 + ((isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))) * _586))) + ((_2631 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _1396)) * cbPerFrame._m0[3u].x));
    float _2788 = (_2768 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2788 * (_2769 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2750)));
    SV_Target.y = _2788 * (_2769 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2752)));
    SV_Target.z = _2788 * (_2769 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2754)));
    SV_Target.w = cbInstanceData._m0[_2651].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2651].w;
}


