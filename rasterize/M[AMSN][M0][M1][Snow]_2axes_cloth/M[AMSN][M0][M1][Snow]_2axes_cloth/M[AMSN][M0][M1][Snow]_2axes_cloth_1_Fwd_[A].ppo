#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _965;
float _3333;
float _3334;
float _3335;
float _3336;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _245 = _240.z;
    float _249 = (_240.x * 2.0) + (-1.0);
    float _251 = (_240.y * 2.0) + (-1.0);
    float _252 = dot(vec2(_249, _251), vec2(_249, _251));
    float _3345 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _258 = sqrt(1.0 - (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))));
    float _261 = fma(_258, _215, fma(_251, _208, _249 * _194));
    float _264 = fma(_258, _216, fma(_251, _209, _249 * _195));
    float _267 = fma(_258, _217, fma(_251, _210, _249 * _196));
    float _271 = inversesqrt(dot(vec3(_261, _264, _267), vec3(_261, _264, _267)));
    float _272 = _271 * _261;
    float _273 = _271 * _264;
    float _274 = _271 * _267;
    float _279 = cbMtdParam._m0[10u].x + dot(vec4(_272, _273, _274, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3356 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _287 = dot(vec4(_272, _273, _274, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _3367 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _289 = (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) + (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)));
    vec4 _307 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _312 = _307.x * cbMtdParam._m0[9u].x;
    float _313 = _307.y * cbMtdParam._m0[9u].y;
    float _314 = _307.z * cbMtdParam._m0[9u].z;
    vec4 _326 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _337 = ((_326.x - _312) * _289) + _312;
    float _338 = ((_326.y - _313) * _289) + _313;
    float _339 = ((_326.z - _314) * _289) + _314;
    vec4 _352 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _359 = (_352.x * 2.0) + (-1.0);
    float _360 = (_352.y * 2.0) + (-1.0);
    float _361 = dot(vec2(_359, _360), vec2(_359, _360));
    float _3378 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _369 = ((_352.z - _245) * _289) + _245;
    float _378 = ((sqrt(1.0 - (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0)))) - _258) * _289) + _258;
    float _382 = (((_359 - _249) * _289) + _249) + (cbMtdParam._m0[10u].y * _249);
    float _383 = (((_360 - _251) * _289) + _251) + (cbMtdParam._m0[10u].y * _251);
    float _386 = fma(_378, _215, fma(_383, _208, _382 * _194));
    float _389 = fma(_378, _216, fma(_383, _209, _382 * _195));
    float _392 = fma(_378, _217, fma(_383, _210, _382 * _196));
    float _396 = inversesqrt(dot(vec3(_386, _389, _392), vec3(_386, _389, _392)));
    float _397 = _396 * _386;
    float _398 = _396 * _389;
    float _399 = _396 * _392;
    float _3389 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _400 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _3400 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3411 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3422 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _419 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _460 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _470 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _460);
    float _471 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _460);
    float _472 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _460);
    float _476 = inversesqrt(dot(vec3(_470, _471, _472), vec3(_470, _471, _472)));
    float _477 = _470 * _476;
    float _478 = _471 * _476;
    float _479 = _472 * _476;
    vec4 _484 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _486 = _484.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _644 = sqrt(((_470 * _470) + (_471 * _471)) + (_472 * _472));
        float _650 = (cbMatDynParam._m0[5u].x * _644) + cbMatDynParam._m0[5u].y;
        float _3433 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _651 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _655 = (cbMatDynParam._m0[5u].z * _644) + cbMatDynParam._m0[5u].w;
        float _3444 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) - _651)) + _651) < ((_486 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _498 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _499 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _519 = fma(_399, cbSceneParam._m0[5u].z, fma(_398, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _397));
    float _522 = fma(_399, cbSceneParam._m0[6u].z, fma(_398, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _397));
    float _525 = fma(_399, cbSceneParam._m0[7u].z, fma(_398, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _397));
    uint _538 = uint(roundEven(NORMAL.w)) * 13u;
    uint _540 = _538 + 9u;
    uint _541 = _540 + uint(cbMatDynParam._m0[0u].w);
    float _547 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * cbInstanceData._m0[_541].x;
    float _548 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * cbInstanceData._m0[_541].y;
    float _549 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * cbInstanceData._m0[_541].z;
    float _3455 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _3466 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    vec4 _561 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _498, cbSceneParam._m0[86u].y * _499));
    float _564 = _561.x * TEXCOORD.z;
    float _565 = dot(vec3(_397, _398, _399), vec3(_477, _478, _479));
    float _568 = _565 * 2.0;
    float _572 = (_568 * _397) - _477;
    float _573 = (_568 * _398) - _478;
    float _574 = (_568 * _399) - _479;
    float _578 = abs(dot(vec3(_477, _478, _479), vec3(_397, _398, _399)));
    float _3488 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _580 = sqrt(_400);
    float _593 = exp2((_580 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_580 * 3.0));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _964;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _689 = fma(_633, cbModelParam._m0[26u].z, fma(_629, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _625));
        float _693 = fma(_633, cbModelParam._m0[27u].z, fma(_629, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _625));
        float _697 = fma(_633, cbModelParam._m0[28u].z, fma(_629, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _625));
        float _722 = _625 + _397;
        float _723 = _629 + _398;
        float _724 = _633 + _399;
        float _734 = fma(_724, cbModelParam._m0[26u].z, fma(_723, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _722)) - _689;
        float _735 = fma(_724, cbModelParam._m0[27u].z, fma(_723, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _722)) - _693;
        float _736 = fma(_724, cbModelParam._m0[28u].z, fma(_723, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _722)) - _697;
        float _740 = inversesqrt(dot(vec3(_734, _735, _736), vec3(_734, _735, _736)));
        float _753 = ((_740 * _734) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_689 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _754 = ((_740 * _735) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_693 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _755 = ((_740 * _736) / cbModelParam._m0[34u].z) + ((((((_697 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_753, _754, _755), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_753, _754, _755), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_753, _754, _755), 0.0);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_753, _754, _755), 0.0);
        float _792 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _793 = _792 * (_758.x + (-0.5));
        float _794 = _792 * (_758.y + (-0.5));
        float _795 = _792 * (_758.z + (-0.5));
        float _802 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_765.x + (-0.5));
        float _804 = _802 * (_765.y + (-0.5));
        float _805 = _802 * (_765.z + (-0.5));
        float _812 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_772.x + (-0.5));
        float _814 = _812 * (_772.y + (-0.5));
        float _815 = _812 * (_772.z + (-0.5));
        float _822 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_779.x + (-0.5));
        float _824 = _822 * (_779.y + (-0.5));
        float _825 = _822 * (_779.z + (-0.5));
        float _826 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = _793 * 0.5;
        float _830 = _803 * 0.5;
        float _831 = _813 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _846 = (dot(vec3(_397, _398, _399), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _856 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_826 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3536 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_858 + 1.0))) + _863) * _826;
        float _873 = _794 * 0.5;
        float _874 = _804 * 0.5;
        float _875 = _814 * 0.5;
        float _876 = dot(vec3(_873, _874, _875), vec3(_873, _874, _875));
        float _881 = (_876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_876);
        float _889 = (dot(vec3(_397, _398, _399), vec3(_881 * _873, _881 * _874, _881 * _875)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _898 = sqrt(((_874 * _874) + (_873 * _873)) + (_875 * _875)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3569 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_900 + 1.0))) + _905) * _827;
        float _915 = _795 * 0.5;
        float _916 = _805 * 0.5;
        float _917 = _815 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_397, _398, _399), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3602 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_942 + 1.0))) + _947) * _828;
        _964 = _795;
        _966 = _794;
        _967 = _793;
        _968 = _805;
        _969 = _804;
        _970 = _803;
        _971 = _815;
        _972 = _814;
        _973 = _813;
        _974 = _828;
        _975 = _827;
        _976 = _826;
        _977 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
    }
    else
    {
        _964 = _965;
        _966 = _965;
        _967 = _965;
        _968 = _965;
        _969 = _965;
        _970 = _965;
        _971 = _965;
        _972 = _965;
        _973 = _965;
        _974 = _965;
        _975 = _965;
        _976 = _965;
        _977 = 0.0;
        _978 = 0.0;
        _979 = 0.0;
    }
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1008 = fma(_633, cbModelParam._m0[30u].z, fma(_629, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _625));
        float _1012 = fma(_633, cbModelParam._m0[31u].z, fma(_629, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _625));
        float _1016 = fma(_633, cbModelParam._m0[32u].z, fma(_629, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _625));
        float _1039 = _625 + _397;
        float _1040 = _629 + _398;
        float _1041 = _633 + _399;
        float _1051 = fma(_1041, cbModelParam._m0[30u].z, fma(_1040, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1039)) - _1008;
        float _1052 = fma(_1041, cbModelParam._m0[31u].z, fma(_1040, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1039)) - _1012;
        float _1053 = fma(_1041, cbModelParam._m0[32u].z, fma(_1040, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1039)) - _1016;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1008 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1012 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[35u].z) + ((((((_1016 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1107 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1074.x + (-0.5));
        float _1109 = _1107 * (_1074.y + (-0.5));
        float _1110 = _1107 * (_1074.z + (-0.5));
        float _1117 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1081.x + (-0.5));
        float _1119 = _1117 * (_1081.y + (-0.5));
        float _1120 = _1117 * (_1081.z + (-0.5));
        float _1127 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1088.x + (-0.5));
        float _1129 = _1127 * (_1088.y + (-0.5));
        float _1130 = _1127 * (_1088.z + (-0.5));
        float _1137 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1095.x + (-0.5));
        float _1139 = _1137 * (_1095.y + (-0.5));
        float _1140 = _1137 * (_1095.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_397, _398, _399), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3665 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1171 + 1.0))) + _1176) * _1141;
        float _1186 = _1109 * 0.5;
        float _1187 = _1119 * 0.5;
        float _1188 = _1129 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_397, _398, _399), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3698 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1213 + 1.0))) + _1218) * _1142;
        float _1228 = _1110 * 0.5;
        float _1229 = _1120 * 0.5;
        float _1230 = _1130 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_397, _398, _399), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3731 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1255 + 1.0))) + _1260) * _1143;
        _1277 = _1110;
        _1278 = _1109;
        _1279 = _1108;
        _1280 = _1120;
        _1281 = _1119;
        _1282 = _1118;
        _1283 = _1130;
        _1284 = _1129;
        _1285 = _1128;
        _1286 = _1143;
        _1287 = _1142;
        _1288 = _1141;
        _1289 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1290 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
    }
    else
    {
        _1277 = _965;
        _1278 = _965;
        _1279 = _965;
        _1280 = _965;
        _1281 = _965;
        _1282 = _965;
        _1283 = _965;
        _1284 = _965;
        _1285 = _965;
        _1286 = _965;
        _1287 = _965;
        _1288 = _965;
        _1289 = 0.0;
        _1290 = 0.0;
        _1291 = 0.0;
    }
    float _1301 = (cbModelParam._m0[1u].x * (_1289 - _977)) + _977;
    float _1302 = (cbModelParam._m0[1u].x * (_1290 - _978)) + _978;
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _979)) + _979;
    float _1324 = fma(_1303, cbSceneParam._m0[89u].z, fma(_1302, cbSceneParam._m0[89u].y, _1301 * cbSceneParam._m0[89u].x));
    float _1327 = fma(_1303, cbSceneParam._m0[90u].z, fma(_1302, cbSceneParam._m0[90u].y, _1301 * cbSceneParam._m0[90u].x));
    float _1330 = fma(_1303, cbSceneParam._m0[91u].z, fma(_1302, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1301));
    float _1345 = _572 * 0.5;
    float _1346 = _573 * 0.5;
    float _1347 = _574 * 0.5;
    float _1348 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1351 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1278, _1281, _1284, _1287));
    float _1354 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_1277, _1280, _1283, _1286));
    float _1388;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1361 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_964, _968, _971, _974));
        float _1365 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_966, _969, _972, _975));
        float _1369 = dot(vec4(_1345, _1346, _1347, 1.0), vec4(_967, _970, _973, _976));
        float _1376 = dot(vec4(cbModelParam._m0[39u]), vec4(_1345, _1346, _1347, 1.0));
        _1388 = dot(vec3(isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1376) ? 0.0 : (isnan(0.0) ? _1376 : max(0.0, _1376))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1388 = 1.0;
    }
    float _1399;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1390 = dot(vec4(cbModelParam._m0[40u]), vec4(_1345, _1346, _1347, 1.0));
        _1399 = dot(vec3(isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1390) ? 0.0 : (isnan(0.0) ? _1390 : max(0.0, _1390))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1399 = 1.0;
    }
    float _1403 = (_1399 * cbModelParam._m0[1u].x) + (_1388 * (1.0 - cbModelParam._m0[1u].x));
    float _1413 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _400);
    float _1414 = isnan(_1413) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1413 : min(cbModelParam._m0[25u].z, _1413));
    float _1496;
    float _1498;
    float _1500;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1463 = fma(_633, cbModelParam._m0[13u].z, fma(_629, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _625)) + cbModelParam._m0[13u].w;
        float _1467 = fma(_633, cbModelParam._m0[14u].z, fma(_629, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _625)) + cbModelParam._m0[14u].w;
        float _1471 = fma(_633, cbModelParam._m0[15u].z, fma(_629, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _625)) + cbModelParam._m0[15u].w;
        float _1474 = fma(_574, cbModelParam._m0[13u].z, fma(_573, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572));
        float _1477 = fma(_574, cbModelParam._m0[14u].z, fma(_573, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572));
        float _1480 = fma(_574, cbModelParam._m0[15u].z, fma(_573, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572));
        float _1508;
        if (_1474 > 0.0)
        {
            _1508 = abs((1.0 - _1463) / _1474);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1463 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1508 = frontier_phi_19_17_ladder;
        }
        float _1712;
        if (_1477 > 0.0)
        {
            _1712 = abs((1.0 - _1467) / _1477);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1467 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1712 = frontier_phi_28_24_ladder;
        }
        float _1955;
        if (_1480 > 0.0)
        {
            _1955 = abs((1.0 - _1471) / _1480);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1471 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1955 = frontier_phi_40_35_ladder;
        }
        float _1957 = isnan(_1712) ? _1508 : (isnan(_1508) ? _1712 : min(_1508, _1712));
        float _1958 = isnan(_1955) ? _1957 : (isnan(_1957) ? _1955 : min(_1957, _1955));
        float _1962 = (_1958 * _1474) + _1463;
        float _1963 = (_1958 * _1477) + _1467;
        float _1964 = (_1958 * _1480) + _1471;
        float _1965 = _1958 * 9.9999997473787516355514526367188e-05;
        float _1967 = (-1.0) - _1965;
        float _1969 = _1965 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1964 > _1969) || ((_1964 < _1967) || ((_1963 > _1969) || ((_1963 < _1967) || ((_1962 < _1967) || (_1962 > _1969))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2088 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1964, cbModelParam._m0[9u].z, fma(_1963, cbModelParam._m0[9u].y, _1962 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1964, cbModelParam._m0[10u].z, fma(_1963, cbModelParam._m0[10u].y, _1962 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1964, cbModelParam._m0[11u].z, fma(_1963, cbModelParam._m0[11u].y, _1962 * cbModelParam._m0[11u].x))), _1414);
            frontier_phi_18_40_ladder = _2088.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2088.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2088.x * cbModelParam._m0[1u].y;
        }
        _1496 = frontier_phi_18_40_ladder_2;
        _1498 = frontier_phi_18_40_ladder_1;
        _1500 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_572, _573, _574), _1414);
        _1496 = _1484.x * cbModelParam._m0[1u].y;
        _1498 = _1484.y * cbModelParam._m0[1u].y;
        _1500 = _1484.z * cbModelParam._m0[1u].y;
    }
    float _1504 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _400);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1504 : min(cbModelParam._m0[25u].w, _1504));
    float _1598;
    float _1600;
    float _1602;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1562 = fma(_633, cbModelParam._m0[21u].z, fma(_629, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _625)) + cbModelParam._m0[21u].w;
        float _1566 = fma(_633, cbModelParam._m0[22u].z, fma(_629, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _625)) + cbModelParam._m0[22u].w;
        float _1570 = fma(_633, cbModelParam._m0[23u].z, fma(_629, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _625)) + cbModelParam._m0[23u].w;
        float _1573 = fma(_574, cbModelParam._m0[21u].z, fma(_573, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572));
        float _1576 = fma(_574, cbModelParam._m0[22u].z, fma(_573, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572));
        float _1579 = fma(_574, cbModelParam._m0[23u].z, fma(_573, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572));
        float _1717;
        if (_1573 > 0.0)
        {
            _1717 = abs((1.0 - _1562) / _1573);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1562 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1717 = frontier_phi_30_26_ladder;
        }
        float _1982;
        if (_1576 > 0.0)
        {
            _1982 = abs((1.0 - _1566) / _1576);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1566 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1982 = frontier_phi_42_37_ladder;
        }
        float _2187;
        if (_1579 > 0.0)
        {
            _2187 = abs((1.0 - _1570) / _1579);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1570 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2187 = frontier_phi_51_48_ladder;
        }
        float _2189 = isnan(_1982) ? _1717 : (isnan(_1717) ? _1982 : min(_1717, _1982));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1573) + _1562;
        float _2195 = (_2190 * _1576) + _1566;
        float _2196 = (_2190 * _1579) + _1570;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2197;
        float _2200 = _2197 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2196 > _2200) || ((_2196 < _2198) || ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 < _2198) || (_2194 > _2200))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2394 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2196, cbModelParam._m0[17u].z, fma(_2195, cbModelParam._m0[17u].y, _2194 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2196, cbModelParam._m0[18u].z, fma(_2195, cbModelParam._m0[18u].y, _2194 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2196, cbModelParam._m0[19u].z, fma(_2195, cbModelParam._m0[19u].y, _2194 * cbModelParam._m0[19u].x))), _1505);
            frontier_phi_27_51_ladder = _2394.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2394.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2394.x * cbModelParam._m0[1u].z;
        }
        _1598 = frontier_phi_27_51_ladder_2;
        _1600 = frontier_phi_27_51_ladder_1;
        _1602 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1582 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_572, _573, _574), _1505);
        _1598 = _1582.x * cbModelParam._m0[1u].z;
        _1600 = _1582.y * cbModelParam._m0[1u].z;
        _1602 = _1582.z * cbModelParam._m0[1u].z;
    }
    float _1614 = ((((1.0 - _593) * ((_580 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_593 * _580)) * _564;
    float _1615 = _1614 * ((cbModelParam._m0[1u].w * (_1598 - _1496)) + _1496);
    float _1616 = _1614 * ((cbModelParam._m0[1u].w * (_1600 - _1498)) + _1498);
    float _1617 = _1614 * ((cbModelParam._m0[1u].w * (_1602 - _1500)) + _1500);
    float _1620 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, _1615 * cbSceneParam._m0[91u].x));
    uvec4 _1636 = floatBitsToUint(cbInstanceData._m0[_538 + 5u]);
    uint _1638 = _1636.x * 14u;
    uint _1639 = _1638 + 13u;
    float _1646 = _564 + (-1.0);
    float _1651 = (cbLight._m0[_1639].x * _1646) + 1.0;
    float _1652 = (cbLight._m0[_1639].y * _1646) + 1.0;
    float _1653 = (cbLight._m0[_1639].z * _1646) + 1.0;
    float _1654 = (cbLight._m0[_1639].w * _1646) + 1.0;
    uint _1655 = _1638 + 5u;
    float _1661 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
    uint _1665 = _1638 + 4u;
    float _1671 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
    uint _1675 = _1638 | 1u;
    float _1686 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_397, _398, _399));
    float _1689 = dot(vec3(cbLight._m0[_1675].xyz), vec3(_397, _398, _399));
    float _3867 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _3878 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1694 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.3183098733425140380859375;
    float _1696 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.3183098733425140380859375;
    float _1703 = ((cbLight._m0[_1655].x * _1661) * _1696) + ((cbLight._m0[_1665].x * _1671) * _1694);
    float _1704 = ((_1661 * cbLight._m0[_1655].y) * _1696) + ((_1671 * cbLight._m0[_1665].y) * _1694);
    float _1705 = ((_1661 * cbLight._m0[_1655].z) * _1696) + ((_1671 * cbLight._m0[_1665].z) * _1694);
    uvec4 _1709 = floatBitsToUint(cbLight._m0[_1638 + 12u]);
    bool _1711 = _1709.x == 0u;
    float _1722;
    float _1724;
    float _1726;
    if (_1711)
    {
        _1722 = _1703;
        _1724 = _1704;
        _1726 = _1705;
    }
    else
    {
        uint _1730 = _1638 + 6u;
        float _1746 = (dot(vec3(cbLight._m0[_1638 + 2u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _1747 = _1746 * _1746;
        float _3889 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1749 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _1722 = (((cbLight._m0[_1730].x * 0.3183098733425140380859375) * _1748) * _1749) + _1703;
        _1724 = (((cbLight._m0[_1730].y * 0.3183098733425140380859375) * _1748) * _1749) + _1704;
        _1726 = (((cbLight._m0[_1730].z * 0.3183098733425140380859375) * _1748) * _1749) + _1705;
    }
    bool _1729 = _1709.y == 0u;
    float _1767;
    float _1769;
    float _1771;
    if (_1729)
    {
        _1767 = _1722;
        _1769 = _1724;
        _1771 = _1726;
    }
    else
    {
        uint _1926 = _1638 + 7u;
        float _1942 = (dot(vec3(cbLight._m0[_1638 + 3u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _3905 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1945 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _1767 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1722;
        _1769 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1724;
        _1771 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1726;
    }
    uint _1774 = _1638 + 8u;
    float _1787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1638].w)) * _400) * 0.949999988079071044921875);
    float _1788 = _1787 * _1787;
    float _1789 = cbLight._m0[_1638].x + _477;
    float _1790 = cbLight._m0[_1638].y + _478;
    float _1791 = cbLight._m0[_1638].z + _479;
    float _1795 = inversesqrt(dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791)));
    float _1796 = _1795 * _1789;
    float _1797 = _1795 * _1790;
    float _1798 = _1795 * _1791;
    float _1799 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1638].xyz));
    float _3921 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1802 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _1803 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1804 = dot(vec3(_397, _398, _399), vec3(_1796, _1797, _1798));
    float _3943 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1808 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_1796, _1797, _1798));
    float _3954 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1812 = _1788 * _1788;
    float _1816 = ((_1807 * _1807) * (_1812 + (-1.0))) + 1.0;
    float _1827 = (exp2(log2(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1828 = 1.0 - _1788;
    float _1839 = (0.5 / (((_1803 * ((_1802 * _1828) + _1788)) + 9.9999999392252902907785028219223e-09) + (((_1803 * _1828) + _1788) * _1802))) * _1802;
    float _3965 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1841 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1812 / ((_1816 * _1816) * 3.141590118408203125));
    uint _1852 = _1638 + 9u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1675].w)) * _400) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1675].x + _477;
    float _1866 = cbLight._m0[_1675].y + _478;
    float _1867 = cbLight._m0[_1675].z + _479;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1675].xyz));
    float _3976 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1879 = dot(vec3(_397, _398, _399), vec3(_1872, _1873, _1874));
    float _3987 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1883 = dot(vec3(cbLight._m0[_1675].xyz), vec3(_1872, _1873, _1874));
    float _3998 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1887 = _1864 * _1864;
    float _1891 = ((_1882 * _1882) * (_1887 + (-1.0))) + 1.0;
    float _1900 = (exp2(log2(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1901 = 1.0 - _1864;
    float _1911 = (0.5 / (((_1803 * ((_1878 * _1901) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1803 * _1901) + _1864) * _1878))) * _1878;
    float _4009 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1887 / ((_1891 * _1891) * 3.141590118408203125));
    float _1923 = (((_1900 * cbLight._m0[_1852].x) * _1913) * _1661) + (((_1827 * cbLight._m0[_1774].x) * _1841) * _1671);
    float _1924 = (((_1900 * cbLight._m0[_1852].y) * _1913) * _1661) + (((_1827 * cbLight._m0[_1774].y) * _1841) * _1671);
    float _1925 = (((_1900 * cbLight._m0[_1852].z) * _1913) * _1661) + (((_1827 * cbLight._m0[_1774].z) * _1841) * _1671);
    float _1987;
    float _1989;
    float _1991;
    if (_1711)
    {
        _1987 = _1923;
        _1989 = _1924;
        _1991 = _1925;
    }
    else
    {
        uint _1993 = _1638 + 2u;
        uint _1997 = _1638 + 10u;
        float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _400) * 0.949999988079071044921875);
        float _2012 = _2011 * _2011;
        float _2013 = cbLight._m0[_1993].x + _477;
        float _2014 = cbLight._m0[_1993].y + _478;
        float _2015 = cbLight._m0[_1993].z + _479;
        float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
        float _2020 = _2019 * _2013;
        float _2021 = _2019 * _2014;
        float _2022 = _2019 * _2015;
        float _2023 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1993].xyz));
        float _4020 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2026 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _2027 = dot(vec3(_397, _398, _399), vec3(_2020, _2021, _2022));
        float _4031 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2030 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2031 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2020, _2021, _2022));
        float _4042 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2035 = _2012 * _2012;
        float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
        float _2048 = (exp2(log2(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2049 = 1.0 - _2012;
        float _2059 = (0.5 / (((_1803 * ((_2026 * _2049) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_1803 * _2049) + _2012) * _2026))) * _2026;
        float _4053 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2061 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
        float _2062 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _1987 = (((_2048 * cbLight._m0[_1997].x) * _2061) * _2062) + _1923;
        _1989 = (((_2048 * cbLight._m0[_1997].y) * _2061) * _2062) + _1924;
        _1991 = (((_2048 * cbLight._m0[_1997].z) * _2061) * _2062) + _1925;
    }
    float _2097;
    float _2099;
    float _2101;
    if (_1729)
    {
        _2097 = _1987;
        _2099 = _1989;
        _2101 = _1991;
    }
    else
    {
        uint _2108 = _1638 + 3u;
        uint _2112 = _1638 + 11u;
        float _2126 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _400) * 0.949999988079071044921875);
        float _2127 = _2126 * _2126;
        float _2128 = cbLight._m0[_2108].x + _477;
        float _2129 = cbLight._m0[_2108].y + _478;
        float _2130 = cbLight._m0[_2108].z + _479;
        float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
        float _2135 = _2134 * _2128;
        float _2136 = _2134 * _2129;
        float _2137 = _2134 * _2130;
        float _2138 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_2108].xyz));
        float _4069 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2142 = dot(vec3(_397, _398, _399), vec3(_2135, _2136, _2137));
        float _4080 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2146 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2135, _2136, _2137));
        float _4091 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2150 = _2127 * _2127;
        float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
        float _2163 = (exp2(log2(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2164 = 1.0 - _2127;
        float _2174 = (0.5 / (((_1803 * ((_2141 * _2164) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_1803 * _2164) + _2127) * _2141))) * _2141;
        float _4102 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2176 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
        float _2177 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _2097 = (((_2163 * cbLight._m0[_2112].x) * _2176) * _2177) + _1987;
        _2099 = (((_2163 * cbLight._m0[_2112].y) * _2176) * _2177) + _1989;
        _2101 = (((_2163 * cbLight._m0[_2112].z) * _2176) * _2177) + _1991;
    }
    float _2311;
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    if (_1636.y == 0u)
    {
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2252;
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2252;
        float _2255 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2252;
        uvec4 _2267 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2268 = _2267.x;
        uint _2279 = uint((float(_2267.y) * floor(float(uint(cbSceneParam._m0[85u].y * _499) / _2268))) + floor(float(uint(cbSceneParam._m0[85u].x * _498) / _2268)));
        float _2289 = (log2(_2255 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2290 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        uint _2293 = uint(isnan(14.0) ? _2290 : (isnan(_2290) ? 14.0 : min(_2290, 14.0)));
        uvec4 _2298 = texelFetch(g_lightClusterGridBuffer, int(((_2293 << 2u) + (_2279 << 6u)) >> 2u));
        uint _2299 = _2298.x;
        uint _2300 = _2267.z;
        float _2399;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        if (((((1u << ((_2300 >> 4u) & 15u)) + 4294967295u) & _2299) == 0u) || ((_2300 & 240u) == 0u))
        {
            _2399 = 0.0;
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
        }
        else
        {
            float _2400;
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2410;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            uint _2557 = 0u;
            uint _2566;
            bool _2567;
            for (;;)
            {
                _2566 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2557 << 2u)) >> 2u)).x;
                _2567 = _2566 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2567)
                {
                    frontier_phi_68_pred = _2553;
                    frontier_phi_68_pred_1 = _2556;
                    frontier_phi_68_pred_2 = _2555;
                    frontier_phi_68_pred_3 = _2554;
                    frontier_phi_68_pred_4 = _2552;
                    frontier_phi_68_pred_5 = _2551;
                }
                else
                {
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    uint _2702;
                    _2696 = _2551;
                    _2697 = _2552;
                    _2698 = _2553;
                    _2699 = _2554;
                    _2700 = _2555;
                    _2701 = _2556;
                    _2702 = _2566;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    for (;;)
                    {
                        uint _2706 = uint(findLSB(_2702)) + (_2557 << 5u);
                        uint _2703 = (_2702 + 4294967295u) & _2702;
                        uint _2708 = _2706 * 48u;
                        vec4 _2722 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2708)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 3u)).x));
                        uint _2728 = (_2706 * 48u) + 4u;
                        vec4 _2741 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 3u)).x));
                        uint _2747 = (_2706 * 48u) + 8u;
                        vec3 _2758 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2747)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 2u)).x));
                        float _2762 = _2722.x - _2253;
                        float _2763 = _2722.y - _2254;
                        float _2764 = _2722.z - _2255;
                        float _2765 = dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764));
                        float _2768 = inversesqrt(_2765);
                        float _2769 = _2768 * _2762;
                        float _2770 = _2768 * _2763;
                        float _2771 = _2768 * _2764;
                        float _2772 = dot(vec3(_519, _522, _525), vec3(_2769, _2770, _2771));
                        float _2777 = 1.0 - (_2765 * _2722.w);
                        float _4128 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2778 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
                        float _2779 = sqrt(_2765) * _2741.w;
                        float _2782 = 1.39999997615814208984375 / (_2779 + 1.39999997615814208984375);
                        float _2783 = _2782 * _2782;
                        float _2786 = ((1.0 - _2783) * _2772) + _2783;
                        float _2789 = _2779 * _2779;
                        float _2793 = ((isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))) * _2778) / ((_2789 * 0.699999988079071044921875) + 1.0);
                        float _2797 = (-0.0) - _2253;
                        float _2798 = (-0.0) - _2254;
                        float _2799 = (-0.0) - _2255;
                        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
                        float _2804 = _2803 * _2797;
                        float _2805 = _2803 * _2798;
                        float _2806 = _2803 * _2799;
                        float _2814 = exp2(log2(1.0 / ((_2789 * 3.5) + 5.0)) * 0.25);
                        float _2815 = 1.0 - _580;
                        float _2822 = sqrt(1.0 - ((1.0 - (_2815 * _2815)) * (1.0 - (_2814 * _2814))));
                        float _2823 = _2822 * _2822;
                        float _2824 = _2823 * _2823;
                        float _2825 = _2804 + _2769;
                        float _2826 = _2805 + _2770;
                        float _2827 = _2806 + _2771;
                        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
                        float _2835 = dot(vec3(_519, _522, _525), vec3(_2804, _2805, _2806));
                        float _4144 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2838 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2839 = dot(vec3(_519, _522, _525), vec3(_2831 * _2825, _2831 * _2826, _2831 * _2827));
                        float _4155 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2842 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2846 = ((_2842 * _2842) * (_2824 + (-1.0))) + 1.0;
                        float _2847 = _2782 * _2823;
                        float _2848 = _2847 * _2847;
                        float _2851 = ((1.0 - _2848) * _2772) + _2848;
                        float _4166 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2852 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2853 = 1.0 - _2823;
                        float _2863 = (0.5 / (((_2852 * ((_2838 * _2853) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2852 * _2853) + _2823) * _2838))) * _2852;
                        float _4177 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2874 = (((_2824 * 3.1415927410125732421875) * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) / ((_2846 * _2846) * ((_2789 * 2.1991131305694580078125) + 3.141590118408203125))) * _2778;
                        _2626 = (_2793 * _2741.x) + _2699;
                        _2627 = (_2793 * _2741.y) + _2700;
                        _2628 = (_2793 * _2741.z) + _2701;
                        _2623 = (_2874 * _2758.x) + _2696;
                        _2624 = (_2874 * _2758.y) + _2697;
                        _2625 = (_2874 * _2758.z) + _2698;
                        if (_2703 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2696 = _2623;
                            _2697 = _2624;
                            _2698 = _2625;
                            _2699 = _2626;
                            _2700 = _2627;
                            _2701 = _2628;
                            _2702 = _2703;
                        }
                    }
                    frontier_phi_68_pred = _2625;
                    frontier_phi_68_pred_1 = _2628;
                    frontier_phi_68_pred_2 = _2627;
                    frontier_phi_68_pred_3 = _2626;
                    frontier_phi_68_pred_4 = _2624;
                    frontier_phi_68_pred_5 = _2623;
                }
                _2404 = frontier_phi_68_pred;
                _2410 = frontier_phi_68_pred_1;
                _2408 = frontier_phi_68_pred_2;
                _2406 = frontier_phi_68_pred_3;
                _2402 = frontier_phi_68_pred_4;
                _2400 = frontier_phi_68_pred_5;
                uint _2558 = _2557 + 1u;
                if (_2558 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2551 = _2400;
                    _2552 = _2402;
                    _2553 = _2404;
                    _2554 = _2406;
                    _2555 = _2408;
                    _2556 = _2410;
                    _2557 = _2558;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2399 = _2400;
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
        }
        uvec4 _2413 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2414 = _2413.z;
        uint _2416 = (_2414 >> 8u) & 15u;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        if (((4294967295u << _2416) & _2299) == 0u)
        {
            _2519 = _2399;
            _2521 = _2401;
            _2523 = _2403;
            _2525 = _2405;
            _2527 = _2407;
            _2529 = _2409;
        }
        else
        {
            float _2544 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
            float _2545 = _2544 * _2253;
            float _2546 = _2544 * _2254;
            float _2547 = _2544 * _2255;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2416 < ((_2414 >> 12u) & 15u))
            {
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2679 = _2399;
                float _2680 = _2401;
                float _2681 = _2403;
                float _2682 = _2405;
                float _2683 = _2407;
                float _2684 = _2409;
                uint _2685 = _2416;
                uint _2694;
                bool _2695;
                for (;;)
                {
                    _2694 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2685 << 2u)) >> 2u)).x;
                    _2695 = _2694 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2695)
                    {
                        frontier_phi_79_pred = _2684;
                        frontier_phi_79_pred_1 = _2683;
                        frontier_phi_79_pred_2 = _2682;
                        frontier_phi_79_pred_3 = _2681;
                        frontier_phi_79_pred_4 = _2680;
                        frontier_phi_79_pred_5 = _2679;
                    }
                    else
                    {
                        float _2888;
                        float _2889;
                        float _2890;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _2901 = _2679;
                        float _2902 = _2680;
                        float _2903 = _2681;
                        float _2904 = _2682;
                        float _2905 = _2683;
                        float _2906 = _2684;
                        uint _2907 = _2694;
                        uint _2908;
                        vec4 _2933;
                        float _2934;
                        vec4 _2949;
                        vec3 _2961;
                        vec4 _2977;
                        vec4 _2993;
                        float _3040;
                        bool _3041;
                        for (;;)
                        {
                            uint _2918 = ((_2685 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2907));
                            _2908 = (_2907 + 4294967295u) & _2907;
                            uint _2920 = _2918 * 40u;
                            _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            _2934 = _2933.w;
                            uint _2936 = (_2918 * 40u) + 4u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2951 = (_2918 * 40u) + 8u;
                            _2961 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x));
                            uint _2964 = (_2918 * 40u) + 16u;
                            _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2980 = (_2918 * 40u) + 20u;
                            _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            uint _2996 = (_2918 * 40u) + 24u;
                            vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3015 = (_2918 * 40u) + 28u;
                            vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            _3040 = fma(_2255, _3028.z, fma(_2254, _3028.y, _3028.x * _2253)) + _3028.w;
                            _3041 = !((fma(_2255, _3009.z, fma(_2254, _3009.y, _3009.x * _2253)) + _3009.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3041)
                            {
                                float _3068 = _2933.x - _2253;
                                float _3069 = _2933.y - _2254;
                                float _3070 = _2933.z - _2255;
                                float _3071 = dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070));
                                float _3074 = inversesqrt(_3071);
                                float _3075 = _3074 * _3068;
                                float _3076 = _3074 * _3069;
                                float _3077 = _3074 * _3070;
                                float _3081 = 1.0 - (_3071 / (_2934 * _2934));
                                float _4188 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                                float _3086 = sqrt(_3071) * _2949.w;
                                float _3088 = 1.39999997615814208984375 / (_3086 + 1.39999997615814208984375);
                                float _3089 = _3088 * _3088;
                                float _3092 = ((1.0 - _3089) * dot(vec3(_3075, _3076, _3077), vec3(_519, _522, _525))) + _3089;
                                float _3095 = _3086 * _3086;
                                float _3099 = (fma(_2255, _2977.z, fma(_2254, _2977.y, _2977.x * _2253)) + _2977.w) / _3040;
                                float _3100 = (fma(_2255, _2993.z, fma(_2254, _2993.y, _2993.x * _2253)) + _2993.w) / _3040;
                                float _3104 = 1.0 - dot(vec2(_3099, _3100), vec2(_3099, _3100));
                                float _4204 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3105 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3106 = _3105 * (((isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0))) * _3082) / ((_3095 * 0.699999988079071044921875) + 1.0));
                                float _3118 = exp2(log2(1.0 / ((_3095 * 3.5) + 5.0)) * 0.25);
                                float _3119 = 1.0 - _580;
                                float _3126 = sqrt(1.0 - ((1.0 - (_3119 * _3119)) * (1.0 - (_3118 * _3118))));
                                float _3127 = _3126 * _3126;
                                float _3128 = _3127 * _3127;
                                float _3129 = _3075 - _2545;
                                float _3130 = _3076 - _2546;
                                float _3131 = _3077 - _2547;
                                float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                                float _3139 = dot(vec3(_519, _522, _525), vec3((-0.0) - _2545, (-0.0) - _2546, (-0.0) - _2547));
                                float _4215 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3142 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3143 = dot(vec3(_519, _522, _525), vec3(_3135 * _3129, _3135 * _3130, _3135 * _3131));
                                float _4226 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3146 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3150 = ((_3146 * _3146) * (_3128 + (-1.0))) + 1.0;
                                float _3151 = _3088 * _3127;
                                float _3152 = _3151 * _3151;
                                float _3158 = ((1.0 - _3152) * dot(vec3(_519, _522, _525), vec3(_3075, _3076, _3077))) + _3152;
                                float _4237 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3160 = 1.0 - _3127;
                                float _3170 = (0.5 / (((_3159 * ((_3142 * _3160) + _3127)) + 9.9999999392252902907785028219223e-09) + (((_3159 * _3160) + _3127) * _3142))) * _3159;
                                float _4248 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3180 = (_3105 * _3082) * (((_3128 * 3.1415927410125732421875) * (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) / ((_3150 * _3150) * ((_3095 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3106 * _2949.z;
                                frontier_phi_85_pred_1 = _3106 * _2949.y;
                                frontier_phi_85_pred_2 = _3106 * _2949.x;
                                frontier_phi_85_pred_3 = _3180 * _2961.z;
                                frontier_phi_85_pred_4 = _3180 * _2961.y;
                                frontier_phi_85_pred_5 = _3180 * _2961.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3189 = frontier_phi_85_pred;
                            _3188 = frontier_phi_85_pred_1;
                            _3187 = frontier_phi_85_pred_2;
                            _3186 = frontier_phi_85_pred_3;
                            _3185 = frontier_phi_85_pred_4;
                            _3184 = frontier_phi_85_pred_5;
                            _2891 = _3187 + _2904;
                            _2892 = _3188 + _2905;
                            _2893 = _3189 + _2906;
                            _2888 = _3184 + _2901;
                            _2889 = _3185 + _2902;
                            _2890 = _3186 + _2903;
                            if (_2908 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2908;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2893;
                        frontier_phi_79_pred_1 = _2892;
                        frontier_phi_79_pred_2 = _2891;
                        frontier_phi_79_pred_3 = _2890;
                        frontier_phi_79_pred_4 = _2889;
                        frontier_phi_79_pred_5 = _2888;
                    }
                    _2530 = frontier_phi_79_pred;
                    _2528 = frontier_phi_79_pred_1;
                    _2526 = frontier_phi_79_pred_2;
                    _2524 = frontier_phi_79_pred_3;
                    _2522 = frontier_phi_79_pred_4;
                    _2520 = frontier_phi_79_pred_5;
                    uint _2686 = _2685 + 1u;
                    if (_2686 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2679 = _2520;
                        _2680 = _2522;
                        _2681 = _2524;
                        _2682 = _2526;
                        _2683 = _2528;
                        _2684 = _2530;
                        _2685 = _2686;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2526;
                frontier_phi_60_61_ladder_1 = _2530;
                frontier_phi_60_61_ladder_2 = _2528;
                frontier_phi_60_61_ladder_3 = _2524;
                frontier_phi_60_61_ladder_4 = _2522;
                frontier_phi_60_61_ladder_5 = _2520;
            }
            else
            {
                frontier_phi_60_61_ladder = _2405;
                frontier_phi_60_61_ladder_1 = _2409;
                frontier_phi_60_61_ladder_2 = _2407;
                frontier_phi_60_61_ladder_3 = _2403;
                frontier_phi_60_61_ladder_4 = _2401;
                frontier_phi_60_61_ladder_5 = _2399;
            }
            _2519 = frontier_phi_60_61_ladder_5;
            _2521 = frontier_phi_60_61_ladder_4;
            _2523 = frontier_phi_60_61_ladder_3;
            _2525 = frontier_phi_60_61_ladder;
            _2527 = frontier_phi_60_61_ladder_2;
            _2529 = frontier_phi_60_61_ladder_1;
        }
        float _2534 = isnan(1.0) ? _564 : (isnan(_564) ? 1.0 : min(_564, 1.0));
        _2311 = (_2534 * _2525) + _1767;
        _2313 = (_2534 * _2527) + _1769;
        _2315 = (_2534 * _2529) + _1771;
        _2317 = ((_2519 * 0.039999999105930328369140625) * _2534) + _2097;
        _2319 = ((_2521 * 0.039999999105930328369140625) * _2534) + _2099;
        _2321 = ((_2523 * 0.039999999105930328369140625) * _2534) + _2101;
    }
    else
    {
        _2311 = _1767;
        _2313 = _1769;
        _2315 = _1771;
        _2317 = _2097;
        _2319 = _2099;
        _2321 = _2101;
    }
    float _4264 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _4275 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _4286 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _2338 = ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2311 + ((isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))) * _564))) + ((_2317 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _1403)) * cbPerFrame._m0[3u].x);
    float _2339 = ((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2313 + ((isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))) * _564))) + ((_2319 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1403)) * cbPerFrame._m0[3u].x);
    float _2340 = ((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2315 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _564))) + ((_2321 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1403)) * cbPerFrame._m0[3u].x);
    uint _2341 = _538 + 6u;
    float _2349 = _498 / cbSceneParam._m0[86u].x;
    float _2350 = _499 / cbSceneParam._m0[86u].y;
    vec4 _2364 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2349, _2350, (log2((isnan(cbSceneParam._m0[77u].w) ? _419 : (isnan(_419) ? cbSceneParam._m0[77u].w : min(_419, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2366 = _2364.x;
    float _2367 = _2364.y;
    float _2368 = _2364.z;
    float _2369 = _2364.w;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    if (_419 > cbSceneParam._m0[78u].w)
    {
        float _2424 = isnan(_419) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _419 : min(cbSceneParam._m0[80u].w, _419));
        float _2425 = _2424 / _419;
        float _2436 = _2425 * _470;
        float _2437 = _471 * _2425;
        float _2438 = (-0.0) - _2437;
        float _2439 = _2425 * _472;
        float _2441 = (cbSceneParam._m0[77u].w * _2438) / _2424;
        float _2442 = _2441 + cbSceneParam._m0[79u].w;
        float _2443 = cbSceneParam._m0[79u].w - _2437;
        float _2449 = sqrt(((_2436 * _2436) + (_2437 * _2437)) + (_2439 * _2439));
        float _2452 = (1.0 - (cbSceneParam._m0[77u].w / _2424)) * _2449;
        float _2457 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2459 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2636;
        if (abs((_2438 - _2441) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2636 = ((((_2442 > 0.0) ? exp2(_2457 * _2442) : (2.0 - exp2(_2459 * _2442))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2452;
        }
        else
        {
            float _2580 = 1.0 / cbSceneParam._m0[80u].x;
            float _2581 = isnan(_2443) ? _2442 : (isnan(_2442) ? _2443 : max(_2442, _2443));
            float _2582 = isnan(_2443) ? _2442 : (isnan(_2442) ? _2443 : min(_2442, _2443));
            float _2591 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : min(_2581, 0.0));
            float _2592 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : min(_2582, 0.0));
            _2636 = ((abs(_2449 / _2438) * cbSceneParam._m0[80u].y) * ((((_2591 - _2592) * 2.0) - ((exp2(_2457 * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0)))) - exp2(_2457 * (isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))))) * _2580)) - ((exp2(_2459 * _2591) - exp2(_2459 * _2592)) * _2580))) + (_2452 * cbSceneParam._m0[80u].z);
        }
        vec4 _2638 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2349, _2350, 1.0), 0.0);
        float _2647 = exp2((_2636 * (-1.44269502162933349609375)) * (1.0 - _2638.w));
        float _2648 = log2(_2647);
        float _2664 = log2(_2369);
        _2461 = (exp2(_2664 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2648 * cbSceneParam._m0[78u].x)) * _2638.x) / cbSceneParam._m0[78u].x)) + _2366;
        _2463 = (exp2(_2664 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2648 * cbSceneParam._m0[78u].y)) * _2638.y) / cbSceneParam._m0[78u].y)) + _2367;
        _2465 = (exp2(_2664 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2648 * cbSceneParam._m0[78u].z)) * _2638.z) / cbSceneParam._m0[78u].z)) + _2368;
        _2467 = _2647 * _2369;
    }
    else
    {
        _2461 = _2366;
        _2463 = _2367;
        _2465 = _2368;
        _2467 = _2369;
    }
    bool _2674;
    vec4 _2477;
    vec4 _2499;
    float _2501;
    float _2505;
    float _2506;
    float _2507;
    float _2508;
    bool _2518;
    for (;;)
    {
        _2477 = cbMatDynParam._m0[0u];
        float _2479 = roundEven(_2477.y);
        bool _2480 = _2479 == 3.0;
        float _2481 = log2(_2467);
        float _2488 = exp2(_2481 * cbSceneParam._m0[78u].x) * _2338;
        float _2489 = exp2(_2481 * cbSceneParam._m0[78u].y) * _2339;
        float _2490 = exp2(_2481 * cbSceneParam._m0[78u].z) * _2340;
        float _2497 = _486 + (-0.5);
        _2499 = cbMtdParam._m0[1u];
        _2501 = _2499.y * _2497;
        float _2504 = (_2479 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2505 = _2504 * (_2480 ? _2488 : (_2488 + (cbSceneParam._m0[72u].w * _2461)));
        _2506 = _2504 * (_2480 ? _2489 : (_2489 + (cbSceneParam._m0[72u].w * _2463)));
        _2507 = _2504 * (_2480 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2465)));
        _2508 = _2497 * 0.999000012874603271484375;
        _2518 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2518)
        {
            if ((cbInstanceData._m0[_538 + 7u].x + _2508) < 0.5)
            {
                _2674 = true;
                break;
            }
        }
        uint _2615 = _540 + uint(_2477.w);
        if ((cbInstanceData._m0[_2615].w < 1.0) && ((cbInstanceData._m0[_2615].w + _2508) < 0.5))
        {
            _2674 = true;
            break;
        }
        if ((_2501 + 1.0) < _2499.x)
        {
            _2674 = true;
            break;
        }
        _2674 = false;
        break;
    }
    float _2879;
    if (_2674)
    {
        discard_state = true;
        _2879 = 0.0;
    }
    else
    {
        _2879 = cbInstanceData._m0[_2341].w;
    }
    SV_Target.x = _2505;
    SV_Target.y = _2506;
    SV_Target.z = _2507;
    SV_Target.w = _2879;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2341].w;
    discard_exit();
}


