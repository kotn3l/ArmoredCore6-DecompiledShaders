#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _957;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _243 = _238.z;
    float _247 = (_238.x * 2.0) + (-1.0);
    float _249 = (_238.y * 2.0) + (-1.0);
    float _250 = dot(vec2(_247, _249), vec2(_247, _249));
    float _3292 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _256 = sqrt(1.0 - (isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))));
    float _259 = fma(_256, _213, fma(_249, _206, _247 * _192));
    float _262 = fma(_256, _214, fma(_249, _207, _247 * _193));
    float _265 = fma(_256, _215, fma(_249, _208, _247 * _194));
    float _269 = inversesqrt(dot(vec3(_259, _262, _265), vec3(_259, _262, _265)));
    float _270 = _269 * _259;
    float _271 = _269 * _262;
    float _272 = _269 * _265;
    float _277 = cbMtdParam._m0[10u].x + dot(vec4(_270, _271, _272, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3303 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _285 = dot(vec4(_270, _271, _272, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _3314 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _287 = (isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) + (isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0)));
    vec4 _305 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _310 = _305.x * cbMtdParam._m0[9u].x;
    float _311 = _305.y * cbMtdParam._m0[9u].y;
    float _312 = _305.z * cbMtdParam._m0[9u].z;
    vec4 _324 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _335 = ((_324.x - _310) * _287) + _310;
    float _336 = ((_324.y - _311) * _287) + _311;
    float _337 = ((_324.z - _312) * _287) + _312;
    vec4 _349 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _351 = _349.x;
    float _353 = _351 - (_351 * _287);
    vec4 _366 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _373 = (_366.x * 2.0) + (-1.0);
    float _374 = (_366.y * 2.0) + (-1.0);
    float _375 = dot(vec2(_373, _374), vec2(_373, _374));
    float _3325 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _383 = ((_366.z - _243) * _287) + _243;
    float _392 = ((sqrt(1.0 - (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0)))) - _256) * _287) + _256;
    float _396 = (((_373 - _247) * _287) + _247) + (cbMtdParam._m0[10u].y * _247);
    float _397 = (((_374 - _249) * _287) + _249) + (cbMtdParam._m0[10u].y * _249);
    float _400 = fma(_392, _213, fma(_397, _206, _396 * _192));
    float _403 = fma(_392, _214, fma(_397, _207, _396 * _193));
    float _406 = fma(_392, _215, fma(_397, _208, _396 * _194));
    float _410 = inversesqrt(dot(vec3(_400, _403, _406), vec3(_400, _403, _406)));
    float _411 = _410 * _400;
    float _412 = _410 * _403;
    float _413 = _410 * _406;
    float _3336 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _414 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _3347 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3358 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3369 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3380 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _418 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
    float _434 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _475 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _485 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _475);
    float _486 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _475);
    float _487 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _475);
    float _491 = inversesqrt(dot(vec3(_485, _486, _487), vec3(_485, _486, _487)));
    float _492 = _485 * _491;
    float _493 = _486 * _491;
    float _494 = _487 * _491;
    float _500 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _501 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _522 = fma(_413, cbSceneParam._m0[5u].z, fma(_412, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _411));
    float _525 = fma(_413, cbSceneParam._m0[6u].z, fma(_412, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _411));
    float _528 = fma(_413, cbSceneParam._m0[7u].z, fma(_412, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _411));
    uint _541 = uint(roundEven(NORMAL.w)) * 13u;
    uint _544 = (_541 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _550 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0)))) * cbInstanceData._m0[_544].x;
    float _551 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0)))) * cbInstanceData._m0[_544].y;
    float _552 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) * cbInstanceData._m0[_544].z;
    float _3391 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    float _3402 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _554 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _3413 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _555 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _556 = 1.0 - _418;
    float _557 = _553 * _556;
    float _558 = _554 * _556;
    float _559 = _555 * _556;
    float _564 = (_553 + (-0.039999999105930328369140625)) * _418;
    float _565 = (_554 + (-0.039999999105930328369140625)) * _418;
    float _566 = (_555 + (-0.039999999105930328369140625)) * _418;
    float _567 = _564 + 0.039999999105930328369140625;
    float _569 = _565 + 0.039999999105930328369140625;
    float _570 = _566 + 0.039999999105930328369140625;
    vec4 _579 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _500, cbSceneParam._m0[86u].y * _501));
    float _582 = _579.x * TEXCOORD.z;
    float _583 = dot(vec3(_411, _412, _413), vec3(_492, _493, _494));
    float _586 = _583 * 2.0;
    float _590 = (_586 * _411) - _492;
    float _591 = (_586 * _412) - _493;
    float _592 = (_586 * _413) - _494;
    float _596 = abs(dot(vec3(_492, _493, _494), vec3(_411, _412, _413)));
    float _3424 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _598 = sqrt(_414);
    float _611 = exp2((_598 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_598 * 3.0));
    float _617 = (1.0 - _611) * ((_598 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _618 = _611 * _598;
    float _646 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _654 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _956;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _681 = fma(_654, cbModelParam._m0[26u].z, fma(_650, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _646));
        float _685 = fma(_654, cbModelParam._m0[27u].z, fma(_650, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _646));
        float _689 = fma(_654, cbModelParam._m0[28u].z, fma(_650, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _646));
        float _714 = _646 + _411;
        float _715 = _650 + _412;
        float _716 = _654 + _413;
        float _726 = fma(_716, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _714)) - _681;
        float _727 = fma(_716, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _714)) - _685;
        float _728 = fma(_716, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _714)) - _689;
        float _732 = inversesqrt(dot(vec3(_726, _727, _728), vec3(_726, _727, _728)));
        float _745 = ((_732 * _726) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_681 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _746 = ((_732 * _727) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_685 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _747 = ((_732 * _728) / cbModelParam._m0[34u].z) + ((((((_689 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_745, _746, _747), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_745, _746, _747), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_745, _746, _747), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_745, _746, _747), 0.0);
        float _784 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_750.x + (-0.5));
        float _786 = _784 * (_750.y + (-0.5));
        float _787 = _784 * (_750.z + (-0.5));
        float _794 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_757.x + (-0.5));
        float _796 = _794 * (_757.y + (-0.5));
        float _797 = _794 * (_757.z + (-0.5));
        float _804 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_764.x + (-0.5));
        float _806 = _804 * (_764.y + (-0.5));
        float _807 = _804 * (_764.z + (-0.5));
        float _814 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_771.x + (-0.5));
        float _816 = _814 * (_771.y + (-0.5));
        float _817 = _814 * (_771.z + (-0.5));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = _785 * 0.5;
        float _822 = _795 * 0.5;
        float _823 = _805 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _838 = (dot(vec3(_411, _412, _413), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3450 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _848 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3461 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _850 = _849 * 2.0;
        float _854 = (1.0 - _849) / (_849 + 1.0);
        float _3472 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _864 = ((((1.0 - _855) * (_850 + 2.0)) * exp2(log2(isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_850 + 1.0))) + _855) * _818;
        float _865 = _786 * 0.5;
        float _866 = _796 * 0.5;
        float _867 = _806 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _881 = (dot(vec3(_411, _412, _413), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3483 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _890 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3494 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _3505 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * (_892 + 1.0))) + _897) * _819;
        float _907 = _787 * 0.5;
        float _908 = _797 * 0.5;
        float _909 = _807 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _923 = (dot(vec3(_411, _412, _413), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _932 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3538 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_934 + 1.0))) + _939) * _820;
        _956 = _787;
        _958 = _786;
        _959 = _785;
        _960 = _797;
        _961 = _796;
        _962 = _795;
        _963 = _807;
        _964 = _806;
        _965 = _805;
        _966 = _820;
        _967 = _819;
        _968 = _818;
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)));
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
    }
    else
    {
        _956 = _957;
        _958 = _957;
        _959 = _957;
        _960 = _957;
        _961 = _957;
        _962 = _957;
        _963 = _957;
        _964 = _957;
        _965 = _957;
        _966 = _957;
        _967 = _957;
        _968 = _957;
        _969 = 0.0;
        _970 = 0.0;
        _971 = 0.0;
    }
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _997 = fma(_654, cbModelParam._m0[30u].z, fma(_650, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _646));
        float _1001 = fma(_654, cbModelParam._m0[31u].z, fma(_650, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _646));
        float _1005 = fma(_654, cbModelParam._m0[32u].z, fma(_650, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _646));
        float _1028 = _646 + _411;
        float _1029 = _650 + _412;
        float _1030 = _654 + _413;
        float _1040 = fma(_1030, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028)) - _997;
        float _1041 = fma(_1030, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028)) - _1001;
        float _1042 = fma(_1030, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028)) - _1005;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_997 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1001 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[35u].z) + ((((((_1005 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1096 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1063.x + (-0.5));
        float _1098 = _1096 * (_1063.y + (-0.5));
        float _1099 = _1096 * (_1063.z + (-0.5));
        float _1106 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1070.x + (-0.5));
        float _1108 = _1106 * (_1070.y + (-0.5));
        float _1109 = _1106 * (_1070.z + (-0.5));
        float _1116 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1077.x + (-0.5));
        float _1118 = _1116 * (_1077.y + (-0.5));
        float _1119 = _1116 * (_1077.z + (-0.5));
        float _1126 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1084.x + (-0.5));
        float _1128 = _1126 * (_1084.y + (-0.5));
        float _1129 = _1126 * (_1084.z + (-0.5));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = _1097 * 0.5;
        float _1134 = _1107 * 0.5;
        float _1135 = _1117 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_411, _412, _413), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3601 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1160 + 1.0))) + _1165) * _1130;
        float _1175 = _1098 * 0.5;
        float _1176 = _1108 * 0.5;
        float _1177 = _1118 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_411, _412, _413), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3634 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_1202 + 1.0))) + _1207) * _1131;
        float _1217 = _1099 * 0.5;
        float _1218 = _1109 * 0.5;
        float _1219 = _1119 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_411, _412, _413), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3645 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3656 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3667 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1244 + 1.0))) + _1249) * _1132;
        _1266 = _1099;
        _1267 = _1098;
        _1268 = _1097;
        _1269 = _1109;
        _1270 = _1108;
        _1271 = _1107;
        _1272 = _1119;
        _1273 = _1118;
        _1274 = _1117;
        _1275 = _1132;
        _1276 = _1131;
        _1277 = _1130;
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _957;
        _1267 = _957;
        _1268 = _957;
        _1269 = _957;
        _1270 = _957;
        _1271 = _957;
        _1272 = _957;
        _1273 = _957;
        _1274 = _957;
        _1275 = _957;
        _1276 = _957;
        _1277 = _957;
        _1278 = 0.0;
        _1279 = 0.0;
        _1280 = 0.0;
    }
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _969)) + _969;
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _970)) + _970;
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _971)) + _971;
    float _1313 = fma(_1292, cbSceneParam._m0[89u].z, fma(_1291, cbSceneParam._m0[89u].y, _1290 * cbSceneParam._m0[89u].x));
    float _1316 = fma(_1292, cbSceneParam._m0[90u].z, fma(_1291, cbSceneParam._m0[90u].y, _1290 * cbSceneParam._m0[90u].x));
    float _1319 = fma(_1292, cbSceneParam._m0[91u].z, fma(_1291, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1290));
    float _1334 = _590 * 0.5;
    float _1335 = _591 * 0.5;
    float _1336 = _592 * 0.5;
    float _1337 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1340 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1343 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1377;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1350 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_956, _960, _963, _966));
        float _1354 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_958, _961, _964, _967));
        float _1358 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_959, _962, _965, _968));
        float _1365 = dot(vec4(cbModelParam._m0[39u]), vec4(_1334, _1335, _1336, 1.0));
        _1377 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1365) ? 0.0 : (isnan(0.0) ? _1365 : max(0.0, _1365))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1377 = 1.0;
    }
    float _1388;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1379 = dot(vec4(cbModelParam._m0[40u]), vec4(_1334, _1335, _1336, 1.0));
        _1388 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1379) ? 0.0 : (isnan(0.0) ? _1379 : max(0.0, _1379))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1388 = 1.0;
    }
    float _1392 = (_1388 * cbModelParam._m0[1u].x) + (_1377 * (1.0 - cbModelParam._m0[1u].x));
    float _1402 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _414);
    float _1403 = isnan(_1402) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1402 : min(cbModelParam._m0[25u].z, _1402));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1452 = fma(_654, cbModelParam._m0[13u].z, fma(_650, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _646)) + cbModelParam._m0[13u].w;
        float _1456 = fma(_654, cbModelParam._m0[14u].z, fma(_650, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _646)) + cbModelParam._m0[14u].w;
        float _1460 = fma(_654, cbModelParam._m0[15u].z, fma(_650, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _646)) + cbModelParam._m0[15u].w;
        float _1463 = fma(_592, cbModelParam._m0[13u].z, fma(_591, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _590));
        float _1466 = fma(_592, cbModelParam._m0[14u].z, fma(_591, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _590));
        float _1469 = fma(_592, cbModelParam._m0[15u].z, fma(_591, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _590));
        float _1497;
        if (_1463 > 0.0)
        {
            _1497 = abs((1.0 - _1452) / _1463);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1452 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1497 = frontier_phi_16_14_ladder;
        }
        float _1703;
        if (_1466 > 0.0)
        {
            _1703 = abs((1.0 - _1456) / _1466);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1456 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1703 = frontier_phi_25_21_ladder;
        }
        float _1957;
        if (_1469 > 0.0)
        {
            _1957 = abs((1.0 - _1460) / _1469);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1460 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1957 = frontier_phi_37_32_ladder;
        }
        float _1959 = isnan(_1703) ? _1497 : (isnan(_1497) ? _1703 : min(_1497, _1703));
        float _1960 = isnan(_1957) ? _1959 : (isnan(_1959) ? _1957 : min(_1959, _1957));
        float _1964 = (_1960 * _1463) + _1452;
        float _1965 = (_1960 * _1466) + _1456;
        float _1966 = (_1960 * _1469) + _1460;
        float _1967 = _1960 * 9.9999997473787516355514526367188e-05;
        float _1969 = (-1.0) - _1967;
        float _1971 = _1967 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1966 > _1971) || ((_1966 < _1969) || ((_1965 > _1971) || ((_1965 < _1969) || ((_1964 < _1969) || (_1964 > _1971))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2094 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1966, cbModelParam._m0[9u].z, fma(_1965, cbModelParam._m0[9u].y, _1964 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1966, cbModelParam._m0[10u].z, fma(_1965, cbModelParam._m0[10u].y, _1964 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1966, cbModelParam._m0[11u].z, fma(_1965, cbModelParam._m0[11u].y, _1964 * cbModelParam._m0[11u].x))), _1403);
            frontier_phi_15_37_ladder = _2094.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2094.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2094.x * cbModelParam._m0[1u].y;
        }
        _1485 = frontier_phi_15_37_ladder_2;
        _1487 = frontier_phi_15_37_ladder_1;
        _1489 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_590, _591, _592), _1403);
        _1485 = _1473.x * cbModelParam._m0[1u].y;
        _1487 = _1473.y * cbModelParam._m0[1u].y;
        _1489 = _1473.z * cbModelParam._m0[1u].y;
    }
    float _1493 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _414);
    float _1494 = isnan(_1493) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1493 : min(cbModelParam._m0[25u].w, _1493));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1551 = fma(_654, cbModelParam._m0[21u].z, fma(_650, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _646)) + cbModelParam._m0[21u].w;
        float _1555 = fma(_654, cbModelParam._m0[22u].z, fma(_650, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _646)) + cbModelParam._m0[22u].w;
        float _1559 = fma(_654, cbModelParam._m0[23u].z, fma(_650, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _646)) + cbModelParam._m0[23u].w;
        float _1562 = fma(_592, cbModelParam._m0[21u].z, fma(_591, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _590));
        float _1565 = fma(_592, cbModelParam._m0[22u].z, fma(_591, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _590));
        float _1568 = fma(_592, cbModelParam._m0[23u].z, fma(_591, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _590));
        float _1708;
        if (_1562 > 0.0)
        {
            _1708 = abs((1.0 - _1551) / _1562);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1551 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1708 = frontier_phi_27_23_ladder;
        }
        float _1984;
        if (_1565 > 0.0)
        {
            _1984 = abs((1.0 - _1555) / _1565);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1555 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1984 = frontier_phi_39_34_ladder;
        }
        float _2197;
        if (_1568 > 0.0)
        {
            _2197 = abs((1.0 - _1559) / _1568);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1559 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2197 = frontier_phi_48_45_ladder;
        }
        float _2199 = isnan(_1984) ? _1708 : (isnan(_1708) ? _1984 : min(_1708, _1984));
        float _2200 = isnan(_2197) ? _2199 : (isnan(_2199) ? _2197 : min(_2199, _2197));
        float _2204 = (_2200 * _1562) + _1551;
        float _2205 = (_2200 * _1565) + _1555;
        float _2206 = (_2200 * _1568) + _1559;
        float _2207 = _2200 * 9.9999997473787516355514526367188e-05;
        float _2208 = (-1.0) - _2207;
        float _2210 = _2207 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2206 > _2210) || ((_2206 < _2208) || ((_2205 > _2210) || ((_2205 < _2208) || ((_2204 < _2208) || (_2204 > _2210))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2206, cbModelParam._m0[17u].z, fma(_2205, cbModelParam._m0[17u].y, _2204 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2206, cbModelParam._m0[18u].z, fma(_2205, cbModelParam._m0[18u].y, _2204 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2206, cbModelParam._m0[19u].z, fma(_2205, cbModelParam._m0[19u].y, _2204 * cbModelParam._m0[19u].x))), _1494);
            frontier_phi_24_48_ladder = _2404.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2404.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2404.x * cbModelParam._m0[1u].z;
        }
        _1587 = frontier_phi_24_48_ladder_2;
        _1589 = frontier_phi_24_48_ladder_1;
        _1591 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_590, _591, _592), _1494);
        _1587 = _1571.x * cbModelParam._m0[1u].z;
        _1589 = _1571.y * cbModelParam._m0[1u].z;
        _1591 = _1571.z * cbModelParam._m0[1u].z;
    }
    float _1604 = (((_617 * _567) + _618) * _582) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1606 = (((_617 * _569) + _618) * _582) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1608 = (((_617 * _570) + _618) * _582) * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1611 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, _1604 * cbSceneParam._m0[91u].x));
    uvec4 _1627 = floatBitsToUint(cbInstanceData._m0[_541 + 5u]);
    uint _1629 = _1627.x * 14u;
    uint _1630 = _1629 + 13u;
    float _1637 = _582 + (-1.0);
    float _1642 = (cbLight._m0[_1630].x * _1637) + 1.0;
    float _1643 = (cbLight._m0[_1630].y * _1637) + 1.0;
    float _1644 = (cbLight._m0[_1630].z * _1637) + 1.0;
    float _1645 = (cbLight._m0[_1630].w * _1637) + 1.0;
    uint _1646 = _1629 + 5u;
    float _1652 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
    uint _1656 = _1629 + 4u;
    float _1662 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
    uint _1666 = _1629 | 1u;
    float _1677 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_411, _412, _413));
    float _1680 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_411, _412, _413));
    float _3803 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _3814 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1685 = (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * 0.3183098733425140380859375;
    float _1687 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * 0.3183098733425140380859375;
    float _1694 = ((cbLight._m0[_1646].x * _1652) * _1687) + ((cbLight._m0[_1656].x * _1662) * _1685);
    float _1695 = ((_1652 * cbLight._m0[_1646].y) * _1687) + ((_1662 * cbLight._m0[_1656].y) * _1685);
    float _1696 = ((_1652 * cbLight._m0[_1646].z) * _1687) + ((_1662 * cbLight._m0[_1656].z) * _1685);
    uvec4 _1700 = floatBitsToUint(cbLight._m0[_1629 + 12u]);
    bool _1702 = _1700.x == 0u;
    float _1713;
    float _1715;
    float _1717;
    if (_1702)
    {
        _1713 = _1694;
        _1715 = _1695;
        _1717 = _1696;
    }
    else
    {
        uint _1721 = _1629 + 6u;
        float _1737 = (dot(vec3(cbLight._m0[_1629 + 2u].xyz), vec3(_411, _412, _413)) * 0.5) + 0.5;
        float _1738 = _1737 * _1737;
        float _3825 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1740 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
        _1713 = (((cbLight._m0[_1721].x * 0.3183098733425140380859375) * _1739) * _1740) + _1694;
        _1715 = (((cbLight._m0[_1721].y * 0.3183098733425140380859375) * _1739) * _1740) + _1695;
        _1717 = (((cbLight._m0[_1721].z * 0.3183098733425140380859375) * _1739) * _1740) + _1696;
    }
    bool _1720 = _1700.y == 0u;
    float _1758;
    float _1760;
    float _1762;
    if (_1720)
    {
        _1758 = _1713;
        _1760 = _1715;
        _1762 = _1717;
    }
    else
    {
        uint _1928 = _1629 + 7u;
        float _1944 = (dot(vec3(cbLight._m0[_1629 + 3u].xyz), vec3(_411, _412, _413)) * 0.5) + 0.5;
        float _1945 = _1944 * _1944;
        float _3841 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1946 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1947 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _1758 = (((cbLight._m0[_1928].x * 0.3183098733425140380859375) * _1946) * _1947) + _1713;
        _1760 = (((cbLight._m0[_1928].y * 0.3183098733425140380859375) * _1946) * _1947) + _1715;
        _1762 = (((cbLight._m0[_1928].z * 0.3183098733425140380859375) * _1946) * _1947) + _1717;
    }
    uint _1765 = _1629 + 8u;
    float _1778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1629].w)) * _414) * 0.949999988079071044921875);
    float _1779 = _1778 * _1778;
    float _1780 = cbLight._m0[_1629].x + _492;
    float _1781 = cbLight._m0[_1629].y + _493;
    float _1782 = cbLight._m0[_1629].z + _494;
    float _1786 = inversesqrt(dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782)));
    float _1787 = _1786 * _1780;
    float _1788 = _1786 * _1781;
    float _1789 = _1786 * _1782;
    float _1790 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1629].xyz));
    float _3857 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1793 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _1794 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _1795 = dot(vec3(_411, _412, _413), vec3(_1787, _1788, _1789));
    float _3879 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _1799 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_1787, _1788, _1789));
    float _3890 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1803 = _1779 * _1779;
    float _1807 = ((_1798 * _1798) * (_1803 + (-1.0))) + 1.0;
    float _1815 = exp2(log2(1.0 - (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * 5.0);
    float _1816 = 0.959999978542327880859375 - _564;
    float _1818 = 0.959999978542327880859375 - _565;
    float _1819 = 0.959999978542327880859375 - _566;
    float _1826 = 1.0 - _1779;
    float _1837 = (0.5 / (((_1794 * ((_1793 * _1826) + _1779)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _1826) + _1779) * _1793))) * _1793;
    float _3901 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1839 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1803 / ((_1807 * _1807) * 3.141590118408203125));
    uint _1850 = _1629 + 9u;
    float _1861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1666].w)) * _414) * 0.949999988079071044921875);
    float _1862 = _1861 * _1861;
    float _1863 = cbLight._m0[_1666].x + _492;
    float _1864 = cbLight._m0[_1666].y + _493;
    float _1865 = cbLight._m0[_1666].z + _494;
    float _1869 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
    float _1870 = _1869 * _1863;
    float _1871 = _1869 * _1864;
    float _1872 = _1869 * _1865;
    float _1873 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1666].xyz));
    float _3912 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _1877 = dot(vec3(_411, _412, _413), vec3(_1870, _1871, _1872));
    float _3923 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _1881 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_1870, _1871, _1872));
    float _3934 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1885 = _1862 * _1862;
    float _1889 = ((_1880 * _1880) * (_1885 + (-1.0))) + 1.0;
    float _1896 = exp2(log2(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * 5.0);
    float _1903 = 1.0 - _1862;
    float _1913 = (0.5 / (((_1794 * ((_1876 * _1903) + _1862)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _1903) + _1862) * _1876))) * _1876;
    float _3945 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1915 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1885 / ((_1889 * _1889) * 3.141590118408203125));
    float _1925 = (((((_1896 * _1816) + _567) * cbLight._m0[_1850].x) * _1915) * _1652) + (((((_1815 * _1816) + _567) * cbLight._m0[_1765].x) * _1839) * _1662);
    float _1926 = (((((_1896 * _1818) + _569) * cbLight._m0[_1850].y) * _1915) * _1652) + (((((_1815 * _1818) + _569) * cbLight._m0[_1765].y) * _1839) * _1662);
    float _1927 = (((((_1896 * _1819) + _570) * cbLight._m0[_1850].z) * _1915) * _1652) + (((((_1815 * _1819) + _570) * cbLight._m0[_1765].z) * _1839) * _1662);
    float _1989;
    float _1991;
    float _1993;
    if (_1702)
    {
        _1989 = _1925;
        _1991 = _1926;
        _1993 = _1927;
    }
    else
    {
        uint _1995 = _1629 + 2u;
        uint _1999 = _1629 + 10u;
        float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _414) * 0.949999988079071044921875);
        float _2014 = _2013 * _2013;
        float _2015 = cbLight._m0[_1995].x + _492;
        float _2016 = cbLight._m0[_1995].y + _493;
        float _2017 = cbLight._m0[_1995].z + _494;
        float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
        float _2022 = _2021 * _2015;
        float _2023 = _2021 * _2016;
        float _2024 = _2021 * _2017;
        float _2025 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1995].xyz));
        float _3956 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _2029 = dot(vec3(_411, _412, _413), vec3(_2022, _2023, _2024));
        float _3967 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2032 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _2033 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2022, _2023, _2024));
        float _3978 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2037 = _2014 * _2014;
        float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
        float _2048 = exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0);
        float _2055 = 1.0 - _2014;
        float _2065 = (0.5 / (((_1794 * ((_2028 * _2055) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _2055) + _2014) * _2028))) * _2028;
        float _3989 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2067 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
        float _2068 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
        _1989 = (((((_2048 * _1816) + _567) * cbLight._m0[_1999].x) * _2067) * _2068) + _1925;
        _1991 = (((((_2048 * _1818) + _569) * cbLight._m0[_1999].y) * _2067) * _2068) + _1926;
        _1993 = (((((_2048 * _1819) + _570) * cbLight._m0[_1999].z) * _2067) * _2068) + _1927;
    }
    float _2103;
    float _2105;
    float _2107;
    if (_1720)
    {
        _2103 = _1989;
        _2105 = _1991;
        _2107 = _1993;
    }
    else
    {
        uint _2114 = _1629 + 3u;
        uint _2118 = _1629 + 11u;
        float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _414) * 0.949999988079071044921875);
        float _2133 = _2132 * _2132;
        float _2134 = cbLight._m0[_2114].x + _492;
        float _2135 = cbLight._m0[_2114].y + _493;
        float _2136 = cbLight._m0[_2114].z + _494;
        float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
        float _2141 = _2140 * _2134;
        float _2142 = _2140 * _2135;
        float _2143 = _2140 * _2136;
        float _2144 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_2114].xyz));
        float _4005 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _2148 = dot(vec3(_411, _412, _413), vec3(_2141, _2142, _2143));
        float _4016 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2152 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2141, _2142, _2143));
        float _4027 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2156 = _2133 * _2133;
        float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
        float _2167 = exp2(log2(1.0 - (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * 5.0);
        float _2174 = 1.0 - _2133;
        float _2184 = (0.5 / (((_1794 * ((_2147 * _2174) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _2174) + _2133) * _2147))) * _2147;
        float _4038 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2186 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
        float _2187 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _2103 = (((((_2167 * _1816) + _567) * cbLight._m0[_2118].x) * _2186) * _2187) + _1989;
        _2105 = (((((_2167 * _1818) + _569) * cbLight._m0[_2118].y) * _2186) * _2187) + _1991;
        _2107 = (((((_2167 * _1819) + _570) * cbLight._m0[_2118].z) * _2186) * _2187) + _1993;
    }
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    if (_1627.y == 0u)
    {
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2262;
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2262;
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2262;
        uvec4 _2277 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2278 = _2277.x;
        uint _2289 = uint((float(_2277.y) * floor(float(uint(cbSceneParam._m0[85u].y * _501) / _2278))) + floor(float(uint(cbSceneParam._m0[85u].x * _500) / _2278)));
        float _2299 = (log2(_2265 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2300 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        uint _2303 = uint(isnan(14.0) ? _2300 : (isnan(_2300) ? 14.0 : min(_2300, 14.0)));
        uvec4 _2308 = texelFetch(g_lightClusterGridBuffer, int(((_2303 << 2u) + (_2289 << 6u)) >> 2u));
        uint _2309 = _2308.x;
        uint _2310 = _2277.z;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        if (((((1u << ((_2310 >> 4u) & 15u)) + 4294967295u) & _2309) == 0u) || ((_2310 & 240u) == 0u))
        {
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
        }
        else
        {
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            float _2557 = 0.0;
            float _2558 = 0.0;
            uint _2559 = 0u;
            uint _2568;
            bool _2569;
            for (;;)
            {
                _2568 = texelFetch(g_lightClassification, int((((_2303 << 5u) + (_2289 << 9u)) + (_2559 << 2u)) >> 2u)).x;
                _2569 = _2568 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2569)
                {
                    frontier_phi_63_pred = _2558;
                    frontier_phi_63_pred_1 = _2557;
                    frontier_phi_63_pred_2 = _2556;
                    frontier_phi_63_pred_3 = _2555;
                    frontier_phi_63_pred_4 = _2554;
                    frontier_phi_63_pred_5 = _2553;
                }
                else
                {
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    uint _2683;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2555;
                    _2680 = _2556;
                    _2681 = _2557;
                    _2682 = _2558;
                    _2683 = _2568;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    for (;;)
                    {
                        uint _2687 = uint(findLSB(_2683)) + (_2559 << 5u);
                        uint _2684 = (_2683 + 4294967295u) & _2683;
                        uint _2689 = _2687 * 48u;
                        vec4 _2703 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2689)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 3u)).x));
                        uint _2709 = (_2687 * 48u) + 4u;
                        vec4 _2722 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 3u)).x));
                        uint _2728 = (_2687 * 48u) + 8u;
                        vec3 _2739 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x));
                        float _2743 = _2703.x - _2263;
                        float _2744 = _2703.y - _2264;
                        float _2745 = _2703.z - _2265;
                        float _2746 = dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745));
                        float _2749 = inversesqrt(_2746);
                        float _2750 = _2749 * _2743;
                        float _2751 = _2749 * _2744;
                        float _2752 = _2749 * _2745;
                        float _2753 = dot(vec3(_522, _525, _528), vec3(_2750, _2751, _2752));
                        float _2758 = 1.0 - (_2746 * _2703.w);
                        float _4064 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2759 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                        float _2760 = sqrt(_2746) * _2722.w;
                        float _2763 = 1.39999997615814208984375 / (_2760 + 1.39999997615814208984375);
                        float _2764 = _2763 * _2763;
                        float _2767 = ((1.0 - _2764) * _2753) + _2764;
                        float _2770 = _2760 * _2760;
                        float _2774 = ((isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0))) * _2759) / ((_2770 * 0.699999988079071044921875) + 1.0);
                        float _2778 = (-0.0) - _2263;
                        float _2779 = (-0.0) - _2264;
                        float _2780 = (-0.0) - _2265;
                        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
                        float _2785 = _2784 * _2778;
                        float _2786 = _2784 * _2779;
                        float _2787 = _2784 * _2780;
                        float _2795 = exp2(log2(1.0 / ((_2770 * 3.5) + 5.0)) * 0.25);
                        float _2796 = 1.0 - _598;
                        float _2803 = sqrt(1.0 - ((1.0 - (_2796 * _2796)) * (1.0 - (_2795 * _2795))));
                        float _2804 = _2803 * _2803;
                        float _2805 = _2804 * _2804;
                        float _2806 = _2785 + _2750;
                        float _2807 = _2786 + _2751;
                        float _2808 = _2787 + _2752;
                        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
                        float _2816 = dot(vec3(_522, _525, _528), vec3(_2785, _2786, _2787));
                        float _4080 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                        float _2820 = dot(vec3(_522, _525, _528), vec3(_2812 * _2806, _2812 * _2807, _2812 * _2808));
                        float _4091 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2823 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2827 = ((_2823 * _2823) * (_2805 + (-1.0))) + 1.0;
                        float _2828 = _2763 * _2804;
                        float _2829 = _2828 * _2828;
                        float _2832 = ((1.0 - _2829) * _2753) + _2829;
                        float _4102 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2833 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                        float _2834 = 1.0 - _2804;
                        float _2844 = (0.5 / (((_2833 * ((_2819 * _2834) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2833 * _2834) + _2804) * _2819))) * _2833;
                        float _4113 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2855 = (((_2805 * 3.1415927410125732421875) * (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) / ((_2827 * _2827) * ((_2770 * 2.1991131305694580078125) + 3.141590118408203125))) * _2759;
                        _2612 = (_2774 * _2722.x) + _2680;
                        _2613 = (_2774 * _2722.y) + _2681;
                        _2614 = (_2774 * _2722.z) + _2682;
                        _2609 = (_2855 * _2739.x) + _2677;
                        _2610 = (_2855 * _2739.y) + _2678;
                        _2611 = (_2855 * _2739.z) + _2679;
                        if (_2684 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2611;
                            _2680 = _2612;
                            _2681 = _2613;
                            _2682 = _2614;
                            _2683 = _2684;
                        }
                    }
                    frontier_phi_63_pred = _2614;
                    frontier_phi_63_pred_1 = _2613;
                    frontier_phi_63_pred_2 = _2612;
                    frontier_phi_63_pred_3 = _2611;
                    frontier_phi_63_pred_4 = _2610;
                    frontier_phi_63_pred_5 = _2609;
                }
                _2420 = frontier_phi_63_pred;
                _2418 = frontier_phi_63_pred_1;
                _2416 = frontier_phi_63_pred_2;
                _2414 = frontier_phi_63_pred_3;
                _2412 = frontier_phi_63_pred_4;
                _2410 = frontier_phi_63_pred_5;
                uint _2560 = _2559 + 1u;
                if (_2560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2553 = _2410;
                    _2554 = _2412;
                    _2555 = _2414;
                    _2556 = _2416;
                    _2557 = _2418;
                    _2558 = _2420;
                    _2559 = _2560;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
        }
        uvec4 _2423 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2424 = _2423.z;
        uint _2426 = (_2424 >> 8u) & 15u;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        if (((4294967295u << _2426) & _2309) == 0u)
        {
            _2521 = _2409;
            _2523 = _2411;
            _2525 = _2413;
            _2527 = _2415;
            _2529 = _2417;
            _2531 = _2419;
        }
        else
        {
            float _2546 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
            float _2547 = _2546 * _2263;
            float _2548 = _2546 * _2264;
            float _2549 = _2546 * _2265;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2426 < ((_2424 >> 12u) & 15u))
            {
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2532;
                float _2660 = _2409;
                float _2661 = _2411;
                float _2662 = _2413;
                float _2663 = _2415;
                float _2664 = _2417;
                float _2665 = _2419;
                uint _2666 = _2426;
                uint _2675;
                bool _2676;
                for (;;)
                {
                    _2675 = texelFetch(g_lightClassification, int((((_2303 << 5u) + (_2289 << 9u)) + (_2666 << 2u)) >> 2u)).x;
                    _2676 = _2675 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2676)
                    {
                        frontier_phi_69_pred = _2665;
                        frontier_phi_69_pred_1 = _2664;
                        frontier_phi_69_pred_2 = _2663;
                        frontier_phi_69_pred_3 = _2662;
                        frontier_phi_69_pred_4 = _2661;
                        frontier_phi_69_pred_5 = _2660;
                    }
                    else
                    {
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        float _2875 = _2662;
                        float _2876 = _2663;
                        float _2877 = _2664;
                        float _2878 = _2665;
                        uint _2879 = _2675;
                        uint _2880;
                        vec4 _2905;
                        float _2906;
                        vec4 _2921;
                        vec3 _2933;
                        vec4 _2949;
                        vec4 _2965;
                        float _3012;
                        bool _3013;
                        for (;;)
                        {
                            uint _2890 = ((_2666 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2879));
                            _2880 = (_2879 + 4294967295u) & _2879;
                            uint _2892 = _2890 * 40u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            _2906 = _2905.w;
                            uint _2908 = (_2890 * 40u) + 4u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2923 = (_2890 * 40u) + 8u;
                            _2933 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x));
                            uint _2936 = (_2890 * 40u) + 16u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2952 = (_2890 * 40u) + 20u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2968 = (_2890 * 40u) + 24u;
                            vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2987 = (_2890 * 40u) + 28u;
                            vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            _3012 = fma(_2265, _3000.z, fma(_2264, _3000.y, _3000.x * _2263)) + _3000.w;
                            _3013 = !((fma(_2265, _2981.z, fma(_2264, _2981.y, _2981.x * _2263)) + _2981.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3013)
                            {
                                float _3040 = _2905.x - _2263;
                                float _3041 = _2905.y - _2264;
                                float _3042 = _2905.z - _2265;
                                float _3043 = dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042));
                                float _3046 = inversesqrt(_3043);
                                float _3047 = _3046 * _3040;
                                float _3048 = _3046 * _3041;
                                float _3049 = _3046 * _3042;
                                float _3053 = 1.0 - (_3043 / (_2906 * _2906));
                                float _4124 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3054 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                                float _3058 = sqrt(_3043) * _2921.w;
                                float _3060 = 1.39999997615814208984375 / (_3058 + 1.39999997615814208984375);
                                float _3061 = _3060 * _3060;
                                float _3064 = ((1.0 - _3061) * dot(vec3(_3047, _3048, _3049), vec3(_522, _525, _528))) + _3061;
                                float _3067 = _3058 * _3058;
                                float _3071 = (fma(_2265, _2949.z, fma(_2264, _2949.y, _2949.x * _2263)) + _2949.w) / _3012;
                                float _3072 = (fma(_2265, _2965.z, fma(_2264, _2965.y, _2965.x * _2263)) + _2965.w) / _3012;
                                float _3076 = 1.0 - dot(vec2(_3071, _3072), vec2(_3071, _3072));
                                float _4140 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3077 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3078 = _3077 * (((isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))) * _3054) / ((_3067 * 0.699999988079071044921875) + 1.0));
                                float _3090 = exp2(log2(1.0 / ((_3067 * 3.5) + 5.0)) * 0.25);
                                float _3091 = 1.0 - _598;
                                float _3098 = sqrt(1.0 - ((1.0 - (_3091 * _3091)) * (1.0 - (_3090 * _3090))));
                                float _3099 = _3098 * _3098;
                                float _3100 = _3099 * _3099;
                                float _3101 = _3047 - _2547;
                                float _3102 = _3048 - _2548;
                                float _3103 = _3049 - _2549;
                                float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                                float _3111 = dot(vec3(_522, _525, _528), vec3((-0.0) - _2547, (-0.0) - _2548, (-0.0) - _2549));
                                float _4151 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3114 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3115 = dot(vec3(_522, _525, _528), vec3(_3107 * _3101, _3107 * _3102, _3107 * _3103));
                                float _4162 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3118 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                                float _3122 = ((_3118 * _3118) * (_3100 + (-1.0))) + 1.0;
                                float _3123 = _3060 * _3099;
                                float _3124 = _3123 * _3123;
                                float _3130 = ((1.0 - _3124) * dot(vec3(_522, _525, _528), vec3(_3047, _3048, _3049))) + _3124;
                                float _4173 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3132 = 1.0 - _3099;
                                float _3142 = (0.5 / (((_3131 * ((_3114 * _3132) + _3099)) + 9.9999999392252902907785028219223e-09) + (((_3131 * _3132) + _3099) * _3114))) * _3131;
                                float _4184 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3152 = (_3077 * _3054) * (((_3100 * 3.1415927410125732421875) * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) / ((_3122 * _3122) * ((_3067 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3078 * _2921.z;
                                frontier_phi_75_pred_1 = _3078 * _2921.y;
                                frontier_phi_75_pred_2 = _3078 * _2921.x;
                                frontier_phi_75_pred_3 = _3152 * _2933.z;
                                frontier_phi_75_pred_4 = _3152 * _2933.y;
                                frontier_phi_75_pred_5 = _3152 * _2933.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3161 = frontier_phi_75_pred;
                            _3160 = frontier_phi_75_pred_1;
                            _3159 = frontier_phi_75_pred_2;
                            _3158 = frontier_phi_75_pred_3;
                            _3157 = frontier_phi_75_pred_4;
                            _3156 = frontier_phi_75_pred_5;
                            _2863 = _3159 + _2876;
                            _2864 = _3160 + _2877;
                            _2865 = _3161 + _2878;
                            _2860 = _3156 + _2873;
                            _2861 = _3157 + _2874;
                            _2862 = _3158 + _2875;
                            if (_2880 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2880;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2865;
                        frontier_phi_69_pred_1 = _2864;
                        frontier_phi_69_pred_2 = _2863;
                        frontier_phi_69_pred_3 = _2862;
                        frontier_phi_69_pred_4 = _2861;
                        frontier_phi_69_pred_5 = _2860;
                    }
                    _2532 = frontier_phi_69_pred;
                    _2530 = frontier_phi_69_pred_1;
                    _2528 = frontier_phi_69_pred_2;
                    _2526 = frontier_phi_69_pred_3;
                    _2524 = frontier_phi_69_pred_4;
                    _2522 = frontier_phi_69_pred_5;
                    uint _2667 = _2666 + 1u;
                    if (_2667 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2660 = _2522;
                        _2661 = _2524;
                        _2662 = _2526;
                        _2663 = _2528;
                        _2664 = _2530;
                        _2665 = _2532;
                        _2666 = _2667;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2532;
                frontier_phi_57_58_ladder_1 = _2530;
                frontier_phi_57_58_ladder_2 = _2528;
                frontier_phi_57_58_ladder_3 = _2526;
                frontier_phi_57_58_ladder_4 = _2524;
                frontier_phi_57_58_ladder_5 = _2522;
            }
            else
            {
                frontier_phi_57_58_ladder = _2419;
                frontier_phi_57_58_ladder_1 = _2417;
                frontier_phi_57_58_ladder_2 = _2415;
                frontier_phi_57_58_ladder_3 = _2413;
                frontier_phi_57_58_ladder_4 = _2411;
                frontier_phi_57_58_ladder_5 = _2409;
            }
            _2521 = frontier_phi_57_58_ladder_5;
            _2523 = frontier_phi_57_58_ladder_4;
            _2525 = frontier_phi_57_58_ladder_3;
            _2527 = frontier_phi_57_58_ladder_2;
            _2529 = frontier_phi_57_58_ladder_1;
            _2531 = frontier_phi_57_58_ladder;
        }
        float _2536 = isnan(1.0) ? _582 : (isnan(_582) ? 1.0 : min(_582, 1.0));
        _2321 = (_2536 * _2527) + _1758;
        _2323 = (_2536 * _2529) + _1760;
        _2325 = (_2536 * _2531) + _1762;
        _2327 = ((_2521 * _567) * _2536) + _2103;
        _2329 = ((_2523 * _569) * _2536) + _2105;
        _2331 = ((_2525 * _570) * _2536) + _2107;
    }
    else
    {
        _2321 = _1758;
        _2323 = _1760;
        _2325 = _1762;
        _2327 = _2103;
        _2329 = _2105;
        _2331 = _2107;
    }
    float _4200 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4211 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _4222 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    uint _2351 = _541 + 6u;
    float _2359 = _500 / cbSceneParam._m0[86u].x;
    float _2360 = _501 / cbSceneParam._m0[86u].y;
    vec4 _2374 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, (log2((isnan(cbSceneParam._m0[77u].w) ? _434 : (isnan(_434) ? cbSceneParam._m0[77u].w : min(_434, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2376 = _2374.x;
    float _2377 = _2374.y;
    float _2378 = _2374.z;
    float _2379 = _2374.w;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    if (_434 > cbSceneParam._m0[78u].w)
    {
        float _2434 = isnan(_434) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _434 : min(cbSceneParam._m0[80u].w, _434));
        float _2435 = _2434 / _434;
        float _2446 = _2435 * _485;
        float _2447 = _486 * _2435;
        float _2448 = (-0.0) - _2447;
        float _2449 = _2435 * _487;
        float _2451 = (cbSceneParam._m0[77u].w * _2448) / _2434;
        float _2452 = _2451 + cbSceneParam._m0[79u].w;
        float _2453 = cbSceneParam._m0[79u].w - _2447;
        float _2459 = sqrt(((_2446 * _2446) + (_2447 * _2447)) + (_2449 * _2449));
        float _2462 = (1.0 - (cbSceneParam._m0[77u].w / _2434)) * _2459;
        float _2467 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2469 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2622;
        if (abs((_2448 - _2451) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2622 = ((((_2452 > 0.0) ? exp2(_2467 * _2452) : (2.0 - exp2(_2469 * _2452))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2462;
        }
        else
        {
            float _2582 = 1.0 / cbSceneParam._m0[80u].x;
            float _2583 = isnan(_2453) ? _2452 : (isnan(_2452) ? _2453 : max(_2452, _2453));
            float _2584 = isnan(_2453) ? _2452 : (isnan(_2452) ? _2453 : min(_2452, _2453));
            float _2593 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : min(_2583, 0.0));
            float _2594 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : min(_2584, 0.0));
            _2622 = ((abs(_2459 / _2448) * cbSceneParam._m0[80u].y) * ((((_2593 - _2594) * 2.0) - ((exp2(_2467 * (isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0)))) - exp2(_2467 * (isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0))))) * _2582)) - ((exp2(_2469 * _2593) - exp2(_2469 * _2594)) * _2582))) + (_2462 * cbSceneParam._m0[80u].z);
        }
        vec4 _2624 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, 1.0), 0.0);
        float _2633 = exp2((_2622 * (-1.44269502162933349609375)) * (1.0 - _2624.w));
        float _2634 = log2(_2633);
        float _2650 = log2(_2379);
        _2471 = (exp2(_2650 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].x)) * _2624.x) / cbSceneParam._m0[78u].x)) + _2376;
        _2473 = (exp2(_2650 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].y)) * _2624.y) / cbSceneParam._m0[78u].y)) + _2377;
        _2475 = (exp2(_2650 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].z)) * _2624.z) / cbSceneParam._m0[78u].z)) + _2378;
        _2477 = _2633 * _2379;
    }
    else
    {
        _2471 = _2376;
        _2473 = _2377;
        _2475 = _2378;
        _2477 = _2379;
    }
    float _2489 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2490 = _2489 == 3.0;
    float _2491 = log2(_2477);
    float _2498 = exp2(_2491 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2321 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _582))) + ((_2327 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1392)) * cbPerFrame._m0[3u].x));
    float _2499 = exp2(_2491 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2323 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _582))) + ((_2329 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1392)) * cbPerFrame._m0[3u].x));
    float _2500 = exp2(_2491 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2325 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _582))) + ((_2331 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1392)) * cbPerFrame._m0[3u].x));
    float _2509 = (_2489 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2509 * (_2490 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.y = _2509 * (_2490 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2473)));
    SV_Target.z = _2509 * (_2490 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2475)));
    SV_Target.w = cbInstanceData._m0[_2351].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2351].w;
}


