#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1004;
float _3417;
float _3418;
float _3419;
float _3420;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _249 = _244.z;
    float _253 = (_244.x * 2.0) + (-1.0);
    float _255 = (_244.y * 2.0) + (-1.0);
    float _256 = dot(vec2(_253, _255), vec2(_253, _255));
    float _3429 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _262 = sqrt(1.0 - (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))));
    float _265 = fma(_262, _219, fma(_255, _212, _253 * _198));
    float _268 = fma(_262, _220, fma(_255, _213, _253 * _199));
    float _271 = fma(_262, _221, fma(_255, _214, _253 * _200));
    float _275 = inversesqrt(dot(vec3(_265, _268, _271), vec3(_265, _268, _271)));
    float _276 = _275 * _265;
    float _277 = _275 * _268;
    float _278 = _275 * _271;
    float _283 = cbMtdParam._m0[10u].x + dot(vec4(_276, _277, _278, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3440 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _291 = dot(vec4(_276, _277, _278, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _3451 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _293 = (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) + (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0)));
    vec4 _311 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _316 = _311.x * cbMtdParam._m0[9u].x;
    float _317 = _311.y * cbMtdParam._m0[9u].y;
    float _318 = _311.z * cbMtdParam._m0[9u].z;
    vec4 _330 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _341 = ((_330.x - _316) * _293) + _316;
    float _342 = ((_330.y - _317) * _293) + _317;
    float _343 = ((_330.z - _318) * _293) + _318;
    vec4 _355 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _357 = _355.x;
    float _359 = _357 - (_357 * _293);
    vec4 _372 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _379 = (_372.x * 2.0) + (-1.0);
    float _380 = (_372.y * 2.0) + (-1.0);
    float _381 = dot(vec2(_379, _380), vec2(_379, _380));
    float _3462 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _389 = ((_372.z - _249) * _293) + _249;
    float _398 = ((sqrt(1.0 - (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) - _262) * _293) + _262;
    float _402 = (((_379 - _253) * _293) + _253) + (cbMtdParam._m0[10u].y * _253);
    float _403 = (((_380 - _255) * _293) + _255) + (cbMtdParam._m0[10u].y * _255);
    float _406 = fma(_398, _219, fma(_403, _212, _402 * _198));
    float _409 = fma(_398, _220, fma(_403, _213, _402 * _199));
    float _412 = fma(_398, _221, fma(_403, _214, _402 * _200));
    float _416 = inversesqrt(dot(vec3(_406, _409, _412), vec3(_406, _409, _412)));
    float _417 = _416 * _406;
    float _418 = _416 * _409;
    float _419 = _416 * _412;
    float _3473 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _420 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _3484 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3495 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3506 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3517 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _424 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _440 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _481 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _491 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _481);
    float _492 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _481);
    float _493 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _481);
    float _497 = inversesqrt(dot(vec3(_491, _492, _493), vec3(_491, _492, _493)));
    float _498 = _491 * _497;
    float _499 = _492 * _497;
    float _500 = _493 * _497;
    vec4 _505 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _507 = _505.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _683 = sqrt(((_491 * _491) + (_492 * _492)) + (_493 * _493));
        float _689 = (cbMatDynParam._m0[5u].x * _683) + cbMatDynParam._m0[5u].y;
        float _3528 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _694 = (cbMatDynParam._m0[5u].z * _683) + cbMatDynParam._m0[5u].w;
        float _3539 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) - _690)) + _690) < ((_507 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _519 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _520 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _540 = fma(_419, cbSceneParam._m0[5u].z, fma(_418, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _417));
    float _543 = fma(_419, cbSceneParam._m0[6u].z, fma(_418, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _417));
    float _546 = fma(_419, cbSceneParam._m0[7u].z, fma(_418, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _417));
    uint _559 = uint(roundEven(NORMAL.w)) * 13u;
    uint _561 = _559 + 9u;
    uint _562 = _561 + uint(cbMatDynParam._m0[0u].w);
    float _568 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * cbInstanceData._m0[_562].x;
    float _569 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * cbInstanceData._m0[_562].y;
    float _570 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) * cbInstanceData._m0[_562].z;
    float _3550 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _574 = 1.0 - _424;
    float _575 = _571 * _574;
    float _576 = _572 * _574;
    float _577 = _573 * _574;
    float _582 = (_571 + (-0.039999999105930328369140625)) * _424;
    float _583 = (_572 + (-0.039999999105930328369140625)) * _424;
    float _584 = (_573 + (-0.039999999105930328369140625)) * _424;
    float _585 = _582 + 0.039999999105930328369140625;
    float _587 = _583 + 0.039999999105930328369140625;
    float _588 = _584 + 0.039999999105930328369140625;
    vec4 _597 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _519, cbSceneParam._m0[86u].y * _520));
    float _600 = _597.x * TEXCOORD.z;
    float _601 = dot(vec3(_417, _418, _419), vec3(_498, _499, _500));
    float _604 = _601 * 2.0;
    float _608 = (_604 * _417) - _498;
    float _609 = (_604 * _418) - _499;
    float _610 = (_604 * _419) - _500;
    float _614 = abs(dot(vec3(_498, _499, _500), vec3(_417, _418, _419)));
    float _3583 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _616 = sqrt(_420);
    float _629 = exp2((_616 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_616 * 3.0));
    float _635 = (1.0 - _629) * ((_616 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _636 = _629 * _616;
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1003;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _728 = fma(_672, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664));
        float _732 = fma(_672, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664));
        float _736 = fma(_672, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664));
        float _761 = _664 + _417;
        float _762 = _668 + _418;
        float _763 = _672 + _419;
        float _773 = fma(_763, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _761)) - _728;
        float _774 = fma(_763, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _761)) - _732;
        float _775 = fma(_763, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _761)) - _736;
        float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
        float _792 = ((_779 * _773) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_728 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _793 = ((_779 * _774) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_732 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_779 * _775) / cbModelParam._m0[34u].z) + ((((((_736 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        float _831 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_797.x + (-0.5));
        float _833 = _831 * (_797.y + (-0.5));
        float _834 = _831 * (_797.z + (-0.5));
        float _841 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_804.x + (-0.5));
        float _843 = _841 * (_804.y + (-0.5));
        float _844 = _841 * (_804.z + (-0.5));
        float _851 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_811.x + (-0.5));
        float _853 = _851 * (_811.y + (-0.5));
        float _854 = _851 * (_811.z + (-0.5));
        float _861 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_818.x + (-0.5));
        float _863 = _861 * (_818.y + (-0.5));
        float _864 = _861 * (_818.z + (-0.5));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = _832 * 0.5;
        float _869 = _842 * 0.5;
        float _870 = _852 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _885 = (dot(vec3(_417, _418, _419), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _895 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3631 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_897 + 1.0))) + _902) * _865;
        float _912 = _833 * 0.5;
        float _913 = _843 * 0.5;
        float _914 = _853 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_417, _418, _419), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3664 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_939 + 1.0))) + _944) * _866;
        float _954 = _834 * 0.5;
        float _955 = _844 * 0.5;
        float _956 = _854 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_417, _418, _419), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3697 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_981 + 1.0))) + _986) * _867;
        _1003 = _834;
        _1005 = _833;
        _1006 = _832;
        _1007 = _844;
        _1008 = _843;
        _1009 = _842;
        _1010 = _854;
        _1011 = _853;
        _1012 = _852;
        _1013 = _867;
        _1014 = _866;
        _1015 = _865;
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
    }
    else
    {
        _1003 = _1004;
        _1005 = _1004;
        _1006 = _1004;
        _1007 = _1004;
        _1008 = _1004;
        _1009 = _1004;
        _1010 = _1004;
        _1011 = _1004;
        _1012 = _1004;
        _1013 = _1004;
        _1014 = _1004;
        _1015 = _1004;
        _1016 = 0.0;
        _1017 = 0.0;
        _1018 = 0.0;
    }
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1047 = fma(_672, cbModelParam._m0[30u].z, fma(_668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _664));
        float _1051 = fma(_672, cbModelParam._m0[31u].z, fma(_668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _664));
        float _1055 = fma(_672, cbModelParam._m0[32u].z, fma(_668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _664));
        float _1078 = _664 + _417;
        float _1079 = _668 + _418;
        float _1080 = _672 + _419;
        float _1090 = fma(_1080, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1078)) - _1047;
        float _1091 = fma(_1080, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1078)) - _1051;
        float _1092 = fma(_1080, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1078)) - _1055;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1047 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1051 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[35u].z) + ((((((_1055 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1146 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1113.x + (-0.5));
        float _1148 = _1146 * (_1113.y + (-0.5));
        float _1149 = _1146 * (_1113.z + (-0.5));
        float _1156 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1120.x + (-0.5));
        float _1158 = _1156 * (_1120.y + (-0.5));
        float _1159 = _1156 * (_1120.z + (-0.5));
        float _1166 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1127.x + (-0.5));
        float _1168 = _1166 * (_1127.y + (-0.5));
        float _1169 = _1166 * (_1127.z + (-0.5));
        float _1176 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1134.x + (-0.5));
        float _1178 = _1176 * (_1134.y + (-0.5));
        float _1179 = _1176 * (_1134.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_417, _418, _419), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3760 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1210 + 1.0))) + _1215) * _1180;
        float _1225 = _1148 * 0.5;
        float _1226 = _1158 * 0.5;
        float _1227 = _1168 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_417, _418, _419), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3793 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1252 + 1.0))) + _1257) * _1181;
        float _1267 = _1149 * 0.5;
        float _1268 = _1159 * 0.5;
        float _1269 = _1169 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_417, _418, _419), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3826 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1294 + 1.0))) + _1299) * _1182;
        _1316 = _1149;
        _1317 = _1148;
        _1318 = _1147;
        _1319 = _1159;
        _1320 = _1158;
        _1321 = _1157;
        _1322 = _1169;
        _1323 = _1168;
        _1324 = _1167;
        _1325 = _1182;
        _1326 = _1181;
        _1327 = _1180;
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1004;
        _1317 = _1004;
        _1318 = _1004;
        _1319 = _1004;
        _1320 = _1004;
        _1321 = _1004;
        _1322 = _1004;
        _1323 = _1004;
        _1324 = _1004;
        _1325 = _1004;
        _1326 = _1004;
        _1327 = _1004;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1016)) + _1016;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1017)) + _1017;
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1018)) + _1018;
    float _1363 = fma(_1342, cbSceneParam._m0[89u].z, fma(_1341, cbSceneParam._m0[89u].y, _1340 * cbSceneParam._m0[89u].x));
    float _1366 = fma(_1342, cbSceneParam._m0[90u].z, fma(_1341, cbSceneParam._m0[90u].y, _1340 * cbSceneParam._m0[90u].x));
    float _1369 = fma(_1342, cbSceneParam._m0[91u].z, fma(_1341, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1340));
    float _1384 = _608 * 0.5;
    float _1385 = _609 * 0.5;
    float _1386 = _610 * 0.5;
    float _1387 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1390 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1393 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1427;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1400 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1003, _1007, _1010, _1013));
        float _1404 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1005, _1008, _1011, _1014));
        float _1408 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1415 = dot(vec4(cbModelParam._m0[39u]), vec4(_1384, _1385, _1386, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1415) ? 0.0 : (isnan(0.0) ? _1415 : max(0.0, _1415))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1438;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1429 = dot(vec4(cbModelParam._m0[40u]), vec4(_1384, _1385, _1386, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1442 = (_1438 * cbModelParam._m0[1u].x) + (_1427 * (1.0 - cbModelParam._m0[1u].x));
    float _1452 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _420);
    float _1453 = isnan(_1452) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1452 : min(cbModelParam._m0[25u].z, _1452));
    float _1535;
    float _1537;
    float _1539;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1502 = fma(_672, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664)) + cbModelParam._m0[13u].w;
        float _1506 = fma(_672, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664)) + cbModelParam._m0[14u].w;
        float _1510 = fma(_672, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664)) + cbModelParam._m0[15u].w;
        float _1513 = fma(_610, cbModelParam._m0[13u].z, fma(_609, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _608));
        float _1516 = fma(_610, cbModelParam._m0[14u].z, fma(_609, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _608));
        float _1519 = fma(_610, cbModelParam._m0[15u].z, fma(_609, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _608));
        float _1547;
        if (_1513 > 0.0)
        {
            _1547 = abs((1.0 - _1502) / _1513);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1502 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1547 = frontier_phi_19_17_ladder;
        }
        float _1774;
        if (_1516 > 0.0)
        {
            _1774 = abs((1.0 - _1506) / _1516);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1506 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1774 = frontier_phi_28_24_ladder;
        }
        float _2031;
        if (_1519 > 0.0)
        {
            _2031 = abs((1.0 - _1510) / _1519);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1510 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2031 = frontier_phi_40_35_ladder;
        }
        float _2033 = isnan(_1774) ? _1547 : (isnan(_1547) ? _1774 : min(_1547, _1774));
        float _2034 = isnan(_2031) ? _2033 : (isnan(_2033) ? _2031 : min(_2033, _2031));
        float _2038 = (_2034 * _1513) + _1502;
        float _2039 = (_2034 * _1516) + _1506;
        float _2040 = (_2034 * _1519) + _1510;
        float _2041 = _2034 * 9.9999997473787516355514526367188e-05;
        float _2043 = (-1.0) - _2041;
        float _2045 = _2041 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2040 > _2045) || ((_2040 < _2043) || ((_2039 > _2045) || ((_2039 < _2043) || ((_2038 < _2043) || (_2038 > _2045))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2168 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2040, cbModelParam._m0[9u].z, fma(_2039, cbModelParam._m0[9u].y, _2038 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2040, cbModelParam._m0[10u].z, fma(_2039, cbModelParam._m0[10u].y, _2038 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2040, cbModelParam._m0[11u].z, fma(_2039, cbModelParam._m0[11u].y, _2038 * cbModelParam._m0[11u].x))), _1453);
            frontier_phi_18_40_ladder = _2168.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2168.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2168.x * cbModelParam._m0[1u].y;
        }
        _1535 = frontier_phi_18_40_ladder_2;
        _1537 = frontier_phi_18_40_ladder_1;
        _1539 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_608, _609, _610), _1453);
        _1535 = _1523.x * cbModelParam._m0[1u].y;
        _1537 = _1523.y * cbModelParam._m0[1u].y;
        _1539 = _1523.z * cbModelParam._m0[1u].y;
    }
    float _1543 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _420);
    float _1544 = isnan(_1543) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1543 : min(cbModelParam._m0[25u].w, _1543));
    float _1637;
    float _1639;
    float _1641;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1601 = fma(_672, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664)) + cbModelParam._m0[21u].w;
        float _1605 = fma(_672, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664)) + cbModelParam._m0[22u].w;
        float _1609 = fma(_672, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664)) + cbModelParam._m0[23u].w;
        float _1612 = fma(_610, cbModelParam._m0[21u].z, fma(_609, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _608));
        float _1615 = fma(_610, cbModelParam._m0[22u].z, fma(_609, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _608));
        float _1618 = fma(_610, cbModelParam._m0[23u].z, fma(_609, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _608));
        float _1779;
        if (_1612 > 0.0)
        {
            _1779 = abs((1.0 - _1601) / _1612);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1601 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1779 = frontier_phi_30_26_ladder;
        }
        float _2058;
        if (_1615 > 0.0)
        {
            _2058 = abs((1.0 - _1605) / _1615);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1605 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2058 = frontier_phi_42_37_ladder;
        }
        float _2271;
        if (_1618 > 0.0)
        {
            _2271 = abs((1.0 - _1609) / _1618);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1609 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2271 = frontier_phi_51_48_ladder;
        }
        float _2273 = isnan(_2058) ? _1779 : (isnan(_1779) ? _2058 : min(_1779, _2058));
        float _2274 = isnan(_2271) ? _2273 : (isnan(_2273) ? _2271 : min(_2273, _2271));
        float _2278 = (_2274 * _1612) + _1601;
        float _2279 = (_2274 * _1615) + _1605;
        float _2280 = (_2274 * _1618) + _1609;
        float _2281 = _2274 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2281;
        float _2284 = _2281 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2280 > _2284) || ((_2280 < _2282) || ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 < _2282) || (_2278 > _2284))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2478 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2280, cbModelParam._m0[17u].z, fma(_2279, cbModelParam._m0[17u].y, _2278 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2280, cbModelParam._m0[18u].z, fma(_2279, cbModelParam._m0[18u].y, _2278 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2280, cbModelParam._m0[19u].z, fma(_2279, cbModelParam._m0[19u].y, _2278 * cbModelParam._m0[19u].x))), _1544);
            frontier_phi_27_51_ladder = _2478.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2478.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2478.x * cbModelParam._m0[1u].z;
        }
        _1637 = frontier_phi_27_51_ladder_2;
        _1639 = frontier_phi_27_51_ladder_1;
        _1641 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_608, _609, _610), _1544);
        _1637 = _1621.x * cbModelParam._m0[1u].z;
        _1639 = _1621.y * cbModelParam._m0[1u].z;
        _1641 = _1621.z * cbModelParam._m0[1u].z;
    }
    float _1654 = (((_635 * _585) + _636) * _600) * ((cbModelParam._m0[1u].w * (_1637 - _1535)) + _1535);
    float _1656 = (((_635 * _587) + _636) * _600) * ((cbModelParam._m0[1u].w * (_1639 - _1537)) + _1537);
    float _1658 = (((_635 * _588) + _636) * _600) * ((cbModelParam._m0[1u].w * (_1641 - _1539)) + _1539);
    float _1661 = fma(_1658, cbSceneParam._m0[89u].z, fma(_1656, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1658, cbSceneParam._m0[90u].z, fma(_1656, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1658, cbSceneParam._m0[91u].z, fma(_1656, cbSceneParam._m0[91u].y, _1654 * cbSceneParam._m0[91u].x));
    vec4 _1675 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_519, _520));
    float _1677 = _1675.w;
    float _1689 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1677);
    float _1690 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1677);
    float _1691 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1677);
    uvec4 _1695 = floatBitsToUint(cbInstanceData._m0[_559 + 5u]);
    uint _1697 = _1695.x * 14u;
    uint _1698 = _1697 + 13u;
    float _1705 = _600 + (-1.0);
    float _1710 = (cbLight._m0[_1698].x * _1705) + 1.0;
    float _1711 = (cbLight._m0[_1698].y * _1705) + 1.0;
    float _1712 = (cbLight._m0[_1698].z * _1705) + 1.0;
    float _1713 = (cbLight._m0[_1698].w * _1705) + 1.0;
    uint _1714 = _1697 + 5u;
    float _1720 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
    uint _1724 = _1697 + 4u;
    float _1733 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
    uint _1737 = _1697 | 1u;
    float _1748 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_417, _418, _419));
    float _1751 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_417, _418, _419));
    float _3962 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _3973 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1756 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.3183098733425140380859375;
    float _1758 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.3183098733425140380859375;
    float _1765 = ((cbLight._m0[_1714].x * _1720) * _1758) + (((cbLight._m0[_1724].x * _1689) * _1733) * _1756);
    float _1766 = ((_1720 * cbLight._m0[_1714].y) * _1758) + (((cbLight._m0[_1724].y * _1690) * _1733) * _1756);
    float _1767 = ((_1720 * cbLight._m0[_1714].z) * _1758) + (((cbLight._m0[_1724].z * _1691) * _1733) * _1756);
    uvec4 _1771 = floatBitsToUint(cbLight._m0[_1697 + 12u]);
    bool _1773 = _1771.x == 0u;
    float _1784;
    float _1786;
    float _1788;
    if (_1773)
    {
        _1784 = _1765;
        _1786 = _1766;
        _1788 = _1767;
    }
    else
    {
        uint _1792 = _1697 + 6u;
        float _1808 = (dot(vec3(cbLight._m0[_1697 + 2u].xyz), vec3(_417, _418, _419)) * 0.5) + 0.5;
        float _1809 = _1808 * _1808;
        float _3984 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1811 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
        _1784 = (((cbLight._m0[_1792].x * 0.3183098733425140380859375) * _1810) * _1811) + _1765;
        _1786 = (((cbLight._m0[_1792].y * 0.3183098733425140380859375) * _1810) * _1811) + _1766;
        _1788 = (((cbLight._m0[_1792].z * 0.3183098733425140380859375) * _1810) * _1811) + _1767;
    }
    bool _1791 = _1771.y == 0u;
    float _1829;
    float _1831;
    float _1833;
    if (_1791)
    {
        _1829 = _1784;
        _1831 = _1786;
        _1833 = _1788;
    }
    else
    {
        uint _2002 = _1697 + 7u;
        float _2018 = (dot(vec3(cbLight._m0[_1697 + 3u].xyz), vec3(_417, _418, _419)) * 0.5) + 0.5;
        float _2019 = _2018 * _2018;
        float _4000 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2021 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
        _1829 = (((cbLight._m0[_2002].x * 0.3183098733425140380859375) * _2020) * _2021) + _1784;
        _1831 = (((cbLight._m0[_2002].y * 0.3183098733425140380859375) * _2020) * _2021) + _1786;
        _1833 = (((cbLight._m0[_2002].z * 0.3183098733425140380859375) * _2020) * _2021) + _1788;
    }
    uint _1836 = _1697 + 8u;
    float _1849 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1697].w)) * _420) * 0.949999988079071044921875);
    float _1850 = _1849 * _1849;
    float _1851 = cbLight._m0[_1697].x + _498;
    float _1852 = cbLight._m0[_1697].y + _499;
    float _1853 = cbLight._m0[_1697].z + _500;
    float _1857 = inversesqrt(dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853)));
    float _1858 = _1857 * _1851;
    float _1859 = _1857 * _1852;
    float _1860 = _1857 * _1853;
    float _1861 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_1697].xyz));
    float _4016 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1864 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _1865 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1866 = dot(vec3(_417, _418, _419), vec3(_1858, _1859, _1860));
    float _4038 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1870 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_1858, _1859, _1860));
    float _4049 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1874 = _1850 * _1850;
    float _1878 = ((_1869 * _1869) * (_1874 + (-1.0))) + 1.0;
    float _1886 = exp2(log2(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * 5.0);
    float _1887 = 0.959999978542327880859375 - _582;
    float _1889 = 0.959999978542327880859375 - _583;
    float _1890 = 0.959999978542327880859375 - _584;
    float _1897 = 1.0 - _1850;
    float _1908 = (0.5 / (((_1865 * ((_1864 * _1897) + _1850)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _1897) + _1850) * _1864))) * _1864;
    float _4060 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1910 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1874 / ((_1878 * _1878) * 3.141590118408203125));
    uint _1924 = _1697 + 9u;
    float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1737].w)) * _420) * 0.949999988079071044921875);
    float _1936 = _1935 * _1935;
    float _1937 = cbLight._m0[_1737].x + _498;
    float _1938 = cbLight._m0[_1737].y + _499;
    float _1939 = cbLight._m0[_1737].z + _500;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1944 = _1943 * _1937;
    float _1945 = _1943 * _1938;
    float _1946 = _1943 * _1939;
    float _1947 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_1737].xyz));
    float _4071 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1951 = dot(vec3(_417, _418, _419), vec3(_1944, _1945, _1946));
    float _4082 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1955 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_1944, _1945, _1946));
    float _4093 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1959 = _1936 * _1936;
    float _1963 = ((_1954 * _1954) * (_1959 + (-1.0))) + 1.0;
    float _1970 = exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0);
    float _1977 = 1.0 - _1936;
    float _1987 = (0.5 / (((_1865 * ((_1950 * _1977) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _1977) + _1936) * _1950))) * _1950;
    float _4104 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1959 / ((_1963 * _1963) * 3.141590118408203125));
    float _1999 = (((((_1970 * _1887) + _585) * cbLight._m0[_1924].x) * _1989) * _1720) + ((((cbLight._m0[_1836].x * _1689) * ((_1886 * _1887) + _585)) * _1910) * _1733);
    float _2000 = (((((_1970 * _1889) + _587) * cbLight._m0[_1924].y) * _1989) * _1720) + ((((cbLight._m0[_1836].y * _1690) * ((_1886 * _1889) + _587)) * _1910) * _1733);
    float _2001 = (((((_1970 * _1890) + _588) * cbLight._m0[_1924].z) * _1989) * _1720) + ((((cbLight._m0[_1836].z * _1691) * ((_1886 * _1890) + _588)) * _1910) * _1733);
    float _2063;
    float _2065;
    float _2067;
    if (_1773)
    {
        _2063 = _1999;
        _2065 = _2000;
        _2067 = _2001;
    }
    else
    {
        uint _2069 = _1697 + 2u;
        uint _2073 = _1697 + 10u;
        float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _420) * 0.949999988079071044921875);
        float _2088 = _2087 * _2087;
        float _2089 = cbLight._m0[_2069].x + _498;
        float _2090 = cbLight._m0[_2069].y + _499;
        float _2091 = cbLight._m0[_2069].z + _500;
        float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
        float _2096 = _2095 * _2089;
        float _2097 = _2095 * _2090;
        float _2098 = _2095 * _2091;
        float _2099 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_2069].xyz));
        float _4115 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2103 = dot(vec3(_417, _418, _419), vec3(_2096, _2097, _2098));
        float _4126 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2107 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2096, _2097, _2098));
        float _4137 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2111 = _2088 * _2088;
        float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
        float _2122 = exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0);
        float _2129 = 1.0 - _2088;
        float _2139 = (0.5 / (((_1865 * ((_2102 * _2129) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _2129) + _2088) * _2102))) * _2102;
        float _4148 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2141 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
        float _2142 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
        _2063 = (((((_2122 * _1887) + _585) * cbLight._m0[_2073].x) * _2141) * _2142) + _1999;
        _2065 = (((((_2122 * _1889) + _587) * cbLight._m0[_2073].y) * _2141) * _2142) + _2000;
        _2067 = (((((_2122 * _1890) + _588) * cbLight._m0[_2073].z) * _2141) * _2142) + _2001;
    }
    float _2177;
    float _2179;
    float _2181;
    if (_1791)
    {
        _2177 = _2063;
        _2179 = _2065;
        _2181 = _2067;
    }
    else
    {
        uint _2188 = _1697 + 3u;
        uint _2192 = _1697 + 11u;
        float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _420) * 0.949999988079071044921875);
        float _2207 = _2206 * _2206;
        float _2208 = cbLight._m0[_2188].x + _498;
        float _2209 = cbLight._m0[_2188].y + _499;
        float _2210 = cbLight._m0[_2188].z + _500;
        float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
        float _2215 = _2214 * _2208;
        float _2216 = _2214 * _2209;
        float _2217 = _2214 * _2210;
        float _2218 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_2188].xyz));
        float _4164 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2222 = dot(vec3(_417, _418, _419), vec3(_2215, _2216, _2217));
        float _4175 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2225 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2226 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2215, _2216, _2217));
        float _4186 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2230 = _2207 * _2207;
        float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
        float _2241 = exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0);
        float _2248 = 1.0 - _2207;
        float _2258 = (0.5 / (((_1865 * ((_2221 * _2248) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _2248) + _2207) * _2221))) * _2221;
        float _4197 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2260 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
        float _2261 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
        _2177 = (((((_2241 * _1887) + _585) * cbLight._m0[_2192].x) * _2260) * _2261) + _2063;
        _2179 = (((((_2241 * _1889) + _587) * cbLight._m0[_2192].y) * _2260) * _2261) + _2065;
        _2181 = (((((_2241 * _1890) + _588) * cbLight._m0[_2192].z) * _2260) * _2261) + _2067;
    }
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    if (_1695.y == 0u)
    {
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2336;
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2336;
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2336;
        uvec4 _2351 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2352 = _2351.x;
        uint _2363 = uint((float(_2351.y) * floor(float(uint(cbSceneParam._m0[85u].y * _520) / _2352))) + floor(float(uint(cbSceneParam._m0[85u].x * _519) / _2352)));
        float _2373 = (log2(_2339 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2374 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        uint _2377 = uint(isnan(14.0) ? _2374 : (isnan(_2374) ? 14.0 : min(_2374, 14.0)));
        uvec4 _2382 = texelFetch(g_lightClusterGridBuffer, int(((_2377 << 2u) + (_2363 << 6u)) >> 2u));
        uint _2383 = _2382.x;
        uint _2384 = _2351.z;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        if (((((1u << ((_2384 >> 4u) & 15u)) + 4294967295u) & _2383) == 0u) || ((_2384 & 240u) == 0u))
        {
            _2483 = 0.0;
            _2485 = 0.0;
            _2487 = 0.0;
            _2489 = 0.0;
            _2491 = 0.0;
            _2493 = 0.0;
        }
        else
        {
            float _2484;
            float _2486;
            float _2488;
            float _2490;
            float _2492;
            float _2494;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            uint _2641 = 0u;
            uint _2650;
            bool _2651;
            for (;;)
            {
                _2650 = texelFetch(g_lightClassification, int((((_2377 << 5u) + (_2363 << 9u)) + (_2641 << 2u)) >> 2u)).x;
                _2651 = _2650 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2651)
                {
                    frontier_phi_68_pred = _2637;
                    frontier_phi_68_pred_1 = _2640;
                    frontier_phi_68_pred_2 = _2639;
                    frontier_phi_68_pred_3 = _2638;
                    frontier_phi_68_pred_4 = _2636;
                    frontier_phi_68_pred_5 = _2635;
                }
                else
                {
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    uint _2786;
                    _2780 = _2635;
                    _2781 = _2636;
                    _2782 = _2637;
                    _2783 = _2638;
                    _2784 = _2639;
                    _2785 = _2640;
                    _2786 = _2650;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    for (;;)
                    {
                        uint _2790 = uint(findLSB(_2786)) + (_2641 << 5u);
                        uint _2787 = (_2786 + 4294967295u) & _2786;
                        uint _2792 = _2790 * 48u;
                        vec4 _2806 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        uint _2812 = (_2790 * 48u) + 4u;
                        vec4 _2825 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 3u)).x));
                        uint _2831 = (_2790 * 48u) + 8u;
                        vec3 _2842 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x));
                        float _2846 = _2806.x - _2337;
                        float _2847 = _2806.y - _2338;
                        float _2848 = _2806.z - _2339;
                        float _2849 = dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848));
                        float _2852 = inversesqrt(_2849);
                        float _2853 = _2852 * _2846;
                        float _2854 = _2852 * _2847;
                        float _2855 = _2852 * _2848;
                        float _2856 = dot(vec3(_540, _543, _546), vec3(_2853, _2854, _2855));
                        float _2861 = 1.0 - (_2849 * _2806.w);
                        float _4223 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2862 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2863 = sqrt(_2849) * _2825.w;
                        float _2866 = 1.39999997615814208984375 / (_2863 + 1.39999997615814208984375);
                        float _2867 = _2866 * _2866;
                        float _2870 = ((1.0 - _2867) * _2856) + _2867;
                        float _2873 = _2863 * _2863;
                        float _2877 = ((isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0))) * _2862) / ((_2873 * 0.699999988079071044921875) + 1.0);
                        float _2881 = (-0.0) - _2337;
                        float _2882 = (-0.0) - _2338;
                        float _2883 = (-0.0) - _2339;
                        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
                        float _2888 = _2887 * _2881;
                        float _2889 = _2887 * _2882;
                        float _2890 = _2887 * _2883;
                        float _2898 = exp2(log2(1.0 / ((_2873 * 3.5) + 5.0)) * 0.25);
                        float _2899 = 1.0 - _616;
                        float _2906 = sqrt(1.0 - ((1.0 - (_2899 * _2899)) * (1.0 - (_2898 * _2898))));
                        float _2907 = _2906 * _2906;
                        float _2908 = _2907 * _2907;
                        float _2909 = _2888 + _2853;
                        float _2910 = _2889 + _2854;
                        float _2911 = _2890 + _2855;
                        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
                        float _2919 = dot(vec3(_540, _543, _546), vec3(_2888, _2889, _2890));
                        float _4239 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2922 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _2923 = dot(vec3(_540, _543, _546), vec3(_2915 * _2909, _2915 * _2910, _2915 * _2911));
                        float _4250 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2926 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                        float _2930 = ((_2926 * _2926) * (_2908 + (-1.0))) + 1.0;
                        float _2931 = _2866 * _2907;
                        float _2932 = _2931 * _2931;
                        float _2935 = ((1.0 - _2932) * _2856) + _2932;
                        float _4261 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2936 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _2937 = 1.0 - _2907;
                        float _2947 = (0.5 / (((_2936 * ((_2922 * _2937) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2936 * _2937) + _2907) * _2922))) * _2936;
                        float _4272 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2958 = (((_2908 * 3.1415927410125732421875) * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) / ((_2930 * _2930) * ((_2873 * 2.1991131305694580078125) + 3.141590118408203125))) * _2862;
                        _2710 = (_2877 * _2825.x) + _2783;
                        _2711 = (_2877 * _2825.y) + _2784;
                        _2712 = (_2877 * _2825.z) + _2785;
                        _2707 = (_2958 * _2842.x) + _2780;
                        _2708 = (_2958 * _2842.y) + _2781;
                        _2709 = (_2958 * _2842.z) + _2782;
                        if (_2787 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2780 = _2707;
                            _2781 = _2708;
                            _2782 = _2709;
                            _2783 = _2710;
                            _2784 = _2711;
                            _2785 = _2712;
                            _2786 = _2787;
                        }
                    }
                    frontier_phi_68_pred = _2709;
                    frontier_phi_68_pred_1 = _2712;
                    frontier_phi_68_pred_2 = _2711;
                    frontier_phi_68_pred_3 = _2710;
                    frontier_phi_68_pred_4 = _2708;
                    frontier_phi_68_pred_5 = _2707;
                }
                _2488 = frontier_phi_68_pred;
                _2494 = frontier_phi_68_pred_1;
                _2492 = frontier_phi_68_pred_2;
                _2490 = frontier_phi_68_pred_3;
                _2486 = frontier_phi_68_pred_4;
                _2484 = frontier_phi_68_pred_5;
                uint _2642 = _2641 + 1u;
                if (_2642 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2635 = _2484;
                    _2636 = _2486;
                    _2637 = _2488;
                    _2638 = _2490;
                    _2639 = _2492;
                    _2640 = _2494;
                    _2641 = _2642;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2483 = _2484;
            _2485 = _2486;
            _2487 = _2488;
            _2489 = _2490;
            _2491 = _2492;
            _2493 = _2494;
        }
        uvec4 _2497 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2498 = _2497.z;
        uint _2500 = (_2498 >> 8u) & 15u;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        if (((4294967295u << _2500) & _2383) == 0u)
        {
            _2603 = _2483;
            _2605 = _2485;
            _2607 = _2487;
            _2609 = _2489;
            _2611 = _2491;
            _2613 = _2493;
        }
        else
        {
            float _2628 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
            float _2629 = _2628 * _2337;
            float _2630 = _2628 * _2338;
            float _2631 = _2628 * _2339;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2500 < ((_2498 >> 12u) & 15u))
            {
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2614;
                float _2763 = _2483;
                float _2764 = _2485;
                float _2765 = _2487;
                float _2766 = _2489;
                float _2767 = _2491;
                float _2768 = _2493;
                uint _2769 = _2500;
                uint _2778;
                bool _2779;
                for (;;)
                {
                    _2778 = texelFetch(g_lightClassification, int((((_2377 << 5u) + (_2363 << 9u)) + (_2769 << 2u)) >> 2u)).x;
                    _2779 = _2778 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2779)
                    {
                        frontier_phi_79_pred = _2768;
                        frontier_phi_79_pred_1 = _2767;
                        frontier_phi_79_pred_2 = _2766;
                        frontier_phi_79_pred_3 = _2765;
                        frontier_phi_79_pred_4 = _2764;
                        frontier_phi_79_pred_5 = _2763;
                    }
                    else
                    {
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _2976;
                        float _2977;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _2985 = _2763;
                        float _2986 = _2764;
                        float _2987 = _2765;
                        float _2988 = _2766;
                        float _2989 = _2767;
                        float _2990 = _2768;
                        uint _2991 = _2778;
                        uint _2992;
                        vec4 _3017;
                        float _3018;
                        vec4 _3033;
                        vec3 _3045;
                        vec4 _3061;
                        vec4 _3077;
                        float _3124;
                        bool _3125;
                        for (;;)
                        {
                            uint _3002 = ((_2769 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2991));
                            _2992 = (_2991 + 4294967295u) & _2991;
                            uint _3004 = _3002 * 40u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            _3018 = _3017.w;
                            uint _3020 = (_3002 * 40u) + 4u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3035 = (_3002 * 40u) + 8u;
                            _3045 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x));
                            uint _3048 = (_3002 * 40u) + 16u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3064 = (_3002 * 40u) + 20u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3080 = (_3002 * 40u) + 24u;
                            vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3099 = (_3002 * 40u) + 28u;
                            vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            _3124 = fma(_2339, _3112.z, fma(_2338, _3112.y, _3112.x * _2337)) + _3112.w;
                            _3125 = !((fma(_2339, _3093.z, fma(_2338, _3093.y, _3093.x * _2337)) + _3093.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3125)
                            {
                                float _3152 = _3017.x - _2337;
                                float _3153 = _3017.y - _2338;
                                float _3154 = _3017.z - _2339;
                                float _3155 = dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154));
                                float _3158 = inversesqrt(_3155);
                                float _3159 = _3158 * _3152;
                                float _3160 = _3158 * _3153;
                                float _3161 = _3158 * _3154;
                                float _3165 = 1.0 - (_3155 / (_3018 * _3018));
                                float _4283 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3166 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3170 = sqrt(_3155) * _3033.w;
                                float _3172 = 1.39999997615814208984375 / (_3170 + 1.39999997615814208984375);
                                float _3173 = _3172 * _3172;
                                float _3176 = ((1.0 - _3173) * dot(vec3(_3159, _3160, _3161), vec3(_540, _543, _546))) + _3173;
                                float _3179 = _3170 * _3170;
                                float _3183 = (fma(_2339, _3061.z, fma(_2338, _3061.y, _3061.x * _2337)) + _3061.w) / _3124;
                                float _3184 = (fma(_2339, _3077.z, fma(_2338, _3077.y, _3077.x * _2337)) + _3077.w) / _3124;
                                float _3188 = 1.0 - dot(vec2(_3183, _3184), vec2(_3183, _3184));
                                float _4299 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3190 = _3189 * (((isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))) * _3166) / ((_3179 * 0.699999988079071044921875) + 1.0));
                                float _3202 = exp2(log2(1.0 / ((_3179 * 3.5) + 5.0)) * 0.25);
                                float _3203 = 1.0 - _616;
                                float _3210 = sqrt(1.0 - ((1.0 - (_3203 * _3203)) * (1.0 - (_3202 * _3202))));
                                float _3211 = _3210 * _3210;
                                float _3212 = _3211 * _3211;
                                float _3213 = _3159 - _2629;
                                float _3214 = _3160 - _2630;
                                float _3215 = _3161 - _2631;
                                float _3219 = inversesqrt(dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215)));
                                float _3223 = dot(vec3(_540, _543, _546), vec3((-0.0) - _2629, (-0.0) - _2630, (-0.0) - _2631));
                                float _4310 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3226 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3227 = dot(vec3(_540, _543, _546), vec3(_3219 * _3213, _3219 * _3214, _3219 * _3215));
                                float _4321 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3230 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3234 = ((_3230 * _3230) * (_3212 + (-1.0))) + 1.0;
                                float _3235 = _3172 * _3211;
                                float _3236 = _3235 * _3235;
                                float _3242 = ((1.0 - _3236) * dot(vec3(_540, _543, _546), vec3(_3159, _3160, _3161))) + _3236;
                                float _4332 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3244 = 1.0 - _3211;
                                float _3254 = (0.5 / (((_3243 * ((_3226 * _3244) + _3211)) + 9.9999999392252902907785028219223e-09) + (((_3243 * _3244) + _3211) * _3226))) * _3243;
                                float _4343 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3264 = (_3189 * _3166) * (((_3212 * 3.1415927410125732421875) * (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) / ((_3234 * _3234) * ((_3179 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3190 * _3033.z;
                                frontier_phi_85_pred_1 = _3190 * _3033.y;
                                frontier_phi_85_pred_2 = _3190 * _3033.x;
                                frontier_phi_85_pred_3 = _3264 * _3045.z;
                                frontier_phi_85_pred_4 = _3264 * _3045.y;
                                frontier_phi_85_pred_5 = _3264 * _3045.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3273 = frontier_phi_85_pred;
                            _3272 = frontier_phi_85_pred_1;
                            _3271 = frontier_phi_85_pred_2;
                            _3270 = frontier_phi_85_pred_3;
                            _3269 = frontier_phi_85_pred_4;
                            _3268 = frontier_phi_85_pred_5;
                            _2975 = _3271 + _2988;
                            _2976 = _3272 + _2989;
                            _2977 = _3273 + _2990;
                            _2972 = _3268 + _2985;
                            _2973 = _3269 + _2986;
                            _2974 = _3270 + _2987;
                            if (_2992 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2992;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2977;
                        frontier_phi_79_pred_1 = _2976;
                        frontier_phi_79_pred_2 = _2975;
                        frontier_phi_79_pred_3 = _2974;
                        frontier_phi_79_pred_4 = _2973;
                        frontier_phi_79_pred_5 = _2972;
                    }
                    _2614 = frontier_phi_79_pred;
                    _2612 = frontier_phi_79_pred_1;
                    _2610 = frontier_phi_79_pred_2;
                    _2608 = frontier_phi_79_pred_3;
                    _2606 = frontier_phi_79_pred_4;
                    _2604 = frontier_phi_79_pred_5;
                    uint _2770 = _2769 + 1u;
                    if (_2770 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2763 = _2604;
                        _2764 = _2606;
                        _2765 = _2608;
                        _2766 = _2610;
                        _2767 = _2612;
                        _2768 = _2614;
                        _2769 = _2770;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2610;
                frontier_phi_60_61_ladder_1 = _2614;
                frontier_phi_60_61_ladder_2 = _2612;
                frontier_phi_60_61_ladder_3 = _2608;
                frontier_phi_60_61_ladder_4 = _2606;
                frontier_phi_60_61_ladder_5 = _2604;
            }
            else
            {
                frontier_phi_60_61_ladder = _2489;
                frontier_phi_60_61_ladder_1 = _2493;
                frontier_phi_60_61_ladder_2 = _2491;
                frontier_phi_60_61_ladder_3 = _2487;
                frontier_phi_60_61_ladder_4 = _2485;
                frontier_phi_60_61_ladder_5 = _2483;
            }
            _2603 = frontier_phi_60_61_ladder_5;
            _2605 = frontier_phi_60_61_ladder_4;
            _2607 = frontier_phi_60_61_ladder_3;
            _2609 = frontier_phi_60_61_ladder;
            _2611 = frontier_phi_60_61_ladder_2;
            _2613 = frontier_phi_60_61_ladder_1;
        }
        float _2618 = isnan(1.0) ? _600 : (isnan(_600) ? 1.0 : min(_600, 1.0));
        _2395 = (_2618 * _2609) + _1829;
        _2397 = (_2618 * _2611) + _1831;
        _2399 = (_2618 * _2613) + _1833;
        _2401 = ((_2603 * _585) * _2618) + _2177;
        _2403 = ((_2605 * _587) * _2618) + _2179;
        _2405 = ((_2607 * _588) * _2618) + _2181;
    }
    else
    {
        _2395 = _1829;
        _2397 = _1831;
        _2399 = _1833;
        _2401 = _2177;
        _2403 = _2179;
        _2405 = _2181;
    }
    float _4359 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4370 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4381 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _2422 = ((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2395 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _600))) + ((_2401 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    float _2423 = ((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2397 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _600))) + ((_2403 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    float _2424 = ((isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2399 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _600))) + ((_2405 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    uint _2425 = _559 + 6u;
    float _2433 = _519 / cbSceneParam._m0[86u].x;
    float _2434 = _520 / cbSceneParam._m0[86u].y;
    vec4 _2448 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2433, _2434, (log2((isnan(cbSceneParam._m0[77u].w) ? _440 : (isnan(_440) ? cbSceneParam._m0[77u].w : min(_440, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2450 = _2448.x;
    float _2451 = _2448.y;
    float _2452 = _2448.z;
    float _2453 = _2448.w;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    if (_440 > cbSceneParam._m0[78u].w)
    {
        float _2508 = isnan(_440) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _440 : min(cbSceneParam._m0[80u].w, _440));
        float _2509 = _2508 / _440;
        float _2520 = _2509 * _491;
        float _2521 = _492 * _2509;
        float _2522 = (-0.0) - _2521;
        float _2523 = _2509 * _493;
        float _2525 = (cbSceneParam._m0[77u].w * _2522) / _2508;
        float _2526 = _2525 + cbSceneParam._m0[79u].w;
        float _2527 = cbSceneParam._m0[79u].w - _2521;
        float _2533 = sqrt(((_2520 * _2520) + (_2521 * _2521)) + (_2523 * _2523));
        float _2536 = (1.0 - (cbSceneParam._m0[77u].w / _2508)) * _2533;
        float _2541 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2543 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2720;
        if (abs((_2522 - _2525) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2720 = ((((_2526 > 0.0) ? exp2(_2541 * _2526) : (2.0 - exp2(_2543 * _2526))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2536;
        }
        else
        {
            float _2664 = 1.0 / cbSceneParam._m0[80u].x;
            float _2665 = isnan(_2527) ? _2526 : (isnan(_2526) ? _2527 : max(_2526, _2527));
            float _2666 = isnan(_2527) ? _2526 : (isnan(_2526) ? _2527 : min(_2526, _2527));
            float _2675 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : min(_2665, 0.0));
            float _2676 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : min(_2666, 0.0));
            _2720 = ((abs(_2533 / _2522) * cbSceneParam._m0[80u].y) * ((((_2675 - _2676) * 2.0) - ((exp2(_2541 * (isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0)))) - exp2(_2541 * (isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0))))) * _2664)) - ((exp2(_2543 * _2675) - exp2(_2543 * _2676)) * _2664))) + (_2536 * cbSceneParam._m0[80u].z);
        }
        vec4 _2722 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2433, _2434, 1.0), 0.0);
        float _2731 = exp2((_2720 * (-1.44269502162933349609375)) * (1.0 - _2722.w));
        float _2732 = log2(_2731);
        float _2748 = log2(_2453);
        _2545 = (exp2(_2748 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].x)) * _2722.x) / cbSceneParam._m0[78u].x)) + _2450;
        _2547 = (exp2(_2748 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].y)) * _2722.y) / cbSceneParam._m0[78u].y)) + _2451;
        _2549 = (exp2(_2748 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].z)) * _2722.z) / cbSceneParam._m0[78u].z)) + _2452;
        _2551 = _2731 * _2453;
    }
    else
    {
        _2545 = _2450;
        _2547 = _2451;
        _2549 = _2452;
        _2551 = _2453;
    }
    bool _2758;
    vec4 _2561;
    vec4 _2583;
    float _2585;
    float _2589;
    float _2590;
    float _2591;
    float _2592;
    bool _2602;
    for (;;)
    {
        _2561 = cbMatDynParam._m0[0u];
        float _2563 = roundEven(_2561.y);
        bool _2564 = _2563 == 3.0;
        float _2565 = log2(_2551);
        float _2572 = exp2(_2565 * cbSceneParam._m0[78u].x) * _2422;
        float _2573 = exp2(_2565 * cbSceneParam._m0[78u].y) * _2423;
        float _2574 = exp2(_2565 * cbSceneParam._m0[78u].z) * _2424;
        float _2581 = _507 + (-0.5);
        _2583 = cbMtdParam._m0[1u];
        _2585 = _2583.y * _2581;
        float _2588 = (_2563 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2589 = _2588 * (_2564 ? _2572 : (_2572 + (cbSceneParam._m0[72u].w * _2545)));
        _2590 = _2588 * (_2564 ? _2573 : (_2573 + (cbSceneParam._m0[72u].w * _2547)));
        _2591 = _2588 * (_2564 ? _2574 : (_2574 + (cbSceneParam._m0[72u].w * _2549)));
        _2592 = _2581 * 0.999000012874603271484375;
        _2602 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2602)
        {
            if ((cbInstanceData._m0[_559 + 7u].x + _2592) < 0.5)
            {
                _2758 = true;
                break;
            }
        }
        uint _2699 = _561 + uint(_2561.w);
        if ((cbInstanceData._m0[_2699].w < 1.0) && ((cbInstanceData._m0[_2699].w + _2592) < 0.5))
        {
            _2758 = true;
            break;
        }
        if ((_2585 + 1.0) < _2583.x)
        {
            _2758 = true;
            break;
        }
        _2758 = false;
        break;
    }
    float _2963;
    if (_2758)
    {
        discard_state = true;
        _2963 = 0.0;
    }
    else
    {
        _2963 = cbInstanceData._m0[_2425].w;
    }
    SV_Target.x = _2589;
    SV_Target.y = _2590;
    SV_Target.z = _2591;
    SV_Target.w = _2963;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2425].w;
    discard_exit();
}


