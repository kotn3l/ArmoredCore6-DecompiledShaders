#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _924;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _245 = _240.z;
    float _249 = (_240.x * 2.0) + (-1.0);
    float _251 = (_240.y * 2.0) + (-1.0);
    float _252 = dot(vec2(_249, _251), vec2(_249, _251));
    float _3521 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _258 = sqrt(1.0 - (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))));
    float _261 = fma(_258, _215, fma(_251, _208, _249 * _194));
    float _264 = fma(_258, _216, fma(_251, _209, _249 * _195));
    float _267 = fma(_258, _217, fma(_251, _210, _249 * _196));
    float _271 = inversesqrt(dot(vec3(_261, _264, _267), vec3(_261, _264, _267)));
    float _272 = _271 * _261;
    float _273 = _271 * _264;
    float _274 = _271 * _267;
    float _279 = cbMtdParam._m0[10u].x + dot(vec4(_272, _273, _274, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3532 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _287 = dot(vec4(_272, _273, _274, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _3543 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _289 = (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) + (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)));
    vec4 _307 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _312 = _307.x * cbMtdParam._m0[9u].x;
    float _313 = _307.y * cbMtdParam._m0[9u].y;
    float _314 = _307.z * cbMtdParam._m0[9u].z;
    vec4 _326 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _337 = ((_326.x - _312) * _289) + _312;
    float _338 = ((_326.y - _313) * _289) + _313;
    float _339 = ((_326.z - _314) * _289) + _314;
    vec4 _352 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _359 = (_352.x * 2.0) + (-1.0);
    float _360 = (_352.y * 2.0) + (-1.0);
    float _361 = dot(vec2(_359, _360), vec2(_359, _360));
    float _3554 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _369 = ((_352.z - _245) * _289) + _245;
    float _378 = ((sqrt(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) - _258) * _289) + _258;
    float _382 = (((_359 - _249) * _289) + _249) + (cbMtdParam._m0[10u].y * _249);
    float _383 = (((_360 - _251) * _289) + _251) + (cbMtdParam._m0[10u].y * _251);
    float _386 = fma(_378, _215, fma(_383, _208, _382 * _194));
    float _389 = fma(_378, _216, fma(_383, _209, _382 * _195));
    float _392 = fma(_378, _217, fma(_383, _210, _382 * _196));
    float _396 = inversesqrt(dot(vec3(_386, _389, _392), vec3(_386, _389, _392)));
    float _397 = _396 * _386;
    float _398 = _396 * _389;
    float _399 = _396 * _392;
    float _3565 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _400 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3587 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3598 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _419 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _460 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _470 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _460);
    float _471 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _460);
    float _472 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _460);
    float _476 = inversesqrt(dot(vec3(_470, _471, _472), vec3(_470, _471, _472)));
    float _477 = _470 * _476;
    float _478 = _471 * _476;
    float _479 = _472 * _476;
    float _485 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _486 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _507 = fma(_399, cbSceneParam._m0[5u].z, fma(_398, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _397));
    float _510 = fma(_399, cbSceneParam._m0[6u].z, fma(_398, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _397));
    float _513 = fma(_399, cbSceneParam._m0[7u].z, fma(_398, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _397));
    uint _526 = uint(roundEven(NORMAL.w)) * 13u;
    uint _529 = (_526 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _535 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) * cbInstanceData._m0[_529].x;
    float _536 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_529].y;
    float _537 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_529].z;
    float _3609 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _539 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _540 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    vec4 _549 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _485, cbSceneParam._m0[86u].y * _486));
    float _552 = _549.x * TEXCOORD.z;
    float _553 = dot(vec3(_397, _398, _399), vec3(_477, _478, _479));
    float _556 = _553 * 2.0;
    float _560 = (_556 * _397) - _477;
    float _561 = (_556 * _398) - _478;
    float _562 = (_556 * _399) - _479;
    float _566 = abs(dot(vec3(_477, _478, _479), vec3(_397, _398, _399)));
    float _3642 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _568 = sqrt(_400);
    float _581 = exp2((_568 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_568 * 3.0));
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _923;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _648 = fma(_621, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _613));
        float _652 = fma(_621, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _613));
        float _656 = fma(_621, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _613));
        float _681 = _613 + _397;
        float _682 = _617 + _398;
        float _683 = _621 + _399;
        float _693 = fma(_683, cbModelParam._m0[26u].z, fma(_682, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _681)) - _648;
        float _694 = fma(_683, cbModelParam._m0[27u].z, fma(_682, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _681)) - _652;
        float _695 = fma(_683, cbModelParam._m0[28u].z, fma(_682, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _681)) - _656;
        float _699 = inversesqrt(dot(vec3(_693, _694, _695), vec3(_693, _694, _695)));
        float _712 = ((_699 * _693) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_648 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _713 = ((_699 * _694) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_652 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _714 = ((_699 * _695) / cbModelParam._m0[34u].z) + ((((((_656 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        float _751 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_717.x + (-0.5));
        float _753 = _751 * (_717.y + (-0.5));
        float _754 = _751 * (_717.z + (-0.5));
        float _761 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_724.x + (-0.5));
        float _763 = _761 * (_724.y + (-0.5));
        float _764 = _761 * (_724.z + (-0.5));
        float _771 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_731.x + (-0.5));
        float _773 = _771 * (_731.y + (-0.5));
        float _774 = _771 * (_731.z + (-0.5));
        float _781 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_738.x + (-0.5));
        float _783 = _781 * (_738.y + (-0.5));
        float _784 = _781 * (_738.z + (-0.5));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = _752 * 0.5;
        float _789 = _762 * 0.5;
        float _790 = _772 * 0.5;
        float _791 = dot(vec3(_788, _789, _790), vec3(_788, _789, _790));
        float _796 = (_791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_791);
        float _805 = (dot(vec3(_397, _398, _399), vec3(_796 * _788, _796 * _789, _796 * _790)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _815 = sqrt(((_789 * _789) + (_788 * _788)) + (_790 * _790)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3690 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_817 + 1.0))) + _822) * _785;
        float _832 = _753 * 0.5;
        float _833 = _763 * 0.5;
        float _834 = _773 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _848 = (dot(vec3(_397, _398, _399), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _857 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_786 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3723 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_859 + 1.0))) + _864) * _786;
        float _874 = _754 * 0.5;
        float _875 = _764 * 0.5;
        float _876 = _774 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_397, _398, _399), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3756 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_901 + 1.0))) + _906) * _787;
        _923 = _754;
        _925 = _753;
        _926 = _752;
        _927 = _764;
        _928 = _763;
        _929 = _762;
        _930 = _774;
        _931 = _773;
        _932 = _772;
        _933 = _787;
        _934 = _786;
        _935 = _785;
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
        _937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
    }
    else
    {
        _923 = _924;
        _925 = _924;
        _926 = _924;
        _927 = _924;
        _928 = _924;
        _929 = _924;
        _930 = _924;
        _931 = _924;
        _932 = _924;
        _933 = _924;
        _934 = _924;
        _935 = _924;
        _936 = 0.0;
        _937 = 0.0;
        _938 = 0.0;
    }
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _964 = fma(_621, cbModelParam._m0[30u].z, fma(_617, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _613));
        float _968 = fma(_621, cbModelParam._m0[31u].z, fma(_617, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _613));
        float _972 = fma(_621, cbModelParam._m0[32u].z, fma(_617, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _613));
        float _995 = _613 + _397;
        float _996 = _617 + _398;
        float _997 = _621 + _399;
        float _1007 = fma(_997, cbModelParam._m0[30u].z, fma(_996, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _995)) - _964;
        float _1008 = fma(_997, cbModelParam._m0[31u].z, fma(_996, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _995)) - _968;
        float _1009 = fma(_997, cbModelParam._m0[32u].z, fma(_996, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _995)) - _972;
        float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
        float _1026 = ((_1013 * _1007) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_964 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1013 * _1008) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_968 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1013 * _1009) / cbModelParam._m0[35u].z) + ((((((_972 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        float _1063 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1030.x + (-0.5));
        float _1065 = _1063 * (_1030.y + (-0.5));
        float _1066 = _1063 * (_1030.z + (-0.5));
        float _1073 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1037.x + (-0.5));
        float _1075 = _1073 * (_1037.y + (-0.5));
        float _1076 = _1073 * (_1037.z + (-0.5));
        float _1083 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1044.x + (-0.5));
        float _1085 = _1083 * (_1044.y + (-0.5));
        float _1086 = _1083 * (_1044.z + (-0.5));
        float _1093 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1051.x + (-0.5));
        float _1095 = _1093 * (_1051.y + (-0.5));
        float _1096 = _1093 * (_1051.z + (-0.5));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = _1064 * 0.5;
        float _1101 = _1074 * 0.5;
        float _1102 = _1084 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_397, _398, _399), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3819 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1127 + 1.0))) + _1132) * _1097;
        float _1142 = _1065 * 0.5;
        float _1143 = _1075 * 0.5;
        float _1144 = _1085 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_397, _398, _399), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3852 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1169 + 1.0))) + _1174) * _1098;
        float _1184 = _1066 * 0.5;
        float _1185 = _1076 * 0.5;
        float _1186 = _1086 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_397, _398, _399), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3885 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1211 + 1.0))) + _1216) * _1099;
        _1233 = _1066;
        _1234 = _1065;
        _1235 = _1064;
        _1236 = _1076;
        _1237 = _1075;
        _1238 = _1074;
        _1239 = _1086;
        _1240 = _1085;
        _1241 = _1084;
        _1242 = _1099;
        _1243 = _1098;
        _1244 = _1097;
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1247 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
    }
    else
    {
        _1233 = _924;
        _1234 = _924;
        _1235 = _924;
        _1236 = _924;
        _1237 = _924;
        _1238 = _924;
        _1239 = _924;
        _1240 = _924;
        _1241 = _924;
        _1242 = _924;
        _1243 = _924;
        _1244 = _924;
        _1245 = 0.0;
        _1246 = 0.0;
        _1247 = 0.0;
    }
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _936)) + _936;
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _937)) + _937;
    float _1259 = (cbModelParam._m0[1u].x * (_1247 - _938)) + _938;
    float _1280 = fma(_1259, cbSceneParam._m0[89u].z, fma(_1258, cbSceneParam._m0[89u].y, _1257 * cbSceneParam._m0[89u].x));
    float _1283 = fma(_1259, cbSceneParam._m0[90u].z, fma(_1258, cbSceneParam._m0[90u].y, _1257 * cbSceneParam._m0[90u].x));
    float _1286 = fma(_1259, cbSceneParam._m0[91u].z, fma(_1258, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1257));
    float _1301 = _560 * 0.5;
    float _1302 = _561 * 0.5;
    float _1303 = _562 * 0.5;
    float _1304 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1235, _1238, _1241, _1244));
    float _1307 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1310 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1344;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1317 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_923, _927, _930, _933));
        float _1321 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_925, _928, _931, _934));
        float _1325 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_926, _929, _932, _935));
        float _1332 = dot(vec4(cbModelParam._m0[39u]), vec4(_1301, _1302, _1303, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1332) ? 0.0 : (isnan(0.0) ? _1332 : max(0.0, _1332))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1355;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1346 = dot(vec4(cbModelParam._m0[40u]), vec4(_1301, _1302, _1303, 1.0));
        _1355 = dot(vec3(isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1346) ? 0.0 : (isnan(0.0) ? _1346 : max(0.0, _1346))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1355 = 1.0;
    }
    float _1359 = (_1355 * cbModelParam._m0[1u].x) + (_1344 * (1.0 - cbModelParam._m0[1u].x));
    float _1369 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _400);
    float _1370 = isnan(_1369) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1369 : min(cbModelParam._m0[25u].z, _1369));
    float _1452;
    float _1454;
    float _1456;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1419 = fma(_621, cbModelParam._m0[13u].z, fma(_617, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613)) + cbModelParam._m0[13u].w;
        float _1423 = fma(_621, cbModelParam._m0[14u].z, fma(_617, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613)) + cbModelParam._m0[14u].w;
        float _1427 = fma(_621, cbModelParam._m0[15u].z, fma(_617, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613)) + cbModelParam._m0[15u].w;
        float _1430 = fma(_562, cbModelParam._m0[13u].z, fma(_561, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _560));
        float _1433 = fma(_562, cbModelParam._m0[14u].z, fma(_561, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _560));
        float _1436 = fma(_562, cbModelParam._m0[15u].z, fma(_561, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _560));
        float _1464;
        if (_1430 > 0.0)
        {
            _1464 = abs((1.0 - _1419) / _1430);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1419 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1464 = frontier_phi_16_14_ladder;
        }
        float _1637;
        if (_1433 > 0.0)
        {
            _1637 = abs((1.0 - _1423) / _1433);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1423 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1637 = frontier_phi_25_21_ladder;
        }
        float _1932;
        if (_1436 > 0.0)
        {
            _1932 = abs((1.0 - _1427) / _1436);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1427 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1932 = frontier_phi_37_32_ladder;
        }
        float _1934 = isnan(_1637) ? _1464 : (isnan(_1464) ? _1637 : min(_1464, _1637));
        float _1935 = isnan(_1932) ? _1934 : (isnan(_1934) ? _1932 : min(_1934, _1932));
        float _1939 = (_1935 * _1430) + _1419;
        float _1940 = (_1935 * _1433) + _1423;
        float _1941 = (_1935 * _1436) + _1427;
        float _1942 = _1935 * 9.9999997473787516355514526367188e-05;
        float _1944 = (-1.0) - _1942;
        float _1946 = _1942 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1941 > _1946) || ((_1941 < _1944) || ((_1940 > _1946) || ((_1940 < _1944) || ((_1939 < _1944) || (_1939 > _1946))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2086 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1941, cbModelParam._m0[9u].z, fma(_1940, cbModelParam._m0[9u].y, _1939 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1941, cbModelParam._m0[10u].z, fma(_1940, cbModelParam._m0[10u].y, _1939 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1941, cbModelParam._m0[11u].z, fma(_1940, cbModelParam._m0[11u].y, _1939 * cbModelParam._m0[11u].x))), _1370);
            frontier_phi_15_37_ladder = _2086.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2086.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2086.z * cbModelParam._m0[1u].y;
        }
        _1452 = frontier_phi_15_37_ladder_1;
        _1454 = frontier_phi_15_37_ladder;
        _1456 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1440 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_560, _561, _562), _1370);
        _1452 = _1440.x * cbModelParam._m0[1u].y;
        _1454 = _1440.y * cbModelParam._m0[1u].y;
        _1456 = _1440.z * cbModelParam._m0[1u].y;
    }
    float _1460 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _400);
    float _1461 = isnan(_1460) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1460 : min(cbModelParam._m0[25u].w, _1460));
    float _1554;
    float _1556;
    float _1558;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1518 = fma(_621, cbModelParam._m0[21u].z, fma(_617, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613)) + cbModelParam._m0[21u].w;
        float _1522 = fma(_621, cbModelParam._m0[22u].z, fma(_617, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613)) + cbModelParam._m0[22u].w;
        float _1526 = fma(_621, cbModelParam._m0[23u].z, fma(_617, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613)) + cbModelParam._m0[23u].w;
        float _1529 = fma(_562, cbModelParam._m0[21u].z, fma(_561, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _560));
        float _1532 = fma(_562, cbModelParam._m0[22u].z, fma(_561, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _560));
        float _1535 = fma(_562, cbModelParam._m0[23u].z, fma(_561, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _560));
        float _1642;
        if (_1529 > 0.0)
        {
            _1642 = abs((1.0 - _1518) / _1529);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1518 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1642 = frontier_phi_27_23_ladder;
        }
        float _1959;
        if (_1532 > 0.0)
        {
            _1959 = abs((1.0 - _1522) / _1532);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1522 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1959 = frontier_phi_39_34_ladder;
        }
        float _2286;
        if (_1535 > 0.0)
        {
            _2286 = abs((1.0 - _1526) / _1535);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1526 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2286 = frontier_phi_49_46_ladder;
        }
        float _2288 = isnan(_1959) ? _1642 : (isnan(_1642) ? _1959 : min(_1642, _1959));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1529) + _1518;
        float _2294 = (_2289 * _1532) + _1522;
        float _2295 = (_2289 * _1535) + _1526;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2296;
        float _2299 = _2296 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2295 > _2299) || ((_2295 < _2297) || ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 < _2297) || (_2293 > _2299))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2413 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2295, cbModelParam._m0[17u].z, fma(_2294, cbModelParam._m0[17u].y, _2293 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2295, cbModelParam._m0[18u].z, fma(_2294, cbModelParam._m0[18u].y, _2293 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2295, cbModelParam._m0[19u].z, fma(_2294, cbModelParam._m0[19u].y, _2293 * cbModelParam._m0[19u].x))), _1461);
            frontier_phi_24_49_ladder = _2413.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2413.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2413.x * cbModelParam._m0[1u].z;
        }
        _1554 = frontier_phi_24_49_ladder_2;
        _1556 = frontier_phi_24_49_ladder_1;
        _1558 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1538 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_560, _561, _562), _1461);
        _1554 = _1538.x * cbModelParam._m0[1u].z;
        _1556 = _1538.y * cbModelParam._m0[1u].z;
        _1558 = _1538.z * cbModelParam._m0[1u].z;
    }
    float _1570 = ((((1.0 - _581) * ((_568 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_581 * _568)) * _552;
    float _1571 = _1570 * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1572 = _1570 * ((cbModelParam._m0[1u].w * (_1556 - _1454)) + _1454);
    float _1573 = _1570 * ((cbModelParam._m0[1u].w * (_1558 - _1456)) + _1456);
    float _1576 = fma(_1573, cbSceneParam._m0[89u].z, fma(_1572, cbSceneParam._m0[89u].y, _1571 * cbSceneParam._m0[89u].x));
    float _1579 = fma(_1573, cbSceneParam._m0[90u].z, fma(_1572, cbSceneParam._m0[90u].y, _1571 * cbSceneParam._m0[90u].x));
    float _1582 = fma(_1573, cbSceneParam._m0[91u].z, fma(_1572, cbSceneParam._m0[91u].y, _1571 * cbSceneParam._m0[91u].x));
    float _1616 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1620 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1624 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1628 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1629 = _1616 / _1628;
    float _1630 = _1620 / _1628;
    float _1631 = _1624 / _1628;
    float _1778;
    float _1779;
    float _1780;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1658 = ((uint(_1631 > cbSceneParam._m0[59u].y) + uint(_1631 > cbSceneParam._m0[59u].x)) + uint(_1631 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1659 = _1658 + 43u;
        uint _1667 = _1658 + 44u;
        uint _1675 = _1658 + 45u;
        uint _1683 = _1658 + 46u;
        float _1694 = fma(_1628, cbSceneParam._m0[_1659].w, fma(_1624, cbSceneParam._m0[_1659].z, fma(_1620, cbSceneParam._m0[_1659].y, _1616 * cbSceneParam._m0[_1659].x)));
        float _1698 = fma(_1628, cbSceneParam._m0[_1667].w, fma(_1624, cbSceneParam._m0[_1667].z, fma(_1620, cbSceneParam._m0[_1667].y, _1616 * cbSceneParam._m0[_1667].x)));
        float _1706 = fma(_1628, cbSceneParam._m0[_1683].w, fma(_1624, cbSceneParam._m0[_1683].z, fma(_1620, cbSceneParam._m0[_1683].y, _1616 * cbSceneParam._m0[_1683].x)));
        float _1711 = cbSceneParam._m0[33u].z * _1706;
        float _1713 = cbSceneParam._m0[33u].w * _1706;
        float _1716 = fma(_1628, cbSceneParam._m0[_1675].w, fma(_1624, cbSceneParam._m0[_1675].z, fma(_1620, cbSceneParam._m0[_1675].y, _1616 * cbSceneParam._m0[_1675].x))) / _1706;
        float _1764 = (cbSceneParam._m0[33u].x - sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631))) * cbSceneParam._m0[33u].y;
        float _4011 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1771 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1711 + _1694) / _1706, (_1713 + _1698) / _1706), _1716), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1713 + _1694) / _1706, (_1698 - _1711) / _1706), _1716), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1694 - _1711) / _1706, (_1698 - _1713) / _1706), _1716), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1694 - _1713) / _1706, (_1711 + _1698) / _1706), _1716), 0.0)).x), vec4(0.25)));
        _1778 = 1.0 - (_1771 * cbSceneParam._m0[34u].x);
        _1779 = 1.0 - (_1771 * cbSceneParam._m0[34u].y);
        _1780 = 1.0 - (_1771 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1778 = 1.0;
        _1779 = 1.0;
        _1780 = 1.0;
    }
    float _1844;
    float _1846;
    float _1848;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1832 = fma(_1628, cbSceneParam._m0[63u].w, fma(_1624, cbSceneParam._m0[63u].z, fma(_1620, cbSceneParam._m0[63u].y, _1616 * cbSceneParam._m0[63u].x)));
        float _1833 = fma(_1628, cbSceneParam._m0[60u].w, fma(_1624, cbSceneParam._m0[60u].z, fma(_1620, cbSceneParam._m0[60u].y, _1616 * cbSceneParam._m0[60u].x))) / _1832;
        float _1834 = fma(_1628, cbSceneParam._m0[61u].w, fma(_1624, cbSceneParam._m0[61u].z, fma(_1620, cbSceneParam._m0[61u].y, _1616 * cbSceneParam._m0[61u].x))) / _1832;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1833 >= cbSceneParam._m0[64u].x) && (_1834 >= cbSceneParam._m0[64u].y)) && (_1833 <= cbSceneParam._m0[64u].z)) && (_1834 <= cbSceneParam._m0[64u].w))
        {
            float _1972 = fma(_1628, cbSceneParam._m0[62u].w, fma(_1624, cbSceneParam._m0[62u].z, fma(_1620, cbSceneParam._m0[62u].y, _1616 * cbSceneParam._m0[62u].x))) / _1832;
            float _1976 = isnan(cbSceneParam._m0[41u].w) ? _1972 : (isnan(_1972) ? cbSceneParam._m0[41u].w : max(_1972, cbSceneParam._m0[41u].w));
            float _2019 = (cbSceneParam._m0[33u].x - sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631))) * cbSceneParam._m0[33u].y;
            float _4027 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
            float _2026 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1833, cbSceneParam._m0[33u].w + _1834), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1833, _1834 - cbSceneParam._m0[33u].z), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1833 - cbSceneParam._m0[33u].z, _1834 - cbSceneParam._m0[33u].w), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1833 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1834), _1976), 0.0)).x), vec4(0.25)));
            float _2030 = 1.0 - (_2026 * cbSceneParam._m0[34u].x);
            float _2031 = 1.0 - (_2026 * cbSceneParam._m0[34u].y);
            float _2032 = 1.0 - (_2026 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2031) ? _1779 : (isnan(_1779) ? _2031 : min(_1779, _2031));
            frontier_phi_36_35_ladder_1 = isnan(_2032) ? _1780 : (isnan(_1780) ? _2032 : min(_1780, _2032));
            frontier_phi_36_35_ladder_2 = isnan(_2030) ? _1778 : (isnan(_1778) ? _2030 : min(_1778, _2030));
        }
        else
        {
            frontier_phi_36_35_ladder = _1779;
            frontier_phi_36_35_ladder_1 = _1780;
            frontier_phi_36_35_ladder_2 = _1778;
        }
        _1844 = frontier_phi_36_35_ladder_2;
        _1846 = frontier_phi_36_35_ladder;
        _1848 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1844 = _1778;
        _1846 = _1779;
        _1848 = _1780;
    }
    uvec4 _1853 = floatBitsToUint(cbInstanceData._m0[_526 + 5u]);
    uint _1855 = _1853.x * 14u;
    uint _1856 = _1855 + 13u;
    float _1863 = _552 + (-1.0);
    float _1868 = (cbLight._m0[_1856].x * _1863) + 1.0;
    float _1869 = (cbLight._m0[_1856].y * _1863) + 1.0;
    float _1870 = (cbLight._m0[_1856].z * _1863) + 1.0;
    float _1871 = (cbLight._m0[_1856].w * _1863) + 1.0;
    uint _1872 = _1855 + 5u;
    float _1878 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1882 = _1855 + 4u;
    float _1891 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
    uint _1895 = _1855 | 1u;
    float _1906 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_397, _398, _399));
    float _1909 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_397, _398, _399));
    float _4063 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _4074 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1914 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.3183098733425140380859375;
    float _1916 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.3183098733425140380859375;
    float _1923 = ((cbLight._m0[_1872].x * _1878) * _1916) + (((cbLight._m0[_1882].x * _1844) * _1891) * _1914);
    float _1924 = ((_1878 * cbLight._m0[_1872].y) * _1916) + (((cbLight._m0[_1882].y * _1846) * _1891) * _1914);
    float _1925 = ((_1878 * cbLight._m0[_1872].z) * _1916) + (((cbLight._m0[_1882].z * _1848) * _1891) * _1914);
    uvec4 _1929 = floatBitsToUint(cbLight._m0[_1855 + 12u]);
    bool _1931 = _1929.x == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_1931)
    {
        _2033 = _1923;
        _2035 = _1924;
        _2037 = _1925;
    }
    else
    {
        uint _2041 = _1855 + 6u;
        float _2057 = (dot(vec3(cbLight._m0[_1855 + 2u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _2058 = _2057 * _2057;
        float _4085 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2059 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2060 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2033 = (((cbLight._m0[_2041].x * 0.3183098733425140380859375) * _2059) * _2060) + _1923;
        _2035 = (((cbLight._m0[_2041].y * 0.3183098733425140380859375) * _2059) * _2060) + _1924;
        _2037 = (((cbLight._m0[_2041].z * 0.3183098733425140380859375) * _2059) * _2060) + _1925;
    }
    bool _2040 = _1929.y == 0u;
    float _2095;
    float _2097;
    float _2099;
    if (_2040)
    {
        _2095 = _2033;
        _2097 = _2035;
        _2099 = _2037;
    }
    else
    {
        uint _2257 = _1855 + 7u;
        float _2273 = (dot(vec3(cbLight._m0[_1855 + 3u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _2274 = _2273 * _2273;
        float _4101 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2275 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2276 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2095 = (((cbLight._m0[_2257].x * 0.3183098733425140380859375) * _2275) * _2276) + _2033;
        _2097 = (((cbLight._m0[_2257].y * 0.3183098733425140380859375) * _2275) * _2276) + _2035;
        _2099 = (((cbLight._m0[_2257].z * 0.3183098733425140380859375) * _2275) * _2276) + _2037;
    }
    uint _2102 = _1855 + 8u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1855].w)) * _400) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1855].x + _477;
    float _2118 = cbLight._m0[_1855].y + _478;
    float _2119 = cbLight._m0[_1855].z + _479;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1855].xyz));
    float _4117 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _2131 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _2132 = dot(vec3(_397, _398, _399), vec3(_2124, _2125, _2126));
    float _4139 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2136 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_2124, _2125, _2126));
    float _4150 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2140 = _2116 * _2116;
    float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
    float _2155 = (exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2156 = 1.0 - _2116;
    float _2167 = (0.5 / (((_2131 * ((_2130 * _2156) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2156) + _2116) * _2130))) * _2130;
    float _4161 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2169 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
    uint _2183 = _1855 + 9u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1895].w)) * _400) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_1895].x + _477;
    float _2197 = cbLight._m0[_1895].y + _478;
    float _2198 = cbLight._m0[_1895].z + _479;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1895].xyz));
    float _4172 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2210 = dot(vec3(_397, _398, _399), vec3(_2203, _2204, _2205));
    float _4183 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_2203, _2204, _2205));
    float _4194 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2195 * _2195;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2231 = (exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2232 = 1.0 - _2195;
    float _2242 = (0.5 / (((_2131 * ((_2209 * _2232) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2232) + _2195) * _2209))) * _2209;
    float _4205 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    float _2254 = (((_2231 * cbLight._m0[_2183].x) * _2244) * _1878) + ((((cbLight._m0[_2102].x * _1844) * _2155) * _2169) * _1891);
    float _2255 = (((_2231 * cbLight._m0[_2183].y) * _2244) * _1878) + ((((cbLight._m0[_2102].y * _1846) * _2155) * _2169) * _1891);
    float _2256 = (((_2231 * cbLight._m0[_2183].z) * _2244) * _1878) + ((((cbLight._m0[_2102].z * _1848) * _2155) * _2169) * _1891);
    float _2312;
    float _2314;
    float _2316;
    if (_1931)
    {
        _2312 = _2254;
        _2314 = _2255;
        _2316 = _2256;
    }
    else
    {
        uint _2318 = _1855 + 2u;
        uint _2322 = _1855 + 10u;
        float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _400) * 0.949999988079071044921875);
        float _2337 = _2336 * _2336;
        float _2338 = cbLight._m0[_2318].x + _477;
        float _2339 = cbLight._m0[_2318].y + _478;
        float _2340 = cbLight._m0[_2318].z + _479;
        float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
        float _2345 = _2344 * _2338;
        float _2346 = _2344 * _2339;
        float _2347 = _2344 * _2340;
        float _2348 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_2318].xyz));
        float _4216 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2352 = dot(vec3(_397, _398, _399), vec3(_2345, _2346, _2347));
        float _4227 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2356 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2345, _2346, _2347));
        float _4238 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2360 = _2337 * _2337;
        float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
        float _2373 = (exp2(log2(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2374 = 1.0 - _2337;
        float _2384 = (0.5 / (((_2131 * ((_2351 * _2374) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2374) + _2337) * _2351))) * _2351;
        float _4249 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2386 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
        float _2387 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2312 = (((_2373 * cbLight._m0[_2322].x) * _2386) * _2387) + _2254;
        _2314 = (((_2373 * cbLight._m0[_2322].y) * _2386) * _2387) + _2255;
        _2316 = (((_2373 * cbLight._m0[_2322].z) * _2386) * _2387) + _2256;
    }
    float _2418;
    float _2420;
    float _2422;
    if (_2040)
    {
        _2418 = _2312;
        _2420 = _2314;
        _2422 = _2316;
    }
    else
    {
        uint _2429 = _1855 + 3u;
        uint _2433 = _1855 + 11u;
        float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _400) * 0.949999988079071044921875);
        float _2448 = _2447 * _2447;
        float _2449 = cbLight._m0[_2429].x + _477;
        float _2450 = cbLight._m0[_2429].y + _478;
        float _2451 = cbLight._m0[_2429].z + _479;
        float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
        float _2456 = _2455 * _2449;
        float _2457 = _2455 * _2450;
        float _2458 = _2455 * _2451;
        float _2459 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_2429].xyz));
        float _4265 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2463 = dot(vec3(_397, _398, _399), vec3(_2456, _2457, _2458));
        float _4276 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2467 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2456, _2457, _2458));
        float _4287 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2471 = _2448 * _2448;
        float _2475 = ((_2466 * _2466) * (_2471 + (-1.0))) + 1.0;
        float _2484 = (exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2485 = 1.0 - _2448;
        float _2495 = (0.5 / (((_2131 * ((_2462 * _2485) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2485) + _2448) * _2462))) * _2462;
        float _4298 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2497 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2471 / ((_2475 * _2475) * 3.141590118408203125));
        float _2498 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2418 = (((_2484 * cbLight._m0[_2433].x) * _2497) * _2498) + _2312;
        _2420 = (((_2484 * cbLight._m0[_2433].y) * _2497) * _2498) + _2314;
        _2422 = (((_2484 * cbLight._m0[_2433].z) * _2497) * _2498) + _2316;
    }
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    if (_1853.y == 0u)
    {
        uvec4 _2519 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2520 = _2519.x;
        uint _2531 = uint((float(_2519.y) * floor(float(uint(cbSceneParam._m0[85u].y * _486) / _2520))) + floor(float(uint(cbSceneParam._m0[85u].x * _485) / _2520)));
        float _2541 = (log2(_1631 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2542 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        uint _2545 = uint(isnan(14.0) ? _2542 : (isnan(_2542) ? 14.0 : min(_2542, 14.0)));
        uvec4 _2550 = texelFetch(g_lightClusterGridBuffer, int(((_2545 << 2u) + (_2531 << 6u)) >> 2u));
        uint _2551 = _2550.x;
        uint _2552 = _2519.z;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        if (((((1u << ((_2552 >> 4u) & 15u)) + 4294967295u) & _2551) == 0u) || ((_2552 & 240u) == 0u))
        {
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
        }
        else
        {
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            uint _2780 = 0u;
            uint _2789;
            bool _2790;
            for (;;)
            {
                _2789 = texelFetch(g_lightClassification, int((((_2545 << 5u) + (_2531 << 9u)) + (_2780 << 2u)) >> 2u)).x;
                _2790 = _2789 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2790)
                {
                    frontier_phi_68_pred = _2779;
                    frontier_phi_68_pred_1 = _2778;
                    frontier_phi_68_pred_2 = _2777;
                    frontier_phi_68_pred_3 = _2775;
                    frontier_phi_68_pred_4 = _2774;
                    frontier_phi_68_pred_5 = _2776;
                }
                else
                {
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    uint _2904;
                    _2898 = _2774;
                    _2899 = _2775;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2778;
                    _2903 = _2779;
                    _2904 = _2789;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    for (;;)
                    {
                        uint _2908 = uint(findLSB(_2904)) + (_2780 << 5u);
                        uint _2905 = (_2904 + 4294967295u) & _2904;
                        uint _2910 = _2908 * 48u;
                        vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2910)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 3u)).x));
                        uint _2930 = (_2908 * 48u) + 4u;
                        vec4 _2943 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 3u)).x));
                        uint _2949 = (_2908 * 48u) + 8u;
                        vec3 _2960 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x));
                        float _2964 = _2924.x - _1629;
                        float _2965 = _2924.y - _1630;
                        float _2966 = _2924.z - _1631;
                        float _2967 = dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966));
                        float _2970 = inversesqrt(_2967);
                        float _2971 = _2970 * _2964;
                        float _2972 = _2970 * _2965;
                        float _2973 = _2970 * _2966;
                        float _2974 = dot(vec3(_507, _510, _513), vec3(_2971, _2972, _2973));
                        float _2979 = 1.0 - (_2967 * _2924.w);
                        float _4324 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2980 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _2981 = sqrt(_2967) * _2943.w;
                        float _2984 = 1.39999997615814208984375 / (_2981 + 1.39999997615814208984375);
                        float _2985 = _2984 * _2984;
                        float _2988 = ((1.0 - _2985) * _2974) + _2985;
                        float _2991 = _2981 * _2981;
                        float _2995 = ((isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0))) * _2980) / ((_2991 * 0.699999988079071044921875) + 1.0);
                        float _2999 = (-0.0) - _1629;
                        float _3000 = (-0.0) - _1630;
                        float _3001 = (-0.0) - _1631;
                        float _3005 = inversesqrt(dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001)));
                        float _3006 = _3005 * _2999;
                        float _3007 = _3005 * _3000;
                        float _3008 = _3005 * _3001;
                        float _3015 = exp2(log2(1.0 / ((_2991 * 3.5) + 5.0)) * 0.25);
                        float _3016 = 1.0 - _568;
                        float _3023 = sqrt(1.0 - ((1.0 - (_3016 * _3016)) * (1.0 - (_3015 * _3015))));
                        float _3024 = _3023 * _3023;
                        float _3025 = _3024 * _3024;
                        float _3026 = _3006 + _2971;
                        float _3027 = _3007 + _2972;
                        float _3028 = _3008 + _2973;
                        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                        float _3036 = dot(vec3(_507, _510, _513), vec3(_3006, _3007, _3008));
                        float _4340 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3039 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3040 = dot(vec3(_507, _510, _513), vec3(_3032 * _3026, _3032 * _3027, _3032 * _3028));
                        float _4351 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3043 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _3047 = ((_3043 * _3043) * (_3025 + (-1.0))) + 1.0;
                        float _3048 = _2984 * _3024;
                        float _3049 = _3048 * _3048;
                        float _3052 = ((1.0 - _3049) * _2974) + _3049;
                        float _4362 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3053 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _3054 = 1.0 - _3024;
                        float _3064 = (0.5 / (((_3053 * ((_3039 * _3054) + _3024)) + 9.9999999392252902907785028219223e-09) + (((_3053 * _3054) + _3024) * _3039))) * _3053;
                        float _4373 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3075 = (((_3025 * 3.1415927410125732421875) * (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) / ((_3047 * _3047) * ((_2991 * 2.1991131305694580078125) + 3.141590118408203125))) * _2980;
                        _2833 = (_2995 * _2943.x) + _2901;
                        _2834 = (_2995 * _2943.y) + _2902;
                        _2835 = (_2995 * _2943.z) + _2903;
                        _2830 = (_3075 * _2960.x) + _2898;
                        _2831 = (_3075 * _2960.y) + _2899;
                        _2832 = (_3075 * _2960.z) + _2900;
                        if (_2905 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2835;
                            _2904 = _2905;
                        }
                    }
                    frontier_phi_68_pred = _2835;
                    frontier_phi_68_pred_1 = _2834;
                    frontier_phi_68_pred_2 = _2833;
                    frontier_phi_68_pred_3 = _2831;
                    frontier_phi_68_pred_4 = _2830;
                    frontier_phi_68_pred_5 = _2832;
                }
                _2641 = frontier_phi_68_pred;
                _2639 = frontier_phi_68_pred_1;
                _2637 = frontier_phi_68_pred_2;
                _2633 = frontier_phi_68_pred_3;
                _2631 = frontier_phi_68_pred_4;
                _2635 = frontier_phi_68_pred_5;
                uint _2781 = _2780 + 1u;
                if (_2781 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2774 = _2631;
                    _2775 = _2633;
                    _2776 = _2635;
                    _2777 = _2637;
                    _2778 = _2639;
                    _2779 = _2641;
                    _2780 = _2781;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
        }
        uvec4 _2644 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2645 = _2644.z;
        uint _2647 = (_2645 >> 8u) & 15u;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        if (((4294967295u << _2647) & _2551) == 0u)
        {
            _2742 = _2630;
            _2744 = _2632;
            _2746 = _2634;
            _2748 = _2636;
            _2750 = _2638;
            _2752 = _2640;
        }
        else
        {
            float _2767 = inversesqrt(dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631)));
            float _2768 = _2767 * _1629;
            float _2769 = _2767 * _1630;
            float _2770 = _2767 * _1631;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2647 < ((_2645 >> 12u) & 15u))
            {
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2753;
                float _2881 = _2630;
                float _2882 = _2632;
                float _2883 = _2634;
                float _2884 = _2636;
                float _2885 = _2638;
                float _2886 = _2640;
                uint _2887 = _2647;
                uint _2896;
                bool _2897;
                for (;;)
                {
                    _2896 = texelFetch(g_lightClassification, int((((_2545 << 5u) + (_2531 << 9u)) + (_2887 << 2u)) >> 2u)).x;
                    _2897 = _2896 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2897)
                    {
                        frontier_phi_74_pred = _2883;
                        frontier_phi_74_pred_1 = _2882;
                        frontier_phi_74_pred_2 = _2881;
                        frontier_phi_74_pred_3 = _2886;
                        frontier_phi_74_pred_4 = _2885;
                        frontier_phi_74_pred_5 = _2884;
                    }
                    else
                    {
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3093 = _2881;
                        float _3094 = _2882;
                        float _3095 = _2883;
                        float _3096 = _2884;
                        float _3097 = _2885;
                        float _3098 = _2886;
                        uint _3099 = _2896;
                        uint _3100;
                        vec4 _3125;
                        float _3126;
                        vec4 _3141;
                        vec3 _3153;
                        vec4 _3169;
                        vec4 _3185;
                        float _3232;
                        bool _3233;
                        for (;;)
                        {
                            uint _3110 = ((_2887 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3099));
                            _3100 = (_3099 + 4294967295u) & _3099;
                            uint _3112 = _3110 * 40u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3126 = _3125.w;
                            uint _3128 = (_3110 * 40u) + 4u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3143 = (_3110 * 40u) + 8u;
                            _3153 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x));
                            uint _3156 = (_3110 * 40u) + 16u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3172 = (_3110 * 40u) + 20u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3188 = (_3110 * 40u) + 24u;
                            vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3207 = (_3110 * 40u) + 28u;
                            vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            _3232 = fma(_1631, _3220.z, fma(_1630, _3220.y, _3220.x * _1629)) + _3220.w;
                            _3233 = !((fma(_1631, _3201.z, fma(_1630, _3201.y, _3201.x * _1629)) + _3201.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3233)
                            {
                                float _3260 = _3125.x - _1629;
                                float _3261 = _3125.y - _1630;
                                float _3262 = _3125.z - _1631;
                                float _3263 = dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262));
                                float _3266 = inversesqrt(_3263);
                                float _3267 = _3266 * _3260;
                                float _3268 = _3266 * _3261;
                                float _3269 = _3266 * _3262;
                                float _3273 = 1.0 - (_3263 / (_3126 * _3126));
                                float _4384 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3278 = sqrt(_3263) * _3141.w;
                                float _3280 = 1.39999997615814208984375 / (_3278 + 1.39999997615814208984375);
                                float _3281 = _3280 * _3280;
                                float _3284 = ((1.0 - _3281) * dot(vec3(_3267, _3268, _3269), vec3(_507, _510, _513))) + _3281;
                                float _3287 = _3278 * _3278;
                                float _3291 = (fma(_1631, _3169.z, fma(_1630, _3169.y, _3169.x * _1629)) + _3169.w) / _3232;
                                float _3292 = (fma(_1631, _3185.z, fma(_1630, _3185.y, _3185.x * _1629)) + _3185.w) / _3232;
                                float _3296 = 1.0 - dot(vec2(_3291, _3292), vec2(_3291, _3292));
                                float _4400 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3298 = _3297 * (((isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))) * _3274) / ((_3287 * 0.699999988079071044921875) + 1.0));
                                float _3310 = exp2(log2(1.0 / ((_3287 * 3.5) + 5.0)) * 0.25);
                                float _3311 = 1.0 - _568;
                                float _3318 = sqrt(1.0 - ((1.0 - (_3311 * _3311)) * (1.0 - (_3310 * _3310))));
                                float _3319 = _3318 * _3318;
                                float _3320 = _3319 * _3319;
                                float _3321 = _3267 - _2768;
                                float _3322 = _3268 - _2769;
                                float _3323 = _3269 - _2770;
                                float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                                float _3331 = dot(vec3(_507, _510, _513), vec3((-0.0) - _2768, (-0.0) - _2769, (-0.0) - _2770));
                                float _4411 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3335 = dot(vec3(_507, _510, _513), vec3(_3327 * _3321, _3327 * _3322, _3327 * _3323));
                                float _4422 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3338 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3342 = ((_3338 * _3338) * (_3320 + (-1.0))) + 1.0;
                                float _3343 = _3280 * _3319;
                                float _3344 = _3343 * _3343;
                                float _3350 = ((1.0 - _3344) * dot(vec3(_507, _510, _513), vec3(_3267, _3268, _3269))) + _3344;
                                float _4433 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3352 = 1.0 - _3319;
                                float _3362 = (0.5 / (((_3351 * ((_3334 * _3352) + _3319)) + 9.9999999392252902907785028219223e-09) + (((_3351 * _3352) + _3319) * _3334))) * _3351;
                                float _4444 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3372 = (_3297 * _3274) * (((_3320 * 3.1415927410125732421875) * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) / ((_3342 * _3342) * ((_3287 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3372 * _3153.z;
                                frontier_phi_80_pred_1 = _3372 * _3153.y;
                                frontier_phi_80_pred_2 = _3372 * _3153.x;
                                frontier_phi_80_pred_3 = _3298 * _3141.z;
                                frontier_phi_80_pred_4 = _3298 * _3141.y;
                                frontier_phi_80_pred_5 = _3298 * _3141.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3378 = frontier_phi_80_pred;
                            _3377 = frontier_phi_80_pred_1;
                            _3376 = frontier_phi_80_pred_2;
                            _3381 = frontier_phi_80_pred_3;
                            _3380 = frontier_phi_80_pred_4;
                            _3379 = frontier_phi_80_pred_5;
                            _3083 = _3379 + _3096;
                            _3084 = _3380 + _3097;
                            _3085 = _3381 + _3098;
                            _3080 = _3376 + _3093;
                            _3081 = _3377 + _3094;
                            _3082 = _3378 + _3095;
                            if (_3100 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3100;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3082;
                        frontier_phi_74_pred_1 = _3081;
                        frontier_phi_74_pred_2 = _3080;
                        frontier_phi_74_pred_3 = _3085;
                        frontier_phi_74_pred_4 = _3084;
                        frontier_phi_74_pred_5 = _3083;
                    }
                    _2747 = frontier_phi_74_pred;
                    _2745 = frontier_phi_74_pred_1;
                    _2743 = frontier_phi_74_pred_2;
                    _2753 = frontier_phi_74_pred_3;
                    _2751 = frontier_phi_74_pred_4;
                    _2749 = frontier_phi_74_pred_5;
                    uint _2888 = _2887 + 1u;
                    if (_2888 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2881 = _2743;
                        _2882 = _2745;
                        _2883 = _2747;
                        _2884 = _2749;
                        _2885 = _2751;
                        _2886 = _2753;
                        _2887 = _2888;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2751;
                frontier_phi_62_63_ladder_1 = _2749;
                frontier_phi_62_63_ladder_2 = _2747;
                frontier_phi_62_63_ladder_3 = _2753;
                frontier_phi_62_63_ladder_4 = _2745;
                frontier_phi_62_63_ladder_5 = _2743;
            }
            else
            {
                frontier_phi_62_63_ladder = _2638;
                frontier_phi_62_63_ladder_1 = _2636;
                frontier_phi_62_63_ladder_2 = _2634;
                frontier_phi_62_63_ladder_3 = _2640;
                frontier_phi_62_63_ladder_4 = _2632;
                frontier_phi_62_63_ladder_5 = _2630;
            }
            _2742 = frontier_phi_62_63_ladder_5;
            _2744 = frontier_phi_62_63_ladder_4;
            _2746 = frontier_phi_62_63_ladder_2;
            _2748 = frontier_phi_62_63_ladder_1;
            _2750 = frontier_phi_62_63_ladder;
            _2752 = frontier_phi_62_63_ladder_3;
        }
        float _2757 = isnan(1.0) ? _552 : (isnan(_552) ? 1.0 : min(_552, 1.0));
        _2563 = (_2757 * _2748) + _2095;
        _2565 = (_2757 * _2750) + _2097;
        _2567 = (_2757 * _2752) + _2099;
        _2569 = ((_2742 * 0.039999999105930328369140625) * _2757) + _2418;
        _2571 = ((_2744 * 0.039999999105930328369140625) * _2757) + _2420;
        _2573 = ((_2746 * 0.039999999105930328369140625) * _2757) + _2422;
    }
    else
    {
        _2563 = _2095;
        _2565 = _2097;
        _2567 = _2099;
        _2569 = _2418;
        _2571 = _2420;
        _2573 = _2422;
    }
    float _4460 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4471 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4482 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    uint _2593 = _526 + 6u;
    float _2601 = _485 / cbSceneParam._m0[86u].x;
    float _2602 = _486 / cbSceneParam._m0[86u].y;
    vec4 _2616 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2601, _2602, (log2((isnan(cbSceneParam._m0[77u].w) ? _419 : (isnan(_419) ? cbSceneParam._m0[77u].w : min(_419, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2618 = _2616.x;
    float _2619 = _2616.y;
    float _2620 = _2616.z;
    float _2621 = _2616.w;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    if (_419 > cbSceneParam._m0[78u].w)
    {
        float _2655 = isnan(_419) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _419 : min(cbSceneParam._m0[80u].w, _419));
        float _2656 = _2655 / _419;
        float _2667 = _2656 * _470;
        float _2668 = _471 * _2656;
        float _2669 = (-0.0) - _2668;
        float _2670 = _2656 * _472;
        float _2672 = (cbSceneParam._m0[77u].w * _2669) / _2655;
        float _2673 = _2672 + cbSceneParam._m0[79u].w;
        float _2674 = cbSceneParam._m0[79u].w - _2668;
        float _2680 = sqrt(((_2667 * _2667) + (_2668 * _2668)) + (_2670 * _2670));
        float _2683 = (1.0 - (cbSceneParam._m0[77u].w / _2655)) * _2680;
        float _2688 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2690 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2843;
        if (abs((_2669 - _2672) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2843 = ((((_2673 > 0.0) ? exp2(_2688 * _2673) : (2.0 - exp2(_2690 * _2673))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2683;
        }
        else
        {
            float _2803 = 1.0 / cbSceneParam._m0[80u].x;
            float _2804 = isnan(_2674) ? _2673 : (isnan(_2673) ? _2674 : max(_2673, _2674));
            float _2805 = isnan(_2674) ? _2673 : (isnan(_2673) ? _2674 : min(_2673, _2674));
            float _2814 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : min(_2804, 0.0));
            float _2815 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : min(_2805, 0.0));
            _2843 = ((abs(_2680 / _2669) * cbSceneParam._m0[80u].y) * ((((_2814 - _2815) * 2.0) - ((exp2(_2688 * (isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0)))) - exp2(_2688 * (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0))))) * _2803)) - ((exp2(_2690 * _2814) - exp2(_2690 * _2815)) * _2803))) + (_2683 * cbSceneParam._m0[80u].z);
        }
        vec4 _2845 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2601, _2602, 1.0), 0.0);
        float _2854 = exp2((_2843 * (-1.44269502162933349609375)) * (1.0 - _2845.w));
        float _2855 = log2(_2854);
        float _2871 = log2(_2621);
        _2692 = (exp2(_2871 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2855 * cbSceneParam._m0[78u].x)) * _2845.x) / cbSceneParam._m0[78u].x)) + _2618;
        _2694 = (exp2(_2871 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2855 * cbSceneParam._m0[78u].y)) * _2845.y) / cbSceneParam._m0[78u].y)) + _2619;
        _2696 = (exp2(_2871 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2855 * cbSceneParam._m0[78u].z)) * _2845.z) / cbSceneParam._m0[78u].z)) + _2620;
        _2698 = _2854 * _2621;
    }
    else
    {
        _2692 = _2618;
        _2694 = _2619;
        _2696 = _2620;
        _2698 = _2621;
    }
    float _2710 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2711 = _2710 == 3.0;
    float _2712 = log2(_2698);
    float _2719 = exp2(_2712 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2563 + ((isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))) * _552))) + ((_2569 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _1359)) * cbPerFrame._m0[3u].x));
    float _2720 = exp2(_2712 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2565 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _552))) + ((_2571 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _1359)) * cbPerFrame._m0[3u].x));
    float _2721 = exp2(_2712 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2567 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _552))) + ((_2573 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _1359)) * cbPerFrame._m0[3u].x));
    float _2730 = (_2710 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2730 * (_2711 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2692)));
    SV_Target.y = _2730 * (_2711 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2694)));
    SV_Target.z = _2730 * (_2711 ? _2721 : (_2721 + (cbSceneParam._m0[72u].w * _2696)));
    SV_Target.w = cbInstanceData._m0[_2593].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2593].w;
}


