#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _900;
float _3576;
float _3577;
float _3578;
float _3579;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.w;
    float _247 = _240.x * cbMtdParam._m0[9u].x;
    float _248 = _240.y * cbMtdParam._m0[9u].y;
    float _249 = _240.z * cbMtdParam._m0[9u].z;
    float _250 = _246 * TEXCOORD_1.z;
    vec4 _266 = texture(sampler2D(M_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _269 = _266.x + cbMtdParam._m0[10u].x;
    vec4 _281 = texture(sampler2D(M_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _285 = _281.z;
    float _289 = (_281.x * 2.0) + (-1.0);
    float _291 = (_281.y * 2.0) + (-1.0);
    float _292 = dot(vec2(_289, _291), vec2(_289, _291));
    float _3588 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _298 = sqrt(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))));
    float _301 = fma(_298, _218, fma(_291, _210 * TANGENT.x, (_196 * _188) * _289));
    float _304 = fma(_298, _219, fma(_291, _210 * TANGENT.y, (_196 * _189) * _289));
    float _307 = fma(_298, _220, fma(_291, _210 * TANGENT.z, (_196 * _190) * _289));
    float _311 = inversesqrt(dot(vec3(_301, _304, _307), vec3(_301, _304, _307)));
    float _312 = _311 * _301;
    float _313 = _311 * _304;
    float _314 = _311 * _307;
    float _3599 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _315 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _316 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3632 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3643 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3654 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _320 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _336 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    vec4 _401 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _403 = _401.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _579 = sqrt(((_387 * _387) + (_388 * _388)) + (_389 * _389));
        float _585 = (cbMatDynParam._m0[5u].x * _579) + cbMatDynParam._m0[5u].y;
        float _3665 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _586 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _590 = (cbMatDynParam._m0[5u].z * _579) + cbMatDynParam._m0[5u].w;
        float _3676 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) - _586)) + _586) < ((_403 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _415 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _416 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _436 = fma(_314, cbSceneParam._m0[5u].z, fma(_313, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _312));
    float _439 = fma(_314, cbSceneParam._m0[6u].z, fma(_313, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _312));
    float _442 = fma(_314, cbSceneParam._m0[7u].z, fma(_313, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _312));
    uint _455 = uint(roundEven(NORMAL.w)) * 13u;
    uint _457 = _455 + 9u;
    uint _458 = _457 + uint(cbMatDynParam._m0[0u].w);
    float _464 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_458].x;
    float _465 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_458].y;
    float _466 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_458].z;
    float _3687 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _468 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _470 = 1.0 - _320;
    float _471 = _467 * _470;
    float _472 = _468 * _470;
    float _473 = _469 * _470;
    float _478 = (_467 + (-0.039999999105930328369140625)) * _320;
    float _479 = (_468 + (-0.039999999105930328369140625)) * _320;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _320;
    float _481 = _478 + 0.039999999105930328369140625;
    float _483 = _479 + 0.039999999105930328369140625;
    float _484 = _480 + 0.039999999105930328369140625;
    vec4 _493 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _415, cbSceneParam._m0[86u].y * _416));
    float _496 = _493.x * TEXCOORD_1.w;
    float _497 = dot(vec3(_312, _313, _314), vec3(_394, _395, _396));
    float _500 = _497 * 2.0;
    float _504 = (_500 * _312) - _394;
    float _505 = (_500 * _313) - _395;
    float _506 = (_500 * _314) - _396;
    float _510 = abs(dot(vec3(_394, _395, _396), vec3(_312, _313, _314)));
    float _3720 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _512 = sqrt(_316);
    float _525 = exp2((_512 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_512 * 3.0));
    float _531 = (1.0 - _525) * ((_512 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _532 = _525 * _512;
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _899;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _624 = fma(_568, cbModelParam._m0[26u].z, fma(_564, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _560));
        float _628 = fma(_568, cbModelParam._m0[27u].z, fma(_564, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _560));
        float _632 = fma(_568, cbModelParam._m0[28u].z, fma(_564, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _560));
        float _657 = _560 + _312;
        float _658 = _564 + _313;
        float _659 = _568 + _314;
        float _669 = fma(_659, cbModelParam._m0[26u].z, fma(_658, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _657)) - _624;
        float _670 = fma(_659, cbModelParam._m0[27u].z, fma(_658, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _657)) - _628;
        float _671 = fma(_659, cbModelParam._m0[28u].z, fma(_658, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _657)) - _632;
        float _675 = inversesqrt(dot(vec3(_669, _670, _671), vec3(_669, _670, _671)));
        float _688 = ((_675 * _669) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_624 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _689 = ((_675 * _670) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_628 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _690 = ((_675 * _671) / cbModelParam._m0[34u].z) + ((((((_632 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        float _727 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_693.x + (-0.5));
        float _729 = _727 * (_693.y + (-0.5));
        float _730 = _727 * (_693.z + (-0.5));
        float _737 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_700.x + (-0.5));
        float _739 = _737 * (_700.y + (-0.5));
        float _740 = _737 * (_700.z + (-0.5));
        float _747 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_707.x + (-0.5));
        float _749 = _747 * (_707.y + (-0.5));
        float _750 = _747 * (_707.z + (-0.5));
        float _757 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_714.x + (-0.5));
        float _759 = _757 * (_714.y + (-0.5));
        float _760 = _757 * (_714.z + (-0.5));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = _728 * 0.5;
        float _765 = _738 * 0.5;
        float _766 = _748 * 0.5;
        float _767 = dot(vec3(_764, _765, _766), vec3(_764, _765, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _781 = (dot(vec3(_312, _313, _314), vec3(_772 * _764, _772 * _765, _772 * _766)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _791 = sqrt(((_765 * _765) + (_764 * _764)) + (_766 * _766)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _3768 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_793 + 1.0))) + _798) * _761;
        float _808 = _729 * 0.5;
        float _809 = _739 * 0.5;
        float _810 = _749 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _824 = (dot(vec3(_312, _313, _314), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _833 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3801 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_835 + 1.0))) + _840) * _762;
        float _850 = _730 * 0.5;
        float _851 = _740 * 0.5;
        float _852 = _750 * 0.5;
        float _853 = dot(vec3(_850, _851, _852), vec3(_850, _851, _852));
        float _858 = (_853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_853);
        float _866 = (dot(vec3(_312, _313, _314), vec3(_858 * _850, _858 * _851, _858 * _852)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _875 = sqrt(((_851 * _851) + (_850 * _850)) + (_852 * _852)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _877 = _876 * 2.0;
        float _881 = (1.0 - _876) / (_876 + 1.0);
        float _3834 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _891 = ((((1.0 - _882) * (_877 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_877 + 1.0))) + _882) * _763;
        _899 = _730;
        _901 = _729;
        _902 = _728;
        _903 = _740;
        _904 = _739;
        _905 = _738;
        _906 = _750;
        _907 = _749;
        _908 = _748;
        _909 = _763;
        _910 = _762;
        _911 = _761;
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)));
    }
    else
    {
        _899 = _900;
        _901 = _900;
        _902 = _900;
        _903 = _900;
        _904 = _900;
        _905 = _900;
        _906 = _900;
        _907 = _900;
        _908 = _900;
        _909 = _900;
        _910 = _900;
        _911 = _900;
        _912 = 0.0;
        _913 = 0.0;
        _914 = 0.0;
    }
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _943 = fma(_568, cbModelParam._m0[30u].z, fma(_564, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _560));
        float _947 = fma(_568, cbModelParam._m0[31u].z, fma(_564, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _560));
        float _951 = fma(_568, cbModelParam._m0[32u].z, fma(_564, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _560));
        float _974 = _560 + _312;
        float _975 = _564 + _313;
        float _976 = _568 + _314;
        float _986 = fma(_976, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974)) - _943;
        float _987 = fma(_976, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974)) - _947;
        float _988 = fma(_976, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974)) - _951;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_943 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_947 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[35u].z) + ((((((_951 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1042 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1009.x + (-0.5));
        float _1044 = _1042 * (_1009.y + (-0.5));
        float _1045 = _1042 * (_1009.z + (-0.5));
        float _1052 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1016.x + (-0.5));
        float _1054 = _1052 * (_1016.y + (-0.5));
        float _1055 = _1052 * (_1016.z + (-0.5));
        float _1062 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1023.x + (-0.5));
        float _1064 = _1062 * (_1023.y + (-0.5));
        float _1065 = _1062 * (_1023.z + (-0.5));
        float _1072 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1030.x + (-0.5));
        float _1074 = _1072 * (_1030.y + (-0.5));
        float _1075 = _1072 * (_1030.z + (-0.5));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = _1043 * 0.5;
        float _1080 = _1053 * 0.5;
        float _1081 = _1063 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_312, _313, _314), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3897 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1106 + 1.0))) + _1111) * _1076;
        float _1121 = _1044 * 0.5;
        float _1122 = _1054 * 0.5;
        float _1123 = _1064 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_312, _313, _314), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3930 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1148 + 1.0))) + _1153) * _1077;
        float _1163 = _1045 * 0.5;
        float _1164 = _1055 * 0.5;
        float _1165 = _1065 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_312, _313, _314), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3963 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1190 + 1.0))) + _1195) * _1078;
        _1212 = _1045;
        _1213 = _1044;
        _1214 = _1043;
        _1215 = _1055;
        _1216 = _1054;
        _1217 = _1053;
        _1218 = _1065;
        _1219 = _1064;
        _1220 = _1063;
        _1221 = _1078;
        _1222 = _1077;
        _1223 = _1076;
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
    }
    else
    {
        _1212 = _900;
        _1213 = _900;
        _1214 = _900;
        _1215 = _900;
        _1216 = _900;
        _1217 = _900;
        _1218 = _900;
        _1219 = _900;
        _1220 = _900;
        _1221 = _900;
        _1222 = _900;
        _1223 = _900;
        _1224 = 0.0;
        _1225 = 0.0;
        _1226 = 0.0;
    }
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _912)) + _912;
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _913)) + _913;
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _914)) + _914;
    float _1259 = fma(_1238, cbSceneParam._m0[89u].z, fma(_1237, cbSceneParam._m0[89u].y, _1236 * cbSceneParam._m0[89u].x));
    float _1262 = fma(_1238, cbSceneParam._m0[90u].z, fma(_1237, cbSceneParam._m0[90u].y, _1236 * cbSceneParam._m0[90u].x));
    float _1265 = fma(_1238, cbSceneParam._m0[91u].z, fma(_1237, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1236));
    float _1280 = _504 * 0.5;
    float _1281 = _505 * 0.5;
    float _1282 = _506 * 0.5;
    float _1283 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1286 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1289 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1323;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1296 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_899, _903, _906, _909));
        float _1300 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_901, _904, _907, _910));
        float _1304 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_902, _905, _908, _911));
        float _1311 = dot(vec4(cbModelParam._m0[39u]), vec4(_1280, _1281, _1282, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1311) ? 0.0 : (isnan(0.0) ? _1311 : max(0.0, _1311))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1334;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1325 = dot(vec4(cbModelParam._m0[40u]), vec4(_1280, _1281, _1282, 1.0));
        _1334 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1325) ? 0.0 : (isnan(0.0) ? _1325 : max(0.0, _1325))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1334 = 1.0;
    }
    float _1338 = (_1334 * cbModelParam._m0[1u].x) + (_1323 * (1.0 - cbModelParam._m0[1u].x));
    float _1348 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _316);
    float _1349 = isnan(_1348) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1348 : min(cbModelParam._m0[25u].z, _1348));
    float _1431;
    float _1433;
    float _1435;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1398 = fma(_568, cbModelParam._m0[13u].z, fma(_564, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _560)) + cbModelParam._m0[13u].w;
        float _1402 = fma(_568, cbModelParam._m0[14u].z, fma(_564, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _560)) + cbModelParam._m0[14u].w;
        float _1406 = fma(_568, cbModelParam._m0[15u].z, fma(_564, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _560)) + cbModelParam._m0[15u].w;
        float _1409 = fma(_506, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504));
        float _1412 = fma(_506, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504));
        float _1415 = fma(_506, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504));
        float _1443;
        if (_1409 > 0.0)
        {
            _1443 = abs((1.0 - _1398) / _1409);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1398 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1443 = frontier_phi_19_17_ladder;
        }
        float _1619;
        if (_1412 > 0.0)
        {
            _1619 = abs((1.0 - _1402) / _1412);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1402 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1619 = frontier_phi_28_24_ladder;
        }
        float _1915;
        if (_1415 > 0.0)
        {
            _1915 = abs((1.0 - _1406) / _1415);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1406 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1915 = frontier_phi_40_35_ladder;
        }
        float _1917 = isnan(_1619) ? _1443 : (isnan(_1443) ? _1619 : min(_1443, _1619));
        float _1918 = isnan(_1915) ? _1917 : (isnan(_1917) ? _1915 : min(_1917, _1915));
        float _1922 = (_1918 * _1409) + _1398;
        float _1923 = (_1918 * _1412) + _1402;
        float _1924 = (_1918 * _1415) + _1406;
        float _1925 = _1918 * 9.9999997473787516355514526367188e-05;
        float _1927 = (-1.0) - _1925;
        float _1929 = _1925 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1924 > _1929) || ((_1924 < _1927) || ((_1923 > _1929) || ((_1923 < _1927) || ((_1922 < _1927) || (_1922 > _1929))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2069 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1924, cbModelParam._m0[9u].z, fma(_1923, cbModelParam._m0[9u].y, _1922 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1924, cbModelParam._m0[10u].z, fma(_1923, cbModelParam._m0[10u].y, _1922 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1924, cbModelParam._m0[11u].z, fma(_1923, cbModelParam._m0[11u].y, _1922 * cbModelParam._m0[11u].x))), _1349);
            frontier_phi_18_40_ladder = _2069.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2069.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2069.x * cbModelParam._m0[1u].y;
        }
        _1431 = frontier_phi_18_40_ladder_2;
        _1433 = frontier_phi_18_40_ladder_1;
        _1435 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1419 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_504, _505, _506), _1349);
        _1431 = _1419.x * cbModelParam._m0[1u].y;
        _1433 = _1419.y * cbModelParam._m0[1u].y;
        _1435 = _1419.z * cbModelParam._m0[1u].y;
    }
    float _1439 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _316);
    float _1440 = isnan(_1439) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1439 : min(cbModelParam._m0[25u].w, _1439));
    float _1533;
    float _1535;
    float _1537;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1497 = fma(_568, cbModelParam._m0[21u].z, fma(_564, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _560)) + cbModelParam._m0[21u].w;
        float _1501 = fma(_568, cbModelParam._m0[22u].z, fma(_564, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _560)) + cbModelParam._m0[22u].w;
        float _1505 = fma(_568, cbModelParam._m0[23u].z, fma(_564, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _560)) + cbModelParam._m0[23u].w;
        float _1508 = fma(_506, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504));
        float _1511 = fma(_506, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504));
        float _1514 = fma(_506, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504));
        float _1624;
        if (_1508 > 0.0)
        {
            _1624 = abs((1.0 - _1497) / _1508);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1497 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1624 = frontier_phi_30_26_ladder;
        }
        float _1942;
        if (_1511 > 0.0)
        {
            _1942 = abs((1.0 - _1501) / _1511);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1501 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1942 = frontier_phi_42_37_ladder;
        }
        float _2280;
        if (_1514 > 0.0)
        {
            _2280 = abs((1.0 - _1505) / _1514);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1505 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2280 = frontier_phi_52_49_ladder;
        }
        float _2282 = isnan(_1942) ? _1624 : (isnan(_1624) ? _1942 : min(_1624, _1942));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1508) + _1497;
        float _2288 = (_2283 * _1511) + _1501;
        float _2289 = (_2283 * _1514) + _1505;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2290;
        float _2293 = _2290 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2289 > _2293) || ((_2289 < _2291) || ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 < _2291) || (_2287 > _2293))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2411 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2289, cbModelParam._m0[17u].z, fma(_2288, cbModelParam._m0[17u].y, _2287 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2289, cbModelParam._m0[18u].z, fma(_2288, cbModelParam._m0[18u].y, _2287 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2289, cbModelParam._m0[19u].z, fma(_2288, cbModelParam._m0[19u].y, _2287 * cbModelParam._m0[19u].x))), _1440);
            frontier_phi_27_52_ladder = _2411.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2411.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2411.x * cbModelParam._m0[1u].z;
        }
        _1533 = frontier_phi_27_52_ladder_2;
        _1535 = frontier_phi_27_52_ladder_1;
        _1537 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_504, _505, _506), _1440);
        _1533 = _1517.x * cbModelParam._m0[1u].z;
        _1535 = _1517.y * cbModelParam._m0[1u].z;
        _1537 = _1517.z * cbModelParam._m0[1u].z;
    }
    float _1550 = (((_531 * _481) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1533 - _1431)) + _1431);
    float _1552 = (((_531 * _483) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1535 - _1433)) + _1433);
    float _1554 = (((_531 * _484) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1557 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1550 * cbSceneParam._m0[89u].x));
    float _1560 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1550 * cbSceneParam._m0[90u].x));
    float _1563 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, _1550 * cbSceneParam._m0[91u].x));
    float _1598 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1602 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1606 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1610 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1611 = _1598 / _1610;
    float _1612 = _1602 / _1610;
    float _1613 = _1606 / _1610;
    float _1760;
    float _1761;
    float _1762;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1640 = ((uint(_1613 > cbSceneParam._m0[59u].y) + uint(_1613 > cbSceneParam._m0[59u].x)) + uint(_1613 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1641 = _1640 + 43u;
        uint _1649 = _1640 + 44u;
        uint _1657 = _1640 + 45u;
        uint _1665 = _1640 + 46u;
        float _1676 = fma(_1610, cbSceneParam._m0[_1641].w, fma(_1606, cbSceneParam._m0[_1641].z, fma(_1602, cbSceneParam._m0[_1641].y, _1598 * cbSceneParam._m0[_1641].x)));
        float _1680 = fma(_1610, cbSceneParam._m0[_1649].w, fma(_1606, cbSceneParam._m0[_1649].z, fma(_1602, cbSceneParam._m0[_1649].y, _1598 * cbSceneParam._m0[_1649].x)));
        float _1688 = fma(_1610, cbSceneParam._m0[_1665].w, fma(_1606, cbSceneParam._m0[_1665].z, fma(_1602, cbSceneParam._m0[_1665].y, _1598 * cbSceneParam._m0[_1665].x)));
        float _1693 = cbSceneParam._m0[33u].z * _1688;
        float _1695 = cbSceneParam._m0[33u].w * _1688;
        float _1698 = fma(_1610, cbSceneParam._m0[_1657].w, fma(_1606, cbSceneParam._m0[_1657].z, fma(_1602, cbSceneParam._m0[_1657].y, _1598 * cbSceneParam._m0[_1657].x))) / _1688;
        float _1746 = (cbSceneParam._m0[33u].x - sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613))) * cbSceneParam._m0[33u].y;
        float _4089 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1753 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1693 + _1676) / _1688, (_1695 + _1680) / _1688), _1698), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1695 + _1676) / _1688, (_1680 - _1693) / _1688), _1698), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1676 - _1693) / _1688, (_1680 - _1695) / _1688), _1698), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1676 - _1695) / _1688, (_1693 + _1680) / _1688), _1698), 0.0)).x), vec4(0.25)));
        _1760 = 1.0 - (_1753 * cbSceneParam._m0[34u].x);
        _1761 = 1.0 - (_1753 * cbSceneParam._m0[34u].y);
        _1762 = 1.0 - (_1753 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1760 = 1.0;
        _1761 = 1.0;
        _1762 = 1.0;
    }
    float _1826;
    float _1828;
    float _1830;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1814 = fma(_1610, cbSceneParam._m0[63u].w, fma(_1606, cbSceneParam._m0[63u].z, fma(_1602, cbSceneParam._m0[63u].y, _1598 * cbSceneParam._m0[63u].x)));
        float _1815 = fma(_1610, cbSceneParam._m0[60u].w, fma(_1606, cbSceneParam._m0[60u].z, fma(_1602, cbSceneParam._m0[60u].y, _1598 * cbSceneParam._m0[60u].x))) / _1814;
        float _1816 = fma(_1610, cbSceneParam._m0[61u].w, fma(_1606, cbSceneParam._m0[61u].z, fma(_1602, cbSceneParam._m0[61u].y, _1598 * cbSceneParam._m0[61u].x))) / _1814;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1815 >= cbSceneParam._m0[64u].x) && (_1816 >= cbSceneParam._m0[64u].y)) && (_1815 <= cbSceneParam._m0[64u].z)) && (_1816 <= cbSceneParam._m0[64u].w))
        {
            float _1955 = fma(_1610, cbSceneParam._m0[62u].w, fma(_1606, cbSceneParam._m0[62u].z, fma(_1602, cbSceneParam._m0[62u].y, _1598 * cbSceneParam._m0[62u].x))) / _1814;
            float _1959 = isnan(cbSceneParam._m0[41u].w) ? _1955 : (isnan(_1955) ? cbSceneParam._m0[41u].w : max(_1955, cbSceneParam._m0[41u].w));
            float _2002 = (cbSceneParam._m0[33u].x - sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613))) * cbSceneParam._m0[33u].y;
            float _4105 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
            float _2009 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1815, cbSceneParam._m0[33u].w + _1816), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1815, _1816 - cbSceneParam._m0[33u].z), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1815 - cbSceneParam._m0[33u].z, _1816 - cbSceneParam._m0[33u].w), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1815 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1816), _1959), 0.0)).x), vec4(0.25)));
            float _2013 = 1.0 - (_2009 * cbSceneParam._m0[34u].x);
            float _2014 = 1.0 - (_2009 * cbSceneParam._m0[34u].y);
            float _2015 = 1.0 - (_2009 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2014) ? _1761 : (isnan(_1761) ? _2014 : min(_1761, _2014));
            frontier_phi_39_38_ladder_1 = isnan(_2013) ? _1760 : (isnan(_1760) ? _2013 : min(_1760, _2013));
            frontier_phi_39_38_ladder_2 = isnan(_2015) ? _1762 : (isnan(_1762) ? _2015 : min(_1762, _2015));
        }
        else
        {
            frontier_phi_39_38_ladder = _1761;
            frontier_phi_39_38_ladder_1 = _1760;
            frontier_phi_39_38_ladder_2 = _1762;
        }
        _1826 = frontier_phi_39_38_ladder_1;
        _1828 = frontier_phi_39_38_ladder;
        _1830 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1826 = _1760;
        _1828 = _1761;
        _1830 = _1762;
    }
    uvec4 _1835 = floatBitsToUint(cbInstanceData._m0[_455 + 5u]);
    uint _1837 = _1835.x * 14u;
    uint _1838 = _1837 + 13u;
    float _1845 = _496 + (-1.0);
    float _1850 = (cbLight._m0[_1838].x * _1845) + 1.0;
    float _1851 = (cbLight._m0[_1838].y * _1845) + 1.0;
    float _1852 = (cbLight._m0[_1838].z * _1845) + 1.0;
    float _1853 = (cbLight._m0[_1838].w * _1845) + 1.0;
    uint _1854 = _1837 + 5u;
    float _1860 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
    uint _1864 = _1837 + 4u;
    float _1874 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
    uint _1878 = _1837 | 1u;
    float _1889 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_312, _313, _314));
    float _1892 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_312, _313, _314));
    float _4141 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _4152 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1897 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 0.3183098733425140380859375;
    float _1899 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * 0.3183098733425140380859375;
    float _1906 = ((cbLight._m0[_1854].x * _1860) * _1899) + (((cbLight._m0[_1864].x * _1826) * _1874) * _1897);
    float _1907 = ((_1860 * cbLight._m0[_1854].y) * _1899) + (((cbLight._m0[_1864].y * _1828) * _1874) * _1897);
    float _1908 = ((_1860 * cbLight._m0[_1854].z) * _1899) + (((cbLight._m0[_1864].z * _1830) * _1874) * _1897);
    uvec4 _1912 = floatBitsToUint(cbLight._m0[_1837 + 12u]);
    bool _1914 = _1912.x == 0u;
    float _2016;
    float _2018;
    float _2020;
    if (_1914)
    {
        _2016 = _1906;
        _2018 = _1907;
        _2020 = _1908;
    }
    else
    {
        uint _2024 = _1837 + 6u;
        float _2040 = (dot(vec3(cbLight._m0[_1837 + 2u].xyz), vec3(_312, _313, _314)) * 0.5) + 0.5;
        float _2041 = _2040 * _2040;
        float _4163 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2042 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2043 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _2016 = (((cbLight._m0[_2024].x * 0.3183098733425140380859375) * _2042) * _2043) + _1906;
        _2018 = (((cbLight._m0[_2024].y * 0.3183098733425140380859375) * _2042) * _2043) + _1907;
        _2020 = (((cbLight._m0[_2024].z * 0.3183098733425140380859375) * _2042) * _2043) + _1908;
    }
    bool _2023 = _1912.y == 0u;
    float _2078;
    float _2080;
    float _2082;
    if (_2023)
    {
        _2078 = _2016;
        _2080 = _2018;
        _2082 = _2020;
    }
    else
    {
        uint _2251 = _1837 + 7u;
        float _2267 = (dot(vec3(cbLight._m0[_1837 + 3u].xyz), vec3(_312, _313, _314)) * 0.5) + 0.5;
        float _2268 = _2267 * _2267;
        float _4179 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2269 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2270 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2078 = (((cbLight._m0[_2251].x * 0.3183098733425140380859375) * _2269) * _2270) + _2016;
        _2080 = (((cbLight._m0[_2251].y * 0.3183098733425140380859375) * _2269) * _2270) + _2018;
        _2082 = (((cbLight._m0[_2251].z * 0.3183098733425140380859375) * _2269) * _2270) + _2020;
    }
    uint _2085 = _1837 + 8u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1837].w)) * _316) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1837].x + _394;
    float _2101 = cbLight._m0[_1837].y + _395;
    float _2102 = cbLight._m0[_1837].z + _396;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1837].xyz));
    float _4195 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _4206 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _2114 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2115 = dot(vec3(_312, _313, _314), vec3(_2107, _2108, _2109));
    float _4217 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2119 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_2107, _2108, _2109));
    float _4228 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2123 = _2099 * _2099;
    float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
    float _2135 = exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0);
    float _2136 = 0.959999978542327880859375 - _478;
    float _2138 = 0.959999978542327880859375 - _479;
    float _2139 = 0.959999978542327880859375 - _480;
    float _2146 = 1.0 - _2099;
    float _2157 = (0.5 / (((_2114 * ((_2113 * _2146) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2146) + _2099) * _2113))) * _2113;
    float _4239 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2159 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
    uint _2173 = _1837 + 9u;
    float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1878].w)) * _316) * 0.949999988079071044921875);
    float _2185 = _2184 * _2184;
    float _2186 = cbLight._m0[_1878].x + _394;
    float _2187 = cbLight._m0[_1878].y + _395;
    float _2188 = cbLight._m0[_1878].z + _396;
    float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
    float _2193 = _2192 * _2186;
    float _2194 = _2192 * _2187;
    float _2195 = _2192 * _2188;
    float _2196 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1878].xyz));
    float _4250 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2200 = dot(vec3(_312, _313, _314), vec3(_2193, _2194, _2195));
    float _4261 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_2193, _2194, _2195));
    float _4272 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2185 * _2185;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2219 = exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0);
    float _2226 = 1.0 - _2185;
    float _2236 = (0.5 / (((_2114 * ((_2199 * _2226) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2226) + _2185) * _2199))) * _2199;
    float _4283 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2238 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    float _2248 = (((((_2219 * _2136) + _481) * cbLight._m0[_2173].x) * _2238) * _1860) + ((((cbLight._m0[_2085].x * _1826) * ((_2135 * _2136) + _481)) * _2159) * _1874);
    float _2249 = (((((_2219 * _2138) + _483) * cbLight._m0[_2173].y) * _2238) * _1860) + ((((cbLight._m0[_2085].y * _1828) * ((_2135 * _2138) + _483)) * _2159) * _1874);
    float _2250 = (((((_2219 * _2139) + _484) * cbLight._m0[_2173].z) * _2238) * _1860) + ((((cbLight._m0[_2085].z * _1830) * ((_2135 * _2139) + _484)) * _2159) * _1874);
    float _2306;
    float _2308;
    float _2310;
    if (_1914)
    {
        _2306 = _2248;
        _2308 = _2249;
        _2310 = _2250;
    }
    else
    {
        uint _2312 = _1837 + 2u;
        uint _2316 = _1837 + 10u;
        float _2330 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _316) * 0.949999988079071044921875);
        float _2331 = _2330 * _2330;
        float _2332 = cbLight._m0[_2312].x + _394;
        float _2333 = cbLight._m0[_2312].y + _395;
        float _2334 = cbLight._m0[_2312].z + _396;
        float _2338 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
        float _2339 = _2338 * _2332;
        float _2340 = _2338 * _2333;
        float _2341 = _2338 * _2334;
        float _2342 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_2312].xyz));
        float _4294 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2346 = dot(vec3(_312, _313, _314), vec3(_2339, _2340, _2341));
        float _4305 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2350 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2339, _2340, _2341));
        float _4316 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2354 = _2331 * _2331;
        float _2358 = ((_2349 * _2349) * (_2354 + (-1.0))) + 1.0;
        float _2365 = exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0);
        float _2372 = 1.0 - _2331;
        float _2382 = (0.5 / (((_2114 * ((_2345 * _2372) + _2331)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2372) + _2331) * _2345))) * _2345;
        float _4327 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2384 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2354 / ((_2358 * _2358) * 3.141590118408203125));
        float _2385 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _2306 = (((((_2365 * _2136) + _481) * cbLight._m0[_2316].x) * _2384) * _2385) + _2248;
        _2308 = (((((_2365 * _2138) + _483) * cbLight._m0[_2316].y) * _2384) * _2385) + _2249;
        _2310 = (((((_2365 * _2139) + _484) * cbLight._m0[_2316].z) * _2384) * _2385) + _2250;
    }
    float _2416;
    float _2418;
    float _2420;
    if (_2023)
    {
        _2416 = _2306;
        _2418 = _2308;
        _2420 = _2310;
    }
    else
    {
        uint _2427 = _1837 + 3u;
        uint _2431 = _1837 + 11u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _316) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _394;
        float _2448 = cbLight._m0[_2427].y + _395;
        float _2449 = cbLight._m0[_2427].z + _396;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_2427].xyz));
        float _4343 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2461 = dot(vec3(_312, _313, _314), vec3(_2454, _2455, _2456));
        float _4354 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4365 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0);
        float _2487 = 1.0 - _2446;
        float _2497 = (0.5 / (((_2114 * ((_2460 * _2487) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2487) + _2446) * _2460))) * _2460;
        float _4376 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2499 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2500 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2416 = (((((_2480 * _2136) + _481) * cbLight._m0[_2431].x) * _2499) * _2500) + _2306;
        _2418 = (((((_2480 * _2138) + _483) * cbLight._m0[_2431].y) * _2499) * _2500) + _2308;
        _2420 = (((((_2480 * _2139) + _484) * cbLight._m0[_2431].z) * _2499) * _2500) + _2310;
    }
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    if (_1835.y == 0u)
    {
        uvec4 _2521 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2522 = _2521.x;
        uint _2533 = uint((float(_2521.y) * floor(float(uint(cbSceneParam._m0[85u].y * _416) / _2522))) + floor(float(uint(cbSceneParam._m0[85u].x * _415) / _2522)));
        float _2543 = (log2(_1613 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2544 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        uint _2547 = uint(isnan(14.0) ? _2544 : (isnan(_2544) ? 14.0 : min(_2544, 14.0)));
        uvec4 _2552 = texelFetch(g_lightClusterGridBuffer, int(((_2547 << 2u) + (_2533 << 6u)) >> 2u));
        uint _2553 = _2552.x;
        uint _2554 = _2521.z;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        if (((((1u << ((_2554 >> 4u) & 15u)) + 4294967295u) & _2553) == 0u) || ((_2554 & 240u) == 0u))
        {
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
        }
        else
        {
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            uint _2792 = 0u;
            uint _2801;
            bool _2802;
            for (;;)
            {
                _2801 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2792 << 2u)) >> 2u)).x;
                _2802 = _2801 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2802)
                {
                    frontier_phi_73_pred = _2791;
                    frontier_phi_73_pred_1 = _2790;
                    frontier_phi_73_pred_2 = _2789;
                    frontier_phi_73_pred_3 = _2788;
                    frontier_phi_73_pred_4 = _2787;
                    frontier_phi_73_pred_5 = _2786;
                }
                else
                {
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    uint _2937;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2788;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2801;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    for (;;)
                    {
                        uint _2941 = uint(findLSB(_2937)) + (_2792 << 5u);
                        uint _2938 = (_2937 + 4294967295u) & _2937;
                        uint _2943 = _2941 * 48u;
                        vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 3u)).x));
                        uint _2963 = (_2941 * 48u) + 4u;
                        vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2963)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 3u)).x));
                        uint _2982 = (_2941 * 48u) + 8u;
                        vec3 _2993 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x));
                        float _2997 = _2957.x - _1611;
                        float _2998 = _2957.y - _1612;
                        float _2999 = _2957.z - _1613;
                        float _3000 = dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999));
                        float _3003 = inversesqrt(_3000);
                        float _3004 = _3003 * _2997;
                        float _3005 = _3003 * _2998;
                        float _3006 = _3003 * _2999;
                        float _3007 = dot(vec3(_436, _439, _442), vec3(_3004, _3005, _3006));
                        float _3012 = 1.0 - (_3000 * _2957.w);
                        float _4402 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3013 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3014 = sqrt(_3000) * _2976.w;
                        float _3017 = 1.39999997615814208984375 / (_3014 + 1.39999997615814208984375);
                        float _3018 = _3017 * _3017;
                        float _3021 = ((1.0 - _3018) * _3007) + _3018;
                        float _3024 = _3014 * _3014;
                        float _3028 = ((isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0))) * _3013) / ((_3024 * 0.699999988079071044921875) + 1.0);
                        float _3032 = (-0.0) - _1611;
                        float _3033 = (-0.0) - _1612;
                        float _3034 = (-0.0) - _1613;
                        float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
                        float _3039 = _3038 * _3032;
                        float _3040 = _3038 * _3033;
                        float _3041 = _3038 * _3034;
                        float _3048 = exp2(log2(1.0 / ((_3024 * 3.5) + 5.0)) * 0.25);
                        float _3049 = 1.0 - _512;
                        float _3056 = sqrt(1.0 - ((1.0 - (_3049 * _3049)) * (1.0 - (_3048 * _3048))));
                        float _3057 = _3056 * _3056;
                        float _3058 = _3057 * _3057;
                        float _3059 = _3039 + _3004;
                        float _3060 = _3040 + _3005;
                        float _3061 = _3041 + _3006;
                        float _3065 = inversesqrt(dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061)));
                        float _3069 = dot(vec3(_436, _439, _442), vec3(_3039, _3040, _3041));
                        float _4418 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3072 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3073 = dot(vec3(_436, _439, _442), vec3(_3065 * _3059, _3065 * _3060, _3065 * _3061));
                        float _4429 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3076 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3080 = ((_3076 * _3076) * (_3058 + (-1.0))) + 1.0;
                        float _3081 = _3017 * _3057;
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3007) + _3082;
                        float _4440 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3086 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                        float _3087 = 1.0 - _3057;
                        float _3097 = (0.5 / (((_3086 * ((_3072 * _3087) + _3057)) + 9.9999999392252902907785028219223e-09) + (((_3086 * _3087) + _3057) * _3072))) * _3086;
                        float _4451 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3108 = (((_3058 * 3.1415927410125732421875) * (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) / ((_3080 * _3080) * ((_3024 * 2.1991131305694580078125) + 3.141590118408203125))) * _3013;
                        _2861 = (_3028 * _2976.x) + _2934;
                        _2862 = (_3028 * _2976.y) + _2935;
                        _2863 = (_3028 * _2976.z) + _2936;
                        _2858 = (_3108 * _2993.x) + _2931;
                        _2859 = (_3108 * _2993.y) + _2932;
                        _2860 = (_3108 * _2993.z) + _2933;
                        if (_2938 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2938;
                        }
                    }
                    frontier_phi_73_pred = _2863;
                    frontier_phi_73_pred_1 = _2862;
                    frontier_phi_73_pred_2 = _2861;
                    frontier_phi_73_pred_3 = _2860;
                    frontier_phi_73_pred_4 = _2859;
                    frontier_phi_73_pred_5 = _2858;
                }
                _2645 = frontier_phi_73_pred;
                _2643 = frontier_phi_73_pred_1;
                _2641 = frontier_phi_73_pred_2;
                _2639 = frontier_phi_73_pred_3;
                _2637 = frontier_phi_73_pred_4;
                _2635 = frontier_phi_73_pred_5;
                uint _2793 = _2792 + 1u;
                if (_2793 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2786 = _2635;
                    _2787 = _2637;
                    _2788 = _2639;
                    _2789 = _2641;
                    _2790 = _2643;
                    _2791 = _2645;
                    _2792 = _2793;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
        }
        uvec4 _2648 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2649 = _2648.z;
        uint _2651 = (_2649 >> 8u) & 15u;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        if (((4294967295u << _2651) & _2553) == 0u)
        {
            _2754 = _2634;
            _2756 = _2636;
            _2758 = _2638;
            _2760 = _2640;
            _2762 = _2642;
            _2764 = _2644;
        }
        else
        {
            float _2779 = inversesqrt(dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613)));
            float _2780 = _2779 * _1611;
            float _2781 = _2779 * _1612;
            float _2782 = _2779 * _1613;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2651 < ((_2649 >> 12u) & 15u))
            {
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2914 = _2634;
                float _2915 = _2636;
                float _2916 = _2638;
                float _2917 = _2640;
                float _2918 = _2642;
                float _2919 = _2644;
                uint _2920 = _2651;
                uint _2929;
                bool _2930;
                for (;;)
                {
                    _2929 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2920 << 2u)) >> 2u)).x;
                    _2930 = _2929 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2930)
                    {
                        frontier_phi_84_pred = _2918;
                        frontier_phi_84_pred_1 = _2917;
                        frontier_phi_84_pred_2 = _2916;
                        frontier_phi_84_pred_3 = _2915;
                        frontier_phi_84_pred_4 = _2914;
                        frontier_phi_84_pred_5 = _2919;
                    }
                    else
                    {
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3135 = _2914;
                        float _3136 = _2915;
                        float _3137 = _2916;
                        float _3138 = _2917;
                        float _3139 = _2918;
                        float _3140 = _2919;
                        uint _3141 = _2929;
                        uint _3142;
                        vec4 _3167;
                        float _3168;
                        vec4 _3183;
                        vec3 _3195;
                        vec4 _3211;
                        vec4 _3227;
                        float _3274;
                        bool _3275;
                        for (;;)
                        {
                            uint _3152 = ((_2920 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3141));
                            _3142 = (_3141 + 4294967295u) & _3141;
                            uint _3154 = _3152 * 40u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            _3168 = _3167.w;
                            uint _3170 = (_3152 * 40u) + 4u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3185 = (_3152 * 40u) + 8u;
                            _3195 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x));
                            uint _3198 = (_3152 * 40u) + 16u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3214 = (_3152 * 40u) + 20u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3230 = (_3152 * 40u) + 24u;
                            vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3249 = (_3152 * 40u) + 28u;
                            vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            _3274 = fma(_1613, _3262.z, fma(_1612, _3262.y, _3262.x * _1611)) + _3262.w;
                            _3275 = !((fma(_1613, _3243.z, fma(_1612, _3243.y, _3243.x * _1611)) + _3243.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3275)
                            {
                                float _3302 = _3167.x - _1611;
                                float _3303 = _3167.y - _1612;
                                float _3304 = _3167.z - _1613;
                                float _3305 = dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304));
                                float _3308 = inversesqrt(_3305);
                                float _3309 = _3308 * _3302;
                                float _3310 = _3308 * _3303;
                                float _3311 = _3308 * _3304;
                                float _3315 = 1.0 - (_3305 / (_3168 * _3168));
                                float _4462 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3320 = sqrt(_3305) * _3183.w;
                                float _3322 = 1.39999997615814208984375 / (_3320 + 1.39999997615814208984375);
                                float _3323 = _3322 * _3322;
                                float _3326 = ((1.0 - _3323) * dot(vec3(_3309, _3310, _3311), vec3(_436, _439, _442))) + _3323;
                                float _3329 = _3320 * _3320;
                                float _3333 = (fma(_1613, _3211.z, fma(_1612, _3211.y, _3211.x * _1611)) + _3211.w) / _3274;
                                float _3334 = (fma(_1613, _3227.z, fma(_1612, _3227.y, _3227.x * _1611)) + _3227.w) / _3274;
                                float _3338 = 1.0 - dot(vec2(_3333, _3334), vec2(_3333, _3334));
                                float _4478 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3340 = _3339 * (((isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0))) * _3316) / ((_3329 * 0.699999988079071044921875) + 1.0));
                                float _3352 = exp2(log2(1.0 / ((_3329 * 3.5) + 5.0)) * 0.25);
                                float _3353 = 1.0 - _512;
                                float _3360 = sqrt(1.0 - ((1.0 - (_3353 * _3353)) * (1.0 - (_3352 * _3352))));
                                float _3361 = _3360 * _3360;
                                float _3362 = _3361 * _3361;
                                float _3363 = _3309 - _2780;
                                float _3364 = _3310 - _2781;
                                float _3365 = _3311 - _2782;
                                float _3369 = inversesqrt(dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365)));
                                float _3373 = dot(vec3(_436, _439, _442), vec3((-0.0) - _2780, (-0.0) - _2781, (-0.0) - _2782));
                                float _4489 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3376 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3377 = dot(vec3(_436, _439, _442), vec3(_3369 * _3363, _3369 * _3364, _3369 * _3365));
                                float _4500 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3380 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3384 = ((_3380 * _3380) * (_3362 + (-1.0))) + 1.0;
                                float _3385 = _3322 * _3361;
                                float _3386 = _3385 * _3385;
                                float _3392 = ((1.0 - _3386) * dot(vec3(_436, _439, _442), vec3(_3309, _3310, _3311))) + _3386;
                                float _4511 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3394 = 1.0 - _3361;
                                float _3404 = (0.5 / (((_3393 * ((_3376 * _3394) + _3361)) + 9.9999999392252902907785028219223e-09) + (((_3393 * _3394) + _3361) * _3376))) * _3393;
                                float _4522 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3414 = (_3339 * _3316) * (((_3362 * 3.1415927410125732421875) * (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) / ((_3384 * _3384) * ((_3329 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3340 * _3183.y;
                                frontier_phi_90_pred_1 = _3340 * _3183.x;
                                frontier_phi_90_pred_2 = _3414 * _3195.z;
                                frontier_phi_90_pred_3 = _3414 * _3195.y;
                                frontier_phi_90_pred_4 = _3414 * _3195.x;
                                frontier_phi_90_pred_5 = _3340 * _3183.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3422 = frontier_phi_90_pred;
                            _3421 = frontier_phi_90_pred_1;
                            _3420 = frontier_phi_90_pred_2;
                            _3419 = frontier_phi_90_pred_3;
                            _3418 = frontier_phi_90_pred_4;
                            _3423 = frontier_phi_90_pred_5;
                            _3125 = _3421 + _3138;
                            _3126 = _3422 + _3139;
                            _3127 = _3423 + _3140;
                            _3122 = _3418 + _3135;
                            _3123 = _3419 + _3136;
                            _3124 = _3420 + _3137;
                            if (_3142 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3142;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3126;
                        frontier_phi_84_pred_1 = _3125;
                        frontier_phi_84_pred_2 = _3124;
                        frontier_phi_84_pred_3 = _3123;
                        frontier_phi_84_pred_4 = _3122;
                        frontier_phi_84_pred_5 = _3127;
                    }
                    _2763 = frontier_phi_84_pred;
                    _2761 = frontier_phi_84_pred_1;
                    _2759 = frontier_phi_84_pred_2;
                    _2757 = frontier_phi_84_pred_3;
                    _2755 = frontier_phi_84_pred_4;
                    _2765 = frontier_phi_84_pred_5;
                    uint _2921 = _2920 + 1u;
                    if (_2921 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2914 = _2755;
                        _2915 = _2757;
                        _2916 = _2759;
                        _2917 = _2761;
                        _2918 = _2763;
                        _2919 = _2765;
                        _2920 = _2921;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2765;
                frontier_phi_65_66_ladder_1 = _2761;
                frontier_phi_65_66_ladder_2 = _2763;
                frontier_phi_65_66_ladder_3 = _2757;
                frontier_phi_65_66_ladder_4 = _2755;
                frontier_phi_65_66_ladder_5 = _2759;
            }
            else
            {
                frontier_phi_65_66_ladder = _2644;
                frontier_phi_65_66_ladder_1 = _2640;
                frontier_phi_65_66_ladder_2 = _2642;
                frontier_phi_65_66_ladder_3 = _2636;
                frontier_phi_65_66_ladder_4 = _2634;
                frontier_phi_65_66_ladder_5 = _2638;
            }
            _2754 = frontier_phi_65_66_ladder_4;
            _2756 = frontier_phi_65_66_ladder_3;
            _2758 = frontier_phi_65_66_ladder_5;
            _2760 = frontier_phi_65_66_ladder_1;
            _2762 = frontier_phi_65_66_ladder_2;
            _2764 = frontier_phi_65_66_ladder;
        }
        float _2769 = isnan(1.0) ? _496 : (isnan(_496) ? 1.0 : min(_496, 1.0));
        _2565 = (_2769 * _2760) + _2078;
        _2567 = (_2769 * _2762) + _2080;
        _2569 = (_2769 * _2764) + _2082;
        _2571 = ((_2754 * _481) * _2769) + _2416;
        _2573 = ((_2756 * _483) * _2769) + _2418;
        _2575 = ((_2758 * _484) * _2769) + _2420;
    }
    else
    {
        _2565 = _2078;
        _2567 = _2080;
        _2569 = _2082;
        _2571 = _2416;
        _2573 = _2418;
        _2575 = _2420;
    }
    float _4538 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _4549 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4560 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4571 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _2593 = ((isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2565 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _496))) + ((_2571 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1338)) * cbPerFrame._m0[3u].x);
    float _2594 = ((isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2567 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _496))) + ((_2573 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1338)) * cbPerFrame._m0[3u].x);
    float _2595 = ((isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2569 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _496))) + ((_2575 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1338)) * cbPerFrame._m0[3u].x);
    float _2600 = cbInstanceData._m0[_455 + 6u].w * (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)));
    float _2605 = _415 / cbSceneParam._m0[86u].x;
    float _2606 = _416 / cbSceneParam._m0[86u].y;
    vec4 _2620 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2605, _2606, (log2((isnan(cbSceneParam._m0[77u].w) ? _336 : (isnan(_336) ? cbSceneParam._m0[77u].w : min(_336, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2622 = _2620.x;
    float _2623 = _2620.y;
    float _2624 = _2620.z;
    float _2625 = _2620.w;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    if (_336 > cbSceneParam._m0[78u].w)
    {
        float _2659 = isnan(_336) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _336 : min(cbSceneParam._m0[80u].w, _336));
        float _2660 = _2659 / _336;
        float _2671 = _2660 * _387;
        float _2672 = _388 * _2660;
        float _2673 = (-0.0) - _2672;
        float _2674 = _2660 * _389;
        float _2676 = (cbSceneParam._m0[77u].w * _2673) / _2659;
        float _2677 = _2676 + cbSceneParam._m0[79u].w;
        float _2678 = cbSceneParam._m0[79u].w - _2672;
        float _2684 = sqrt(((_2671 * _2671) + (_2672 * _2672)) + (_2674 * _2674));
        float _2687 = (1.0 - (cbSceneParam._m0[77u].w / _2659)) * _2684;
        float _2692 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2694 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2871;
        if (abs((_2673 - _2676) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2871 = ((((_2677 > 0.0) ? exp2(_2692 * _2677) : (2.0 - exp2(_2694 * _2677))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2687;
        }
        else
        {
            float _2815 = 1.0 / cbSceneParam._m0[80u].x;
            float _2816 = isnan(_2678) ? _2677 : (isnan(_2677) ? _2678 : max(_2677, _2678));
            float _2817 = isnan(_2678) ? _2677 : (isnan(_2677) ? _2678 : min(_2677, _2678));
            float _2826 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : min(_2816, 0.0));
            float _2827 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : min(_2817, 0.0));
            _2871 = ((abs(_2684 / _2673) * cbSceneParam._m0[80u].y) * ((((_2826 - _2827) * 2.0) - ((exp2(_2692 * (isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0)))) - exp2(_2692 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0))))) * _2815)) - ((exp2(_2694 * _2826) - exp2(_2694 * _2827)) * _2815))) + (_2687 * cbSceneParam._m0[80u].z);
        }
        vec4 _2873 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2605, _2606, 1.0), 0.0);
        float _2882 = exp2((_2871 * (-1.44269502162933349609375)) * (1.0 - _2873.w));
        float _2883 = log2(_2882);
        float _2899 = log2(_2625);
        _2696 = (exp2(_2899 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].x)) * _2873.x) / cbSceneParam._m0[78u].x)) + _2622;
        _2698 = (exp2(_2899 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].y)) * _2873.y) / cbSceneParam._m0[78u].y)) + _2623;
        _2700 = (exp2(_2899 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].z)) * _2873.z) / cbSceneParam._m0[78u].z)) + _2624;
        _2702 = _2882 * _2625;
    }
    else
    {
        _2696 = _2622;
        _2698 = _2623;
        _2700 = _2624;
        _2702 = _2625;
    }
    bool _2909;
    vec4 _2712;
    vec4 _2734;
    float _2736;
    float _2740;
    float _2741;
    float _2742;
    float _2743;
    bool _2753;
    for (;;)
    {
        _2712 = cbMatDynParam._m0[0u];
        float _2714 = roundEven(_2712.y);
        bool _2715 = _2714 == 3.0;
        float _2716 = log2(_2702);
        float _2723 = exp2(_2716 * cbSceneParam._m0[78u].x) * _2593;
        float _2724 = exp2(_2716 * cbSceneParam._m0[78u].y) * _2594;
        float _2725 = exp2(_2716 * cbSceneParam._m0[78u].z) * _2595;
        float _2732 = _403 + (-0.5);
        _2734 = cbMtdParam._m0[1u];
        _2736 = _2734.y * _2732;
        float _2739 = (_2714 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2740 = _2739 * (_2715 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2696)));
        _2741 = _2739 * (_2715 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2698)));
        _2742 = _2739 * (_2715 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2700)));
        _2743 = _2732 * 0.999000012874603271484375;
        _2753 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2753)
        {
            if ((cbInstanceData._m0[_455 + 7u].x + _2743) < 0.5)
            {
                _2909 = true;
                break;
            }
        }
        uint _2850 = _457 + uint(_2712.w);
        if ((cbInstanceData._m0[_2850].w < 1.0) && ((cbInstanceData._m0[_2850].w + _2743) < 0.5))
        {
            _2909 = true;
            break;
        }
        if ((_2736 + _246) < _2734.x)
        {
            _2909 = true;
            break;
        }
        _2909 = false;
        break;
    }
    float _3113;
    if (_2909)
    {
        discard_state = true;
        _3113 = 0.0;
    }
    else
    {
        _3113 = _2600;
    }
    SV_Target.x = _2740;
    SV_Target.y = _2741;
    SV_Target.z = _2742;
    SV_Target.w = _3113;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2600;
    discard_exit();
}


