#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1067;
float _3775;
float _3776;
float _3777;
float _3778;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    float _302 = (cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _303 = (cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _316 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_302 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_303 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _322 = _316.x * cbMtdParam._m0[9u].x;
    float _323 = _316.y * cbMtdParam._m0[9u].y;
    float _324 = _316.z * cbMtdParam._m0[9u].z;
    float _326 = cbMtdParam._m0[14u].z * TEXCOORD_1.z;
    vec4 _339 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    float _341 = _339.x;
    vec4 _354 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    float _358 = _354.z;
    float _362 = (_354.x * 2.0) + (-1.0);
    float _364 = (_354.y * 2.0) + (-1.0);
    float _365 = dot(vec2(_362, _364), vec2(_362, _364));
    float _3787 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _371 = sqrt(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))));
    float _382 = fma(0.9591662883758544921875, _228, fma(0.2000000476837158203125, _221, _207 * 0.2000000476837158203125));
    float _386 = fma(0.9591662883758544921875, _229, fma(0.2000000476837158203125, _222, _208 * 0.2000000476837158203125));
    float _389 = fma(0.9591662883758544921875, _230, fma(0.2000000476837158203125, _223, _209 * 0.2000000476837158203125));
    float _393 = inversesqrt(dot(vec3(_382, _386, _389), vec3(_382, _386, _389)));
    float _400 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _401 = _400 * _284;
    float _402 = _400 * _285;
    float _403 = _400 * _286;
    float _407 = dot(vec4(_401, _402, _403, 0.0), vec4(_393 * _382, _393 * _386, _393 * _389, 0.0)) - cbMtdParam._m0[14u].x;
    float _3798 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _414 = exp2(log2(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].y, 0.001000000047497451305389404296875))));
    vec4 _443 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _477 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _508 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _530 = fma(_371, _228, fma(_364, _221, _362 * _207));
    float _533 = fma(_371, _229, fma(_364, _222, _362 * _208));
    float _536 = fma(_371, _230, fma(_364, _223, _362 * _209));
    float _540 = inversesqrt(dot(vec3(_530, _533, _536), vec3(_530, _533, _536)));
    float _541 = _540 * _530;
    float _542 = _540 * _533;
    float _543 = _540 * _536;
    float _3814 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _544 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _545 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3847 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3858 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3869 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _549 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _565 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _570 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _572 = _570.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _746 = sqrt(((_284 * _284) + (_285 * _285)) + (_286 * _286));
        float _752 = (cbMatDynParam._m0[5u].x * _746) + cbMatDynParam._m0[5u].y;
        float _3880 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _757 = (cbMatDynParam._m0[5u].z * _746) + cbMatDynParam._m0[5u].w;
        float _3891 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) - _753)) + _753) < ((_572 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _584 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _585 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _604 = fma(_543, cbSceneParam._m0[5u].z, fma(_542, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _541));
    float _607 = fma(_543, cbSceneParam._m0[6u].z, fma(_542, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _541));
    float _610 = fma(_543, cbSceneParam._m0[7u].z, fma(_542, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _541));
    uint _623 = uint(roundEven(NORMAL.w)) * 13u;
    uint _624 = _623 + 9u;
    uint _625 = _624 + uint(cbMatDynParam._m0[0u].w);
    float _631 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_625].x;
    float _632 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_625].y;
    float _633 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * cbInstanceData._m0[_625].z;
    float _3902 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _637 = 1.0 - _549;
    float _638 = _634 * _637;
    float _639 = _635 * _637;
    float _640 = _636 * _637;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _549;
    float _646 = (_635 + (-0.039999999105930328369140625)) * _549;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _549;
    float _648 = _645 + 0.039999999105930328369140625;
    float _650 = _646 + 0.039999999105930328369140625;
    float _651 = _647 + 0.039999999105930328369140625;
    vec4 _660 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _584, cbSceneParam._m0[86u].y * _585));
    float _663 = _660.x * TEXCOORD_1.w;
    float _664 = dot(vec3(_541, _542, _543), vec3(_401, _402, _403));
    float _667 = _664 * 2.0;
    float _671 = (_667 * _541) - _401;
    float _672 = (_667 * _542) - _402;
    float _673 = (_667 * _543) - _403;
    float _677 = abs(dot(vec3(_401, _402, _403), vec3(_541, _542, _543)));
    float _3935 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = sqrt(_545);
    float _692 = exp2((_679 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_679 * 3.0));
    float _698 = (1.0 - _692) * ((_679 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _699 = _692 * _679;
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1066;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _791 = fma(_735, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _727));
        float _795 = fma(_735, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _727));
        float _799 = fma(_735, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _727));
        float _824 = _727 + _541;
        float _825 = _731 + _542;
        float _826 = _735 + _543;
        float _836 = fma(_826, cbModelParam._m0[26u].z, fma(_825, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _824)) - _791;
        float _837 = fma(_826, cbModelParam._m0[27u].z, fma(_825, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _824)) - _795;
        float _838 = fma(_826, cbModelParam._m0[28u].z, fma(_825, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _824)) - _799;
        float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
        float _855 = ((_842 * _836) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_791 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_842 * _837) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_795 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_842 * _838) / cbModelParam._m0[34u].z) + ((((((_799 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        float _894 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_860.x + (-0.5));
        float _896 = _894 * (_860.y + (-0.5));
        float _897 = _894 * (_860.z + (-0.5));
        float _904 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_867.x + (-0.5));
        float _906 = _904 * (_867.y + (-0.5));
        float _907 = _904 * (_867.z + (-0.5));
        float _914 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_874.x + (-0.5));
        float _916 = _914 * (_874.y + (-0.5));
        float _917 = _914 * (_874.z + (-0.5));
        float _924 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_881.x + (-0.5));
        float _926 = _924 * (_881.y + (-0.5));
        float _927 = _924 * (_881.z + (-0.5));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = _895 * 0.5;
        float _932 = _905 * 0.5;
        float _933 = _915 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _948 = (dot(vec3(_541, _542, _543), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _958 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3983 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_960 + 1.0))) + _965) * _928;
        float _975 = _896 * 0.5;
        float _976 = _906 * 0.5;
        float _977 = _916 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_541, _542, _543), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _4016 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1002 + 1.0))) + _1007) * _929;
        float _1017 = _897 * 0.5;
        float _1018 = _907 * 0.5;
        float _1019 = _917 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_541, _542, _543), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _4049 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1044 + 1.0))) + _1049) * _930;
        _1066 = _897;
        _1068 = _896;
        _1069 = _895;
        _1070 = _907;
        _1071 = _906;
        _1072 = _905;
        _1073 = _917;
        _1074 = _916;
        _1075 = _915;
        _1076 = _930;
        _1077 = _929;
        _1078 = _928;
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
    }
    else
    {
        _1066 = _1067;
        _1068 = _1067;
        _1069 = _1067;
        _1070 = _1067;
        _1071 = _1067;
        _1072 = _1067;
        _1073 = _1067;
        _1074 = _1067;
        _1075 = _1067;
        _1076 = _1067;
        _1077 = _1067;
        _1078 = _1067;
        _1079 = 0.0;
        _1080 = 0.0;
        _1081 = 0.0;
    }
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1110 = fma(_735, cbModelParam._m0[30u].z, fma(_731, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _727));
        float _1114 = fma(_735, cbModelParam._m0[31u].z, fma(_731, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _727));
        float _1118 = fma(_735, cbModelParam._m0[32u].z, fma(_731, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _727));
        float _1141 = _727 + _541;
        float _1142 = _731 + _542;
        float _1143 = _735 + _543;
        float _1153 = fma(_1143, cbModelParam._m0[30u].z, fma(_1142, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141)) - _1110;
        float _1154 = fma(_1143, cbModelParam._m0[31u].z, fma(_1142, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141)) - _1114;
        float _1155 = fma(_1143, cbModelParam._m0[32u].z, fma(_1142, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141)) - _1118;
        float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
        float _1172 = ((_1159 * _1153) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1110 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1159 * _1154) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1114 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1159 * _1155) / cbModelParam._m0[35u].z) + ((((((_1118 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        float _1209 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1176.x + (-0.5));
        float _1211 = _1209 * (_1176.y + (-0.5));
        float _1212 = _1209 * (_1176.z + (-0.5));
        float _1219 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1183.x + (-0.5));
        float _1221 = _1219 * (_1183.y + (-0.5));
        float _1222 = _1219 * (_1183.z + (-0.5));
        float _1229 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1190.x + (-0.5));
        float _1231 = _1229 * (_1190.y + (-0.5));
        float _1232 = _1229 * (_1190.z + (-0.5));
        float _1239 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1197.x + (-0.5));
        float _1241 = _1239 * (_1197.y + (-0.5));
        float _1242 = _1239 * (_1197.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_541, _542, _543), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4112 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1273 + 1.0))) + _1278) * _1243;
        float _1288 = _1211 * 0.5;
        float _1289 = _1221 * 0.5;
        float _1290 = _1231 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_541, _542, _543), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4145 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1315 + 1.0))) + _1320) * _1244;
        float _1330 = _1212 * 0.5;
        float _1331 = _1222 * 0.5;
        float _1332 = _1232 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_541, _542, _543), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4178 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1357 + 1.0))) + _1362) * _1245;
        _1379 = _1212;
        _1380 = _1211;
        _1381 = _1210;
        _1382 = _1222;
        _1383 = _1221;
        _1384 = _1220;
        _1385 = _1232;
        _1386 = _1231;
        _1387 = _1230;
        _1388 = _1245;
        _1389 = _1244;
        _1390 = _1243;
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1067;
        _1380 = _1067;
        _1381 = _1067;
        _1382 = _1067;
        _1383 = _1067;
        _1384 = _1067;
        _1385 = _1067;
        _1386 = _1067;
        _1387 = _1067;
        _1388 = _1067;
        _1389 = _1067;
        _1390 = _1067;
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
    }
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1079)) + _1079;
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1080)) + _1080;
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1081)) + _1081;
    float _1426 = fma(_1405, cbSceneParam._m0[89u].z, fma(_1404, cbSceneParam._m0[89u].y, _1403 * cbSceneParam._m0[89u].x));
    float _1429 = fma(_1405, cbSceneParam._m0[90u].z, fma(_1404, cbSceneParam._m0[90u].y, _1403 * cbSceneParam._m0[90u].x));
    float _1432 = fma(_1405, cbSceneParam._m0[91u].z, fma(_1404, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1403));
    float _1447 = _671 * 0.5;
    float _1448 = _672 * 0.5;
    float _1449 = _673 * 0.5;
    float _1450 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1453 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1456 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1490;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1463 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1066, _1070, _1073, _1076));
        float _1467 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1068, _1071, _1074, _1077));
        float _1471 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1069, _1072, _1075, _1078));
        float _1478 = dot(vec4(cbModelParam._m0[39u]), vec4(_1447, _1448, _1449, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1478) ? 0.0 : (isnan(0.0) ? _1478 : max(0.0, _1478))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1501;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1492 = dot(vec4(cbModelParam._m0[40u]), vec4(_1447, _1448, _1449, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1492) ? 0.0 : (isnan(0.0) ? _1492 : max(0.0, _1492))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1505 = (_1501 * cbModelParam._m0[1u].x) + (_1490 * (1.0 - cbModelParam._m0[1u].x));
    float _1515 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _545);
    float _1516 = isnan(_1515) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1515 : min(cbModelParam._m0[25u].z, _1515));
    float _1596;
    float _1598;
    float _1600;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1563 = fma(_735, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727)) + cbModelParam._m0[13u].w;
        float _1567 = fma(_735, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727)) + cbModelParam._m0[14u].w;
        float _1571 = fma(_735, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727)) + cbModelParam._m0[15u].w;
        float _1574 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1577 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1580 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1608;
        if (_1574 > 0.0)
        {
            _1608 = abs((1.0 - _1563) / _1574);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1563 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1608 = frontier_phi_19_17_ladder;
        }
        float _1782;
        if (_1577 > 0.0)
        {
            _1782 = abs((1.0 - _1567) / _1577);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1567 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1782 = frontier_phi_28_24_ladder;
        }
        float _2077;
        if (_1580 > 0.0)
        {
            _2077 = abs((1.0 - _1571) / _1580);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1571 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2077 = frontier_phi_40_35_ladder;
        }
        float _2079 = isnan(_1782) ? _1608 : (isnan(_1608) ? _1782 : min(_1608, _1782));
        float _2080 = isnan(_2077) ? _2079 : (isnan(_2079) ? _2077 : min(_2079, _2077));
        float _2084 = (_2080 * _1574) + _1563;
        float _2085 = (_2080 * _1577) + _1567;
        float _2086 = (_2080 * _1580) + _1571;
        float _2087 = _2080 * 9.9999997473787516355514526367188e-05;
        float _2089 = (-1.0) - _2087;
        float _2091 = _2087 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2086 > _2091) || ((_2086 < _2089) || ((_2085 > _2091) || ((_2085 < _2089) || ((_2084 < _2089) || (_2084 > _2091))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2231 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2086, cbModelParam._m0[9u].z, fma(_2085, cbModelParam._m0[9u].y, _2084 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2086, cbModelParam._m0[10u].z, fma(_2085, cbModelParam._m0[10u].y, _2084 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2086, cbModelParam._m0[11u].z, fma(_2085, cbModelParam._m0[11u].y, _2084 * cbModelParam._m0[11u].x))), _1516);
            frontier_phi_18_40_ladder = _2231.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2231.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2231.x * cbModelParam._m0[1u].y;
        }
        _1596 = frontier_phi_18_40_ladder_2;
        _1598 = frontier_phi_18_40_ladder_1;
        _1600 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1584 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1516);
        _1596 = _1584.x * cbModelParam._m0[1u].y;
        _1598 = _1584.y * cbModelParam._m0[1u].y;
        _1600 = _1584.z * cbModelParam._m0[1u].y;
    }
    float _1604 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _545);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1604 : min(cbModelParam._m0[25u].w, _1604));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1661 = fma(_735, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727)) + cbModelParam._m0[21u].w;
        float _1665 = fma(_735, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727)) + cbModelParam._m0[22u].w;
        float _1669 = fma(_735, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727)) + cbModelParam._m0[23u].w;
        float _1672 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1675 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1678 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1787;
        if (_1672 > 0.0)
        {
            _1787 = abs((1.0 - _1661) / _1672);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1661 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1787 = frontier_phi_30_26_ladder;
        }
        float _2104;
        if (_1675 > 0.0)
        {
            _2104 = abs((1.0 - _1665) / _1675);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1665 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2104 = frontier_phi_42_37_ladder;
        }
        float _2442;
        if (_1678 > 0.0)
        {
            _2442 = abs((1.0 - _1669) / _1678);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1669 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2442 = frontier_phi_52_49_ladder;
        }
        float _2444 = isnan(_2104) ? _1787 : (isnan(_1787) ? _2104 : min(_1787, _2104));
        float _2445 = isnan(_2442) ? _2444 : (isnan(_2444) ? _2442 : min(_2444, _2442));
        float _2449 = (_2445 * _1672) + _1661;
        float _2450 = (_2445 * _1675) + _1665;
        float _2451 = (_2445 * _1678) + _1669;
        float _2452 = _2445 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2452;
        float _2455 = _2452 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2451 > _2455) || ((_2451 < _2453) || ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 < _2453) || (_2449 > _2455))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2573 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2451, cbModelParam._m0[17u].z, fma(_2450, cbModelParam._m0[17u].y, _2449 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2451, cbModelParam._m0[18u].z, fma(_2450, cbModelParam._m0[18u].y, _2449 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2451, cbModelParam._m0[19u].z, fma(_2450, cbModelParam._m0[19u].y, _2449 * cbModelParam._m0[19u].x))), _1605);
            frontier_phi_27_52_ladder = _2573.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2573.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2573.x * cbModelParam._m0[1u].z;
        }
        _1697 = frontier_phi_27_52_ladder_2;
        _1699 = frontier_phi_27_52_ladder_1;
        _1701 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1681 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1605);
        _1697 = _1681.x * cbModelParam._m0[1u].z;
        _1699 = _1681.y * cbModelParam._m0[1u].z;
        _1701 = _1681.z * cbModelParam._m0[1u].z;
    }
    float _1714 = (((_698 * _648) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1697 - _1596)) + _1596);
    float _1716 = (((_698 * _650) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1699 - _1598)) + _1598);
    float _1718 = (((_698 * _651) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1701 - _1600)) + _1600);
    float _1721 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1714 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1714 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, _1714 * cbSceneParam._m0[91u].x));
    float _1761 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1765 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1769 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1773 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1774 = _1761 / _1773;
    float _1775 = _1765 / _1773;
    float _1776 = _1769 / _1773;
    float _1923;
    float _1924;
    float _1925;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1803 = ((uint(_1776 > cbSceneParam._m0[59u].y) + uint(_1776 > cbSceneParam._m0[59u].x)) + uint(_1776 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1804 = _1803 + 43u;
        uint _1812 = _1803 + 44u;
        uint _1820 = _1803 + 45u;
        uint _1828 = _1803 + 46u;
        float _1839 = fma(_1773, cbSceneParam._m0[_1804].w, fma(_1769, cbSceneParam._m0[_1804].z, fma(_1765, cbSceneParam._m0[_1804].y, _1761 * cbSceneParam._m0[_1804].x)));
        float _1843 = fma(_1773, cbSceneParam._m0[_1812].w, fma(_1769, cbSceneParam._m0[_1812].z, fma(_1765, cbSceneParam._m0[_1812].y, _1761 * cbSceneParam._m0[_1812].x)));
        float _1851 = fma(_1773, cbSceneParam._m0[_1828].w, fma(_1769, cbSceneParam._m0[_1828].z, fma(_1765, cbSceneParam._m0[_1828].y, _1761 * cbSceneParam._m0[_1828].x)));
        float _1856 = cbSceneParam._m0[33u].z * _1851;
        float _1858 = cbSceneParam._m0[33u].w * _1851;
        float _1861 = fma(_1773, cbSceneParam._m0[_1820].w, fma(_1769, cbSceneParam._m0[_1820].z, fma(_1765, cbSceneParam._m0[_1820].y, _1761 * cbSceneParam._m0[_1820].x))) / _1851;
        float _1909 = (cbSceneParam._m0[33u].x - sqrt(((_1775 * _1775) + (_1774 * _1774)) + (_1776 * _1776))) * cbSceneParam._m0[33u].y;
        float _4304 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1916 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1856 + _1839) / _1851, (_1858 + _1843) / _1851), _1861), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1858 + _1839) / _1851, (_1843 - _1856) / _1851), _1861), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1839 - _1856) / _1851, (_1843 - _1858) / _1851), _1861), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1839 - _1858) / _1851, (_1856 + _1843) / _1851), _1861), 0.0)).x), vec4(0.25)));
        _1923 = 1.0 - (_1916 * cbSceneParam._m0[34u].x);
        _1924 = 1.0 - (_1916 * cbSceneParam._m0[34u].y);
        _1925 = 1.0 - (_1916 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1923 = 1.0;
        _1924 = 1.0;
        _1925 = 1.0;
    }
    float _1989;
    float _1991;
    float _1993;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1977 = fma(_1773, cbSceneParam._m0[63u].w, fma(_1769, cbSceneParam._m0[63u].z, fma(_1765, cbSceneParam._m0[63u].y, _1761 * cbSceneParam._m0[63u].x)));
        float _1978 = fma(_1773, cbSceneParam._m0[60u].w, fma(_1769, cbSceneParam._m0[60u].z, fma(_1765, cbSceneParam._m0[60u].y, _1761 * cbSceneParam._m0[60u].x))) / _1977;
        float _1979 = fma(_1773, cbSceneParam._m0[61u].w, fma(_1769, cbSceneParam._m0[61u].z, fma(_1765, cbSceneParam._m0[61u].y, _1761 * cbSceneParam._m0[61u].x))) / _1977;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1978 >= cbSceneParam._m0[64u].x) && (_1979 >= cbSceneParam._m0[64u].y)) && (_1978 <= cbSceneParam._m0[64u].z)) && (_1979 <= cbSceneParam._m0[64u].w))
        {
            float _2117 = fma(_1773, cbSceneParam._m0[62u].w, fma(_1769, cbSceneParam._m0[62u].z, fma(_1765, cbSceneParam._m0[62u].y, _1761 * cbSceneParam._m0[62u].x))) / _1977;
            float _2121 = isnan(cbSceneParam._m0[41u].w) ? _2117 : (isnan(_2117) ? cbSceneParam._m0[41u].w : max(_2117, cbSceneParam._m0[41u].w));
            float _2164 = (cbSceneParam._m0[33u].x - sqrt(((_1775 * _1775) + (_1774 * _1774)) + (_1776 * _1776))) * cbSceneParam._m0[33u].y;
            float _4320 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
            float _2171 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1978, cbSceneParam._m0[33u].w + _1979), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1978, _1979 - cbSceneParam._m0[33u].z), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1978 - cbSceneParam._m0[33u].z, _1979 - cbSceneParam._m0[33u].w), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1978 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1979), _2121), 0.0)).x), vec4(0.25)));
            float _2175 = 1.0 - (_2171 * cbSceneParam._m0[34u].x);
            float _2176 = 1.0 - (_2171 * cbSceneParam._m0[34u].y);
            float _2177 = 1.0 - (_2171 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2176) ? _1924 : (isnan(_1924) ? _2176 : min(_1924, _2176));
            frontier_phi_39_38_ladder_1 = isnan(_2175) ? _1923 : (isnan(_1923) ? _2175 : min(_1923, _2175));
            frontier_phi_39_38_ladder_2 = isnan(_2177) ? _1925 : (isnan(_1925) ? _2177 : min(_1925, _2177));
        }
        else
        {
            frontier_phi_39_38_ladder = _1924;
            frontier_phi_39_38_ladder_1 = _1923;
            frontier_phi_39_38_ladder_2 = _1925;
        }
        _1989 = frontier_phi_39_38_ladder_1;
        _1991 = frontier_phi_39_38_ladder;
        _1993 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1989 = _1923;
        _1991 = _1924;
        _1993 = _1925;
    }
    uvec4 _1998 = floatBitsToUint(cbInstanceData._m0[_623 + 5u]);
    uint _2000 = _1998.x * 14u;
    uint _2001 = _2000 + 13u;
    float _2008 = _663 + (-1.0);
    float _2013 = (cbLight._m0[_2001].x * _2008) + 1.0;
    float _2014 = (cbLight._m0[_2001].y * _2008) + 1.0;
    float _2015 = (cbLight._m0[_2001].z * _2008) + 1.0;
    float _2016 = (cbLight._m0[_2001].w * _2008) + 1.0;
    uint _2017 = _2000 + 5u;
    float _2023 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
    uint _2027 = _2000 + 4u;
    float _2036 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2040 = _2000 | 1u;
    float _2051 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_541, _542, _543));
    float _2054 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_541, _542, _543));
    float _4356 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _4367 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2059 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2061 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2068 = ((cbLight._m0[_2017].x * _2023) * _2061) + (((cbLight._m0[_2027].x * _1989) * _2036) * _2059);
    float _2069 = ((_2023 * cbLight._m0[_2017].y) * _2061) + (((cbLight._m0[_2027].y * _1991) * _2036) * _2059);
    float _2070 = ((_2023 * cbLight._m0[_2017].z) * _2061) + (((cbLight._m0[_2027].z * _1993) * _2036) * _2059);
    uvec4 _2074 = floatBitsToUint(cbLight._m0[_2000 + 12u]);
    bool _2076 = _2074.x == 0u;
    float _2178;
    float _2180;
    float _2182;
    if (_2076)
    {
        _2178 = _2068;
        _2180 = _2069;
        _2182 = _2070;
    }
    else
    {
        uint _2186 = _2000 + 6u;
        float _2202 = (dot(vec3(cbLight._m0[_2000 + 2u].xyz), vec3(_541, _542, _543)) * 0.5) + 0.5;
        float _2203 = _2202 * _2202;
        float _4378 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2205 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2178 = (((cbLight._m0[_2186].x * 0.3183098733425140380859375) * _2204) * _2205) + _2068;
        _2180 = (((cbLight._m0[_2186].y * 0.3183098733425140380859375) * _2204) * _2205) + _2069;
        _2182 = (((cbLight._m0[_2186].z * 0.3183098733425140380859375) * _2204) * _2205) + _2070;
    }
    bool _2185 = _2074.y == 0u;
    float _2240;
    float _2242;
    float _2244;
    if (_2185)
    {
        _2240 = _2178;
        _2242 = _2180;
        _2244 = _2182;
    }
    else
    {
        uint _2413 = _2000 + 7u;
        float _2429 = (dot(vec3(cbLight._m0[_2000 + 3u].xyz), vec3(_541, _542, _543)) * 0.5) + 0.5;
        float _2430 = _2429 * _2429;
        float _4394 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2431 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2432 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2240 = (((cbLight._m0[_2413].x * 0.3183098733425140380859375) * _2431) * _2432) + _2178;
        _2242 = (((cbLight._m0[_2413].y * 0.3183098733425140380859375) * _2431) * _2432) + _2180;
        _2244 = (((cbLight._m0[_2413].z * 0.3183098733425140380859375) * _2431) * _2432) + _2182;
    }
    uint _2247 = _2000 + 8u;
    float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _545) * 0.949999988079071044921875);
    float _2261 = _2260 * _2260;
    float _2262 = cbLight._m0[_2000].x + _401;
    float _2263 = cbLight._m0[_2000].y + _402;
    float _2264 = cbLight._m0[_2000].z + _403;
    float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
    float _2269 = _2268 * _2262;
    float _2270 = _2268 * _2263;
    float _2271 = _2268 * _2264;
    float _2272 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2000].xyz));
    float _4410 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _4421 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _2276 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2277 = dot(vec3(_541, _542, _543), vec3(_2269, _2270, _2271));
    float _4432 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2281 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2269, _2270, _2271));
    float _4443 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2285 = _2261 * _2261;
    float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
    float _2297 = exp2(log2(1.0 - (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) * 5.0);
    float _2298 = 0.959999978542327880859375 - _645;
    float _2300 = 0.959999978542327880859375 - _646;
    float _2301 = 0.959999978542327880859375 - _647;
    float _2308 = 1.0 - _2261;
    float _2319 = (0.5 / (((_2276 * ((_2275 * _2308) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2308) + _2261) * _2275))) * _2275;
    float _4454 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2321 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
    uint _2335 = _2000 + 9u;
    float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _545) * 0.949999988079071044921875);
    float _2347 = _2346 * _2346;
    float _2348 = cbLight._m0[_2040].x + _401;
    float _2349 = cbLight._m0[_2040].y + _402;
    float _2350 = cbLight._m0[_2040].z + _403;
    float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
    float _2355 = _2354 * _2348;
    float _2356 = _2354 * _2349;
    float _2357 = _2354 * _2350;
    float _2358 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2040].xyz));
    float _4465 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2362 = dot(vec3(_541, _542, _543), vec3(_2355, _2356, _2357));
    float _4476 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2366 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2355, _2356, _2357));
    float _4487 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2370 = _2347 * _2347;
    float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
    float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) * 5.0);
    float _2388 = 1.0 - _2347;
    float _2398 = (0.5 / (((_2276 * ((_2361 * _2388) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2388) + _2347) * _2361))) * _2361;
    float _4498 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2400 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
    float _2410 = (((((_2381 * _2298) + _648) * cbLight._m0[_2335].x) * _2400) * _2023) + ((((cbLight._m0[_2247].x * _1989) * ((_2297 * _2298) + _648)) * _2321) * _2036);
    float _2411 = (((((_2381 * _2300) + _650) * cbLight._m0[_2335].y) * _2400) * _2023) + ((((cbLight._m0[_2247].y * _1991) * ((_2297 * _2300) + _650)) * _2321) * _2036);
    float _2412 = (((((_2381 * _2301) + _651) * cbLight._m0[_2335].z) * _2400) * _2023) + ((((cbLight._m0[_2247].z * _1993) * ((_2297 * _2301) + _651)) * _2321) * _2036);
    float _2468;
    float _2470;
    float _2472;
    if (_2076)
    {
        _2468 = _2410;
        _2470 = _2411;
        _2472 = _2412;
    }
    else
    {
        uint _2474 = _2000 + 2u;
        uint _2478 = _2000 + 10u;
        float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _545) * 0.949999988079071044921875);
        float _2493 = _2492 * _2492;
        float _2494 = cbLight._m0[_2474].x + _401;
        float _2495 = cbLight._m0[_2474].y + _402;
        float _2496 = cbLight._m0[_2474].z + _403;
        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
        float _2501 = _2500 * _2494;
        float _2502 = _2500 * _2495;
        float _2503 = _2500 * _2496;
        float _2504 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2474].xyz));
        float _4509 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2508 = dot(vec3(_541, _542, _543), vec3(_2501, _2502, _2503));
        float _4520 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2512 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2501, _2502, _2503));
        float _4531 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2516 = _2493 * _2493;
        float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
        float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0);
        float _2534 = 1.0 - _2493;
        float _2544 = (0.5 / (((_2276 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2534) + _2493) * _2507))) * _2507;
        float _4542 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
        float _2547 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2468 = (((((_2527 * _2298) + _648) * cbLight._m0[_2478].x) * _2546) * _2547) + _2410;
        _2470 = (((((_2527 * _2300) + _650) * cbLight._m0[_2478].y) * _2546) * _2547) + _2411;
        _2472 = (((((_2527 * _2301) + _651) * cbLight._m0[_2478].z) * _2546) * _2547) + _2412;
    }
    float _2578;
    float _2580;
    float _2582;
    if (_2185)
    {
        _2578 = _2468;
        _2580 = _2470;
        _2582 = _2472;
    }
    else
    {
        uint _2589 = _2000 + 3u;
        uint _2593 = _2000 + 11u;
        float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2589].w)) * _545) * 0.949999988079071044921875);
        float _2608 = _2607 * _2607;
        float _2609 = cbLight._m0[_2589].x + _401;
        float _2610 = cbLight._m0[_2589].y + _402;
        float _2611 = cbLight._m0[_2589].z + _403;
        float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
        float _2616 = _2615 * _2609;
        float _2617 = _2615 * _2610;
        float _2618 = _2615 * _2611;
        float _2619 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2589].xyz));
        float _4558 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2623 = dot(vec3(_541, _542, _543), vec3(_2616, _2617, _2618));
        float _4569 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2627 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_2616, _2617, _2618));
        float _4580 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2631 = _2608 * _2608;
        float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
        float _2642 = exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0);
        float _2649 = 1.0 - _2608;
        float _2659 = (0.5 / (((_2276 * ((_2622 * _2649) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2649) + _2608) * _2622))) * _2622;
        float _4591 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2661 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
        float _2662 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2578 = (((((_2642 * _2298) + _648) * cbLight._m0[_2593].x) * _2661) * _2662) + _2468;
        _2580 = (((((_2642 * _2300) + _650) * cbLight._m0[_2593].y) * _2661) * _2662) + _2470;
        _2582 = (((((_2642 * _2301) + _651) * cbLight._m0[_2593].z) * _2661) * _2662) + _2472;
    }
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    if (_1998.y == 0u)
    {
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.x;
        uint _2695 = uint((float(_2683.y) * floor(float(uint(cbSceneParam._m0[85u].y * _585) / _2684))) + floor(float(uint(cbSceneParam._m0[85u].x * _584) / _2684)));
        float _2705 = (log2(_1776 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2706 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        uint _2709 = uint(isnan(14.0) ? _2706 : (isnan(_2706) ? 14.0 : min(_2706, 14.0)));
        uvec4 _2714 = texelFetch(g_lightClusterGridBuffer, int(((_2709 << 2u) + (_2695 << 6u)) >> 2u));
        uint _2715 = _2714.x;
        uint _2716 = _2683.z;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        if (((((1u << ((_2716 >> 4u) & 15u)) + 4294967295u) & _2715) == 0u) || ((_2716 & 240u) == 0u))
        {
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
        }
        else
        {
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            uint _2992 = 0u;
            uint _3001;
            bool _3002;
            for (;;)
            {
                _3001 = texelFetch(g_lightClassification, int((((_2709 << 5u) + (_2695 << 9u)) + (_2992 << 2u)) >> 2u)).x;
                _3002 = _3001 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3002)
                {
                    frontier_phi_73_pred = _2991;
                    frontier_phi_73_pred_1 = _2990;
                    frontier_phi_73_pred_2 = _2989;
                    frontier_phi_73_pred_3 = _2988;
                    frontier_phi_73_pred_4 = _2987;
                    frontier_phi_73_pred_5 = _2986;
                }
                else
                {
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    uint _3137;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _3001;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    for (;;)
                    {
                        uint _3141 = uint(findLSB(_3137)) + (_2992 << 5u);
                        uint _3138 = (_3137 + 4294967295u) & _3137;
                        uint _3143 = _3141 * 48u;
                        vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3163 = (_3141 * 48u) + 4u;
                        vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3182 = (_3141 * 48u) + 8u;
                        vec3 _3193 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x));
                        float _3197 = _3157.x - _1774;
                        float _3198 = _3157.y - _1775;
                        float _3199 = _3157.z - _1776;
                        float _3200 = dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199));
                        float _3203 = inversesqrt(_3200);
                        float _3204 = _3203 * _3197;
                        float _3205 = _3203 * _3198;
                        float _3206 = _3203 * _3199;
                        float _3207 = dot(vec3(_604, _607, _610), vec3(_3204, _3205, _3206));
                        float _3212 = 1.0 - (_3200 * _3157.w);
                        float _4617 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3213 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3214 = sqrt(_3200) * _3176.w;
                        float _3217 = 1.39999997615814208984375 / (_3214 + 1.39999997615814208984375);
                        float _3218 = _3217 * _3217;
                        float _3221 = ((1.0 - _3218) * _3207) + _3218;
                        float _3224 = _3214 * _3214;
                        float _3228 = ((isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0))) * _3213) / ((_3224 * 0.699999988079071044921875) + 1.0);
                        float _3232 = (-0.0) - _1774;
                        float _3233 = (-0.0) - _1775;
                        float _3234 = (-0.0) - _1776;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3248 = exp2(log2(1.0 / ((_3224 * 3.5) + 5.0)) * 0.25);
                        float _3249 = 1.0 - _679;
                        float _3256 = sqrt(1.0 - ((1.0 - (_3249 * _3249)) * (1.0 - (_3248 * _3248))));
                        float _3257 = _3256 * _3256;
                        float _3258 = _3257 * _3257;
                        float _3259 = _3239 + _3204;
                        float _3260 = _3240 + _3205;
                        float _3261 = _3241 + _3206;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3269 = dot(vec3(_604, _607, _610), vec3(_3239, _3240, _3241));
                        float _4633 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3272 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3273 = dot(vec3(_604, _607, _610), vec3(_3265 * _3259, _3265 * _3260, _3265 * _3261));
                        float _4644 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3276 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3280 = ((_3276 * _3276) * (_3258 + (-1.0))) + 1.0;
                        float _3281 = _3217 * _3257;
                        float _3282 = _3281 * _3281;
                        float _3285 = ((1.0 - _3282) * _3207) + _3282;
                        float _4655 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3286 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3287 = 1.0 - _3257;
                        float _3297 = (0.5 / (((_3286 * ((_3272 * _3287) + _3257)) + 9.9999999392252902907785028219223e-09) + (((_3286 * _3287) + _3257) * _3272))) * _3286;
                        float _4666 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3308 = (((_3258 * 3.1415927410125732421875) * (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) / ((_3280 * _3280) * ((_3224 * 2.1991131305694580078125) + 3.141590118408203125))) * _3213;
                        _3061 = (_3228 * _3176.x) + _3134;
                        _3062 = (_3228 * _3176.y) + _3135;
                        _3063 = (_3228 * _3176.z) + _3136;
                        _3058 = (_3308 * _3193.x) + _3131;
                        _3059 = (_3308 * _3193.y) + _3132;
                        _3060 = (_3308 * _3193.z) + _3133;
                        if (_3138 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3138;
                        }
                    }
                    frontier_phi_73_pred = _3063;
                    frontier_phi_73_pred_1 = _3062;
                    frontier_phi_73_pred_2 = _3061;
                    frontier_phi_73_pred_3 = _3060;
                    frontier_phi_73_pred_4 = _3059;
                    frontier_phi_73_pred_5 = _3058;
                }
                _2836 = frontier_phi_73_pred;
                _2834 = frontier_phi_73_pred_1;
                _2832 = frontier_phi_73_pred_2;
                _2830 = frontier_phi_73_pred_3;
                _2828 = frontier_phi_73_pred_4;
                _2826 = frontier_phi_73_pred_5;
                uint _2993 = _2992 + 1u;
                if (_2993 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2986 = _2826;
                    _2987 = _2828;
                    _2988 = _2830;
                    _2989 = _2832;
                    _2990 = _2834;
                    _2991 = _2836;
                    _2992 = _2993;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
        }
        uvec4 _2839 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2840 = _2839.z;
        uint _2842 = (_2840 >> 8u) & 15u;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        if (((4294967295u << _2842) & _2715) == 0u)
        {
            _2954 = _2825;
            _2956 = _2827;
            _2958 = _2829;
            _2960 = _2831;
            _2962 = _2833;
            _2964 = _2835;
        }
        else
        {
            float _2979 = inversesqrt(dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776)));
            float _2980 = _2979 * _1774;
            float _2981 = _2979 * _1775;
            float _2982 = _2979 * _1776;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2842 < ((_2840 >> 12u) & 15u))
            {
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _2965;
                float _3114 = _2825;
                float _3115 = _2827;
                float _3116 = _2829;
                float _3117 = _2831;
                float _3118 = _2833;
                float _3119 = _2835;
                uint _3120 = _2842;
                uint _3129;
                bool _3130;
                for (;;)
                {
                    _3129 = texelFetch(g_lightClassification, int((((_2709 << 5u) + (_2695 << 9u)) + (_3120 << 2u)) >> 2u)).x;
                    _3130 = _3129 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3130)
                    {
                        frontier_phi_84_pred = _3118;
                        frontier_phi_84_pred_1 = _3117;
                        frontier_phi_84_pred_2 = _3116;
                        frontier_phi_84_pred_3 = _3115;
                        frontier_phi_84_pred_4 = _3114;
                        frontier_phi_84_pred_5 = _3119;
                    }
                    else
                    {
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3335 = _3114;
                        float _3336 = _3115;
                        float _3337 = _3116;
                        float _3338 = _3117;
                        float _3339 = _3118;
                        float _3340 = _3119;
                        uint _3341 = _3129;
                        uint _3342;
                        vec4 _3367;
                        float _3368;
                        vec4 _3383;
                        vec3 _3395;
                        vec4 _3410;
                        vec4 _3426;
                        float _3473;
                        bool _3474;
                        for (;;)
                        {
                            uint _3352 = ((_3120 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3341));
                            _3342 = (_3341 + 4294967295u) & _3341;
                            uint _3354 = _3352 * 40u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3368 = _3367.w;
                            uint _3370 = (_3352 * 40u) + 4u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3352 * 40u) + 8u;
                            _3395 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x));
                            uint _3397 = (_3352 * 40u) + 16u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3413 = (_3352 * 40u) + 20u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3429 = (_3352 * 40u) + 24u;
                            vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3448 = (_3352 * 40u) + 28u;
                            vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            _3473 = fma(_1776, _3461.z, fma(_1775, _3461.y, _3461.x * _1774)) + _3461.w;
                            _3474 = !((fma(_1776, _3442.z, fma(_1775, _3442.y, _3442.x * _1774)) + _3442.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3474)
                            {
                                float _3501 = _3367.x - _1774;
                                float _3502 = _3367.y - _1775;
                                float _3503 = _3367.z - _1776;
                                float _3504 = dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503));
                                float _3507 = inversesqrt(_3504);
                                float _3508 = _3507 * _3501;
                                float _3509 = _3507 * _3502;
                                float _3510 = _3507 * _3503;
                                float _3514 = 1.0 - (_3504 / (_3368 * _3368));
                                float _4677 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3519 = sqrt(_3504) * _3383.w;
                                float _3521 = 1.39999997615814208984375 / (_3519 + 1.39999997615814208984375);
                                float _3522 = _3521 * _3521;
                                float _3525 = ((1.0 - _3522) * dot(vec3(_3508, _3509, _3510), vec3(_604, _607, _610))) + _3522;
                                float _3528 = _3519 * _3519;
                                float _3532 = (fma(_1776, _3410.z, fma(_1775, _3410.y, _3410.x * _1774)) + _3410.w) / _3473;
                                float _3533 = (fma(_1776, _3426.z, fma(_1775, _3426.y, _3426.x * _1774)) + _3426.w) / _3473;
                                float _3537 = 1.0 - dot(vec2(_3532, _3533), vec2(_3532, _3533));
                                float _4693 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3539 = _3538 * (((isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0))) * _3515) / ((_3528 * 0.699999988079071044921875) + 1.0));
                                float _3551 = exp2(log2(1.0 / ((_3528 * 3.5) + 5.0)) * 0.25);
                                float _3552 = 1.0 - _679;
                                float _3559 = sqrt(1.0 - ((1.0 - (_3552 * _3552)) * (1.0 - (_3551 * _3551))));
                                float _3560 = _3559 * _3559;
                                float _3561 = _3560 * _3560;
                                float _3562 = _3508 - _2980;
                                float _3563 = _3509 - _2981;
                                float _3564 = _3510 - _2982;
                                float _3568 = inversesqrt(dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564)));
                                float _3572 = dot(vec3(_604, _607, _610), vec3((-0.0) - _2980, (-0.0) - _2981, (-0.0) - _2982));
                                float _4704 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3575 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3576 = dot(vec3(_604, _607, _610), vec3(_3568 * _3562, _3568 * _3563, _3568 * _3564));
                                float _4715 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3583 = ((_3579 * _3579) * (_3561 + (-1.0))) + 1.0;
                                float _3584 = _3521 * _3560;
                                float _3585 = _3584 * _3584;
                                float _3591 = ((1.0 - _3585) * dot(vec3(_604, _607, _610), vec3(_3508, _3509, _3510))) + _3585;
                                float _4726 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3593 = 1.0 - _3560;
                                float _3603 = (0.5 / (((_3592 * ((_3575 * _3593) + _3560)) + 9.9999999392252902907785028219223e-09) + (((_3592 * _3593) + _3560) * _3575))) * _3592;
                                float _4737 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3613 = (_3538 * _3515) * (((_3561 * 3.1415927410125732421875) * (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) / ((_3583 * _3583) * ((_3528 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3539 * _3383.y;
                                frontier_phi_90_pred_1 = _3539 * _3383.x;
                                frontier_phi_90_pred_2 = _3613 * _3395.z;
                                frontier_phi_90_pred_3 = _3613 * _3395.y;
                                frontier_phi_90_pred_4 = _3613 * _3395.x;
                                frontier_phi_90_pred_5 = _3539 * _3383.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3621 = frontier_phi_90_pred;
                            _3620 = frontier_phi_90_pred_1;
                            _3619 = frontier_phi_90_pred_2;
                            _3618 = frontier_phi_90_pred_3;
                            _3617 = frontier_phi_90_pred_4;
                            _3622 = frontier_phi_90_pred_5;
                            _3325 = _3620 + _3338;
                            _3326 = _3621 + _3339;
                            _3327 = _3622 + _3340;
                            _3322 = _3617 + _3335;
                            _3323 = _3618 + _3336;
                            _3324 = _3619 + _3337;
                            if (_3342 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3342;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3326;
                        frontier_phi_84_pred_1 = _3325;
                        frontier_phi_84_pred_2 = _3324;
                        frontier_phi_84_pred_3 = _3323;
                        frontier_phi_84_pred_4 = _3322;
                        frontier_phi_84_pred_5 = _3327;
                    }
                    _2963 = frontier_phi_84_pred;
                    _2961 = frontier_phi_84_pred_1;
                    _2959 = frontier_phi_84_pred_2;
                    _2957 = frontier_phi_84_pred_3;
                    _2955 = frontier_phi_84_pred_4;
                    _2965 = frontier_phi_84_pred_5;
                    uint _3121 = _3120 + 1u;
                    if (_3121 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3114 = _2955;
                        _3115 = _2957;
                        _3116 = _2959;
                        _3117 = _2961;
                        _3118 = _2963;
                        _3119 = _2965;
                        _3120 = _3121;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2965;
                frontier_phi_65_66_ladder_1 = _2961;
                frontier_phi_65_66_ladder_2 = _2963;
                frontier_phi_65_66_ladder_3 = _2957;
                frontier_phi_65_66_ladder_4 = _2955;
                frontier_phi_65_66_ladder_5 = _2959;
            }
            else
            {
                frontier_phi_65_66_ladder = _2835;
                frontier_phi_65_66_ladder_1 = _2831;
                frontier_phi_65_66_ladder_2 = _2833;
                frontier_phi_65_66_ladder_3 = _2827;
                frontier_phi_65_66_ladder_4 = _2825;
                frontier_phi_65_66_ladder_5 = _2829;
            }
            _2954 = frontier_phi_65_66_ladder_4;
            _2956 = frontier_phi_65_66_ladder_3;
            _2958 = frontier_phi_65_66_ladder_5;
            _2960 = frontier_phi_65_66_ladder_1;
            _2962 = frontier_phi_65_66_ladder_2;
            _2964 = frontier_phi_65_66_ladder;
        }
        float _2969 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
        _2727 = (_2969 * _2960) + _2240;
        _2729 = (_2969 * _2962) + _2242;
        _2731 = (_2969 * _2964) + _2244;
        _2733 = ((_2954 * _648) * _2969) + _2578;
        _2735 = ((_2956 * _650) * _2969) + _2580;
        _2737 = ((_2958 * _651) * _2969) + _2582;
    }
    else
    {
        _2727 = _2240;
        _2729 = _2242;
        _2731 = _2244;
        _2733 = _2578;
        _2735 = _2580;
        _2737 = _2582;
    }
    uint _2743 = _624 + uint(cbMatDynParam._m0[0u].w);
    float _2749 = (((((_443.x * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _414)) + (_477.x * cbMtdParam._m0[12u].x)) + (_508.x * cbMtdParam._m0[13u].x)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2743].x;
    float _2750 = (((((_443.y * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _414)) + (_477.y * cbMtdParam._m0[12u].y)) + (_508.y * cbMtdParam._m0[13u].y)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2743].y;
    float _2751 = (((((_443.z * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _414)) + (_477.z * cbMtdParam._m0[12u].z)) + (_508.z * cbMtdParam._m0[13u].z)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2743].z;
    float _4753 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4764 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4775 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4786 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _2769 = (((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2727 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _663))) + ((_2733 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1505)) * cbPerFrame._m0[3u].x)) + _2749;
    float _2771 = (_2750 + ((_2735 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1505)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2729 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _663)));
    float _2773 = (_2751 + ((_2737 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1505)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2731 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _663)));
    float _2774 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
    float _2775 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
    float _2776 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
    float _2782 = cbMtdParam._m0[2u].x * _2749;
    float _2783 = cbMtdParam._m0[2u].y * _2750;
    float _2784 = cbMtdParam._m0[2u].z * _2751;
    float _4812 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2786 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
    float _2791 = cbInstanceData._m0[_623 + 6u].w * (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)));
    float _2796 = _584 / cbSceneParam._m0[86u].x;
    float _2797 = _585 / cbSceneParam._m0[86u].y;
    vec4 _2811 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2796, _2797, (log2((isnan(cbSceneParam._m0[77u].w) ? _565 : (isnan(_565) ? cbSceneParam._m0[77u].w : min(_565, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2813 = _2811.x;
    float _2814 = _2811.y;
    float _2815 = _2811.z;
    float _2816 = _2811.w;
    float _2887;
    float _2889;
    float _2891;
    float _2893;
    if (_565 > cbSceneParam._m0[78u].w)
    {
        float _2850 = isnan(_565) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _565 : min(cbSceneParam._m0[80u].w, _565));
        float _2851 = _2850 / _565;
        float _2862 = _2851 * _284;
        float _2863 = _285 * _2851;
        float _2864 = (-0.0) - _2863;
        float _2865 = _2851 * _286;
        float _2867 = (cbSceneParam._m0[77u].w * _2864) / _2850;
        float _2868 = _2867 + cbSceneParam._m0[79u].w;
        float _2869 = cbSceneParam._m0[79u].w - _2863;
        float _2875 = sqrt(((_2862 * _2862) + (_2863 * _2863)) + (_2865 * _2865));
        float _2878 = (1.0 - (cbSceneParam._m0[77u].w / _2850)) * _2875;
        float _2883 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2885 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3071;
        if (abs((_2864 - _2867) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3071 = ((((_2868 > 0.0) ? exp2(_2883 * _2868) : (2.0 - exp2(_2885 * _2868))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2878;
        }
        else
        {
            float _3015 = 1.0 / cbSceneParam._m0[80u].x;
            float _3016 = isnan(_2869) ? _2868 : (isnan(_2868) ? _2869 : max(_2868, _2869));
            float _3017 = isnan(_2869) ? _2868 : (isnan(_2868) ? _2869 : min(_2868, _2869));
            float _3026 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : min(_3016, 0.0));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            _3071 = ((abs(_2875 / _2864) * cbSceneParam._m0[80u].y) * ((((_3026 - _3027) * 2.0) - ((exp2(_2883 * (isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0)))) - exp2(_2883 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))))) * _3015)) - ((exp2(_2885 * _3026) - exp2(_2885 * _3027)) * _3015))) + (_2878 * cbSceneParam._m0[80u].z);
        }
        vec4 _3073 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2796, _2797, 1.0), 0.0);
        float _3082 = exp2((_3071 * (-1.44269502162933349609375)) * (1.0 - _3073.w));
        float _3083 = log2(_3082);
        float _3099 = log2(_2816);
        _2887 = (exp2(_3099 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].x)) * _3073.x) / cbSceneParam._m0[78u].x)) + _2813;
        _2889 = (exp2(_3099 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].y)) * _3073.y) / cbSceneParam._m0[78u].y)) + _2814;
        _2891 = (exp2(_3099 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].z)) * _3073.z) / cbSceneParam._m0[78u].z)) + _2815;
        _2893 = _3082 * _2816;
    }
    else
    {
        _2887 = _2813;
        _2889 = _2814;
        _2891 = _2815;
        _2893 = _2816;
    }
    bool _3109;
    vec4 _2903;
    vec4 _2925;
    float _2927;
    float _2931;
    float _2932;
    float _2933;
    float _2936;
    float _2939;
    float _2942;
    float _2943;
    bool _2953;
    for (;;)
    {
        _2903 = cbMatDynParam._m0[0u];
        float _2905 = roundEven(_2903.y);
        bool _2906 = _2905 == 3.0;
        float _2907 = log2(_2893);
        float _2911 = exp2(_2907 * cbSceneParam._m0[78u].x);
        float _2912 = exp2(_2907 * cbSceneParam._m0[78u].y);
        float _2913 = exp2(_2907 * cbSceneParam._m0[78u].z);
        float _2914 = _2911 * _2774;
        float _2915 = _2912 * _2775;
        float _2916 = _2913 * _2776;
        float _2923 = _572 + (-0.5);
        _2925 = cbMtdParam._m0[1u];
        _2927 = _2925.y * _2923;
        float _2930 = (_2905 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2931 = _2930 * (_2906 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2887)));
        _2932 = _2930 * (_2906 ? _2915 : (_2915 + (cbSceneParam._m0[72u].w * _2889)));
        _2933 = _2930 * (_2906 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2891)));
        _2936 = ((_2782 * _2786) * _2911) * _2930;
        _2939 = ((_2783 * _2786) * _2912) * _2930;
        _2942 = ((_2784 * _2786) * _2913) * _2930;
        _2943 = _2923 * 0.999000012874603271484375;
        _2953 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2953)
        {
            if ((cbInstanceData._m0[_623 + 7u].x + _2943) < 0.5)
            {
                _3109 = true;
                break;
            }
        }
        uint _3050 = _624 + uint(_2903.w);
        if ((cbInstanceData._m0[_3050].w < 1.0) && ((cbInstanceData._m0[_3050].w + _2943) < 0.5))
        {
            _3109 = true;
            break;
        }
        if ((_2927 + 1.0) < _2925.x)
        {
            _3109 = true;
            break;
        }
        _3109 = false;
        break;
    }
    float _3313;
    if (_3109)
    {
        discard_state = true;
        _3313 = 0.0;
    }
    else
    {
        _3313 = _2791;
    }
    SV_Target.x = _2931;
    SV_Target.y = _2932;
    SV_Target.z = _2933;
    SV_Target.w = _3313;
    SV_Target_1.x = _2936;
    SV_Target_1.y = _2939;
    SV_Target_1.z = _2942;
    SV_Target_1.w = _2791;
    discard_exit();
}


