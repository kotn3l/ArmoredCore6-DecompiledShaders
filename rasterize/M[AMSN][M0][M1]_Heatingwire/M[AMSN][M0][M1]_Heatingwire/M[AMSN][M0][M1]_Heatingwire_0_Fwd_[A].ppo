#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1027;
float _3432;
float _3433;
float _3434;
float _3435;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    float _296 = (cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _297 = (cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _310 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_296 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_297 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _316 = _310.x * cbMtdParam._m0[9u].x;
    float _317 = _310.y * cbMtdParam._m0[9u].y;
    float _318 = _310.z * cbMtdParam._m0[9u].z;
    float _320 = cbMtdParam._m0[14u].z * TEXCOORD_1.z;
    vec4 _333 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    float _337 = _333.z;
    float _341 = (_333.x * 2.0) + (-1.0);
    float _343 = (_333.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_341, _343), vec2(_341, _343));
    float _3444 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))));
    float _361 = fma(0.9591662883758544921875, _222, fma(0.2000000476837158203125, _215, _201 * 0.2000000476837158203125));
    float _365 = fma(0.9591662883758544921875, _223, fma(0.2000000476837158203125, _216, _202 * 0.2000000476837158203125));
    float _368 = fma(0.9591662883758544921875, _224, fma(0.2000000476837158203125, _217, _203 * 0.2000000476837158203125));
    float _372 = inversesqrt(dot(vec3(_361, _365, _368), vec3(_361, _365, _368)));
    float _379 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _380 = _379 * _278;
    float _381 = _379 * _279;
    float _382 = _379 * _280;
    float _386 = dot(vec4(_380, _381, _382, 0.0), vec4(_372 * _361, _372 * _365, _372 * _368, 0.0)) - cbMtdParam._m0[14u].x;
    float _3455 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _393 = exp2(log2(1.0 - (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].y, 0.001000000047497451305389404296875))));
    vec4 _422 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _456 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _487 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _509 = fma(_350, _222, fma(_343, _215, _341 * _201));
    float _512 = fma(_350, _223, fma(_343, _216, _341 * _202));
    float _515 = fma(_350, _224, fma(_343, _217, _341 * _203));
    float _519 = inversesqrt(dot(vec3(_509, _512, _515), vec3(_509, _512, _515)));
    float _520 = _519 * _509;
    float _521 = _519 * _512;
    float _522 = _519 * _515;
    float _3471 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _523 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _3482 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _524 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _3493 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3504 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3515 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _543 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _548 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _550 = _548.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _706 = sqrt(((_278 * _278) + (_279 * _279)) + (_280 * _280));
        float _712 = (cbMatDynParam._m0[5u].x * _706) + cbMatDynParam._m0[5u].y;
        float _3526 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _717 = (cbMatDynParam._m0[5u].z * _706) + cbMatDynParam._m0[5u].w;
        float _3537 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) - _713)) + _713) < ((_550 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _562 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _563 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _582 = fma(_522, cbSceneParam._m0[5u].z, fma(_521, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _520));
    float _585 = fma(_522, cbSceneParam._m0[6u].z, fma(_521, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _520));
    float _588 = fma(_522, cbSceneParam._m0[7u].z, fma(_521, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _520));
    uint _601 = uint(roundEven(NORMAL.w)) * 13u;
    uint _602 = _601 + 9u;
    uint _603 = _602 + uint(cbMatDynParam._m0[0u].w);
    float _609 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_603].x;
    float _610 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_603].y;
    float _611 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_603].z;
    float _3548 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    vec4 _623 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _562, cbSceneParam._m0[86u].y * _563));
    float _626 = _623.x * TEXCOORD_1.w;
    float _627 = dot(vec3(_520, _521, _522), vec3(_380, _381, _382));
    float _630 = _627 * 2.0;
    float _634 = (_630 * _520) - _380;
    float _635 = (_630 * _521) - _381;
    float _636 = (_630 * _522) - _382;
    float _640 = abs(dot(vec3(_380, _381, _382), vec3(_520, _521, _522)));
    float _3581 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _642 = sqrt(_524);
    float _655 = exp2((_642 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_642 * 3.0));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1026;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _751 = fma(_695, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687));
        float _755 = fma(_695, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687));
        float _759 = fma(_695, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687));
        float _784 = _687 + _520;
        float _785 = _691 + _521;
        float _786 = _695 + _522;
        float _796 = fma(_786, cbModelParam._m0[26u].z, fma(_785, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _784)) - _751;
        float _797 = fma(_786, cbModelParam._m0[27u].z, fma(_785, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _784)) - _755;
        float _798 = fma(_786, cbModelParam._m0[28u].z, fma(_785, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _784)) - _759;
        float _802 = inversesqrt(dot(vec3(_796, _797, _798), vec3(_796, _797, _798)));
        float _815 = ((_802 * _796) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_751 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_802 * _797) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_755 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _817 = ((_802 * _798) / cbModelParam._m0[34u].z) + ((((((_759 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        float _854 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_820.x + (-0.5));
        float _856 = _854 * (_820.y + (-0.5));
        float _857 = _854 * (_820.z + (-0.5));
        float _864 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_827.x + (-0.5));
        float _866 = _864 * (_827.y + (-0.5));
        float _867 = _864 * (_827.z + (-0.5));
        float _874 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_834.x + (-0.5));
        float _876 = _874 * (_834.y + (-0.5));
        float _877 = _874 * (_834.z + (-0.5));
        float _884 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_841.x + (-0.5));
        float _886 = _884 * (_841.y + (-0.5));
        float _887 = _884 * (_841.z + (-0.5));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = _855 * 0.5;
        float _892 = _865 * 0.5;
        float _893 = _875 * 0.5;
        float _894 = dot(vec3(_891, _892, _893), vec3(_891, _892, _893));
        float _899 = (_894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_894);
        float _908 = (dot(vec3(_520, _521, _522), vec3(_899 * _891, _899 * _892, _899 * _893)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _918 = sqrt(((_892 * _892) + (_891 * _891)) + (_893 * _893)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _920 = _919 * 2.0;
        float _924 = (1.0 - _919) / (_919 + 1.0);
        float _3629 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _934 = ((((1.0 - _925) * (_920 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_920 + 1.0))) + _925) * _888;
        float _935 = _856 * 0.5;
        float _936 = _866 * 0.5;
        float _937 = _876 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _951 = (dot(vec3(_520, _521, _522), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _960 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3662 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_962 + 1.0))) + _967) * _889;
        float _977 = _857 * 0.5;
        float _978 = _867 * 0.5;
        float _979 = _877 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_520, _521, _522), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3695 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1004 + 1.0))) + _1009) * _890;
        _1026 = _857;
        _1028 = _856;
        _1029 = _855;
        _1030 = _867;
        _1031 = _866;
        _1032 = _865;
        _1033 = _877;
        _1034 = _876;
        _1035 = _875;
        _1036 = _890;
        _1037 = _889;
        _1038 = _888;
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
    }
    else
    {
        _1026 = _1027;
        _1028 = _1027;
        _1029 = _1027;
        _1030 = _1027;
        _1031 = _1027;
        _1032 = _1027;
        _1033 = _1027;
        _1034 = _1027;
        _1035 = _1027;
        _1036 = _1027;
        _1037 = _1027;
        _1038 = _1027;
        _1039 = 0.0;
        _1040 = 0.0;
        _1041 = 0.0;
    }
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1070 = fma(_695, cbModelParam._m0[30u].z, fma(_691, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _687));
        float _1074 = fma(_695, cbModelParam._m0[31u].z, fma(_691, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _687));
        float _1078 = fma(_695, cbModelParam._m0[32u].z, fma(_691, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _687));
        float _1101 = _687 + _520;
        float _1102 = _691 + _521;
        float _1103 = _695 + _522;
        float _1113 = fma(_1103, cbModelParam._m0[30u].z, fma(_1102, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101)) - _1070;
        float _1114 = fma(_1103, cbModelParam._m0[31u].z, fma(_1102, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101)) - _1074;
        float _1115 = fma(_1103, cbModelParam._m0[32u].z, fma(_1102, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101)) - _1078;
        float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
        float _1132 = ((_1119 * _1113) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1070 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1119 * _1114) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1074 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1119 * _1115) / cbModelParam._m0[35u].z) + ((((((_1078 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        float _1169 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1136.x + (-0.5));
        float _1171 = _1169 * (_1136.y + (-0.5));
        float _1172 = _1169 * (_1136.z + (-0.5));
        float _1179 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1143.x + (-0.5));
        float _1181 = _1179 * (_1143.y + (-0.5));
        float _1182 = _1179 * (_1143.z + (-0.5));
        float _1189 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1150.x + (-0.5));
        float _1191 = _1189 * (_1150.y + (-0.5));
        float _1192 = _1189 * (_1150.z + (-0.5));
        float _1199 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1157.x + (-0.5));
        float _1201 = _1199 * (_1157.y + (-0.5));
        float _1202 = _1199 * (_1157.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_520, _521, _522), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3758 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1233 + 1.0))) + _1238) * _1203;
        float _1248 = _1171 * 0.5;
        float _1249 = _1181 * 0.5;
        float _1250 = _1191 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_520, _521, _522), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3791 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1275 + 1.0))) + _1280) * _1204;
        float _1290 = _1172 * 0.5;
        float _1291 = _1182 * 0.5;
        float _1292 = _1192 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_520, _521, _522), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3824 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1317 + 1.0))) + _1322) * _1205;
        _1339 = _1172;
        _1340 = _1171;
        _1341 = _1170;
        _1342 = _1182;
        _1343 = _1181;
        _1344 = _1180;
        _1345 = _1192;
        _1346 = _1191;
        _1347 = _1190;
        _1348 = _1205;
        _1349 = _1204;
        _1350 = _1203;
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
    }
    else
    {
        _1339 = _1027;
        _1340 = _1027;
        _1341 = _1027;
        _1342 = _1027;
        _1343 = _1027;
        _1344 = _1027;
        _1345 = _1027;
        _1346 = _1027;
        _1347 = _1027;
        _1348 = _1027;
        _1349 = _1027;
        _1350 = _1027;
        _1351 = 0.0;
        _1352 = 0.0;
        _1353 = 0.0;
    }
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1039)) + _1039;
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1040)) + _1040;
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1041)) + _1041;
    float _1386 = fma(_1365, cbSceneParam._m0[89u].z, fma(_1364, cbSceneParam._m0[89u].y, _1363 * cbSceneParam._m0[89u].x));
    float _1389 = fma(_1365, cbSceneParam._m0[90u].z, fma(_1364, cbSceneParam._m0[90u].y, _1363 * cbSceneParam._m0[90u].x));
    float _1392 = fma(_1365, cbSceneParam._m0[91u].z, fma(_1364, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1363));
    float _1407 = _634 * 0.5;
    float _1408 = _635 * 0.5;
    float _1409 = _636 * 0.5;
    float _1410 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1413 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1416 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1450;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1423 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1026, _1030, _1033, _1036));
        float _1427 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1431 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1029, _1032, _1035, _1038));
        float _1438 = dot(vec4(cbModelParam._m0[39u]), vec4(_1407, _1408, _1409, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1438) ? 0.0 : (isnan(0.0) ? _1438 : max(0.0, _1438))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1461;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1452 = dot(vec4(cbModelParam._m0[40u]), vec4(_1407, _1408, _1409, 1.0));
        _1461 = dot(vec3(isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1452) ? 0.0 : (isnan(0.0) ? _1452 : max(0.0, _1452))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1461 = 1.0;
    }
    float _1465 = (_1461 * cbModelParam._m0[1u].x) + (_1450 * (1.0 - cbModelParam._m0[1u].x));
    float _1475 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _524);
    float _1476 = isnan(_1475) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1475 : min(cbModelParam._m0[25u].z, _1475));
    float _1556;
    float _1558;
    float _1560;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1523 = fma(_695, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687)) + cbModelParam._m0[13u].w;
        float _1527 = fma(_695, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687)) + cbModelParam._m0[14u].w;
        float _1531 = fma(_695, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687)) + cbModelParam._m0[15u].w;
        float _1534 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1537 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1540 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1568;
        if (_1534 > 0.0)
        {
            _1568 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1568 = frontier_phi_19_17_ladder;
        }
        float _1772;
        if (_1537 > 0.0)
        {
            _1772 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1772 = frontier_phi_28_24_ladder;
        }
        float _2015;
        if (_1540 > 0.0)
        {
            _2015 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2015 = frontier_phi_40_35_ladder;
        }
        float _2017 = isnan(_1772) ? _1568 : (isnan(_1568) ? _1772 : min(_1568, _1772));
        float _2018 = isnan(_2015) ? _2017 : (isnan(_2017) ? _2015 : min(_2017, _2015));
        float _2022 = (_2018 * _1534) + _1523;
        float _2023 = (_2018 * _1537) + _1527;
        float _2024 = (_2018 * _1540) + _1531;
        float _2025 = _2018 * 9.9999997473787516355514526367188e-05;
        float _2027 = (-1.0) - _2025;
        float _2029 = _2025 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2024 > _2029) || ((_2024 < _2027) || ((_2023 > _2029) || ((_2023 < _2027) || ((_2022 < _2027) || (_2022 > _2029))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2148 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2024, cbModelParam._m0[9u].z, fma(_2023, cbModelParam._m0[9u].y, _2022 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2024, cbModelParam._m0[10u].z, fma(_2023, cbModelParam._m0[10u].y, _2022 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2024, cbModelParam._m0[11u].z, fma(_2023, cbModelParam._m0[11u].y, _2022 * cbModelParam._m0[11u].x))), _1476);
            frontier_phi_18_40_ladder = _2148.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2148.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2148.x * cbModelParam._m0[1u].y;
        }
        _1556 = frontier_phi_18_40_ladder_2;
        _1558 = frontier_phi_18_40_ladder_1;
        _1560 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1476);
        _1556 = _1544.x * cbModelParam._m0[1u].y;
        _1558 = _1544.y * cbModelParam._m0[1u].y;
        _1560 = _1544.z * cbModelParam._m0[1u].y;
    }
    float _1564 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _524);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1564 : min(cbModelParam._m0[25u].w, _1564));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1621 = fma(_695, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687)) + cbModelParam._m0[21u].w;
        float _1625 = fma(_695, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687)) + cbModelParam._m0[22u].w;
        float _1629 = fma(_695, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687)) + cbModelParam._m0[23u].w;
        float _1632 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1635 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1638 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1777;
        if (_1632 > 0.0)
        {
            _1777 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1777 = frontier_phi_30_26_ladder;
        }
        float _2042;
        if (_1635 > 0.0)
        {
            _2042 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2042 = frontier_phi_42_37_ladder;
        }
        float _2247;
        if (_1638 > 0.0)
        {
            _2247 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2247 = frontier_phi_51_48_ladder;
        }
        float _2249 = isnan(_2042) ? _1777 : (isnan(_1777) ? _2042 : min(_1777, _2042));
        float _2250 = isnan(_2247) ? _2249 : (isnan(_2249) ? _2247 : min(_2249, _2247));
        float _2254 = (_2250 * _1632) + _1621;
        float _2255 = (_2250 * _1635) + _1625;
        float _2256 = (_2250 * _1638) + _1629;
        float _2257 = _2250 * 9.9999997473787516355514526367188e-05;
        float _2258 = (-1.0) - _2257;
        float _2260 = _2257 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2256 > _2260) || ((_2256 < _2258) || ((_2255 > _2260) || ((_2255 < _2258) || ((_2254 < _2258) || (_2254 > _2260))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2256, cbModelParam._m0[17u].z, fma(_2255, cbModelParam._m0[17u].y, _2254 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2256, cbModelParam._m0[18u].z, fma(_2255, cbModelParam._m0[18u].y, _2254 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2256, cbModelParam._m0[19u].z, fma(_2255, cbModelParam._m0[19u].y, _2254 * cbModelParam._m0[19u].x))), _1565);
            frontier_phi_27_51_ladder = _2485.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2485.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2485.x * cbModelParam._m0[1u].z;
        }
        _1657 = frontier_phi_27_51_ladder_2;
        _1659 = frontier_phi_27_51_ladder_1;
        _1661 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1565);
        _1657 = _1641.x * cbModelParam._m0[1u].z;
        _1659 = _1641.y * cbModelParam._m0[1u].z;
        _1661 = _1641.z * cbModelParam._m0[1u].z;
    }
    float _1673 = ((((1.0 - _655) * ((_642 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_655 * _642)) * _626;
    float _1674 = _1673 * ((cbModelParam._m0[1u].w * (_1657 - _1556)) + _1556);
    float _1675 = _1673 * ((cbModelParam._m0[1u].w * (_1659 - _1558)) + _1558);
    float _1676 = _1673 * ((cbModelParam._m0[1u].w * (_1661 - _1560)) + _1560);
    float _1679 = fma(_1676, cbSceneParam._m0[89u].z, fma(_1675, cbSceneParam._m0[89u].y, _1674 * cbSceneParam._m0[89u].x));
    float _1682 = fma(_1676, cbSceneParam._m0[90u].z, fma(_1675, cbSceneParam._m0[90u].y, _1674 * cbSceneParam._m0[90u].x));
    float _1685 = fma(_1676, cbSceneParam._m0[91u].z, fma(_1675, cbSceneParam._m0[91u].y, _1674 * cbSceneParam._m0[91u].x));
    uvec4 _1695 = floatBitsToUint(cbInstanceData._m0[_601 + 5u]);
    uint _1697 = _1695.x * 14u;
    uint _1698 = _1697 + 13u;
    float _1705 = _626 + (-1.0);
    float _1710 = (cbLight._m0[_1698].x * _1705) + 1.0;
    float _1711 = (cbLight._m0[_1698].y * _1705) + 1.0;
    float _1712 = (cbLight._m0[_1698].z * _1705) + 1.0;
    float _1713 = (cbLight._m0[_1698].w * _1705) + 1.0;
    uint _1714 = _1697 + 5u;
    float _1720 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
    uint _1724 = _1697 + 4u;
    float _1731 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
    uint _1735 = _1697 | 1u;
    float _1746 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_520, _521, _522));
    float _1749 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_520, _521, _522));
    float _3960 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _3971 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1754 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
    float _1756 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.3183098733425140380859375;
    float _1763 = ((cbLight._m0[_1714].x * _1720) * _1756) + ((cbLight._m0[_1724].x * _1731) * _1754);
    float _1764 = ((_1720 * cbLight._m0[_1714].y) * _1756) + ((_1731 * cbLight._m0[_1724].y) * _1754);
    float _1765 = ((_1720 * cbLight._m0[_1714].z) * _1756) + ((_1731 * cbLight._m0[_1724].z) * _1754);
    uvec4 _1769 = floatBitsToUint(cbLight._m0[_1697 + 12u]);
    bool _1771 = _1769.x == 0u;
    float _1782;
    float _1784;
    float _1786;
    if (_1771)
    {
        _1782 = _1763;
        _1784 = _1764;
        _1786 = _1765;
    }
    else
    {
        uint _1790 = _1697 + 6u;
        float _1806 = (dot(vec3(cbLight._m0[_1697 + 2u].xyz), vec3(_520, _521, _522)) * 0.5) + 0.5;
        float _1807 = _1806 * _1806;
        float _3982 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1809 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
        _1782 = (((cbLight._m0[_1790].x * 0.3183098733425140380859375) * _1808) * _1809) + _1763;
        _1784 = (((cbLight._m0[_1790].y * 0.3183098733425140380859375) * _1808) * _1809) + _1764;
        _1786 = (((cbLight._m0[_1790].z * 0.3183098733425140380859375) * _1808) * _1809) + _1765;
    }
    bool _1789 = _1769.y == 0u;
    float _1827;
    float _1829;
    float _1831;
    if (_1789)
    {
        _1827 = _1782;
        _1829 = _1784;
        _1831 = _1786;
    }
    else
    {
        uint _1986 = _1697 + 7u;
        float _2002 = (dot(vec3(cbLight._m0[_1697 + 3u].xyz), vec3(_520, _521, _522)) * 0.5) + 0.5;
        float _2003 = _2002 * _2002;
        float _3998 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2004 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _2005 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
        _1827 = (((cbLight._m0[_1986].x * 0.3183098733425140380859375) * _2004) * _2005) + _1782;
        _1829 = (((cbLight._m0[_1986].y * 0.3183098733425140380859375) * _2004) * _2005) + _1784;
        _1831 = (((cbLight._m0[_1986].z * 0.3183098733425140380859375) * _2004) * _2005) + _1786;
    }
    uint _1834 = _1697 + 8u;
    float _1847 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1697].w)) * _524) * 0.949999988079071044921875);
    float _1848 = _1847 * _1847;
    float _1849 = cbLight._m0[_1697].x + _380;
    float _1850 = cbLight._m0[_1697].y + _381;
    float _1851 = cbLight._m0[_1697].z + _382;
    float _1855 = inversesqrt(dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851)));
    float _1856 = _1855 * _1849;
    float _1857 = _1855 * _1850;
    float _1858 = _1855 * _1851;
    float _1859 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1697].xyz));
    float _4014 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1862 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _1863 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1864 = dot(vec3(_520, _521, _522), vec3(_1856, _1857, _1858));
    float _4036 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1867 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _1868 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_1856, _1857, _1858));
    float _4047 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1872 = _1848 * _1848;
    float _1876 = ((_1867 * _1867) * (_1872 + (-1.0))) + 1.0;
    float _1887 = (exp2(log2(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1888 = 1.0 - _1848;
    float _1899 = (0.5 / (((_1863 * ((_1862 * _1888) + _1848)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _1888) + _1848) * _1862))) * _1862;
    float _4058 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1901 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1872 / ((_1876 * _1876) * 3.141590118408203125));
    uint _1912 = _1697 + 9u;
    float _1923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1735].w)) * _524) * 0.949999988079071044921875);
    float _1924 = _1923 * _1923;
    float _1925 = cbLight._m0[_1735].x + _380;
    float _1926 = cbLight._m0[_1735].y + _381;
    float _1927 = cbLight._m0[_1735].z + _382;
    float _1931 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
    float _1932 = _1931 * _1925;
    float _1933 = _1931 * _1926;
    float _1934 = _1931 * _1927;
    float _1935 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1735].xyz));
    float _4069 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _1939 = dot(vec3(_520, _521, _522), vec3(_1932, _1933, _1934));
    float _4080 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1942 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _1943 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_1932, _1933, _1934));
    float _4091 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1947 = _1924 * _1924;
    float _1951 = ((_1942 * _1942) * (_1947 + (-1.0))) + 1.0;
    float _1960 = (exp2(log2(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1961 = 1.0 - _1924;
    float _1971 = (0.5 / (((_1863 * ((_1938 * _1961) + _1924)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _1961) + _1924) * _1938))) * _1938;
    float _4102 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1973 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1947 / ((_1951 * _1951) * 3.141590118408203125));
    float _1983 = (((_1960 * cbLight._m0[_1912].x) * _1973) * _1720) + (((_1887 * cbLight._m0[_1834].x) * _1901) * _1731);
    float _1984 = (((_1960 * cbLight._m0[_1912].y) * _1973) * _1720) + (((_1887 * cbLight._m0[_1834].y) * _1901) * _1731);
    float _1985 = (((_1960 * cbLight._m0[_1912].z) * _1973) * _1720) + (((_1887 * cbLight._m0[_1834].z) * _1901) * _1731);
    float _2047;
    float _2049;
    float _2051;
    if (_1771)
    {
        _2047 = _1983;
        _2049 = _1984;
        _2051 = _1985;
    }
    else
    {
        uint _2053 = _1697 + 2u;
        uint _2057 = _1697 + 10u;
        float _2071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _524) * 0.949999988079071044921875);
        float _2072 = _2071 * _2071;
        float _2073 = cbLight._m0[_2053].x + _380;
        float _2074 = cbLight._m0[_2053].y + _381;
        float _2075 = cbLight._m0[_2053].z + _382;
        float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
        float _2080 = _2079 * _2073;
        float _2081 = _2079 * _2074;
        float _2082 = _2079 * _2075;
        float _2083 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_2053].xyz));
        float _4113 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2086 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2087 = dot(vec3(_520, _521, _522), vec3(_2080, _2081, _2082));
        float _4124 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2090 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2091 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2080, _2081, _2082));
        float _4135 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2095 = _2072 * _2072;
        float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
        float _2108 = (exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2109 = 1.0 - _2072;
        float _2119 = (0.5 / (((_1863 * ((_2086 * _2109) + _2072)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _2109) + _2072) * _2086))) * _2086;
        float _4146 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2121 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
        float _2122 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
        _2047 = (((_2108 * cbLight._m0[_2057].x) * _2121) * _2122) + _1983;
        _2049 = (((_2108 * cbLight._m0[_2057].y) * _2121) * _2122) + _1984;
        _2051 = (((_2108 * cbLight._m0[_2057].z) * _2121) * _2122) + _1985;
    }
    float _2157;
    float _2159;
    float _2161;
    if (_1789)
    {
        _2157 = _2047;
        _2159 = _2049;
        _2161 = _2051;
    }
    else
    {
        uint _2168 = _1697 + 3u;
        uint _2172 = _1697 + 11u;
        float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _524) * 0.949999988079071044921875);
        float _2187 = _2186 * _2186;
        float _2188 = cbLight._m0[_2168].x + _380;
        float _2189 = cbLight._m0[_2168].y + _381;
        float _2190 = cbLight._m0[_2168].z + _382;
        float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
        float _2195 = _2194 * _2188;
        float _2196 = _2194 * _2189;
        float _2197 = _2194 * _2190;
        float _2198 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_2168].xyz));
        float _4162 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2202 = dot(vec3(_520, _521, _522), vec3(_2195, _2196, _2197));
        float _4173 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2206 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2195, _2196, _2197));
        float _4184 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2210 = _2187 * _2187;
        float _2214 = ((_2205 * _2205) * (_2210 + (-1.0))) + 1.0;
        float _2223 = (exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2224 = 1.0 - _2187;
        float _2234 = (0.5 / (((_1863 * ((_2201 * _2224) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _2224) + _2187) * _2201))) * _2201;
        float _4195 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2236 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2210 / ((_2214 * _2214) * 3.141590118408203125));
        float _2237 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
        _2157 = (((_2223 * cbLight._m0[_2172].x) * _2236) * _2237) + _2047;
        _2159 = (((_2223 * cbLight._m0[_2172].y) * _2236) * _2237) + _2049;
        _2161 = (((_2223 * cbLight._m0[_2172].z) * _2236) * _2237) + _2051;
    }
    float _2371;
    float _2373;
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    if (_1695.y == 0u)
    {
        float _2312 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2313 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2312;
        float _2314 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2312;
        float _2315 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2312;
        uvec4 _2327 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2328 = _2327.x;
        uint _2339 = uint((float(_2327.y) * floor(float(uint(cbSceneParam._m0[85u].y * _563) / _2328))) + floor(float(uint(cbSceneParam._m0[85u].x * _562) / _2328)));
        float _2349 = (log2(_2315 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2350 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        uint _2353 = uint(isnan(14.0) ? _2350 : (isnan(_2350) ? 14.0 : min(_2350, 14.0)));
        uvec4 _2358 = texelFetch(g_lightClusterGridBuffer, int(((_2353 << 2u) + (_2339 << 6u)) >> 2u));
        uint _2359 = _2358.x;
        uint _2360 = _2327.z;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        if (((((1u << ((_2360 >> 4u) & 15u)) + 4294967295u) & _2359) == 0u) || ((_2360 & 240u) == 0u))
        {
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
        }
        else
        {
            float _2491;
            float _2493;
            float _2495;
            float _2497;
            float _2499;
            float _2501;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            uint _2657 = 0u;
            uint _2666;
            bool _2667;
            for (;;)
            {
                _2666 = texelFetch(g_lightClassification, int((((_2353 << 5u) + (_2339 << 9u)) + (_2657 << 2u)) >> 2u)).x;
                _2667 = _2666 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2667)
                {
                    frontier_phi_68_pred = _2653;
                    frontier_phi_68_pred_1 = _2656;
                    frontier_phi_68_pred_2 = _2655;
                    frontier_phi_68_pred_3 = _2654;
                    frontier_phi_68_pred_4 = _2652;
                    frontier_phi_68_pred_5 = _2651;
                }
                else
                {
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    uint _2802;
                    _2796 = _2651;
                    _2797 = _2652;
                    _2798 = _2653;
                    _2799 = _2654;
                    _2800 = _2655;
                    _2801 = _2656;
                    _2802 = _2666;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    for (;;)
                    {
                        uint _2806 = uint(findLSB(_2802)) + (_2657 << 5u);
                        uint _2803 = (_2802 + 4294967295u) & _2802;
                        uint _2808 = _2806 * 48u;
                        vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 3u)).x));
                        uint _2828 = (_2806 * 48u) + 4u;
                        vec4 _2841 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 3u)).x));
                        uint _2847 = (_2806 * 48u) + 8u;
                        vec3 _2858 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x));
                        float _2862 = _2822.x - _2313;
                        float _2863 = _2822.y - _2314;
                        float _2864 = _2822.z - _2315;
                        float _2865 = dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864));
                        float _2868 = inversesqrt(_2865);
                        float _2869 = _2868 * _2862;
                        float _2870 = _2868 * _2863;
                        float _2871 = _2868 * _2864;
                        float _2872 = dot(vec3(_582, _585, _588), vec3(_2869, _2870, _2871));
                        float _2877 = 1.0 - (_2865 * _2822.w);
                        float _4221 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2878 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                        float _2879 = sqrt(_2865) * _2841.w;
                        float _2882 = 1.39999997615814208984375 / (_2879 + 1.39999997615814208984375);
                        float _2883 = _2882 * _2882;
                        float _2886 = ((1.0 - _2883) * _2872) + _2883;
                        float _2889 = _2879 * _2879;
                        float _2893 = ((isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))) * _2878) / ((_2889 * 0.699999988079071044921875) + 1.0);
                        float _2897 = (-0.0) - _2313;
                        float _2898 = (-0.0) - _2314;
                        float _2899 = (-0.0) - _2315;
                        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
                        float _2904 = _2903 * _2897;
                        float _2905 = _2903 * _2898;
                        float _2906 = _2903 * _2899;
                        float _2914 = exp2(log2(1.0 / ((_2889 * 3.5) + 5.0)) * 0.25);
                        float _2915 = 1.0 - _642;
                        float _2922 = sqrt(1.0 - ((1.0 - (_2915 * _2915)) * (1.0 - (_2914 * _2914))));
                        float _2923 = _2922 * _2922;
                        float _2924 = _2923 * _2923;
                        float _2925 = _2904 + _2869;
                        float _2926 = _2905 + _2870;
                        float _2927 = _2906 + _2871;
                        float _2931 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
                        float _2935 = dot(vec3(_582, _585, _588), vec3(_2904, _2905, _2906));
                        float _4237 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2938 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2939 = dot(vec3(_582, _585, _588), vec3(_2931 * _2925, _2931 * _2926, _2931 * _2927));
                        float _4248 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2946 = ((_2942 * _2942) * (_2924 + (-1.0))) + 1.0;
                        float _2947 = _2882 * _2923;
                        float _2948 = _2947 * _2947;
                        float _2951 = ((1.0 - _2948) * _2872) + _2948;
                        float _4259 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2953 = 1.0 - _2923;
                        float _2963 = (0.5 / (((_2952 * ((_2938 * _2953) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2952 * _2953) + _2923) * _2938))) * _2952;
                        float _4270 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2974 = (((_2924 * 3.1415927410125732421875) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) / ((_2946 * _2946) * ((_2889 * 2.1991131305694580078125) + 3.141590118408203125))) * _2878;
                        _2726 = (_2893 * _2841.x) + _2799;
                        _2727 = (_2893 * _2841.y) + _2800;
                        _2728 = (_2893 * _2841.z) + _2801;
                        _2723 = (_2974 * _2858.x) + _2796;
                        _2724 = (_2974 * _2858.y) + _2797;
                        _2725 = (_2974 * _2858.z) + _2798;
                        if (_2803 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2725;
                            _2799 = _2726;
                            _2800 = _2727;
                            _2801 = _2728;
                            _2802 = _2803;
                        }
                    }
                    frontier_phi_68_pred = _2725;
                    frontier_phi_68_pred_1 = _2728;
                    frontier_phi_68_pred_2 = _2727;
                    frontier_phi_68_pred_3 = _2726;
                    frontier_phi_68_pred_4 = _2724;
                    frontier_phi_68_pred_5 = _2723;
                }
                _2495 = frontier_phi_68_pred;
                _2501 = frontier_phi_68_pred_1;
                _2499 = frontier_phi_68_pred_2;
                _2497 = frontier_phi_68_pred_3;
                _2493 = frontier_phi_68_pred_4;
                _2491 = frontier_phi_68_pred_5;
                uint _2658 = _2657 + 1u;
                if (_2658 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2651 = _2491;
                    _2652 = _2493;
                    _2653 = _2495;
                    _2654 = _2497;
                    _2655 = _2499;
                    _2656 = _2501;
                    _2657 = _2658;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
        }
        uvec4 _2504 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2505 = _2504.z;
        uint _2507 = (_2505 >> 8u) & 15u;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((4294967295u << _2507) & _2359) == 0u)
        {
            _2619 = _2490;
            _2621 = _2492;
            _2623 = _2494;
            _2625 = _2496;
            _2627 = _2498;
            _2629 = _2500;
        }
        else
        {
            float _2644 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
            float _2645 = _2644 * _2313;
            float _2646 = _2644 * _2314;
            float _2647 = _2644 * _2315;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2507 < ((_2505 >> 12u) & 15u))
            {
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2779 = _2490;
                float _2780 = _2492;
                float _2781 = _2494;
                float _2782 = _2496;
                float _2783 = _2498;
                float _2784 = _2500;
                uint _2785 = _2507;
                uint _2794;
                bool _2795;
                for (;;)
                {
                    _2794 = texelFetch(g_lightClassification, int((((_2353 << 5u) + (_2339 << 9u)) + (_2785 << 2u)) >> 2u)).x;
                    _2795 = _2794 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2795)
                    {
                        frontier_phi_79_pred = _2784;
                        frontier_phi_79_pred_1 = _2783;
                        frontier_phi_79_pred_2 = _2782;
                        frontier_phi_79_pred_3 = _2781;
                        frontier_phi_79_pred_4 = _2780;
                        frontier_phi_79_pred_5 = _2779;
                    }
                    else
                    {
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3001 = _2779;
                        float _3002 = _2780;
                        float _3003 = _2781;
                        float _3004 = _2782;
                        float _3005 = _2783;
                        float _3006 = _2784;
                        uint _3007 = _2794;
                        uint _3008;
                        vec4 _3033;
                        float _3034;
                        vec4 _3049;
                        vec3 _3061;
                        vec4 _3076;
                        vec4 _3092;
                        float _3139;
                        bool _3140;
                        for (;;)
                        {
                            uint _3018 = ((_2785 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3007));
                            _3008 = (_3007 + 4294967295u) & _3007;
                            uint _3020 = _3018 * 40u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            _3034 = _3033.w;
                            uint _3036 = (_3018 * 40u) + 4u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3051 = (_3018 * 40u) + 8u;
                            _3061 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x));
                            uint _3063 = (_3018 * 40u) + 16u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3079 = (_3018 * 40u) + 20u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3095 = (_3018 * 40u) + 24u;
                            vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3114 = (_3018 * 40u) + 28u;
                            vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3139 = fma(_2315, _3127.z, fma(_2314, _3127.y, _3127.x * _2313)) + _3127.w;
                            _3140 = !((fma(_2315, _3108.z, fma(_2314, _3108.y, _3108.x * _2313)) + _3108.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3140)
                            {
                                float _3167 = _3033.x - _2313;
                                float _3168 = _3033.y - _2314;
                                float _3169 = _3033.z - _2315;
                                float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                                float _3173 = inversesqrt(_3170);
                                float _3174 = _3173 * _3167;
                                float _3175 = _3173 * _3168;
                                float _3176 = _3173 * _3169;
                                float _3180 = 1.0 - (_3170 / (_3034 * _3034));
                                float _4281 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3185 = sqrt(_3170) * _3049.w;
                                float _3187 = 1.39999997615814208984375 / (_3185 + 1.39999997615814208984375);
                                float _3188 = _3187 * _3187;
                                float _3191 = ((1.0 - _3188) * dot(vec3(_3174, _3175, _3176), vec3(_582, _585, _588))) + _3188;
                                float _3194 = _3185 * _3185;
                                float _3198 = (fma(_2315, _3076.z, fma(_2314, _3076.y, _3076.x * _2313)) + _3076.w) / _3139;
                                float _3199 = (fma(_2315, _3092.z, fma(_2314, _3092.y, _3092.x * _2313)) + _3092.w) / _3139;
                                float _3203 = 1.0 - dot(vec2(_3198, _3199), vec2(_3198, _3199));
                                float _4297 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3204 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3205 = _3204 * (((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3181) / ((_3194 * 0.699999988079071044921875) + 1.0));
                                float _3217 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                                float _3218 = 1.0 - _642;
                                float _3225 = sqrt(1.0 - ((1.0 - (_3218 * _3218)) * (1.0 - (_3217 * _3217))));
                                float _3226 = _3225 * _3225;
                                float _3227 = _3226 * _3226;
                                float _3228 = _3174 - _2645;
                                float _3229 = _3175 - _2646;
                                float _3230 = _3176 - _2647;
                                float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                                float _3238 = dot(vec3(_582, _585, _588), vec3((-0.0) - _2645, (-0.0) - _2646, (-0.0) - _2647));
                                float _4308 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3241 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3242 = dot(vec3(_582, _585, _588), vec3(_3234 * _3228, _3234 * _3229, _3234 * _3230));
                                float _4319 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3245 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3249 = ((_3245 * _3245) * (_3227 + (-1.0))) + 1.0;
                                float _3250 = _3187 * _3226;
                                float _3251 = _3250 * _3250;
                                float _3257 = ((1.0 - _3251) * dot(vec3(_582, _585, _588), vec3(_3174, _3175, _3176))) + _3251;
                                float _4330 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                                float _3259 = 1.0 - _3226;
                                float _3269 = (0.5 / (((_3258 * ((_3241 * _3259) + _3226)) + 9.9999999392252902907785028219223e-09) + (((_3258 * _3259) + _3226) * _3241))) * _3258;
                                float _4341 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3279 = (_3204 * _3181) * (((_3227 * 3.1415927410125732421875) * (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) / ((_3249 * _3249) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3205 * _3049.z;
                                frontier_phi_85_pred_1 = _3205 * _3049.y;
                                frontier_phi_85_pred_2 = _3205 * _3049.x;
                                frontier_phi_85_pred_3 = _3279 * _3061.z;
                                frontier_phi_85_pred_4 = _3279 * _3061.y;
                                frontier_phi_85_pred_5 = _3279 * _3061.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3288 = frontier_phi_85_pred;
                            _3287 = frontier_phi_85_pred_1;
                            _3286 = frontier_phi_85_pred_2;
                            _3285 = frontier_phi_85_pred_3;
                            _3284 = frontier_phi_85_pred_4;
                            _3283 = frontier_phi_85_pred_5;
                            _2991 = _3286 + _3004;
                            _2992 = _3287 + _3005;
                            _2993 = _3288 + _3006;
                            _2988 = _3283 + _3001;
                            _2989 = _3284 + _3002;
                            _2990 = _3285 + _3003;
                            if (_3008 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _3008;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2993;
                        frontier_phi_79_pred_1 = _2992;
                        frontier_phi_79_pred_2 = _2991;
                        frontier_phi_79_pred_3 = _2990;
                        frontier_phi_79_pred_4 = _2989;
                        frontier_phi_79_pred_5 = _2988;
                    }
                    _2630 = frontier_phi_79_pred;
                    _2628 = frontier_phi_79_pred_1;
                    _2626 = frontier_phi_79_pred_2;
                    _2624 = frontier_phi_79_pred_3;
                    _2622 = frontier_phi_79_pred_4;
                    _2620 = frontier_phi_79_pred_5;
                    uint _2786 = _2785 + 1u;
                    if (_2786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2779 = _2620;
                        _2780 = _2622;
                        _2781 = _2624;
                        _2782 = _2626;
                        _2783 = _2628;
                        _2784 = _2630;
                        _2785 = _2786;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2626;
                frontier_phi_60_61_ladder_1 = _2630;
                frontier_phi_60_61_ladder_2 = _2628;
                frontier_phi_60_61_ladder_3 = _2624;
                frontier_phi_60_61_ladder_4 = _2622;
                frontier_phi_60_61_ladder_5 = _2620;
            }
            else
            {
                frontier_phi_60_61_ladder = _2496;
                frontier_phi_60_61_ladder_1 = _2500;
                frontier_phi_60_61_ladder_2 = _2498;
                frontier_phi_60_61_ladder_3 = _2494;
                frontier_phi_60_61_ladder_4 = _2492;
                frontier_phi_60_61_ladder_5 = _2490;
            }
            _2619 = frontier_phi_60_61_ladder_5;
            _2621 = frontier_phi_60_61_ladder_4;
            _2623 = frontier_phi_60_61_ladder_3;
            _2625 = frontier_phi_60_61_ladder;
            _2627 = frontier_phi_60_61_ladder_2;
            _2629 = frontier_phi_60_61_ladder_1;
        }
        float _2634 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
        _2371 = (_2634 * _2625) + _1827;
        _2373 = (_2634 * _2627) + _1829;
        _2375 = (_2634 * _2629) + _1831;
        _2377 = ((_2619 * 0.039999999105930328369140625) * _2634) + _2157;
        _2379 = ((_2621 * 0.039999999105930328369140625) * _2634) + _2159;
        _2381 = ((_2623 * 0.039999999105930328369140625) * _2634) + _2161;
    }
    else
    {
        _2371 = _1827;
        _2373 = _1829;
        _2375 = _1831;
        _2377 = _2157;
        _2379 = _2159;
        _2381 = _2161;
    }
    uint _2387 = _602 + uint(cbMatDynParam._m0[0u].w);
    float _2393 = (((((_422.x * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _393)) + (_456.x * cbMtdParam._m0[12u].x)) + (_487.x * cbMtdParam._m0[13u].x)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2387].x;
    float _2394 = (((((_422.y * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _393)) + (_456.y * cbMtdParam._m0[12u].y)) + (_487.y * cbMtdParam._m0[13u].y)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2387].y;
    float _2395 = (((((_422.z * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _393)) + (_456.z * cbMtdParam._m0[12u].z)) + (_487.z * cbMtdParam._m0[13u].z)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2387].z;
    float _4357 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4368 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4379 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4390 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _2413 = (((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2371 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _626))) + ((_2377 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1465)) * cbPerFrame._m0[3u].x)) + _2393;
    float _2415 = (_2394 + ((_2379 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1465)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2373 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _626)));
    float _2417 = (_2395 + ((_2381 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _1465)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2375 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _626)));
    float _2418 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2419 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2420 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2426 = cbMtdParam._m0[2u].x * _2393;
    float _2427 = cbMtdParam._m0[2u].y * _2394;
    float _2428 = cbMtdParam._m0[2u].z * _2395;
    float _4416 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2430 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2435 = cbInstanceData._m0[_601 + 6u].w * (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)));
    float _2440 = _562 / cbSceneParam._m0[86u].x;
    float _2441 = _563 / cbSceneParam._m0[86u].y;
    vec4 _2455 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2440, _2441, (log2((isnan(cbSceneParam._m0[77u].w) ? _543 : (isnan(_543) ? cbSceneParam._m0[77u].w : min(_543, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2457 = _2455.x;
    float _2458 = _2455.y;
    float _2459 = _2455.z;
    float _2460 = _2455.w;
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    if (_543 > cbSceneParam._m0[78u].w)
    {
        float _2515 = isnan(_543) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _543 : min(cbSceneParam._m0[80u].w, _543));
        float _2516 = _2515 / _543;
        float _2527 = _2516 * _278;
        float _2528 = _279 * _2516;
        float _2529 = (-0.0) - _2528;
        float _2530 = _2516 * _280;
        float _2532 = (cbSceneParam._m0[77u].w * _2529) / _2515;
        float _2533 = _2532 + cbSceneParam._m0[79u].w;
        float _2534 = cbSceneParam._m0[79u].w - _2528;
        float _2540 = sqrt(((_2527 * _2527) + (_2528 * _2528)) + (_2530 * _2530));
        float _2543 = (1.0 - (cbSceneParam._m0[77u].w / _2515)) * _2540;
        float _2548 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2550 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2736;
        if (abs((_2529 - _2532) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2736 = ((((_2533 > 0.0) ? exp2(_2548 * _2533) : (2.0 - exp2(_2550 * _2533))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2543;
        }
        else
        {
            float _2680 = 1.0 / cbSceneParam._m0[80u].x;
            float _2681 = isnan(_2534) ? _2533 : (isnan(_2533) ? _2534 : max(_2533, _2534));
            float _2682 = isnan(_2534) ? _2533 : (isnan(_2533) ? _2534 : min(_2533, _2534));
            float _2691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : min(_2681, 0.0));
            float _2692 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : min(_2682, 0.0));
            _2736 = ((abs(_2540 / _2529) * cbSceneParam._m0[80u].y) * ((((_2691 - _2692) * 2.0) - ((exp2(_2548 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0)))) - exp2(_2548 * (isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0))))) * _2680)) - ((exp2(_2550 * _2691) - exp2(_2550 * _2692)) * _2680))) + (_2543 * cbSceneParam._m0[80u].z);
        }
        vec4 _2738 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2440, _2441, 1.0), 0.0);
        float _2747 = exp2((_2736 * (-1.44269502162933349609375)) * (1.0 - _2738.w));
        float _2748 = log2(_2747);
        float _2764 = log2(_2460);
        _2552 = (exp2(_2764 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].x)) * _2738.x) / cbSceneParam._m0[78u].x)) + _2457;
        _2554 = (exp2(_2764 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].y)) * _2738.y) / cbSceneParam._m0[78u].y)) + _2458;
        _2556 = (exp2(_2764 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].z)) * _2738.z) / cbSceneParam._m0[78u].z)) + _2459;
        _2558 = _2747 * _2460;
    }
    else
    {
        _2552 = _2457;
        _2554 = _2458;
        _2556 = _2459;
        _2558 = _2460;
    }
    bool _2774;
    vec4 _2568;
    vec4 _2590;
    float _2592;
    float _2596;
    float _2597;
    float _2598;
    float _2601;
    float _2604;
    float _2607;
    float _2608;
    bool _2618;
    for (;;)
    {
        _2568 = cbMatDynParam._m0[0u];
        float _2570 = roundEven(_2568.y);
        bool _2571 = _2570 == 3.0;
        float _2572 = log2(_2558);
        float _2576 = exp2(_2572 * cbSceneParam._m0[78u].x);
        float _2577 = exp2(_2572 * cbSceneParam._m0[78u].y);
        float _2578 = exp2(_2572 * cbSceneParam._m0[78u].z);
        float _2579 = _2576 * _2418;
        float _2580 = _2577 * _2419;
        float _2581 = _2578 * _2420;
        float _2588 = _550 + (-0.5);
        _2590 = cbMtdParam._m0[1u];
        _2592 = _2590.y * _2588;
        float _2595 = (_2570 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2596 = _2595 * (_2571 ? _2579 : (_2579 + (cbSceneParam._m0[72u].w * _2552)));
        _2597 = _2595 * (_2571 ? _2580 : (_2580 + (cbSceneParam._m0[72u].w * _2554)));
        _2598 = _2595 * (_2571 ? _2581 : (_2581 + (cbSceneParam._m0[72u].w * _2556)));
        _2601 = ((_2426 * _2430) * _2576) * _2595;
        _2604 = ((_2427 * _2430) * _2577) * _2595;
        _2607 = ((_2428 * _2430) * _2578) * _2595;
        _2608 = _2588 * 0.999000012874603271484375;
        _2618 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2618)
        {
            if ((cbInstanceData._m0[_601 + 7u].x + _2608) < 0.5)
            {
                _2774 = true;
                break;
            }
        }
        uint _2715 = _602 + uint(_2568.w);
        if ((cbInstanceData._m0[_2715].w < 1.0) && ((cbInstanceData._m0[_2715].w + _2608) < 0.5))
        {
            _2774 = true;
            break;
        }
        if ((_2592 + 1.0) < _2590.x)
        {
            _2774 = true;
            break;
        }
        _2774 = false;
        break;
    }
    float _2979;
    if (_2774)
    {
        discard_state = true;
        _2979 = 0.0;
    }
    else
    {
        _2979 = _2435;
    }
    SV_Target.x = _2596;
    SV_Target.y = _2597;
    SV_Target.z = _2598;
    SV_Target.w = _2979;
    SV_Target_1.x = _2601;
    SV_Target_1.y = _2604;
    SV_Target_1.z = _2607;
    SV_Target_1.w = _2435;
    discard_exit();
}


