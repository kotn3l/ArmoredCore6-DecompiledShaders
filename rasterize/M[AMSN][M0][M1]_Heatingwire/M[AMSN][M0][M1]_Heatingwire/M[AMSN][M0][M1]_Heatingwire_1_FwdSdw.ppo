#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1022;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    float _298 = (cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _299 = (cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _312 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_298 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_299 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _318 = _312.x * cbMtdParam._m0[9u].x;
    float _319 = _312.y * cbMtdParam._m0[9u].y;
    float _320 = _312.z * cbMtdParam._m0[9u].z;
    float _322 = cbMtdParam._m0[14u].z * TEXCOORD_1.z;
    vec4 _335 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    float _337 = _335.x;
    vec4 _350 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    float _354 = _350.z;
    float _358 = (_350.x * 2.0) + (-1.0);
    float _360 = (_350.y * 2.0) + (-1.0);
    float _361 = dot(vec2(_358, _360), vec2(_358, _360));
    float _3676 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _367 = sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))));
    float _378 = fma(0.9591662883758544921875, _224, fma(0.2000000476837158203125, _217, _203 * 0.2000000476837158203125));
    float _382 = fma(0.9591662883758544921875, _225, fma(0.2000000476837158203125, _218, _204 * 0.2000000476837158203125));
    float _385 = fma(0.9591662883758544921875, _226, fma(0.2000000476837158203125, _219, _205 * 0.2000000476837158203125));
    float _389 = inversesqrt(dot(vec3(_378, _382, _385), vec3(_378, _382, _385)));
    float _396 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _397 = _396 * _280;
    float _398 = _396 * _281;
    float _399 = _396 * _282;
    float _403 = dot(vec4(_397, _398, _399, 0.0), vec4(_389 * _378, _389 * _382, _389 * _385, 0.0)) - cbMtdParam._m0[14u].x;
    float _3687 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _410 = exp2(log2(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].y, 0.001000000047497451305389404296875))));
    vec4 _439 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _473 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _504 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _526 = fma(_367, _224, fma(_360, _217, _358 * _203));
    float _529 = fma(_367, _225, fma(_360, _218, _358 * _204));
    float _532 = fma(_367, _226, fma(_360, _219, _358 * _205));
    float _536 = inversesqrt(dot(vec3(_526, _529, _532), vec3(_526, _529, _532)));
    float _537 = _536 * _526;
    float _538 = _536 * _529;
    float _539 = _536 * _532;
    float _3703 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _540 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _541 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3736 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3747 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3758 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _545 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _561 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _567 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _568 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _588 = fma(_539, cbSceneParam._m0[5u].z, fma(_538, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _537));
    float _591 = fma(_539, cbSceneParam._m0[6u].z, fma(_538, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _537));
    float _594 = fma(_539, cbSceneParam._m0[7u].z, fma(_538, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _537));
    uint _607 = uint(roundEven(NORMAL.w)) * 13u;
    uint _608 = _607 + 9u;
    uint _609 = _608 + uint(cbMatDynParam._m0[0u].w);
    float _615 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * cbInstanceData._m0[_609].x;
    float _616 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_609].y;
    float _617 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_609].z;
    float _3769 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _621 = 1.0 - _545;
    float _622 = _618 * _621;
    float _623 = _619 * _621;
    float _624 = _620 * _621;
    float _629 = (_618 + (-0.039999999105930328369140625)) * _545;
    float _630 = (_619 + (-0.039999999105930328369140625)) * _545;
    float _631 = (_620 + (-0.039999999105930328369140625)) * _545;
    float _632 = _629 + 0.039999999105930328369140625;
    float _634 = _630 + 0.039999999105930328369140625;
    float _635 = _631 + 0.039999999105930328369140625;
    vec4 _644 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _567, cbSceneParam._m0[86u].y * _568));
    float _647 = _644.x * TEXCOORD_1.w;
    float _648 = dot(vec3(_537, _538, _539), vec3(_397, _398, _399));
    float _651 = _648 * 2.0;
    float _655 = (_651 * _537) - _397;
    float _656 = (_651 * _538) - _398;
    float _657 = (_651 * _539) - _399;
    float _661 = abs(dot(vec3(_397, _398, _399), vec3(_537, _538, _539)));
    float _3802 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _663 = sqrt(_541);
    float _676 = exp2((_663 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_663 * 3.0));
    float _682 = (1.0 - _676) * ((_663 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _683 = _676 * _663;
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1021;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _746 = fma(_719, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711));
        float _750 = fma(_719, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711));
        float _754 = fma(_719, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711));
        float _779 = _711 + _537;
        float _780 = _715 + _538;
        float _781 = _719 + _539;
        float _791 = fma(_781, cbModelParam._m0[26u].z, fma(_780, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779)) - _746;
        float _792 = fma(_781, cbModelParam._m0[27u].z, fma(_780, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779)) - _750;
        float _793 = fma(_781, cbModelParam._m0[28u].z, fma(_780, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779)) - _754;
        float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
        float _810 = ((_797 * _791) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_746 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_797 * _792) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_750 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _812 = ((_797 * _793) / cbModelParam._m0[34u].z) + ((((((_754 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        float _849 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_815.x + (-0.5));
        float _851 = _849 * (_815.y + (-0.5));
        float _852 = _849 * (_815.z + (-0.5));
        float _859 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_822.x + (-0.5));
        float _861 = _859 * (_822.y + (-0.5));
        float _862 = _859 * (_822.z + (-0.5));
        float _869 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_829.x + (-0.5));
        float _871 = _869 * (_829.y + (-0.5));
        float _872 = _869 * (_829.z + (-0.5));
        float _879 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_836.x + (-0.5));
        float _881 = _879 * (_836.y + (-0.5));
        float _882 = _879 * (_836.z + (-0.5));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = _850 * 0.5;
        float _887 = _860 * 0.5;
        float _888 = _870 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _903 = (dot(vec3(_537, _538, _539), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _913 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3850 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_915 + 1.0))) + _920) * _883;
        float _930 = _851 * 0.5;
        float _931 = _861 * 0.5;
        float _932 = _871 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_537, _538, _539), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3883 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_957 + 1.0))) + _962) * _884;
        float _972 = _852 * 0.5;
        float _973 = _862 * 0.5;
        float _974 = _872 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_537, _538, _539), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3916 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_999 + 1.0))) + _1004) * _885;
        _1021 = _852;
        _1023 = _851;
        _1024 = _850;
        _1025 = _862;
        _1026 = _861;
        _1027 = _860;
        _1028 = _872;
        _1029 = _871;
        _1030 = _870;
        _1031 = _885;
        _1032 = _884;
        _1033 = _883;
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
    }
    else
    {
        _1021 = _1022;
        _1023 = _1022;
        _1024 = _1022;
        _1025 = _1022;
        _1026 = _1022;
        _1027 = _1022;
        _1028 = _1022;
        _1029 = _1022;
        _1030 = _1022;
        _1031 = _1022;
        _1032 = _1022;
        _1033 = _1022;
        _1034 = 0.0;
        _1035 = 0.0;
        _1036 = 0.0;
    }
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1062 = fma(_719, cbModelParam._m0[30u].z, fma(_715, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _711));
        float _1066 = fma(_719, cbModelParam._m0[31u].z, fma(_715, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _711));
        float _1070 = fma(_719, cbModelParam._m0[32u].z, fma(_715, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _711));
        float _1093 = _711 + _537;
        float _1094 = _715 + _538;
        float _1095 = _719 + _539;
        float _1105 = fma(_1095, cbModelParam._m0[30u].z, fma(_1094, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093)) - _1062;
        float _1106 = fma(_1095, cbModelParam._m0[31u].z, fma(_1094, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093)) - _1066;
        float _1107 = fma(_1095, cbModelParam._m0[32u].z, fma(_1094, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093)) - _1070;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1062 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1066 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[35u].z) + ((((((_1070 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1161 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1128.x + (-0.5));
        float _1163 = _1161 * (_1128.y + (-0.5));
        float _1164 = _1161 * (_1128.z + (-0.5));
        float _1171 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1135.x + (-0.5));
        float _1173 = _1171 * (_1135.y + (-0.5));
        float _1174 = _1171 * (_1135.z + (-0.5));
        float _1181 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1142.x + (-0.5));
        float _1183 = _1181 * (_1142.y + (-0.5));
        float _1184 = _1181 * (_1142.z + (-0.5));
        float _1191 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1149.x + (-0.5));
        float _1193 = _1191 * (_1149.y + (-0.5));
        float _1194 = _1191 * (_1149.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_537, _538, _539), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3979 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1225 + 1.0))) + _1230) * _1195;
        float _1240 = _1163 * 0.5;
        float _1241 = _1173 * 0.5;
        float _1242 = _1183 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_537, _538, _539), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4012 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1267 + 1.0))) + _1272) * _1196;
        float _1282 = _1164 * 0.5;
        float _1283 = _1174 * 0.5;
        float _1284 = _1184 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_537, _538, _539), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4045 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1309 + 1.0))) + _1314) * _1197;
        _1331 = _1164;
        _1332 = _1163;
        _1333 = _1162;
        _1334 = _1174;
        _1335 = _1173;
        _1336 = _1172;
        _1337 = _1184;
        _1338 = _1183;
        _1339 = _1182;
        _1340 = _1197;
        _1341 = _1196;
        _1342 = _1195;
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1022;
        _1332 = _1022;
        _1333 = _1022;
        _1334 = _1022;
        _1335 = _1022;
        _1336 = _1022;
        _1337 = _1022;
        _1338 = _1022;
        _1339 = _1022;
        _1340 = _1022;
        _1341 = _1022;
        _1342 = _1022;
        _1343 = 0.0;
        _1344 = 0.0;
        _1345 = 0.0;
    }
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1034)) + _1034;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1035)) + _1035;
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1036)) + _1036;
    float _1378 = fma(_1357, cbSceneParam._m0[89u].z, fma(_1356, cbSceneParam._m0[89u].y, _1355 * cbSceneParam._m0[89u].x));
    float _1381 = fma(_1357, cbSceneParam._m0[90u].z, fma(_1356, cbSceneParam._m0[90u].y, _1355 * cbSceneParam._m0[90u].x));
    float _1384 = fma(_1357, cbSceneParam._m0[91u].z, fma(_1356, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1355));
    float _1399 = _655 * 0.5;
    float _1400 = _656 * 0.5;
    float _1401 = _657 * 0.5;
    float _1402 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1405 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1408 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1442;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1415 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1021, _1025, _1028, _1031));
        float _1419 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1423 = dot(vec4(_1399, _1400, _1401, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1430 = dot(vec4(cbModelParam._m0[39u]), vec4(_1399, _1400, _1401, 1.0));
        _1442 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1430) ? 0.0 : (isnan(0.0) ? _1430 : max(0.0, _1430))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1442 = 1.0;
    }
    float _1453;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1444 = dot(vec4(cbModelParam._m0[40u]), vec4(_1399, _1400, _1401, 1.0));
        _1453 = dot(vec3(isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1453 = 1.0;
    }
    float _1457 = (_1453 * cbModelParam._m0[1u].x) + (_1442 * (1.0 - cbModelParam._m0[1u].x));
    float _1467 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _541);
    float _1468 = isnan(_1467) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1467 : min(cbModelParam._m0[25u].z, _1467));
    float _1548;
    float _1550;
    float _1552;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1515 = fma(_719, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711)) + cbModelParam._m0[13u].w;
        float _1519 = fma(_719, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711)) + cbModelParam._m0[14u].w;
        float _1523 = fma(_719, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711)) + cbModelParam._m0[15u].w;
        float _1526 = fma(_657, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655));
        float _1529 = fma(_657, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655));
        float _1532 = fma(_657, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655));
        float _1560;
        if (_1526 > 0.0)
        {
            _1560 = abs((1.0 - _1515) / _1526);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1515 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1560 = frontier_phi_16_14_ladder;
        }
        float _1734;
        if (_1529 > 0.0)
        {
            _1734 = abs((1.0 - _1519) / _1529);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1519 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1734 = frontier_phi_25_21_ladder;
        }
        float _2029;
        if (_1532 > 0.0)
        {
            _2029 = abs((1.0 - _1523) / _1532);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1523 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2029 = frontier_phi_37_32_ladder;
        }
        float _2031 = isnan(_1734) ? _1560 : (isnan(_1560) ? _1734 : min(_1560, _1734));
        float _2032 = isnan(_2029) ? _2031 : (isnan(_2031) ? _2029 : min(_2031, _2029));
        float _2036 = (_2032 * _1526) + _1515;
        float _2037 = (_2032 * _1529) + _1519;
        float _2038 = (_2032 * _1532) + _1523;
        float _2039 = _2032 * 9.9999997473787516355514526367188e-05;
        float _2041 = (-1.0) - _2039;
        float _2043 = _2039 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2038 > _2043) || ((_2038 < _2041) || ((_2037 > _2043) || ((_2037 < _2041) || ((_2036 < _2041) || (_2036 > _2043))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2183 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2038, cbModelParam._m0[9u].z, fma(_2037, cbModelParam._m0[9u].y, _2036 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2038, cbModelParam._m0[10u].z, fma(_2037, cbModelParam._m0[10u].y, _2036 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2038, cbModelParam._m0[11u].z, fma(_2037, cbModelParam._m0[11u].y, _2036 * cbModelParam._m0[11u].x))), _1468);
            frontier_phi_15_37_ladder = _2183.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2183.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2183.z * cbModelParam._m0[1u].y;
        }
        _1548 = frontier_phi_15_37_ladder_1;
        _1550 = frontier_phi_15_37_ladder;
        _1552 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_655, _656, _657), _1468);
        _1548 = _1536.x * cbModelParam._m0[1u].y;
        _1550 = _1536.y * cbModelParam._m0[1u].y;
        _1552 = _1536.z * cbModelParam._m0[1u].y;
    }
    float _1556 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _541);
    float _1557 = isnan(_1556) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1556 : min(cbModelParam._m0[25u].w, _1556));
    float _1649;
    float _1651;
    float _1653;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1613 = fma(_719, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711)) + cbModelParam._m0[21u].w;
        float _1617 = fma(_719, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711)) + cbModelParam._m0[22u].w;
        float _1621 = fma(_719, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711)) + cbModelParam._m0[23u].w;
        float _1624 = fma(_657, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655));
        float _1627 = fma(_657, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655));
        float _1630 = fma(_657, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655));
        float _1739;
        if (_1624 > 0.0)
        {
            _1739 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1739 = frontier_phi_27_23_ladder;
        }
        float _2056;
        if (_1627 > 0.0)
        {
            _2056 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2056 = frontier_phi_39_34_ladder;
        }
        float _2394;
        if (_1630 > 0.0)
        {
            _2394 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2394 = frontier_phi_49_46_ladder;
        }
        float _2396 = isnan(_2056) ? _1739 : (isnan(_1739) ? _2056 : min(_1739, _2056));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1624) + _1613;
        float _2402 = (_2397 * _1627) + _1617;
        float _2403 = (_2397 * _1630) + _1621;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2404;
        float _2407 = _2404 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2403 > _2407) || ((_2403 < _2405) || ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 < _2405) || (_2401 > _2407))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2403, cbModelParam._m0[17u].z, fma(_2402, cbModelParam._m0[17u].y, _2401 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2403, cbModelParam._m0[18u].z, fma(_2402, cbModelParam._m0[18u].y, _2401 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2403, cbModelParam._m0[19u].z, fma(_2402, cbModelParam._m0[19u].y, _2401 * cbModelParam._m0[19u].x))), _1557);
            frontier_phi_24_49_ladder = _2525.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2525.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2525.x * cbModelParam._m0[1u].z;
        }
        _1649 = frontier_phi_24_49_ladder_2;
        _1651 = frontier_phi_24_49_ladder_1;
        _1653 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_655, _656, _657), _1557);
        _1649 = _1633.x * cbModelParam._m0[1u].z;
        _1651 = _1633.y * cbModelParam._m0[1u].z;
        _1653 = _1633.z * cbModelParam._m0[1u].z;
    }
    float _1666 = (((_682 * _632) + _683) * _647) * ((cbModelParam._m0[1u].w * (_1649 - _1548)) + _1548);
    float _1668 = (((_682 * _634) + _683) * _647) * ((cbModelParam._m0[1u].w * (_1651 - _1550)) + _1550);
    float _1670 = (((_682 * _635) + _683) * _647) * ((cbModelParam._m0[1u].w * (_1653 - _1552)) + _1552);
    float _1673 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, _1666 * cbSceneParam._m0[91u].x));
    float _1713 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1717 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1721 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1725 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1726 = _1713 / _1725;
    float _1727 = _1717 / _1725;
    float _1728 = _1721 / _1725;
    float _1875;
    float _1876;
    float _1877;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1755 = ((uint(_1728 > cbSceneParam._m0[59u].y) + uint(_1728 > cbSceneParam._m0[59u].x)) + uint(_1728 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1756 = _1755 + 43u;
        uint _1764 = _1755 + 44u;
        uint _1772 = _1755 + 45u;
        uint _1780 = _1755 + 46u;
        float _1791 = fma(_1725, cbSceneParam._m0[_1756].w, fma(_1721, cbSceneParam._m0[_1756].z, fma(_1717, cbSceneParam._m0[_1756].y, _1713 * cbSceneParam._m0[_1756].x)));
        float _1795 = fma(_1725, cbSceneParam._m0[_1764].w, fma(_1721, cbSceneParam._m0[_1764].z, fma(_1717, cbSceneParam._m0[_1764].y, _1713 * cbSceneParam._m0[_1764].x)));
        float _1803 = fma(_1725, cbSceneParam._m0[_1780].w, fma(_1721, cbSceneParam._m0[_1780].z, fma(_1717, cbSceneParam._m0[_1780].y, _1713 * cbSceneParam._m0[_1780].x)));
        float _1808 = cbSceneParam._m0[33u].z * _1803;
        float _1810 = cbSceneParam._m0[33u].w * _1803;
        float _1813 = fma(_1725, cbSceneParam._m0[_1772].w, fma(_1721, cbSceneParam._m0[_1772].z, fma(_1717, cbSceneParam._m0[_1772].y, _1713 * cbSceneParam._m0[_1772].x))) / _1803;
        float _1861 = (cbSceneParam._m0[33u].x - sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728))) * cbSceneParam._m0[33u].y;
        float _4171 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1868 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1808 + _1791) / _1803, (_1810 + _1795) / _1803), _1813), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1810 + _1791) / _1803, (_1795 - _1808) / _1803), _1813), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1791 - _1808) / _1803, (_1795 - _1810) / _1803), _1813), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1791 - _1810) / _1803, (_1808 + _1795) / _1803), _1813), 0.0)).x), vec4(0.25)));
        _1875 = 1.0 - (_1868 * cbSceneParam._m0[34u].x);
        _1876 = 1.0 - (_1868 * cbSceneParam._m0[34u].y);
        _1877 = 1.0 - (_1868 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1875 = 1.0;
        _1876 = 1.0;
        _1877 = 1.0;
    }
    float _1941;
    float _1943;
    float _1945;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1929 = fma(_1725, cbSceneParam._m0[63u].w, fma(_1721, cbSceneParam._m0[63u].z, fma(_1717, cbSceneParam._m0[63u].y, _1713 * cbSceneParam._m0[63u].x)));
        float _1930 = fma(_1725, cbSceneParam._m0[60u].w, fma(_1721, cbSceneParam._m0[60u].z, fma(_1717, cbSceneParam._m0[60u].y, _1713 * cbSceneParam._m0[60u].x))) / _1929;
        float _1931 = fma(_1725, cbSceneParam._m0[61u].w, fma(_1721, cbSceneParam._m0[61u].z, fma(_1717, cbSceneParam._m0[61u].y, _1713 * cbSceneParam._m0[61u].x))) / _1929;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1930 >= cbSceneParam._m0[64u].x) && (_1931 >= cbSceneParam._m0[64u].y)) && (_1930 <= cbSceneParam._m0[64u].z)) && (_1931 <= cbSceneParam._m0[64u].w))
        {
            float _2069 = fma(_1725, cbSceneParam._m0[62u].w, fma(_1721, cbSceneParam._m0[62u].z, fma(_1717, cbSceneParam._m0[62u].y, _1713 * cbSceneParam._m0[62u].x))) / _1929;
            float _2073 = isnan(cbSceneParam._m0[41u].w) ? _2069 : (isnan(_2069) ? cbSceneParam._m0[41u].w : max(_2069, cbSceneParam._m0[41u].w));
            float _2116 = (cbSceneParam._m0[33u].x - sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728))) * cbSceneParam._m0[33u].y;
            float _4187 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
            float _2123 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1930, cbSceneParam._m0[33u].w + _1931), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1930, _1931 - cbSceneParam._m0[33u].z), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1930 - cbSceneParam._m0[33u].z, _1931 - cbSceneParam._m0[33u].w), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1930 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1931), _2073), 0.0)).x), vec4(0.25)));
            float _2127 = 1.0 - (_2123 * cbSceneParam._m0[34u].x);
            float _2128 = 1.0 - (_2123 * cbSceneParam._m0[34u].y);
            float _2129 = 1.0 - (_2123 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2128) ? _1876 : (isnan(_1876) ? _2128 : min(_1876, _2128));
            frontier_phi_36_35_ladder_1 = isnan(_2129) ? _1877 : (isnan(_1877) ? _2129 : min(_1877, _2129));
            frontier_phi_36_35_ladder_2 = isnan(_2127) ? _1875 : (isnan(_1875) ? _2127 : min(_1875, _2127));
        }
        else
        {
            frontier_phi_36_35_ladder = _1876;
            frontier_phi_36_35_ladder_1 = _1877;
            frontier_phi_36_35_ladder_2 = _1875;
        }
        _1941 = frontier_phi_36_35_ladder_2;
        _1943 = frontier_phi_36_35_ladder;
        _1945 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1941 = _1875;
        _1943 = _1876;
        _1945 = _1877;
    }
    uvec4 _1950 = floatBitsToUint(cbInstanceData._m0[_607 + 5u]);
    uint _1952 = _1950.x * 14u;
    uint _1953 = _1952 + 13u;
    float _1960 = _647 + (-1.0);
    float _1965 = (cbLight._m0[_1953].x * _1960) + 1.0;
    float _1966 = (cbLight._m0[_1953].y * _1960) + 1.0;
    float _1967 = (cbLight._m0[_1953].z * _1960) + 1.0;
    float _1968 = (cbLight._m0[_1953].w * _1960) + 1.0;
    uint _1969 = _1952 + 5u;
    float _1975 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
    uint _1979 = _1952 + 4u;
    float _1988 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
    uint _1992 = _1952 | 1u;
    float _2003 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_537, _538, _539));
    float _2006 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_537, _538, _539));
    float _4223 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _4234 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2011 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * 0.3183098733425140380859375;
    float _2013 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.3183098733425140380859375;
    float _2020 = ((cbLight._m0[_1969].x * _1975) * _2013) + (((cbLight._m0[_1979].x * _1941) * _1988) * _2011);
    float _2021 = ((_1975 * cbLight._m0[_1969].y) * _2013) + (((cbLight._m0[_1979].y * _1943) * _1988) * _2011);
    float _2022 = ((_1975 * cbLight._m0[_1969].z) * _2013) + (((cbLight._m0[_1979].z * _1945) * _1988) * _2011);
    uvec4 _2026 = floatBitsToUint(cbLight._m0[_1952 + 12u]);
    bool _2028 = _2026.x == 0u;
    float _2130;
    float _2132;
    float _2134;
    if (_2028)
    {
        _2130 = _2020;
        _2132 = _2021;
        _2134 = _2022;
    }
    else
    {
        uint _2138 = _1952 + 6u;
        float _2154 = (dot(vec3(cbLight._m0[_1952 + 2u].xyz), vec3(_537, _538, _539)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _4245 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2157 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
        _2130 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _2020;
        _2132 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _2021;
        _2134 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _2022;
    }
    bool _2137 = _2026.y == 0u;
    float _2192;
    float _2194;
    float _2196;
    if (_2137)
    {
        _2192 = _2130;
        _2194 = _2132;
        _2196 = _2134;
    }
    else
    {
        uint _2365 = _1952 + 7u;
        float _2381 = (dot(vec3(cbLight._m0[_1952 + 3u].xyz), vec3(_537, _538, _539)) * 0.5) + 0.5;
        float _2382 = _2381 * _2381;
        float _4261 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2383 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2384 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2192 = (((cbLight._m0[_2365].x * 0.3183098733425140380859375) * _2383) * _2384) + _2130;
        _2194 = (((cbLight._m0[_2365].y * 0.3183098733425140380859375) * _2383) * _2384) + _2132;
        _2196 = (((cbLight._m0[_2365].z * 0.3183098733425140380859375) * _2383) * _2384) + _2134;
    }
    uint _2199 = _1952 + 8u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1952].w)) * _541) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_1952].x + _397;
    float _2215 = cbLight._m0[_1952].y + _398;
    float _2216 = cbLight._m0[_1952].z + _399;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_1952].xyz));
    float _4277 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _4288 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _2228 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2229 = dot(vec3(_537, _538, _539), vec3(_2221, _2222, _2223));
    float _4299 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2233 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_2221, _2222, _2223));
    float _4310 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2237 = _2213 * _2213;
    float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
    float _2249 = exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0);
    float _2250 = 0.959999978542327880859375 - _629;
    float _2252 = 0.959999978542327880859375 - _630;
    float _2253 = 0.959999978542327880859375 - _631;
    float _2260 = 1.0 - _2213;
    float _2271 = (0.5 / (((_2228 * ((_2227 * _2260) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2260) + _2213) * _2227))) * _2227;
    float _4321 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
    uint _2287 = _1952 + 9u;
    float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _541) * 0.949999988079071044921875);
    float _2299 = _2298 * _2298;
    float _2300 = cbLight._m0[_1992].x + _397;
    float _2301 = cbLight._m0[_1992].y + _398;
    float _2302 = cbLight._m0[_1992].z + _399;
    float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
    float _2307 = _2306 * _2300;
    float _2308 = _2306 * _2301;
    float _2309 = _2306 * _2302;
    float _2310 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_1992].xyz));
    float _4332 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2314 = dot(vec3(_537, _538, _539), vec3(_2307, _2308, _2309));
    float _4343 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2318 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2307, _2308, _2309));
    float _4354 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2322 = _2299 * _2299;
    float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
    float _2333 = exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0);
    float _2340 = 1.0 - _2299;
    float _2350 = (0.5 / (((_2228 * ((_2313 * _2340) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2340) + _2299) * _2313))) * _2313;
    float _4365 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
    float _2362 = (((((_2333 * _2250) + _632) * cbLight._m0[_2287].x) * _2352) * _1975) + ((((cbLight._m0[_2199].x * _1941) * ((_2249 * _2250) + _632)) * _2273) * _1988);
    float _2363 = (((((_2333 * _2252) + _634) * cbLight._m0[_2287].y) * _2352) * _1975) + ((((cbLight._m0[_2199].y * _1943) * ((_2249 * _2252) + _634)) * _2273) * _1988);
    float _2364 = (((((_2333 * _2253) + _635) * cbLight._m0[_2287].z) * _2352) * _1975) + ((((cbLight._m0[_2199].z * _1945) * ((_2249 * _2253) + _635)) * _2273) * _1988);
    float _2420;
    float _2422;
    float _2424;
    if (_2028)
    {
        _2420 = _2362;
        _2422 = _2363;
        _2424 = _2364;
    }
    else
    {
        uint _2426 = _1952 + 2u;
        uint _2430 = _1952 + 10u;
        float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _541) * 0.949999988079071044921875);
        float _2445 = _2444 * _2444;
        float _2446 = cbLight._m0[_2426].x + _397;
        float _2447 = cbLight._m0[_2426].y + _398;
        float _2448 = cbLight._m0[_2426].z + _399;
        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
        float _2453 = _2452 * _2446;
        float _2454 = _2452 * _2447;
        float _2455 = _2452 * _2448;
        float _2456 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_2426].xyz));
        float _4376 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2460 = dot(vec3(_537, _538, _539), vec3(_2453, _2454, _2455));
        float _4387 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2464 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2453, _2454, _2455));
        float _4398 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2468 = _2445 * _2445;
        float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
        float _2479 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
        float _2486 = 1.0 - _2445;
        float _2496 = (0.5 / (((_2228 * ((_2459 * _2486) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2486) + _2445) * _2459))) * _2459;
        float _4409 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2498 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
        float _2499 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
        _2420 = (((((_2479 * _2250) + _632) * cbLight._m0[_2430].x) * _2498) * _2499) + _2362;
        _2422 = (((((_2479 * _2252) + _634) * cbLight._m0[_2430].y) * _2498) * _2499) + _2363;
        _2424 = (((((_2479 * _2253) + _635) * cbLight._m0[_2430].z) * _2498) * _2499) + _2364;
    }
    float _2530;
    float _2532;
    float _2534;
    if (_2137)
    {
        _2530 = _2420;
        _2532 = _2422;
        _2534 = _2424;
    }
    else
    {
        uint _2541 = _1952 + 3u;
        uint _2545 = _1952 + 11u;
        float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2541].w)) * _541) * 0.949999988079071044921875);
        float _2560 = _2559 * _2559;
        float _2561 = cbLight._m0[_2541].x + _397;
        float _2562 = cbLight._m0[_2541].y + _398;
        float _2563 = cbLight._m0[_2541].z + _399;
        float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
        float _2568 = _2567 * _2561;
        float _2569 = _2567 * _2562;
        float _2570 = _2567 * _2563;
        float _2571 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_2541].xyz));
        float _4425 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2575 = dot(vec3(_537, _538, _539), vec3(_2568, _2569, _2570));
        float _4436 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2579 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_2568, _2569, _2570));
        float _4447 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2583 = _2560 * _2560;
        float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
        float _2594 = exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0);
        float _2601 = 1.0 - _2560;
        float _2611 = (0.5 / (((_2228 * ((_2574 * _2601) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2601) + _2560) * _2574))) * _2574;
        float _4458 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2613 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
        float _2614 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2530 = (((((_2594 * _2250) + _632) * cbLight._m0[_2545].x) * _2613) * _2614) + _2420;
        _2532 = (((((_2594 * _2252) + _634) * cbLight._m0[_2545].y) * _2613) * _2614) + _2422;
        _2534 = (((((_2594 * _2253) + _635) * cbLight._m0[_2545].z) * _2613) * _2614) + _2424;
    }
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    if (_1950.y == 0u)
    {
        uvec4 _2635 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2636 = _2635.x;
        uint _2647 = uint((float(_2635.y) * floor(float(uint(cbSceneParam._m0[85u].y * _568) / _2636))) + floor(float(uint(cbSceneParam._m0[85u].x * _567) / _2636)));
        float _2657 = (log2(_1728 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2658 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        uint _2661 = uint(isnan(14.0) ? _2658 : (isnan(_2658) ? 14.0 : min(_2658, 14.0)));
        uvec4 _2666 = texelFetch(g_lightClusterGridBuffer, int(((_2661 << 2u) + (_2647 << 6u)) >> 2u));
        uint _2667 = _2666.x;
        uint _2668 = _2635.z;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        if (((((1u << ((_2668 >> 4u) & 15u)) + 4294967295u) & _2667) == 0u) || ((_2668 & 240u) == 0u))
        {
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
        }
        else
        {
            float _2778;
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            uint _2936 = 0u;
            uint _2945;
            bool _2946;
            for (;;)
            {
                _2945 = texelFetch(g_lightClassification, int((((_2661 << 5u) + (_2647 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                _2946 = _2945 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2946)
                {
                    frontier_phi_68_pred = _2935;
                    frontier_phi_68_pred_1 = _2934;
                    frontier_phi_68_pred_2 = _2933;
                    frontier_phi_68_pred_3 = _2931;
                    frontier_phi_68_pred_4 = _2930;
                    frontier_phi_68_pred_5 = _2932;
                }
                else
                {
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    uint _3060;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2945;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    for (;;)
                    {
                        uint _3064 = uint(findLSB(_3060)) + (_2936 << 5u);
                        uint _3061 = (_3060 + 4294967295u) & _3060;
                        uint _3066 = _3064 * 48u;
                        vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 3u)).x));
                        uint _3086 = (_3064 * 48u) + 4u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 3u)).x));
                        uint _3105 = (_3064 * 48u) + 8u;
                        vec3 _3116 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x));
                        float _3120 = _3080.x - _1726;
                        float _3121 = _3080.y - _1727;
                        float _3122 = _3080.z - _1728;
                        float _3123 = dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122));
                        float _3126 = inversesqrt(_3123);
                        float _3127 = _3126 * _3120;
                        float _3128 = _3126 * _3121;
                        float _3129 = _3126 * _3122;
                        float _3130 = dot(vec3(_588, _591, _594), vec3(_3127, _3128, _3129));
                        float _3135 = 1.0 - (_3123 * _3080.w);
                        float _4484 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3136 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3137 = sqrt(_3123) * _3099.w;
                        float _3140 = 1.39999997615814208984375 / (_3137 + 1.39999997615814208984375);
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3130) + _3141;
                        float _3147 = _3137 * _3137;
                        float _3151 = ((isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))) * _3136) / ((_3147 * 0.699999988079071044921875) + 1.0);
                        float _3155 = (-0.0) - _1726;
                        float _3156 = (-0.0) - _1727;
                        float _3157 = (-0.0) - _1728;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3162 = _3161 * _3155;
                        float _3163 = _3161 * _3156;
                        float _3164 = _3161 * _3157;
                        float _3171 = exp2(log2(1.0 / ((_3147 * 3.5) + 5.0)) * 0.25);
                        float _3172 = 1.0 - _663;
                        float _3179 = sqrt(1.0 - ((1.0 - (_3172 * _3172)) * (1.0 - (_3171 * _3171))));
                        float _3180 = _3179 * _3179;
                        float _3181 = _3180 * _3180;
                        float _3182 = _3162 + _3127;
                        float _3183 = _3163 + _3128;
                        float _3184 = _3164 + _3129;
                        float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
                        float _3192 = dot(vec3(_588, _591, _594), vec3(_3162, _3163, _3164));
                        float _4500 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3195 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3196 = dot(vec3(_588, _591, _594), vec3(_3188 * _3182, _3188 * _3183, _3188 * _3184));
                        float _4511 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3199 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3203 = ((_3199 * _3199) * (_3181 + (-1.0))) + 1.0;
                        float _3204 = _3140 * _3180;
                        float _3205 = _3204 * _3204;
                        float _3208 = ((1.0 - _3205) * _3130) + _3205;
                        float _4522 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3210 = 1.0 - _3180;
                        float _3220 = (0.5 / (((_3209 * ((_3195 * _3210) + _3180)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3180) * _3195))) * _3209;
                        float _4533 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3231 = (((_3181 * 3.1415927410125732421875) * (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) / ((_3203 * _3203) * ((_3147 * 2.1991131305694580078125) + 3.141590118408203125))) * _3136;
                        _2989 = (_3151 * _3099.x) + _3057;
                        _2990 = (_3151 * _3099.y) + _3058;
                        _2991 = (_3151 * _3099.z) + _3059;
                        _2986 = (_3231 * _3116.x) + _3054;
                        _2987 = (_3231 * _3116.y) + _3055;
                        _2988 = (_3231 * _3116.z) + _3056;
                        if (_3061 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _3061;
                        }
                    }
                    frontier_phi_68_pred = _2991;
                    frontier_phi_68_pred_1 = _2990;
                    frontier_phi_68_pred_2 = _2989;
                    frontier_phi_68_pred_3 = _2987;
                    frontier_phi_68_pred_4 = _2986;
                    frontier_phi_68_pred_5 = _2988;
                }
                _2788 = frontier_phi_68_pred;
                _2786 = frontier_phi_68_pred_1;
                _2784 = frontier_phi_68_pred_2;
                _2780 = frontier_phi_68_pred_3;
                _2778 = frontier_phi_68_pred_4;
                _2782 = frontier_phi_68_pred_5;
                uint _2937 = _2936 + 1u;
                if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2930 = _2778;
                    _2931 = _2780;
                    _2932 = _2782;
                    _2933 = _2784;
                    _2934 = _2786;
                    _2935 = _2788;
                    _2936 = _2937;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
        }
        uvec4 _2791 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2792 = _2791.z;
        uint _2794 = (_2792 >> 8u) & 15u;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((4294967295u << _2794) & _2667) == 0u)
        {
            _2898 = _2777;
            _2900 = _2779;
            _2902 = _2781;
            _2904 = _2783;
            _2906 = _2785;
            _2908 = _2787;
        }
        else
        {
            float _2923 = inversesqrt(dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728)));
            float _2924 = _2923 * _1726;
            float _2925 = _2923 * _1727;
            float _2926 = _2923 * _1728;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2794 < ((_2792 >> 12u) & 15u))
            {
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _3037 = _2777;
                float _3038 = _2779;
                float _3039 = _2781;
                float _3040 = _2783;
                float _3041 = _2785;
                float _3042 = _2787;
                uint _3043 = _2794;
                uint _3052;
                bool _3053;
                for (;;)
                {
                    _3052 = texelFetch(g_lightClassification, int((((_2661 << 5u) + (_2647 << 9u)) + (_3043 << 2u)) >> 2u)).x;
                    _3053 = _3052 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3053)
                    {
                        frontier_phi_74_pred = _3039;
                        frontier_phi_74_pred_1 = _3038;
                        frontier_phi_74_pred_2 = _3037;
                        frontier_phi_74_pred_3 = _3042;
                        frontier_phi_74_pred_4 = _3041;
                        frontier_phi_74_pred_5 = _3040;
                    }
                    else
                    {
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3249 = _3037;
                        float _3250 = _3038;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        float _3253 = _3041;
                        float _3254 = _3042;
                        uint _3255 = _3052;
                        uint _3256;
                        vec4 _3281;
                        float _3282;
                        vec4 _3297;
                        vec3 _3309;
                        vec4 _3324;
                        vec4 _3340;
                        float _3387;
                        bool _3388;
                        for (;;)
                        {
                            uint _3266 = ((_3043 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3255));
                            _3256 = (_3255 + 4294967295u) & _3255;
                            uint _3268 = _3266 * 40u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            _3282 = _3281.w;
                            uint _3284 = (_3266 * 40u) + 4u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3266 * 40u) + 8u;
                            _3309 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x));
                            uint _3311 = (_3266 * 40u) + 16u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3327 = (_3266 * 40u) + 20u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3343 = (_3266 * 40u) + 24u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3362 = (_3266 * 40u) + 28u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3387 = fma(_1728, _3375.z, fma(_1727, _3375.y, _3375.x * _1726)) + _3375.w;
                            _3388 = !((fma(_1728, _3356.z, fma(_1727, _3356.y, _3356.x * _1726)) + _3356.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3388)
                            {
                                float _3415 = _3281.x - _1726;
                                float _3416 = _3281.y - _1727;
                                float _3417 = _3281.z - _1728;
                                float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                                float _3421 = inversesqrt(_3418);
                                float _3422 = _3421 * _3415;
                                float _3423 = _3421 * _3416;
                                float _3424 = _3421 * _3417;
                                float _3428 = 1.0 - (_3418 / (_3282 * _3282));
                                float _4544 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3433 = sqrt(_3418) * _3297.w;
                                float _3435 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                                float _3436 = _3435 * _3435;
                                float _3439 = ((1.0 - _3436) * dot(vec3(_3422, _3423, _3424), vec3(_588, _591, _594))) + _3436;
                                float _3442 = _3433 * _3433;
                                float _3446 = (fma(_1728, _3324.z, fma(_1727, _3324.y, _3324.x * _1726)) + _3324.w) / _3387;
                                float _3447 = (fma(_1728, _3340.z, fma(_1727, _3340.y, _3340.x * _1726)) + _3340.w) / _3387;
                                float _3451 = 1.0 - dot(vec2(_3446, _3447), vec2(_3446, _3447));
                                float _4560 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3453 = _3452 * (((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3429) / ((_3442 * 0.699999988079071044921875) + 1.0));
                                float _3465 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                                float _3466 = 1.0 - _663;
                                float _3473 = sqrt(1.0 - ((1.0 - (_3466 * _3466)) * (1.0 - (_3465 * _3465))));
                                float _3474 = _3473 * _3473;
                                float _3475 = _3474 * _3474;
                                float _3476 = _3422 - _2924;
                                float _3477 = _3423 - _2925;
                                float _3478 = _3424 - _2926;
                                float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                                float _3486 = dot(vec3(_588, _591, _594), vec3((-0.0) - _2924, (-0.0) - _2925, (-0.0) - _2926));
                                float _4571 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3490 = dot(vec3(_588, _591, _594), vec3(_3482 * _3476, _3482 * _3477, _3482 * _3478));
                                float _4582 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3497 = ((_3493 * _3493) * (_3475 + (-1.0))) + 1.0;
                                float _3498 = _3435 * _3474;
                                float _3499 = _3498 * _3498;
                                float _3505 = ((1.0 - _3499) * dot(vec3(_588, _591, _594), vec3(_3422, _3423, _3424))) + _3499;
                                float _4593 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3507 = 1.0 - _3474;
                                float _3517 = (0.5 / (((_3506 * ((_3489 * _3507) + _3474)) + 9.9999999392252902907785028219223e-09) + (((_3506 * _3507) + _3474) * _3489))) * _3506;
                                float _4604 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3527 = (_3452 * _3429) * (((_3475 * 3.1415927410125732421875) * (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) / ((_3497 * _3497) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3527 * _3309.z;
                                frontier_phi_80_pred_1 = _3527 * _3309.y;
                                frontier_phi_80_pred_2 = _3527 * _3309.x;
                                frontier_phi_80_pred_3 = _3453 * _3297.z;
                                frontier_phi_80_pred_4 = _3453 * _3297.y;
                                frontier_phi_80_pred_5 = _3453 * _3297.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3533 = frontier_phi_80_pred;
                            _3532 = frontier_phi_80_pred_1;
                            _3531 = frontier_phi_80_pred_2;
                            _3536 = frontier_phi_80_pred_3;
                            _3535 = frontier_phi_80_pred_4;
                            _3534 = frontier_phi_80_pred_5;
                            _3239 = _3534 + _3252;
                            _3240 = _3535 + _3253;
                            _3241 = _3536 + _3254;
                            _3236 = _3531 + _3249;
                            _3237 = _3532 + _3250;
                            _3238 = _3533 + _3251;
                            if (_3256 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3256;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3238;
                        frontier_phi_74_pred_1 = _3237;
                        frontier_phi_74_pred_2 = _3236;
                        frontier_phi_74_pred_3 = _3241;
                        frontier_phi_74_pred_4 = _3240;
                        frontier_phi_74_pred_5 = _3239;
                    }
                    _2903 = frontier_phi_74_pred;
                    _2901 = frontier_phi_74_pred_1;
                    _2899 = frontier_phi_74_pred_2;
                    _2909 = frontier_phi_74_pred_3;
                    _2907 = frontier_phi_74_pred_4;
                    _2905 = frontier_phi_74_pred_5;
                    uint _3044 = _3043 + 1u;
                    if (_3044 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3037 = _2899;
                        _3038 = _2901;
                        _3039 = _2903;
                        _3040 = _2905;
                        _3041 = _2907;
                        _3042 = _2909;
                        _3043 = _3044;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2907;
                frontier_phi_62_63_ladder_1 = _2905;
                frontier_phi_62_63_ladder_2 = _2903;
                frontier_phi_62_63_ladder_3 = _2909;
                frontier_phi_62_63_ladder_4 = _2901;
                frontier_phi_62_63_ladder_5 = _2899;
            }
            else
            {
                frontier_phi_62_63_ladder = _2785;
                frontier_phi_62_63_ladder_1 = _2783;
                frontier_phi_62_63_ladder_2 = _2781;
                frontier_phi_62_63_ladder_3 = _2787;
                frontier_phi_62_63_ladder_4 = _2779;
                frontier_phi_62_63_ladder_5 = _2777;
            }
            _2898 = frontier_phi_62_63_ladder_5;
            _2900 = frontier_phi_62_63_ladder_4;
            _2902 = frontier_phi_62_63_ladder_2;
            _2904 = frontier_phi_62_63_ladder_1;
            _2906 = frontier_phi_62_63_ladder;
            _2908 = frontier_phi_62_63_ladder_3;
        }
        float _2913 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
        _2679 = (_2913 * _2904) + _2192;
        _2681 = (_2913 * _2906) + _2194;
        _2683 = (_2913 * _2908) + _2196;
        _2685 = ((_2898 * _632) * _2913) + _2530;
        _2687 = ((_2900 * _634) * _2913) + _2532;
        _2689 = ((_2902 * _635) * _2913) + _2534;
    }
    else
    {
        _2679 = _2192;
        _2681 = _2194;
        _2683 = _2196;
        _2685 = _2530;
        _2687 = _2532;
        _2689 = _2534;
    }
    uint _2695 = _608 + uint(cbMatDynParam._m0[0u].w);
    float _2701 = (((((_439.x * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _410)) + (_473.x * cbMtdParam._m0[12u].x)) + (_504.x * cbMtdParam._m0[13u].x)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2695].x;
    float _2702 = (((((_439.y * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _410)) + (_473.y * cbMtdParam._m0[12u].y)) + (_504.y * cbMtdParam._m0[13u].y)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2695].y;
    float _2703 = (((((_439.z * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _410)) + (_473.z * cbMtdParam._m0[12u].z)) + (_504.z * cbMtdParam._m0[13u].z)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2695].z;
    float _4620 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4631 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4642 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4653 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _2721 = (((isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2679 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _647))) + ((_2685 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1457)) * cbPerFrame._m0[3u].x)) + _2701;
    float _2723 = (_2702 + ((_2687 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1457)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2681 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _647)));
    float _2725 = (_2703 + ((_2689 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1457)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2683 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _647)));
    float _4679 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2738 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2743 = cbInstanceData._m0[_607 + 6u].w * (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)));
    float _2748 = _567 / cbSceneParam._m0[86u].x;
    float _2749 = _568 / cbSceneParam._m0[86u].y;
    vec4 _2763 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2748, _2749, (log2((isnan(cbSceneParam._m0[77u].w) ? _561 : (isnan(_561) ? cbSceneParam._m0[77u].w : min(_561, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2765 = _2763.x;
    float _2766 = _2763.y;
    float _2767 = _2763.z;
    float _2768 = _2763.w;
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    if (_561 > cbSceneParam._m0[78u].w)
    {
        float _2802 = isnan(_561) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _561 : min(cbSceneParam._m0[80u].w, _561));
        float _2803 = _2802 / _561;
        float _2814 = _2803 * _280;
        float _2815 = _281 * _2803;
        float _2816 = (-0.0) - _2815;
        float _2817 = _2803 * _282;
        float _2819 = (cbSceneParam._m0[77u].w * _2816) / _2802;
        float _2820 = _2819 + cbSceneParam._m0[79u].w;
        float _2821 = cbSceneParam._m0[79u].w - _2815;
        float _2827 = sqrt(((_2814 * _2814) + (_2815 * _2815)) + (_2817 * _2817));
        float _2830 = (1.0 - (cbSceneParam._m0[77u].w / _2802)) * _2827;
        float _2835 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2837 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2999;
        if (abs((_2816 - _2819) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2999 = ((((_2820 > 0.0) ? exp2(_2835 * _2820) : (2.0 - exp2(_2837 * _2820))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2830;
        }
        else
        {
            float _2959 = 1.0 / cbSceneParam._m0[80u].x;
            float _2960 = isnan(_2821) ? _2820 : (isnan(_2820) ? _2821 : max(_2820, _2821));
            float _2961 = isnan(_2821) ? _2820 : (isnan(_2820) ? _2821 : min(_2820, _2821));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            _2999 = ((abs(_2827 / _2816) * cbSceneParam._m0[80u].y) * ((((_2970 - _2971) * 2.0) - ((exp2(_2835 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0)))) - exp2(_2835 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))))) * _2959)) - ((exp2(_2837 * _2970) - exp2(_2837 * _2971)) * _2959))) + (_2830 * cbSceneParam._m0[80u].z);
        }
        vec4 _3001 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2748, _2749, 1.0), 0.0);
        float _3010 = exp2((_2999 * (-1.44269502162933349609375)) * (1.0 - _3001.w));
        float _3011 = log2(_3010);
        float _3027 = log2(_2768);
        _2839 = (exp2(_3027 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].x)) * _3001.x) / cbSceneParam._m0[78u].x)) + _2765;
        _2841 = (exp2(_3027 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].y)) * _3001.y) / cbSceneParam._m0[78u].y)) + _2766;
        _2843 = (exp2(_3027 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].z)) * _3001.z) / cbSceneParam._m0[78u].z)) + _2767;
        _2845 = _3010 * _2768;
    }
    else
    {
        _2839 = _2765;
        _2841 = _2766;
        _2843 = _2767;
        _2845 = _2768;
    }
    float _2857 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2858 = _2857 == 3.0;
    float _2859 = log2(_2845);
    float _2863 = exp2(_2859 * cbSceneParam._m0[78u].x);
    float _2864 = exp2(_2859 * cbSceneParam._m0[78u].y);
    float _2865 = exp2(_2859 * cbSceneParam._m0[78u].z);
    float _2866 = _2863 * (isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0)));
    float _2867 = _2864 * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0)));
    float _2868 = _2865 * (isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0)));
    float _2877 = (_2857 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2877 * (_2858 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2839)));
    SV_Target.y = _2877 * (_2858 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2841)));
    SV_Target.z = _2877 * (_2858 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2843)));
    SV_Target.w = _2743;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2701) * _2738) * _2863) * _2877;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2702) * _2738) * _2864) * _2877;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2703) * _2738) * _2865) * _2877;
    SV_Target_1.w = _2743;
}


