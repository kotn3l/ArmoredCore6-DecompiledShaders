#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1029;
float _3458;
float _3459;
float _3460;
float _3461;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    float _298 = (cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _299 = (cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _312 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_298 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_299 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _318 = _312.x * cbMtdParam._m0[9u].x;
    float _319 = _312.y * cbMtdParam._m0[9u].y;
    float _320 = _312.z * cbMtdParam._m0[9u].z;
    float _322 = cbMtdParam._m0[14u].z * TEXCOORD_1.z;
    vec4 _335 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    float _339 = _335.z;
    float _343 = (_335.x * 2.0) + (-1.0);
    float _345 = (_335.y * 2.0) + (-1.0);
    float _346 = dot(vec2(_343, _345), vec2(_343, _345));
    float _3470 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _352 = sqrt(1.0 - (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))));
    float _363 = fma(0.9591662883758544921875, _224, fma(0.2000000476837158203125, _217, _203 * 0.2000000476837158203125));
    float _367 = fma(0.9591662883758544921875, _225, fma(0.2000000476837158203125, _218, _204 * 0.2000000476837158203125));
    float _370 = fma(0.9591662883758544921875, _226, fma(0.2000000476837158203125, _219, _205 * 0.2000000476837158203125));
    float _374 = inversesqrt(dot(vec3(_363, _367, _370), vec3(_363, _367, _370)));
    float _381 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _382 = _381 * _280;
    float _383 = _381 * _281;
    float _384 = _381 * _282;
    float _388 = dot(vec4(_382, _383, _384, 0.0), vec4(_374 * _363, _374 * _367, _374 * _370, 0.0)) - cbMtdParam._m0[14u].x;
    float _3481 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _395 = exp2(log2(1.0 - (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].y, 0.001000000047497451305389404296875))));
    vec4 _424 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _458 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _489 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _511 = fma(_352, _224, fma(_345, _217, _343 * _203));
    float _514 = fma(_352, _225, fma(_345, _218, _343 * _204));
    float _517 = fma(_352, _226, fma(_345, _219, _343 * _205));
    float _521 = inversesqrt(dot(vec3(_511, _514, _517), vec3(_511, _514, _517)));
    float _522 = _521 * _511;
    float _523 = _521 * _514;
    float _524 = _521 * _517;
    float _3497 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _525 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _3508 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _526 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3530 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3541 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _545 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _550 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _552 = _550.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _708 = sqrt(((_280 * _280) + (_281 * _281)) + (_282 * _282));
        float _714 = (cbMatDynParam._m0[5u].x * _708) + cbMatDynParam._m0[5u].y;
        float _3552 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _719 = (cbMatDynParam._m0[5u].z * _708) + cbMatDynParam._m0[5u].w;
        float _3563 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) - _715)) + _715) < ((_552 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _564 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _565 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _584 = fma(_524, cbSceneParam._m0[5u].z, fma(_523, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _522));
    float _587 = fma(_524, cbSceneParam._m0[6u].z, fma(_523, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _522));
    float _590 = fma(_524, cbSceneParam._m0[7u].z, fma(_523, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _522));
    uint _603 = uint(roundEven(NORMAL.w)) * 13u;
    uint _604 = _603 + 9u;
    uint _605 = _604 + uint(cbMatDynParam._m0[0u].w);
    float _611 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * cbInstanceData._m0[_605].x;
    float _612 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * cbInstanceData._m0[_605].y;
    float _613 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_605].z;
    float _3574 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    vec4 _625 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _564, cbSceneParam._m0[86u].y * _565));
    float _628 = _625.x * TEXCOORD_1.w;
    float _629 = dot(vec3(_522, _523, _524), vec3(_382, _383, _384));
    float _632 = _629 * 2.0;
    float _636 = (_632 * _522) - _382;
    float _637 = (_632 * _523) - _383;
    float _638 = (_632 * _524) - _384;
    float _642 = abs(dot(vec3(_382, _383, _384), vec3(_522, _523, _524)));
    float _3607 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _644 = sqrt(_526);
    float _657 = exp2((_644 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_644 * 3.0));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1028;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _753 = fma(_697, cbModelParam._m0[26u].z, fma(_693, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689));
        float _757 = fma(_697, cbModelParam._m0[27u].z, fma(_693, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689));
        float _761 = fma(_697, cbModelParam._m0[28u].z, fma(_693, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689));
        float _786 = _689 + _522;
        float _787 = _693 + _523;
        float _788 = _697 + _524;
        float _798 = fma(_788, cbModelParam._m0[26u].z, fma(_787, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _786)) - _753;
        float _799 = fma(_788, cbModelParam._m0[27u].z, fma(_787, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _786)) - _757;
        float _800 = fma(_788, cbModelParam._m0[28u].z, fma(_787, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _786)) - _761;
        float _804 = inversesqrt(dot(vec3(_798, _799, _800), vec3(_798, _799, _800)));
        float _817 = ((_804 * _798) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_753 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _818 = ((_804 * _799) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_757 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _819 = ((_804 * _800) / cbModelParam._m0[34u].z) + ((((((_761 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        float _856 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_822.x + (-0.5));
        float _858 = _856 * (_822.y + (-0.5));
        float _859 = _856 * (_822.z + (-0.5));
        float _866 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_829.x + (-0.5));
        float _868 = _866 * (_829.y + (-0.5));
        float _869 = _866 * (_829.z + (-0.5));
        float _876 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_836.x + (-0.5));
        float _878 = _876 * (_836.y + (-0.5));
        float _879 = _876 * (_836.z + (-0.5));
        float _886 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_843.x + (-0.5));
        float _888 = _886 * (_843.y + (-0.5));
        float _889 = _886 * (_843.z + (-0.5));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = _857 * 0.5;
        float _894 = _867 * 0.5;
        float _895 = _877 * 0.5;
        float _896 = dot(vec3(_893, _894, _895), vec3(_893, _894, _895));
        float _901 = (_896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_896);
        float _910 = (dot(vec3(_522, _523, _524), vec3(_901 * _893, _901 * _894, _901 * _895)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _920 = sqrt(((_894 * _894) + (_893 * _893)) + (_895 * _895)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _922 = _921 * 2.0;
        float _926 = (1.0 - _921) / (_921 + 1.0);
        float _3655 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _936 = ((((1.0 - _927) * (_922 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_922 + 1.0))) + _927) * _890;
        float _937 = _858 * 0.5;
        float _938 = _868 * 0.5;
        float _939 = _878 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _953 = (dot(vec3(_522, _523, _524), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _962 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3688 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_964 + 1.0))) + _969) * _891;
        float _979 = _859 * 0.5;
        float _980 = _869 * 0.5;
        float _981 = _879 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_522, _523, _524), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3721 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1006 + 1.0))) + _1011) * _892;
        _1028 = _859;
        _1030 = _858;
        _1031 = _857;
        _1032 = _869;
        _1033 = _868;
        _1034 = _867;
        _1035 = _879;
        _1036 = _878;
        _1037 = _877;
        _1038 = _892;
        _1039 = _891;
        _1040 = _890;
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)));
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
    }
    else
    {
        _1028 = _1029;
        _1030 = _1029;
        _1031 = _1029;
        _1032 = _1029;
        _1033 = _1029;
        _1034 = _1029;
        _1035 = _1029;
        _1036 = _1029;
        _1037 = _1029;
        _1038 = _1029;
        _1039 = _1029;
        _1040 = _1029;
        _1041 = 0.0;
        _1042 = 0.0;
        _1043 = 0.0;
    }
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1072 = fma(_697, cbModelParam._m0[30u].z, fma(_693, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _689));
        float _1076 = fma(_697, cbModelParam._m0[31u].z, fma(_693, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _689));
        float _1080 = fma(_697, cbModelParam._m0[32u].z, fma(_693, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _689));
        float _1103 = _689 + _522;
        float _1104 = _693 + _523;
        float _1105 = _697 + _524;
        float _1115 = fma(_1105, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1103)) - _1072;
        float _1116 = fma(_1105, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1103)) - _1076;
        float _1117 = fma(_1105, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1103)) - _1080;
        float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
        float _1134 = ((_1121 * _1115) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1072 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1121 * _1116) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1076 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1121 * _1117) / cbModelParam._m0[35u].z) + ((((((_1080 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        float _1171 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1138.x + (-0.5));
        float _1173 = _1171 * (_1138.y + (-0.5));
        float _1174 = _1171 * (_1138.z + (-0.5));
        float _1181 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1145.x + (-0.5));
        float _1183 = _1181 * (_1145.y + (-0.5));
        float _1184 = _1181 * (_1145.z + (-0.5));
        float _1191 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1152.x + (-0.5));
        float _1193 = _1191 * (_1152.y + (-0.5));
        float _1194 = _1191 * (_1152.z + (-0.5));
        float _1201 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1159.x + (-0.5));
        float _1203 = _1201 * (_1159.y + (-0.5));
        float _1204 = _1201 * (_1159.z + (-0.5));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = _1172 * 0.5;
        float _1209 = _1182 * 0.5;
        float _1210 = _1192 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_522, _523, _524), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3784 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1235 + 1.0))) + _1240) * _1205;
        float _1250 = _1173 * 0.5;
        float _1251 = _1183 * 0.5;
        float _1252 = _1193 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_522, _523, _524), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3817 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1277 + 1.0))) + _1282) * _1206;
        float _1292 = _1174 * 0.5;
        float _1293 = _1184 * 0.5;
        float _1294 = _1194 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_522, _523, _524), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3850 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1319 + 1.0))) + _1324) * _1207;
        _1341 = _1174;
        _1342 = _1173;
        _1343 = _1172;
        _1344 = _1184;
        _1345 = _1183;
        _1346 = _1182;
        _1347 = _1194;
        _1348 = _1193;
        _1349 = _1192;
        _1350 = _1207;
        _1351 = _1206;
        _1352 = _1205;
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _1029;
        _1342 = _1029;
        _1343 = _1029;
        _1344 = _1029;
        _1345 = _1029;
        _1346 = _1029;
        _1347 = _1029;
        _1348 = _1029;
        _1349 = _1029;
        _1350 = _1029;
        _1351 = _1029;
        _1352 = _1029;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1041)) + _1041;
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1042)) + _1042;
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1043)) + _1043;
    float _1388 = fma(_1367, cbSceneParam._m0[89u].z, fma(_1366, cbSceneParam._m0[89u].y, _1365 * cbSceneParam._m0[89u].x));
    float _1391 = fma(_1367, cbSceneParam._m0[90u].z, fma(_1366, cbSceneParam._m0[90u].y, _1365 * cbSceneParam._m0[90u].x));
    float _1394 = fma(_1367, cbSceneParam._m0[91u].z, fma(_1366, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1365));
    float _1409 = _636 * 0.5;
    float _1410 = _637 * 0.5;
    float _1411 = _638 * 0.5;
    float _1412 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1415 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1418 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1452;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1425 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1028, _1032, _1035, _1038));
        float _1429 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1030, _1033, _1036, _1039));
        float _1433 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1031, _1034, _1037, _1040));
        float _1440 = dot(vec4(cbModelParam._m0[39u]), vec4(_1409, _1410, _1411, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1440) ? 0.0 : (isnan(0.0) ? _1440 : max(0.0, _1440))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1463;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1454 = dot(vec4(cbModelParam._m0[40u]), vec4(_1409, _1410, _1411, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1467 = (_1463 * cbModelParam._m0[1u].x) + (_1452 * (1.0 - cbModelParam._m0[1u].x));
    float _1477 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _526);
    float _1478 = isnan(_1477) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1477 : min(cbModelParam._m0[25u].z, _1477));
    float _1558;
    float _1560;
    float _1562;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1525 = fma(_697, cbModelParam._m0[13u].z, fma(_693, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689)) + cbModelParam._m0[13u].w;
        float _1529 = fma(_697, cbModelParam._m0[14u].z, fma(_693, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689)) + cbModelParam._m0[14u].w;
        float _1533 = fma(_697, cbModelParam._m0[15u].z, fma(_693, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689)) + cbModelParam._m0[15u].w;
        float _1536 = fma(_638, cbModelParam._m0[13u].z, fma(_637, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _636));
        float _1539 = fma(_638, cbModelParam._m0[14u].z, fma(_637, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _636));
        float _1542 = fma(_638, cbModelParam._m0[15u].z, fma(_637, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _636));
        float _1570;
        if (_1536 > 0.0)
        {
            _1570 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1570 = frontier_phi_19_17_ladder;
        }
        float _1795;
        if (_1539 > 0.0)
        {
            _1795 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1795 = frontier_phi_28_24_ladder;
        }
        float _2041;
        if (_1542 > 0.0)
        {
            _2041 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2041 = frontier_phi_40_35_ladder;
        }
        float _2043 = isnan(_1795) ? _1570 : (isnan(_1570) ? _1795 : min(_1570, _1795));
        float _2044 = isnan(_2041) ? _2043 : (isnan(_2043) ? _2041 : min(_2043, _2041));
        float _2048 = (_2044 * _1536) + _1525;
        float _2049 = (_2044 * _1539) + _1529;
        float _2050 = (_2044 * _1542) + _1533;
        float _2051 = _2044 * 9.9999997473787516355514526367188e-05;
        float _2053 = (-1.0) - _2051;
        float _2055 = _2051 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2050 > _2055) || ((_2050 < _2053) || ((_2049 > _2055) || ((_2049 < _2053) || ((_2048 < _2053) || (_2048 > _2055))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2174 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2050, cbModelParam._m0[9u].z, fma(_2049, cbModelParam._m0[9u].y, _2048 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2050, cbModelParam._m0[10u].z, fma(_2049, cbModelParam._m0[10u].y, _2048 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2050, cbModelParam._m0[11u].z, fma(_2049, cbModelParam._m0[11u].y, _2048 * cbModelParam._m0[11u].x))), _1478);
            frontier_phi_18_40_ladder = _2174.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2174.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2174.x * cbModelParam._m0[1u].y;
        }
        _1558 = frontier_phi_18_40_ladder_2;
        _1560 = frontier_phi_18_40_ladder_1;
        _1562 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_636, _637, _638), _1478);
        _1558 = _1546.x * cbModelParam._m0[1u].y;
        _1560 = _1546.y * cbModelParam._m0[1u].y;
        _1562 = _1546.z * cbModelParam._m0[1u].y;
    }
    float _1566 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _526);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1566 : min(cbModelParam._m0[25u].w, _1566));
    float _1659;
    float _1661;
    float _1663;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1623 = fma(_697, cbModelParam._m0[21u].z, fma(_693, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689)) + cbModelParam._m0[21u].w;
        float _1627 = fma(_697, cbModelParam._m0[22u].z, fma(_693, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689)) + cbModelParam._m0[22u].w;
        float _1631 = fma(_697, cbModelParam._m0[23u].z, fma(_693, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689)) + cbModelParam._m0[23u].w;
        float _1634 = fma(_638, cbModelParam._m0[21u].z, fma(_637, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _636));
        float _1637 = fma(_638, cbModelParam._m0[22u].z, fma(_637, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _636));
        float _1640 = fma(_638, cbModelParam._m0[23u].z, fma(_637, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _636));
        float _1800;
        if (_1634 > 0.0)
        {
            _1800 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1800 = frontier_phi_30_26_ladder;
        }
        float _2068;
        if (_1637 > 0.0)
        {
            _2068 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2068 = frontier_phi_42_37_ladder;
        }
        float _2273;
        if (_1640 > 0.0)
        {
            _2273 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2273 = frontier_phi_51_48_ladder;
        }
        float _2275 = isnan(_2068) ? _1800 : (isnan(_1800) ? _2068 : min(_1800, _2068));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1634) + _1623;
        float _2281 = (_2276 * _1637) + _1627;
        float _2282 = (_2276 * _1640) + _1631;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2284 = (-1.0) - _2283;
        float _2286 = _2283 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2282 > _2286) || ((_2282 < _2284) || ((_2281 > _2286) || ((_2281 < _2284) || ((_2280 < _2284) || (_2280 > _2286))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2511 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2282, cbModelParam._m0[17u].z, fma(_2281, cbModelParam._m0[17u].y, _2280 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2282, cbModelParam._m0[18u].z, fma(_2281, cbModelParam._m0[18u].y, _2280 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2282, cbModelParam._m0[19u].z, fma(_2281, cbModelParam._m0[19u].y, _2280 * cbModelParam._m0[19u].x))), _1567);
            frontier_phi_27_51_ladder = _2511.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2511.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2511.x * cbModelParam._m0[1u].z;
        }
        _1659 = frontier_phi_27_51_ladder_2;
        _1661 = frontier_phi_27_51_ladder_1;
        _1663 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_636, _637, _638), _1567);
        _1659 = _1643.x * cbModelParam._m0[1u].z;
        _1661 = _1643.y * cbModelParam._m0[1u].z;
        _1663 = _1643.z * cbModelParam._m0[1u].z;
    }
    float _1675 = ((((1.0 - _657) * ((_644 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_657 * _644)) * _628;
    float _1676 = _1675 * ((cbModelParam._m0[1u].w * (_1659 - _1558)) + _1558);
    float _1677 = _1675 * ((cbModelParam._m0[1u].w * (_1661 - _1560)) + _1560);
    float _1678 = _1675 * ((cbModelParam._m0[1u].w * (_1663 - _1562)) + _1562);
    float _1681 = fma(_1678, cbSceneParam._m0[89u].z, fma(_1677, cbSceneParam._m0[89u].y, _1676 * cbSceneParam._m0[89u].x));
    float _1684 = fma(_1678, cbSceneParam._m0[90u].z, fma(_1677, cbSceneParam._m0[90u].y, _1676 * cbSceneParam._m0[90u].x));
    float _1687 = fma(_1678, cbSceneParam._m0[91u].z, fma(_1677, cbSceneParam._m0[91u].y, _1676 * cbSceneParam._m0[91u].x));
    vec4 _1695 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_564, _565));
    float _1697 = _1695.w;
    float _1709 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1697);
    float _1710 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1697);
    float _1711 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1697);
    uvec4 _1715 = floatBitsToUint(cbInstanceData._m0[_603 + 5u]);
    uint _1717 = _1715.x * 14u;
    uint _1718 = _1717 + 13u;
    float _1725 = _628 + (-1.0);
    float _1730 = (cbLight._m0[_1718].x * _1725) + 1.0;
    float _1731 = (cbLight._m0[_1718].y * _1725) + 1.0;
    float _1732 = (cbLight._m0[_1718].z * _1725) + 1.0;
    float _1733 = (cbLight._m0[_1718].w * _1725) + 1.0;
    uint _1734 = _1717 + 5u;
    float _1740 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1744 = _1717 + 4u;
    float _1754 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
    uint _1758 = _1717 | 1u;
    float _1769 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_522, _523, _524));
    float _1772 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_522, _523, _524));
    float _3986 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _3997 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1777 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.3183098733425140380859375;
    float _1779 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * 0.3183098733425140380859375;
    float _1786 = ((cbLight._m0[_1734].x * _1740) * _1779) + (((cbLight._m0[_1744].x * _1709) * _1754) * _1777);
    float _1787 = ((_1740 * cbLight._m0[_1734].y) * _1779) + (((cbLight._m0[_1744].y * _1710) * _1754) * _1777);
    float _1788 = ((_1740 * cbLight._m0[_1734].z) * _1779) + (((cbLight._m0[_1744].z * _1711) * _1754) * _1777);
    uvec4 _1792 = floatBitsToUint(cbLight._m0[_1717 + 12u]);
    bool _1794 = _1792.x == 0u;
    float _1805;
    float _1807;
    float _1809;
    if (_1794)
    {
        _1805 = _1786;
        _1807 = _1787;
        _1809 = _1788;
    }
    else
    {
        uint _1813 = _1717 + 6u;
        float _1829 = (dot(vec3(cbLight._m0[_1717 + 2u].xyz), vec3(_522, _523, _524)) * 0.5) + 0.5;
        float _1830 = _1829 * _1829;
        float _4008 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1832 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _1805 = (((cbLight._m0[_1813].x * 0.3183098733425140380859375) * _1831) * _1832) + _1786;
        _1807 = (((cbLight._m0[_1813].y * 0.3183098733425140380859375) * _1831) * _1832) + _1787;
        _1809 = (((cbLight._m0[_1813].z * 0.3183098733425140380859375) * _1831) * _1832) + _1788;
    }
    bool _1812 = _1792.y == 0u;
    float _1850;
    float _1852;
    float _1854;
    if (_1812)
    {
        _1850 = _1805;
        _1852 = _1807;
        _1854 = _1809;
    }
    else
    {
        uint _2012 = _1717 + 7u;
        float _2028 = (dot(vec3(cbLight._m0[_1717 + 3u].xyz), vec3(_522, _523, _524)) * 0.5) + 0.5;
        float _2029 = _2028 * _2028;
        float _4024 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2030 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2031 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _1850 = (((cbLight._m0[_2012].x * 0.3183098733425140380859375) * _2030) * _2031) + _1805;
        _1852 = (((cbLight._m0[_2012].y * 0.3183098733425140380859375) * _2030) * _2031) + _1807;
        _1854 = (((cbLight._m0[_2012].z * 0.3183098733425140380859375) * _2030) * _2031) + _1809;
    }
    uint _1857 = _1717 + 8u;
    float _1870 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1717].w)) * _526) * 0.949999988079071044921875);
    float _1871 = _1870 * _1870;
    float _1872 = cbLight._m0[_1717].x + _382;
    float _1873 = cbLight._m0[_1717].y + _383;
    float _1874 = cbLight._m0[_1717].z + _384;
    float _1878 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
    float _1879 = _1878 * _1872;
    float _1880 = _1878 * _1873;
    float _1881 = _1878 * _1874;
    float _1882 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_1717].xyz));
    float _4040 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1885 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _1886 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _1887 = dot(vec3(_522, _523, _524), vec3(_1879, _1880, _1881));
    float _4062 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _1891 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_1879, _1880, _1881));
    float _4073 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1895 = _1871 * _1871;
    float _1899 = ((_1890 * _1890) * (_1895 + (-1.0))) + 1.0;
    float _1910 = (exp2(log2(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1911 = 1.0 - _1871;
    float _1922 = (0.5 / (((_1886 * ((_1885 * _1911) + _1871)) + 9.9999999392252902907785028219223e-09) + (((_1886 * _1911) + _1871) * _1885))) * _1885;
    float _4084 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1924 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1895 / ((_1899 * _1899) * 3.141590118408203125));
    uint _1938 = _1717 + 9u;
    float _1949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1758].w)) * _526) * 0.949999988079071044921875);
    float _1950 = _1949 * _1949;
    float _1951 = cbLight._m0[_1758].x + _382;
    float _1952 = cbLight._m0[_1758].y + _383;
    float _1953 = cbLight._m0[_1758].z + _384;
    float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
    float _1958 = _1957 * _1951;
    float _1959 = _1957 * _1952;
    float _1960 = _1957 * _1953;
    float _1961 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_1758].xyz));
    float _4095 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _1965 = dot(vec3(_522, _523, _524), vec3(_1958, _1959, _1960));
    float _4106 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _1969 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_1958, _1959, _1960));
    float _4117 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1973 = _1950 * _1950;
    float _1977 = ((_1968 * _1968) * (_1973 + (-1.0))) + 1.0;
    float _1986 = (exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1987 = 1.0 - _1950;
    float _1997 = (0.5 / (((_1886 * ((_1964 * _1987) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1886 * _1987) + _1950) * _1964))) * _1964;
    float _4128 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _1999 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1973 / ((_1977 * _1977) * 3.141590118408203125));
    float _2009 = (((_1986 * cbLight._m0[_1938].x) * _1999) * _1740) + ((((cbLight._m0[_1857].x * _1709) * _1910) * _1924) * _1754);
    float _2010 = (((_1986 * cbLight._m0[_1938].y) * _1999) * _1740) + ((((cbLight._m0[_1857].y * _1710) * _1910) * _1924) * _1754);
    float _2011 = (((_1986 * cbLight._m0[_1938].z) * _1999) * _1740) + ((((cbLight._m0[_1857].z * _1711) * _1910) * _1924) * _1754);
    float _2073;
    float _2075;
    float _2077;
    if (_1794)
    {
        _2073 = _2009;
        _2075 = _2010;
        _2077 = _2011;
    }
    else
    {
        uint _2079 = _1717 + 2u;
        uint _2083 = _1717 + 10u;
        float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _526) * 0.949999988079071044921875);
        float _2098 = _2097 * _2097;
        float _2099 = cbLight._m0[_2079].x + _382;
        float _2100 = cbLight._m0[_2079].y + _383;
        float _2101 = cbLight._m0[_2079].z + _384;
        float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
        float _2106 = _2105 * _2099;
        float _2107 = _2105 * _2100;
        float _2108 = _2105 * _2101;
        float _2109 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2079].xyz));
        float _4139 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2112 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2113 = dot(vec3(_522, _523, _524), vec3(_2106, _2107, _2108));
        float _4150 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2116 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2117 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2106, _2107, _2108));
        float _4161 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2121 = _2098 * _2098;
        float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
        float _2134 = (exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2135 = 1.0 - _2098;
        float _2145 = (0.5 / (((_1886 * ((_2112 * _2135) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_1886 * _2135) + _2098) * _2112))) * _2112;
        float _4172 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2147 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
        float _2148 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _2073 = (((_2134 * cbLight._m0[_2083].x) * _2147) * _2148) + _2009;
        _2075 = (((_2134 * cbLight._m0[_2083].y) * _2147) * _2148) + _2010;
        _2077 = (((_2134 * cbLight._m0[_2083].z) * _2147) * _2148) + _2011;
    }
    float _2183;
    float _2185;
    float _2187;
    if (_1812)
    {
        _2183 = _2073;
        _2185 = _2075;
        _2187 = _2077;
    }
    else
    {
        uint _2194 = _1717 + 3u;
        uint _2198 = _1717 + 11u;
        float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2194].w)) * _526) * 0.949999988079071044921875);
        float _2213 = _2212 * _2212;
        float _2214 = cbLight._m0[_2194].x + _382;
        float _2215 = cbLight._m0[_2194].y + _383;
        float _2216 = cbLight._m0[_2194].z + _384;
        float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
        float _2221 = _2220 * _2214;
        float _2222 = _2220 * _2215;
        float _2223 = _2220 * _2216;
        float _2224 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2194].xyz));
        float _4188 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2228 = dot(vec3(_522, _523, _524), vec3(_2221, _2222, _2223));
        float _4199 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2232 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_2221, _2222, _2223));
        float _4210 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2236 = _2213 * _2213;
        float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
        float _2249 = (exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2250 = 1.0 - _2213;
        float _2260 = (0.5 / (((_1886 * ((_2227 * _2250) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_1886 * _2250) + _2213) * _2227))) * _2227;
        float _4221 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2262 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
        float _2263 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _2183 = (((_2249 * cbLight._m0[_2198].x) * _2262) * _2263) + _2073;
        _2185 = (((_2249 * cbLight._m0[_2198].y) * _2262) * _2263) + _2075;
        _2187 = (((_2249 * cbLight._m0[_2198].z) * _2262) * _2263) + _2077;
    }
    float _2397;
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    if (_1715.y == 0u)
    {
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2338;
        float _2340 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2338;
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2338;
        uvec4 _2353 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2354 = _2353.x;
        uint _2365 = uint((float(_2353.y) * floor(float(uint(cbSceneParam._m0[85u].y * _565) / _2354))) + floor(float(uint(cbSceneParam._m0[85u].x * _564) / _2354)));
        float _2375 = (log2(_2341 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2376 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        uint _2379 = uint(isnan(14.0) ? _2376 : (isnan(_2376) ? 14.0 : min(_2376, 14.0)));
        uvec4 _2384 = texelFetch(g_lightClusterGridBuffer, int(((_2379 << 2u) + (_2365 << 6u)) >> 2u));
        uint _2385 = _2384.x;
        uint _2386 = _2353.z;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        if (((((1u << ((_2386 >> 4u) & 15u)) + 4294967295u) & _2385) == 0u) || ((_2386 & 240u) == 0u))
        {
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
        }
        else
        {
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            uint _2683 = 0u;
            uint _2692;
            bool _2693;
            for (;;)
            {
                _2692 = texelFetch(g_lightClassification, int((((_2379 << 5u) + (_2365 << 9u)) + (_2683 << 2u)) >> 2u)).x;
                _2693 = _2692 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2693)
                {
                    frontier_phi_68_pred = _2679;
                    frontier_phi_68_pred_1 = _2682;
                    frontier_phi_68_pred_2 = _2681;
                    frontier_phi_68_pred_3 = _2680;
                    frontier_phi_68_pred_4 = _2678;
                    frontier_phi_68_pred_5 = _2677;
                }
                else
                {
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    uint _2828;
                    _2822 = _2677;
                    _2823 = _2678;
                    _2824 = _2679;
                    _2825 = _2680;
                    _2826 = _2681;
                    _2827 = _2682;
                    _2828 = _2692;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    for (;;)
                    {
                        uint _2832 = uint(findLSB(_2828)) + (_2683 << 5u);
                        uint _2829 = (_2828 + 4294967295u) & _2828;
                        uint _2834 = _2832 * 48u;
                        vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 3u)).x));
                        uint _2854 = (_2832 * 48u) + 4u;
                        vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 3u)).x));
                        uint _2873 = (_2832 * 48u) + 8u;
                        vec3 _2884 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x));
                        float _2888 = _2848.x - _2339;
                        float _2889 = _2848.y - _2340;
                        float _2890 = _2848.z - _2341;
                        float _2891 = dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890));
                        float _2894 = inversesqrt(_2891);
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2898 = dot(vec3(_584, _587, _590), vec3(_2895, _2896, _2897));
                        float _2903 = 1.0 - (_2891 * _2848.w);
                        float _4247 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2904 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2905 = sqrt(_2891) * _2867.w;
                        float _2908 = 1.39999997615814208984375 / (_2905 + 1.39999997615814208984375);
                        float _2909 = _2908 * _2908;
                        float _2912 = ((1.0 - _2909) * _2898) + _2909;
                        float _2915 = _2905 * _2905;
                        float _2919 = ((isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))) * _2904) / ((_2915 * 0.699999988079071044921875) + 1.0);
                        float _2923 = (-0.0) - _2339;
                        float _2924 = (-0.0) - _2340;
                        float _2925 = (-0.0) - _2341;
                        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2940 = exp2(log2(1.0 / ((_2915 * 3.5) + 5.0)) * 0.25);
                        float _2941 = 1.0 - _644;
                        float _2948 = sqrt(1.0 - ((1.0 - (_2941 * _2941)) * (1.0 - (_2940 * _2940))));
                        float _2949 = _2948 * _2948;
                        float _2950 = _2949 * _2949;
                        float _2951 = _2930 + _2895;
                        float _2952 = _2931 + _2896;
                        float _2953 = _2932 + _2897;
                        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                        float _2961 = dot(vec3(_584, _587, _590), vec3(_2930, _2931, _2932));
                        float _4263 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2964 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                        float _2965 = dot(vec3(_584, _587, _590), vec3(_2957 * _2951, _2957 * _2952, _2957 * _2953));
                        float _4274 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2968 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _2972 = ((_2968 * _2968) * (_2950 + (-1.0))) + 1.0;
                        float _2973 = _2908 * _2949;
                        float _2974 = _2973 * _2973;
                        float _2977 = ((1.0 - _2974) * _2898) + _2974;
                        float _4285 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2978 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                        float _2979 = 1.0 - _2949;
                        float _2989 = (0.5 / (((_2978 * ((_2964 * _2979) + _2949)) + 9.9999999392252902907785028219223e-09) + (((_2978 * _2979) + _2949) * _2964))) * _2978;
                        float _4296 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _3000 = (((_2950 * 3.1415927410125732421875) * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) / ((_2972 * _2972) * ((_2915 * 2.1991131305694580078125) + 3.141590118408203125))) * _2904;
                        _2752 = (_2919 * _2867.x) + _2825;
                        _2753 = (_2919 * _2867.y) + _2826;
                        _2754 = (_2919 * _2867.z) + _2827;
                        _2749 = (_3000 * _2884.x) + _2822;
                        _2750 = (_3000 * _2884.y) + _2823;
                        _2751 = (_3000 * _2884.z) + _2824;
                        if (_2829 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2822 = _2749;
                            _2823 = _2750;
                            _2824 = _2751;
                            _2825 = _2752;
                            _2826 = _2753;
                            _2827 = _2754;
                            _2828 = _2829;
                        }
                    }
                    frontier_phi_68_pred = _2751;
                    frontier_phi_68_pred_1 = _2754;
                    frontier_phi_68_pred_2 = _2753;
                    frontier_phi_68_pred_3 = _2752;
                    frontier_phi_68_pred_4 = _2750;
                    frontier_phi_68_pred_5 = _2749;
                }
                _2521 = frontier_phi_68_pred;
                _2527 = frontier_phi_68_pred_1;
                _2525 = frontier_phi_68_pred_2;
                _2523 = frontier_phi_68_pred_3;
                _2519 = frontier_phi_68_pred_4;
                _2517 = frontier_phi_68_pred_5;
                uint _2684 = _2683 + 1u;
                if (_2684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2677 = _2517;
                    _2678 = _2519;
                    _2679 = _2521;
                    _2680 = _2523;
                    _2681 = _2525;
                    _2682 = _2527;
                    _2683 = _2684;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
        }
        uvec4 _2530 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2531 = _2530.z;
        uint _2533 = (_2531 >> 8u) & 15u;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        if (((4294967295u << _2533) & _2385) == 0u)
        {
            _2645 = _2516;
            _2647 = _2518;
            _2649 = _2520;
            _2651 = _2522;
            _2653 = _2524;
            _2655 = _2526;
        }
        else
        {
            float _2670 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
            float _2671 = _2670 * _2339;
            float _2672 = _2670 * _2340;
            float _2673 = _2670 * _2341;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2533 < ((_2531 >> 12u) & 15u))
            {
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2656;
                float _2805 = _2516;
                float _2806 = _2518;
                float _2807 = _2520;
                float _2808 = _2522;
                float _2809 = _2524;
                float _2810 = _2526;
                uint _2811 = _2533;
                uint _2820;
                bool _2821;
                for (;;)
                {
                    _2820 = texelFetch(g_lightClassification, int((((_2379 << 5u) + (_2365 << 9u)) + (_2811 << 2u)) >> 2u)).x;
                    _2821 = _2820 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2821)
                    {
                        frontier_phi_79_pred = _2810;
                        frontier_phi_79_pred_1 = _2809;
                        frontier_phi_79_pred_2 = _2808;
                        frontier_phi_79_pred_3 = _2807;
                        frontier_phi_79_pred_4 = _2806;
                        frontier_phi_79_pred_5 = _2805;
                    }
                    else
                    {
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3027 = _2805;
                        float _3028 = _2806;
                        float _3029 = _2807;
                        float _3030 = _2808;
                        float _3031 = _2809;
                        float _3032 = _2810;
                        uint _3033 = _2820;
                        uint _3034;
                        vec4 _3059;
                        float _3060;
                        vec4 _3075;
                        vec3 _3087;
                        vec4 _3102;
                        vec4 _3118;
                        float _3165;
                        bool _3166;
                        for (;;)
                        {
                            uint _3044 = ((_2811 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3033));
                            _3034 = (_3033 + 4294967295u) & _3033;
                            uint _3046 = _3044 * 40u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            _3060 = _3059.w;
                            uint _3062 = (_3044 * 40u) + 4u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3077 = (_3044 * 40u) + 8u;
                            _3087 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x));
                            uint _3089 = (_3044 * 40u) + 16u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3105 = (_3044 * 40u) + 20u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3121 = (_3044 * 40u) + 24u;
                            vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3140 = (_3044 * 40u) + 28u;
                            vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            _3165 = fma(_2341, _3153.z, fma(_2340, _3153.y, _3153.x * _2339)) + _3153.w;
                            _3166 = !((fma(_2341, _3134.z, fma(_2340, _3134.y, _3134.x * _2339)) + _3134.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3166)
                            {
                                float _3193 = _3059.x - _2339;
                                float _3194 = _3059.y - _2340;
                                float _3195 = _3059.z - _2341;
                                float _3196 = dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195));
                                float _3199 = inversesqrt(_3196);
                                float _3200 = _3199 * _3193;
                                float _3201 = _3199 * _3194;
                                float _3202 = _3199 * _3195;
                                float _3206 = 1.0 - (_3196 / (_3060 * _3060));
                                float _4307 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3207 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3211 = sqrt(_3196) * _3075.w;
                                float _3213 = 1.39999997615814208984375 / (_3211 + 1.39999997615814208984375);
                                float _3214 = _3213 * _3213;
                                float _3217 = ((1.0 - _3214) * dot(vec3(_3200, _3201, _3202), vec3(_584, _587, _590))) + _3214;
                                float _3220 = _3211 * _3211;
                                float _3224 = (fma(_2341, _3102.z, fma(_2340, _3102.y, _3102.x * _2339)) + _3102.w) / _3165;
                                float _3225 = (fma(_2341, _3118.z, fma(_2340, _3118.y, _3118.x * _2339)) + _3118.w) / _3165;
                                float _3229 = 1.0 - dot(vec2(_3224, _3225), vec2(_3224, _3225));
                                float _4323 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3230 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3231 = _3230 * (((isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))) * _3207) / ((_3220 * 0.699999988079071044921875) + 1.0));
                                float _3243 = exp2(log2(1.0 / ((_3220 * 3.5) + 5.0)) * 0.25);
                                float _3244 = 1.0 - _644;
                                float _3251 = sqrt(1.0 - ((1.0 - (_3244 * _3244)) * (1.0 - (_3243 * _3243))));
                                float _3252 = _3251 * _3251;
                                float _3253 = _3252 * _3252;
                                float _3254 = _3200 - _2671;
                                float _3255 = _3201 - _2672;
                                float _3256 = _3202 - _2673;
                                float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                                float _3264 = dot(vec3(_584, _587, _590), vec3((-0.0) - _2671, (-0.0) - _2672, (-0.0) - _2673));
                                float _4334 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3267 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3268 = dot(vec3(_584, _587, _590), vec3(_3260 * _3254, _3260 * _3255, _3260 * _3256));
                                float _4345 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3271 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3275 = ((_3271 * _3271) * (_3253 + (-1.0))) + 1.0;
                                float _3276 = _3213 * _3252;
                                float _3277 = _3276 * _3276;
                                float _3283 = ((1.0 - _3277) * dot(vec3(_584, _587, _590), vec3(_3200, _3201, _3202))) + _3277;
                                float _4356 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3284 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3285 = 1.0 - _3252;
                                float _3295 = (0.5 / (((_3284 * ((_3267 * _3285) + _3252)) + 9.9999999392252902907785028219223e-09) + (((_3284 * _3285) + _3252) * _3267))) * _3284;
                                float _4367 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3305 = (_3230 * _3207) * (((_3253 * 3.1415927410125732421875) * (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) / ((_3275 * _3275) * ((_3220 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3231 * _3075.z;
                                frontier_phi_85_pred_1 = _3231 * _3075.y;
                                frontier_phi_85_pred_2 = _3231 * _3075.x;
                                frontier_phi_85_pred_3 = _3305 * _3087.z;
                                frontier_phi_85_pred_4 = _3305 * _3087.y;
                                frontier_phi_85_pred_5 = _3305 * _3087.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3314 = frontier_phi_85_pred;
                            _3313 = frontier_phi_85_pred_1;
                            _3312 = frontier_phi_85_pred_2;
                            _3311 = frontier_phi_85_pred_3;
                            _3310 = frontier_phi_85_pred_4;
                            _3309 = frontier_phi_85_pred_5;
                            _3017 = _3312 + _3030;
                            _3018 = _3313 + _3031;
                            _3019 = _3314 + _3032;
                            _3014 = _3309 + _3027;
                            _3015 = _3310 + _3028;
                            _3016 = _3311 + _3029;
                            if (_3034 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3034;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3019;
                        frontier_phi_79_pred_1 = _3018;
                        frontier_phi_79_pred_2 = _3017;
                        frontier_phi_79_pred_3 = _3016;
                        frontier_phi_79_pred_4 = _3015;
                        frontier_phi_79_pred_5 = _3014;
                    }
                    _2656 = frontier_phi_79_pred;
                    _2654 = frontier_phi_79_pred_1;
                    _2652 = frontier_phi_79_pred_2;
                    _2650 = frontier_phi_79_pred_3;
                    _2648 = frontier_phi_79_pred_4;
                    _2646 = frontier_phi_79_pred_5;
                    uint _2812 = _2811 + 1u;
                    if (_2812 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2805 = _2646;
                        _2806 = _2648;
                        _2807 = _2650;
                        _2808 = _2652;
                        _2809 = _2654;
                        _2810 = _2656;
                        _2811 = _2812;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2652;
                frontier_phi_60_61_ladder_1 = _2656;
                frontier_phi_60_61_ladder_2 = _2654;
                frontier_phi_60_61_ladder_3 = _2650;
                frontier_phi_60_61_ladder_4 = _2648;
                frontier_phi_60_61_ladder_5 = _2646;
            }
            else
            {
                frontier_phi_60_61_ladder = _2522;
                frontier_phi_60_61_ladder_1 = _2526;
                frontier_phi_60_61_ladder_2 = _2524;
                frontier_phi_60_61_ladder_3 = _2520;
                frontier_phi_60_61_ladder_4 = _2518;
                frontier_phi_60_61_ladder_5 = _2516;
            }
            _2645 = frontier_phi_60_61_ladder_5;
            _2647 = frontier_phi_60_61_ladder_4;
            _2649 = frontier_phi_60_61_ladder_3;
            _2651 = frontier_phi_60_61_ladder;
            _2653 = frontier_phi_60_61_ladder_2;
            _2655 = frontier_phi_60_61_ladder_1;
        }
        float _2660 = isnan(1.0) ? _628 : (isnan(_628) ? 1.0 : min(_628, 1.0));
        _2397 = (_2660 * _2651) + _1850;
        _2399 = (_2660 * _2653) + _1852;
        _2401 = (_2660 * _2655) + _1854;
        _2403 = ((_2645 * 0.039999999105930328369140625) * _2660) + _2183;
        _2405 = ((_2647 * 0.039999999105930328369140625) * _2660) + _2185;
        _2407 = ((_2649 * 0.039999999105930328369140625) * _2660) + _2187;
    }
    else
    {
        _2397 = _1850;
        _2399 = _1852;
        _2401 = _1854;
        _2403 = _2183;
        _2405 = _2185;
        _2407 = _2187;
    }
    uint _2413 = _604 + uint(cbMatDynParam._m0[0u].w);
    float _2419 = (((((_424.x * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _395)) + (_458.x * cbMtdParam._m0[12u].x)) + (_489.x * cbMtdParam._m0[13u].x)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2413].x;
    float _2420 = (((((_424.y * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _395)) + (_458.y * cbMtdParam._m0[12u].y)) + (_489.y * cbMtdParam._m0[13u].y)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2413].y;
    float _2421 = (((((_424.z * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _395)) + (_458.z * cbMtdParam._m0[12u].z)) + (_489.z * cbMtdParam._m0[13u].z)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2413].z;
    float _4383 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4394 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4405 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4416 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _2439 = (((isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2397 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _628))) + ((_2403 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1467)) * cbPerFrame._m0[3u].x)) + _2419;
    float _2441 = (_2420 + ((_2405 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1467)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2399 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _628)));
    float _2443 = (_2421 + ((_2407 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1467)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2401 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _628)));
    float _2444 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2445 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2446 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2452 = cbMtdParam._m0[2u].x * _2419;
    float _2453 = cbMtdParam._m0[2u].y * _2420;
    float _2454 = cbMtdParam._m0[2u].z * _2421;
    float _4442 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2456 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2461 = cbInstanceData._m0[_603 + 6u].w * (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)));
    float _2466 = _564 / cbSceneParam._m0[86u].x;
    float _2467 = _565 / cbSceneParam._m0[86u].y;
    vec4 _2481 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2466, _2467, (log2((isnan(cbSceneParam._m0[77u].w) ? _545 : (isnan(_545) ? cbSceneParam._m0[77u].w : min(_545, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2483 = _2481.x;
    float _2484 = _2481.y;
    float _2485 = _2481.z;
    float _2486 = _2481.w;
    float _2578;
    float _2580;
    float _2582;
    float _2584;
    if (_545 > cbSceneParam._m0[78u].w)
    {
        float _2541 = isnan(_545) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _545 : min(cbSceneParam._m0[80u].w, _545));
        float _2542 = _2541 / _545;
        float _2553 = _2542 * _280;
        float _2554 = _281 * _2542;
        float _2555 = (-0.0) - _2554;
        float _2556 = _2542 * _282;
        float _2558 = (cbSceneParam._m0[77u].w * _2555) / _2541;
        float _2559 = _2558 + cbSceneParam._m0[79u].w;
        float _2560 = cbSceneParam._m0[79u].w - _2554;
        float _2566 = sqrt(((_2553 * _2553) + (_2554 * _2554)) + (_2556 * _2556));
        float _2569 = (1.0 - (cbSceneParam._m0[77u].w / _2541)) * _2566;
        float _2574 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2576 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2762;
        if (abs((_2555 - _2558) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2762 = ((((_2559 > 0.0) ? exp2(_2574 * _2559) : (2.0 - exp2(_2576 * _2559))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2569;
        }
        else
        {
            float _2706 = 1.0 / cbSceneParam._m0[80u].x;
            float _2707 = isnan(_2560) ? _2559 : (isnan(_2559) ? _2560 : max(_2559, _2560));
            float _2708 = isnan(_2560) ? _2559 : (isnan(_2559) ? _2560 : min(_2559, _2560));
            float _2717 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : min(_2707, 0.0));
            float _2718 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : min(_2708, 0.0));
            _2762 = ((abs(_2566 / _2555) * cbSceneParam._m0[80u].y) * ((((_2717 - _2718) * 2.0) - ((exp2(_2574 * (isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0)))) - exp2(_2574 * (isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0))))) * _2706)) - ((exp2(_2576 * _2717) - exp2(_2576 * _2718)) * _2706))) + (_2569 * cbSceneParam._m0[80u].z);
        }
        vec4 _2764 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2466, _2467, 1.0), 0.0);
        float _2773 = exp2((_2762 * (-1.44269502162933349609375)) * (1.0 - _2764.w));
        float _2774 = log2(_2773);
        float _2790 = log2(_2486);
        _2578 = (exp2(_2790 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].x)) * _2764.x) / cbSceneParam._m0[78u].x)) + _2483;
        _2580 = (exp2(_2790 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].y)) * _2764.y) / cbSceneParam._m0[78u].y)) + _2484;
        _2582 = (exp2(_2790 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].z)) * _2764.z) / cbSceneParam._m0[78u].z)) + _2485;
        _2584 = _2773 * _2486;
    }
    else
    {
        _2578 = _2483;
        _2580 = _2484;
        _2582 = _2485;
        _2584 = _2486;
    }
    bool _2800;
    vec4 _2594;
    vec4 _2616;
    float _2618;
    float _2622;
    float _2623;
    float _2624;
    float _2627;
    float _2630;
    float _2633;
    float _2634;
    bool _2644;
    for (;;)
    {
        _2594 = cbMatDynParam._m0[0u];
        float _2596 = roundEven(_2594.y);
        bool _2597 = _2596 == 3.0;
        float _2598 = log2(_2584);
        float _2602 = exp2(_2598 * cbSceneParam._m0[78u].x);
        float _2603 = exp2(_2598 * cbSceneParam._m0[78u].y);
        float _2604 = exp2(_2598 * cbSceneParam._m0[78u].z);
        float _2605 = _2602 * _2444;
        float _2606 = _2603 * _2445;
        float _2607 = _2604 * _2446;
        float _2614 = _552 + (-0.5);
        _2616 = cbMtdParam._m0[1u];
        _2618 = _2616.y * _2614;
        float _2621 = (_2596 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2622 = _2621 * (_2597 ? _2605 : (_2605 + (cbSceneParam._m0[72u].w * _2578)));
        _2623 = _2621 * (_2597 ? _2606 : (_2606 + (cbSceneParam._m0[72u].w * _2580)));
        _2624 = _2621 * (_2597 ? _2607 : (_2607 + (cbSceneParam._m0[72u].w * _2582)));
        _2627 = ((_2452 * _2456) * _2602) * _2621;
        _2630 = ((_2453 * _2456) * _2603) * _2621;
        _2633 = ((_2454 * _2456) * _2604) * _2621;
        _2634 = _2614 * 0.999000012874603271484375;
        _2644 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2644)
        {
            if ((cbInstanceData._m0[_603 + 7u].x + _2634) < 0.5)
            {
                _2800 = true;
                break;
            }
        }
        uint _2741 = _604 + uint(_2594.w);
        if ((cbInstanceData._m0[_2741].w < 1.0) && ((cbInstanceData._m0[_2741].w + _2634) < 0.5))
        {
            _2800 = true;
            break;
        }
        if ((_2618 + 1.0) < _2616.x)
        {
            _2800 = true;
            break;
        }
        _2800 = false;
        break;
    }
    float _3005;
    if (_2800)
    {
        discard_state = true;
        _3005 = 0.0;
    }
    else
    {
        _3005 = _2461;
    }
    SV_Target.x = _2622;
    SV_Target.y = _2623;
    SV_Target.z = _2624;
    SV_Target.w = _3005;
    SV_Target_1.x = _2627;
    SV_Target_1.y = _2630;
    SV_Target_1.z = _2633;
    SV_Target_1.w = _2461;
    discard_exit();
}


