#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1020;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    float _296 = (cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _297 = (cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _310 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_296 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_297 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _316 = _310.x * cbMtdParam._m0[9u].x;
    float _317 = _310.y * cbMtdParam._m0[9u].y;
    float _318 = _310.z * cbMtdParam._m0[9u].z;
    float _320 = cbMtdParam._m0[14u].z * TEXCOORD_1.z;
    vec4 _333 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    float _335 = _333.x;
    vec4 _348 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    float _352 = _348.z;
    float _356 = (_348.x * 2.0) + (-1.0);
    float _358 = (_348.y * 2.0) + (-1.0);
    float _359 = dot(vec2(_356, _358), vec2(_356, _358));
    float _3415 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _365 = sqrt(1.0 - (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))));
    float _376 = fma(0.9591662883758544921875, _222, fma(0.2000000476837158203125, _215, _201 * 0.2000000476837158203125));
    float _380 = fma(0.9591662883758544921875, _223, fma(0.2000000476837158203125, _216, _202 * 0.2000000476837158203125));
    float _383 = fma(0.9591662883758544921875, _224, fma(0.2000000476837158203125, _217, _203 * 0.2000000476837158203125));
    float _387 = inversesqrt(dot(vec3(_376, _380, _383), vec3(_376, _380, _383)));
    float _394 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _395 = _394 * _278;
    float _396 = _394 * _279;
    float _397 = _394 * _280;
    float _401 = dot(vec4(_395, _396, _397, 0.0), vec4(_387 * _376, _387 * _380, _387 * _383, 0.0)) - cbMtdParam._m0[14u].x;
    float _3426 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _408 = exp2(log2(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].y, 0.001000000047497451305389404296875))));
    vec4 _437 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _471 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _502 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _524 = fma(_365, _222, fma(_358, _215, _356 * _201));
    float _527 = fma(_365, _223, fma(_358, _216, _356 * _202));
    float _530 = fma(_365, _224, fma(_358, _217, _356 * _203));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    float _535 = _534 * _524;
    float _536 = _534 * _527;
    float _537 = _534 * _530;
    float _3442 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _538 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _539 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _3464 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3475 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3486 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3497 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _543 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _559 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _565 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _566 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _586 = fma(_537, cbSceneParam._m0[5u].z, fma(_536, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _535));
    float _589 = fma(_537, cbSceneParam._m0[6u].z, fma(_536, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _535));
    float _592 = fma(_537, cbSceneParam._m0[7u].z, fma(_536, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _535));
    uint _605 = uint(roundEven(NORMAL.w)) * 13u;
    uint _606 = _605 + 9u;
    uint _607 = _606 + uint(cbMatDynParam._m0[0u].w);
    float _613 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * cbInstanceData._m0[_607].x;
    float _614 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_607].y;
    float _615 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_607].z;
    float _3508 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _3530 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _619 = 1.0 - _543;
    float _620 = _616 * _619;
    float _621 = _617 * _619;
    float _622 = _618 * _619;
    float _627 = (_616 + (-0.039999999105930328369140625)) * _543;
    float _628 = (_617 + (-0.039999999105930328369140625)) * _543;
    float _629 = (_618 + (-0.039999999105930328369140625)) * _543;
    float _630 = _627 + 0.039999999105930328369140625;
    float _632 = _628 + 0.039999999105930328369140625;
    float _633 = _629 + 0.039999999105930328369140625;
    vec4 _642 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _565, cbSceneParam._m0[86u].y * _566));
    float _645 = _642.x * TEXCOORD_1.w;
    float _646 = dot(vec3(_535, _536, _537), vec3(_395, _396, _397));
    float _649 = _646 * 2.0;
    float _653 = (_649 * _535) - _395;
    float _654 = (_649 * _536) - _396;
    float _655 = (_649 * _537) - _397;
    float _659 = abs(dot(vec3(_395, _396, _397), vec3(_535, _536, _537)));
    float _3541 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _661 = sqrt(_539);
    float _674 = exp2((_661 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_661 * 3.0));
    float _680 = (1.0 - _674) * ((_661 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _681 = _674 * _661;
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1019;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _744 = fma(_717, cbModelParam._m0[26u].z, fma(_713, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _709));
        float _748 = fma(_717, cbModelParam._m0[27u].z, fma(_713, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _709));
        float _752 = fma(_717, cbModelParam._m0[28u].z, fma(_713, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _709));
        float _777 = _709 + _535;
        float _778 = _713 + _536;
        float _779 = _717 + _537;
        float _789 = fma(_779, cbModelParam._m0[26u].z, fma(_778, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _777)) - _744;
        float _790 = fma(_779, cbModelParam._m0[27u].z, fma(_778, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _777)) - _748;
        float _791 = fma(_779, cbModelParam._m0[28u].z, fma(_778, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _777)) - _752;
        float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
        float _808 = ((_795 * _789) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_744 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _809 = ((_795 * _790) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_748 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_795 * _791) / cbModelParam._m0[34u].z) + ((((((_752 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        float _847 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_813.x + (-0.5));
        float _849 = _847 * (_813.y + (-0.5));
        float _850 = _847 * (_813.z + (-0.5));
        float _857 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_820.x + (-0.5));
        float _859 = _857 * (_820.y + (-0.5));
        float _860 = _857 * (_820.z + (-0.5));
        float _867 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_827.x + (-0.5));
        float _869 = _867 * (_827.y + (-0.5));
        float _870 = _867 * (_827.z + (-0.5));
        float _877 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_834.x + (-0.5));
        float _879 = _877 * (_834.y + (-0.5));
        float _880 = _877 * (_834.z + (-0.5));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = _848 * 0.5;
        float _885 = _858 * 0.5;
        float _886 = _868 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _901 = (dot(vec3(_535, _536, _537), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _911 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3589 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_913 + 1.0))) + _918) * _881;
        float _928 = _849 * 0.5;
        float _929 = _859 * 0.5;
        float _930 = _869 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_535, _536, _537), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3622 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_955 + 1.0))) + _960) * _882;
        float _970 = _850 * 0.5;
        float _971 = _860 * 0.5;
        float _972 = _870 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_535, _536, _537), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3655 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_997 + 1.0))) + _1002) * _883;
        _1019 = _850;
        _1021 = _849;
        _1022 = _848;
        _1023 = _860;
        _1024 = _859;
        _1025 = _858;
        _1026 = _870;
        _1027 = _869;
        _1028 = _868;
        _1029 = _883;
        _1030 = _882;
        _1031 = _881;
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
    }
    else
    {
        _1019 = _1020;
        _1021 = _1020;
        _1022 = _1020;
        _1023 = _1020;
        _1024 = _1020;
        _1025 = _1020;
        _1026 = _1020;
        _1027 = _1020;
        _1028 = _1020;
        _1029 = _1020;
        _1030 = _1020;
        _1031 = _1020;
        _1032 = 0.0;
        _1033 = 0.0;
        _1034 = 0.0;
    }
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1060 = fma(_717, cbModelParam._m0[30u].z, fma(_713, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _709));
        float _1064 = fma(_717, cbModelParam._m0[31u].z, fma(_713, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _709));
        float _1068 = fma(_717, cbModelParam._m0[32u].z, fma(_713, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _709));
        float _1091 = _709 + _535;
        float _1092 = _713 + _536;
        float _1093 = _717 + _537;
        float _1103 = fma(_1093, cbModelParam._m0[30u].z, fma(_1092, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1091)) - _1060;
        float _1104 = fma(_1093, cbModelParam._m0[31u].z, fma(_1092, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1091)) - _1064;
        float _1105 = fma(_1093, cbModelParam._m0[32u].z, fma(_1092, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1091)) - _1068;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1060 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1064 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[35u].z) + ((((((_1068 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1159 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1126.x + (-0.5));
        float _1161 = _1159 * (_1126.y + (-0.5));
        float _1162 = _1159 * (_1126.z + (-0.5));
        float _1169 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1133.x + (-0.5));
        float _1171 = _1169 * (_1133.y + (-0.5));
        float _1172 = _1169 * (_1133.z + (-0.5));
        float _1179 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1140.x + (-0.5));
        float _1181 = _1179 * (_1140.y + (-0.5));
        float _1182 = _1179 * (_1140.z + (-0.5));
        float _1189 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1147.x + (-0.5));
        float _1191 = _1189 * (_1147.y + (-0.5));
        float _1192 = _1189 * (_1147.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_535, _536, _537), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3718 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1223 + 1.0))) + _1228) * _1193;
        float _1238 = _1161 * 0.5;
        float _1239 = _1171 * 0.5;
        float _1240 = _1181 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_535, _536, _537), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3751 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1265 + 1.0))) + _1270) * _1194;
        float _1280 = _1162 * 0.5;
        float _1281 = _1172 * 0.5;
        float _1282 = _1182 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_535, _536, _537), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _3784 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1307 + 1.0))) + _1312) * _1195;
        _1329 = _1162;
        _1330 = _1161;
        _1331 = _1160;
        _1332 = _1172;
        _1333 = _1171;
        _1334 = _1170;
        _1335 = _1182;
        _1336 = _1181;
        _1337 = _1180;
        _1338 = _1195;
        _1339 = _1194;
        _1340 = _1193;
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1020;
        _1330 = _1020;
        _1331 = _1020;
        _1332 = _1020;
        _1333 = _1020;
        _1334 = _1020;
        _1335 = _1020;
        _1336 = _1020;
        _1337 = _1020;
        _1338 = _1020;
        _1339 = _1020;
        _1340 = _1020;
        _1341 = 0.0;
        _1342 = 0.0;
        _1343 = 0.0;
    }
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1032)) + _1032;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1033)) + _1033;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1034)) + _1034;
    float _1376 = fma(_1355, cbSceneParam._m0[89u].z, fma(_1354, cbSceneParam._m0[89u].y, _1353 * cbSceneParam._m0[89u].x));
    float _1379 = fma(_1355, cbSceneParam._m0[90u].z, fma(_1354, cbSceneParam._m0[90u].y, _1353 * cbSceneParam._m0[90u].x));
    float _1382 = fma(_1355, cbSceneParam._m0[91u].z, fma(_1354, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1353));
    float _1397 = _653 * 0.5;
    float _1398 = _654 * 0.5;
    float _1399 = _655 * 0.5;
    float _1400 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1403 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1406 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1440;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1413 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1019, _1023, _1026, _1029));
        float _1417 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1021, _1024, _1027, _1030));
        float _1421 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1022, _1025, _1028, _1031));
        float _1428 = dot(vec4(cbModelParam._m0[39u]), vec4(_1397, _1398, _1399, 1.0));
        _1440 = dot(vec3(isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1428) ? 0.0 : (isnan(0.0) ? _1428 : max(0.0, _1428))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1440 = 1.0;
    }
    float _1451;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1442 = dot(vec4(cbModelParam._m0[40u]), vec4(_1397, _1398, _1399, 1.0));
        _1451 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1451 = 1.0;
    }
    float _1455 = (_1451 * cbModelParam._m0[1u].x) + (_1440 * (1.0 - cbModelParam._m0[1u].x));
    float _1465 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _539);
    float _1466 = isnan(_1465) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1465 : min(cbModelParam._m0[25u].z, _1465));
    float _1546;
    float _1548;
    float _1550;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1513 = fma(_717, cbModelParam._m0[13u].z, fma(_713, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _709)) + cbModelParam._m0[13u].w;
        float _1517 = fma(_717, cbModelParam._m0[14u].z, fma(_713, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _709)) + cbModelParam._m0[14u].w;
        float _1521 = fma(_717, cbModelParam._m0[15u].z, fma(_713, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _709)) + cbModelParam._m0[15u].w;
        float _1524 = fma(_655, cbModelParam._m0[13u].z, fma(_654, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653));
        float _1527 = fma(_655, cbModelParam._m0[14u].z, fma(_654, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653));
        float _1530 = fma(_655, cbModelParam._m0[15u].z, fma(_654, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653));
        float _1558;
        if (_1524 > 0.0)
        {
            _1558 = abs((1.0 - _1513) / _1524);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1513 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1558 = frontier_phi_16_14_ladder;
        }
        float _1784;
        if (_1527 > 0.0)
        {
            _1784 = abs((1.0 - _1517) / _1527);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1517 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1784 = frontier_phi_25_21_ladder;
        }
        float _2041;
        if (_1530 > 0.0)
        {
            _2041 = abs((1.0 - _1521) / _1530);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1521 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2041 = frontier_phi_37_32_ladder;
        }
        float _2043 = isnan(_1784) ? _1558 : (isnan(_1558) ? _1784 : min(_1558, _1784));
        float _2044 = isnan(_2041) ? _2043 : (isnan(_2043) ? _2041 : min(_2043, _2041));
        float _2048 = (_2044 * _1524) + _1513;
        float _2049 = (_2044 * _1527) + _1517;
        float _2050 = (_2044 * _1530) + _1521;
        float _2051 = _2044 * 9.9999997473787516355514526367188e-05;
        float _2053 = (-1.0) - _2051;
        float _2055 = _2051 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2050 > _2055) || ((_2050 < _2053) || ((_2049 > _2055) || ((_2049 < _2053) || ((_2048 < _2053) || (_2048 > _2055))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2178 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2050, cbModelParam._m0[9u].z, fma(_2049, cbModelParam._m0[9u].y, _2048 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2050, cbModelParam._m0[10u].z, fma(_2049, cbModelParam._m0[10u].y, _2048 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2050, cbModelParam._m0[11u].z, fma(_2049, cbModelParam._m0[11u].y, _2048 * cbModelParam._m0[11u].x))), _1466);
            frontier_phi_15_37_ladder = _2178.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2178.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2178.x * cbModelParam._m0[1u].y;
        }
        _1546 = frontier_phi_15_37_ladder_2;
        _1548 = frontier_phi_15_37_ladder_1;
        _1550 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_653, _654, _655), _1466);
        _1546 = _1534.x * cbModelParam._m0[1u].y;
        _1548 = _1534.y * cbModelParam._m0[1u].y;
        _1550 = _1534.z * cbModelParam._m0[1u].y;
    }
    float _1554 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _539);
    float _1555 = isnan(_1554) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1554 : min(cbModelParam._m0[25u].w, _1554));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1611 = fma(_717, cbModelParam._m0[21u].z, fma(_713, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _709)) + cbModelParam._m0[21u].w;
        float _1615 = fma(_717, cbModelParam._m0[22u].z, fma(_713, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _709)) + cbModelParam._m0[22u].w;
        float _1619 = fma(_717, cbModelParam._m0[23u].z, fma(_713, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _709)) + cbModelParam._m0[23u].w;
        float _1622 = fma(_655, cbModelParam._m0[21u].z, fma(_654, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653));
        float _1625 = fma(_655, cbModelParam._m0[22u].z, fma(_654, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653));
        float _1628 = fma(_655, cbModelParam._m0[23u].z, fma(_654, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653));
        float _1789;
        if (_1622 > 0.0)
        {
            _1789 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1789 = frontier_phi_27_23_ladder;
        }
        float _2068;
        if (_1625 > 0.0)
        {
            _2068 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2068 = frontier_phi_39_34_ladder;
        }
        float _2281;
        if (_1628 > 0.0)
        {
            _2281 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2281 = frontier_phi_48_45_ladder;
        }
        float _2283 = isnan(_2068) ? _1789 : (isnan(_1789) ? _2068 : min(_1789, _2068));
        float _2284 = isnan(_2281) ? _2283 : (isnan(_2283) ? _2281 : min(_2283, _2281));
        float _2288 = (_2284 * _1622) + _1611;
        float _2289 = (_2284 * _1625) + _1615;
        float _2290 = (_2284 * _1628) + _1619;
        float _2291 = _2284 * 9.9999997473787516355514526367188e-05;
        float _2292 = (-1.0) - _2291;
        float _2294 = _2291 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2290 > _2294) || ((_2290 < _2292) || ((_2289 > _2294) || ((_2289 < _2292) || ((_2288 < _2292) || (_2288 > _2294))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2519 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2290, cbModelParam._m0[17u].z, fma(_2289, cbModelParam._m0[17u].y, _2288 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2290, cbModelParam._m0[18u].z, fma(_2289, cbModelParam._m0[18u].y, _2288 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2290, cbModelParam._m0[19u].z, fma(_2289, cbModelParam._m0[19u].y, _2288 * cbModelParam._m0[19u].x))), _1555);
            frontier_phi_24_48_ladder = _2519.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2519.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2519.x * cbModelParam._m0[1u].z;
        }
        _1647 = frontier_phi_24_48_ladder_2;
        _1649 = frontier_phi_24_48_ladder_1;
        _1651 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_653, _654, _655), _1555);
        _1647 = _1631.x * cbModelParam._m0[1u].z;
        _1649 = _1631.y * cbModelParam._m0[1u].z;
        _1651 = _1631.z * cbModelParam._m0[1u].z;
    }
    float _1664 = (((_680 * _630) + _681) * _645) * ((cbModelParam._m0[1u].w * (_1647 - _1546)) + _1546);
    float _1666 = (((_680 * _632) + _681) * _645) * ((cbModelParam._m0[1u].w * (_1649 - _1548)) + _1548);
    float _1668 = (((_680 * _633) + _681) * _645) * ((cbModelParam._m0[1u].w * (_1651 - _1550)) + _1550);
    float _1671 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1674 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1677 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, _1664 * cbSceneParam._m0[91u].x));
    vec4 _1685 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_565, _566));
    float _1687 = _1685.w;
    float _1699 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1687);
    float _1700 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1687);
    float _1701 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1687);
    uvec4 _1705 = floatBitsToUint(cbInstanceData._m0[_605 + 5u]);
    uint _1707 = _1705.x * 14u;
    uint _1708 = _1707 + 13u;
    float _1715 = _645 + (-1.0);
    float _1720 = (cbLight._m0[_1708].x * _1715) + 1.0;
    float _1721 = (cbLight._m0[_1708].y * _1715) + 1.0;
    float _1722 = (cbLight._m0[_1708].z * _1715) + 1.0;
    float _1723 = (cbLight._m0[_1708].w * _1715) + 1.0;
    uint _1724 = _1707 + 5u;
    float _1730 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    uint _1734 = _1707 + 4u;
    float _1743 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
    uint _1747 = _1707 | 1u;
    float _1758 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_535, _536, _537));
    float _1761 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_535, _536, _537));
    float _3920 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _3931 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1766 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1768 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.3183098733425140380859375;
    float _1775 = ((cbLight._m0[_1724].x * _1730) * _1768) + (((cbLight._m0[_1734].x * _1699) * _1743) * _1766);
    float _1776 = ((_1730 * cbLight._m0[_1724].y) * _1768) + (((cbLight._m0[_1734].y * _1700) * _1743) * _1766);
    float _1777 = ((_1730 * cbLight._m0[_1724].z) * _1768) + (((cbLight._m0[_1734].z * _1701) * _1743) * _1766);
    uvec4 _1781 = floatBitsToUint(cbLight._m0[_1707 + 12u]);
    bool _1783 = _1781.x == 0u;
    float _1794;
    float _1796;
    float _1798;
    if (_1783)
    {
        _1794 = _1775;
        _1796 = _1776;
        _1798 = _1777;
    }
    else
    {
        uint _1802 = _1707 + 6u;
        float _1818 = (dot(vec3(cbLight._m0[_1707 + 2u].xyz), vec3(_535, _536, _537)) * 0.5) + 0.5;
        float _1819 = _1818 * _1818;
        float _3942 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1821 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _1794 = (((cbLight._m0[_1802].x * 0.3183098733425140380859375) * _1820) * _1821) + _1775;
        _1796 = (((cbLight._m0[_1802].y * 0.3183098733425140380859375) * _1820) * _1821) + _1776;
        _1798 = (((cbLight._m0[_1802].z * 0.3183098733425140380859375) * _1820) * _1821) + _1777;
    }
    bool _1801 = _1781.y == 0u;
    float _1839;
    float _1841;
    float _1843;
    if (_1801)
    {
        _1839 = _1794;
        _1841 = _1796;
        _1843 = _1798;
    }
    else
    {
        uint _2012 = _1707 + 7u;
        float _2028 = (dot(vec3(cbLight._m0[_1707 + 3u].xyz), vec3(_535, _536, _537)) * 0.5) + 0.5;
        float _2029 = _2028 * _2028;
        float _3958 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2030 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _2031 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _1839 = (((cbLight._m0[_2012].x * 0.3183098733425140380859375) * _2030) * _2031) + _1794;
        _1841 = (((cbLight._m0[_2012].y * 0.3183098733425140380859375) * _2030) * _2031) + _1796;
        _1843 = (((cbLight._m0[_2012].z * 0.3183098733425140380859375) * _2030) * _2031) + _1798;
    }
    uint _1846 = _1707 + 8u;
    float _1859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1707].w)) * _539) * 0.949999988079071044921875);
    float _1860 = _1859 * _1859;
    float _1861 = cbLight._m0[_1707].x + _395;
    float _1862 = cbLight._m0[_1707].y + _396;
    float _1863 = cbLight._m0[_1707].z + _397;
    float _1867 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
    float _1868 = _1867 * _1861;
    float _1869 = _1867 * _1862;
    float _1870 = _1867 * _1863;
    float _1871 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_1707].xyz));
    float _3974 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _1875 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1876 = dot(vec3(_535, _536, _537), vec3(_1868, _1869, _1870));
    float _3996 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1880 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1868, _1869, _1870));
    float _4007 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1884 = _1860 * _1860;
    float _1888 = ((_1879 * _1879) * (_1884 + (-1.0))) + 1.0;
    float _1896 = exp2(log2(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * 5.0);
    float _1897 = 0.959999978542327880859375 - _627;
    float _1899 = 0.959999978542327880859375 - _628;
    float _1900 = 0.959999978542327880859375 - _629;
    float _1907 = 1.0 - _1860;
    float _1918 = (0.5 / (((_1875 * ((_1874 * _1907) + _1860)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _1907) + _1860) * _1874))) * _1874;
    float _4018 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1920 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1884 / ((_1888 * _1888) * 3.141590118408203125));
    uint _1934 = _1707 + 9u;
    float _1945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1747].w)) * _539) * 0.949999988079071044921875);
    float _1946 = _1945 * _1945;
    float _1947 = cbLight._m0[_1747].x + _395;
    float _1948 = cbLight._m0[_1747].y + _396;
    float _1949 = cbLight._m0[_1747].z + _397;
    float _1953 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
    float _1954 = _1953 * _1947;
    float _1955 = _1953 * _1948;
    float _1956 = _1953 * _1949;
    float _1957 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_1747].xyz));
    float _4029 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1961 = dot(vec3(_535, _536, _537), vec3(_1954, _1955, _1956));
    float _4040 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _1965 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_1954, _1955, _1956));
    float _4051 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1969 = _1946 * _1946;
    float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
    float _1980 = exp2(log2(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * 5.0);
    float _1987 = 1.0 - _1946;
    float _1997 = (0.5 / (((_1875 * ((_1960 * _1987) + _1946)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _1987) + _1946) * _1960))) * _1960;
    float _4062 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _1999 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
    float _2009 = (((((_1980 * _1897) + _630) * cbLight._m0[_1934].x) * _1999) * _1730) + ((((cbLight._m0[_1846].x * _1699) * ((_1896 * _1897) + _630)) * _1920) * _1743);
    float _2010 = (((((_1980 * _1899) + _632) * cbLight._m0[_1934].y) * _1999) * _1730) + ((((cbLight._m0[_1846].y * _1700) * ((_1896 * _1899) + _632)) * _1920) * _1743);
    float _2011 = (((((_1980 * _1900) + _633) * cbLight._m0[_1934].z) * _1999) * _1730) + ((((cbLight._m0[_1846].z * _1701) * ((_1896 * _1900) + _633)) * _1920) * _1743);
    float _2073;
    float _2075;
    float _2077;
    if (_1783)
    {
        _2073 = _2009;
        _2075 = _2010;
        _2077 = _2011;
    }
    else
    {
        uint _2079 = _1707 + 2u;
        uint _2083 = _1707 + 10u;
        float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _539) * 0.949999988079071044921875);
        float _2098 = _2097 * _2097;
        float _2099 = cbLight._m0[_2079].x + _395;
        float _2100 = cbLight._m0[_2079].y + _396;
        float _2101 = cbLight._m0[_2079].z + _397;
        float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
        float _2106 = _2105 * _2099;
        float _2107 = _2105 * _2100;
        float _2108 = _2105 * _2101;
        float _2109 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2079].xyz));
        float _4073 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2112 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2113 = dot(vec3(_535, _536, _537), vec3(_2106, _2107, _2108));
        float _4084 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2116 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2117 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2106, _2107, _2108));
        float _4095 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2121 = _2098 * _2098;
        float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
        float _2132 = exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0);
        float _2139 = 1.0 - _2098;
        float _2149 = (0.5 / (((_1875 * ((_2112 * _2139) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _2139) + _2098) * _2112))) * _2112;
        float _4106 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2151 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
        float _2152 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _2073 = (((((_2132 * _1897) + _630) * cbLight._m0[_2083].x) * _2151) * _2152) + _2009;
        _2075 = (((((_2132 * _1899) + _632) * cbLight._m0[_2083].y) * _2151) * _2152) + _2010;
        _2077 = (((((_2132 * _1900) + _633) * cbLight._m0[_2083].z) * _2151) * _2152) + _2011;
    }
    float _2187;
    float _2189;
    float _2191;
    if (_1801)
    {
        _2187 = _2073;
        _2189 = _2075;
        _2191 = _2077;
    }
    else
    {
        uint _2198 = _1707 + 3u;
        uint _2202 = _1707 + 11u;
        float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _539) * 0.949999988079071044921875);
        float _2217 = _2216 * _2216;
        float _2218 = cbLight._m0[_2198].x + _395;
        float _2219 = cbLight._m0[_2198].y + _396;
        float _2220 = cbLight._m0[_2198].z + _397;
        float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
        float _2225 = _2224 * _2218;
        float _2226 = _2224 * _2219;
        float _2227 = _2224 * _2220;
        float _2228 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2198].xyz));
        float _4122 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2232 = dot(vec3(_535, _536, _537), vec3(_2225, _2226, _2227));
        float _4133 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2235 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2236 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2225, _2226, _2227));
        float _4144 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2240 = _2217 * _2217;
        float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
        float _2251 = exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0);
        float _2258 = 1.0 - _2217;
        float _2268 = (0.5 / (((_1875 * ((_2231 * _2258) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _2258) + _2217) * _2231))) * _2231;
        float _4155 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2270 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
        float _2271 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _2187 = (((((_2251 * _1897) + _630) * cbLight._m0[_2202].x) * _2270) * _2271) + _2073;
        _2189 = (((((_2251 * _1899) + _632) * cbLight._m0[_2202].y) * _2270) * _2271) + _2075;
        _2191 = (((((_2251 * _1900) + _633) * cbLight._m0[_2202].z) * _2270) * _2271) + _2077;
    }
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    if (_1705.y == 0u)
    {
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2347 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2346;
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2346;
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2346;
        uvec4 _2361 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2362 = _2361.x;
        uint _2373 = uint((float(_2361.y) * floor(float(uint(cbSceneParam._m0[85u].y * _566) / _2362))) + floor(float(uint(cbSceneParam._m0[85u].x * _565) / _2362)));
        float _2383 = (log2(_2349 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2384 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        uint _2387 = uint(isnan(14.0) ? _2384 : (isnan(_2384) ? 14.0 : min(_2384, 14.0)));
        uvec4 _2392 = texelFetch(g_lightClusterGridBuffer, int(((_2387 << 2u) + (_2373 << 6u)) >> 2u));
        uint _2393 = _2392.x;
        uint _2394 = _2361.z;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        if (((((1u << ((_2394 >> 4u) & 15u)) + 4294967295u) & _2393) == 0u) || ((_2394 & 240u) == 0u))
        {
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
        }
        else
        {
            float _2525;
            float _2527;
            float _2529;
            float _2531;
            float _2533;
            float _2535;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            uint _2683 = 0u;
            uint _2692;
            bool _2693;
            for (;;)
            {
                _2692 = texelFetch(g_lightClassification, int((((_2387 << 5u) + (_2373 << 9u)) + (_2683 << 2u)) >> 2u)).x;
                _2693 = _2692 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2693)
                {
                    frontier_phi_63_pred = _2682;
                    frontier_phi_63_pred_1 = _2681;
                    frontier_phi_63_pred_2 = _2680;
                    frontier_phi_63_pred_3 = _2679;
                    frontier_phi_63_pred_4 = _2678;
                    frontier_phi_63_pred_5 = _2677;
                }
                else
                {
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    uint _2807;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2682;
                    _2807 = _2692;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    for (;;)
                    {
                        uint _2811 = uint(findLSB(_2807)) + (_2683 << 5u);
                        uint _2808 = (_2807 + 4294967295u) & _2807;
                        uint _2813 = _2811 * 48u;
                        vec4 _2827 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 3u)).x));
                        uint _2833 = (_2811 * 48u) + 4u;
                        vec4 _2846 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2833)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 3u)).x));
                        uint _2852 = (_2811 * 48u) + 8u;
                        vec3 _2863 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2852)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 2u)).x));
                        float _2867 = _2827.x - _2347;
                        float _2868 = _2827.y - _2348;
                        float _2869 = _2827.z - _2349;
                        float _2870 = dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869));
                        float _2873 = inversesqrt(_2870);
                        float _2874 = _2873 * _2867;
                        float _2875 = _2873 * _2868;
                        float _2876 = _2873 * _2869;
                        float _2877 = dot(vec3(_586, _589, _592), vec3(_2874, _2875, _2876));
                        float _2882 = 1.0 - (_2870 * _2827.w);
                        float _4181 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                        float _2883 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2884 = sqrt(_2870) * _2846.w;
                        float _2887 = 1.39999997615814208984375 / (_2884 + 1.39999997615814208984375);
                        float _2888 = _2887 * _2887;
                        float _2891 = ((1.0 - _2888) * _2877) + _2888;
                        float _2894 = _2884 * _2884;
                        float _2898 = ((isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))) * _2883) / ((_2894 * 0.699999988079071044921875) + 1.0);
                        float _2902 = (-0.0) - _2347;
                        float _2903 = (-0.0) - _2348;
                        float _2904 = (-0.0) - _2349;
                        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
                        float _2909 = _2908 * _2902;
                        float _2910 = _2908 * _2903;
                        float _2911 = _2908 * _2904;
                        float _2919 = exp2(log2(1.0 / ((_2894 * 3.5) + 5.0)) * 0.25);
                        float _2920 = 1.0 - _661;
                        float _2927 = sqrt(1.0 - ((1.0 - (_2920 * _2920)) * (1.0 - (_2919 * _2919))));
                        float _2928 = _2927 * _2927;
                        float _2929 = _2928 * _2928;
                        float _2930 = _2909 + _2874;
                        float _2931 = _2910 + _2875;
                        float _2932 = _2911 + _2876;
                        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
                        float _2940 = dot(vec3(_586, _589, _592), vec3(_2909, _2910, _2911));
                        float _4197 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2943 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2944 = dot(vec3(_586, _589, _592), vec3(_2936 * _2930, _2936 * _2931, _2936 * _2932));
                        float _4208 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2947 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2951 = ((_2947 * _2947) * (_2929 + (-1.0))) + 1.0;
                        float _2952 = _2887 * _2928;
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2877) + _2953;
                        float _4219 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2957 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                        float _2958 = 1.0 - _2928;
                        float _2968 = (0.5 / (((_2957 * ((_2943 * _2958) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2957 * _2958) + _2928) * _2943))) * _2957;
                        float _4230 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2979 = (((_2929 * 3.1415927410125732421875) * (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) / ((_2951 * _2951) * ((_2894 * 2.1991131305694580078125) + 3.141590118408203125))) * _2883;
                        _2736 = (_2898 * _2846.x) + _2804;
                        _2737 = (_2898 * _2846.y) + _2805;
                        _2738 = (_2898 * _2846.z) + _2806;
                        _2733 = (_2979 * _2863.x) + _2801;
                        _2734 = (_2979 * _2863.y) + _2802;
                        _2735 = (_2979 * _2863.z) + _2803;
                        if (_2808 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2808;
                        }
                    }
                    frontier_phi_63_pred = _2738;
                    frontier_phi_63_pred_1 = _2737;
                    frontier_phi_63_pred_2 = _2736;
                    frontier_phi_63_pred_3 = _2735;
                    frontier_phi_63_pred_4 = _2734;
                    frontier_phi_63_pred_5 = _2733;
                }
                _2535 = frontier_phi_63_pred;
                _2533 = frontier_phi_63_pred_1;
                _2531 = frontier_phi_63_pred_2;
                _2529 = frontier_phi_63_pred_3;
                _2527 = frontier_phi_63_pred_4;
                _2525 = frontier_phi_63_pred_5;
                uint _2684 = _2683 + 1u;
                if (_2684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2677 = _2525;
                    _2678 = _2527;
                    _2679 = _2529;
                    _2680 = _2531;
                    _2681 = _2533;
                    _2682 = _2535;
                    _2683 = _2684;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
        }
        uvec4 _2538 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2539 = _2538.z;
        uint _2541 = (_2539 >> 8u) & 15u;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        if (((4294967295u << _2541) & _2393) == 0u)
        {
            _2645 = _2524;
            _2647 = _2526;
            _2649 = _2528;
            _2651 = _2530;
            _2653 = _2532;
            _2655 = _2534;
        }
        else
        {
            float _2670 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
            float _2671 = _2670 * _2347;
            float _2672 = _2670 * _2348;
            float _2673 = _2670 * _2349;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2541 < ((_2539 >> 12u) & 15u))
            {
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2656;
                float _2784 = _2524;
                float _2785 = _2526;
                float _2786 = _2528;
                float _2787 = _2530;
                float _2788 = _2532;
                float _2789 = _2534;
                uint _2790 = _2541;
                uint _2799;
                bool _2800;
                for (;;)
                {
                    _2799 = texelFetch(g_lightClassification, int((((_2387 << 5u) + (_2373 << 9u)) + (_2790 << 2u)) >> 2u)).x;
                    _2800 = _2799 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2800)
                    {
                        frontier_phi_69_pred = _2789;
                        frontier_phi_69_pred_1 = _2788;
                        frontier_phi_69_pred_2 = _2787;
                        frontier_phi_69_pred_3 = _2786;
                        frontier_phi_69_pred_4 = _2785;
                        frontier_phi_69_pred_5 = _2784;
                    }
                    else
                    {
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        float _3000 = _2787;
                        float _3001 = _2788;
                        float _3002 = _2789;
                        uint _3003 = _2799;
                        uint _3004;
                        vec4 _3029;
                        float _3030;
                        vec4 _3045;
                        vec3 _3057;
                        vec4 _3072;
                        vec4 _3088;
                        float _3135;
                        bool _3136;
                        for (;;)
                        {
                            uint _3014 = ((_2790 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3003));
                            _3004 = (_3003 + 4294967295u) & _3003;
                            uint _3016 = _3014 * 40u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            _3030 = _3029.w;
                            uint _3032 = (_3014 * 40u) + 4u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3047 = (_3014 * 40u) + 8u;
                            _3057 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x));
                            uint _3059 = (_3014 * 40u) + 16u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3075 = (_3014 * 40u) + 20u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3091 = (_3014 * 40u) + 24u;
                            vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3110 = (_3014 * 40u) + 28u;
                            vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            _3135 = fma(_2349, _3123.z, fma(_2348, _3123.y, _3123.x * _2347)) + _3123.w;
                            _3136 = !((fma(_2349, _3104.z, fma(_2348, _3104.y, _3104.x * _2347)) + _3104.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3136)
                            {
                                float _3163 = _3029.x - _2347;
                                float _3164 = _3029.y - _2348;
                                float _3165 = _3029.z - _2349;
                                float _3166 = dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165));
                                float _3169 = inversesqrt(_3166);
                                float _3170 = _3169 * _3163;
                                float _3171 = _3169 * _3164;
                                float _3172 = _3169 * _3165;
                                float _3176 = 1.0 - (_3166 / (_3030 * _3030));
                                float _4241 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3181 = sqrt(_3166) * _3045.w;
                                float _3183 = 1.39999997615814208984375 / (_3181 + 1.39999997615814208984375);
                                float _3184 = _3183 * _3183;
                                float _3187 = ((1.0 - _3184) * dot(vec3(_3170, _3171, _3172), vec3(_586, _589, _592))) + _3184;
                                float _3190 = _3181 * _3181;
                                float _3194 = (fma(_2349, _3072.z, fma(_2348, _3072.y, _3072.x * _2347)) + _3072.w) / _3135;
                                float _3195 = (fma(_2349, _3088.z, fma(_2348, _3088.y, _3088.x * _2347)) + _3088.w) / _3135;
                                float _3199 = 1.0 - dot(vec2(_3194, _3195), vec2(_3194, _3195));
                                float _4257 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3201 = _3200 * (((isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))) * _3177) / ((_3190 * 0.699999988079071044921875) + 1.0));
                                float _3213 = exp2(log2(1.0 / ((_3190 * 3.5) + 5.0)) * 0.25);
                                float _3214 = 1.0 - _661;
                                float _3221 = sqrt(1.0 - ((1.0 - (_3214 * _3214)) * (1.0 - (_3213 * _3213))));
                                float _3222 = _3221 * _3221;
                                float _3223 = _3222 * _3222;
                                float _3224 = _3170 - _2671;
                                float _3225 = _3171 - _2672;
                                float _3226 = _3172 - _2673;
                                float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                                float _3234 = dot(vec3(_586, _589, _592), vec3((-0.0) - _2671, (-0.0) - _2672, (-0.0) - _2673));
                                float _4268 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3237 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3238 = dot(vec3(_586, _589, _592), vec3(_3230 * _3224, _3230 * _3225, _3230 * _3226));
                                float _4279 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3241 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3245 = ((_3241 * _3241) * (_3223 + (-1.0))) + 1.0;
                                float _3246 = _3183 * _3222;
                                float _3247 = _3246 * _3246;
                                float _3253 = ((1.0 - _3247) * dot(vec3(_586, _589, _592), vec3(_3170, _3171, _3172))) + _3247;
                                float _4290 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3255 = 1.0 - _3222;
                                float _3265 = (0.5 / (((_3254 * ((_3237 * _3255) + _3222)) + 9.9999999392252902907785028219223e-09) + (((_3254 * _3255) + _3222) * _3237))) * _3254;
                                float _4301 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3275 = (_3200 * _3177) * (((_3223 * 3.1415927410125732421875) * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) / ((_3245 * _3245) * ((_3190 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3201 * _3045.z;
                                frontier_phi_75_pred_1 = _3201 * _3045.y;
                                frontier_phi_75_pred_2 = _3201 * _3045.x;
                                frontier_phi_75_pred_3 = _3275 * _3057.z;
                                frontier_phi_75_pred_4 = _3275 * _3057.y;
                                frontier_phi_75_pred_5 = _3275 * _3057.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3284 = frontier_phi_75_pred;
                            _3283 = frontier_phi_75_pred_1;
                            _3282 = frontier_phi_75_pred_2;
                            _3281 = frontier_phi_75_pred_3;
                            _3280 = frontier_phi_75_pred_4;
                            _3279 = frontier_phi_75_pred_5;
                            _2987 = _3282 + _3000;
                            _2988 = _3283 + _3001;
                            _2989 = _3284 + _3002;
                            _2984 = _3279 + _2997;
                            _2985 = _3280 + _2998;
                            _2986 = _3281 + _2999;
                            if (_3004 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _3004;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2989;
                        frontier_phi_69_pred_1 = _2988;
                        frontier_phi_69_pred_2 = _2987;
                        frontier_phi_69_pred_3 = _2986;
                        frontier_phi_69_pred_4 = _2985;
                        frontier_phi_69_pred_5 = _2984;
                    }
                    _2656 = frontier_phi_69_pred;
                    _2654 = frontier_phi_69_pred_1;
                    _2652 = frontier_phi_69_pred_2;
                    _2650 = frontier_phi_69_pred_3;
                    _2648 = frontier_phi_69_pred_4;
                    _2646 = frontier_phi_69_pred_5;
                    uint _2791 = _2790 + 1u;
                    if (_2791 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2784 = _2646;
                        _2785 = _2648;
                        _2786 = _2650;
                        _2787 = _2652;
                        _2788 = _2654;
                        _2789 = _2656;
                        _2790 = _2791;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2656;
                frontier_phi_57_58_ladder_1 = _2654;
                frontier_phi_57_58_ladder_2 = _2652;
                frontier_phi_57_58_ladder_3 = _2650;
                frontier_phi_57_58_ladder_4 = _2648;
                frontier_phi_57_58_ladder_5 = _2646;
            }
            else
            {
                frontier_phi_57_58_ladder = _2534;
                frontier_phi_57_58_ladder_1 = _2532;
                frontier_phi_57_58_ladder_2 = _2530;
                frontier_phi_57_58_ladder_3 = _2528;
                frontier_phi_57_58_ladder_4 = _2526;
                frontier_phi_57_58_ladder_5 = _2524;
            }
            _2645 = frontier_phi_57_58_ladder_5;
            _2647 = frontier_phi_57_58_ladder_4;
            _2649 = frontier_phi_57_58_ladder_3;
            _2651 = frontier_phi_57_58_ladder_2;
            _2653 = frontier_phi_57_58_ladder_1;
            _2655 = frontier_phi_57_58_ladder;
        }
        float _2660 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
        _2405 = (_2660 * _2651) + _1839;
        _2407 = (_2660 * _2653) + _1841;
        _2409 = (_2660 * _2655) + _1843;
        _2411 = ((_2645 * _630) * _2660) + _2187;
        _2413 = ((_2647 * _632) * _2660) + _2189;
        _2415 = ((_2649 * _633) * _2660) + _2191;
    }
    else
    {
        _2405 = _1839;
        _2407 = _1841;
        _2409 = _1843;
        _2411 = _2187;
        _2413 = _2189;
        _2415 = _2191;
    }
    uint _2421 = _606 + uint(cbMatDynParam._m0[0u].w);
    float _2427 = (((((_437.x * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _408)) + (_471.x * cbMtdParam._m0[12u].x)) + (_502.x * cbMtdParam._m0[13u].x)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2421].x;
    float _2428 = (((((_437.y * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _408)) + (_471.y * cbMtdParam._m0[12u].y)) + (_502.y * cbMtdParam._m0[13u].y)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2421].y;
    float _2429 = (((((_437.z * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _408)) + (_471.z * cbMtdParam._m0[12u].z)) + (_502.z * cbMtdParam._m0[13u].z)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2421].z;
    float _4317 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4328 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4339 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4350 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _2447 = (((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2405 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _645))) + ((_2411 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1455)) * cbPerFrame._m0[3u].x)) + _2427;
    float _2449 = (_2428 + ((_2413 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1455)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2407 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _645)));
    float _2451 = (_2429 + ((_2415 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1455)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2409 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _645)));
    float _4376 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2464 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2469 = cbInstanceData._m0[_605 + 6u].w * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)));
    float _2474 = _565 / cbSceneParam._m0[86u].x;
    float _2475 = _566 / cbSceneParam._m0[86u].y;
    vec4 _2489 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2474, _2475, (log2((isnan(cbSceneParam._m0[77u].w) ? _559 : (isnan(_559) ? cbSceneParam._m0[77u].w : min(_559, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2491 = _2489.x;
    float _2492 = _2489.y;
    float _2493 = _2489.z;
    float _2494 = _2489.w;
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    if (_559 > cbSceneParam._m0[78u].w)
    {
        float _2549 = isnan(_559) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _559 : min(cbSceneParam._m0[80u].w, _559));
        float _2550 = _2549 / _559;
        float _2561 = _2550 * _278;
        float _2562 = _279 * _2550;
        float _2563 = (-0.0) - _2562;
        float _2564 = _2550 * _280;
        float _2566 = (cbSceneParam._m0[77u].w * _2563) / _2549;
        float _2567 = _2566 + cbSceneParam._m0[79u].w;
        float _2568 = cbSceneParam._m0[79u].w - _2562;
        float _2574 = sqrt(((_2561 * _2561) + (_2562 * _2562)) + (_2564 * _2564));
        float _2577 = (1.0 - (cbSceneParam._m0[77u].w / _2549)) * _2574;
        float _2582 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2584 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2746;
        if (abs((_2563 - _2566) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2746 = ((((_2567 > 0.0) ? exp2(_2582 * _2567) : (2.0 - exp2(_2584 * _2567))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2577;
        }
        else
        {
            float _2706 = 1.0 / cbSceneParam._m0[80u].x;
            float _2707 = isnan(_2568) ? _2567 : (isnan(_2567) ? _2568 : max(_2567, _2568));
            float _2708 = isnan(_2568) ? _2567 : (isnan(_2567) ? _2568 : min(_2567, _2568));
            float _2717 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : min(_2707, 0.0));
            float _2718 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : min(_2708, 0.0));
            _2746 = ((abs(_2574 / _2563) * cbSceneParam._m0[80u].y) * ((((_2717 - _2718) * 2.0) - ((exp2(_2582 * (isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0)))) - exp2(_2582 * (isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0))))) * _2706)) - ((exp2(_2584 * _2717) - exp2(_2584 * _2718)) * _2706))) + (_2577 * cbSceneParam._m0[80u].z);
        }
        vec4 _2748 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2474, _2475, 1.0), 0.0);
        float _2757 = exp2((_2746 * (-1.44269502162933349609375)) * (1.0 - _2748.w));
        float _2758 = log2(_2757);
        float _2774 = log2(_2494);
        _2586 = (exp2(_2774 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].x)) * _2748.x) / cbSceneParam._m0[78u].x)) + _2491;
        _2588 = (exp2(_2774 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].y)) * _2748.y) / cbSceneParam._m0[78u].y)) + _2492;
        _2590 = (exp2(_2774 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].z)) * _2748.z) / cbSceneParam._m0[78u].z)) + _2493;
        _2592 = _2757 * _2494;
    }
    else
    {
        _2586 = _2491;
        _2588 = _2492;
        _2590 = _2493;
        _2592 = _2494;
    }
    float _2604 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2605 = _2604 == 3.0;
    float _2606 = log2(_2592);
    float _2610 = exp2(_2606 * cbSceneParam._m0[78u].x);
    float _2611 = exp2(_2606 * cbSceneParam._m0[78u].y);
    float _2612 = exp2(_2606 * cbSceneParam._m0[78u].z);
    float _2613 = _2610 * (isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0)));
    float _2614 = _2611 * (isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0)));
    float _2615 = _2612 * (isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0)));
    float _2624 = (_2604 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2624 * (_2605 ? _2613 : (_2613 + (cbSceneParam._m0[72u].w * _2586)));
    SV_Target.y = _2624 * (_2605 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2588)));
    SV_Target.z = _2624 * (_2605 ? _2615 : (_2615 + (cbSceneParam._m0[72u].w * _2590)));
    SV_Target.w = _2469;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2427) * _2464) * _2610) * _2624;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2428) * _2464) * _2611) * _2624;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2429) * _2464) * _2612) * _2624;
    SV_Target_1.w = _2469;
}


