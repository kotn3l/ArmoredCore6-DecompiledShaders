#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _984;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    float _294 = (cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _295 = (cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _308 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_294 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_295 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _314 = _308.x * cbMtdParam._m0[9u].x;
    float _315 = _308.y * cbMtdParam._m0[9u].y;
    float _316 = _308.z * cbMtdParam._m0[9u].z;
    float _318 = cbMtdParam._m0[14u].z * TEXCOORD_1.z;
    vec4 _331 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    float _335 = _331.z;
    float _339 = (_331.x * 2.0) + (-1.0);
    float _341 = (_331.y * 2.0) + (-1.0);
    float _342 = dot(vec2(_339, _341), vec2(_339, _341));
    float _3359 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _348 = sqrt(1.0 - (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))));
    float _359 = fma(0.9591662883758544921875, _220, fma(0.2000000476837158203125, _213, _199 * 0.2000000476837158203125));
    float _363 = fma(0.9591662883758544921875, _221, fma(0.2000000476837158203125, _214, _200 * 0.2000000476837158203125));
    float _366 = fma(0.9591662883758544921875, _222, fma(0.2000000476837158203125, _215, _201 * 0.2000000476837158203125));
    float _370 = inversesqrt(dot(vec3(_359, _363, _366), vec3(_359, _363, _366)));
    float _377 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _378 = _377 * _276;
    float _379 = _377 * _277;
    float _380 = _377 * _278;
    float _384 = dot(vec4(_378, _379, _380, 0.0), vec4(_370 * _359, _370 * _363, _370 * _366, 0.0)) - cbMtdParam._m0[14u].x;
    float _3370 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _391 = exp2(log2(1.0 - (isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].y, 0.001000000047497451305389404296875))));
    vec4 _420 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _454 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _485 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _507 = fma(_348, _220, fma(_341, _213, _339 * _199));
    float _510 = fma(_348, _221, fma(_341, _214, _339 * _200));
    float _513 = fma(_348, _222, fma(_341, _215, _339 * _201));
    float _517 = inversesqrt(dot(vec3(_507, _510, _513), vec3(_507, _510, _513)));
    float _518 = _517 * _507;
    float _519 = _517 * _510;
    float _520 = _517 * _513;
    float _3386 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _521 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _3397 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _522 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3419 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3430 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _541 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _547 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _548 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _568 = fma(_520, cbSceneParam._m0[5u].z, fma(_519, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _518));
    float _571 = fma(_520, cbSceneParam._m0[6u].z, fma(_519, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _518));
    float _574 = fma(_520, cbSceneParam._m0[7u].z, fma(_519, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _518));
    uint _587 = uint(roundEven(NORMAL.w)) * 13u;
    uint _588 = _587 + 9u;
    uint _589 = _588 + uint(cbMatDynParam._m0[0u].w);
    float _595 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * cbInstanceData._m0[_589].x;
    float _596 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) * cbInstanceData._m0[_589].y;
    float _597 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_589].z;
    float _3441 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    vec4 _609 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _547, cbSceneParam._m0[86u].y * _548));
    float _612 = _609.x * TEXCOORD_1.w;
    float _613 = dot(vec3(_518, _519, _520), vec3(_378, _379, _380));
    float _616 = _613 * 2.0;
    float _620 = (_616 * _518) - _378;
    float _621 = (_616 * _519) - _379;
    float _622 = (_616 * _520) - _380;
    float _626 = abs(dot(vec3(_378, _379, _380), vec3(_518, _519, _520)));
    float _3474 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _628 = sqrt(_522);
    float _641 = exp2((_628 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_628 * 3.0));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _983;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _708 = fma(_681, cbModelParam._m0[26u].z, fma(_677, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _673));
        float _712 = fma(_681, cbModelParam._m0[27u].z, fma(_677, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _673));
        float _716 = fma(_681, cbModelParam._m0[28u].z, fma(_677, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _673));
        float _741 = _673 + _518;
        float _742 = _677 + _519;
        float _743 = _681 + _520;
        float _753 = fma(_743, cbModelParam._m0[26u].z, fma(_742, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741)) - _708;
        float _754 = fma(_743, cbModelParam._m0[27u].z, fma(_742, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741)) - _712;
        float _755 = fma(_743, cbModelParam._m0[28u].z, fma(_742, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741)) - _716;
        float _759 = inversesqrt(dot(vec3(_753, _754, _755), vec3(_753, _754, _755)));
        float _772 = ((_759 * _753) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_708 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _773 = ((_759 * _754) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_712 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _774 = ((_759 * _755) / cbModelParam._m0[34u].z) + ((((((_716 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        float _811 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_777.x + (-0.5));
        float _813 = _811 * (_777.y + (-0.5));
        float _814 = _811 * (_777.z + (-0.5));
        float _821 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_784.x + (-0.5));
        float _823 = _821 * (_784.y + (-0.5));
        float _824 = _821 * (_784.z + (-0.5));
        float _831 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_791.x + (-0.5));
        float _833 = _831 * (_791.y + (-0.5));
        float _834 = _831 * (_791.z + (-0.5));
        float _841 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_798.x + (-0.5));
        float _843 = _841 * (_798.y + (-0.5));
        float _844 = _841 * (_798.z + (-0.5));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _848 = _812 * 0.5;
        float _849 = _822 * 0.5;
        float _850 = _832 * 0.5;
        float _851 = dot(vec3(_848, _849, _850), vec3(_848, _849, _850));
        float _856 = (_851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_851);
        float _865 = (dot(vec3(_518, _519, _520), vec3(_856 * _848, _856 * _849, _856 * _850)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _875 = sqrt(((_849 * _849) + (_848 * _848)) + (_850 * _850)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _877 = _876 * 2.0;
        float _881 = (1.0 - _876) / (_876 + 1.0);
        float _3522 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _891 = ((((1.0 - _882) * (_877 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_877 + 1.0))) + _882) * _845;
        float _892 = _813 * 0.5;
        float _893 = _823 * 0.5;
        float _894 = _833 * 0.5;
        float _895 = dot(vec3(_892, _893, _894), vec3(_892, _893, _894));
        float _900 = (_895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_895);
        float _908 = (dot(vec3(_518, _519, _520), vec3(_900 * _892, _900 * _893, _900 * _894)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _917 = sqrt(((_893 * _893) + (_892 * _892)) + (_894 * _894)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3555 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_919 + 1.0))) + _924) * _846;
        float _934 = _814 * 0.5;
        float _935 = _824 * 0.5;
        float _936 = _834 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_518, _519, _520), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_847 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3588 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_961 + 1.0))) + _966) * _847;
        _983 = _814;
        _985 = _813;
        _986 = _812;
        _987 = _824;
        _988 = _823;
        _989 = _822;
        _990 = _834;
        _991 = _833;
        _992 = _832;
        _993 = _847;
        _994 = _846;
        _995 = _845;
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)));
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _998 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
    }
    else
    {
        _983 = _984;
        _985 = _984;
        _986 = _984;
        _987 = _984;
        _988 = _984;
        _989 = _984;
        _990 = _984;
        _991 = _984;
        _992 = _984;
        _993 = _984;
        _994 = _984;
        _995 = _984;
        _996 = 0.0;
        _997 = 0.0;
        _998 = 0.0;
    }
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1024 = fma(_681, cbModelParam._m0[30u].z, fma(_677, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _673));
        float _1028 = fma(_681, cbModelParam._m0[31u].z, fma(_677, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _673));
        float _1032 = fma(_681, cbModelParam._m0[32u].z, fma(_677, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _673));
        float _1055 = _673 + _518;
        float _1056 = _677 + _519;
        float _1057 = _681 + _520;
        float _1067 = fma(_1057, cbModelParam._m0[30u].z, fma(_1056, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1055)) - _1024;
        float _1068 = fma(_1057, cbModelParam._m0[31u].z, fma(_1056, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1055)) - _1028;
        float _1069 = fma(_1057, cbModelParam._m0[32u].z, fma(_1056, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1055)) - _1032;
        float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
        float _1086 = ((_1073 * _1067) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1024 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1073 * _1068) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1028 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1073 * _1069) / cbModelParam._m0[35u].z) + ((((((_1032 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        float _1123 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1090.x + (-0.5));
        float _1125 = _1123 * (_1090.y + (-0.5));
        float _1126 = _1123 * (_1090.z + (-0.5));
        float _1133 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1097.x + (-0.5));
        float _1135 = _1133 * (_1097.y + (-0.5));
        float _1136 = _1133 * (_1097.z + (-0.5));
        float _1143 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1104.x + (-0.5));
        float _1145 = _1143 * (_1104.y + (-0.5));
        float _1146 = _1143 * (_1104.z + (-0.5));
        float _1153 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1111.x + (-0.5));
        float _1155 = _1153 * (_1111.y + (-0.5));
        float _1156 = _1153 * (_1111.z + (-0.5));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = _1124 * 0.5;
        float _1161 = _1134 * 0.5;
        float _1162 = _1144 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_518, _519, _520), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3651 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1187 + 1.0))) + _1192) * _1157;
        float _1202 = _1125 * 0.5;
        float _1203 = _1135 * 0.5;
        float _1204 = _1145 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_518, _519, _520), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3684 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1229 + 1.0))) + _1234) * _1158;
        float _1244 = _1126 * 0.5;
        float _1245 = _1136 * 0.5;
        float _1246 = _1146 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_518, _519, _520), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3717 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1271 + 1.0))) + _1276) * _1159;
        _1293 = _1126;
        _1294 = _1125;
        _1295 = _1124;
        _1296 = _1136;
        _1297 = _1135;
        _1298 = _1134;
        _1299 = _1146;
        _1300 = _1145;
        _1301 = _1144;
        _1302 = _1159;
        _1303 = _1158;
        _1304 = _1157;
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1306 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
    }
    else
    {
        _1293 = _984;
        _1294 = _984;
        _1295 = _984;
        _1296 = _984;
        _1297 = _984;
        _1298 = _984;
        _1299 = _984;
        _1300 = _984;
        _1301 = _984;
        _1302 = _984;
        _1303 = _984;
        _1304 = _984;
        _1305 = 0.0;
        _1306 = 0.0;
        _1307 = 0.0;
    }
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _996)) + _996;
    float _1318 = (cbModelParam._m0[1u].x * (_1306 - _997)) + _997;
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _998)) + _998;
    float _1340 = fma(_1319, cbSceneParam._m0[89u].z, fma(_1318, cbSceneParam._m0[89u].y, _1317 * cbSceneParam._m0[89u].x));
    float _1343 = fma(_1319, cbSceneParam._m0[90u].z, fma(_1318, cbSceneParam._m0[90u].y, _1317 * cbSceneParam._m0[90u].x));
    float _1346 = fma(_1319, cbSceneParam._m0[91u].z, fma(_1318, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1317));
    float _1361 = _620 * 0.5;
    float _1362 = _621 * 0.5;
    float _1363 = _622 * 0.5;
    float _1364 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1367 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1294, _1297, _1300, _1303));
    float _1370 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1404;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1377 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_983, _987, _990, _993));
        float _1381 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_985, _988, _991, _994));
        float _1385 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_986, _989, _992, _995));
        float _1392 = dot(vec4(cbModelParam._m0[39u]), vec4(_1361, _1362, _1363, 1.0));
        _1404 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1392) ? 0.0 : (isnan(0.0) ? _1392 : max(0.0, _1392))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1404 = 1.0;
    }
    float _1415;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1406 = dot(vec4(cbModelParam._m0[40u]), vec4(_1361, _1362, _1363, 1.0));
        _1415 = dot(vec3(isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1415 = 1.0;
    }
    float _1419 = (_1415 * cbModelParam._m0[1u].x) + (_1404 * (1.0 - cbModelParam._m0[1u].x));
    float _1429 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _522);
    float _1430 = isnan(_1429) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1429 : min(cbModelParam._m0[25u].z, _1429));
    float _1510;
    float _1512;
    float _1514;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1477 = fma(_681, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673)) + cbModelParam._m0[13u].w;
        float _1481 = fma(_681, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673)) + cbModelParam._m0[14u].w;
        float _1485 = fma(_681, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673)) + cbModelParam._m0[15u].w;
        float _1488 = fma(_622, cbModelParam._m0[13u].z, fma(_621, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _620));
        float _1491 = fma(_622, cbModelParam._m0[14u].z, fma(_621, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _620));
        float _1494 = fma(_622, cbModelParam._m0[15u].z, fma(_621, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _620));
        float _1522;
        if (_1488 > 0.0)
        {
            _1522 = abs((1.0 - _1477) / _1488);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1477 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1522 = frontier_phi_16_14_ladder;
        }
        float _1747;
        if (_1491 > 0.0)
        {
            _1747 = abs((1.0 - _1481) / _1491);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1481 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1747 = frontier_phi_25_21_ladder;
        }
        float _1993;
        if (_1494 > 0.0)
        {
            _1993 = abs((1.0 - _1485) / _1494);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1485 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1993 = frontier_phi_37_32_ladder;
        }
        float _1995 = isnan(_1747) ? _1522 : (isnan(_1522) ? _1747 : min(_1522, _1747));
        float _1996 = isnan(_1993) ? _1995 : (isnan(_1995) ? _1993 : min(_1995, _1993));
        float _2000 = (_1996 * _1488) + _1477;
        float _2001 = (_1996 * _1491) + _1481;
        float _2002 = (_1996 * _1494) + _1485;
        float _2003 = _1996 * 9.9999997473787516355514526367188e-05;
        float _2005 = (-1.0) - _2003;
        float _2007 = _2003 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2002 > _2007) || ((_2002 < _2005) || ((_2001 > _2007) || ((_2001 < _2005) || ((_2000 < _2005) || (_2000 > _2007))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2126 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2002, cbModelParam._m0[9u].z, fma(_2001, cbModelParam._m0[9u].y, _2000 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2002, cbModelParam._m0[10u].z, fma(_2001, cbModelParam._m0[10u].y, _2000 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2002, cbModelParam._m0[11u].z, fma(_2001, cbModelParam._m0[11u].y, _2000 * cbModelParam._m0[11u].x))), _1430);
            frontier_phi_15_37_ladder = _2126.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2126.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2126.x * cbModelParam._m0[1u].y;
        }
        _1510 = frontier_phi_15_37_ladder_2;
        _1512 = frontier_phi_15_37_ladder_1;
        _1514 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_620, _621, _622), _1430);
        _1510 = _1498.x * cbModelParam._m0[1u].y;
        _1512 = _1498.y * cbModelParam._m0[1u].y;
        _1514 = _1498.z * cbModelParam._m0[1u].y;
    }
    float _1518 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _522);
    float _1519 = isnan(_1518) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1518 : min(cbModelParam._m0[25u].w, _1518));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1575 = fma(_681, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673)) + cbModelParam._m0[21u].w;
        float _1579 = fma(_681, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673)) + cbModelParam._m0[22u].w;
        float _1583 = fma(_681, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673)) + cbModelParam._m0[23u].w;
        float _1586 = fma(_622, cbModelParam._m0[21u].z, fma(_621, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _620));
        float _1589 = fma(_622, cbModelParam._m0[22u].z, fma(_621, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _620));
        float _1592 = fma(_622, cbModelParam._m0[23u].z, fma(_621, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _620));
        float _1752;
        if (_1586 > 0.0)
        {
            _1752 = abs((1.0 - _1575) / _1586);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1575 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1752 = frontier_phi_27_23_ladder;
        }
        float _2020;
        if (_1589 > 0.0)
        {
            _2020 = abs((1.0 - _1579) / _1589);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1579 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2020 = frontier_phi_39_34_ladder;
        }
        float _2225;
        if (_1592 > 0.0)
        {
            _2225 = abs((1.0 - _1583) / _1592);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1583 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2225 = frontier_phi_48_45_ladder;
        }
        float _2227 = isnan(_2020) ? _1752 : (isnan(_1752) ? _2020 : min(_1752, _2020));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1586) + _1575;
        float _2233 = (_2228 * _1589) + _1579;
        float _2234 = (_2228 * _1592) + _1583;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2236 = (-1.0) - _2235;
        float _2238 = _2235 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2234 > _2238) || ((_2234 < _2236) || ((_2233 > _2238) || ((_2233 < _2236) || ((_2232 < _2236) || (_2232 > _2238))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2463 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2234, cbModelParam._m0[17u].z, fma(_2233, cbModelParam._m0[17u].y, _2232 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2234, cbModelParam._m0[18u].z, fma(_2233, cbModelParam._m0[18u].y, _2232 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2234, cbModelParam._m0[19u].z, fma(_2233, cbModelParam._m0[19u].y, _2232 * cbModelParam._m0[19u].x))), _1519);
            frontier_phi_24_48_ladder = _2463.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2463.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2463.x * cbModelParam._m0[1u].z;
        }
        _1611 = frontier_phi_24_48_ladder_2;
        _1613 = frontier_phi_24_48_ladder_1;
        _1615 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_620, _621, _622), _1519);
        _1611 = _1595.x * cbModelParam._m0[1u].z;
        _1613 = _1595.y * cbModelParam._m0[1u].z;
        _1615 = _1595.z * cbModelParam._m0[1u].z;
    }
    float _1627 = ((((1.0 - _641) * ((_628 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_641 * _628)) * _612;
    float _1628 = _1627 * ((cbModelParam._m0[1u].w * (_1611 - _1510)) + _1510);
    float _1629 = _1627 * ((cbModelParam._m0[1u].w * (_1613 - _1512)) + _1512);
    float _1630 = _1627 * ((cbModelParam._m0[1u].w * (_1615 - _1514)) + _1514);
    float _1633 = fma(_1630, cbSceneParam._m0[89u].z, fma(_1629, cbSceneParam._m0[89u].y, _1628 * cbSceneParam._m0[89u].x));
    float _1636 = fma(_1630, cbSceneParam._m0[90u].z, fma(_1629, cbSceneParam._m0[90u].y, _1628 * cbSceneParam._m0[90u].x));
    float _1639 = fma(_1630, cbSceneParam._m0[91u].z, fma(_1629, cbSceneParam._m0[91u].y, _1628 * cbSceneParam._m0[91u].x));
    vec4 _1647 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_547, _548));
    float _1649 = _1647.w;
    float _1661 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1649);
    float _1662 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1649);
    float _1663 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1649);
    uvec4 _1667 = floatBitsToUint(cbInstanceData._m0[_587 + 5u]);
    uint _1669 = _1667.x * 14u;
    uint _1670 = _1669 + 13u;
    float _1677 = _612 + (-1.0);
    float _1682 = (cbLight._m0[_1670].x * _1677) + 1.0;
    float _1683 = (cbLight._m0[_1670].y * _1677) + 1.0;
    float _1684 = (cbLight._m0[_1670].z * _1677) + 1.0;
    float _1685 = (cbLight._m0[_1670].w * _1677) + 1.0;
    uint _1686 = _1669 + 5u;
    float _1692 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
    uint _1696 = _1669 + 4u;
    float _1706 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
    uint _1710 = _1669 | 1u;
    float _1721 = dot(vec3(cbLight._m0[_1669].xyz), vec3(_518, _519, _520));
    float _1724 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_518, _519, _520));
    float _3853 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _3864 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1729 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * 0.3183098733425140380859375;
    float _1731 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.3183098733425140380859375;
    float _1738 = ((cbLight._m0[_1686].x * _1692) * _1731) + (((cbLight._m0[_1696].x * _1661) * _1706) * _1729);
    float _1739 = ((_1692 * cbLight._m0[_1686].y) * _1731) + (((cbLight._m0[_1696].y * _1662) * _1706) * _1729);
    float _1740 = ((_1692 * cbLight._m0[_1686].z) * _1731) + (((cbLight._m0[_1696].z * _1663) * _1706) * _1729);
    uvec4 _1744 = floatBitsToUint(cbLight._m0[_1669 + 12u]);
    bool _1746 = _1744.x == 0u;
    float _1757;
    float _1759;
    float _1761;
    if (_1746)
    {
        _1757 = _1738;
        _1759 = _1739;
        _1761 = _1740;
    }
    else
    {
        uint _1765 = _1669 + 6u;
        float _1781 = (dot(vec3(cbLight._m0[_1669 + 2u].xyz), vec3(_518, _519, _520)) * 0.5) + 0.5;
        float _1782 = _1781 * _1781;
        float _3875 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1784 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _1757 = (((cbLight._m0[_1765].x * 0.3183098733425140380859375) * _1783) * _1784) + _1738;
        _1759 = (((cbLight._m0[_1765].y * 0.3183098733425140380859375) * _1783) * _1784) + _1739;
        _1761 = (((cbLight._m0[_1765].z * 0.3183098733425140380859375) * _1783) * _1784) + _1740;
    }
    bool _1764 = _1744.y == 0u;
    float _1802;
    float _1804;
    float _1806;
    if (_1764)
    {
        _1802 = _1757;
        _1804 = _1759;
        _1806 = _1761;
    }
    else
    {
        uint _1964 = _1669 + 7u;
        float _1980 = (dot(vec3(cbLight._m0[_1669 + 3u].xyz), vec3(_518, _519, _520)) * 0.5) + 0.5;
        float _1981 = _1980 * _1980;
        float _3891 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1982 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1983 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
        _1802 = (((cbLight._m0[_1964].x * 0.3183098733425140380859375) * _1982) * _1983) + _1757;
        _1804 = (((cbLight._m0[_1964].y * 0.3183098733425140380859375) * _1982) * _1983) + _1759;
        _1806 = (((cbLight._m0[_1964].z * 0.3183098733425140380859375) * _1982) * _1983) + _1761;
    }
    uint _1809 = _1669 + 8u;
    float _1822 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1669].w)) * _522) * 0.949999988079071044921875);
    float _1823 = _1822 * _1822;
    float _1824 = cbLight._m0[_1669].x + _378;
    float _1825 = cbLight._m0[_1669].y + _379;
    float _1826 = cbLight._m0[_1669].z + _380;
    float _1830 = inversesqrt(dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826)));
    float _1831 = _1830 * _1824;
    float _1832 = _1830 * _1825;
    float _1833 = _1830 * _1826;
    float _1834 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1669].xyz));
    float _3907 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1837 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _1838 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1839 = dot(vec3(_518, _519, _520), vec3(_1831, _1832, _1833));
    float _3929 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1842 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1843 = dot(vec3(cbLight._m0[_1669].xyz), vec3(_1831, _1832, _1833));
    float _3940 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1847 = _1823 * _1823;
    float _1851 = ((_1842 * _1842) * (_1847 + (-1.0))) + 1.0;
    float _1862 = (exp2(log2(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1863 = 1.0 - _1823;
    float _1874 = (0.5 / (((_1838 * ((_1837 * _1863) + _1823)) + 9.9999999392252902907785028219223e-09) + (((_1838 * _1863) + _1823) * _1837))) * _1837;
    float _3951 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1876 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1847 / ((_1851 * _1851) * 3.141590118408203125));
    uint _1890 = _1669 + 9u;
    float _1901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1710].w)) * _522) * 0.949999988079071044921875);
    float _1902 = _1901 * _1901;
    float _1903 = cbLight._m0[_1710].x + _378;
    float _1904 = cbLight._m0[_1710].y + _379;
    float _1905 = cbLight._m0[_1710].z + _380;
    float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
    float _1910 = _1909 * _1903;
    float _1911 = _1909 * _1904;
    float _1912 = _1909 * _1905;
    float _1913 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1710].xyz));
    float _3962 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1917 = dot(vec3(_518, _519, _520), vec3(_1910, _1911, _1912));
    float _3973 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1921 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1910, _1911, _1912));
    float _3984 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1925 = _1902 * _1902;
    float _1929 = ((_1920 * _1920) * (_1925 + (-1.0))) + 1.0;
    float _1938 = (exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1939 = 1.0 - _1902;
    float _1949 = (0.5 / (((_1838 * ((_1916 * _1939) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1838 * _1939) + _1902) * _1916))) * _1916;
    float _3995 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1951 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1925 / ((_1929 * _1929) * 3.141590118408203125));
    float _1961 = (((_1938 * cbLight._m0[_1890].x) * _1951) * _1692) + ((((cbLight._m0[_1809].x * _1661) * _1862) * _1876) * _1706);
    float _1962 = (((_1938 * cbLight._m0[_1890].y) * _1951) * _1692) + ((((cbLight._m0[_1809].y * _1662) * _1862) * _1876) * _1706);
    float _1963 = (((_1938 * cbLight._m0[_1890].z) * _1951) * _1692) + ((((cbLight._m0[_1809].z * _1663) * _1862) * _1876) * _1706);
    float _2025;
    float _2027;
    float _2029;
    if (_1746)
    {
        _2025 = _1961;
        _2027 = _1962;
        _2029 = _1963;
    }
    else
    {
        uint _2031 = _1669 + 2u;
        uint _2035 = _1669 + 10u;
        float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _522) * 0.949999988079071044921875);
        float _2050 = _2049 * _2049;
        float _2051 = cbLight._m0[_2031].x + _378;
        float _2052 = cbLight._m0[_2031].y + _379;
        float _2053 = cbLight._m0[_2031].z + _380;
        float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
        float _2058 = _2057 * _2051;
        float _2059 = _2057 * _2052;
        float _2060 = _2057 * _2053;
        float _2061 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2031].xyz));
        float _4006 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2064 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2065 = dot(vec3(_518, _519, _520), vec3(_2058, _2059, _2060));
        float _4017 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2068 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2069 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2058, _2059, _2060));
        float _4028 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2073 = _2050 * _2050;
        float _2077 = ((_2068 * _2068) * (_2073 + (-1.0))) + 1.0;
        float _2086 = (exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2087 = 1.0 - _2050;
        float _2097 = (0.5 / (((_1838 * ((_2064 * _2087) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_1838 * _2087) + _2050) * _2064))) * _2064;
        float _4039 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2099 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_2073 / ((_2077 * _2077) * 3.141590118408203125));
        float _2100 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _2025 = (((_2086 * cbLight._m0[_2035].x) * _2099) * _2100) + _1961;
        _2027 = (((_2086 * cbLight._m0[_2035].y) * _2099) * _2100) + _1962;
        _2029 = (((_2086 * cbLight._m0[_2035].z) * _2099) * _2100) + _1963;
    }
    float _2135;
    float _2137;
    float _2139;
    if (_1764)
    {
        _2135 = _2025;
        _2137 = _2027;
        _2139 = _2029;
    }
    else
    {
        uint _2146 = _1669 + 3u;
        uint _2150 = _1669 + 11u;
        float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _522) * 0.949999988079071044921875);
        float _2165 = _2164 * _2164;
        float _2166 = cbLight._m0[_2146].x + _378;
        float _2167 = cbLight._m0[_2146].y + _379;
        float _2168 = cbLight._m0[_2146].z + _380;
        float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
        float _2173 = _2172 * _2166;
        float _2174 = _2172 * _2167;
        float _2175 = _2172 * _2168;
        float _2176 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2146].xyz));
        float _4055 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2180 = dot(vec3(_518, _519, _520), vec3(_2173, _2174, _2175));
        float _4066 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2183 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2184 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2173, _2174, _2175));
        float _4077 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2188 = _2165 * _2165;
        float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
        float _2201 = (exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2202 = 1.0 - _2165;
        float _2212 = (0.5 / (((_1838 * ((_2179 * _2202) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_1838 * _2202) + _2165) * _2179))) * _2179;
        float _4088 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2214 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
        float _2215 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
        _2135 = (((_2201 * cbLight._m0[_2150].x) * _2214) * _2215) + _2025;
        _2137 = (((_2201 * cbLight._m0[_2150].y) * _2214) * _2215) + _2027;
        _2139 = (((_2201 * cbLight._m0[_2150].z) * _2214) * _2215) + _2029;
    }
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    if (_1667.y == 0u)
    {
        float _2290 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2291 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2290;
        float _2292 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2290;
        float _2293 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2290;
        uvec4 _2305 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2306 = _2305.x;
        uint _2317 = uint((float(_2305.y) * floor(float(uint(cbSceneParam._m0[85u].y * _548) / _2306))) + floor(float(uint(cbSceneParam._m0[85u].x * _547) / _2306)));
        float _2327 = (log2(_2293 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2328 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        uint _2331 = uint(isnan(14.0) ? _2328 : (isnan(_2328) ? 14.0 : min(_2328, 14.0)));
        uvec4 _2336 = texelFetch(g_lightClusterGridBuffer, int(((_2331 << 2u) + (_2317 << 6u)) >> 2u));
        uint _2337 = _2336.x;
        uint _2338 = _2305.z;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        if (((((1u << ((_2338 >> 4u) & 15u)) + 4294967295u) & _2337) == 0u) || ((_2338 & 240u) == 0u))
        {
            _2468 = 0.0;
            _2470 = 0.0;
            _2472 = 0.0;
            _2474 = 0.0;
            _2476 = 0.0;
            _2478 = 0.0;
        }
        else
        {
            float _2469;
            float _2471;
            float _2473;
            float _2475;
            float _2477;
            float _2479;
            float _2621 = 0.0;
            float _2622 = 0.0;
            float _2623 = 0.0;
            float _2624 = 0.0;
            float _2625 = 0.0;
            float _2626 = 0.0;
            uint _2627 = 0u;
            uint _2636;
            bool _2637;
            for (;;)
            {
                _2636 = texelFetch(g_lightClassification, int((((_2331 << 5u) + (_2317 << 9u)) + (_2627 << 2u)) >> 2u)).x;
                _2637 = _2636 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2637)
                {
                    frontier_phi_63_pred = _2626;
                    frontier_phi_63_pred_1 = _2625;
                    frontier_phi_63_pred_2 = _2624;
                    frontier_phi_63_pred_3 = _2623;
                    frontier_phi_63_pred_4 = _2622;
                    frontier_phi_63_pred_5 = _2621;
                }
                else
                {
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    uint _2751;
                    _2745 = _2621;
                    _2746 = _2622;
                    _2747 = _2623;
                    _2748 = _2624;
                    _2749 = _2625;
                    _2750 = _2626;
                    _2751 = _2636;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    for (;;)
                    {
                        uint _2755 = uint(findLSB(_2751)) + (_2627 << 5u);
                        uint _2752 = (_2751 + 4294967295u) & _2751;
                        uint _2757 = _2755 * 48u;
                        vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 3u)).x));
                        uint _2777 = (_2755 * 48u) + 4u;
                        vec4 _2790 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 3u)).x));
                        uint _2796 = (_2755 * 48u) + 8u;
                        vec3 _2807 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2796)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 2u)).x));
                        float _2811 = _2771.x - _2291;
                        float _2812 = _2771.y - _2292;
                        float _2813 = _2771.z - _2293;
                        float _2814 = dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813));
                        float _2817 = inversesqrt(_2814);
                        float _2818 = _2817 * _2811;
                        float _2819 = _2817 * _2812;
                        float _2820 = _2817 * _2813;
                        float _2821 = dot(vec3(_568, _571, _574), vec3(_2818, _2819, _2820));
                        float _2826 = 1.0 - (_2814 * _2771.w);
                        float _4114 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2827 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                        float _2828 = sqrt(_2814) * _2790.w;
                        float _2831 = 1.39999997615814208984375 / (_2828 + 1.39999997615814208984375);
                        float _2832 = _2831 * _2831;
                        float _2835 = ((1.0 - _2832) * _2821) + _2832;
                        float _2838 = _2828 * _2828;
                        float _2842 = ((isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))) * _2827) / ((_2838 * 0.699999988079071044921875) + 1.0);
                        float _2846 = (-0.0) - _2291;
                        float _2847 = (-0.0) - _2292;
                        float _2848 = (-0.0) - _2293;
                        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
                        float _2853 = _2852 * _2846;
                        float _2854 = _2852 * _2847;
                        float _2855 = _2852 * _2848;
                        float _2863 = exp2(log2(1.0 / ((_2838 * 3.5) + 5.0)) * 0.25);
                        float _2864 = 1.0 - _628;
                        float _2871 = sqrt(1.0 - ((1.0 - (_2864 * _2864)) * (1.0 - (_2863 * _2863))));
                        float _2872 = _2871 * _2871;
                        float _2873 = _2872 * _2872;
                        float _2874 = _2853 + _2818;
                        float _2875 = _2854 + _2819;
                        float _2876 = _2855 + _2820;
                        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
                        float _2884 = dot(vec3(_568, _571, _574), vec3(_2853, _2854, _2855));
                        float _4130 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2887 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _2888 = dot(vec3(_568, _571, _574), vec3(_2880 * _2874, _2880 * _2875, _2880 * _2876));
                        float _4141 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2891 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2895 = ((_2891 * _2891) * (_2873 + (-1.0))) + 1.0;
                        float _2896 = _2831 * _2872;
                        float _2897 = _2896 * _2896;
                        float _2900 = ((1.0 - _2897) * _2821) + _2897;
                        float _4152 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2901 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2902 = 1.0 - _2872;
                        float _2912 = (0.5 / (((_2901 * ((_2887 * _2902) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2901 * _2902) + _2872) * _2887))) * _2901;
                        float _4163 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2923 = (((_2873 * 3.1415927410125732421875) * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) / ((_2895 * _2895) * ((_2838 * 2.1991131305694580078125) + 3.141590118408203125))) * _2827;
                        _2680 = (_2842 * _2790.x) + _2748;
                        _2681 = (_2842 * _2790.y) + _2749;
                        _2682 = (_2842 * _2790.z) + _2750;
                        _2677 = (_2923 * _2807.x) + _2745;
                        _2678 = (_2923 * _2807.y) + _2746;
                        _2679 = (_2923 * _2807.z) + _2747;
                        if (_2752 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2745 = _2677;
                            _2746 = _2678;
                            _2747 = _2679;
                            _2748 = _2680;
                            _2749 = _2681;
                            _2750 = _2682;
                            _2751 = _2752;
                        }
                    }
                    frontier_phi_63_pred = _2682;
                    frontier_phi_63_pred_1 = _2681;
                    frontier_phi_63_pred_2 = _2680;
                    frontier_phi_63_pred_3 = _2679;
                    frontier_phi_63_pred_4 = _2678;
                    frontier_phi_63_pred_5 = _2677;
                }
                _2479 = frontier_phi_63_pred;
                _2477 = frontier_phi_63_pred_1;
                _2475 = frontier_phi_63_pred_2;
                _2473 = frontier_phi_63_pred_3;
                _2471 = frontier_phi_63_pred_4;
                _2469 = frontier_phi_63_pred_5;
                uint _2628 = _2627 + 1u;
                if (_2628 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2621 = _2469;
                    _2622 = _2471;
                    _2623 = _2473;
                    _2624 = _2475;
                    _2625 = _2477;
                    _2626 = _2479;
                    _2627 = _2628;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2468 = _2469;
            _2470 = _2471;
            _2472 = _2473;
            _2474 = _2475;
            _2476 = _2477;
            _2478 = _2479;
        }
        uvec4 _2482 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2483 = _2482.z;
        uint _2485 = (_2483 >> 8u) & 15u;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        if (((4294967295u << _2485) & _2337) == 0u)
        {
            _2589 = _2468;
            _2591 = _2470;
            _2593 = _2472;
            _2595 = _2474;
            _2597 = _2476;
            _2599 = _2478;
        }
        else
        {
            float _2614 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
            float _2615 = _2614 * _2291;
            float _2616 = _2614 * _2292;
            float _2617 = _2614 * _2293;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2485 < ((_2483 >> 12u) & 15u))
            {
                float _2590;
                float _2592;
                float _2594;
                float _2596;
                float _2598;
                float _2600;
                float _2728 = _2468;
                float _2729 = _2470;
                float _2730 = _2472;
                float _2731 = _2474;
                float _2732 = _2476;
                float _2733 = _2478;
                uint _2734 = _2485;
                uint _2743;
                bool _2744;
                for (;;)
                {
                    _2743 = texelFetch(g_lightClassification, int((((_2331 << 5u) + (_2317 << 9u)) + (_2734 << 2u)) >> 2u)).x;
                    _2744 = _2743 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2744)
                    {
                        frontier_phi_69_pred = _2733;
                        frontier_phi_69_pred_1 = _2732;
                        frontier_phi_69_pred_2 = _2731;
                        frontier_phi_69_pred_3 = _2730;
                        frontier_phi_69_pred_4 = _2729;
                        frontier_phi_69_pred_5 = _2728;
                    }
                    else
                    {
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2931;
                        float _2932;
                        float _2933;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _2941 = _2728;
                        float _2942 = _2729;
                        float _2943 = _2730;
                        float _2944 = _2731;
                        float _2945 = _2732;
                        float _2946 = _2733;
                        uint _2947 = _2743;
                        uint _2948;
                        vec4 _2973;
                        float _2974;
                        vec4 _2989;
                        vec3 _3001;
                        vec4 _3016;
                        vec4 _3032;
                        float _3079;
                        bool _3080;
                        for (;;)
                        {
                            uint _2958 = ((_2734 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2947));
                            _2948 = (_2947 + 4294967295u) & _2947;
                            uint _2960 = _2958 * 40u;
                            _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            _2974 = _2973.w;
                            uint _2976 = (_2958 * 40u) + 4u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2991 = (_2958 * 40u) + 8u;
                            _3001 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x));
                            uint _3003 = (_2958 * 40u) + 16u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3019 = (_2958 * 40u) + 20u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3035 = (_2958 * 40u) + 24u;
                            vec4 _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3054 = (_2958 * 40u) + 28u;
                            vec4 _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            _3079 = fma(_2293, _3067.z, fma(_2292, _3067.y, _3067.x * _2291)) + _3067.w;
                            _3080 = !((fma(_2293, _3048.z, fma(_2292, _3048.y, _3048.x * _2291)) + _3048.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3080)
                            {
                                float _3107 = _2973.x - _2291;
                                float _3108 = _2973.y - _2292;
                                float _3109 = _2973.z - _2293;
                                float _3110 = dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109));
                                float _3113 = inversesqrt(_3110);
                                float _3114 = _3113 * _3107;
                                float _3115 = _3113 * _3108;
                                float _3116 = _3113 * _3109;
                                float _3120 = 1.0 - (_3110 / (_2974 * _2974));
                                float _4174 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3125 = sqrt(_3110) * _2989.w;
                                float _3127 = 1.39999997615814208984375 / (_3125 + 1.39999997615814208984375);
                                float _3128 = _3127 * _3127;
                                float _3131 = ((1.0 - _3128) * dot(vec3(_3114, _3115, _3116), vec3(_568, _571, _574))) + _3128;
                                float _3134 = _3125 * _3125;
                                float _3138 = (fma(_2293, _3016.z, fma(_2292, _3016.y, _3016.x * _2291)) + _3016.w) / _3079;
                                float _3139 = (fma(_2293, _3032.z, fma(_2292, _3032.y, _3032.x * _2291)) + _3032.w) / _3079;
                                float _3143 = 1.0 - dot(vec2(_3138, _3139), vec2(_3138, _3139));
                                float _4190 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3145 = _3144 * (((isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0))) * _3121) / ((_3134 * 0.699999988079071044921875) + 1.0));
                                float _3157 = exp2(log2(1.0 / ((_3134 * 3.5) + 5.0)) * 0.25);
                                float _3158 = 1.0 - _628;
                                float _3165 = sqrt(1.0 - ((1.0 - (_3158 * _3158)) * (1.0 - (_3157 * _3157))));
                                float _3166 = _3165 * _3165;
                                float _3167 = _3166 * _3166;
                                float _3168 = _3114 - _2615;
                                float _3169 = _3115 - _2616;
                                float _3170 = _3116 - _2617;
                                float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                                float _3178 = dot(vec3(_568, _571, _574), vec3((-0.0) - _2615, (-0.0) - _2616, (-0.0) - _2617));
                                float _4201 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3181 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3182 = dot(vec3(_568, _571, _574), vec3(_3174 * _3168, _3174 * _3169, _3174 * _3170));
                                float _4212 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3185 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3189 = ((_3185 * _3185) * (_3167 + (-1.0))) + 1.0;
                                float _3190 = _3127 * _3166;
                                float _3191 = _3190 * _3190;
                                float _3197 = ((1.0 - _3191) * dot(vec3(_568, _571, _574), vec3(_3114, _3115, _3116))) + _3191;
                                float _4223 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3198 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3199 = 1.0 - _3166;
                                float _3209 = (0.5 / (((_3198 * ((_3181 * _3199) + _3166)) + 9.9999999392252902907785028219223e-09) + (((_3198 * _3199) + _3166) * _3181))) * _3198;
                                float _4234 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3219 = (_3144 * _3121) * (((_3167 * 3.1415927410125732421875) * (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) / ((_3189 * _3189) * ((_3134 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3145 * _2989.z;
                                frontier_phi_75_pred_1 = _3145 * _2989.y;
                                frontier_phi_75_pred_2 = _3145 * _2989.x;
                                frontier_phi_75_pred_3 = _3219 * _3001.z;
                                frontier_phi_75_pred_4 = _3219 * _3001.y;
                                frontier_phi_75_pred_5 = _3219 * _3001.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3228 = frontier_phi_75_pred;
                            _3227 = frontier_phi_75_pred_1;
                            _3226 = frontier_phi_75_pred_2;
                            _3225 = frontier_phi_75_pred_3;
                            _3224 = frontier_phi_75_pred_4;
                            _3223 = frontier_phi_75_pred_5;
                            _2931 = _3226 + _2944;
                            _2932 = _3227 + _2945;
                            _2933 = _3228 + _2946;
                            _2928 = _3223 + _2941;
                            _2929 = _3224 + _2942;
                            _2930 = _3225 + _2943;
                            if (_2948 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2931;
                                _2945 = _2932;
                                _2946 = _2933;
                                _2947 = _2948;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2933;
                        frontier_phi_69_pred_1 = _2932;
                        frontier_phi_69_pred_2 = _2931;
                        frontier_phi_69_pred_3 = _2930;
                        frontier_phi_69_pred_4 = _2929;
                        frontier_phi_69_pred_5 = _2928;
                    }
                    _2600 = frontier_phi_69_pred;
                    _2598 = frontier_phi_69_pred_1;
                    _2596 = frontier_phi_69_pred_2;
                    _2594 = frontier_phi_69_pred_3;
                    _2592 = frontier_phi_69_pred_4;
                    _2590 = frontier_phi_69_pred_5;
                    uint _2735 = _2734 + 1u;
                    if (_2735 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2728 = _2590;
                        _2729 = _2592;
                        _2730 = _2594;
                        _2731 = _2596;
                        _2732 = _2598;
                        _2733 = _2600;
                        _2734 = _2735;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2600;
                frontier_phi_57_58_ladder_1 = _2598;
                frontier_phi_57_58_ladder_2 = _2596;
                frontier_phi_57_58_ladder_3 = _2594;
                frontier_phi_57_58_ladder_4 = _2592;
                frontier_phi_57_58_ladder_5 = _2590;
            }
            else
            {
                frontier_phi_57_58_ladder = _2478;
                frontier_phi_57_58_ladder_1 = _2476;
                frontier_phi_57_58_ladder_2 = _2474;
                frontier_phi_57_58_ladder_3 = _2472;
                frontier_phi_57_58_ladder_4 = _2470;
                frontier_phi_57_58_ladder_5 = _2468;
            }
            _2589 = frontier_phi_57_58_ladder_5;
            _2591 = frontier_phi_57_58_ladder_4;
            _2593 = frontier_phi_57_58_ladder_3;
            _2595 = frontier_phi_57_58_ladder_2;
            _2597 = frontier_phi_57_58_ladder_1;
            _2599 = frontier_phi_57_58_ladder;
        }
        float _2604 = isnan(1.0) ? _612 : (isnan(_612) ? 1.0 : min(_612, 1.0));
        _2349 = (_2604 * _2595) + _1802;
        _2351 = (_2604 * _2597) + _1804;
        _2353 = (_2604 * _2599) + _1806;
        _2355 = ((_2589 * 0.039999999105930328369140625) * _2604) + _2135;
        _2357 = ((_2591 * 0.039999999105930328369140625) * _2604) + _2137;
        _2359 = ((_2593 * 0.039999999105930328369140625) * _2604) + _2139;
    }
    else
    {
        _2349 = _1802;
        _2351 = _1804;
        _2353 = _1806;
        _2355 = _2135;
        _2357 = _2137;
        _2359 = _2139;
    }
    uint _2365 = _588 + uint(cbMatDynParam._m0[0u].w);
    float _2371 = (((((_420.x * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _391)) + (_454.x * cbMtdParam._m0[12u].x)) + (_485.x * cbMtdParam._m0[13u].x)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2365].x;
    float _2372 = (((((_420.y * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _391)) + (_454.y * cbMtdParam._m0[12u].y)) + (_485.y * cbMtdParam._m0[13u].y)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2365].y;
    float _2373 = (((((_420.z * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _391)) + (_454.z * cbMtdParam._m0[12u].z)) + (_485.z * cbMtdParam._m0[13u].z)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2365].z;
    float _4250 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4261 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4272 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4283 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _2391 = (((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2349 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _612))) + ((_2355 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1419)) * cbPerFrame._m0[3u].x)) + _2371;
    float _2393 = (_2372 + ((_2357 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1419)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2351 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _612)));
    float _2395 = (_2373 + ((_2359 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _1419)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2353 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _612)));
    float _4309 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2408 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2413 = cbInstanceData._m0[_587 + 6u].w * (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)));
    float _2418 = _547 / cbSceneParam._m0[86u].x;
    float _2419 = _548 / cbSceneParam._m0[86u].y;
    vec4 _2433 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2418, _2419, (log2((isnan(cbSceneParam._m0[77u].w) ? _541 : (isnan(_541) ? cbSceneParam._m0[77u].w : min(_541, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2435 = _2433.x;
    float _2436 = _2433.y;
    float _2437 = _2433.z;
    float _2438 = _2433.w;
    float _2530;
    float _2532;
    float _2534;
    float _2536;
    if (_541 > cbSceneParam._m0[78u].w)
    {
        float _2493 = isnan(_541) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _541 : min(cbSceneParam._m0[80u].w, _541));
        float _2494 = _2493 / _541;
        float _2505 = _2494 * _276;
        float _2506 = _277 * _2494;
        float _2507 = (-0.0) - _2506;
        float _2508 = _2494 * _278;
        float _2510 = (cbSceneParam._m0[77u].w * _2507) / _2493;
        float _2511 = _2510 + cbSceneParam._m0[79u].w;
        float _2512 = cbSceneParam._m0[79u].w - _2506;
        float _2518 = sqrt(((_2505 * _2505) + (_2506 * _2506)) + (_2508 * _2508));
        float _2521 = (1.0 - (cbSceneParam._m0[77u].w / _2493)) * _2518;
        float _2526 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2528 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2690;
        if (abs((_2507 - _2510) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2690 = ((((_2511 > 0.0) ? exp2(_2526 * _2511) : (2.0 - exp2(_2528 * _2511))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2521;
        }
        else
        {
            float _2650 = 1.0 / cbSceneParam._m0[80u].x;
            float _2651 = isnan(_2512) ? _2511 : (isnan(_2511) ? _2512 : max(_2511, _2512));
            float _2652 = isnan(_2512) ? _2511 : (isnan(_2511) ? _2512 : min(_2511, _2512));
            float _2661 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : min(_2651, 0.0));
            float _2662 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : min(_2652, 0.0));
            _2690 = ((abs(_2518 / _2507) * cbSceneParam._m0[80u].y) * ((((_2661 - _2662) * 2.0) - ((exp2(_2526 * (isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0)))) - exp2(_2526 * (isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0))))) * _2650)) - ((exp2(_2528 * _2661) - exp2(_2528 * _2662)) * _2650))) + (_2521 * cbSceneParam._m0[80u].z);
        }
        vec4 _2692 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2418, _2419, 1.0), 0.0);
        float _2701 = exp2((_2690 * (-1.44269502162933349609375)) * (1.0 - _2692.w));
        float _2702 = log2(_2701);
        float _2718 = log2(_2438);
        _2530 = (exp2(_2718 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2702 * cbSceneParam._m0[78u].x)) * _2692.x) / cbSceneParam._m0[78u].x)) + _2435;
        _2532 = (exp2(_2718 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2702 * cbSceneParam._m0[78u].y)) * _2692.y) / cbSceneParam._m0[78u].y)) + _2436;
        _2534 = (exp2(_2718 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2702 * cbSceneParam._m0[78u].z)) * _2692.z) / cbSceneParam._m0[78u].z)) + _2437;
        _2536 = _2701 * _2438;
    }
    else
    {
        _2530 = _2435;
        _2532 = _2436;
        _2534 = _2437;
        _2536 = _2438;
    }
    float _2548 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2549 = _2548 == 3.0;
    float _2550 = log2(_2536);
    float _2554 = exp2(_2550 * cbSceneParam._m0[78u].x);
    float _2555 = exp2(_2550 * cbSceneParam._m0[78u].y);
    float _2556 = exp2(_2550 * cbSceneParam._m0[78u].z);
    float _2557 = _2554 * (isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0)));
    float _2558 = _2555 * (isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0)));
    float _2559 = _2556 * (isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0)));
    float _2568 = (_2548 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2568 * (_2549 ? _2557 : (_2557 + (cbSceneParam._m0[72u].w * _2530)));
    SV_Target.y = _2568 * (_2549 ? _2558 : (_2558 + (cbSceneParam._m0[72u].w * _2532)));
    SV_Target.z = _2568 * (_2549 ? _2559 : (_2559 + (cbSceneParam._m0[72u].w * _2534)));
    SV_Target.w = _2413;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2371) * _2408) * _2554) * _2568;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2372) * _2408) * _2555) * _2568;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2373) * _2408) * _2556) * _2568;
    SV_Target_1.w = _2413;
}


