#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _986;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    float _296 = (cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _297 = (cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _310 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_296 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_297 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _316 = _310.x * cbMtdParam._m0[9u].x;
    float _317 = _310.y * cbMtdParam._m0[9u].y;
    float _318 = _310.z * cbMtdParam._m0[9u].z;
    float _320 = cbMtdParam._m0[14u].z * TEXCOORD_1.z;
    vec4 _333 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    float _337 = _333.z;
    float _341 = (_333.x * 2.0) + (-1.0);
    float _343 = (_333.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_341, _343), vec2(_341, _343));
    float _3620 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))));
    float _361 = fma(0.9591662883758544921875, _222, fma(0.2000000476837158203125, _215, _201 * 0.2000000476837158203125));
    float _365 = fma(0.9591662883758544921875, _223, fma(0.2000000476837158203125, _216, _202 * 0.2000000476837158203125));
    float _368 = fma(0.9591662883758544921875, _224, fma(0.2000000476837158203125, _217, _203 * 0.2000000476837158203125));
    float _372 = inversesqrt(dot(vec3(_361, _365, _368), vec3(_361, _365, _368)));
    float _379 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _380 = _379 * _278;
    float _381 = _379 * _279;
    float _382 = _379 * _280;
    float _386 = dot(vec4(_380, _381, _382, 0.0), vec4(_372 * _361, _372 * _365, _372 * _368, 0.0)) - cbMtdParam._m0[14u].x;
    float _3631 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _393 = exp2(log2(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].y, 0.001000000047497451305389404296875))));
    vec4 _422 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _456 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _487 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _509 = fma(_350, _222, fma(_343, _215, _341 * _201));
    float _512 = fma(_350, _223, fma(_343, _216, _341 * _202));
    float _515 = fma(_350, _224, fma(_343, _217, _341 * _203));
    float _519 = inversesqrt(dot(vec3(_509, _512, _515), vec3(_509, _512, _515)));
    float _520 = _519 * _509;
    float _521 = _519 * _512;
    float _522 = _519 * _515;
    float _3647 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _523 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _524 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3680 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3691 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _543 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _549 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _550 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _570 = fma(_522, cbSceneParam._m0[5u].z, fma(_521, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _520));
    float _573 = fma(_522, cbSceneParam._m0[6u].z, fma(_521, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _520));
    float _576 = fma(_522, cbSceneParam._m0[7u].z, fma(_521, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _520));
    uint _589 = uint(roundEven(NORMAL.w)) * 13u;
    uint _590 = _589 + 9u;
    uint _591 = _590 + uint(cbMatDynParam._m0[0u].w);
    float _597 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) * cbInstanceData._m0[_591].x;
    float _598 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_591].y;
    float _599 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_591].z;
    float _3702 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    vec4 _611 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _549, cbSceneParam._m0[86u].y * _550));
    float _614 = _611.x * TEXCOORD_1.w;
    float _615 = dot(vec3(_520, _521, _522), vec3(_380, _381, _382));
    float _618 = _615 * 2.0;
    float _622 = (_618 * _520) - _380;
    float _623 = (_618 * _521) - _381;
    float _624 = (_618 * _522) - _382;
    float _628 = abs(dot(vec3(_380, _381, _382), vec3(_520, _521, _522)));
    float _3735 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _630 = sqrt(_524);
    float _643 = exp2((_630 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_630 * 3.0));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _985;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _710 = fma(_683, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _675));
        float _714 = fma(_683, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _675));
        float _718 = fma(_683, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _675));
        float _743 = _675 + _520;
        float _744 = _679 + _521;
        float _745 = _683 + _522;
        float _755 = fma(_745, cbModelParam._m0[26u].z, fma(_744, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _743)) - _710;
        float _756 = fma(_745, cbModelParam._m0[27u].z, fma(_744, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _743)) - _714;
        float _757 = fma(_745, cbModelParam._m0[28u].z, fma(_744, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _743)) - _718;
        float _761 = inversesqrt(dot(vec3(_755, _756, _757), vec3(_755, _756, _757)));
        float _774 = ((_761 * _755) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_710 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _775 = ((_761 * _756) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_714 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _776 = ((_761 * _757) / cbModelParam._m0[34u].z) + ((((((_718 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        float _813 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_779.x + (-0.5));
        float _815 = _813 * (_779.y + (-0.5));
        float _816 = _813 * (_779.z + (-0.5));
        float _823 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_786.x + (-0.5));
        float _825 = _823 * (_786.y + (-0.5));
        float _826 = _823 * (_786.z + (-0.5));
        float _833 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_793.x + (-0.5));
        float _835 = _833 * (_793.y + (-0.5));
        float _836 = _833 * (_793.z + (-0.5));
        float _843 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_800.x + (-0.5));
        float _845 = _843 * (_800.y + (-0.5));
        float _846 = _843 * (_800.z + (-0.5));
        float _847 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = _814 * 0.5;
        float _851 = _824 * 0.5;
        float _852 = _834 * 0.5;
        float _853 = dot(vec3(_850, _851, _852), vec3(_850, _851, _852));
        float _858 = (_853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_853);
        float _867 = (dot(vec3(_520, _521, _522), vec3(_858 * _850, _858 * _851, _858 * _852)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _877 = sqrt(((_851 * _851) + (_850 * _850)) + (_852 * _852)) / (_847 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _879 = _878 * 2.0;
        float _883 = (1.0 - _878) / (_878 + 1.0);
        float _3783 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _893 = ((((1.0 - _884) * (_879 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_879 + 1.0))) + _884) * _847;
        float _894 = _815 * 0.5;
        float _895 = _825 * 0.5;
        float _896 = _835 * 0.5;
        float _897 = dot(vec3(_894, _895, _896), vec3(_894, _895, _896));
        float _902 = (_897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_897);
        float _910 = (dot(vec3(_520, _521, _522), vec3(_902 * _894, _902 * _895, _902 * _896)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _919 = sqrt(((_895 * _895) + (_894 * _894)) + (_896 * _896)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _921 = _920 * 2.0;
        float _925 = (1.0 - _920) / (_920 + 1.0);
        float _3816 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _935 = ((((1.0 - _926) * (_921 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_921 + 1.0))) + _926) * _848;
        float _936 = _816 * 0.5;
        float _937 = _826 * 0.5;
        float _938 = _836 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _952 = (dot(vec3(_520, _521, _522), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _961 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3849 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_963 + 1.0))) + _968) * _849;
        _985 = _816;
        _987 = _815;
        _988 = _814;
        _989 = _826;
        _990 = _825;
        _991 = _824;
        _992 = _836;
        _993 = _835;
        _994 = _834;
        _995 = _849;
        _996 = _848;
        _997 = _847;
        _998 = cbModelParam._m0[36u].z * (isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)));
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)));
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
    }
    else
    {
        _985 = _986;
        _987 = _986;
        _988 = _986;
        _989 = _986;
        _990 = _986;
        _991 = _986;
        _992 = _986;
        _993 = _986;
        _994 = _986;
        _995 = _986;
        _996 = _986;
        _997 = _986;
        _998 = 0.0;
        _999 = 0.0;
        _1000 = 0.0;
    }
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1026 = fma(_683, cbModelParam._m0[30u].z, fma(_679, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _675));
        float _1030 = fma(_683, cbModelParam._m0[31u].z, fma(_679, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _675));
        float _1034 = fma(_683, cbModelParam._m0[32u].z, fma(_679, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _675));
        float _1057 = _675 + _520;
        float _1058 = _679 + _521;
        float _1059 = _683 + _522;
        float _1069 = fma(_1059, cbModelParam._m0[30u].z, fma(_1058, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1057)) - _1026;
        float _1070 = fma(_1059, cbModelParam._m0[31u].z, fma(_1058, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1057)) - _1030;
        float _1071 = fma(_1059, cbModelParam._m0[32u].z, fma(_1058, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1057)) - _1034;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1026 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1030 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[35u].z) + ((((((_1034 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1125 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1092.x + (-0.5));
        float _1127 = _1125 * (_1092.y + (-0.5));
        float _1128 = _1125 * (_1092.z + (-0.5));
        float _1135 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1099.x + (-0.5));
        float _1137 = _1135 * (_1099.y + (-0.5));
        float _1138 = _1135 * (_1099.z + (-0.5));
        float _1145 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1106.x + (-0.5));
        float _1147 = _1145 * (_1106.y + (-0.5));
        float _1148 = _1145 * (_1106.z + (-0.5));
        float _1155 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1113.x + (-0.5));
        float _1157 = _1155 * (_1113.y + (-0.5));
        float _1158 = _1155 * (_1113.z + (-0.5));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = _1126 * 0.5;
        float _1163 = _1136 * 0.5;
        float _1164 = _1146 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_520, _521, _522), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3912 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1189 + 1.0))) + _1194) * _1159;
        float _1204 = _1127 * 0.5;
        float _1205 = _1137 * 0.5;
        float _1206 = _1147 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_520, _521, _522), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3945 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1231 + 1.0))) + _1236) * _1160;
        float _1246 = _1128 * 0.5;
        float _1247 = _1138 * 0.5;
        float _1248 = _1148 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_520, _521, _522), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3978 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1273 + 1.0))) + _1278) * _1161;
        _1295 = _1128;
        _1296 = _1127;
        _1297 = _1126;
        _1298 = _1138;
        _1299 = _1137;
        _1300 = _1136;
        _1301 = _1148;
        _1302 = _1147;
        _1303 = _1146;
        _1304 = _1161;
        _1305 = _1160;
        _1306 = _1159;
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1308 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
    }
    else
    {
        _1295 = _986;
        _1296 = _986;
        _1297 = _986;
        _1298 = _986;
        _1299 = _986;
        _1300 = _986;
        _1301 = _986;
        _1302 = _986;
        _1303 = _986;
        _1304 = _986;
        _1305 = _986;
        _1306 = _986;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _998)) + _998;
    float _1320 = (cbModelParam._m0[1u].x * (_1308 - _999)) + _999;
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _1000)) + _1000;
    float _1342 = fma(_1321, cbSceneParam._m0[89u].z, fma(_1320, cbSceneParam._m0[89u].y, _1319 * cbSceneParam._m0[89u].x));
    float _1345 = fma(_1321, cbSceneParam._m0[90u].z, fma(_1320, cbSceneParam._m0[90u].y, _1319 * cbSceneParam._m0[90u].x));
    float _1348 = fma(_1321, cbSceneParam._m0[91u].z, fma(_1320, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1319));
    float _1363 = _622 * 0.5;
    float _1364 = _623 * 0.5;
    float _1365 = _624 * 0.5;
    float _1366 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1369 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1296, _1299, _1302, _1305));
    float _1372 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1406;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1379 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_985, _989, _992, _995));
        float _1383 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_987, _990, _993, _996));
        float _1387 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_988, _991, _994, _997));
        float _1394 = dot(vec4(cbModelParam._m0[39u]), vec4(_1363, _1364, _1365, 1.0));
        _1406 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1406 = 1.0;
    }
    float _1417;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1408 = dot(vec4(cbModelParam._m0[40u]), vec4(_1363, _1364, _1365, 1.0));
        _1417 = dot(vec3(isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1408) ? 0.0 : (isnan(0.0) ? _1408 : max(0.0, _1408))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1417 = 1.0;
    }
    float _1421 = (_1417 * cbModelParam._m0[1u].x) + (_1406 * (1.0 - cbModelParam._m0[1u].x));
    float _1431 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _524);
    float _1432 = isnan(_1431) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1431 : min(cbModelParam._m0[25u].z, _1431));
    float _1512;
    float _1514;
    float _1516;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1479 = fma(_683, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675)) + cbModelParam._m0[13u].w;
        float _1483 = fma(_683, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675)) + cbModelParam._m0[14u].w;
        float _1487 = fma(_683, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675)) + cbModelParam._m0[15u].w;
        float _1490 = fma(_624, cbModelParam._m0[13u].z, fma(_623, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _622));
        float _1493 = fma(_624, cbModelParam._m0[14u].z, fma(_623, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _622));
        float _1496 = fma(_624, cbModelParam._m0[15u].z, fma(_623, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _622));
        float _1524;
        if (_1490 > 0.0)
        {
            _1524 = abs((1.0 - _1479) / _1490);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1479 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1524 = frontier_phi_16_14_ladder;
        }
        float _1696;
        if (_1493 > 0.0)
        {
            _1696 = abs((1.0 - _1483) / _1493);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1483 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1696 = frontier_phi_25_21_ladder;
        }
        float _1992;
        if (_1496 > 0.0)
        {
            _1992 = abs((1.0 - _1487) / _1496);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1487 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1992 = frontier_phi_37_32_ladder;
        }
        float _1994 = isnan(_1696) ? _1524 : (isnan(_1524) ? _1696 : min(_1524, _1696));
        float _1995 = isnan(_1992) ? _1994 : (isnan(_1994) ? _1992 : min(_1994, _1992));
        float _1999 = (_1995 * _1490) + _1479;
        float _2000 = (_1995 * _1493) + _1483;
        float _2001 = (_1995 * _1496) + _1487;
        float _2002 = _1995 * 9.9999997473787516355514526367188e-05;
        float _2004 = (-1.0) - _2002;
        float _2006 = _2002 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2001 > _2006) || ((_2001 < _2004) || ((_2000 > _2006) || ((_2000 < _2004) || ((_1999 < _2004) || (_1999 > _2006))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2146 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2001, cbModelParam._m0[9u].z, fma(_2000, cbModelParam._m0[9u].y, _1999 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2001, cbModelParam._m0[10u].z, fma(_2000, cbModelParam._m0[10u].y, _1999 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2001, cbModelParam._m0[11u].z, fma(_2000, cbModelParam._m0[11u].y, _1999 * cbModelParam._m0[11u].x))), _1432);
            frontier_phi_15_37_ladder = _2146.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2146.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2146.z * cbModelParam._m0[1u].y;
        }
        _1512 = frontier_phi_15_37_ladder_1;
        _1514 = frontier_phi_15_37_ladder;
        _1516 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1500 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_622, _623, _624), _1432);
        _1512 = _1500.x * cbModelParam._m0[1u].y;
        _1514 = _1500.y * cbModelParam._m0[1u].y;
        _1516 = _1500.z * cbModelParam._m0[1u].y;
    }
    float _1520 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _524);
    float _1521 = isnan(_1520) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1520 : min(cbModelParam._m0[25u].w, _1520));
    float _1613;
    float _1615;
    float _1617;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1577 = fma(_683, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675)) + cbModelParam._m0[21u].w;
        float _1581 = fma(_683, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675)) + cbModelParam._m0[22u].w;
        float _1585 = fma(_683, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675)) + cbModelParam._m0[23u].w;
        float _1588 = fma(_624, cbModelParam._m0[21u].z, fma(_623, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _622));
        float _1591 = fma(_624, cbModelParam._m0[22u].z, fma(_623, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _622));
        float _1594 = fma(_624, cbModelParam._m0[23u].z, fma(_623, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _622));
        float _1701;
        if (_1588 > 0.0)
        {
            _1701 = abs((1.0 - _1577) / _1588);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1577 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1701 = frontier_phi_27_23_ladder;
        }
        float _2019;
        if (_1591 > 0.0)
        {
            _2019 = abs((1.0 - _1581) / _1591);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1581 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2019 = frontier_phi_39_34_ladder;
        }
        float _2346;
        if (_1594 > 0.0)
        {
            _2346 = abs((1.0 - _1585) / _1594);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1585 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2346 = frontier_phi_49_46_ladder;
        }
        float _2348 = isnan(_2019) ? _1701 : (isnan(_1701) ? _2019 : min(_1701, _2019));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1588) + _1577;
        float _2354 = (_2349 * _1591) + _1581;
        float _2355 = (_2349 * _1594) + _1585;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2357 = (-1.0) - _2356;
        float _2359 = _2356 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2355 > _2359) || ((_2355 < _2357) || ((_2354 > _2359) || ((_2354 < _2357) || ((_2353 < _2357) || (_2353 > _2359))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2473 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2355, cbModelParam._m0[17u].z, fma(_2354, cbModelParam._m0[17u].y, _2353 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2355, cbModelParam._m0[18u].z, fma(_2354, cbModelParam._m0[18u].y, _2353 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2355, cbModelParam._m0[19u].z, fma(_2354, cbModelParam._m0[19u].y, _2353 * cbModelParam._m0[19u].x))), _1521);
            frontier_phi_24_49_ladder = _2473.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2473.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2473.x * cbModelParam._m0[1u].z;
        }
        _1613 = frontier_phi_24_49_ladder_2;
        _1615 = frontier_phi_24_49_ladder_1;
        _1617 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1597 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_622, _623, _624), _1521);
        _1613 = _1597.x * cbModelParam._m0[1u].z;
        _1615 = _1597.y * cbModelParam._m0[1u].z;
        _1617 = _1597.z * cbModelParam._m0[1u].z;
    }
    float _1629 = ((((1.0 - _643) * ((_630 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_643 * _630)) * _614;
    float _1630 = _1629 * ((cbModelParam._m0[1u].w * (_1613 - _1512)) + _1512);
    float _1631 = _1629 * ((cbModelParam._m0[1u].w * (_1615 - _1514)) + _1514);
    float _1632 = _1629 * ((cbModelParam._m0[1u].w * (_1617 - _1516)) + _1516);
    float _1635 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1638 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1641 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, _1630 * cbSceneParam._m0[91u].x));
    float _1675 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1679 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1683 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1687 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1688 = _1675 / _1687;
    float _1689 = _1679 / _1687;
    float _1690 = _1683 / _1687;
    float _1837;
    float _1838;
    float _1839;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1717 = ((uint(_1690 > cbSceneParam._m0[59u].y) + uint(_1690 > cbSceneParam._m0[59u].x)) + uint(_1690 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1718 = _1717 + 43u;
        uint _1726 = _1717 + 44u;
        uint _1734 = _1717 + 45u;
        uint _1742 = _1717 + 46u;
        float _1753 = fma(_1687, cbSceneParam._m0[_1718].w, fma(_1683, cbSceneParam._m0[_1718].z, fma(_1679, cbSceneParam._m0[_1718].y, _1675 * cbSceneParam._m0[_1718].x)));
        float _1757 = fma(_1687, cbSceneParam._m0[_1726].w, fma(_1683, cbSceneParam._m0[_1726].z, fma(_1679, cbSceneParam._m0[_1726].y, _1675 * cbSceneParam._m0[_1726].x)));
        float _1765 = fma(_1687, cbSceneParam._m0[_1742].w, fma(_1683, cbSceneParam._m0[_1742].z, fma(_1679, cbSceneParam._m0[_1742].y, _1675 * cbSceneParam._m0[_1742].x)));
        float _1770 = cbSceneParam._m0[33u].z * _1765;
        float _1772 = cbSceneParam._m0[33u].w * _1765;
        float _1775 = fma(_1687, cbSceneParam._m0[_1734].w, fma(_1683, cbSceneParam._m0[_1734].z, fma(_1679, cbSceneParam._m0[_1734].y, _1675 * cbSceneParam._m0[_1734].x))) / _1765;
        float _1823 = (cbSceneParam._m0[33u].x - sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690))) * cbSceneParam._m0[33u].y;
        float _4104 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1830 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1770 + _1753) / _1765, (_1772 + _1757) / _1765), _1775), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1772 + _1753) / _1765, (_1757 - _1770) / _1765), _1775), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1753 - _1770) / _1765, (_1757 - _1772) / _1765), _1775), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1753 - _1772) / _1765, (_1770 + _1757) / _1765), _1775), 0.0)).x), vec4(0.25)));
        _1837 = 1.0 - (_1830 * cbSceneParam._m0[34u].x);
        _1838 = 1.0 - (_1830 * cbSceneParam._m0[34u].y);
        _1839 = 1.0 - (_1830 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1837 = 1.0;
        _1838 = 1.0;
        _1839 = 1.0;
    }
    float _1903;
    float _1905;
    float _1907;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1891 = fma(_1687, cbSceneParam._m0[63u].w, fma(_1683, cbSceneParam._m0[63u].z, fma(_1679, cbSceneParam._m0[63u].y, _1675 * cbSceneParam._m0[63u].x)));
        float _1892 = fma(_1687, cbSceneParam._m0[60u].w, fma(_1683, cbSceneParam._m0[60u].z, fma(_1679, cbSceneParam._m0[60u].y, _1675 * cbSceneParam._m0[60u].x))) / _1891;
        float _1893 = fma(_1687, cbSceneParam._m0[61u].w, fma(_1683, cbSceneParam._m0[61u].z, fma(_1679, cbSceneParam._m0[61u].y, _1675 * cbSceneParam._m0[61u].x))) / _1891;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1892 >= cbSceneParam._m0[64u].x) && (_1893 >= cbSceneParam._m0[64u].y)) && (_1892 <= cbSceneParam._m0[64u].z)) && (_1893 <= cbSceneParam._m0[64u].w))
        {
            float _2032 = fma(_1687, cbSceneParam._m0[62u].w, fma(_1683, cbSceneParam._m0[62u].z, fma(_1679, cbSceneParam._m0[62u].y, _1675 * cbSceneParam._m0[62u].x))) / _1891;
            float _2036 = isnan(cbSceneParam._m0[41u].w) ? _2032 : (isnan(_2032) ? cbSceneParam._m0[41u].w : max(_2032, cbSceneParam._m0[41u].w));
            float _2079 = (cbSceneParam._m0[33u].x - sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690))) * cbSceneParam._m0[33u].y;
            float _4120 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
            float _2086 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1892, cbSceneParam._m0[33u].w + _1893), _2036), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1892, _1893 - cbSceneParam._m0[33u].z), _2036), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1892 - cbSceneParam._m0[33u].z, _1893 - cbSceneParam._m0[33u].w), _2036), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1892 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1893), _2036), 0.0)).x), vec4(0.25)));
            float _2090 = 1.0 - (_2086 * cbSceneParam._m0[34u].x);
            float _2091 = 1.0 - (_2086 * cbSceneParam._m0[34u].y);
            float _2092 = 1.0 - (_2086 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2091) ? _1838 : (isnan(_1838) ? _2091 : min(_1838, _2091));
            frontier_phi_36_35_ladder_1 = isnan(_2092) ? _1839 : (isnan(_1839) ? _2092 : min(_1839, _2092));
            frontier_phi_36_35_ladder_2 = isnan(_2090) ? _1837 : (isnan(_1837) ? _2090 : min(_1837, _2090));
        }
        else
        {
            frontier_phi_36_35_ladder = _1838;
            frontier_phi_36_35_ladder_1 = _1839;
            frontier_phi_36_35_ladder_2 = _1837;
        }
        _1903 = frontier_phi_36_35_ladder_2;
        _1905 = frontier_phi_36_35_ladder;
        _1907 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1903 = _1837;
        _1905 = _1838;
        _1907 = _1839;
    }
    uvec4 _1912 = floatBitsToUint(cbInstanceData._m0[_589 + 5u]);
    uint _1914 = _1912.x * 14u;
    uint _1915 = _1914 + 13u;
    float _1922 = _614 + (-1.0);
    float _1927 = (cbLight._m0[_1915].x * _1922) + 1.0;
    float _1928 = (cbLight._m0[_1915].y * _1922) + 1.0;
    float _1929 = (cbLight._m0[_1915].z * _1922) + 1.0;
    float _1930 = (cbLight._m0[_1915].w * _1922) + 1.0;
    uint _1931 = _1914 + 5u;
    float _1937 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
    uint _1941 = _1914 + 4u;
    float _1951 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
    uint _1955 = _1914 | 1u;
    float _1966 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_520, _521, _522));
    float _1969 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_520, _521, _522));
    float _4156 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _4167 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1974 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * 0.3183098733425140380859375;
    float _1976 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 0.3183098733425140380859375;
    float _1983 = ((cbLight._m0[_1931].x * _1937) * _1976) + (((cbLight._m0[_1941].x * _1903) * _1951) * _1974);
    float _1984 = ((_1937 * cbLight._m0[_1931].y) * _1976) + (((cbLight._m0[_1941].y * _1905) * _1951) * _1974);
    float _1985 = ((_1937 * cbLight._m0[_1931].z) * _1976) + (((cbLight._m0[_1941].z * _1907) * _1951) * _1974);
    uvec4 _1989 = floatBitsToUint(cbLight._m0[_1914 + 12u]);
    bool _1991 = _1989.x == 0u;
    float _2093;
    float _2095;
    float _2097;
    if (_1991)
    {
        _2093 = _1983;
        _2095 = _1984;
        _2097 = _1985;
    }
    else
    {
        uint _2101 = _1914 + 6u;
        float _2117 = (dot(vec3(cbLight._m0[_1914 + 2u].xyz), vec3(_520, _521, _522)) * 0.5) + 0.5;
        float _2118 = _2117 * _2117;
        float _4178 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2119 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2120 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2093 = (((cbLight._m0[_2101].x * 0.3183098733425140380859375) * _2119) * _2120) + _1983;
        _2095 = (((cbLight._m0[_2101].y * 0.3183098733425140380859375) * _2119) * _2120) + _1984;
        _2097 = (((cbLight._m0[_2101].z * 0.3183098733425140380859375) * _2119) * _2120) + _1985;
    }
    bool _2100 = _1989.y == 0u;
    float _2155;
    float _2157;
    float _2159;
    if (_2100)
    {
        _2155 = _2093;
        _2157 = _2095;
        _2159 = _2097;
    }
    else
    {
        uint _2317 = _1914 + 7u;
        float _2333 = (dot(vec3(cbLight._m0[_1914 + 3u].xyz), vec3(_520, _521, _522)) * 0.5) + 0.5;
        float _2334 = _2333 * _2333;
        float _4194 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2335 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2336 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
        _2155 = (((cbLight._m0[_2317].x * 0.3183098733425140380859375) * _2335) * _2336) + _2093;
        _2157 = (((cbLight._m0[_2317].y * 0.3183098733425140380859375) * _2335) * _2336) + _2095;
        _2159 = (((cbLight._m0[_2317].z * 0.3183098733425140380859375) * _2335) * _2336) + _2097;
    }
    uint _2162 = _1914 + 8u;
    float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _524) * 0.949999988079071044921875);
    float _2176 = _2175 * _2175;
    float _2177 = cbLight._m0[_1914].x + _380;
    float _2178 = cbLight._m0[_1914].y + _381;
    float _2179 = cbLight._m0[_1914].z + _382;
    float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
    float _2184 = _2183 * _2177;
    float _2185 = _2183 * _2178;
    float _2186 = _2183 * _2179;
    float _2187 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1914].xyz));
    float _4210 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _2191 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2192 = dot(vec3(_520, _521, _522), vec3(_2184, _2185, _2186));
    float _4232 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2196 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_2184, _2185, _2186));
    float _4243 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2200 = _2176 * _2176;
    float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
    float _2215 = (exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2216 = 1.0 - _2176;
    float _2227 = (0.5 / (((_2191 * ((_2190 * _2216) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2216) + _2176) * _2190))) * _2190;
    float _4254 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2229 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
    uint _2243 = _1914 + 9u;
    float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _524) * 0.949999988079071044921875);
    float _2255 = _2254 * _2254;
    float _2256 = cbLight._m0[_1955].x + _380;
    float _2257 = cbLight._m0[_1955].y + _381;
    float _2258 = cbLight._m0[_1955].z + _382;
    float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
    float _2263 = _2262 * _2256;
    float _2264 = _2262 * _2257;
    float _2265 = _2262 * _2258;
    float _2266 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1955].xyz));
    float _4265 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2270 = dot(vec3(_520, _521, _522), vec3(_2263, _2264, _2265));
    float _4276 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2274 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2263, _2264, _2265));
    float _4287 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2278 = _2255 * _2255;
    float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
    float _2291 = (exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2292 = 1.0 - _2255;
    float _2302 = (0.5 / (((_2191 * ((_2269 * _2292) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2292) + _2255) * _2269))) * _2269;
    float _4298 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2304 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
    float _2314 = (((_2291 * cbLight._m0[_2243].x) * _2304) * _1937) + ((((cbLight._m0[_2162].x * _1903) * _2215) * _2229) * _1951);
    float _2315 = (((_2291 * cbLight._m0[_2243].y) * _2304) * _1937) + ((((cbLight._m0[_2162].y * _1905) * _2215) * _2229) * _1951);
    float _2316 = (((_2291 * cbLight._m0[_2243].z) * _2304) * _1937) + ((((cbLight._m0[_2162].z * _1907) * _2215) * _2229) * _1951);
    float _2372;
    float _2374;
    float _2376;
    if (_1991)
    {
        _2372 = _2314;
        _2374 = _2315;
        _2376 = _2316;
    }
    else
    {
        uint _2378 = _1914 + 2u;
        uint _2382 = _1914 + 10u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _524) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _380;
        float _2399 = cbLight._m0[_2378].y + _381;
        float _2400 = cbLight._m0[_2378].z + _382;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_2378].xyz));
        float _4309 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2412 = dot(vec3(_520, _521, _522), vec3(_2405, _2406, _2407));
        float _4320 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4331 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2433 = (exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2434 = 1.0 - _2397;
        float _2444 = (0.5 / (((_2191 * ((_2411 * _2434) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2434) + _2397) * _2411))) * _2411;
        float _4342 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2372 = (((_2433 * cbLight._m0[_2382].x) * _2446) * _2447) + _2314;
        _2374 = (((_2433 * cbLight._m0[_2382].y) * _2446) * _2447) + _2315;
        _2376 = (((_2433 * cbLight._m0[_2382].z) * _2446) * _2447) + _2316;
    }
    float _2478;
    float _2480;
    float _2482;
    if (_2100)
    {
        _2478 = _2372;
        _2480 = _2374;
        _2482 = _2376;
    }
    else
    {
        uint _2489 = _1914 + 3u;
        uint _2493 = _1914 + 11u;
        float _2507 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _524) * 0.949999988079071044921875);
        float _2508 = _2507 * _2507;
        float _2509 = cbLight._m0[_2489].x + _380;
        float _2510 = cbLight._m0[_2489].y + _381;
        float _2511 = cbLight._m0[_2489].z + _382;
        float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
        float _2516 = _2515 * _2509;
        float _2517 = _2515 * _2510;
        float _2518 = _2515 * _2511;
        float _2519 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_2489].xyz));
        float _4358 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2523 = dot(vec3(_520, _521, _522), vec3(_2516, _2517, _2518));
        float _4369 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2527 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2516, _2517, _2518));
        float _4380 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2531 = _2508 * _2508;
        float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
        float _2544 = (exp2(log2(1.0 - (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2545 = 1.0 - _2508;
        float _2555 = (0.5 / (((_2191 * ((_2522 * _2545) + _2508)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2545) + _2508) * _2522))) * _2522;
        float _4391 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2557 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
        float _2558 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
        _2478 = (((_2544 * cbLight._m0[_2493].x) * _2557) * _2558) + _2372;
        _2480 = (((_2544 * cbLight._m0[_2493].y) * _2557) * _2558) + _2374;
        _2482 = (((_2544 * cbLight._m0[_2493].z) * _2557) * _2558) + _2376;
    }
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    if (_1912.y == 0u)
    {
        uvec4 _2579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2580 = _2579.x;
        uint _2591 = uint((float(_2579.y) * floor(float(uint(cbSceneParam._m0[85u].y * _550) / _2580))) + floor(float(uint(cbSceneParam._m0[85u].x * _549) / _2580)));
        float _2601 = (log2(_1690 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2602 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        uint _2605 = uint(isnan(14.0) ? _2602 : (isnan(_2602) ? 14.0 : min(_2602, 14.0)));
        uvec4 _2610 = texelFetch(g_lightClusterGridBuffer, int(((_2605 << 2u) + (_2591 << 6u)) >> 2u));
        uint _2611 = _2610.x;
        uint _2612 = _2579.z;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        if (((((1u << ((_2612 >> 4u) & 15u)) + 4294967295u) & _2611) == 0u) || ((_2612 & 240u) == 0u))
        {
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
        }
        else
        {
            float _2722;
            float _2724;
            float _2726;
            float _2728;
            float _2730;
            float _2732;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            uint _2880 = 0u;
            uint _2889;
            bool _2890;
            for (;;)
            {
                _2889 = texelFetch(g_lightClassification, int((((_2605 << 5u) + (_2591 << 9u)) + (_2880 << 2u)) >> 2u)).x;
                _2890 = _2889 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2890)
                {
                    frontier_phi_68_pred = _2879;
                    frontier_phi_68_pred_1 = _2878;
                    frontier_phi_68_pred_2 = _2877;
                    frontier_phi_68_pred_3 = _2875;
                    frontier_phi_68_pred_4 = _2874;
                    frontier_phi_68_pred_5 = _2876;
                }
                else
                {
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    uint _3004;
                    _2998 = _2874;
                    _2999 = _2875;
                    _3000 = _2876;
                    _3001 = _2877;
                    _3002 = _2878;
                    _3003 = _2879;
                    _3004 = _2889;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    for (;;)
                    {
                        uint _3008 = uint(findLSB(_3004)) + (_2880 << 5u);
                        uint _3005 = (_3004 + 4294967295u) & _3004;
                        uint _3010 = _3008 * 48u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 3u)).x));
                        uint _3030 = (_3008 * 48u) + 4u;
                        vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 3u)).x));
                        uint _3049 = (_3008 * 48u) + 8u;
                        vec3 _3060 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3049)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 2u)).x));
                        float _3064 = _3024.x - _1688;
                        float _3065 = _3024.y - _1689;
                        float _3066 = _3024.z - _1690;
                        float _3067 = dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066));
                        float _3070 = inversesqrt(_3067);
                        float _3071 = _3070 * _3064;
                        float _3072 = _3070 * _3065;
                        float _3073 = _3070 * _3066;
                        float _3074 = dot(vec3(_570, _573, _576), vec3(_3071, _3072, _3073));
                        float _3079 = 1.0 - (_3067 * _3024.w);
                        float _4417 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3080 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3081 = sqrt(_3067) * _3043.w;
                        float _3084 = 1.39999997615814208984375 / (_3081 + 1.39999997615814208984375);
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3074) + _3085;
                        float _3091 = _3081 * _3081;
                        float _3095 = ((isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))) * _3080) / ((_3091 * 0.699999988079071044921875) + 1.0);
                        float _3099 = (-0.0) - _1688;
                        float _3100 = (-0.0) - _1689;
                        float _3101 = (-0.0) - _1690;
                        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                        float _3106 = _3105 * _3099;
                        float _3107 = _3105 * _3100;
                        float _3108 = _3105 * _3101;
                        float _3115 = exp2(log2(1.0 / ((_3091 * 3.5) + 5.0)) * 0.25);
                        float _3116 = 1.0 - _630;
                        float _3123 = sqrt(1.0 - ((1.0 - (_3116 * _3116)) * (1.0 - (_3115 * _3115))));
                        float _3124 = _3123 * _3123;
                        float _3125 = _3124 * _3124;
                        float _3126 = _3106 + _3071;
                        float _3127 = _3107 + _3072;
                        float _3128 = _3108 + _3073;
                        float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                        float _3136 = dot(vec3(_570, _573, _576), vec3(_3106, _3107, _3108));
                        float _4433 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3140 = dot(vec3(_570, _573, _576), vec3(_3132 * _3126, _3132 * _3127, _3132 * _3128));
                        float _4444 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                        float _3147 = ((_3143 * _3143) * (_3125 + (-1.0))) + 1.0;
                        float _3148 = _3084 * _3124;
                        float _3149 = _3148 * _3148;
                        float _3152 = ((1.0 - _3149) * _3074) + _3149;
                        float _4455 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3154 = 1.0 - _3124;
                        float _3164 = (0.5 / (((_3153 * ((_3139 * _3154) + _3124)) + 9.9999999392252902907785028219223e-09) + (((_3153 * _3154) + _3124) * _3139))) * _3153;
                        float _4466 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3175 = (((_3125 * 3.1415927410125732421875) * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) / ((_3147 * _3147) * ((_3091 * 2.1991131305694580078125) + 3.141590118408203125))) * _3080;
                        _2933 = (_3095 * _3043.x) + _3001;
                        _2934 = (_3095 * _3043.y) + _3002;
                        _2935 = (_3095 * _3043.z) + _3003;
                        _2930 = (_3175 * _3060.x) + _2998;
                        _2931 = (_3175 * _3060.y) + _2999;
                        _2932 = (_3175 * _3060.z) + _3000;
                        if (_3005 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _2932;
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _2935;
                            _3004 = _3005;
                        }
                    }
                    frontier_phi_68_pred = _2935;
                    frontier_phi_68_pred_1 = _2934;
                    frontier_phi_68_pred_2 = _2933;
                    frontier_phi_68_pred_3 = _2931;
                    frontier_phi_68_pred_4 = _2930;
                    frontier_phi_68_pred_5 = _2932;
                }
                _2732 = frontier_phi_68_pred;
                _2730 = frontier_phi_68_pred_1;
                _2728 = frontier_phi_68_pred_2;
                _2724 = frontier_phi_68_pred_3;
                _2722 = frontier_phi_68_pred_4;
                _2726 = frontier_phi_68_pred_5;
                uint _2881 = _2880 + 1u;
                if (_2881 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2874 = _2722;
                    _2875 = _2724;
                    _2876 = _2726;
                    _2877 = _2728;
                    _2878 = _2730;
                    _2879 = _2732;
                    _2880 = _2881;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
        }
        uvec4 _2735 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2736 = _2735.z;
        uint _2738 = (_2736 >> 8u) & 15u;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        if (((4294967295u << _2738) & _2611) == 0u)
        {
            _2842 = _2721;
            _2844 = _2723;
            _2846 = _2725;
            _2848 = _2727;
            _2850 = _2729;
            _2852 = _2731;
        }
        else
        {
            float _2867 = inversesqrt(dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690)));
            float _2868 = _2867 * _1688;
            float _2869 = _2867 * _1689;
            float _2870 = _2867 * _1690;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2738 < ((_2736 >> 12u) & 15u))
            {
                float _2843;
                float _2845;
                float _2847;
                float _2849;
                float _2851;
                float _2853;
                float _2981 = _2721;
                float _2982 = _2723;
                float _2983 = _2725;
                float _2984 = _2727;
                float _2985 = _2729;
                float _2986 = _2731;
                uint _2987 = _2738;
                uint _2996;
                bool _2997;
                for (;;)
                {
                    _2996 = texelFetch(g_lightClassification, int((((_2605 << 5u) + (_2591 << 9u)) + (_2987 << 2u)) >> 2u)).x;
                    _2997 = _2996 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2997)
                    {
                        frontier_phi_74_pred = _2983;
                        frontier_phi_74_pred_1 = _2982;
                        frontier_phi_74_pred_2 = _2981;
                        frontier_phi_74_pred_3 = _2986;
                        frontier_phi_74_pred_4 = _2985;
                        frontier_phi_74_pred_5 = _2984;
                    }
                    else
                    {
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3193 = _2981;
                        float _3194 = _2982;
                        float _3195 = _2983;
                        float _3196 = _2984;
                        float _3197 = _2985;
                        float _3198 = _2986;
                        uint _3199 = _2996;
                        uint _3200;
                        vec4 _3225;
                        float _3226;
                        vec4 _3241;
                        vec3 _3253;
                        vec4 _3268;
                        vec4 _3284;
                        float _3331;
                        bool _3332;
                        for (;;)
                        {
                            uint _3210 = ((_2987 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3199));
                            _3200 = (_3199 + 4294967295u) & _3199;
                            uint _3212 = _3210 * 40u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            _3226 = _3225.w;
                            uint _3228 = (_3210 * 40u) + 4u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3243 = (_3210 * 40u) + 8u;
                            _3253 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x));
                            uint _3255 = (_3210 * 40u) + 16u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3271 = (_3210 * 40u) + 20u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3287 = (_3210 * 40u) + 24u;
                            vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3306 = (_3210 * 40u) + 28u;
                            vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            _3331 = fma(_1690, _3319.z, fma(_1689, _3319.y, _3319.x * _1688)) + _3319.w;
                            _3332 = !((fma(_1690, _3300.z, fma(_1689, _3300.y, _3300.x * _1688)) + _3300.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3332)
                            {
                                float _3359 = _3225.x - _1688;
                                float _3360 = _3225.y - _1689;
                                float _3361 = _3225.z - _1690;
                                float _3362 = dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361));
                                float _3365 = inversesqrt(_3362);
                                float _3366 = _3365 * _3359;
                                float _3367 = _3365 * _3360;
                                float _3368 = _3365 * _3361;
                                float _3372 = 1.0 - (_3362 / (_3226 * _3226));
                                float _4477 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3377 = sqrt(_3362) * _3241.w;
                                float _3379 = 1.39999997615814208984375 / (_3377 + 1.39999997615814208984375);
                                float _3380 = _3379 * _3379;
                                float _3383 = ((1.0 - _3380) * dot(vec3(_3366, _3367, _3368), vec3(_570, _573, _576))) + _3380;
                                float _3386 = _3377 * _3377;
                                float _3390 = (fma(_1690, _3268.z, fma(_1689, _3268.y, _3268.x * _1688)) + _3268.w) / _3331;
                                float _3391 = (fma(_1690, _3284.z, fma(_1689, _3284.y, _3284.x * _1688)) + _3284.w) / _3331;
                                float _3395 = 1.0 - dot(vec2(_3390, _3391), vec2(_3390, _3391));
                                float _4493 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3397 = _3396 * (((isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0))) * _3373) / ((_3386 * 0.699999988079071044921875) + 1.0));
                                float _3409 = exp2(log2(1.0 / ((_3386 * 3.5) + 5.0)) * 0.25);
                                float _3410 = 1.0 - _630;
                                float _3417 = sqrt(1.0 - ((1.0 - (_3410 * _3410)) * (1.0 - (_3409 * _3409))));
                                float _3418 = _3417 * _3417;
                                float _3419 = _3418 * _3418;
                                float _3420 = _3366 - _2868;
                                float _3421 = _3367 - _2869;
                                float _3422 = _3368 - _2870;
                                float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                                float _3430 = dot(vec3(_570, _573, _576), vec3((-0.0) - _2868, (-0.0) - _2869, (-0.0) - _2870));
                                float _4504 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3433 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3434 = dot(vec3(_570, _573, _576), vec3(_3426 * _3420, _3426 * _3421, _3426 * _3422));
                                float _4515 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3437 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3441 = ((_3437 * _3437) * (_3419 + (-1.0))) + 1.0;
                                float _3442 = _3379 * _3418;
                                float _3443 = _3442 * _3442;
                                float _3449 = ((1.0 - _3443) * dot(vec3(_570, _573, _576), vec3(_3366, _3367, _3368))) + _3443;
                                float _4526 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3451 = 1.0 - _3418;
                                float _3461 = (0.5 / (((_3450 * ((_3433 * _3451) + _3418)) + 9.9999999392252902907785028219223e-09) + (((_3450 * _3451) + _3418) * _3433))) * _3450;
                                float _4537 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3471 = (_3396 * _3373) * (((_3419 * 3.1415927410125732421875) * (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) / ((_3441 * _3441) * ((_3386 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3471 * _3253.z;
                                frontier_phi_80_pred_1 = _3471 * _3253.y;
                                frontier_phi_80_pred_2 = _3471 * _3253.x;
                                frontier_phi_80_pred_3 = _3397 * _3241.z;
                                frontier_phi_80_pred_4 = _3397 * _3241.y;
                                frontier_phi_80_pred_5 = _3397 * _3241.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3477 = frontier_phi_80_pred;
                            _3476 = frontier_phi_80_pred_1;
                            _3475 = frontier_phi_80_pred_2;
                            _3480 = frontier_phi_80_pred_3;
                            _3479 = frontier_phi_80_pred_4;
                            _3478 = frontier_phi_80_pred_5;
                            _3183 = _3478 + _3196;
                            _3184 = _3479 + _3197;
                            _3185 = _3480 + _3198;
                            _3180 = _3475 + _3193;
                            _3181 = _3476 + _3194;
                            _3182 = _3477 + _3195;
                            if (_3200 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3200;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3182;
                        frontier_phi_74_pred_1 = _3181;
                        frontier_phi_74_pred_2 = _3180;
                        frontier_phi_74_pred_3 = _3185;
                        frontier_phi_74_pred_4 = _3184;
                        frontier_phi_74_pred_5 = _3183;
                    }
                    _2847 = frontier_phi_74_pred;
                    _2845 = frontier_phi_74_pred_1;
                    _2843 = frontier_phi_74_pred_2;
                    _2853 = frontier_phi_74_pred_3;
                    _2851 = frontier_phi_74_pred_4;
                    _2849 = frontier_phi_74_pred_5;
                    uint _2988 = _2987 + 1u;
                    if (_2988 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2981 = _2843;
                        _2982 = _2845;
                        _2983 = _2847;
                        _2984 = _2849;
                        _2985 = _2851;
                        _2986 = _2853;
                        _2987 = _2988;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2851;
                frontier_phi_62_63_ladder_1 = _2849;
                frontier_phi_62_63_ladder_2 = _2847;
                frontier_phi_62_63_ladder_3 = _2853;
                frontier_phi_62_63_ladder_4 = _2845;
                frontier_phi_62_63_ladder_5 = _2843;
            }
            else
            {
                frontier_phi_62_63_ladder = _2729;
                frontier_phi_62_63_ladder_1 = _2727;
                frontier_phi_62_63_ladder_2 = _2725;
                frontier_phi_62_63_ladder_3 = _2731;
                frontier_phi_62_63_ladder_4 = _2723;
                frontier_phi_62_63_ladder_5 = _2721;
            }
            _2842 = frontier_phi_62_63_ladder_5;
            _2844 = frontier_phi_62_63_ladder_4;
            _2846 = frontier_phi_62_63_ladder_2;
            _2848 = frontier_phi_62_63_ladder_1;
            _2850 = frontier_phi_62_63_ladder;
            _2852 = frontier_phi_62_63_ladder_3;
        }
        float _2857 = isnan(1.0) ? _614 : (isnan(_614) ? 1.0 : min(_614, 1.0));
        _2623 = (_2857 * _2848) + _2155;
        _2625 = (_2857 * _2850) + _2157;
        _2627 = (_2857 * _2852) + _2159;
        _2629 = ((_2842 * 0.039999999105930328369140625) * _2857) + _2478;
        _2631 = ((_2844 * 0.039999999105930328369140625) * _2857) + _2480;
        _2633 = ((_2846 * 0.039999999105930328369140625) * _2857) + _2482;
    }
    else
    {
        _2623 = _2155;
        _2625 = _2157;
        _2627 = _2159;
        _2629 = _2478;
        _2631 = _2480;
        _2633 = _2482;
    }
    uint _2639 = _590 + uint(cbMatDynParam._m0[0u].w);
    float _2645 = (((((_422.x * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _393)) + (_456.x * cbMtdParam._m0[12u].x)) + (_487.x * cbMtdParam._m0[13u].x)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2639].x;
    float _2646 = (((((_422.y * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _393)) + (_456.y * cbMtdParam._m0[12u].y)) + (_487.y * cbMtdParam._m0[13u].y)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2639].y;
    float _2647 = (((((_422.z * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _393)) + (_456.z * cbMtdParam._m0[12u].z)) + (_487.z * cbMtdParam._m0[13u].z)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2639].z;
    float _4553 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4564 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4575 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4586 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _2665 = (((isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2623 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _614))) + ((_2629 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1421)) * cbPerFrame._m0[3u].x)) + _2645;
    float _2667 = (_2646 + ((_2631 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1421)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2625 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _614)));
    float _2669 = (_2647 + ((_2633 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1421)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2627 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _614)));
    float _4612 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2682 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2687 = cbInstanceData._m0[_589 + 6u].w * (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)));
    float _2692 = _549 / cbSceneParam._m0[86u].x;
    float _2693 = _550 / cbSceneParam._m0[86u].y;
    vec4 _2707 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2692, _2693, (log2((isnan(cbSceneParam._m0[77u].w) ? _543 : (isnan(_543) ? cbSceneParam._m0[77u].w : min(_543, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2709 = _2707.x;
    float _2710 = _2707.y;
    float _2711 = _2707.z;
    float _2712 = _2707.w;
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    if (_543 > cbSceneParam._m0[78u].w)
    {
        float _2746 = isnan(_543) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _543 : min(cbSceneParam._m0[80u].w, _543));
        float _2747 = _2746 / _543;
        float _2758 = _2747 * _278;
        float _2759 = _279 * _2747;
        float _2760 = (-0.0) - _2759;
        float _2761 = _2747 * _280;
        float _2763 = (cbSceneParam._m0[77u].w * _2760) / _2746;
        float _2764 = _2763 + cbSceneParam._m0[79u].w;
        float _2765 = cbSceneParam._m0[79u].w - _2759;
        float _2771 = sqrt(((_2758 * _2758) + (_2759 * _2759)) + (_2761 * _2761));
        float _2774 = (1.0 - (cbSceneParam._m0[77u].w / _2746)) * _2771;
        float _2779 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2781 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2943;
        if (abs((_2760 - _2763) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2943 = ((((_2764 > 0.0) ? exp2(_2779 * _2764) : (2.0 - exp2(_2781 * _2764))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2774;
        }
        else
        {
            float _2903 = 1.0 / cbSceneParam._m0[80u].x;
            float _2904 = isnan(_2765) ? _2764 : (isnan(_2764) ? _2765 : max(_2764, _2765));
            float _2905 = isnan(_2765) ? _2764 : (isnan(_2764) ? _2765 : min(_2764, _2765));
            float _2914 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : min(_2904, 0.0));
            float _2915 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : min(_2905, 0.0));
            _2943 = ((abs(_2771 / _2760) * cbSceneParam._m0[80u].y) * ((((_2914 - _2915) * 2.0) - ((exp2(_2779 * (isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0)))) - exp2(_2779 * (isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0))))) * _2903)) - ((exp2(_2781 * _2914) - exp2(_2781 * _2915)) * _2903))) + (_2774 * cbSceneParam._m0[80u].z);
        }
        vec4 _2945 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2692, _2693, 1.0), 0.0);
        float _2954 = exp2((_2943 * (-1.44269502162933349609375)) * (1.0 - _2945.w));
        float _2955 = log2(_2954);
        float _2971 = log2(_2712);
        _2783 = (exp2(_2971 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].x)) * _2945.x) / cbSceneParam._m0[78u].x)) + _2709;
        _2785 = (exp2(_2971 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].y)) * _2945.y) / cbSceneParam._m0[78u].y)) + _2710;
        _2787 = (exp2(_2971 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].z)) * _2945.z) / cbSceneParam._m0[78u].z)) + _2711;
        _2789 = _2954 * _2712;
    }
    else
    {
        _2783 = _2709;
        _2785 = _2710;
        _2787 = _2711;
        _2789 = _2712;
    }
    float _2801 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2802 = _2801 == 3.0;
    float _2803 = log2(_2789);
    float _2807 = exp2(_2803 * cbSceneParam._m0[78u].x);
    float _2808 = exp2(_2803 * cbSceneParam._m0[78u].y);
    float _2809 = exp2(_2803 * cbSceneParam._m0[78u].z);
    float _2810 = _2807 * (isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0)));
    float _2811 = _2808 * (isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0)));
    float _2812 = _2809 * (isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0)));
    float _2821 = (_2801 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2821 * (_2802 ? _2810 : (_2810 + (cbSceneParam._m0[72u].w * _2783)));
    SV_Target.y = _2821 * (_2802 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2785)));
    SV_Target.z = _2821 * (_2802 ? _2812 : (_2812 + (cbSceneParam._m0[72u].w * _2787)));
    SV_Target.w = _2687;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2645) * _2682) * _2807) * _2821;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2646) * _2682) * _2808) * _2821;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2647) * _2682) * _2809) * _2821;
    SV_Target_1.w = _2687;
}


