#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1018;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    float _294 = (cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _295 = (cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _308 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_294 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_295 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _314 = _308.x * cbMtdParam._m0[9u].x;
    float _315 = _308.y * cbMtdParam._m0[9u].y;
    float _316 = _308.z * cbMtdParam._m0[9u].z;
    float _318 = cbMtdParam._m0[14u].z * TEXCOORD_1.z;
    vec4 _331 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    float _333 = _331.x;
    vec4 _346 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    float _350 = _346.z;
    float _354 = (_346.x * 2.0) + (-1.0);
    float _356 = (_346.y * 2.0) + (-1.0);
    float _357 = dot(vec2(_354, _356), vec2(_354, _356));
    float _3389 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _363 = sqrt(1.0 - (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))));
    float _374 = fma(0.9591662883758544921875, _220, fma(0.2000000476837158203125, _213, _199 * 0.2000000476837158203125));
    float _378 = fma(0.9591662883758544921875, _221, fma(0.2000000476837158203125, _214, _200 * 0.2000000476837158203125));
    float _381 = fma(0.9591662883758544921875, _222, fma(0.2000000476837158203125, _215, _201 * 0.2000000476837158203125));
    float _385 = inversesqrt(dot(vec3(_374, _378, _381), vec3(_374, _378, _381)));
    float _392 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _393 = _392 * _276;
    float _394 = _392 * _277;
    float _395 = _392 * _278;
    float _399 = dot(vec4(_393, _394, _395, 0.0), vec4(_385 * _374, _385 * _378, _385 * _381, 0.0)) - cbMtdParam._m0[14u].x;
    float _3400 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _406 = exp2(log2(1.0 - (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].y, 0.001000000047497451305389404296875))));
    vec4 _435 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _469 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _500 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _522 = fma(_363, _220, fma(_356, _213, _354 * _199));
    float _525 = fma(_363, _221, fma(_356, _214, _354 * _200));
    float _528 = fma(_363, _222, fma(_356, _215, _354 * _201));
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    float _533 = _532 * _522;
    float _534 = _532 * _525;
    float _535 = _532 * _528;
    float _3416 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _536 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _3427 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _537 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _3438 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3449 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3460 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3471 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _541 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _557 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _563 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _564 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _584 = fma(_535, cbSceneParam._m0[5u].z, fma(_534, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _533));
    float _587 = fma(_535, cbSceneParam._m0[6u].z, fma(_534, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _533));
    float _590 = fma(_535, cbSceneParam._m0[7u].z, fma(_534, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _533));
    uint _603 = uint(roundEven(NORMAL.w)) * 13u;
    uint _604 = _603 + 9u;
    uint _605 = _604 + uint(cbMatDynParam._m0[0u].w);
    float _611 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0)))) * cbInstanceData._m0[_605].x;
    float _612 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) * cbInstanceData._m0[_605].y;
    float _613 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * cbInstanceData._m0[_605].z;
    float _3482 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _3493 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _3504 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _617 = 1.0 - _541;
    float _618 = _614 * _617;
    float _619 = _615 * _617;
    float _620 = _616 * _617;
    float _625 = (_614 + (-0.039999999105930328369140625)) * _541;
    float _626 = (_615 + (-0.039999999105930328369140625)) * _541;
    float _627 = (_616 + (-0.039999999105930328369140625)) * _541;
    float _628 = _625 + 0.039999999105930328369140625;
    float _630 = _626 + 0.039999999105930328369140625;
    float _631 = _627 + 0.039999999105930328369140625;
    vec4 _640 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _563, cbSceneParam._m0[86u].y * _564));
    float _643 = _640.x * TEXCOORD_1.w;
    float _644 = dot(vec3(_533, _534, _535), vec3(_393, _394, _395));
    float _647 = _644 * 2.0;
    float _651 = (_647 * _533) - _393;
    float _652 = (_647 * _534) - _394;
    float _653 = (_647 * _535) - _395;
    float _657 = abs(dot(vec3(_393, _394, _395), vec3(_533, _534, _535)));
    float _3515 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _659 = sqrt(_537);
    float _672 = exp2((_659 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_659 * 3.0));
    float _678 = (1.0 - _672) * ((_659 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _679 = _672 * _659;
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1017;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _742 = fma(_715, cbModelParam._m0[26u].z, fma(_711, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _707));
        float _746 = fma(_715, cbModelParam._m0[27u].z, fma(_711, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _707));
        float _750 = fma(_715, cbModelParam._m0[28u].z, fma(_711, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _707));
        float _775 = _707 + _533;
        float _776 = _711 + _534;
        float _777 = _715 + _535;
        float _787 = fma(_777, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775)) - _742;
        float _788 = fma(_777, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775)) - _746;
        float _789 = fma(_777, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775)) - _750;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_742 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_746 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[34u].z) + ((((((_750 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _845 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_811.x + (-0.5));
        float _847 = _845 * (_811.y + (-0.5));
        float _848 = _845 * (_811.z + (-0.5));
        float _855 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_818.x + (-0.5));
        float _857 = _855 * (_818.y + (-0.5));
        float _858 = _855 * (_818.z + (-0.5));
        float _865 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_825.x + (-0.5));
        float _867 = _865 * (_825.y + (-0.5));
        float _868 = _865 * (_825.z + (-0.5));
        float _875 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_832.x + (-0.5));
        float _877 = _875 * (_832.y + (-0.5));
        float _878 = _875 * (_832.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _899 = (dot(vec3(_533, _534, _535), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _909 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3563 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_911 + 1.0))) + _916) * _879;
        float _926 = _847 * 0.5;
        float _927 = _857 * 0.5;
        float _928 = _867 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_533, _534, _535), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3596 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_953 + 1.0))) + _958) * _880;
        float _968 = _848 * 0.5;
        float _969 = _858 * 0.5;
        float _970 = _868 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_533, _534, _535), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3629 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_995 + 1.0))) + _1000) * _881;
        _1017 = _848;
        _1019 = _847;
        _1020 = _846;
        _1021 = _858;
        _1022 = _857;
        _1023 = _856;
        _1024 = _868;
        _1025 = _867;
        _1026 = _866;
        _1027 = _881;
        _1028 = _880;
        _1029 = _879;
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _1018;
        _1019 = _1018;
        _1020 = _1018;
        _1021 = _1018;
        _1022 = _1018;
        _1023 = _1018;
        _1024 = _1018;
        _1025 = _1018;
        _1026 = _1018;
        _1027 = _1018;
        _1028 = _1018;
        _1029 = _1018;
        _1030 = 0.0;
        _1031 = 0.0;
        _1032 = 0.0;
    }
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1058 = fma(_715, cbModelParam._m0[30u].z, fma(_711, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _707));
        float _1062 = fma(_715, cbModelParam._m0[31u].z, fma(_711, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _707));
        float _1066 = fma(_715, cbModelParam._m0[32u].z, fma(_711, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _707));
        float _1089 = _707 + _533;
        float _1090 = _711 + _534;
        float _1091 = _715 + _535;
        float _1101 = fma(_1091, cbModelParam._m0[30u].z, fma(_1090, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1089)) - _1058;
        float _1102 = fma(_1091, cbModelParam._m0[31u].z, fma(_1090, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1089)) - _1062;
        float _1103 = fma(_1091, cbModelParam._m0[32u].z, fma(_1090, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1089)) - _1066;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1058 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1062 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[35u].z) + ((((((_1066 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1157 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1124.x + (-0.5));
        float _1159 = _1157 * (_1124.y + (-0.5));
        float _1160 = _1157 * (_1124.z + (-0.5));
        float _1167 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1131.x + (-0.5));
        float _1169 = _1167 * (_1131.y + (-0.5));
        float _1170 = _1167 * (_1131.z + (-0.5));
        float _1177 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1138.x + (-0.5));
        float _1179 = _1177 * (_1138.y + (-0.5));
        float _1180 = _1177 * (_1138.z + (-0.5));
        float _1187 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1145.x + (-0.5));
        float _1189 = _1187 * (_1145.y + (-0.5));
        float _1190 = _1187 * (_1145.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_533, _534, _535), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3692 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1221 + 1.0))) + _1226) * _1191;
        float _1236 = _1159 * 0.5;
        float _1237 = _1169 * 0.5;
        float _1238 = _1179 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_533, _534, _535), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3725 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1263 + 1.0))) + _1268) * _1192;
        float _1278 = _1160 * 0.5;
        float _1279 = _1170 * 0.5;
        float _1280 = _1180 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_533, _534, _535), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3758 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1305 + 1.0))) + _1310) * _1193;
        _1327 = _1160;
        _1328 = _1159;
        _1329 = _1158;
        _1330 = _1170;
        _1331 = _1169;
        _1332 = _1168;
        _1333 = _1180;
        _1334 = _1179;
        _1335 = _1178;
        _1336 = _1193;
        _1337 = _1192;
        _1338 = _1191;
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
    }
    else
    {
        _1327 = _1018;
        _1328 = _1018;
        _1329 = _1018;
        _1330 = _1018;
        _1331 = _1018;
        _1332 = _1018;
        _1333 = _1018;
        _1334 = _1018;
        _1335 = _1018;
        _1336 = _1018;
        _1337 = _1018;
        _1338 = _1018;
        _1339 = 0.0;
        _1340 = 0.0;
        _1341 = 0.0;
    }
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1030)) + _1030;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1031)) + _1031;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1032)) + _1032;
    float _1374 = fma(_1353, cbSceneParam._m0[89u].z, fma(_1352, cbSceneParam._m0[89u].y, _1351 * cbSceneParam._m0[89u].x));
    float _1377 = fma(_1353, cbSceneParam._m0[90u].z, fma(_1352, cbSceneParam._m0[90u].y, _1351 * cbSceneParam._m0[90u].x));
    float _1380 = fma(_1353, cbSceneParam._m0[91u].z, fma(_1352, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1351));
    float _1395 = _651 * 0.5;
    float _1396 = _652 * 0.5;
    float _1397 = _653 * 0.5;
    float _1398 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1401 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1404 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1438;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1411 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1017, _1021, _1024, _1027));
        float _1415 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1419 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1426 = dot(vec4(cbModelParam._m0[39u]), vec4(_1395, _1396, _1397, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1426) ? 0.0 : (isnan(0.0) ? _1426 : max(0.0, _1426))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1449;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1440 = dot(vec4(cbModelParam._m0[40u]), vec4(_1395, _1396, _1397, 1.0));
        _1449 = dot(vec3(isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1440) ? 0.0 : (isnan(0.0) ? _1440 : max(0.0, _1440))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1449 = 1.0;
    }
    float _1453 = (_1449 * cbModelParam._m0[1u].x) + (_1438 * (1.0 - cbModelParam._m0[1u].x));
    float _1463 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _537);
    float _1464 = isnan(_1463) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1463 : min(cbModelParam._m0[25u].z, _1463));
    float _1544;
    float _1546;
    float _1548;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1511 = fma(_715, cbModelParam._m0[13u].z, fma(_711, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707)) + cbModelParam._m0[13u].w;
        float _1515 = fma(_715, cbModelParam._m0[14u].z, fma(_711, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707)) + cbModelParam._m0[14u].w;
        float _1519 = fma(_715, cbModelParam._m0[15u].z, fma(_711, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707)) + cbModelParam._m0[15u].w;
        float _1522 = fma(_653, cbModelParam._m0[13u].z, fma(_652, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _651));
        float _1525 = fma(_653, cbModelParam._m0[14u].z, fma(_652, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _651));
        float _1528 = fma(_653, cbModelParam._m0[15u].z, fma(_652, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _651));
        float _1556;
        if (_1522 > 0.0)
        {
            _1556 = abs((1.0 - _1511) / _1522);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1511 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1556 = frontier_phi_16_14_ladder;
        }
        float _1761;
        if (_1525 > 0.0)
        {
            _1761 = abs((1.0 - _1515) / _1525);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1515 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1761 = frontier_phi_25_21_ladder;
        }
        float _2015;
        if (_1528 > 0.0)
        {
            _2015 = abs((1.0 - _1519) / _1528);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1519 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2015 = frontier_phi_37_32_ladder;
        }
        float _2017 = isnan(_1761) ? _1556 : (isnan(_1556) ? _1761 : min(_1556, _1761));
        float _2018 = isnan(_2015) ? _2017 : (isnan(_2017) ? _2015 : min(_2017, _2015));
        float _2022 = (_2018 * _1522) + _1511;
        float _2023 = (_2018 * _1525) + _1515;
        float _2024 = (_2018 * _1528) + _1519;
        float _2025 = _2018 * 9.9999997473787516355514526367188e-05;
        float _2027 = (-1.0) - _2025;
        float _2029 = _2025 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2024 > _2029) || ((_2024 < _2027) || ((_2023 > _2029) || ((_2023 < _2027) || ((_2022 < _2027) || (_2022 > _2029))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2152 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2024, cbModelParam._m0[9u].z, fma(_2023, cbModelParam._m0[9u].y, _2022 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2024, cbModelParam._m0[10u].z, fma(_2023, cbModelParam._m0[10u].y, _2022 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2024, cbModelParam._m0[11u].z, fma(_2023, cbModelParam._m0[11u].y, _2022 * cbModelParam._m0[11u].x))), _1464);
            frontier_phi_15_37_ladder = _2152.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2152.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2152.x * cbModelParam._m0[1u].y;
        }
        _1544 = frontier_phi_15_37_ladder_2;
        _1546 = frontier_phi_15_37_ladder_1;
        _1548 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_651, _652, _653), _1464);
        _1544 = _1532.x * cbModelParam._m0[1u].y;
        _1546 = _1532.y * cbModelParam._m0[1u].y;
        _1548 = _1532.z * cbModelParam._m0[1u].y;
    }
    float _1552 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _537);
    float _1553 = isnan(_1552) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1552 : min(cbModelParam._m0[25u].w, _1552));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1609 = fma(_715, cbModelParam._m0[21u].z, fma(_711, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707)) + cbModelParam._m0[21u].w;
        float _1613 = fma(_715, cbModelParam._m0[22u].z, fma(_711, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707)) + cbModelParam._m0[22u].w;
        float _1617 = fma(_715, cbModelParam._m0[23u].z, fma(_711, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707)) + cbModelParam._m0[23u].w;
        float _1620 = fma(_653, cbModelParam._m0[21u].z, fma(_652, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _651));
        float _1623 = fma(_653, cbModelParam._m0[22u].z, fma(_652, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _651));
        float _1626 = fma(_653, cbModelParam._m0[23u].z, fma(_652, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _651));
        float _1766;
        if (_1620 > 0.0)
        {
            _1766 = abs((1.0 - _1609) / _1620);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1609 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1766 = frontier_phi_27_23_ladder;
        }
        float _2042;
        if (_1623 > 0.0)
        {
            _2042 = abs((1.0 - _1613) / _1623);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1613 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2042 = frontier_phi_39_34_ladder;
        }
        float _2255;
        if (_1626 > 0.0)
        {
            _2255 = abs((1.0 - _1617) / _1626);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1617 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2255 = frontier_phi_48_45_ladder;
        }
        float _2257 = isnan(_2042) ? _1766 : (isnan(_1766) ? _2042 : min(_1766, _2042));
        float _2258 = isnan(_2255) ? _2257 : (isnan(_2257) ? _2255 : min(_2257, _2255));
        float _2262 = (_2258 * _1620) + _1609;
        float _2263 = (_2258 * _1623) + _1613;
        float _2264 = (_2258 * _1626) + _1617;
        float _2265 = _2258 * 9.9999997473787516355514526367188e-05;
        float _2266 = (-1.0) - _2265;
        float _2268 = _2265 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2264 > _2268) || ((_2264 < _2266) || ((_2263 > _2268) || ((_2263 < _2266) || ((_2262 < _2266) || (_2262 > _2268))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2493 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2264, cbModelParam._m0[17u].z, fma(_2263, cbModelParam._m0[17u].y, _2262 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2264, cbModelParam._m0[18u].z, fma(_2263, cbModelParam._m0[18u].y, _2262 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2264, cbModelParam._m0[19u].z, fma(_2263, cbModelParam._m0[19u].y, _2262 * cbModelParam._m0[19u].x))), _1553);
            frontier_phi_24_48_ladder = _2493.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2493.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2493.x * cbModelParam._m0[1u].z;
        }
        _1645 = frontier_phi_24_48_ladder_2;
        _1647 = frontier_phi_24_48_ladder_1;
        _1649 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_651, _652, _653), _1553);
        _1645 = _1629.x * cbModelParam._m0[1u].z;
        _1647 = _1629.y * cbModelParam._m0[1u].z;
        _1649 = _1629.z * cbModelParam._m0[1u].z;
    }
    float _1662 = (((_678 * _628) + _679) * _643) * ((cbModelParam._m0[1u].w * (_1645 - _1544)) + _1544);
    float _1664 = (((_678 * _630) + _679) * _643) * ((cbModelParam._m0[1u].w * (_1647 - _1546)) + _1546);
    float _1666 = (((_678 * _631) + _679) * _643) * ((cbModelParam._m0[1u].w * (_1649 - _1548)) + _1548);
    float _1669 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1664, cbSceneParam._m0[89u].y, _1662 * cbSceneParam._m0[89u].x));
    float _1672 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1664, cbSceneParam._m0[90u].y, _1662 * cbSceneParam._m0[90u].x));
    float _1675 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1664, cbSceneParam._m0[91u].y, _1662 * cbSceneParam._m0[91u].x));
    uvec4 _1685 = floatBitsToUint(cbInstanceData._m0[_603 + 5u]);
    uint _1687 = _1685.x * 14u;
    uint _1688 = _1687 + 13u;
    float _1695 = _643 + (-1.0);
    float _1700 = (cbLight._m0[_1688].x * _1695) + 1.0;
    float _1701 = (cbLight._m0[_1688].y * _1695) + 1.0;
    float _1702 = (cbLight._m0[_1688].z * _1695) + 1.0;
    float _1703 = (cbLight._m0[_1688].w * _1695) + 1.0;
    uint _1704 = _1687 + 5u;
    float _1710 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
    uint _1714 = _1687 + 4u;
    float _1720 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
    uint _1724 = _1687 | 1u;
    float _1735 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_533, _534, _535));
    float _1738 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_533, _534, _535));
    float _3894 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _3905 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1743 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * 0.3183098733425140380859375;
    float _1745 = (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * 0.3183098733425140380859375;
    float _1752 = ((cbLight._m0[_1704].x * _1710) * _1745) + ((cbLight._m0[_1714].x * _1720) * _1743);
    float _1753 = ((_1710 * cbLight._m0[_1704].y) * _1745) + ((_1720 * cbLight._m0[_1714].y) * _1743);
    float _1754 = ((_1710 * cbLight._m0[_1704].z) * _1745) + ((_1720 * cbLight._m0[_1714].z) * _1743);
    uvec4 _1758 = floatBitsToUint(cbLight._m0[_1687 + 12u]);
    bool _1760 = _1758.x == 0u;
    float _1771;
    float _1773;
    float _1775;
    if (_1760)
    {
        _1771 = _1752;
        _1773 = _1753;
        _1775 = _1754;
    }
    else
    {
        uint _1779 = _1687 + 6u;
        float _1795 = (dot(vec3(cbLight._m0[_1687 + 2u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _1796 = _1795 * _1795;
        float _3916 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1798 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _1771 = (((cbLight._m0[_1779].x * 0.3183098733425140380859375) * _1797) * _1798) + _1752;
        _1773 = (((cbLight._m0[_1779].y * 0.3183098733425140380859375) * _1797) * _1798) + _1753;
        _1775 = (((cbLight._m0[_1779].z * 0.3183098733425140380859375) * _1797) * _1798) + _1754;
    }
    bool _1778 = _1758.y == 0u;
    float _1816;
    float _1818;
    float _1820;
    if (_1778)
    {
        _1816 = _1771;
        _1818 = _1773;
        _1820 = _1775;
    }
    else
    {
        uint _1986 = _1687 + 7u;
        float _2002 = (dot(vec3(cbLight._m0[_1687 + 3u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _2003 = _2002 * _2002;
        float _3932 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2004 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _2005 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _1816 = (((cbLight._m0[_1986].x * 0.3183098733425140380859375) * _2004) * _2005) + _1771;
        _1818 = (((cbLight._m0[_1986].y * 0.3183098733425140380859375) * _2004) * _2005) + _1773;
        _1820 = (((cbLight._m0[_1986].z * 0.3183098733425140380859375) * _2004) * _2005) + _1775;
    }
    uint _1823 = _1687 + 8u;
    float _1836 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1687].w)) * _537) * 0.949999988079071044921875);
    float _1837 = _1836 * _1836;
    float _1838 = cbLight._m0[_1687].x + _393;
    float _1839 = cbLight._m0[_1687].y + _394;
    float _1840 = cbLight._m0[_1687].z + _395;
    float _1844 = inversesqrt(dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840)));
    float _1845 = _1844 * _1838;
    float _1846 = _1844 * _1839;
    float _1847 = _1844 * _1840;
    float _1848 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_1687].xyz));
    float _3948 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _1852 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _1853 = dot(vec3(_533, _534, _535), vec3(_1845, _1846, _1847));
    float _3970 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1857 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_1845, _1846, _1847));
    float _3981 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1861 = _1837 * _1837;
    float _1865 = ((_1856 * _1856) * (_1861 + (-1.0))) + 1.0;
    float _1873 = exp2(log2(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * 5.0);
    float _1874 = 0.959999978542327880859375 - _625;
    float _1876 = 0.959999978542327880859375 - _626;
    float _1877 = 0.959999978542327880859375 - _627;
    float _1884 = 1.0 - _1837;
    float _1895 = (0.5 / (((_1852 * ((_1851 * _1884) + _1837)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _1884) + _1837) * _1851))) * _1851;
    float _3992 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1897 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1861 / ((_1865 * _1865) * 3.141590118408203125));
    uint _1908 = _1687 + 9u;
    float _1919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _537) * 0.949999988079071044921875);
    float _1920 = _1919 * _1919;
    float _1921 = cbLight._m0[_1724].x + _393;
    float _1922 = cbLight._m0[_1724].y + _394;
    float _1923 = cbLight._m0[_1724].z + _395;
    float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
    float _1928 = _1927 * _1921;
    float _1929 = _1927 * _1922;
    float _1930 = _1927 * _1923;
    float _1931 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_1724].xyz));
    float _4003 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1935 = dot(vec3(_533, _534, _535), vec3(_1928, _1929, _1930));
    float _4014 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1939 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1928, _1929, _1930));
    float _4025 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1943 = _1920 * _1920;
    float _1947 = ((_1938 * _1938) * (_1943 + (-1.0))) + 1.0;
    float _1954 = exp2(log2(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * 5.0);
    float _1961 = 1.0 - _1920;
    float _1971 = (0.5 / (((_1852 * ((_1934 * _1961) + _1920)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _1961) + _1920) * _1934))) * _1934;
    float _4036 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1973 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1943 / ((_1947 * _1947) * 3.141590118408203125));
    float _1983 = (((((_1954 * _1874) + _628) * cbLight._m0[_1908].x) * _1973) * _1710) + (((((_1873 * _1874) + _628) * cbLight._m0[_1823].x) * _1897) * _1720);
    float _1984 = (((((_1954 * _1876) + _630) * cbLight._m0[_1908].y) * _1973) * _1710) + (((((_1873 * _1876) + _630) * cbLight._m0[_1823].y) * _1897) * _1720);
    float _1985 = (((((_1954 * _1877) + _631) * cbLight._m0[_1908].z) * _1973) * _1710) + (((((_1873 * _1877) + _631) * cbLight._m0[_1823].z) * _1897) * _1720);
    float _2047;
    float _2049;
    float _2051;
    if (_1760)
    {
        _2047 = _1983;
        _2049 = _1984;
        _2051 = _1985;
    }
    else
    {
        uint _2053 = _1687 + 2u;
        uint _2057 = _1687 + 10u;
        float _2071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _537) * 0.949999988079071044921875);
        float _2072 = _2071 * _2071;
        float _2073 = cbLight._m0[_2053].x + _393;
        float _2074 = cbLight._m0[_2053].y + _394;
        float _2075 = cbLight._m0[_2053].z + _395;
        float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
        float _2080 = _2079 * _2073;
        float _2081 = _2079 * _2074;
        float _2082 = _2079 * _2075;
        float _2083 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2053].xyz));
        float _4047 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2086 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2087 = dot(vec3(_533, _534, _535), vec3(_2080, _2081, _2082));
        float _4058 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2090 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2091 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2080, _2081, _2082));
        float _4069 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2095 = _2072 * _2072;
        float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
        float _2106 = exp2(log2(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * 5.0);
        float _2113 = 1.0 - _2072;
        float _2123 = (0.5 / (((_1852 * ((_2086 * _2113) + _2072)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _2113) + _2072) * _2086))) * _2086;
        float _4080 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2125 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
        float _2126 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _2047 = (((((_2106 * _1874) + _628) * cbLight._m0[_2057].x) * _2125) * _2126) + _1983;
        _2049 = (((((_2106 * _1876) + _630) * cbLight._m0[_2057].y) * _2125) * _2126) + _1984;
        _2051 = (((((_2106 * _1877) + _631) * cbLight._m0[_2057].z) * _2125) * _2126) + _1985;
    }
    float _2161;
    float _2163;
    float _2165;
    if (_1778)
    {
        _2161 = _2047;
        _2163 = _2049;
        _2165 = _2051;
    }
    else
    {
        uint _2172 = _1687 + 3u;
        uint _2176 = _1687 + 11u;
        float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _537) * 0.949999988079071044921875);
        float _2191 = _2190 * _2190;
        float _2192 = cbLight._m0[_2172].x + _393;
        float _2193 = cbLight._m0[_2172].y + _394;
        float _2194 = cbLight._m0[_2172].z + _395;
        float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
        float _2199 = _2198 * _2192;
        float _2200 = _2198 * _2193;
        float _2201 = _2198 * _2194;
        float _2202 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2172].xyz));
        float _4096 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2206 = dot(vec3(_533, _534, _535), vec3(_2199, _2200, _2201));
        float _4107 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2209 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2210 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2199, _2200, _2201));
        float _4118 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2214 = _2191 * _2191;
        float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
        float _2225 = exp2(log2(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * 5.0);
        float _2232 = 1.0 - _2191;
        float _2242 = (0.5 / (((_1852 * ((_2205 * _2232) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _2232) + _2191) * _2205))) * _2205;
        float _4129 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2244 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
        float _2245 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _2161 = (((((_2225 * _1874) + _628) * cbLight._m0[_2176].x) * _2244) * _2245) + _2047;
        _2163 = (((((_2225 * _1876) + _630) * cbLight._m0[_2176].y) * _2244) * _2245) + _2049;
        _2165 = (((((_2225 * _1877) + _631) * cbLight._m0[_2176].z) * _2244) * _2245) + _2051;
    }
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    float _2389;
    if (_1685.y == 0u)
    {
        float _2320 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2321 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2320;
        float _2322 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2320;
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2320;
        uvec4 _2335 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2336 = _2335.x;
        uint _2347 = uint((float(_2335.y) * floor(float(uint(cbSceneParam._m0[85u].y * _564) / _2336))) + floor(float(uint(cbSceneParam._m0[85u].x * _563) / _2336)));
        float _2357 = (log2(_2323 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2358 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        uint _2361 = uint(isnan(14.0) ? _2358 : (isnan(_2358) ? 14.0 : min(_2358, 14.0)));
        uvec4 _2366 = texelFetch(g_lightClusterGridBuffer, int(((_2361 << 2u) + (_2347 << 6u)) >> 2u));
        uint _2367 = _2366.x;
        uint _2368 = _2335.z;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        if (((((1u << ((_2368 >> 4u) & 15u)) + 4294967295u) & _2367) == 0u) || ((_2368 & 240u) == 0u))
        {
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
            _2508 = 0.0;
        }
        else
        {
            float _2499;
            float _2501;
            float _2503;
            float _2505;
            float _2507;
            float _2509;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            uint _2657 = 0u;
            uint _2666;
            bool _2667;
            for (;;)
            {
                _2666 = texelFetch(g_lightClassification, int((((_2361 << 5u) + (_2347 << 9u)) + (_2657 << 2u)) >> 2u)).x;
                _2667 = _2666 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2667)
                {
                    frontier_phi_63_pred = _2656;
                    frontier_phi_63_pred_1 = _2655;
                    frontier_phi_63_pred_2 = _2654;
                    frontier_phi_63_pred_3 = _2653;
                    frontier_phi_63_pred_4 = _2652;
                    frontier_phi_63_pred_5 = _2651;
                }
                else
                {
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    uint _2781;
                    _2775 = _2651;
                    _2776 = _2652;
                    _2777 = _2653;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2666;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    for (;;)
                    {
                        uint _2785 = uint(findLSB(_2781)) + (_2657 << 5u);
                        uint _2782 = (_2781 + 4294967295u) & _2781;
                        uint _2787 = _2785 * 48u;
                        vec4 _2801 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 3u)).x));
                        uint _2807 = (_2785 * 48u) + 4u;
                        vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 3u)).x));
                        uint _2826 = (_2785 * 48u) + 8u;
                        vec3 _2837 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x));
                        float _2841 = _2801.x - _2321;
                        float _2842 = _2801.y - _2322;
                        float _2843 = _2801.z - _2323;
                        float _2844 = dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843));
                        float _2847 = inversesqrt(_2844);
                        float _2848 = _2847 * _2841;
                        float _2849 = _2847 * _2842;
                        float _2850 = _2847 * _2843;
                        float _2851 = dot(vec3(_584, _587, _590), vec3(_2848, _2849, _2850));
                        float _2856 = 1.0 - (_2844 * _2801.w);
                        float _4155 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2857 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2858 = sqrt(_2844) * _2820.w;
                        float _2861 = 1.39999997615814208984375 / (_2858 + 1.39999997615814208984375);
                        float _2862 = _2861 * _2861;
                        float _2865 = ((1.0 - _2862) * _2851) + _2862;
                        float _2868 = _2858 * _2858;
                        float _2872 = ((isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0))) * _2857) / ((_2868 * 0.699999988079071044921875) + 1.0);
                        float _2876 = (-0.0) - _2321;
                        float _2877 = (-0.0) - _2322;
                        float _2878 = (-0.0) - _2323;
                        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
                        float _2883 = _2882 * _2876;
                        float _2884 = _2882 * _2877;
                        float _2885 = _2882 * _2878;
                        float _2893 = exp2(log2(1.0 / ((_2868 * 3.5) + 5.0)) * 0.25);
                        float _2894 = 1.0 - _659;
                        float _2901 = sqrt(1.0 - ((1.0 - (_2894 * _2894)) * (1.0 - (_2893 * _2893))));
                        float _2902 = _2901 * _2901;
                        float _2903 = _2902 * _2902;
                        float _2904 = _2883 + _2848;
                        float _2905 = _2884 + _2849;
                        float _2906 = _2885 + _2850;
                        float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
                        float _2914 = dot(vec3(_584, _587, _590), vec3(_2883, _2884, _2885));
                        float _4171 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2917 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                        float _2918 = dot(vec3(_584, _587, _590), vec3(_2910 * _2904, _2910 * _2905, _2910 * _2906));
                        float _4182 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2921 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2925 = ((_2921 * _2921) * (_2903 + (-1.0))) + 1.0;
                        float _2926 = _2861 * _2902;
                        float _2927 = _2926 * _2926;
                        float _2930 = ((1.0 - _2927) * _2851) + _2927;
                        float _4193 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                        float _2932 = 1.0 - _2902;
                        float _2942 = (0.5 / (((_2931 * ((_2917 * _2932) + _2902)) + 9.9999999392252902907785028219223e-09) + (((_2931 * _2932) + _2902) * _2917))) * _2931;
                        float _4204 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2953 = (((_2903 * 3.1415927410125732421875) * (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) / ((_2925 * _2925) * ((_2868 * 2.1991131305694580078125) + 3.141590118408203125))) * _2857;
                        _2710 = (_2872 * _2820.x) + _2778;
                        _2711 = (_2872 * _2820.y) + _2779;
                        _2712 = (_2872 * _2820.z) + _2780;
                        _2707 = (_2953 * _2837.x) + _2775;
                        _2708 = (_2953 * _2837.y) + _2776;
                        _2709 = (_2953 * _2837.z) + _2777;
                        if (_2782 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2775 = _2707;
                            _2776 = _2708;
                            _2777 = _2709;
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2782;
                        }
                    }
                    frontier_phi_63_pred = _2712;
                    frontier_phi_63_pred_1 = _2711;
                    frontier_phi_63_pred_2 = _2710;
                    frontier_phi_63_pred_3 = _2709;
                    frontier_phi_63_pred_4 = _2708;
                    frontier_phi_63_pred_5 = _2707;
                }
                _2509 = frontier_phi_63_pred;
                _2507 = frontier_phi_63_pred_1;
                _2505 = frontier_phi_63_pred_2;
                _2503 = frontier_phi_63_pred_3;
                _2501 = frontier_phi_63_pred_4;
                _2499 = frontier_phi_63_pred_5;
                uint _2658 = _2657 + 1u;
                if (_2658 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2651 = _2499;
                    _2652 = _2501;
                    _2653 = _2503;
                    _2654 = _2505;
                    _2655 = _2507;
                    _2656 = _2509;
                    _2657 = _2658;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
            _2508 = _2509;
        }
        uvec4 _2512 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2513 = _2512.z;
        uint _2515 = (_2513 >> 8u) & 15u;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((4294967295u << _2515) & _2367) == 0u)
        {
            _2619 = _2498;
            _2621 = _2500;
            _2623 = _2502;
            _2625 = _2504;
            _2627 = _2506;
            _2629 = _2508;
        }
        else
        {
            float _2644 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
            float _2645 = _2644 * _2321;
            float _2646 = _2644 * _2322;
            float _2647 = _2644 * _2323;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2515 < ((_2513 >> 12u) & 15u))
            {
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2758 = _2498;
                float _2759 = _2500;
                float _2760 = _2502;
                float _2761 = _2504;
                float _2762 = _2506;
                float _2763 = _2508;
                uint _2764 = _2515;
                uint _2773;
                bool _2774;
                for (;;)
                {
                    _2773 = texelFetch(g_lightClassification, int((((_2361 << 5u) + (_2347 << 9u)) + (_2764 << 2u)) >> 2u)).x;
                    _2774 = _2773 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2774)
                    {
                        frontier_phi_69_pred = _2763;
                        frontier_phi_69_pred_1 = _2762;
                        frontier_phi_69_pred_2 = _2761;
                        frontier_phi_69_pred_3 = _2760;
                        frontier_phi_69_pred_4 = _2759;
                        frontier_phi_69_pred_5 = _2758;
                    }
                    else
                    {
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _2971 = _2758;
                        float _2972 = _2759;
                        float _2973 = _2760;
                        float _2974 = _2761;
                        float _2975 = _2762;
                        float _2976 = _2763;
                        uint _2977 = _2773;
                        uint _2978;
                        vec4 _3003;
                        float _3004;
                        vec4 _3019;
                        vec3 _3031;
                        vec4 _3046;
                        vec4 _3062;
                        float _3109;
                        bool _3110;
                        for (;;)
                        {
                            uint _2988 = ((_2764 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2977));
                            _2978 = (_2977 + 4294967295u) & _2977;
                            uint _2990 = _2988 * 40u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            _3004 = _3003.w;
                            uint _3006 = (_2988 * 40u) + 4u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3021 = (_2988 * 40u) + 8u;
                            _3031 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x));
                            uint _3033 = (_2988 * 40u) + 16u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3049 = (_2988 * 40u) + 20u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3065 = (_2988 * 40u) + 24u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3084 = (_2988 * 40u) + 28u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3109 = fma(_2323, _3097.z, fma(_2322, _3097.y, _3097.x * _2321)) + _3097.w;
                            _3110 = !((fma(_2323, _3078.z, fma(_2322, _3078.y, _3078.x * _2321)) + _3078.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3110)
                            {
                                float _3137 = _3003.x - _2321;
                                float _3138 = _3003.y - _2322;
                                float _3139 = _3003.z - _2323;
                                float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                                float _3143 = inversesqrt(_3140);
                                float _3144 = _3143 * _3137;
                                float _3145 = _3143 * _3138;
                                float _3146 = _3143 * _3139;
                                float _3150 = 1.0 - (_3140 / (_3004 * _3004));
                                float _4215 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3155 = sqrt(_3140) * _3019.w;
                                float _3157 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                                float _3158 = _3157 * _3157;
                                float _3161 = ((1.0 - _3158) * dot(vec3(_3144, _3145, _3146), vec3(_584, _587, _590))) + _3158;
                                float _3164 = _3155 * _3155;
                                float _3168 = (fma(_2323, _3046.z, fma(_2322, _3046.y, _3046.x * _2321)) + _3046.w) / _3109;
                                float _3169 = (fma(_2323, _3062.z, fma(_2322, _3062.y, _3062.x * _2321)) + _3062.w) / _3109;
                                float _3173 = 1.0 - dot(vec2(_3168, _3169), vec2(_3168, _3169));
                                float _4231 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3175 = _3174 * (((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3151) / ((_3164 * 0.699999988079071044921875) + 1.0));
                                float _3187 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                                float _3188 = 1.0 - _659;
                                float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                                float _3196 = _3195 * _3195;
                                float _3197 = _3196 * _3196;
                                float _3198 = _3144 - _2645;
                                float _3199 = _3145 - _2646;
                                float _3200 = _3146 - _2647;
                                float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                                float _3208 = dot(vec3(_584, _587, _590), vec3((-0.0) - _2645, (-0.0) - _2646, (-0.0) - _2647));
                                float _4242 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3211 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3212 = dot(vec3(_584, _587, _590), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                                float _4253 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3215 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                                float _3220 = _3157 * _3196;
                                float _3221 = _3220 * _3220;
                                float _3227 = ((1.0 - _3221) * dot(vec3(_584, _587, _590), vec3(_3144, _3145, _3146))) + _3221;
                                float _4264 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3229 = 1.0 - _3196;
                                float _3239 = (0.5 / (((_3228 * ((_3211 * _3229) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3228 * _3229) + _3196) * _3211))) * _3228;
                                float _4275 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3249 = (_3174 * _3151) * (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) / ((_3219 * _3219) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3175 * _3019.z;
                                frontier_phi_75_pred_1 = _3175 * _3019.y;
                                frontier_phi_75_pred_2 = _3175 * _3019.x;
                                frontier_phi_75_pred_3 = _3249 * _3031.z;
                                frontier_phi_75_pred_4 = _3249 * _3031.y;
                                frontier_phi_75_pred_5 = _3249 * _3031.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3258 = frontier_phi_75_pred;
                            _3257 = frontier_phi_75_pred_1;
                            _3256 = frontier_phi_75_pred_2;
                            _3255 = frontier_phi_75_pred_3;
                            _3254 = frontier_phi_75_pred_4;
                            _3253 = frontier_phi_75_pred_5;
                            _2961 = _3256 + _2974;
                            _2962 = _3257 + _2975;
                            _2963 = _3258 + _2976;
                            _2958 = _3253 + _2971;
                            _2959 = _3254 + _2972;
                            _2960 = _3255 + _2973;
                            if (_2978 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2978;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2963;
                        frontier_phi_69_pred_1 = _2962;
                        frontier_phi_69_pred_2 = _2961;
                        frontier_phi_69_pred_3 = _2960;
                        frontier_phi_69_pred_4 = _2959;
                        frontier_phi_69_pred_5 = _2958;
                    }
                    _2630 = frontier_phi_69_pred;
                    _2628 = frontier_phi_69_pred_1;
                    _2626 = frontier_phi_69_pred_2;
                    _2624 = frontier_phi_69_pred_3;
                    _2622 = frontier_phi_69_pred_4;
                    _2620 = frontier_phi_69_pred_5;
                    uint _2765 = _2764 + 1u;
                    if (_2765 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2758 = _2620;
                        _2759 = _2622;
                        _2760 = _2624;
                        _2761 = _2626;
                        _2762 = _2628;
                        _2763 = _2630;
                        _2764 = _2765;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2630;
                frontier_phi_57_58_ladder_1 = _2628;
                frontier_phi_57_58_ladder_2 = _2626;
                frontier_phi_57_58_ladder_3 = _2624;
                frontier_phi_57_58_ladder_4 = _2622;
                frontier_phi_57_58_ladder_5 = _2620;
            }
            else
            {
                frontier_phi_57_58_ladder = _2508;
                frontier_phi_57_58_ladder_1 = _2506;
                frontier_phi_57_58_ladder_2 = _2504;
                frontier_phi_57_58_ladder_3 = _2502;
                frontier_phi_57_58_ladder_4 = _2500;
                frontier_phi_57_58_ladder_5 = _2498;
            }
            _2619 = frontier_phi_57_58_ladder_5;
            _2621 = frontier_phi_57_58_ladder_4;
            _2623 = frontier_phi_57_58_ladder_3;
            _2625 = frontier_phi_57_58_ladder_2;
            _2627 = frontier_phi_57_58_ladder_1;
            _2629 = frontier_phi_57_58_ladder;
        }
        float _2634 = isnan(1.0) ? _643 : (isnan(_643) ? 1.0 : min(_643, 1.0));
        _2379 = (_2634 * _2625) + _1816;
        _2381 = (_2634 * _2627) + _1818;
        _2383 = (_2634 * _2629) + _1820;
        _2385 = ((_2619 * _628) * _2634) + _2161;
        _2387 = ((_2621 * _630) * _2634) + _2163;
        _2389 = ((_2623 * _631) * _2634) + _2165;
    }
    else
    {
        _2379 = _1816;
        _2381 = _1818;
        _2383 = _1820;
        _2385 = _2161;
        _2387 = _2163;
        _2389 = _2165;
    }
    uint _2395 = _604 + uint(cbMatDynParam._m0[0u].w);
    float _2401 = (((((_435.x * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _406)) + (_469.x * cbMtdParam._m0[12u].x)) + (_500.x * cbMtdParam._m0[13u].x)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2395].x;
    float _2402 = (((((_435.y * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _406)) + (_469.y * cbMtdParam._m0[12u].y)) + (_500.y * cbMtdParam._m0[13u].y)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2395].y;
    float _2403 = (((((_435.z * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _406)) + (_469.z * cbMtdParam._m0[12u].z)) + (_500.z * cbMtdParam._m0[13u].z)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2395].z;
    float _4291 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _4302 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4313 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4324 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _2421 = (((isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2379 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _643))) + ((_2385 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1453)) * cbPerFrame._m0[3u].x)) + _2401;
    float _2423 = (_2402 + ((_2387 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1453)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2381 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _643)));
    float _2425 = (_2403 + ((_2389 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1453)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2383 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _643)));
    float _4350 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2438 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2443 = cbInstanceData._m0[_603 + 6u].w * (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)));
    float _2448 = _563 / cbSceneParam._m0[86u].x;
    float _2449 = _564 / cbSceneParam._m0[86u].y;
    vec4 _2463 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2448, _2449, (log2((isnan(cbSceneParam._m0[77u].w) ? _557 : (isnan(_557) ? cbSceneParam._m0[77u].w : min(_557, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2465 = _2463.x;
    float _2466 = _2463.y;
    float _2467 = _2463.z;
    float _2468 = _2463.w;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    if (_557 > cbSceneParam._m0[78u].w)
    {
        float _2523 = isnan(_557) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _557 : min(cbSceneParam._m0[80u].w, _557));
        float _2524 = _2523 / _557;
        float _2535 = _2524 * _276;
        float _2536 = _277 * _2524;
        float _2537 = (-0.0) - _2536;
        float _2538 = _2524 * _278;
        float _2540 = (cbSceneParam._m0[77u].w * _2537) / _2523;
        float _2541 = _2540 + cbSceneParam._m0[79u].w;
        float _2542 = cbSceneParam._m0[79u].w - _2536;
        float _2548 = sqrt(((_2535 * _2535) + (_2536 * _2536)) + (_2538 * _2538));
        float _2551 = (1.0 - (cbSceneParam._m0[77u].w / _2523)) * _2548;
        float _2556 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2558 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2720;
        if (abs((_2537 - _2540) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2720 = ((((_2541 > 0.0) ? exp2(_2556 * _2541) : (2.0 - exp2(_2558 * _2541))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2551;
        }
        else
        {
            float _2680 = 1.0 / cbSceneParam._m0[80u].x;
            float _2681 = isnan(_2542) ? _2541 : (isnan(_2541) ? _2542 : max(_2541, _2542));
            float _2682 = isnan(_2542) ? _2541 : (isnan(_2541) ? _2542 : min(_2541, _2542));
            float _2691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : min(_2681, 0.0));
            float _2692 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : min(_2682, 0.0));
            _2720 = ((abs(_2548 / _2537) * cbSceneParam._m0[80u].y) * ((((_2691 - _2692) * 2.0) - ((exp2(_2556 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0)))) - exp2(_2556 * (isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0))))) * _2680)) - ((exp2(_2558 * _2691) - exp2(_2558 * _2692)) * _2680))) + (_2551 * cbSceneParam._m0[80u].z);
        }
        vec4 _2722 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2448, _2449, 1.0), 0.0);
        float _2731 = exp2((_2720 * (-1.44269502162933349609375)) * (1.0 - _2722.w));
        float _2732 = log2(_2731);
        float _2748 = log2(_2468);
        _2560 = (exp2(_2748 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].x)) * _2722.x) / cbSceneParam._m0[78u].x)) + _2465;
        _2562 = (exp2(_2748 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].y)) * _2722.y) / cbSceneParam._m0[78u].y)) + _2466;
        _2564 = (exp2(_2748 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].z)) * _2722.z) / cbSceneParam._m0[78u].z)) + _2467;
        _2566 = _2731 * _2468;
    }
    else
    {
        _2560 = _2465;
        _2562 = _2466;
        _2564 = _2467;
        _2566 = _2468;
    }
    float _2578 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2579 = _2578 == 3.0;
    float _2580 = log2(_2566);
    float _2584 = exp2(_2580 * cbSceneParam._m0[78u].x);
    float _2585 = exp2(_2580 * cbSceneParam._m0[78u].y);
    float _2586 = exp2(_2580 * cbSceneParam._m0[78u].z);
    float _2587 = _2584 * (isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0)));
    float _2588 = _2585 * (isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0)));
    float _2589 = _2586 * (isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0)));
    float _2598 = (_2578 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2598 * (_2579 ? _2587 : (_2587 + (cbSceneParam._m0[72u].w * _2560)));
    SV_Target.y = _2598 * (_2579 ? _2588 : (_2588 + (cbSceneParam._m0[72u].w * _2562)));
    SV_Target.z = _2598 * (_2579 ? _2589 : (_2589 + (cbSceneParam._m0[72u].w * _2564)));
    SV_Target.w = _2443;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2401) * _2438) * _2584) * _2598;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2402) * _2438) * _2585) * _2598;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2403) * _2438) * _2586) * _2598;
    SV_Target_1.w = _2443;
}


