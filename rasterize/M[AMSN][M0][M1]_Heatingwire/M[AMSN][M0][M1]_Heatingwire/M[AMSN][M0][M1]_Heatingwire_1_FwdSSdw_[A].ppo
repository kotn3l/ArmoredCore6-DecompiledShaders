#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1065;
float _3514;
float _3515;
float _3516;
float _3517;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    float _300 = (cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _301 = (cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _314 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_300 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_301 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _320 = _314.x * cbMtdParam._m0[9u].x;
    float _321 = _314.y * cbMtdParam._m0[9u].y;
    float _322 = _314.z * cbMtdParam._m0[9u].z;
    float _324 = cbMtdParam._m0[14u].z * TEXCOORD_1.z;
    vec4 _337 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    float _339 = _337.x;
    vec4 _352 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    float _356 = _352.z;
    float _360 = (_352.x * 2.0) + (-1.0);
    float _362 = (_352.y * 2.0) + (-1.0);
    float _363 = dot(vec2(_360, _362), vec2(_360, _362));
    float _3526 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _369 = sqrt(1.0 - (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))));
    float _380 = fma(0.9591662883758544921875, _226, fma(0.2000000476837158203125, _219, _205 * 0.2000000476837158203125));
    float _384 = fma(0.9591662883758544921875, _227, fma(0.2000000476837158203125, _220, _206 * 0.2000000476837158203125));
    float _387 = fma(0.9591662883758544921875, _228, fma(0.2000000476837158203125, _221, _207 * 0.2000000476837158203125));
    float _391 = inversesqrt(dot(vec3(_380, _384, _387), vec3(_380, _384, _387)));
    float _398 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _399 = _398 * _282;
    float _400 = _398 * _283;
    float _401 = _398 * _284;
    float _405 = dot(vec4(_399, _400, _401, 0.0), vec4(_391 * _380, _391 * _384, _391 * _387, 0.0)) - cbMtdParam._m0[14u].x;
    float _3537 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _412 = exp2(log2(1.0 - (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].y, 0.001000000047497451305389404296875))));
    vec4 _441 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _475 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _506 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _528 = fma(_369, _226, fma(_362, _219, _360 * _205));
    float _531 = fma(_369, _227, fma(_362, _220, _360 * _206));
    float _534 = fma(_369, _228, fma(_362, _221, _360 * _207));
    float _538 = inversesqrt(dot(vec3(_528, _531, _534), vec3(_528, _531, _534)));
    float _539 = _538 * _528;
    float _540 = _538 * _531;
    float _541 = _538 * _534;
    float _3553 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _542 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _543 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _3575 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3586 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3597 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3608 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _547 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _563 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _568 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _570 = _568.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _744 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _750 = (cbMatDynParam._m0[5u].x * _744) + cbMatDynParam._m0[5u].y;
        float _3619 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _755 = (cbMatDynParam._m0[5u].z * _744) + cbMatDynParam._m0[5u].w;
        float _3630 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) - _751)) + _751) < ((_570 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _582 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _583 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _602 = fma(_541, cbSceneParam._m0[5u].z, fma(_540, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _539));
    float _605 = fma(_541, cbSceneParam._m0[6u].z, fma(_540, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _539));
    float _608 = fma(_541, cbSceneParam._m0[7u].z, fma(_540, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _539));
    uint _621 = uint(roundEven(NORMAL.w)) * 13u;
    uint _622 = _621 + 9u;
    uint _623 = _622 + uint(cbMatDynParam._m0[0u].w);
    float _629 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_623].x;
    float _630 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_623].y;
    float _631 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_623].z;
    float _3641 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _635 = 1.0 - _547;
    float _636 = _632 * _635;
    float _637 = _633 * _635;
    float _638 = _634 * _635;
    float _643 = (_632 + (-0.039999999105930328369140625)) * _547;
    float _644 = (_633 + (-0.039999999105930328369140625)) * _547;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _547;
    float _646 = _643 + 0.039999999105930328369140625;
    float _648 = _644 + 0.039999999105930328369140625;
    float _649 = _645 + 0.039999999105930328369140625;
    vec4 _658 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _582, cbSceneParam._m0[86u].y * _583));
    float _661 = _658.x * TEXCOORD_1.w;
    float _662 = dot(vec3(_539, _540, _541), vec3(_399, _400, _401));
    float _665 = _662 * 2.0;
    float _669 = (_665 * _539) - _399;
    float _670 = (_665 * _540) - _400;
    float _671 = (_665 * _541) - _401;
    float _675 = abs(dot(vec3(_399, _400, _401), vec3(_539, _540, _541)));
    float _3674 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _677 = sqrt(_543);
    float _690 = exp2((_677 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_677 * 3.0));
    float _696 = (1.0 - _690) * ((_677 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _697 = _690 * _677;
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1064;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _789 = fma(_733, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725));
        float _793 = fma(_733, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725));
        float _797 = fma(_733, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725));
        float _822 = _725 + _539;
        float _823 = _729 + _540;
        float _824 = _733 + _541;
        float _834 = fma(_824, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822)) - _789;
        float _835 = fma(_824, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822)) - _793;
        float _836 = fma(_824, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822)) - _797;
        float _840 = inversesqrt(dot(vec3(_834, _835, _836), vec3(_834, _835, _836)));
        float _853 = ((_840 * _834) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_789 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_840 * _835) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_793 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_840 * _836) / cbModelParam._m0[34u].z) + ((((((_797 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        float _892 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_858.x + (-0.5));
        float _894 = _892 * (_858.y + (-0.5));
        float _895 = _892 * (_858.z + (-0.5));
        float _902 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_865.x + (-0.5));
        float _904 = _902 * (_865.y + (-0.5));
        float _905 = _902 * (_865.z + (-0.5));
        float _912 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_872.x + (-0.5));
        float _914 = _912 * (_872.y + (-0.5));
        float _915 = _912 * (_872.z + (-0.5));
        float _922 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_879.x + (-0.5));
        float _924 = _922 * (_879.y + (-0.5));
        float _925 = _922 * (_879.z + (-0.5));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = _893 * 0.5;
        float _930 = _903 * 0.5;
        float _931 = _913 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _946 = (dot(vec3(_539, _540, _541), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _956 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3722 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_958 + 1.0))) + _963) * _926;
        float _973 = _894 * 0.5;
        float _974 = _904 * 0.5;
        float _975 = _914 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_539, _540, _541), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3755 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1000 + 1.0))) + _1005) * _927;
        float _1015 = _895 * 0.5;
        float _1016 = _905 * 0.5;
        float _1017 = _915 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_539, _540, _541), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3788 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1042 + 1.0))) + _1047) * _928;
        _1064 = _895;
        _1066 = _894;
        _1067 = _893;
        _1068 = _905;
        _1069 = _904;
        _1070 = _903;
        _1071 = _915;
        _1072 = _914;
        _1073 = _913;
        _1074 = _928;
        _1075 = _927;
        _1076 = _926;
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
    }
    else
    {
        _1064 = _1065;
        _1066 = _1065;
        _1067 = _1065;
        _1068 = _1065;
        _1069 = _1065;
        _1070 = _1065;
        _1071 = _1065;
        _1072 = _1065;
        _1073 = _1065;
        _1074 = _1065;
        _1075 = _1065;
        _1076 = _1065;
        _1077 = 0.0;
        _1078 = 0.0;
        _1079 = 0.0;
    }
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1108 = fma(_733, cbModelParam._m0[30u].z, fma(_729, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _725));
        float _1112 = fma(_733, cbModelParam._m0[31u].z, fma(_729, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _725));
        float _1116 = fma(_733, cbModelParam._m0[32u].z, fma(_729, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _725));
        float _1139 = _725 + _539;
        float _1140 = _729 + _540;
        float _1141 = _733 + _541;
        float _1151 = fma(_1141, cbModelParam._m0[30u].z, fma(_1140, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139)) - _1108;
        float _1152 = fma(_1141, cbModelParam._m0[31u].z, fma(_1140, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139)) - _1112;
        float _1153 = fma(_1141, cbModelParam._m0[32u].z, fma(_1140, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139)) - _1116;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1108 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1112 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[35u].z) + ((((((_1116 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1207 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1174.x + (-0.5));
        float _1209 = _1207 * (_1174.y + (-0.5));
        float _1210 = _1207 * (_1174.z + (-0.5));
        float _1217 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1181.x + (-0.5));
        float _1219 = _1217 * (_1181.y + (-0.5));
        float _1220 = _1217 * (_1181.z + (-0.5));
        float _1227 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1188.x + (-0.5));
        float _1229 = _1227 * (_1188.y + (-0.5));
        float _1230 = _1227 * (_1188.z + (-0.5));
        float _1237 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1195.x + (-0.5));
        float _1239 = _1237 * (_1195.y + (-0.5));
        float _1240 = _1237 * (_1195.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_539, _540, _541), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3851 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1271 + 1.0))) + _1276) * _1241;
        float _1286 = _1209 * 0.5;
        float _1287 = _1219 * 0.5;
        float _1288 = _1229 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_539, _540, _541), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3884 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1313 + 1.0))) + _1318) * _1242;
        float _1328 = _1210 * 0.5;
        float _1329 = _1220 * 0.5;
        float _1330 = _1230 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_539, _540, _541), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _3917 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1355 + 1.0))) + _1360) * _1243;
        _1377 = _1210;
        _1378 = _1209;
        _1379 = _1208;
        _1380 = _1220;
        _1381 = _1219;
        _1382 = _1218;
        _1383 = _1230;
        _1384 = _1229;
        _1385 = _1228;
        _1386 = _1243;
        _1387 = _1242;
        _1388 = _1241;
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1065;
        _1378 = _1065;
        _1379 = _1065;
        _1380 = _1065;
        _1381 = _1065;
        _1382 = _1065;
        _1383 = _1065;
        _1384 = _1065;
        _1385 = _1065;
        _1386 = _1065;
        _1387 = _1065;
        _1388 = _1065;
        _1389 = 0.0;
        _1390 = 0.0;
        _1391 = 0.0;
    }
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1077)) + _1077;
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1078)) + _1078;
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1079)) + _1079;
    float _1424 = fma(_1403, cbSceneParam._m0[89u].z, fma(_1402, cbSceneParam._m0[89u].y, _1401 * cbSceneParam._m0[89u].x));
    float _1427 = fma(_1403, cbSceneParam._m0[90u].z, fma(_1402, cbSceneParam._m0[90u].y, _1401 * cbSceneParam._m0[90u].x));
    float _1430 = fma(_1403, cbSceneParam._m0[91u].z, fma(_1402, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1401));
    float _1445 = _669 * 0.5;
    float _1446 = _670 * 0.5;
    float _1447 = _671 * 0.5;
    float _1448 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1451 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1454 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1488;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1461 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1064, _1068, _1071, _1074));
        float _1465 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1469 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1067, _1070, _1073, _1076));
        float _1476 = dot(vec4(cbModelParam._m0[39u]), vec4(_1445, _1446, _1447, 1.0));
        _1488 = dot(vec3(isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1488 = 1.0;
    }
    float _1499;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1490 = dot(vec4(cbModelParam._m0[40u]), vec4(_1445, _1446, _1447, 1.0));
        _1499 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1499 = 1.0;
    }
    float _1503 = (_1499 * cbModelParam._m0[1u].x) + (_1488 * (1.0 - cbModelParam._m0[1u].x));
    float _1513 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _543);
    float _1514 = isnan(_1513) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1513 : min(cbModelParam._m0[25u].z, _1513));
    float _1594;
    float _1596;
    float _1598;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1561 = fma(_733, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _725)) + cbModelParam._m0[13u].w;
        float _1565 = fma(_733, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _725)) + cbModelParam._m0[14u].w;
        float _1569 = fma(_733, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _725)) + cbModelParam._m0[15u].w;
        float _1572 = fma(_671, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669));
        float _1575 = fma(_671, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669));
        float _1578 = fma(_671, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669));
        float _1606;
        if (_1572 > 0.0)
        {
            _1606 = abs((1.0 - _1561) / _1572);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1561 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1606 = frontier_phi_19_17_ladder;
        }
        float _1832;
        if (_1575 > 0.0)
        {
            _1832 = abs((1.0 - _1565) / _1575);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1565 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1832 = frontier_phi_28_24_ladder;
        }
        float _2089;
        if (_1578 > 0.0)
        {
            _2089 = abs((1.0 - _1569) / _1578);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1569 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2089 = frontier_phi_40_35_ladder;
        }
        float _2091 = isnan(_1832) ? _1606 : (isnan(_1606) ? _1832 : min(_1606, _1832));
        float _2092 = isnan(_2089) ? _2091 : (isnan(_2091) ? _2089 : min(_2091, _2089));
        float _2096 = (_2092 * _1572) + _1561;
        float _2097 = (_2092 * _1575) + _1565;
        float _2098 = (_2092 * _1578) + _1569;
        float _2099 = _2092 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2099;
        float _2103 = _2099 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 > _2103) || ((_2097 < _2101) || ((_2096 < _2101) || (_2096 > _2103))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2226 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2098, cbModelParam._m0[9u].z, fma(_2097, cbModelParam._m0[9u].y, _2096 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2098, cbModelParam._m0[10u].z, fma(_2097, cbModelParam._m0[10u].y, _2096 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2098, cbModelParam._m0[11u].z, fma(_2097, cbModelParam._m0[11u].y, _2096 * cbModelParam._m0[11u].x))), _1514);
            frontier_phi_18_40_ladder = _2226.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2226.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2226.x * cbModelParam._m0[1u].y;
        }
        _1594 = frontier_phi_18_40_ladder_2;
        _1596 = frontier_phi_18_40_ladder_1;
        _1598 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1582 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_669, _670, _671), _1514);
        _1594 = _1582.x * cbModelParam._m0[1u].y;
        _1596 = _1582.y * cbModelParam._m0[1u].y;
        _1598 = _1582.z * cbModelParam._m0[1u].y;
    }
    float _1602 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _543);
    float _1603 = isnan(_1602) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1602 : min(cbModelParam._m0[25u].w, _1602));
    float _1695;
    float _1697;
    float _1699;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1659 = fma(_733, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _725)) + cbModelParam._m0[21u].w;
        float _1663 = fma(_733, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _725)) + cbModelParam._m0[22u].w;
        float _1667 = fma(_733, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _725)) + cbModelParam._m0[23u].w;
        float _1670 = fma(_671, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669));
        float _1673 = fma(_671, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669));
        float _1676 = fma(_671, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669));
        float _1837;
        if (_1670 > 0.0)
        {
            _1837 = abs((1.0 - _1659) / _1670);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1659 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1837 = frontier_phi_30_26_ladder;
        }
        float _2116;
        if (_1673 > 0.0)
        {
            _2116 = abs((1.0 - _1663) / _1673);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1663 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2116 = frontier_phi_42_37_ladder;
        }
        float _2329;
        if (_1676 > 0.0)
        {
            _2329 = abs((1.0 - _1667) / _1676);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1667 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2329 = frontier_phi_51_48_ladder;
        }
        float _2331 = isnan(_2116) ? _1837 : (isnan(_1837) ? _2116 : min(_1837, _2116));
        float _2332 = isnan(_2329) ? _2331 : (isnan(_2331) ? _2329 : min(_2331, _2329));
        float _2336 = (_2332 * _1670) + _1659;
        float _2337 = (_2332 * _1673) + _1663;
        float _2338 = (_2332 * _1676) + _1667;
        float _2339 = _2332 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2339;
        float _2342 = _2339 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2338 > _2342) || ((_2338 < _2340) || ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 < _2340) || (_2336 > _2342))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2567 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2338, cbModelParam._m0[17u].z, fma(_2337, cbModelParam._m0[17u].y, _2336 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2338, cbModelParam._m0[18u].z, fma(_2337, cbModelParam._m0[18u].y, _2336 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2338, cbModelParam._m0[19u].z, fma(_2337, cbModelParam._m0[19u].y, _2336 * cbModelParam._m0[19u].x))), _1603);
            frontier_phi_27_51_ladder = _2567.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2567.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2567.x * cbModelParam._m0[1u].z;
        }
        _1695 = frontier_phi_27_51_ladder_2;
        _1697 = frontier_phi_27_51_ladder_1;
        _1699 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1679 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_669, _670, _671), _1603);
        _1695 = _1679.x * cbModelParam._m0[1u].z;
        _1697 = _1679.y * cbModelParam._m0[1u].z;
        _1699 = _1679.z * cbModelParam._m0[1u].z;
    }
    float _1712 = (((_696 * _646) + _697) * _661) * ((cbModelParam._m0[1u].w * (_1695 - _1594)) + _1594);
    float _1714 = (((_696 * _648) + _697) * _661) * ((cbModelParam._m0[1u].w * (_1697 - _1596)) + _1596);
    float _1716 = (((_696 * _649) + _697) * _661) * ((cbModelParam._m0[1u].w * (_1699 - _1598)) + _1598);
    float _1719 = fma(_1716, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1722 = fma(_1716, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1725 = fma(_1716, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, _1712 * cbSceneParam._m0[91u].x));
    vec4 _1733 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_582, _583));
    float _1735 = _1733.w;
    float _1747 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1735);
    float _1748 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1735);
    float _1749 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1735);
    uvec4 _1753 = floatBitsToUint(cbInstanceData._m0[_621 + 5u]);
    uint _1755 = _1753.x * 14u;
    uint _1756 = _1755 + 13u;
    float _1763 = _661 + (-1.0);
    float _1768 = (cbLight._m0[_1756].x * _1763) + 1.0;
    float _1769 = (cbLight._m0[_1756].y * _1763) + 1.0;
    float _1770 = (cbLight._m0[_1756].z * _1763) + 1.0;
    float _1771 = (cbLight._m0[_1756].w * _1763) + 1.0;
    uint _1772 = _1755 + 5u;
    float _1778 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    uint _1782 = _1755 + 4u;
    float _1791 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    uint _1795 = _1755 | 1u;
    float _1806 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_539, _540, _541));
    float _1809 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_539, _540, _541));
    float _4053 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _4064 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1814 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1816 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _1823 = ((cbLight._m0[_1772].x * _1778) * _1816) + (((cbLight._m0[_1782].x * _1747) * _1791) * _1814);
    float _1824 = ((_1778 * cbLight._m0[_1772].y) * _1816) + (((cbLight._m0[_1782].y * _1748) * _1791) * _1814);
    float _1825 = ((_1778 * cbLight._m0[_1772].z) * _1816) + (((cbLight._m0[_1782].z * _1749) * _1791) * _1814);
    uvec4 _1829 = floatBitsToUint(cbLight._m0[_1755 + 12u]);
    bool _1831 = _1829.x == 0u;
    float _1842;
    float _1844;
    float _1846;
    if (_1831)
    {
        _1842 = _1823;
        _1844 = _1824;
        _1846 = _1825;
    }
    else
    {
        uint _1850 = _1755 + 6u;
        float _1866 = (dot(vec3(cbLight._m0[_1755 + 2u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _1867 = _1866 * _1866;
        float _4075 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1869 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _1842 = (((cbLight._m0[_1850].x * 0.3183098733425140380859375) * _1868) * _1869) + _1823;
        _1844 = (((cbLight._m0[_1850].y * 0.3183098733425140380859375) * _1868) * _1869) + _1824;
        _1846 = (((cbLight._m0[_1850].z * 0.3183098733425140380859375) * _1868) * _1869) + _1825;
    }
    bool _1849 = _1829.y == 0u;
    float _1887;
    float _1889;
    float _1891;
    if (_1849)
    {
        _1887 = _1842;
        _1889 = _1844;
        _1891 = _1846;
    }
    else
    {
        uint _2060 = _1755 + 7u;
        float _2076 = (dot(vec3(cbLight._m0[_1755 + 3u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _2077 = _2076 * _2076;
        float _4091 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2078 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2079 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _1887 = (((cbLight._m0[_2060].x * 0.3183098733425140380859375) * _2078) * _2079) + _1842;
        _1889 = (((cbLight._m0[_2060].y * 0.3183098733425140380859375) * _2078) * _2079) + _1844;
        _1891 = (((cbLight._m0[_2060].z * 0.3183098733425140380859375) * _2078) * _2079) + _1846;
    }
    uint _1894 = _1755 + 8u;
    float _1907 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1755].w)) * _543) * 0.949999988079071044921875);
    float _1908 = _1907 * _1907;
    float _1909 = cbLight._m0[_1755].x + _399;
    float _1910 = cbLight._m0[_1755].y + _400;
    float _1911 = cbLight._m0[_1755].z + _401;
    float _1915 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
    float _1916 = _1915 * _1909;
    float _1917 = _1915 * _1910;
    float _1918 = _1915 * _1911;
    float _1919 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_1755].xyz));
    float _4107 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _1923 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1924 = dot(vec3(_539, _540, _541), vec3(_1916, _1917, _1918));
    float _4129 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _1928 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_1916, _1917, _1918));
    float _4140 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1932 = _1908 * _1908;
    float _1936 = ((_1927 * _1927) * (_1932 + (-1.0))) + 1.0;
    float _1944 = exp2(log2(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * 5.0);
    float _1945 = 0.959999978542327880859375 - _643;
    float _1947 = 0.959999978542327880859375 - _644;
    float _1948 = 0.959999978542327880859375 - _645;
    float _1955 = 1.0 - _1908;
    float _1966 = (0.5 / (((_1923 * ((_1922 * _1955) + _1908)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _1955) + _1908) * _1922))) * _1922;
    float _4151 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1968 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1932 / ((_1936 * _1936) * 3.141590118408203125));
    uint _1982 = _1755 + 9u;
    float _1993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1795].w)) * _543) * 0.949999988079071044921875);
    float _1994 = _1993 * _1993;
    float _1995 = cbLight._m0[_1795].x + _399;
    float _1996 = cbLight._m0[_1795].y + _400;
    float _1997 = cbLight._m0[_1795].z + _401;
    float _2001 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
    float _2002 = _2001 * _1995;
    float _2003 = _2001 * _1996;
    float _2004 = _2001 * _1997;
    float _2005 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_1795].xyz));
    float _4162 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2009 = dot(vec3(_539, _540, _541), vec3(_2002, _2003, _2004));
    float _4173 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2012 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2013 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_2002, _2003, _2004));
    float _4184 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2017 = _1994 * _1994;
    float _2021 = ((_2012 * _2012) * (_2017 + (-1.0))) + 1.0;
    float _2028 = exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0);
    float _2035 = 1.0 - _1994;
    float _2045 = (0.5 / (((_1923 * ((_2008 * _2035) + _1994)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _2035) + _1994) * _2008))) * _2008;
    float _4195 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2047 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2017 / ((_2021 * _2021) * 3.141590118408203125));
    float _2057 = (((((_2028 * _1945) + _646) * cbLight._m0[_1982].x) * _2047) * _1778) + ((((cbLight._m0[_1894].x * _1747) * ((_1944 * _1945) + _646)) * _1968) * _1791);
    float _2058 = (((((_2028 * _1947) + _648) * cbLight._m0[_1982].y) * _2047) * _1778) + ((((cbLight._m0[_1894].y * _1748) * ((_1944 * _1947) + _648)) * _1968) * _1791);
    float _2059 = (((((_2028 * _1948) + _649) * cbLight._m0[_1982].z) * _2047) * _1778) + ((((cbLight._m0[_1894].z * _1749) * ((_1944 * _1948) + _649)) * _1968) * _1791);
    float _2121;
    float _2123;
    float _2125;
    if (_1831)
    {
        _2121 = _2057;
        _2123 = _2058;
        _2125 = _2059;
    }
    else
    {
        uint _2127 = _1755 + 2u;
        uint _2131 = _1755 + 10u;
        float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _543) * 0.949999988079071044921875);
        float _2146 = _2145 * _2145;
        float _2147 = cbLight._m0[_2127].x + _399;
        float _2148 = cbLight._m0[_2127].y + _400;
        float _2149 = cbLight._m0[_2127].z + _401;
        float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
        float _2154 = _2153 * _2147;
        float _2155 = _2153 * _2148;
        float _2156 = _2153 * _2149;
        float _2157 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2127].xyz));
        float _4206 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2160 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2161 = dot(vec3(_539, _540, _541), vec3(_2154, _2155, _2156));
        float _4217 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2165 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2154, _2155, _2156));
        float _4228 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2169 = _2146 * _2146;
        float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
        float _2180 = exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0);
        float _2187 = 1.0 - _2146;
        float _2197 = (0.5 / (((_1923 * ((_2160 * _2187) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _2187) + _2146) * _2160))) * _2160;
        float _4239 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2199 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
        float _2200 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _2121 = (((((_2180 * _1945) + _646) * cbLight._m0[_2131].x) * _2199) * _2200) + _2057;
        _2123 = (((((_2180 * _1947) + _648) * cbLight._m0[_2131].y) * _2199) * _2200) + _2058;
        _2125 = (((((_2180 * _1948) + _649) * cbLight._m0[_2131].z) * _2199) * _2200) + _2059;
    }
    float _2235;
    float _2237;
    float _2239;
    if (_1849)
    {
        _2235 = _2121;
        _2237 = _2123;
        _2239 = _2125;
    }
    else
    {
        uint _2246 = _1755 + 3u;
        uint _2250 = _1755 + 11u;
        float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _543) * 0.949999988079071044921875);
        float _2265 = _2264 * _2264;
        float _2266 = cbLight._m0[_2246].x + _399;
        float _2267 = cbLight._m0[_2246].y + _400;
        float _2268 = cbLight._m0[_2246].z + _401;
        float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
        float _2273 = _2272 * _2266;
        float _2274 = _2272 * _2267;
        float _2275 = _2272 * _2268;
        float _2276 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2246].xyz));
        float _4255 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2280 = dot(vec3(_539, _540, _541), vec3(_2273, _2274, _2275));
        float _4266 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2284 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2273, _2274, _2275));
        float _4277 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2288 = _2265 * _2265;
        float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
        float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0);
        float _2306 = 1.0 - _2265;
        float _2316 = (0.5 / (((_1923 * ((_2279 * _2306) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _2306) + _2265) * _2279))) * _2279;
        float _4288 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2318 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
        float _2319 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _2235 = (((((_2299 * _1945) + _646) * cbLight._m0[_2250].x) * _2318) * _2319) + _2121;
        _2237 = (((((_2299 * _1947) + _648) * cbLight._m0[_2250].y) * _2318) * _2319) + _2123;
        _2239 = (((((_2299 * _1948) + _649) * cbLight._m0[_2250].z) * _2318) * _2319) + _2125;
    }
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    if (_1753.y == 0u)
    {
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2394;
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2394;
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2394;
        uvec4 _2409 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2410 = _2409.x;
        uint _2421 = uint((float(_2409.y) * floor(float(uint(cbSceneParam._m0[85u].y * _583) / _2410))) + floor(float(uint(cbSceneParam._m0[85u].x * _582) / _2410)));
        float _2431 = (log2(_2397 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2432 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        uint _2435 = uint(isnan(14.0) ? _2432 : (isnan(_2432) ? 14.0 : min(_2432, 14.0)));
        uvec4 _2440 = texelFetch(g_lightClusterGridBuffer, int(((_2435 << 2u) + (_2421 << 6u)) >> 2u));
        uint _2441 = _2440.x;
        uint _2442 = _2409.z;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        if (((((1u << ((_2442 >> 4u) & 15u)) + 4294967295u) & _2441) == 0u) || ((_2442 & 240u) == 0u))
        {
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
        }
        else
        {
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            uint _2739 = 0u;
            uint _2748;
            bool _2749;
            for (;;)
            {
                _2748 = texelFetch(g_lightClassification, int((((_2435 << 5u) + (_2421 << 9u)) + (_2739 << 2u)) >> 2u)).x;
                _2749 = _2748 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2749)
                {
                    frontier_phi_68_pred = _2735;
                    frontier_phi_68_pred_1 = _2738;
                    frontier_phi_68_pred_2 = _2737;
                    frontier_phi_68_pred_3 = _2736;
                    frontier_phi_68_pred_4 = _2734;
                    frontier_phi_68_pred_5 = _2733;
                }
                else
                {
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    uint _2884;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2735;
                    _2881 = _2736;
                    _2882 = _2737;
                    _2883 = _2738;
                    _2884 = _2748;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    for (;;)
                    {
                        uint _2888 = uint(findLSB(_2884)) + (_2739 << 5u);
                        uint _2885 = (_2884 + 4294967295u) & _2884;
                        uint _2890 = _2888 * 48u;
                        vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2910 = (_2888 * 48u) + 4u;
                        vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2910)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 3u)).x));
                        uint _2929 = (_2888 * 48u) + 8u;
                        vec3 _2940 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x));
                        float _2944 = _2904.x - _2395;
                        float _2945 = _2904.y - _2396;
                        float _2946 = _2904.z - _2397;
                        float _2947 = dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946));
                        float _2950 = inversesqrt(_2947);
                        float _2951 = _2950 * _2944;
                        float _2952 = _2950 * _2945;
                        float _2953 = _2950 * _2946;
                        float _2954 = dot(vec3(_602, _605, _608), vec3(_2951, _2952, _2953));
                        float _2959 = 1.0 - (_2947 * _2904.w);
                        float _4314 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2960 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _2961 = sqrt(_2947) * _2923.w;
                        float _2964 = 1.39999997615814208984375 / (_2961 + 1.39999997615814208984375);
                        float _2965 = _2964 * _2964;
                        float _2968 = ((1.0 - _2965) * _2954) + _2965;
                        float _2971 = _2961 * _2961;
                        float _2975 = ((isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))) * _2960) / ((_2971 * 0.699999988079071044921875) + 1.0);
                        float _2979 = (-0.0) - _2395;
                        float _2980 = (-0.0) - _2396;
                        float _2981 = (-0.0) - _2397;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2996 = exp2(log2(1.0 / ((_2971 * 3.5) + 5.0)) * 0.25);
                        float _2997 = 1.0 - _677;
                        float _3004 = sqrt(1.0 - ((1.0 - (_2997 * _2997)) * (1.0 - (_2996 * _2996))));
                        float _3005 = _3004 * _3004;
                        float _3006 = _3005 * _3005;
                        float _3007 = _2986 + _2951;
                        float _3008 = _2987 + _2952;
                        float _3009 = _2988 + _2953;
                        float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
                        float _3017 = dot(vec3(_602, _605, _608), vec3(_2986, _2987, _2988));
                        float _4330 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3020 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3021 = dot(vec3(_602, _605, _608), vec3(_3013 * _3007, _3013 * _3008, _3013 * _3009));
                        float _4341 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3024 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3028 = ((_3024 * _3024) * (_3006 + (-1.0))) + 1.0;
                        float _3029 = _2964 * _3005;
                        float _3030 = _3029 * _3029;
                        float _3033 = ((1.0 - _3030) * _2954) + _3030;
                        float _4352 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3034 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3035 = 1.0 - _3005;
                        float _3045 = (0.5 / (((_3034 * ((_3020 * _3035) + _3005)) + 9.9999999392252902907785028219223e-09) + (((_3034 * _3035) + _3005) * _3020))) * _3034;
                        float _4363 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3056 = (((_3006 * 3.1415927410125732421875) * (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) / ((_3028 * _3028) * ((_2971 * 2.1991131305694580078125) + 3.141590118408203125))) * _2960;
                        _2808 = (_2975 * _2923.x) + _2881;
                        _2809 = (_2975 * _2923.y) + _2882;
                        _2810 = (_2975 * _2923.z) + _2883;
                        _2805 = (_3056 * _2940.x) + _2878;
                        _2806 = (_3056 * _2940.y) + _2879;
                        _2807 = (_3056 * _2940.z) + _2880;
                        if (_2885 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2807;
                            _2881 = _2808;
                            _2882 = _2809;
                            _2883 = _2810;
                            _2884 = _2885;
                        }
                    }
                    frontier_phi_68_pred = _2807;
                    frontier_phi_68_pred_1 = _2810;
                    frontier_phi_68_pred_2 = _2809;
                    frontier_phi_68_pred_3 = _2808;
                    frontier_phi_68_pred_4 = _2806;
                    frontier_phi_68_pred_5 = _2805;
                }
                _2577 = frontier_phi_68_pred;
                _2583 = frontier_phi_68_pred_1;
                _2581 = frontier_phi_68_pred_2;
                _2579 = frontier_phi_68_pred_3;
                _2575 = frontier_phi_68_pred_4;
                _2573 = frontier_phi_68_pred_5;
                uint _2740 = _2739 + 1u;
                if (_2740 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2733 = _2573;
                    _2734 = _2575;
                    _2735 = _2577;
                    _2736 = _2579;
                    _2737 = _2581;
                    _2738 = _2583;
                    _2739 = _2740;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
        }
        uvec4 _2586 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2587 = _2586.z;
        uint _2589 = (_2587 >> 8u) & 15u;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        if (((4294967295u << _2589) & _2441) == 0u)
        {
            _2701 = _2572;
            _2703 = _2574;
            _2705 = _2576;
            _2707 = _2578;
            _2709 = _2580;
            _2711 = _2582;
        }
        else
        {
            float _2726 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
            float _2727 = _2726 * _2395;
            float _2728 = _2726 * _2396;
            float _2729 = _2726 * _2397;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2589 < ((_2587 >> 12u) & 15u))
            {
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2712;
                float _2861 = _2572;
                float _2862 = _2574;
                float _2863 = _2576;
                float _2864 = _2578;
                float _2865 = _2580;
                float _2866 = _2582;
                uint _2867 = _2589;
                uint _2876;
                bool _2877;
                for (;;)
                {
                    _2876 = texelFetch(g_lightClassification, int((((_2435 << 5u) + (_2421 << 9u)) + (_2867 << 2u)) >> 2u)).x;
                    _2877 = _2876 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2877)
                    {
                        frontier_phi_79_pred = _2866;
                        frontier_phi_79_pred_1 = _2865;
                        frontier_phi_79_pred_2 = _2864;
                        frontier_phi_79_pred_3 = _2863;
                        frontier_phi_79_pred_4 = _2862;
                        frontier_phi_79_pred_5 = _2861;
                    }
                    else
                    {
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3083 = _2861;
                        float _3084 = _2862;
                        float _3085 = _2863;
                        float _3086 = _2864;
                        float _3087 = _2865;
                        float _3088 = _2866;
                        uint _3089 = _2876;
                        uint _3090;
                        vec4 _3115;
                        float _3116;
                        vec4 _3131;
                        vec3 _3143;
                        vec4 _3158;
                        vec4 _3174;
                        float _3221;
                        bool _3222;
                        for (;;)
                        {
                            uint _3100 = ((_2867 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3089));
                            _3090 = (_3089 + 4294967295u) & _3089;
                            uint _3102 = _3100 * 40u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            _3116 = _3115.w;
                            uint _3118 = (_3100 * 40u) + 4u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3133 = (_3100 * 40u) + 8u;
                            _3143 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x));
                            uint _3145 = (_3100 * 40u) + 16u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3161 = (_3100 * 40u) + 20u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3177 = (_3100 * 40u) + 24u;
                            vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3196 = (_3100 * 40u) + 28u;
                            vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            _3221 = fma(_2397, _3209.z, fma(_2396, _3209.y, _3209.x * _2395)) + _3209.w;
                            _3222 = !((fma(_2397, _3190.z, fma(_2396, _3190.y, _3190.x * _2395)) + _3190.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3222)
                            {
                                float _3249 = _3115.x - _2395;
                                float _3250 = _3115.y - _2396;
                                float _3251 = _3115.z - _2397;
                                float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                                float _3255 = inversesqrt(_3252);
                                float _3256 = _3255 * _3249;
                                float _3257 = _3255 * _3250;
                                float _3258 = _3255 * _3251;
                                float _3262 = 1.0 - (_3252 / (_3116 * _3116));
                                float _4374 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3267 = sqrt(_3252) * _3131.w;
                                float _3269 = 1.39999997615814208984375 / (_3267 + 1.39999997615814208984375);
                                float _3270 = _3269 * _3269;
                                float _3273 = ((1.0 - _3270) * dot(vec3(_3256, _3257, _3258), vec3(_602, _605, _608))) + _3270;
                                float _3276 = _3267 * _3267;
                                float _3280 = (fma(_2397, _3158.z, fma(_2396, _3158.y, _3158.x * _2395)) + _3158.w) / _3221;
                                float _3281 = (fma(_2397, _3174.z, fma(_2396, _3174.y, _3174.x * _2395)) + _3174.w) / _3221;
                                float _3285 = 1.0 - dot(vec2(_3280, _3281), vec2(_3280, _3281));
                                float _4390 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3286 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3287 = _3286 * (((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3263) / ((_3276 * 0.699999988079071044921875) + 1.0));
                                float _3299 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                                float _3300 = 1.0 - _677;
                                float _3307 = sqrt(1.0 - ((1.0 - (_3300 * _3300)) * (1.0 - (_3299 * _3299))));
                                float _3308 = _3307 * _3307;
                                float _3309 = _3308 * _3308;
                                float _3310 = _3256 - _2727;
                                float _3311 = _3257 - _2728;
                                float _3312 = _3258 - _2729;
                                float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                                float _3320 = dot(vec3(_602, _605, _608), vec3((-0.0) - _2727, (-0.0) - _2728, (-0.0) - _2729));
                                float _4401 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3324 = dot(vec3(_602, _605, _608), vec3(_3316 * _3310, _3316 * _3311, _3316 * _3312));
                                float _4412 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3331 = ((_3327 * _3327) * (_3309 + (-1.0))) + 1.0;
                                float _3332 = _3269 * _3308;
                                float _3333 = _3332 * _3332;
                                float _3339 = ((1.0 - _3333) * dot(vec3(_602, _605, _608), vec3(_3256, _3257, _3258))) + _3333;
                                float _4423 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3341 = 1.0 - _3308;
                                float _3351 = (0.5 / (((_3340 * ((_3323 * _3341) + _3308)) + 9.9999999392252902907785028219223e-09) + (((_3340 * _3341) + _3308) * _3323))) * _3340;
                                float _4434 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3361 = (_3286 * _3263) * (((_3309 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3331 * _3331) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3287 * _3131.z;
                                frontier_phi_85_pred_1 = _3287 * _3131.y;
                                frontier_phi_85_pred_2 = _3287 * _3131.x;
                                frontier_phi_85_pred_3 = _3361 * _3143.z;
                                frontier_phi_85_pred_4 = _3361 * _3143.y;
                                frontier_phi_85_pred_5 = _3361 * _3143.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3370 = frontier_phi_85_pred;
                            _3369 = frontier_phi_85_pred_1;
                            _3368 = frontier_phi_85_pred_2;
                            _3367 = frontier_phi_85_pred_3;
                            _3366 = frontier_phi_85_pred_4;
                            _3365 = frontier_phi_85_pred_5;
                            _3073 = _3368 + _3086;
                            _3074 = _3369 + _3087;
                            _3075 = _3370 + _3088;
                            _3070 = _3365 + _3083;
                            _3071 = _3366 + _3084;
                            _3072 = _3367 + _3085;
                            if (_3090 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3090;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3075;
                        frontier_phi_79_pred_1 = _3074;
                        frontier_phi_79_pred_2 = _3073;
                        frontier_phi_79_pred_3 = _3072;
                        frontier_phi_79_pred_4 = _3071;
                        frontier_phi_79_pred_5 = _3070;
                    }
                    _2712 = frontier_phi_79_pred;
                    _2710 = frontier_phi_79_pred_1;
                    _2708 = frontier_phi_79_pred_2;
                    _2706 = frontier_phi_79_pred_3;
                    _2704 = frontier_phi_79_pred_4;
                    _2702 = frontier_phi_79_pred_5;
                    uint _2868 = _2867 + 1u;
                    if (_2868 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2861 = _2702;
                        _2862 = _2704;
                        _2863 = _2706;
                        _2864 = _2708;
                        _2865 = _2710;
                        _2866 = _2712;
                        _2867 = _2868;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2708;
                frontier_phi_60_61_ladder_1 = _2712;
                frontier_phi_60_61_ladder_2 = _2710;
                frontier_phi_60_61_ladder_3 = _2706;
                frontier_phi_60_61_ladder_4 = _2704;
                frontier_phi_60_61_ladder_5 = _2702;
            }
            else
            {
                frontier_phi_60_61_ladder = _2578;
                frontier_phi_60_61_ladder_1 = _2582;
                frontier_phi_60_61_ladder_2 = _2580;
                frontier_phi_60_61_ladder_3 = _2576;
                frontier_phi_60_61_ladder_4 = _2574;
                frontier_phi_60_61_ladder_5 = _2572;
            }
            _2701 = frontier_phi_60_61_ladder_5;
            _2703 = frontier_phi_60_61_ladder_4;
            _2705 = frontier_phi_60_61_ladder_3;
            _2707 = frontier_phi_60_61_ladder;
            _2709 = frontier_phi_60_61_ladder_2;
            _2711 = frontier_phi_60_61_ladder_1;
        }
        float _2716 = isnan(1.0) ? _661 : (isnan(_661) ? 1.0 : min(_661, 1.0));
        _2453 = (_2716 * _2707) + _1887;
        _2455 = (_2716 * _2709) + _1889;
        _2457 = (_2716 * _2711) + _1891;
        _2459 = ((_2701 * _646) * _2716) + _2235;
        _2461 = ((_2703 * _648) * _2716) + _2237;
        _2463 = ((_2705 * _649) * _2716) + _2239;
    }
    else
    {
        _2453 = _1887;
        _2455 = _1889;
        _2457 = _1891;
        _2459 = _2235;
        _2461 = _2237;
        _2463 = _2239;
    }
    uint _2469 = _622 + uint(cbMatDynParam._m0[0u].w);
    float _2475 = (((((_441.x * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _412)) + (_475.x * cbMtdParam._m0[12u].x)) + (_506.x * cbMtdParam._m0[13u].x)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2469].x;
    float _2476 = (((((_441.y * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _412)) + (_475.y * cbMtdParam._m0[12u].y)) + (_506.y * cbMtdParam._m0[13u].y)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2469].y;
    float _2477 = (((((_441.z * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _412)) + (_475.z * cbMtdParam._m0[12u].z)) + (_506.z * cbMtdParam._m0[13u].z)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2469].z;
    float _4450 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4461 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4472 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4483 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _2495 = (((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2453 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _661))) + ((_2459 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1503)) * cbPerFrame._m0[3u].x)) + _2475;
    float _2497 = (_2476 + ((_2461 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1503)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2455 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _661)));
    float _2499 = (_2477 + ((_2463 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1503)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2457 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _661)));
    float _2500 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2501 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2502 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2508 = cbMtdParam._m0[2u].x * _2475;
    float _2509 = cbMtdParam._m0[2u].y * _2476;
    float _2510 = cbMtdParam._m0[2u].z * _2477;
    float _4509 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2512 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2517 = cbInstanceData._m0[_621 + 6u].w * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)));
    float _2522 = _582 / cbSceneParam._m0[86u].x;
    float _2523 = _583 / cbSceneParam._m0[86u].y;
    vec4 _2537 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2522, _2523, (log2((isnan(cbSceneParam._m0[77u].w) ? _563 : (isnan(_563) ? cbSceneParam._m0[77u].w : min(_563, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2539 = _2537.x;
    float _2540 = _2537.y;
    float _2541 = _2537.z;
    float _2542 = _2537.w;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    if (_563 > cbSceneParam._m0[78u].w)
    {
        float _2597 = isnan(_563) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _563 : min(cbSceneParam._m0[80u].w, _563));
        float _2598 = _2597 / _563;
        float _2609 = _2598 * _282;
        float _2610 = _283 * _2598;
        float _2611 = (-0.0) - _2610;
        float _2612 = _2598 * _284;
        float _2614 = (cbSceneParam._m0[77u].w * _2611) / _2597;
        float _2615 = _2614 + cbSceneParam._m0[79u].w;
        float _2616 = cbSceneParam._m0[79u].w - _2610;
        float _2622 = sqrt(((_2609 * _2609) + (_2610 * _2610)) + (_2612 * _2612));
        float _2625 = (1.0 - (cbSceneParam._m0[77u].w / _2597)) * _2622;
        float _2630 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2632 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2818;
        if (abs((_2611 - _2614) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2818 = ((((_2615 > 0.0) ? exp2(_2630 * _2615) : (2.0 - exp2(_2632 * _2615))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2625;
        }
        else
        {
            float _2762 = 1.0 / cbSceneParam._m0[80u].x;
            float _2763 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : max(_2615, _2616));
            float _2764 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : min(_2615, _2616));
            float _2773 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : min(_2763, 0.0));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            _2818 = ((abs(_2622 / _2611) * cbSceneParam._m0[80u].y) * ((((_2773 - _2774) * 2.0) - ((exp2(_2630 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)))) - exp2(_2630 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))))) * _2762)) - ((exp2(_2632 * _2773) - exp2(_2632 * _2774)) * _2762))) + (_2625 * cbSceneParam._m0[80u].z);
        }
        vec4 _2820 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2522, _2523, 1.0), 0.0);
        float _2829 = exp2((_2818 * (-1.44269502162933349609375)) * (1.0 - _2820.w));
        float _2830 = log2(_2829);
        float _2846 = log2(_2542);
        _2634 = (exp2(_2846 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].x)) * _2820.x) / cbSceneParam._m0[78u].x)) + _2539;
        _2636 = (exp2(_2846 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].y)) * _2820.y) / cbSceneParam._m0[78u].y)) + _2540;
        _2638 = (exp2(_2846 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].z)) * _2820.z) / cbSceneParam._m0[78u].z)) + _2541;
        _2640 = _2829 * _2542;
    }
    else
    {
        _2634 = _2539;
        _2636 = _2540;
        _2638 = _2541;
        _2640 = _2542;
    }
    bool _2856;
    vec4 _2650;
    vec4 _2672;
    float _2674;
    float _2678;
    float _2679;
    float _2680;
    float _2683;
    float _2686;
    float _2689;
    float _2690;
    bool _2700;
    for (;;)
    {
        _2650 = cbMatDynParam._m0[0u];
        float _2652 = roundEven(_2650.y);
        bool _2653 = _2652 == 3.0;
        float _2654 = log2(_2640);
        float _2658 = exp2(_2654 * cbSceneParam._m0[78u].x);
        float _2659 = exp2(_2654 * cbSceneParam._m0[78u].y);
        float _2660 = exp2(_2654 * cbSceneParam._m0[78u].z);
        float _2661 = _2658 * _2500;
        float _2662 = _2659 * _2501;
        float _2663 = _2660 * _2502;
        float _2670 = _570 + (-0.5);
        _2672 = cbMtdParam._m0[1u];
        _2674 = _2672.y * _2670;
        float _2677 = (_2652 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2678 = _2677 * (_2653 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2634)));
        _2679 = _2677 * (_2653 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2636)));
        _2680 = _2677 * (_2653 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2638)));
        _2683 = ((_2508 * _2512) * _2658) * _2677;
        _2686 = ((_2509 * _2512) * _2659) * _2677;
        _2689 = ((_2510 * _2512) * _2660) * _2677;
        _2690 = _2670 * 0.999000012874603271484375;
        _2700 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2700)
        {
            if ((cbInstanceData._m0[_621 + 7u].x + _2690) < 0.5)
            {
                _2856 = true;
                break;
            }
        }
        uint _2797 = _622 + uint(_2650.w);
        if ((cbInstanceData._m0[_2797].w < 1.0) && ((cbInstanceData._m0[_2797].w + _2690) < 0.5))
        {
            _2856 = true;
            break;
        }
        if ((_2674 + 1.0) < _2672.x)
        {
            _2856 = true;
            break;
        }
        _2856 = false;
        break;
    }
    float _3061;
    if (_2856)
    {
        discard_state = true;
        _3061 = 0.0;
    }
    else
    {
        _3061 = _2517;
    }
    SV_Target.x = _2678;
    SV_Target.y = _2679;
    SV_Target.z = _2680;
    SV_Target.w = _3061;
    SV_Target_1.x = _2683;
    SV_Target_1.y = _2686;
    SV_Target_1.z = _2689;
    SV_Target_1.w = _2517;
    discard_exit();
}


