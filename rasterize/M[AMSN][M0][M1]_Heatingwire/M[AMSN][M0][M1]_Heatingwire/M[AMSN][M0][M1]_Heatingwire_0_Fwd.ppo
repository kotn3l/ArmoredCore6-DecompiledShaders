#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _982;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _274 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _264);
    float _275 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _264);
    float _276 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _264);
    float _292 = (cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _293 = (cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _306 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_292 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_293 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _312 = _306.x * cbMtdParam._m0[9u].x;
    float _313 = _306.y * cbMtdParam._m0[9u].y;
    float _314 = _306.z * cbMtdParam._m0[9u].z;
    float _316 = cbMtdParam._m0[14u].z * TEXCOORD_1.z;
    vec4 _329 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    float _333 = _329.z;
    float _337 = (_329.x * 2.0) + (-1.0);
    float _339 = (_329.y * 2.0) + (-1.0);
    float _340 = dot(vec2(_337, _339), vec2(_337, _339));
    float _3333 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _346 = sqrt(1.0 - (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))));
    float _357 = fma(0.9591662883758544921875, _218, fma(0.2000000476837158203125, _211, _197 * 0.2000000476837158203125));
    float _361 = fma(0.9591662883758544921875, _219, fma(0.2000000476837158203125, _212, _198 * 0.2000000476837158203125));
    float _364 = fma(0.9591662883758544921875, _220, fma(0.2000000476837158203125, _213, _199 * 0.2000000476837158203125));
    float _368 = inversesqrt(dot(vec3(_357, _361, _364), vec3(_357, _361, _364)));
    float _375 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _376 = _375 * _274;
    float _377 = _375 * _275;
    float _378 = _375 * _276;
    float _382 = dot(vec4(_376, _377, _378, 0.0), vec4(_368 * _357, _368 * _361, _368 * _364, 0.0)) - cbMtdParam._m0[14u].x;
    float _3344 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _389 = exp2(log2(1.0 - (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].y, 0.001000000047497451305389404296875))));
    vec4 _418 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _452 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _483 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _505 = fma(_346, _218, fma(_339, _211, _337 * _197));
    float _508 = fma(_346, _219, fma(_339, _212, _337 * _198));
    float _511 = fma(_346, _220, fma(_339, _213, _337 * _199));
    float _515 = inversesqrt(dot(vec3(_505, _508, _511), vec3(_505, _508, _511)));
    float _516 = _515 * _505;
    float _517 = _515 * _508;
    float _518 = _515 * _511;
    float _3360 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _519 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    float _3371 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _520 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _3382 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3393 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3404 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _539 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _545 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _546 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _566 = fma(_518, cbSceneParam._m0[5u].z, fma(_517, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _516));
    float _569 = fma(_518, cbSceneParam._m0[6u].z, fma(_517, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _516));
    float _572 = fma(_518, cbSceneParam._m0[7u].z, fma(_517, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _516));
    uint _585 = uint(roundEven(NORMAL.w)) * 13u;
    uint _586 = _585 + 9u;
    uint _587 = _586 + uint(cbMatDynParam._m0[0u].w);
    float _593 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)))) * cbInstanceData._m0[_587].x;
    float _594 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * cbInstanceData._m0[_587].y;
    float _595 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) * cbInstanceData._m0[_587].z;
    float _3415 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    vec4 _607 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _545, cbSceneParam._m0[86u].y * _546));
    float _610 = _607.x * TEXCOORD_1.w;
    float _611 = dot(vec3(_516, _517, _518), vec3(_376, _377, _378));
    float _614 = _611 * 2.0;
    float _618 = (_614 * _516) - _376;
    float _619 = (_614 * _517) - _377;
    float _620 = (_614 * _518) - _378;
    float _624 = abs(dot(vec3(_376, _377, _378), vec3(_516, _517, _518)));
    float _3448 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _626 = sqrt(_520);
    float _639 = exp2((_626 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_626 * 3.0));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _981;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _706 = fma(_679, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _671));
        float _710 = fma(_679, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _671));
        float _714 = fma(_679, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _671));
        float _739 = _671 + _516;
        float _740 = _675 + _517;
        float _741 = _679 + _518;
        float _751 = fma(_741, cbModelParam._m0[26u].z, fma(_740, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739)) - _706;
        float _752 = fma(_741, cbModelParam._m0[27u].z, fma(_740, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739)) - _710;
        float _753 = fma(_741, cbModelParam._m0[28u].z, fma(_740, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739)) - _714;
        float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
        float _770 = ((_757 * _751) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_706 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _771 = ((_757 * _752) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_710 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _772 = ((_757 * _753) / cbModelParam._m0[34u].z) + ((((((_714 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        float _809 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_775.x + (-0.5));
        float _811 = _809 * (_775.y + (-0.5));
        float _812 = _809 * (_775.z + (-0.5));
        float _819 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_782.x + (-0.5));
        float _821 = _819 * (_782.y + (-0.5));
        float _822 = _819 * (_782.z + (-0.5));
        float _829 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_789.x + (-0.5));
        float _831 = _829 * (_789.y + (-0.5));
        float _832 = _829 * (_789.z + (-0.5));
        float _839 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_796.x + (-0.5));
        float _841 = _839 * (_796.y + (-0.5));
        float _842 = _839 * (_796.z + (-0.5));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = _810 * 0.5;
        float _847 = _820 * 0.5;
        float _848 = _830 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _863 = (dot(vec3(_516, _517, _518), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _873 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _875 = _874 * 2.0;
        float _879 = (1.0 - _874) / (_874 + 1.0);
        float _3496 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _889 = ((((1.0 - _880) * (_875 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_875 + 1.0))) + _880) * _843;
        float _890 = _811 * 0.5;
        float _891 = _821 * 0.5;
        float _892 = _831 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _906 = (dot(vec3(_516, _517, _518), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _915 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3529 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_917 + 1.0))) + _922) * _844;
        float _932 = _812 * 0.5;
        float _933 = _822 * 0.5;
        float _934 = _832 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_516, _517, _518), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3562 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_959 + 1.0))) + _964) * _845;
        _981 = _812;
        _983 = _811;
        _984 = _810;
        _985 = _822;
        _986 = _821;
        _987 = _820;
        _988 = _832;
        _989 = _831;
        _990 = _830;
        _991 = _845;
        _992 = _844;
        _993 = _843;
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)));
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
    }
    else
    {
        _981 = _982;
        _983 = _982;
        _984 = _982;
        _985 = _982;
        _986 = _982;
        _987 = _982;
        _988 = _982;
        _989 = _982;
        _990 = _982;
        _991 = _982;
        _992 = _982;
        _993 = _982;
        _994 = 0.0;
        _995 = 0.0;
        _996 = 0.0;
    }
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1022 = fma(_679, cbModelParam._m0[30u].z, fma(_675, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _671));
        float _1026 = fma(_679, cbModelParam._m0[31u].z, fma(_675, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _671));
        float _1030 = fma(_679, cbModelParam._m0[32u].z, fma(_675, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _671));
        float _1053 = _671 + _516;
        float _1054 = _675 + _517;
        float _1055 = _679 + _518;
        float _1065 = fma(_1055, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1053)) - _1022;
        float _1066 = fma(_1055, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1053)) - _1026;
        float _1067 = fma(_1055, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1053)) - _1030;
        float _1071 = inversesqrt(dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067)));
        float _1084 = ((_1071 * _1065) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1022 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1071 * _1066) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1026 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1071 * _1067) / cbModelParam._m0[35u].z) + ((((((_1030 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        float _1121 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1088.x + (-0.5));
        float _1123 = _1121 * (_1088.y + (-0.5));
        float _1124 = _1121 * (_1088.z + (-0.5));
        float _1131 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1095.x + (-0.5));
        float _1133 = _1131 * (_1095.y + (-0.5));
        float _1134 = _1131 * (_1095.z + (-0.5));
        float _1141 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1102.x + (-0.5));
        float _1143 = _1141 * (_1102.y + (-0.5));
        float _1144 = _1141 * (_1102.z + (-0.5));
        float _1151 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1109.x + (-0.5));
        float _1153 = _1151 * (_1109.y + (-0.5));
        float _1154 = _1151 * (_1109.z + (-0.5));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = _1122 * 0.5;
        float _1159 = _1132 * 0.5;
        float _1160 = _1142 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_516, _517, _518), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3625 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1185 + 1.0))) + _1190) * _1155;
        float _1200 = _1123 * 0.5;
        float _1201 = _1133 * 0.5;
        float _1202 = _1143 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_516, _517, _518), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3658 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1227 + 1.0))) + _1232) * _1156;
        float _1242 = _1124 * 0.5;
        float _1243 = _1134 * 0.5;
        float _1244 = _1144 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_516, _517, _518), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3691 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1269 + 1.0))) + _1274) * _1157;
        _1291 = _1124;
        _1292 = _1123;
        _1293 = _1122;
        _1294 = _1134;
        _1295 = _1133;
        _1296 = _1132;
        _1297 = _1144;
        _1298 = _1143;
        _1299 = _1142;
        _1300 = _1157;
        _1301 = _1156;
        _1302 = _1155;
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1304 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
    }
    else
    {
        _1291 = _982;
        _1292 = _982;
        _1293 = _982;
        _1294 = _982;
        _1295 = _982;
        _1296 = _982;
        _1297 = _982;
        _1298 = _982;
        _1299 = _982;
        _1300 = _982;
        _1301 = _982;
        _1302 = _982;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _994)) + _994;
    float _1316 = (cbModelParam._m0[1u].x * (_1304 - _995)) + _995;
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _996)) + _996;
    float _1338 = fma(_1317, cbSceneParam._m0[89u].z, fma(_1316, cbSceneParam._m0[89u].y, _1315 * cbSceneParam._m0[89u].x));
    float _1341 = fma(_1317, cbSceneParam._m0[90u].z, fma(_1316, cbSceneParam._m0[90u].y, _1315 * cbSceneParam._m0[90u].x));
    float _1344 = fma(_1317, cbSceneParam._m0[91u].z, fma(_1316, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1315));
    float _1359 = _618 * 0.5;
    float _1360 = _619 * 0.5;
    float _1361 = _620 * 0.5;
    float _1362 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1365 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1292, _1295, _1298, _1301));
    float _1368 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1402;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1375 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_981, _985, _988, _991));
        float _1379 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_983, _986, _989, _992));
        float _1383 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_984, _987, _990, _993));
        float _1390 = dot(vec4(cbModelParam._m0[39u]), vec4(_1359, _1360, _1361, 1.0));
        _1402 = dot(vec3(isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1390) ? 0.0 : (isnan(0.0) ? _1390 : max(0.0, _1390))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1402 = 1.0;
    }
    float _1413;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1404 = dot(vec4(cbModelParam._m0[40u]), vec4(_1359, _1360, _1361, 1.0));
        _1413 = dot(vec3(isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1404) ? 0.0 : (isnan(0.0) ? _1404 : max(0.0, _1404))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1413 = 1.0;
    }
    float _1417 = (_1413 * cbModelParam._m0[1u].x) + (_1402 * (1.0 - cbModelParam._m0[1u].x));
    float _1427 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _520);
    float _1428 = isnan(_1427) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1427 : min(cbModelParam._m0[25u].z, _1427));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1475 = fma(_679, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671)) + cbModelParam._m0[13u].w;
        float _1479 = fma(_679, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671)) + cbModelParam._m0[14u].w;
        float _1483 = fma(_679, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671)) + cbModelParam._m0[15u].w;
        float _1486 = fma(_620, cbModelParam._m0[13u].z, fma(_619, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _618));
        float _1489 = fma(_620, cbModelParam._m0[14u].z, fma(_619, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _618));
        float _1492 = fma(_620, cbModelParam._m0[15u].z, fma(_619, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _618));
        float _1520;
        if (_1486 > 0.0)
        {
            _1520 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1520 = frontier_phi_16_14_ladder;
        }
        float _1724;
        if (_1489 > 0.0)
        {
            _1724 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1724 = frontier_phi_25_21_ladder;
        }
        float _1967;
        if (_1492 > 0.0)
        {
            _1967 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1967 = frontier_phi_37_32_ladder;
        }
        float _1969 = isnan(_1724) ? _1520 : (isnan(_1520) ? _1724 : min(_1520, _1724));
        float _1970 = isnan(_1967) ? _1969 : (isnan(_1969) ? _1967 : min(_1969, _1967));
        float _1974 = (_1970 * _1486) + _1475;
        float _1975 = (_1970 * _1489) + _1479;
        float _1976 = (_1970 * _1492) + _1483;
        float _1977 = _1970 * 9.9999997473787516355514526367188e-05;
        float _1979 = (-1.0) - _1977;
        float _1981 = _1977 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1976 > _1981) || ((_1976 < _1979) || ((_1975 > _1981) || ((_1975 < _1979) || ((_1974 < _1979) || (_1974 > _1981))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2100 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1976, cbModelParam._m0[9u].z, fma(_1975, cbModelParam._m0[9u].y, _1974 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1976, cbModelParam._m0[10u].z, fma(_1975, cbModelParam._m0[10u].y, _1974 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1976, cbModelParam._m0[11u].z, fma(_1975, cbModelParam._m0[11u].y, _1974 * cbModelParam._m0[11u].x))), _1428);
            frontier_phi_15_37_ladder = _2100.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2100.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2100.x * cbModelParam._m0[1u].y;
        }
        _1508 = frontier_phi_15_37_ladder_2;
        _1510 = frontier_phi_15_37_ladder_1;
        _1512 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_618, _619, _620), _1428);
        _1508 = _1496.x * cbModelParam._m0[1u].y;
        _1510 = _1496.y * cbModelParam._m0[1u].y;
        _1512 = _1496.z * cbModelParam._m0[1u].y;
    }
    float _1516 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _520);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1516 : min(cbModelParam._m0[25u].w, _1516));
    float _1609;
    float _1611;
    float _1613;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1573 = fma(_679, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671)) + cbModelParam._m0[21u].w;
        float _1577 = fma(_679, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671)) + cbModelParam._m0[22u].w;
        float _1581 = fma(_679, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671)) + cbModelParam._m0[23u].w;
        float _1584 = fma(_620, cbModelParam._m0[21u].z, fma(_619, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _618));
        float _1587 = fma(_620, cbModelParam._m0[22u].z, fma(_619, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _618));
        float _1590 = fma(_620, cbModelParam._m0[23u].z, fma(_619, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _618));
        float _1729;
        if (_1584 > 0.0)
        {
            _1729 = abs((1.0 - _1573) / _1584);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1573 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1729 = frontier_phi_27_23_ladder;
        }
        float _1994;
        if (_1587 > 0.0)
        {
            _1994 = abs((1.0 - _1577) / _1587);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1577 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1994 = frontier_phi_39_34_ladder;
        }
        float _2199;
        if (_1590 > 0.0)
        {
            _2199 = abs((1.0 - _1581) / _1590);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1581 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2199 = frontier_phi_48_45_ladder;
        }
        float _2201 = isnan(_1994) ? _1729 : (isnan(_1729) ? _1994 : min(_1729, _1994));
        float _2202 = isnan(_2199) ? _2201 : (isnan(_2201) ? _2199 : min(_2201, _2199));
        float _2206 = (_2202 * _1584) + _1573;
        float _2207 = (_2202 * _1587) + _1577;
        float _2208 = (_2202 * _1590) + _1581;
        float _2209 = _2202 * 9.9999997473787516355514526367188e-05;
        float _2210 = (-1.0) - _2209;
        float _2212 = _2209 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2208 > _2212) || ((_2208 < _2210) || ((_2207 > _2212) || ((_2207 < _2210) || ((_2206 < _2210) || (_2206 > _2212))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2437 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2208, cbModelParam._m0[17u].z, fma(_2207, cbModelParam._m0[17u].y, _2206 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2208, cbModelParam._m0[18u].z, fma(_2207, cbModelParam._m0[18u].y, _2206 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2208, cbModelParam._m0[19u].z, fma(_2207, cbModelParam._m0[19u].y, _2206 * cbModelParam._m0[19u].x))), _1517);
            frontier_phi_24_48_ladder = _2437.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2437.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2437.x * cbModelParam._m0[1u].z;
        }
        _1609 = frontier_phi_24_48_ladder_2;
        _1611 = frontier_phi_24_48_ladder_1;
        _1613 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1593 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_618, _619, _620), _1517);
        _1609 = _1593.x * cbModelParam._m0[1u].z;
        _1611 = _1593.y * cbModelParam._m0[1u].z;
        _1613 = _1593.z * cbModelParam._m0[1u].z;
    }
    float _1625 = ((((1.0 - _639) * ((_626 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_639 * _626)) * _610;
    float _1626 = _1625 * ((cbModelParam._m0[1u].w * (_1609 - _1508)) + _1508);
    float _1627 = _1625 * ((cbModelParam._m0[1u].w * (_1611 - _1510)) + _1510);
    float _1628 = _1625 * ((cbModelParam._m0[1u].w * (_1613 - _1512)) + _1512);
    float _1631 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1634 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1637 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, _1626 * cbSceneParam._m0[91u].x));
    uvec4 _1647 = floatBitsToUint(cbInstanceData._m0[_585 + 5u]);
    uint _1649 = _1647.x * 14u;
    uint _1650 = _1649 + 13u;
    float _1657 = _610 + (-1.0);
    float _1662 = (cbLight._m0[_1650].x * _1657) + 1.0;
    float _1663 = (cbLight._m0[_1650].y * _1657) + 1.0;
    float _1664 = (cbLight._m0[_1650].z * _1657) + 1.0;
    float _1665 = (cbLight._m0[_1650].w * _1657) + 1.0;
    uint _1666 = _1649 + 5u;
    float _1672 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
    uint _1676 = _1649 + 4u;
    float _1683 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
    uint _1687 = _1649 | 1u;
    float _1698 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_516, _517, _518));
    float _1701 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_516, _517, _518));
    float _3827 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _3838 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1706 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.3183098733425140380859375;
    float _1708 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.3183098733425140380859375;
    float _1715 = ((cbLight._m0[_1666].x * _1672) * _1708) + ((cbLight._m0[_1676].x * _1683) * _1706);
    float _1716 = ((_1672 * cbLight._m0[_1666].y) * _1708) + ((_1683 * cbLight._m0[_1676].y) * _1706);
    float _1717 = ((_1672 * cbLight._m0[_1666].z) * _1708) + ((_1683 * cbLight._m0[_1676].z) * _1706);
    uvec4 _1721 = floatBitsToUint(cbLight._m0[_1649 + 12u]);
    bool _1723 = _1721.x == 0u;
    float _1734;
    float _1736;
    float _1738;
    if (_1723)
    {
        _1734 = _1715;
        _1736 = _1716;
        _1738 = _1717;
    }
    else
    {
        uint _1742 = _1649 + 6u;
        float _1758 = (dot(vec3(cbLight._m0[_1649 + 2u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _1759 = _1758 * _1758;
        float _3849 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1761 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _1734 = (((cbLight._m0[_1742].x * 0.3183098733425140380859375) * _1760) * _1761) + _1715;
        _1736 = (((cbLight._m0[_1742].y * 0.3183098733425140380859375) * _1760) * _1761) + _1716;
        _1738 = (((cbLight._m0[_1742].z * 0.3183098733425140380859375) * _1760) * _1761) + _1717;
    }
    bool _1741 = _1721.y == 0u;
    float _1779;
    float _1781;
    float _1783;
    if (_1741)
    {
        _1779 = _1734;
        _1781 = _1736;
        _1783 = _1738;
    }
    else
    {
        uint _1938 = _1649 + 7u;
        float _1954 = (dot(vec3(cbLight._m0[_1649 + 3u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _1955 = _1954 * _1954;
        float _3865 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1957 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _1779 = (((cbLight._m0[_1938].x * 0.3183098733425140380859375) * _1956) * _1957) + _1734;
        _1781 = (((cbLight._m0[_1938].y * 0.3183098733425140380859375) * _1956) * _1957) + _1736;
        _1783 = (((cbLight._m0[_1938].z * 0.3183098733425140380859375) * _1956) * _1957) + _1738;
    }
    uint _1786 = _1649 + 8u;
    float _1799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1649].w)) * _520) * 0.949999988079071044921875);
    float _1800 = _1799 * _1799;
    float _1801 = cbLight._m0[_1649].x + _376;
    float _1802 = cbLight._m0[_1649].y + _377;
    float _1803 = cbLight._m0[_1649].z + _378;
    float _1807 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
    float _1808 = _1807 * _1801;
    float _1809 = _1807 * _1802;
    float _1810 = _1807 * _1803;
    float _1811 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1649].xyz));
    float _3881 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _1815 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _1816 = dot(vec3(_516, _517, _518), vec3(_1808, _1809, _1810));
    float _3903 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1819 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1820 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_1808, _1809, _1810));
    float _3914 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1824 = _1800 * _1800;
    float _1828 = ((_1819 * _1819) * (_1824 + (-1.0))) + 1.0;
    float _1839 = (exp2(log2(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1840 = 1.0 - _1800;
    float _1851 = (0.5 / (((_1815 * ((_1814 * _1840) + _1800)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _1840) + _1800) * _1814))) * _1814;
    float _3925 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1853 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1824 / ((_1828 * _1828) * 3.141590118408203125));
    uint _1864 = _1649 + 9u;
    float _1875 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1687].w)) * _520) * 0.949999988079071044921875);
    float _1876 = _1875 * _1875;
    float _1877 = cbLight._m0[_1687].x + _376;
    float _1878 = cbLight._m0[_1687].y + _377;
    float _1879 = cbLight._m0[_1687].z + _378;
    float _1883 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
    float _1884 = _1883 * _1877;
    float _1885 = _1883 * _1878;
    float _1886 = _1883 * _1879;
    float _1887 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1687].xyz));
    float _3936 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1891 = dot(vec3(_516, _517, _518), vec3(_1884, _1885, _1886));
    float _3947 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_1884, _1885, _1886));
    float _3958 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1876 * _1876;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1912 = (exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1913 = 1.0 - _1876;
    float _1923 = (0.5 / (((_1815 * ((_1890 * _1913) + _1876)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _1913) + _1876) * _1890))) * _1890;
    float _3969 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1925 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    float _1935 = (((_1912 * cbLight._m0[_1864].x) * _1925) * _1672) + (((_1839 * cbLight._m0[_1786].x) * _1853) * _1683);
    float _1936 = (((_1912 * cbLight._m0[_1864].y) * _1925) * _1672) + (((_1839 * cbLight._m0[_1786].y) * _1853) * _1683);
    float _1937 = (((_1912 * cbLight._m0[_1864].z) * _1925) * _1672) + (((_1839 * cbLight._m0[_1786].z) * _1853) * _1683);
    float _1999;
    float _2001;
    float _2003;
    if (_1723)
    {
        _1999 = _1935;
        _2001 = _1936;
        _2003 = _1937;
    }
    else
    {
        uint _2005 = _1649 + 2u;
        uint _2009 = _1649 + 10u;
        float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _520) * 0.949999988079071044921875);
        float _2024 = _2023 * _2023;
        float _2025 = cbLight._m0[_2005].x + _376;
        float _2026 = cbLight._m0[_2005].y + _377;
        float _2027 = cbLight._m0[_2005].z + _378;
        float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
        float _2032 = _2031 * _2025;
        float _2033 = _2031 * _2026;
        float _2034 = _2031 * _2027;
        float _2035 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2005].xyz));
        float _3980 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2038 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _2039 = dot(vec3(_516, _517, _518), vec3(_2032, _2033, _2034));
        float _3991 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2043 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2032, _2033, _2034));
        float _4002 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2047 = _2024 * _2024;
        float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
        float _2060 = (exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2061 = 1.0 - _2024;
        float _2071 = (0.5 / (((_1815 * ((_2038 * _2061) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _2061) + _2024) * _2038))) * _2038;
        float _4013 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2073 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
        float _2074 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _1999 = (((_2060 * cbLight._m0[_2009].x) * _2073) * _2074) + _1935;
        _2001 = (((_2060 * cbLight._m0[_2009].y) * _2073) * _2074) + _1936;
        _2003 = (((_2060 * cbLight._m0[_2009].z) * _2073) * _2074) + _1937;
    }
    float _2109;
    float _2111;
    float _2113;
    if (_1741)
    {
        _2109 = _1999;
        _2111 = _2001;
        _2113 = _2003;
    }
    else
    {
        uint _2120 = _1649 + 3u;
        uint _2124 = _1649 + 11u;
        float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _520) * 0.949999988079071044921875);
        float _2139 = _2138 * _2138;
        float _2140 = cbLight._m0[_2120].x + _376;
        float _2141 = cbLight._m0[_2120].y + _377;
        float _2142 = cbLight._m0[_2120].z + _378;
        float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
        float _2147 = _2146 * _2140;
        float _2148 = _2146 * _2141;
        float _2149 = _2146 * _2142;
        float _2150 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2120].xyz));
        float _4029 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2154 = dot(vec3(_516, _517, _518), vec3(_2147, _2148, _2149));
        float _4040 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2158 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2147, _2148, _2149));
        float _4051 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2162 = _2139 * _2139;
        float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
        float _2175 = (exp2(log2(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2176 = 1.0 - _2139;
        float _2186 = (0.5 / (((_1815 * ((_2153 * _2176) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _2176) + _2139) * _2153))) * _2153;
        float _4062 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2188 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
        float _2189 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _2109 = (((_2175 * cbLight._m0[_2124].x) * _2188) * _2189) + _1999;
        _2111 = (((_2175 * cbLight._m0[_2124].y) * _2188) * _2189) + _2001;
        _2113 = (((_2175 * cbLight._m0[_2124].z) * _2188) * _2189) + _2003;
    }
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    if (_1647.y == 0u)
    {
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2264;
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2264;
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2264;
        uvec4 _2279 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2280 = _2279.x;
        uint _2291 = uint((float(_2279.y) * floor(float(uint(cbSceneParam._m0[85u].y * _546) / _2280))) + floor(float(uint(cbSceneParam._m0[85u].x * _545) / _2280)));
        float _2301 = (log2(_2267 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2302 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        uint _2305 = uint(isnan(14.0) ? _2302 : (isnan(_2302) ? 14.0 : min(_2302, 14.0)));
        uvec4 _2310 = texelFetch(g_lightClusterGridBuffer, int(((_2305 << 2u) + (_2291 << 6u)) >> 2u));
        uint _2311 = _2310.x;
        uint _2312 = _2279.z;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        float _2452;
        if (((((1u << ((_2312 >> 4u) & 15u)) + 4294967295u) & _2311) == 0u) || ((_2312 & 240u) == 0u))
        {
            _2442 = 0.0;
            _2444 = 0.0;
            _2446 = 0.0;
            _2448 = 0.0;
            _2450 = 0.0;
            _2452 = 0.0;
        }
        else
        {
            float _2443;
            float _2445;
            float _2447;
            float _2449;
            float _2451;
            float _2453;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            float _2600 = 0.0;
            uint _2601 = 0u;
            uint _2610;
            bool _2611;
            for (;;)
            {
                _2610 = texelFetch(g_lightClassification, int((((_2305 << 5u) + (_2291 << 9u)) + (_2601 << 2u)) >> 2u)).x;
                _2611 = _2610 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2611)
                {
                    frontier_phi_63_pred = _2600;
                    frontier_phi_63_pred_1 = _2599;
                    frontier_phi_63_pred_2 = _2598;
                    frontier_phi_63_pred_3 = _2597;
                    frontier_phi_63_pred_4 = _2596;
                    frontier_phi_63_pred_5 = _2595;
                }
                else
                {
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    uint _2725;
                    _2719 = _2595;
                    _2720 = _2596;
                    _2721 = _2597;
                    _2722 = _2598;
                    _2723 = _2599;
                    _2724 = _2600;
                    _2725 = _2610;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    for (;;)
                    {
                        uint _2729 = uint(findLSB(_2725)) + (_2601 << 5u);
                        uint _2726 = (_2725 + 4294967295u) & _2725;
                        uint _2731 = _2729 * 48u;
                        vec4 _2745 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 3u)).x));
                        uint _2751 = (_2729 * 48u) + 4u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2751)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 3u)).x));
                        uint _2770 = (_2729 * 48u) + 8u;
                        vec3 _2781 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x));
                        float _2785 = _2745.x - _2265;
                        float _2786 = _2745.y - _2266;
                        float _2787 = _2745.z - _2267;
                        float _2788 = dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787));
                        float _2791 = inversesqrt(_2788);
                        float _2792 = _2791 * _2785;
                        float _2793 = _2791 * _2786;
                        float _2794 = _2791 * _2787;
                        float _2795 = dot(vec3(_566, _569, _572), vec3(_2792, _2793, _2794));
                        float _2800 = 1.0 - (_2788 * _2745.w);
                        float _4088 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2801 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                        float _2802 = sqrt(_2788) * _2764.w;
                        float _2805 = 1.39999997615814208984375 / (_2802 + 1.39999997615814208984375);
                        float _2806 = _2805 * _2805;
                        float _2809 = ((1.0 - _2806) * _2795) + _2806;
                        float _2812 = _2802 * _2802;
                        float _2816 = ((isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0))) * _2801) / ((_2812 * 0.699999988079071044921875) + 1.0);
                        float _2820 = (-0.0) - _2265;
                        float _2821 = (-0.0) - _2266;
                        float _2822 = (-0.0) - _2267;
                        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
                        float _2827 = _2826 * _2820;
                        float _2828 = _2826 * _2821;
                        float _2829 = _2826 * _2822;
                        float _2837 = exp2(log2(1.0 / ((_2812 * 3.5) + 5.0)) * 0.25);
                        float _2838 = 1.0 - _626;
                        float _2845 = sqrt(1.0 - ((1.0 - (_2838 * _2838)) * (1.0 - (_2837 * _2837))));
                        float _2846 = _2845 * _2845;
                        float _2847 = _2846 * _2846;
                        float _2848 = _2827 + _2792;
                        float _2849 = _2828 + _2793;
                        float _2850 = _2829 + _2794;
                        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
                        float _2858 = dot(vec3(_566, _569, _572), vec3(_2827, _2828, _2829));
                        float _4104 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2861 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2862 = dot(vec3(_566, _569, _572), vec3(_2854 * _2848, _2854 * _2849, _2854 * _2850));
                        float _4115 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2865 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2869 = ((_2865 * _2865) * (_2847 + (-1.0))) + 1.0;
                        float _2870 = _2805 * _2846;
                        float _2871 = _2870 * _2870;
                        float _2874 = ((1.0 - _2871) * _2795) + _2871;
                        float _4126 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2876 = 1.0 - _2846;
                        float _2886 = (0.5 / (((_2875 * ((_2861 * _2876) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2875 * _2876) + _2846) * _2861))) * _2875;
                        float _4137 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2897 = (((_2847 * 3.1415927410125732421875) * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) / ((_2869 * _2869) * ((_2812 * 2.1991131305694580078125) + 3.141590118408203125))) * _2801;
                        _2654 = (_2816 * _2764.x) + _2722;
                        _2655 = (_2816 * _2764.y) + _2723;
                        _2656 = (_2816 * _2764.z) + _2724;
                        _2651 = (_2897 * _2781.x) + _2719;
                        _2652 = (_2897 * _2781.y) + _2720;
                        _2653 = (_2897 * _2781.z) + _2721;
                        if (_2726 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2719 = _2651;
                            _2720 = _2652;
                            _2721 = _2653;
                            _2722 = _2654;
                            _2723 = _2655;
                            _2724 = _2656;
                            _2725 = _2726;
                        }
                    }
                    frontier_phi_63_pred = _2656;
                    frontier_phi_63_pred_1 = _2655;
                    frontier_phi_63_pred_2 = _2654;
                    frontier_phi_63_pred_3 = _2653;
                    frontier_phi_63_pred_4 = _2652;
                    frontier_phi_63_pred_5 = _2651;
                }
                _2453 = frontier_phi_63_pred;
                _2451 = frontier_phi_63_pred_1;
                _2449 = frontier_phi_63_pred_2;
                _2447 = frontier_phi_63_pred_3;
                _2445 = frontier_phi_63_pred_4;
                _2443 = frontier_phi_63_pred_5;
                uint _2602 = _2601 + 1u;
                if (_2602 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2595 = _2443;
                    _2596 = _2445;
                    _2597 = _2447;
                    _2598 = _2449;
                    _2599 = _2451;
                    _2600 = _2453;
                    _2601 = _2602;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2442 = _2443;
            _2444 = _2445;
            _2446 = _2447;
            _2448 = _2449;
            _2450 = _2451;
            _2452 = _2453;
        }
        uvec4 _2456 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2457 = _2456.z;
        uint _2459 = (_2457 >> 8u) & 15u;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        if (((4294967295u << _2459) & _2311) == 0u)
        {
            _2563 = _2442;
            _2565 = _2444;
            _2567 = _2446;
            _2569 = _2448;
            _2571 = _2450;
            _2573 = _2452;
        }
        else
        {
            float _2588 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
            float _2589 = _2588 * _2265;
            float _2590 = _2588 * _2266;
            float _2591 = _2588 * _2267;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2459 < ((_2457 >> 12u) & 15u))
            {
                float _2564;
                float _2566;
                float _2568;
                float _2570;
                float _2572;
                float _2574;
                float _2702 = _2442;
                float _2703 = _2444;
                float _2704 = _2446;
                float _2705 = _2448;
                float _2706 = _2450;
                float _2707 = _2452;
                uint _2708 = _2459;
                uint _2717;
                bool _2718;
                for (;;)
                {
                    _2717 = texelFetch(g_lightClassification, int((((_2305 << 5u) + (_2291 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                    _2718 = _2717 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2718)
                    {
                        frontier_phi_69_pred = _2707;
                        frontier_phi_69_pred_1 = _2706;
                        frontier_phi_69_pred_2 = _2705;
                        frontier_phi_69_pred_3 = _2704;
                        frontier_phi_69_pred_4 = _2703;
                        frontier_phi_69_pred_5 = _2702;
                    }
                    else
                    {
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _2915 = _2702;
                        float _2916 = _2703;
                        float _2917 = _2704;
                        float _2918 = _2705;
                        float _2919 = _2706;
                        float _2920 = _2707;
                        uint _2921 = _2717;
                        uint _2922;
                        vec4 _2947;
                        float _2948;
                        vec4 _2963;
                        vec3 _2975;
                        vec4 _2990;
                        vec4 _3006;
                        float _3053;
                        bool _3054;
                        for (;;)
                        {
                            uint _2932 = ((_2708 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2921));
                            _2922 = (_2921 + 4294967295u) & _2921;
                            uint _2934 = _2932 * 40u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            _2948 = _2947.w;
                            uint _2950 = (_2932 * 40u) + 4u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2965 = (_2932 * 40u) + 8u;
                            _2975 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x));
                            uint _2977 = (_2932 * 40u) + 16u;
                            _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2993 = (_2932 * 40u) + 20u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3009 = (_2932 * 40u) + 24u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3028 = (_2932 * 40u) + 28u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3053 = fma(_2267, _3041.z, fma(_2266, _3041.y, _3041.x * _2265)) + _3041.w;
                            _3054 = !((fma(_2267, _3022.z, fma(_2266, _3022.y, _3022.x * _2265)) + _3022.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3054)
                            {
                                float _3081 = _2947.x - _2265;
                                float _3082 = _2947.y - _2266;
                                float _3083 = _2947.z - _2267;
                                float _3084 = dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083));
                                float _3087 = inversesqrt(_3084);
                                float _3088 = _3087 * _3081;
                                float _3089 = _3087 * _3082;
                                float _3090 = _3087 * _3083;
                                float _3094 = 1.0 - (_3084 / (_2948 * _2948));
                                float _4148 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                                float _3099 = sqrt(_3084) * _2963.w;
                                float _3101 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                                float _3102 = _3101 * _3101;
                                float _3105 = ((1.0 - _3102) * dot(vec3(_3088, _3089, _3090), vec3(_566, _569, _572))) + _3102;
                                float _3108 = _3099 * _3099;
                                float _3112 = (fma(_2267, _2990.z, fma(_2266, _2990.y, _2990.x * _2265)) + _2990.w) / _3053;
                                float _3113 = (fma(_2267, _3006.z, fma(_2266, _3006.y, _3006.x * _2265)) + _3006.w) / _3053;
                                float _3117 = 1.0 - dot(vec2(_3112, _3113), vec2(_3112, _3113));
                                float _4164 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3119 = _3118 * (((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3095) / ((_3108 * 0.699999988079071044921875) + 1.0));
                                float _3131 = exp2(log2(1.0 / ((_3108 * 3.5) + 5.0)) * 0.25);
                                float _3132 = 1.0 - _626;
                                float _3139 = sqrt(1.0 - ((1.0 - (_3132 * _3132)) * (1.0 - (_3131 * _3131))));
                                float _3140 = _3139 * _3139;
                                float _3141 = _3140 * _3140;
                                float _3142 = _3088 - _2589;
                                float _3143 = _3089 - _2590;
                                float _3144 = _3090 - _2591;
                                float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                                float _3152 = dot(vec3(_566, _569, _572), vec3((-0.0) - _2589, (-0.0) - _2590, (-0.0) - _2591));
                                float _4175 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3155 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3156 = dot(vec3(_566, _569, _572), vec3(_3148 * _3142, _3148 * _3143, _3148 * _3144));
                                float _4186 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3159 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3163 = ((_3159 * _3159) * (_3141 + (-1.0))) + 1.0;
                                float _3164 = _3101 * _3140;
                                float _3165 = _3164 * _3164;
                                float _3171 = ((1.0 - _3165) * dot(vec3(_566, _569, _572), vec3(_3088, _3089, _3090))) + _3165;
                                float _4197 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3173 = 1.0 - _3140;
                                float _3183 = (0.5 / (((_3172 * ((_3155 * _3173) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_3172 * _3173) + _3140) * _3155))) * _3172;
                                float _4208 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3193 = (_3118 * _3095) * (((_3141 * 3.1415927410125732421875) * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) / ((_3163 * _3163) * ((_3108 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3119 * _2963.z;
                                frontier_phi_75_pred_1 = _3119 * _2963.y;
                                frontier_phi_75_pred_2 = _3119 * _2963.x;
                                frontier_phi_75_pred_3 = _3193 * _2975.z;
                                frontier_phi_75_pred_4 = _3193 * _2975.y;
                                frontier_phi_75_pred_5 = _3193 * _2975.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3202 = frontier_phi_75_pred;
                            _3201 = frontier_phi_75_pred_1;
                            _3200 = frontier_phi_75_pred_2;
                            _3199 = frontier_phi_75_pred_3;
                            _3198 = frontier_phi_75_pred_4;
                            _3197 = frontier_phi_75_pred_5;
                            _2905 = _3200 + _2918;
                            _2906 = _3201 + _2919;
                            _2907 = _3202 + _2920;
                            _2902 = _3197 + _2915;
                            _2903 = _3198 + _2916;
                            _2904 = _3199 + _2917;
                            if (_2922 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2922;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2907;
                        frontier_phi_69_pred_1 = _2906;
                        frontier_phi_69_pred_2 = _2905;
                        frontier_phi_69_pred_3 = _2904;
                        frontier_phi_69_pred_4 = _2903;
                        frontier_phi_69_pred_5 = _2902;
                    }
                    _2574 = frontier_phi_69_pred;
                    _2572 = frontier_phi_69_pred_1;
                    _2570 = frontier_phi_69_pred_2;
                    _2568 = frontier_phi_69_pred_3;
                    _2566 = frontier_phi_69_pred_4;
                    _2564 = frontier_phi_69_pred_5;
                    uint _2709 = _2708 + 1u;
                    if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2702 = _2564;
                        _2703 = _2566;
                        _2704 = _2568;
                        _2705 = _2570;
                        _2706 = _2572;
                        _2707 = _2574;
                        _2708 = _2709;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2574;
                frontier_phi_57_58_ladder_1 = _2572;
                frontier_phi_57_58_ladder_2 = _2570;
                frontier_phi_57_58_ladder_3 = _2568;
                frontier_phi_57_58_ladder_4 = _2566;
                frontier_phi_57_58_ladder_5 = _2564;
            }
            else
            {
                frontier_phi_57_58_ladder = _2452;
                frontier_phi_57_58_ladder_1 = _2450;
                frontier_phi_57_58_ladder_2 = _2448;
                frontier_phi_57_58_ladder_3 = _2446;
                frontier_phi_57_58_ladder_4 = _2444;
                frontier_phi_57_58_ladder_5 = _2442;
            }
            _2563 = frontier_phi_57_58_ladder_5;
            _2565 = frontier_phi_57_58_ladder_4;
            _2567 = frontier_phi_57_58_ladder_3;
            _2569 = frontier_phi_57_58_ladder_2;
            _2571 = frontier_phi_57_58_ladder_1;
            _2573 = frontier_phi_57_58_ladder;
        }
        float _2578 = isnan(1.0) ? _610 : (isnan(_610) ? 1.0 : min(_610, 1.0));
        _2323 = (_2578 * _2569) + _1779;
        _2325 = (_2578 * _2571) + _1781;
        _2327 = (_2578 * _2573) + _1783;
        _2329 = ((_2563 * 0.039999999105930328369140625) * _2578) + _2109;
        _2331 = ((_2565 * 0.039999999105930328369140625) * _2578) + _2111;
        _2333 = ((_2567 * 0.039999999105930328369140625) * _2578) + _2113;
    }
    else
    {
        _2323 = _1779;
        _2325 = _1781;
        _2327 = _1783;
        _2329 = _2109;
        _2331 = _2111;
        _2333 = _2113;
    }
    uint _2339 = _586 + uint(cbMatDynParam._m0[0u].w);
    float _2345 = (((((_418.x * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _389)) + (_452.x * cbMtdParam._m0[12u].x)) + (_483.x * cbMtdParam._m0[13u].x)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2339].x;
    float _2346 = (((((_418.y * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _389)) + (_452.y * cbMtdParam._m0[12u].y)) + (_483.y * cbMtdParam._m0[13u].y)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2339].y;
    float _2347 = (((((_418.z * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _389)) + (_452.z * cbMtdParam._m0[12u].z)) + (_483.z * cbMtdParam._m0[13u].z)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2339].z;
    float _4224 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4235 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4246 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4257 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _2365 = (((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2323 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _610))) + ((_2329 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1417)) * cbPerFrame._m0[3u].x)) + _2345;
    float _2367 = (_2346 + ((_2331 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1417)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2325 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _610)));
    float _2369 = (_2347 + ((_2333 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _1417)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2327 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _610)));
    float _4283 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2382 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2387 = cbInstanceData._m0[_585 + 6u].w * (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)));
    float _2392 = _545 / cbSceneParam._m0[86u].x;
    float _2393 = _546 / cbSceneParam._m0[86u].y;
    vec4 _2407 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2392, _2393, (log2((isnan(cbSceneParam._m0[77u].w) ? _539 : (isnan(_539) ? cbSceneParam._m0[77u].w : min(_539, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2409 = _2407.x;
    float _2410 = _2407.y;
    float _2411 = _2407.z;
    float _2412 = _2407.w;
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    if (_539 > cbSceneParam._m0[78u].w)
    {
        float _2467 = isnan(_539) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _539 : min(cbSceneParam._m0[80u].w, _539));
        float _2468 = _2467 / _539;
        float _2479 = _2468 * _274;
        float _2480 = _275 * _2468;
        float _2481 = (-0.0) - _2480;
        float _2482 = _2468 * _276;
        float _2484 = (cbSceneParam._m0[77u].w * _2481) / _2467;
        float _2485 = _2484 + cbSceneParam._m0[79u].w;
        float _2486 = cbSceneParam._m0[79u].w - _2480;
        float _2492 = sqrt(((_2479 * _2479) + (_2480 * _2480)) + (_2482 * _2482));
        float _2495 = (1.0 - (cbSceneParam._m0[77u].w / _2467)) * _2492;
        float _2500 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2502 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2664;
        if (abs((_2481 - _2484) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2664 = ((((_2485 > 0.0) ? exp2(_2500 * _2485) : (2.0 - exp2(_2502 * _2485))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2495;
        }
        else
        {
            float _2624 = 1.0 / cbSceneParam._m0[80u].x;
            float _2625 = isnan(_2486) ? _2485 : (isnan(_2485) ? _2486 : max(_2485, _2486));
            float _2626 = isnan(_2486) ? _2485 : (isnan(_2485) ? _2486 : min(_2485, _2486));
            float _2635 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : min(_2625, 0.0));
            float _2636 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : min(_2626, 0.0));
            _2664 = ((abs(_2492 / _2481) * cbSceneParam._m0[80u].y) * ((((_2635 - _2636) * 2.0) - ((exp2(_2500 * (isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0)))) - exp2(_2500 * (isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0))))) * _2624)) - ((exp2(_2502 * _2635) - exp2(_2502 * _2636)) * _2624))) + (_2495 * cbSceneParam._m0[80u].z);
        }
        vec4 _2666 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2392, _2393, 1.0), 0.0);
        float _2675 = exp2((_2664 * (-1.44269502162933349609375)) * (1.0 - _2666.w));
        float _2676 = log2(_2675);
        float _2692 = log2(_2412);
        _2504 = (exp2(_2692 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].x)) * _2666.x) / cbSceneParam._m0[78u].x)) + _2409;
        _2506 = (exp2(_2692 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].y)) * _2666.y) / cbSceneParam._m0[78u].y)) + _2410;
        _2508 = (exp2(_2692 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].z)) * _2666.z) / cbSceneParam._m0[78u].z)) + _2411;
        _2510 = _2675 * _2412;
    }
    else
    {
        _2504 = _2409;
        _2506 = _2410;
        _2508 = _2411;
        _2510 = _2412;
    }
    float _2522 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2523 = _2522 == 3.0;
    float _2524 = log2(_2510);
    float _2528 = exp2(_2524 * cbSceneParam._m0[78u].x);
    float _2529 = exp2(_2524 * cbSceneParam._m0[78u].y);
    float _2530 = exp2(_2524 * cbSceneParam._m0[78u].z);
    float _2531 = _2528 * (isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0)));
    float _2532 = _2529 * (isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0)));
    float _2533 = _2530 * (isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0)));
    float _2542 = (_2522 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2542 * (_2523 ? _2531 : (_2531 + (cbSceneParam._m0[72u].w * _2504)));
    SV_Target.y = _2542 * (_2523 ? _2532 : (_2532 + (cbSceneParam._m0[72u].w * _2506)));
    SV_Target.z = _2542 * (_2523 ? _2533 : (_2533 + (cbSceneParam._m0[72u].w * _2508)));
    SV_Target.w = _2387;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2345) * _2382) * _2528) * _2542;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2346) * _2382) * _2529) * _2542;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2347) * _2382) * _2530) * _2542;
    SV_Target_1.w = _2387;
}


