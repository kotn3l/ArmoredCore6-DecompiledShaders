#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1031;
float _3719;
float _3720;
float _3721;
float _3722;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    float _300 = (cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _301 = (cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _314 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_300 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_301 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _320 = _314.x * cbMtdParam._m0[9u].x;
    float _321 = _314.y * cbMtdParam._m0[9u].y;
    float _322 = _314.z * cbMtdParam._m0[9u].z;
    float _324 = cbMtdParam._m0[14u].z * TEXCOORD_1.z;
    vec4 _337 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    float _341 = _337.z;
    float _345 = (_337.x * 2.0) + (-1.0);
    float _347 = (_337.y * 2.0) + (-1.0);
    float _348 = dot(vec2(_345, _347), vec2(_345, _347));
    float _3731 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _354 = sqrt(1.0 - (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))));
    float _365 = fma(0.9591662883758544921875, _226, fma(0.2000000476837158203125, _219, _205 * 0.2000000476837158203125));
    float _369 = fma(0.9591662883758544921875, _227, fma(0.2000000476837158203125, _220, _206 * 0.2000000476837158203125));
    float _372 = fma(0.9591662883758544921875, _228, fma(0.2000000476837158203125, _221, _207 * 0.2000000476837158203125));
    float _376 = inversesqrt(dot(vec3(_365, _369, _372), vec3(_365, _369, _372)));
    float _383 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _384 = _383 * _282;
    float _385 = _383 * _283;
    float _386 = _383 * _284;
    float _390 = dot(vec4(_384, _385, _386, 0.0), vec4(_376 * _365, _376 * _369, _376 * _372, 0.0)) - cbMtdParam._m0[14u].x;
    float _3742 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _397 = exp2(log2(1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].y : (isnan(cbMtdParam._m0[14u].y) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].y, 0.001000000047497451305389404296875))));
    vec4 _426 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_2, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    vec4 _460 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((cbMtdParam._m0[15u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _491 = texture(sampler2D(M_AMSN_M0_M1_Heatingwire_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[16u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[16u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _513 = fma(_354, _226, fma(_347, _219, _345 * _205));
    float _516 = fma(_354, _227, fma(_347, _220, _345 * _206));
    float _519 = fma(_354, _228, fma(_347, _221, _345 * _207));
    float _523 = inversesqrt(dot(vec3(_513, _516, _519), vec3(_513, _516, _519)));
    float _524 = _523 * _513;
    float _525 = _523 * _516;
    float _526 = _523 * _519;
    float _3758 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _527 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _528 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3791 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3802 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _547 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _552 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _554 = _552.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _710 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _716 = (cbMatDynParam._m0[5u].x * _710) + cbMatDynParam._m0[5u].y;
        float _3813 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _721 = (cbMatDynParam._m0[5u].z * _710) + cbMatDynParam._m0[5u].w;
        float _3824 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) - _717)) + _717) < ((_554 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _566 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _567 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _586 = fma(_526, cbSceneParam._m0[5u].z, fma(_525, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _524));
    float _589 = fma(_526, cbSceneParam._m0[6u].z, fma(_525, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _524));
    float _592 = fma(_526, cbSceneParam._m0[7u].z, fma(_525, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _524));
    uint _605 = uint(roundEven(NORMAL.w)) * 13u;
    uint _606 = _605 + 9u;
    uint _607 = _606 + uint(cbMatDynParam._m0[0u].w);
    float _613 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_607].x;
    float _614 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_607].y;
    float _615 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_607].z;
    float _3835 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    vec4 _627 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _566, cbSceneParam._m0[86u].y * _567));
    float _630 = _627.x * TEXCOORD_1.w;
    float _631 = dot(vec3(_524, _525, _526), vec3(_384, _385, _386));
    float _634 = _631 * 2.0;
    float _638 = (_634 * _524) - _384;
    float _639 = (_634 * _525) - _385;
    float _640 = (_634 * _526) - _386;
    float _644 = abs(dot(vec3(_384, _385, _386), vec3(_524, _525, _526)));
    float _3868 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _646 = sqrt(_528);
    float _659 = exp2((_646 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_646 * 3.0));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1030;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _755 = fma(_699, cbModelParam._m0[26u].z, fma(_695, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691));
        float _759 = fma(_699, cbModelParam._m0[27u].z, fma(_695, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691));
        float _763 = fma(_699, cbModelParam._m0[28u].z, fma(_695, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691));
        float _788 = _691 + _524;
        float _789 = _695 + _525;
        float _790 = _699 + _526;
        float _800 = fma(_790, cbModelParam._m0[26u].z, fma(_789, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _788)) - _755;
        float _801 = fma(_790, cbModelParam._m0[27u].z, fma(_789, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _788)) - _759;
        float _802 = fma(_790, cbModelParam._m0[28u].z, fma(_789, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _788)) - _763;
        float _806 = inversesqrt(dot(vec3(_800, _801, _802), vec3(_800, _801, _802)));
        float _819 = ((_806 * _800) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_755 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _820 = ((_806 * _801) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_759 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _821 = ((_806 * _802) / cbModelParam._m0[34u].z) + ((((((_763 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        float _858 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_824.x + (-0.5));
        float _860 = _858 * (_824.y + (-0.5));
        float _861 = _858 * (_824.z + (-0.5));
        float _868 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_831.x + (-0.5));
        float _870 = _868 * (_831.y + (-0.5));
        float _871 = _868 * (_831.z + (-0.5));
        float _878 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_838.x + (-0.5));
        float _880 = _878 * (_838.y + (-0.5));
        float _881 = _878 * (_838.z + (-0.5));
        float _888 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_845.x + (-0.5));
        float _890 = _888 * (_845.y + (-0.5));
        float _891 = _888 * (_845.z + (-0.5));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = _859 * 0.5;
        float _896 = _869 * 0.5;
        float _897 = _879 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _912 = (dot(vec3(_524, _525, _526), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _922 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3916 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_924 + 1.0))) + _929) * _892;
        float _939 = _860 * 0.5;
        float _940 = _870 * 0.5;
        float _941 = _880 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _955 = (dot(vec3(_524, _525, _526), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _964 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3949 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_966 + 1.0))) + _971) * _893;
        float _981 = _861 * 0.5;
        float _982 = _871 * 0.5;
        float _983 = _881 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_524, _525, _526), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3982 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1008 + 1.0))) + _1013) * _894;
        _1030 = _861;
        _1032 = _860;
        _1033 = _859;
        _1034 = _871;
        _1035 = _870;
        _1036 = _869;
        _1037 = _881;
        _1038 = _880;
        _1039 = _879;
        _1040 = _894;
        _1041 = _893;
        _1042 = _892;
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
    }
    else
    {
        _1030 = _1031;
        _1032 = _1031;
        _1033 = _1031;
        _1034 = _1031;
        _1035 = _1031;
        _1036 = _1031;
        _1037 = _1031;
        _1038 = _1031;
        _1039 = _1031;
        _1040 = _1031;
        _1041 = _1031;
        _1042 = _1031;
        _1043 = 0.0;
        _1044 = 0.0;
        _1045 = 0.0;
    }
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1074 = fma(_699, cbModelParam._m0[30u].z, fma(_695, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _691));
        float _1078 = fma(_699, cbModelParam._m0[31u].z, fma(_695, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _691));
        float _1082 = fma(_699, cbModelParam._m0[32u].z, fma(_695, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _691));
        float _1105 = _691 + _524;
        float _1106 = _695 + _525;
        float _1107 = _699 + _526;
        float _1117 = fma(_1107, cbModelParam._m0[30u].z, fma(_1106, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1105)) - _1074;
        float _1118 = fma(_1107, cbModelParam._m0[31u].z, fma(_1106, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1105)) - _1078;
        float _1119 = fma(_1107, cbModelParam._m0[32u].z, fma(_1106, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1105)) - _1082;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1074 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1078 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[35u].z) + ((((((_1082 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1173 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1140.x + (-0.5));
        float _1175 = _1173 * (_1140.y + (-0.5));
        float _1176 = _1173 * (_1140.z + (-0.5));
        float _1183 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1147.x + (-0.5));
        float _1185 = _1183 * (_1147.y + (-0.5));
        float _1186 = _1183 * (_1147.z + (-0.5));
        float _1193 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1154.x + (-0.5));
        float _1195 = _1193 * (_1154.y + (-0.5));
        float _1196 = _1193 * (_1154.z + (-0.5));
        float _1203 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1161.x + (-0.5));
        float _1205 = _1203 * (_1161.y + (-0.5));
        float _1206 = _1203 * (_1161.z + (-0.5));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = _1174 * 0.5;
        float _1211 = _1184 * 0.5;
        float _1212 = _1194 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_524, _525, _526), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _4045 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1237 + 1.0))) + _1242) * _1207;
        float _1252 = _1175 * 0.5;
        float _1253 = _1185 * 0.5;
        float _1254 = _1195 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_524, _525, _526), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _4078 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1279 + 1.0))) + _1284) * _1208;
        float _1294 = _1176 * 0.5;
        float _1295 = _1186 * 0.5;
        float _1296 = _1196 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_524, _525, _526), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4111 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1321 + 1.0))) + _1326) * _1209;
        _1343 = _1176;
        _1344 = _1175;
        _1345 = _1174;
        _1346 = _1186;
        _1347 = _1185;
        _1348 = _1184;
        _1349 = _1196;
        _1350 = _1195;
        _1351 = _1194;
        _1352 = _1209;
        _1353 = _1208;
        _1354 = _1207;
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1031;
        _1344 = _1031;
        _1345 = _1031;
        _1346 = _1031;
        _1347 = _1031;
        _1348 = _1031;
        _1349 = _1031;
        _1350 = _1031;
        _1351 = _1031;
        _1352 = _1031;
        _1353 = _1031;
        _1354 = _1031;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1043)) + _1043;
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1044)) + _1044;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1045)) + _1045;
    float _1390 = fma(_1369, cbSceneParam._m0[89u].z, fma(_1368, cbSceneParam._m0[89u].y, _1367 * cbSceneParam._m0[89u].x));
    float _1393 = fma(_1369, cbSceneParam._m0[90u].z, fma(_1368, cbSceneParam._m0[90u].y, _1367 * cbSceneParam._m0[90u].x));
    float _1396 = fma(_1369, cbSceneParam._m0[91u].z, fma(_1368, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1367));
    float _1411 = _638 * 0.5;
    float _1412 = _639 * 0.5;
    float _1413 = _640 * 0.5;
    float _1414 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1417 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1420 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1454;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1427 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1030, _1034, _1037, _1040));
        float _1431 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1032, _1035, _1038, _1041));
        float _1435 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1033, _1036, _1039, _1042));
        float _1442 = dot(vec4(cbModelParam._m0[39u]), vec4(_1411, _1412, _1413, 1.0));
        _1454 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1454 = 1.0;
    }
    float _1465;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1456 = dot(vec4(cbModelParam._m0[40u]), vec4(_1411, _1412, _1413, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1469 = (_1465 * cbModelParam._m0[1u].x) + (_1454 * (1.0 - cbModelParam._m0[1u].x));
    float _1479 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _528);
    float _1480 = isnan(_1479) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1479 : min(cbModelParam._m0[25u].z, _1479));
    float _1560;
    float _1562;
    float _1564;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1527 = fma(_699, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691)) + cbModelParam._m0[13u].w;
        float _1531 = fma(_699, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691)) + cbModelParam._m0[14u].w;
        float _1535 = fma(_699, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691)) + cbModelParam._m0[15u].w;
        float _1538 = fma(_640, cbModelParam._m0[13u].z, fma(_639, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _638));
        float _1541 = fma(_640, cbModelParam._m0[14u].z, fma(_639, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _638));
        float _1544 = fma(_640, cbModelParam._m0[15u].z, fma(_639, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _638));
        float _1572;
        if (_1538 > 0.0)
        {
            _1572 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1572 = frontier_phi_19_17_ladder;
        }
        float _1744;
        if (_1541 > 0.0)
        {
            _1744 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1744 = frontier_phi_28_24_ladder;
        }
        float _2040;
        if (_1544 > 0.0)
        {
            _2040 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2040 = frontier_phi_40_35_ladder;
        }
        float _2042 = isnan(_1744) ? _1572 : (isnan(_1572) ? _1744 : min(_1572, _1744));
        float _2043 = isnan(_2040) ? _2042 : (isnan(_2042) ? _2040 : min(_2042, _2040));
        float _2047 = (_2043 * _1538) + _1527;
        float _2048 = (_2043 * _1541) + _1531;
        float _2049 = (_2043 * _1544) + _1535;
        float _2050 = _2043 * 9.9999997473787516355514526367188e-05;
        float _2052 = (-1.0) - _2050;
        float _2054 = _2050 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2049 > _2054) || ((_2049 < _2052) || ((_2048 > _2054) || ((_2048 < _2052) || ((_2047 < _2052) || (_2047 > _2054))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2194 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2049, cbModelParam._m0[9u].z, fma(_2048, cbModelParam._m0[9u].y, _2047 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2049, cbModelParam._m0[10u].z, fma(_2048, cbModelParam._m0[10u].y, _2047 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2049, cbModelParam._m0[11u].z, fma(_2048, cbModelParam._m0[11u].y, _2047 * cbModelParam._m0[11u].x))), _1480);
            frontier_phi_18_40_ladder = _2194.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2194.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2194.x * cbModelParam._m0[1u].y;
        }
        _1560 = frontier_phi_18_40_ladder_2;
        _1562 = frontier_phi_18_40_ladder_1;
        _1564 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1548 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_638, _639, _640), _1480);
        _1560 = _1548.x * cbModelParam._m0[1u].y;
        _1562 = _1548.y * cbModelParam._m0[1u].y;
        _1564 = _1548.z * cbModelParam._m0[1u].y;
    }
    float _1568 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _528);
    float _1569 = isnan(_1568) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1568 : min(cbModelParam._m0[25u].w, _1568));
    float _1661;
    float _1663;
    float _1665;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1625 = fma(_699, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691)) + cbModelParam._m0[21u].w;
        float _1629 = fma(_699, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691)) + cbModelParam._m0[22u].w;
        float _1633 = fma(_699, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691)) + cbModelParam._m0[23u].w;
        float _1636 = fma(_640, cbModelParam._m0[21u].z, fma(_639, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _638));
        float _1639 = fma(_640, cbModelParam._m0[22u].z, fma(_639, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _638));
        float _1642 = fma(_640, cbModelParam._m0[23u].z, fma(_639, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _638));
        float _1749;
        if (_1636 > 0.0)
        {
            _1749 = abs((1.0 - _1625) / _1636);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1625 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1749 = frontier_phi_30_26_ladder;
        }
        float _2067;
        if (_1639 > 0.0)
        {
            _2067 = abs((1.0 - _1629) / _1639);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1629 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2067 = frontier_phi_42_37_ladder;
        }
        float _2394;
        if (_1642 > 0.0)
        {
            _2394 = abs((1.0 - _1633) / _1642);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1633 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2394 = frontier_phi_52_49_ladder;
        }
        float _2396 = isnan(_2067) ? _1749 : (isnan(_1749) ? _2067 : min(_1749, _2067));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1636) + _1625;
        float _2402 = (_2397 * _1639) + _1629;
        float _2403 = (_2397 * _1642) + _1633;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2404;
        float _2407 = _2404 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2403 > _2407) || ((_2403 < _2405) || ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 < _2405) || (_2401 > _2407))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2403, cbModelParam._m0[17u].z, fma(_2402, cbModelParam._m0[17u].y, _2401 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2403, cbModelParam._m0[18u].z, fma(_2402, cbModelParam._m0[18u].y, _2401 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2403, cbModelParam._m0[19u].z, fma(_2402, cbModelParam._m0[19u].y, _2401 * cbModelParam._m0[19u].x))), _1569);
            frontier_phi_27_52_ladder = _2521.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2521.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2521.x * cbModelParam._m0[1u].z;
        }
        _1661 = frontier_phi_27_52_ladder_2;
        _1663 = frontier_phi_27_52_ladder_1;
        _1665 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_638, _639, _640), _1569);
        _1661 = _1645.x * cbModelParam._m0[1u].z;
        _1663 = _1645.y * cbModelParam._m0[1u].z;
        _1665 = _1645.z * cbModelParam._m0[1u].z;
    }
    float _1677 = ((((1.0 - _659) * ((_646 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_659 * _646)) * _630;
    float _1678 = _1677 * ((cbModelParam._m0[1u].w * (_1661 - _1560)) + _1560);
    float _1679 = _1677 * ((cbModelParam._m0[1u].w * (_1663 - _1562)) + _1562);
    float _1680 = _1677 * ((cbModelParam._m0[1u].w * (_1665 - _1564)) + _1564);
    float _1683 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1686 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1689 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, _1678 * cbSceneParam._m0[91u].x));
    float _1723 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1727 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1731 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1735 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1736 = _1723 / _1735;
    float _1737 = _1727 / _1735;
    float _1738 = _1731 / _1735;
    float _1885;
    float _1886;
    float _1887;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1765 = ((uint(_1738 > cbSceneParam._m0[59u].y) + uint(_1738 > cbSceneParam._m0[59u].x)) + uint(_1738 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1766 = _1765 + 43u;
        uint _1774 = _1765 + 44u;
        uint _1782 = _1765 + 45u;
        uint _1790 = _1765 + 46u;
        float _1801 = fma(_1735, cbSceneParam._m0[_1766].w, fma(_1731, cbSceneParam._m0[_1766].z, fma(_1727, cbSceneParam._m0[_1766].y, _1723 * cbSceneParam._m0[_1766].x)));
        float _1805 = fma(_1735, cbSceneParam._m0[_1774].w, fma(_1731, cbSceneParam._m0[_1774].z, fma(_1727, cbSceneParam._m0[_1774].y, _1723 * cbSceneParam._m0[_1774].x)));
        float _1813 = fma(_1735, cbSceneParam._m0[_1790].w, fma(_1731, cbSceneParam._m0[_1790].z, fma(_1727, cbSceneParam._m0[_1790].y, _1723 * cbSceneParam._m0[_1790].x)));
        float _1818 = cbSceneParam._m0[33u].z * _1813;
        float _1820 = cbSceneParam._m0[33u].w * _1813;
        float _1823 = fma(_1735, cbSceneParam._m0[_1782].w, fma(_1731, cbSceneParam._m0[_1782].z, fma(_1727, cbSceneParam._m0[_1782].y, _1723 * cbSceneParam._m0[_1782].x))) / _1813;
        float _1871 = (cbSceneParam._m0[33u].x - sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738))) * cbSceneParam._m0[33u].y;
        float _4237 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1878 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1818 + _1801) / _1813, (_1820 + _1805) / _1813), _1823), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1820 + _1801) / _1813, (_1805 - _1818) / _1813), _1823), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1801 - _1818) / _1813, (_1805 - _1820) / _1813), _1823), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1801 - _1820) / _1813, (_1818 + _1805) / _1813), _1823), 0.0)).x), vec4(0.25)));
        _1885 = 1.0 - (_1878 * cbSceneParam._m0[34u].x);
        _1886 = 1.0 - (_1878 * cbSceneParam._m0[34u].y);
        _1887 = 1.0 - (_1878 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1885 = 1.0;
        _1886 = 1.0;
        _1887 = 1.0;
    }
    float _1951;
    float _1953;
    float _1955;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1939 = fma(_1735, cbSceneParam._m0[63u].w, fma(_1731, cbSceneParam._m0[63u].z, fma(_1727, cbSceneParam._m0[63u].y, _1723 * cbSceneParam._m0[63u].x)));
        float _1940 = fma(_1735, cbSceneParam._m0[60u].w, fma(_1731, cbSceneParam._m0[60u].z, fma(_1727, cbSceneParam._m0[60u].y, _1723 * cbSceneParam._m0[60u].x))) / _1939;
        float _1941 = fma(_1735, cbSceneParam._m0[61u].w, fma(_1731, cbSceneParam._m0[61u].z, fma(_1727, cbSceneParam._m0[61u].y, _1723 * cbSceneParam._m0[61u].x))) / _1939;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1940 >= cbSceneParam._m0[64u].x) && (_1941 >= cbSceneParam._m0[64u].y)) && (_1940 <= cbSceneParam._m0[64u].z)) && (_1941 <= cbSceneParam._m0[64u].w))
        {
            float _2080 = fma(_1735, cbSceneParam._m0[62u].w, fma(_1731, cbSceneParam._m0[62u].z, fma(_1727, cbSceneParam._m0[62u].y, _1723 * cbSceneParam._m0[62u].x))) / _1939;
            float _2084 = isnan(cbSceneParam._m0[41u].w) ? _2080 : (isnan(_2080) ? cbSceneParam._m0[41u].w : max(_2080, cbSceneParam._m0[41u].w));
            float _2127 = (cbSceneParam._m0[33u].x - sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738))) * cbSceneParam._m0[33u].y;
            float _4253 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
            float _2134 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1940, cbSceneParam._m0[33u].w + _1941), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1940, _1941 - cbSceneParam._m0[33u].z), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1940 - cbSceneParam._m0[33u].z, _1941 - cbSceneParam._m0[33u].w), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1940 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1941), _2084), 0.0)).x), vec4(0.25)));
            float _2138 = 1.0 - (_2134 * cbSceneParam._m0[34u].x);
            float _2139 = 1.0 - (_2134 * cbSceneParam._m0[34u].y);
            float _2140 = 1.0 - (_2134 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2139) ? _1886 : (isnan(_1886) ? _2139 : min(_1886, _2139));
            frontier_phi_39_38_ladder_1 = isnan(_2138) ? _1885 : (isnan(_1885) ? _2138 : min(_1885, _2138));
            frontier_phi_39_38_ladder_2 = isnan(_2140) ? _1887 : (isnan(_1887) ? _2140 : min(_1887, _2140));
        }
        else
        {
            frontier_phi_39_38_ladder = _1886;
            frontier_phi_39_38_ladder_1 = _1885;
            frontier_phi_39_38_ladder_2 = _1887;
        }
        _1951 = frontier_phi_39_38_ladder_1;
        _1953 = frontier_phi_39_38_ladder;
        _1955 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1951 = _1885;
        _1953 = _1886;
        _1955 = _1887;
    }
    uvec4 _1960 = floatBitsToUint(cbInstanceData._m0[_605 + 5u]);
    uint _1962 = _1960.x * 14u;
    uint _1963 = _1962 + 13u;
    float _1970 = _630 + (-1.0);
    float _1975 = (cbLight._m0[_1963].x * _1970) + 1.0;
    float _1976 = (cbLight._m0[_1963].y * _1970) + 1.0;
    float _1977 = (cbLight._m0[_1963].z * _1970) + 1.0;
    float _1978 = (cbLight._m0[_1963].w * _1970) + 1.0;
    uint _1979 = _1962 + 5u;
    float _1985 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _1989 = _1962 + 4u;
    float _1999 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _2003 = _1962 | 1u;
    float _2014 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_524, _525, _526));
    float _2017 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_524, _525, _526));
    float _4289 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _4300 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2022 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2024 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.3183098733425140380859375;
    float _2031 = ((cbLight._m0[_1979].x * _1985) * _2024) + (((cbLight._m0[_1989].x * _1951) * _1999) * _2022);
    float _2032 = ((_1985 * cbLight._m0[_1979].y) * _2024) + (((cbLight._m0[_1989].y * _1953) * _1999) * _2022);
    float _2033 = ((_1985 * cbLight._m0[_1979].z) * _2024) + (((cbLight._m0[_1989].z * _1955) * _1999) * _2022);
    uvec4 _2037 = floatBitsToUint(cbLight._m0[_1962 + 12u]);
    bool _2039 = _2037.x == 0u;
    float _2141;
    float _2143;
    float _2145;
    if (_2039)
    {
        _2141 = _2031;
        _2143 = _2032;
        _2145 = _2033;
    }
    else
    {
        uint _2149 = _1962 + 6u;
        float _2165 = (dot(vec3(cbLight._m0[_1962 + 2u].xyz), vec3(_524, _525, _526)) * 0.5) + 0.5;
        float _2166 = _2165 * _2165;
        float _4311 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2167 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2168 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2141 = (((cbLight._m0[_2149].x * 0.3183098733425140380859375) * _2167) * _2168) + _2031;
        _2143 = (((cbLight._m0[_2149].y * 0.3183098733425140380859375) * _2167) * _2168) + _2032;
        _2145 = (((cbLight._m0[_2149].z * 0.3183098733425140380859375) * _2167) * _2168) + _2033;
    }
    bool _2148 = _2037.y == 0u;
    float _2203;
    float _2205;
    float _2207;
    if (_2148)
    {
        _2203 = _2141;
        _2205 = _2143;
        _2207 = _2145;
    }
    else
    {
        uint _2365 = _1962 + 7u;
        float _2381 = (dot(vec3(cbLight._m0[_1962 + 3u].xyz), vec3(_524, _525, _526)) * 0.5) + 0.5;
        float _2382 = _2381 * _2381;
        float _4327 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2383 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2384 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2203 = (((cbLight._m0[_2365].x * 0.3183098733425140380859375) * _2383) * _2384) + _2141;
        _2205 = (((cbLight._m0[_2365].y * 0.3183098733425140380859375) * _2383) * _2384) + _2143;
        _2207 = (((cbLight._m0[_2365].z * 0.3183098733425140380859375) * _2383) * _2384) + _2145;
    }
    uint _2210 = _1962 + 8u;
    float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _528) * 0.949999988079071044921875);
    float _2224 = _2223 * _2223;
    float _2225 = cbLight._m0[_1962].x + _384;
    float _2226 = cbLight._m0[_1962].y + _385;
    float _2227 = cbLight._m0[_1962].z + _386;
    float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
    float _2232 = _2231 * _2225;
    float _2233 = _2231 * _2226;
    float _2234 = _2231 * _2227;
    float _2235 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_1962].xyz));
    float _4343 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _4354 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _2239 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2240 = dot(vec3(_524, _525, _526), vec3(_2232, _2233, _2234));
    float _4365 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2244 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2232, _2233, _2234));
    float _4376 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2248 = _2224 * _2224;
    float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
    float _2263 = (exp2(log2(1.0 - (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2264 = 1.0 - _2224;
    float _2275 = (0.5 / (((_2239 * ((_2238 * _2264) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2264) + _2224) * _2238))) * _2238;
    float _4387 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2277 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
    uint _2291 = _1962 + 9u;
    float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _528) * 0.949999988079071044921875);
    float _2303 = _2302 * _2302;
    float _2304 = cbLight._m0[_2003].x + _384;
    float _2305 = cbLight._m0[_2003].y + _385;
    float _2306 = cbLight._m0[_2003].z + _386;
    float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
    float _2311 = _2310 * _2304;
    float _2312 = _2310 * _2305;
    float _2313 = _2310 * _2306;
    float _2314 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_2003].xyz));
    float _4398 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2318 = dot(vec3(_524, _525, _526), vec3(_2311, _2312, _2313));
    float _4409 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2311, _2312, _2313));
    float _4420 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2303 * _2303;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2339 = (exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2340 = 1.0 - _2303;
    float _2350 = (0.5 / (((_2239 * ((_2317 * _2340) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2340) + _2303) * _2317))) * _2317;
    float _4431 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    float _2362 = (((_2339 * cbLight._m0[_2291].x) * _2352) * _1985) + ((((cbLight._m0[_2210].x * _1951) * _2263) * _2277) * _1999);
    float _2363 = (((_2339 * cbLight._m0[_2291].y) * _2352) * _1985) + ((((cbLight._m0[_2210].y * _1953) * _2263) * _2277) * _1999);
    float _2364 = (((_2339 * cbLight._m0[_2291].z) * _2352) * _1985) + ((((cbLight._m0[_2210].z * _1955) * _2263) * _2277) * _1999);
    float _2420;
    float _2422;
    float _2424;
    if (_2039)
    {
        _2420 = _2362;
        _2422 = _2363;
        _2424 = _2364;
    }
    else
    {
        uint _2426 = _1962 + 2u;
        uint _2430 = _1962 + 10u;
        float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _528) * 0.949999988079071044921875);
        float _2445 = _2444 * _2444;
        float _2446 = cbLight._m0[_2426].x + _384;
        float _2447 = cbLight._m0[_2426].y + _385;
        float _2448 = cbLight._m0[_2426].z + _386;
        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
        float _2453 = _2452 * _2446;
        float _2454 = _2452 * _2447;
        float _2455 = _2452 * _2448;
        float _2456 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_2426].xyz));
        float _4442 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2460 = dot(vec3(_524, _525, _526), vec3(_2453, _2454, _2455));
        float _4453 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2464 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2453, _2454, _2455));
        float _4464 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2468 = _2445 * _2445;
        float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
        float _2481 = (exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2482 = 1.0 - _2445;
        float _2492 = (0.5 / (((_2239 * ((_2459 * _2482) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2482) + _2445) * _2459))) * _2459;
        float _4475 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2494 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
        float _2495 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2420 = (((_2481 * cbLight._m0[_2430].x) * _2494) * _2495) + _2362;
        _2422 = (((_2481 * cbLight._m0[_2430].y) * _2494) * _2495) + _2363;
        _2424 = (((_2481 * cbLight._m0[_2430].z) * _2494) * _2495) + _2364;
    }
    float _2526;
    float _2528;
    float _2530;
    if (_2148)
    {
        _2526 = _2420;
        _2528 = _2422;
        _2530 = _2424;
    }
    else
    {
        uint _2537 = _1962 + 3u;
        uint _2541 = _1962 + 11u;
        float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2537].w)) * _528) * 0.949999988079071044921875);
        float _2556 = _2555 * _2555;
        float _2557 = cbLight._m0[_2537].x + _384;
        float _2558 = cbLight._m0[_2537].y + _385;
        float _2559 = cbLight._m0[_2537].z + _386;
        float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
        float _2564 = _2563 * _2557;
        float _2565 = _2563 * _2558;
        float _2566 = _2563 * _2559;
        float _2567 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_2537].xyz));
        float _4491 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2571 = dot(vec3(_524, _525, _526), vec3(_2564, _2565, _2566));
        float _4502 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2575 = dot(vec3(cbLight._m0[_2537].xyz), vec3(_2564, _2565, _2566));
        float _4513 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2579 = _2556 * _2556;
        float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
        float _2592 = (exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2593 = 1.0 - _2556;
        float _2603 = (0.5 / (((_2239 * ((_2570 * _2593) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2593) + _2556) * _2570))) * _2570;
        float _4524 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2605 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
        float _2606 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2526 = (((_2592 * cbLight._m0[_2541].x) * _2605) * _2606) + _2420;
        _2528 = (((_2592 * cbLight._m0[_2541].y) * _2605) * _2606) + _2422;
        _2530 = (((_2592 * cbLight._m0[_2541].z) * _2605) * _2606) + _2424;
    }
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    if (_1960.y == 0u)
    {
        uvec4 _2627 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2628 = _2627.x;
        uint _2639 = uint((float(_2627.y) * floor(float(uint(cbSceneParam._m0[85u].y * _567) / _2628))) + floor(float(uint(cbSceneParam._m0[85u].x * _566) / _2628)));
        float _2649 = (log2(_1738 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2650 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        uint _2653 = uint(isnan(14.0) ? _2650 : (isnan(_2650) ? 14.0 : min(_2650, 14.0)));
        uvec4 _2658 = texelFetch(g_lightClusterGridBuffer, int(((_2653 << 2u) + (_2639 << 6u)) >> 2u));
        uint _2659 = _2658.x;
        uint _2660 = _2627.z;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((((1u << ((_2660 >> 4u) & 15u)) + 4294967295u) & _2659) == 0u) || ((_2660 & 240u) == 0u))
        {
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
        }
        else
        {
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            uint _2936 = 0u;
            uint _2945;
            bool _2946;
            for (;;)
            {
                _2945 = texelFetch(g_lightClassification, int((((_2653 << 5u) + (_2639 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                _2946 = _2945 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2946)
                {
                    frontier_phi_73_pred = _2935;
                    frontier_phi_73_pred_1 = _2934;
                    frontier_phi_73_pred_2 = _2933;
                    frontier_phi_73_pred_3 = _2932;
                    frontier_phi_73_pred_4 = _2931;
                    frontier_phi_73_pred_5 = _2930;
                }
                else
                {
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    uint _3081;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2934;
                    _3080 = _2935;
                    _3081 = _2945;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    for (;;)
                    {
                        uint _3085 = uint(findLSB(_3081)) + (_2936 << 5u);
                        uint _3082 = (_3081 + 4294967295u) & _3081;
                        uint _3087 = _3085 * 48u;
                        vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 3u)).x));
                        uint _3107 = (_3085 * 48u) + 4u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 3u)).x));
                        uint _3126 = (_3085 * 48u) + 8u;
                        vec3 _3137 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x));
                        float _3141 = _3101.x - _1736;
                        float _3142 = _3101.y - _1737;
                        float _3143 = _3101.z - _1738;
                        float _3144 = dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143));
                        float _3147 = inversesqrt(_3144);
                        float _3148 = _3147 * _3141;
                        float _3149 = _3147 * _3142;
                        float _3150 = _3147 * _3143;
                        float _3151 = dot(vec3(_586, _589, _592), vec3(_3148, _3149, _3150));
                        float _3156 = 1.0 - (_3144 * _3101.w);
                        float _4550 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3158 = sqrt(_3144) * _3120.w;
                        float _3161 = 1.39999997615814208984375 / (_3158 + 1.39999997615814208984375);
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3151) + _3162;
                        float _3168 = _3158 * _3158;
                        float _3172 = ((isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))) * _3157) / ((_3168 * 0.699999988079071044921875) + 1.0);
                        float _3176 = (-0.0) - _1736;
                        float _3177 = (-0.0) - _1737;
                        float _3178 = (-0.0) - _1738;
                        float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                        float _3183 = _3182 * _3176;
                        float _3184 = _3182 * _3177;
                        float _3185 = _3182 * _3178;
                        float _3192 = exp2(log2(1.0 / ((_3168 * 3.5) + 5.0)) * 0.25);
                        float _3193 = 1.0 - _646;
                        float _3200 = sqrt(1.0 - ((1.0 - (_3193 * _3193)) * (1.0 - (_3192 * _3192))));
                        float _3201 = _3200 * _3200;
                        float _3202 = _3201 * _3201;
                        float _3203 = _3183 + _3148;
                        float _3204 = _3184 + _3149;
                        float _3205 = _3185 + _3150;
                        float _3209 = inversesqrt(dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205)));
                        float _3213 = dot(vec3(_586, _589, _592), vec3(_3183, _3184, _3185));
                        float _4566 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3216 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3217 = dot(vec3(_586, _589, _592), vec3(_3209 * _3203, _3209 * _3204, _3209 * _3205));
                        float _4577 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3220 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3224 = ((_3220 * _3220) * (_3202 + (-1.0))) + 1.0;
                        float _3225 = _3161 * _3201;
                        float _3226 = _3225 * _3225;
                        float _3229 = ((1.0 - _3226) * _3151) + _3226;
                        float _4588 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3230 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3231 = 1.0 - _3201;
                        float _3241 = (0.5 / (((_3230 * ((_3216 * _3231) + _3201)) + 9.9999999392252902907785028219223e-09) + (((_3230 * _3231) + _3201) * _3216))) * _3230;
                        float _4599 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3252 = (((_3202 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3224 * _3224) * ((_3168 * 2.1991131305694580078125) + 3.141590118408203125))) * _3157;
                        _3005 = (_3172 * _3120.x) + _3078;
                        _3006 = (_3172 * _3120.y) + _3079;
                        _3007 = (_3172 * _3120.z) + _3080;
                        _3002 = (_3252 * _3137.x) + _3075;
                        _3003 = (_3252 * _3137.y) + _3076;
                        _3004 = (_3252 * _3137.z) + _3077;
                        if (_3082 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3006;
                            _3080 = _3007;
                            _3081 = _3082;
                        }
                    }
                    frontier_phi_73_pred = _3007;
                    frontier_phi_73_pred_1 = _3006;
                    frontier_phi_73_pred_2 = _3005;
                    frontier_phi_73_pred_3 = _3004;
                    frontier_phi_73_pred_4 = _3003;
                    frontier_phi_73_pred_5 = _3002;
                }
                _2780 = frontier_phi_73_pred;
                _2778 = frontier_phi_73_pred_1;
                _2776 = frontier_phi_73_pred_2;
                _2774 = frontier_phi_73_pred_3;
                _2772 = frontier_phi_73_pred_4;
                _2770 = frontier_phi_73_pred_5;
                uint _2937 = _2936 + 1u;
                if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2930 = _2770;
                    _2931 = _2772;
                    _2932 = _2774;
                    _2933 = _2776;
                    _2934 = _2778;
                    _2935 = _2780;
                    _2936 = _2937;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
        }
        uvec4 _2783 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2784 = _2783.z;
        uint _2786 = (_2784 >> 8u) & 15u;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((4294967295u << _2786) & _2659) == 0u)
        {
            _2898 = _2769;
            _2900 = _2771;
            _2902 = _2773;
            _2904 = _2775;
            _2906 = _2777;
            _2908 = _2779;
        }
        else
        {
            float _2923 = inversesqrt(dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738)));
            float _2924 = _2923 * _1736;
            float _2925 = _2923 * _1737;
            float _2926 = _2923 * _1738;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2786 < ((_2784 >> 12u) & 15u))
            {
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _3058 = _2769;
                float _3059 = _2771;
                float _3060 = _2773;
                float _3061 = _2775;
                float _3062 = _2777;
                float _3063 = _2779;
                uint _3064 = _2786;
                uint _3073;
                bool _3074;
                for (;;)
                {
                    _3073 = texelFetch(g_lightClassification, int((((_2653 << 5u) + (_2639 << 9u)) + (_3064 << 2u)) >> 2u)).x;
                    _3074 = _3073 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3074)
                    {
                        frontier_phi_84_pred = _3062;
                        frontier_phi_84_pred_1 = _3061;
                        frontier_phi_84_pred_2 = _3060;
                        frontier_phi_84_pred_3 = _3059;
                        frontier_phi_84_pred_4 = _3058;
                        frontier_phi_84_pred_5 = _3063;
                    }
                    else
                    {
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3279 = _3058;
                        float _3280 = _3059;
                        float _3281 = _3060;
                        float _3282 = _3061;
                        float _3283 = _3062;
                        float _3284 = _3063;
                        uint _3285 = _3073;
                        uint _3286;
                        vec4 _3311;
                        float _3312;
                        vec4 _3327;
                        vec3 _3339;
                        vec4 _3354;
                        vec4 _3370;
                        float _3417;
                        bool _3418;
                        for (;;)
                        {
                            uint _3296 = ((_3064 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3285));
                            _3286 = (_3285 + 4294967295u) & _3285;
                            uint _3298 = _3296 * 40u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            _3312 = _3311.w;
                            uint _3314 = (_3296 * 40u) + 4u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3329 = (_3296 * 40u) + 8u;
                            _3339 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x));
                            uint _3341 = (_3296 * 40u) + 16u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3357 = (_3296 * 40u) + 20u;
                            _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3373 = (_3296 * 40u) + 24u;
                            vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3392 = (_3296 * 40u) + 28u;
                            vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3417 = fma(_1738, _3405.z, fma(_1737, _3405.y, _3405.x * _1736)) + _3405.w;
                            _3418 = !((fma(_1738, _3386.z, fma(_1737, _3386.y, _3386.x * _1736)) + _3386.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3418)
                            {
                                float _3445 = _3311.x - _1736;
                                float _3446 = _3311.y - _1737;
                                float _3447 = _3311.z - _1738;
                                float _3448 = dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447));
                                float _3451 = inversesqrt(_3448);
                                float _3452 = _3451 * _3445;
                                float _3453 = _3451 * _3446;
                                float _3454 = _3451 * _3447;
                                float _3458 = 1.0 - (_3448 / (_3312 * _3312));
                                float _4610 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3463 = sqrt(_3448) * _3327.w;
                                float _3465 = 1.39999997615814208984375 / (_3463 + 1.39999997615814208984375);
                                float _3466 = _3465 * _3465;
                                float _3469 = ((1.0 - _3466) * dot(vec3(_3452, _3453, _3454), vec3(_586, _589, _592))) + _3466;
                                float _3472 = _3463 * _3463;
                                float _3476 = (fma(_1738, _3354.z, fma(_1737, _3354.y, _3354.x * _1736)) + _3354.w) / _3417;
                                float _3477 = (fma(_1738, _3370.z, fma(_1737, _3370.y, _3370.x * _1736)) + _3370.w) / _3417;
                                float _3481 = 1.0 - dot(vec2(_3476, _3477), vec2(_3476, _3477));
                                float _4626 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3482 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3483 = _3482 * (((isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0))) * _3459) / ((_3472 * 0.699999988079071044921875) + 1.0));
                                float _3495 = exp2(log2(1.0 / ((_3472 * 3.5) + 5.0)) * 0.25);
                                float _3496 = 1.0 - _646;
                                float _3503 = sqrt(1.0 - ((1.0 - (_3496 * _3496)) * (1.0 - (_3495 * _3495))));
                                float _3504 = _3503 * _3503;
                                float _3505 = _3504 * _3504;
                                float _3506 = _3452 - _2924;
                                float _3507 = _3453 - _2925;
                                float _3508 = _3454 - _2926;
                                float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                                float _3516 = dot(vec3(_586, _589, _592), vec3((-0.0) - _2924, (-0.0) - _2925, (-0.0) - _2926));
                                float _4637 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3520 = dot(vec3(_586, _589, _592), vec3(_3512 * _3506, _3512 * _3507, _3512 * _3508));
                                float _4648 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3527 = ((_3523 * _3523) * (_3505 + (-1.0))) + 1.0;
                                float _3528 = _3465 * _3504;
                                float _3529 = _3528 * _3528;
                                float _3535 = ((1.0 - _3529) * dot(vec3(_586, _589, _592), vec3(_3452, _3453, _3454))) + _3529;
                                float _4659 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3537 = 1.0 - _3504;
                                float _3547 = (0.5 / (((_3536 * ((_3519 * _3537) + _3504)) + 9.9999999392252902907785028219223e-09) + (((_3536 * _3537) + _3504) * _3519))) * _3536;
                                float _4670 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3557 = (_3482 * _3459) * (((_3505 * 3.1415927410125732421875) * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) / ((_3527 * _3527) * ((_3472 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3483 * _3327.y;
                                frontier_phi_90_pred_1 = _3483 * _3327.x;
                                frontier_phi_90_pred_2 = _3557 * _3339.z;
                                frontier_phi_90_pred_3 = _3557 * _3339.y;
                                frontier_phi_90_pred_4 = _3557 * _3339.x;
                                frontier_phi_90_pred_5 = _3483 * _3327.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3565 = frontier_phi_90_pred;
                            _3564 = frontier_phi_90_pred_1;
                            _3563 = frontier_phi_90_pred_2;
                            _3562 = frontier_phi_90_pred_3;
                            _3561 = frontier_phi_90_pred_4;
                            _3566 = frontier_phi_90_pred_5;
                            _3269 = _3564 + _3282;
                            _3270 = _3565 + _3283;
                            _3271 = _3566 + _3284;
                            _3266 = _3561 + _3279;
                            _3267 = _3562 + _3280;
                            _3268 = _3563 + _3281;
                            if (_3286 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3286;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3270;
                        frontier_phi_84_pred_1 = _3269;
                        frontier_phi_84_pred_2 = _3268;
                        frontier_phi_84_pred_3 = _3267;
                        frontier_phi_84_pred_4 = _3266;
                        frontier_phi_84_pred_5 = _3271;
                    }
                    _2907 = frontier_phi_84_pred;
                    _2905 = frontier_phi_84_pred_1;
                    _2903 = frontier_phi_84_pred_2;
                    _2901 = frontier_phi_84_pred_3;
                    _2899 = frontier_phi_84_pred_4;
                    _2909 = frontier_phi_84_pred_5;
                    uint _3065 = _3064 + 1u;
                    if (_3065 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3058 = _2899;
                        _3059 = _2901;
                        _3060 = _2903;
                        _3061 = _2905;
                        _3062 = _2907;
                        _3063 = _2909;
                        _3064 = _3065;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2909;
                frontier_phi_65_66_ladder_1 = _2905;
                frontier_phi_65_66_ladder_2 = _2907;
                frontier_phi_65_66_ladder_3 = _2901;
                frontier_phi_65_66_ladder_4 = _2899;
                frontier_phi_65_66_ladder_5 = _2903;
            }
            else
            {
                frontier_phi_65_66_ladder = _2779;
                frontier_phi_65_66_ladder_1 = _2775;
                frontier_phi_65_66_ladder_2 = _2777;
                frontier_phi_65_66_ladder_3 = _2771;
                frontier_phi_65_66_ladder_4 = _2769;
                frontier_phi_65_66_ladder_5 = _2773;
            }
            _2898 = frontier_phi_65_66_ladder_4;
            _2900 = frontier_phi_65_66_ladder_3;
            _2902 = frontier_phi_65_66_ladder_5;
            _2904 = frontier_phi_65_66_ladder_1;
            _2906 = frontier_phi_65_66_ladder_2;
            _2908 = frontier_phi_65_66_ladder;
        }
        float _2913 = isnan(1.0) ? _630 : (isnan(_630) ? 1.0 : min(_630, 1.0));
        _2671 = (_2913 * _2904) + _2203;
        _2673 = (_2913 * _2906) + _2205;
        _2675 = (_2913 * _2908) + _2207;
        _2677 = ((_2898 * 0.039999999105930328369140625) * _2913) + _2526;
        _2679 = ((_2900 * 0.039999999105930328369140625) * _2913) + _2528;
        _2681 = ((_2902 * 0.039999999105930328369140625) * _2913) + _2530;
    }
    else
    {
        _2671 = _2203;
        _2673 = _2205;
        _2675 = _2207;
        _2677 = _2526;
        _2679 = _2528;
        _2681 = _2530;
    }
    uint _2687 = _606 + uint(cbMatDynParam._m0[0u].w);
    float _2693 = (((((_426.x * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _397)) + (_460.x * cbMtdParam._m0[12u].x)) + (_491.x * cbMtdParam._m0[13u].x)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2687].x;
    float _2694 = (((((_426.y * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _397)) + (_460.y * cbMtdParam._m0[12u].y)) + (_491.y * cbMtdParam._m0[13u].y)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2687].y;
    float _2695 = (((((_426.z * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _397)) + (_460.z * cbMtdParam._m0[12u].z)) + (_491.z * cbMtdParam._m0[13u].z)) * cbMtdParam._m0[14u].z) * cbInstanceData._m0[_2687].z;
    float _4686 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4697 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4708 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _4719 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _2713 = (((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2671 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _630))) + ((_2677 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + _2693;
    float _2715 = (_2694 + ((_2679 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2673 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _630)));
    float _2717 = (_2695 + ((_2681 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2675 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _630)));
    float _2718 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2719 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2720 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2726 = cbMtdParam._m0[2u].x * _2693;
    float _2727 = cbMtdParam._m0[2u].y * _2694;
    float _2728 = cbMtdParam._m0[2u].z * _2695;
    float _4745 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2730 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
    float _2735 = cbInstanceData._m0[_605 + 6u].w * (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)));
    float _2740 = _566 / cbSceneParam._m0[86u].x;
    float _2741 = _567 / cbSceneParam._m0[86u].y;
    vec4 _2755 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, (log2((isnan(cbSceneParam._m0[77u].w) ? _547 : (isnan(_547) ? cbSceneParam._m0[77u].w : min(_547, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2757 = _2755.x;
    float _2758 = _2755.y;
    float _2759 = _2755.z;
    float _2760 = _2755.w;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    if (_547 > cbSceneParam._m0[78u].w)
    {
        float _2794 = isnan(_547) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _547 : min(cbSceneParam._m0[80u].w, _547));
        float _2795 = _2794 / _547;
        float _2806 = _2795 * _282;
        float _2807 = _283 * _2795;
        float _2808 = (-0.0) - _2807;
        float _2809 = _2795 * _284;
        float _2811 = (cbSceneParam._m0[77u].w * _2808) / _2794;
        float _2812 = _2811 + cbSceneParam._m0[79u].w;
        float _2813 = cbSceneParam._m0[79u].w - _2807;
        float _2819 = sqrt(((_2806 * _2806) + (_2807 * _2807)) + (_2809 * _2809));
        float _2822 = (1.0 - (cbSceneParam._m0[77u].w / _2794)) * _2819;
        float _2827 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2829 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3015;
        if (abs((_2808 - _2811) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3015 = ((((_2812 > 0.0) ? exp2(_2827 * _2812) : (2.0 - exp2(_2829 * _2812))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2822;
        }
        else
        {
            float _2959 = 1.0 / cbSceneParam._m0[80u].x;
            float _2960 = isnan(_2813) ? _2812 : (isnan(_2812) ? _2813 : max(_2812, _2813));
            float _2961 = isnan(_2813) ? _2812 : (isnan(_2812) ? _2813 : min(_2812, _2813));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            _3015 = ((abs(_2819 / _2808) * cbSceneParam._m0[80u].y) * ((((_2970 - _2971) * 2.0) - ((exp2(_2827 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0)))) - exp2(_2827 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))))) * _2959)) - ((exp2(_2829 * _2970) - exp2(_2829 * _2971)) * _2959))) + (_2822 * cbSceneParam._m0[80u].z);
        }
        vec4 _3017 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, 1.0), 0.0);
        float _3026 = exp2((_3015 * (-1.44269502162933349609375)) * (1.0 - _3017.w));
        float _3027 = log2(_3026);
        float _3043 = log2(_2760);
        _2831 = (exp2(_3043 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].x)) * _3017.x) / cbSceneParam._m0[78u].x)) + _2757;
        _2833 = (exp2(_3043 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].y)) * _3017.y) / cbSceneParam._m0[78u].y)) + _2758;
        _2835 = (exp2(_3043 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].z)) * _3017.z) / cbSceneParam._m0[78u].z)) + _2759;
        _2837 = _3026 * _2760;
    }
    else
    {
        _2831 = _2757;
        _2833 = _2758;
        _2835 = _2759;
        _2837 = _2760;
    }
    bool _3053;
    vec4 _2847;
    vec4 _2869;
    float _2871;
    float _2875;
    float _2876;
    float _2877;
    float _2880;
    float _2883;
    float _2886;
    float _2887;
    bool _2897;
    for (;;)
    {
        _2847 = cbMatDynParam._m0[0u];
        float _2849 = roundEven(_2847.y);
        bool _2850 = _2849 == 3.0;
        float _2851 = log2(_2837);
        float _2855 = exp2(_2851 * cbSceneParam._m0[78u].x);
        float _2856 = exp2(_2851 * cbSceneParam._m0[78u].y);
        float _2857 = exp2(_2851 * cbSceneParam._m0[78u].z);
        float _2858 = _2855 * _2718;
        float _2859 = _2856 * _2719;
        float _2860 = _2857 * _2720;
        float _2867 = _554 + (-0.5);
        _2869 = cbMtdParam._m0[1u];
        _2871 = _2869.y * _2867;
        float _2874 = (_2849 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2875 = _2874 * (_2850 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2831)));
        _2876 = _2874 * (_2850 ? _2859 : (_2859 + (cbSceneParam._m0[72u].w * _2833)));
        _2877 = _2874 * (_2850 ? _2860 : (_2860 + (cbSceneParam._m0[72u].w * _2835)));
        _2880 = ((_2726 * _2730) * _2855) * _2874;
        _2883 = ((_2727 * _2730) * _2856) * _2874;
        _2886 = ((_2728 * _2730) * _2857) * _2874;
        _2887 = _2867 * 0.999000012874603271484375;
        _2897 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2897)
        {
            if ((cbInstanceData._m0[_605 + 7u].x + _2887) < 0.5)
            {
                _3053 = true;
                break;
            }
        }
        uint _2994 = _606 + uint(_2847.w);
        if ((cbInstanceData._m0[_2994].w < 1.0) && ((cbInstanceData._m0[_2994].w + _2887) < 0.5))
        {
            _3053 = true;
            break;
        }
        if ((_2871 + 1.0) < _2869.x)
        {
            _3053 = true;
            break;
        }
        _3053 = false;
        break;
    }
    float _3257;
    if (_3053)
    {
        discard_state = true;
        _3257 = 0.0;
    }
    else
    {
        _3257 = _2735;
    }
    SV_Target.x = _2875;
    SV_Target.y = _2876;
    SV_Target.z = _2877;
    SV_Target.w = _3257;
    SV_Target_1.x = _2880;
    SV_Target_1.y = _2883;
    SV_Target_1.z = _2886;
    SV_Target_1.w = _2735;
    discard_exit();
}


