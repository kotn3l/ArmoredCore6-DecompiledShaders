#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _904;
float _3602;
float _3603;
float _3604;
float _3605;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _239 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _263 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _3614 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))));
    vec4 _299 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _306 = fma(_280, _217, fma(_273, _209 * TANGENT.x, (_195 * _188) * _271));
    float _309 = fma(_280, _218, fma(_273, _209 * TANGENT.y, (_195 * _189) * _271));
    float _312 = fma(_280, _219, fma(_273, _209 * TANGENT.z, (_195 * _190) * _271));
    float _316 = inversesqrt(dot(vec3(_306, _309, _312), vec3(_306, _309, _312)));
    float _317 = _316 * _306;
    float _318 = _316 * _309;
    float _319 = _316 * _312;
    float _3625 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _320 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _3636 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3647 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3658 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3669 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _324 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _340 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _381 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _391 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _381);
    float _392 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _381);
    float _393 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _381);
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _391 * _397;
    float _399 = _392 * _397;
    float _400 = _393 * _397;
    vec4 _405 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _407 = _405.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _583 = sqrt(((_391 * _391) + (_392 * _392)) + (_393 * _393));
        float _589 = (cbMatDynParam._m0[5u].x * _583) + cbMatDynParam._m0[5u].y;
        float _3680 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _590 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _594 = (cbMatDynParam._m0[5u].z * _583) + cbMatDynParam._m0[5u].w;
        float _3691 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) - _590)) + _590) < ((_407 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _419 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _420 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _440 = fma(_319, cbSceneParam._m0[5u].z, fma(_318, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _317));
    float _443 = fma(_319, cbSceneParam._m0[6u].z, fma(_318, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _317));
    float _446 = fma(_319, cbSceneParam._m0[7u].z, fma(_318, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _317));
    uint _459 = uint(roundEven(NORMAL.w)) * 13u;
    uint _461 = _459 + 9u;
    uint _462 = _461 + uint(cbMatDynParam._m0[0u].w);
    float _468 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_462].x;
    float _469 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_462].y;
    float _470 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_462].z;
    float _3702 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _474 = 1.0 - _324;
    float _475 = _471 * _474;
    float _476 = _472 * _474;
    float _477 = _473 * _474;
    float _482 = (_471 + (-0.039999999105930328369140625)) * _324;
    float _483 = (_472 + (-0.039999999105930328369140625)) * _324;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _324;
    float _485 = _482 + 0.039999999105930328369140625;
    float _487 = _483 + 0.039999999105930328369140625;
    float _488 = _484 + 0.039999999105930328369140625;
    vec4 _497 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _419, cbSceneParam._m0[86u].y * _420));
    float _500 = _497.x * TEXCOORD.z;
    float _501 = dot(vec3(_317, _318, _319), vec3(_398, _399, _400));
    float _504 = _501 * 2.0;
    float _508 = (_504 * _317) - _398;
    float _509 = (_504 * _318) - _399;
    float _510 = (_504 * _319) - _400;
    float _514 = abs(dot(vec3(_398, _399, _400), vec3(_317, _318, _319)));
    float _3735 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _516 = sqrt(_320);
    float _529 = exp2((_516 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_516 * 3.0));
    float _535 = (1.0 - _529) * ((_516 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _536 = _529 * _516;
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _903;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _628 = fma(_572, cbModelParam._m0[26u].z, fma(_568, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _564));
        float _632 = fma(_572, cbModelParam._m0[27u].z, fma(_568, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _564));
        float _636 = fma(_572, cbModelParam._m0[28u].z, fma(_568, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _564));
        float _661 = _564 + _317;
        float _662 = _568 + _318;
        float _663 = _572 + _319;
        float _673 = fma(_663, cbModelParam._m0[26u].z, fma(_662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _661)) - _628;
        float _674 = fma(_663, cbModelParam._m0[27u].z, fma(_662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _661)) - _632;
        float _675 = fma(_663, cbModelParam._m0[28u].z, fma(_662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _661)) - _636;
        float _679 = inversesqrt(dot(vec3(_673, _674, _675), vec3(_673, _674, _675)));
        float _692 = ((_679 * _673) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_628 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _693 = ((_679 * _674) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_632 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _694 = ((_679 * _675) / cbModelParam._m0[34u].z) + ((((((_636 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        float _731 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_697.x + (-0.5));
        float _733 = _731 * (_697.y + (-0.5));
        float _734 = _731 * (_697.z + (-0.5));
        float _741 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_704.x + (-0.5));
        float _743 = _741 * (_704.y + (-0.5));
        float _744 = _741 * (_704.z + (-0.5));
        float _751 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_711.x + (-0.5));
        float _753 = _751 * (_711.y + (-0.5));
        float _754 = _751 * (_711.z + (-0.5));
        float _761 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_718.x + (-0.5));
        float _763 = _761 * (_718.y + (-0.5));
        float _764 = _761 * (_718.z + (-0.5));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = _732 * 0.5;
        float _769 = _742 * 0.5;
        float _770 = _752 * 0.5;
        float _771 = dot(vec3(_768, _769, _770), vec3(_768, _769, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _785 = (dot(vec3(_317, _318, _319), vec3(_776 * _768, _776 * _769, _776 * _770)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _795 = sqrt(((_769 * _769) + (_768 * _768)) + (_770 * _770)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _797 = _796 * 2.0;
        float _801 = (1.0 - _796) / (_796 + 1.0);
        float _3783 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _811 = ((((1.0 - _802) * (_797 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_797 + 1.0))) + _802) * _765;
        float _812 = _733 * 0.5;
        float _813 = _743 * 0.5;
        float _814 = _753 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _828 = (dot(vec3(_317, _318, _319), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _837 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3816 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_839 + 1.0))) + _844) * _766;
        float _854 = _734 * 0.5;
        float _855 = _744 * 0.5;
        float _856 = _754 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _870 = (dot(vec3(_317, _318, _319), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _879 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3849 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_881 + 1.0))) + _886) * _767;
        _903 = _734;
        _905 = _733;
        _906 = _732;
        _907 = _744;
        _908 = _743;
        _909 = _742;
        _910 = _754;
        _911 = _753;
        _912 = _752;
        _913 = _767;
        _914 = _766;
        _915 = _765;
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0)));
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
    }
    else
    {
        _903 = _904;
        _905 = _904;
        _906 = _904;
        _907 = _904;
        _908 = _904;
        _909 = _904;
        _910 = _904;
        _911 = _904;
        _912 = _904;
        _913 = _904;
        _914 = _904;
        _915 = _904;
        _916 = 0.0;
        _917 = 0.0;
        _918 = 0.0;
    }
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _947 = fma(_572, cbModelParam._m0[30u].z, fma(_568, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _564));
        float _951 = fma(_572, cbModelParam._m0[31u].z, fma(_568, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _564));
        float _955 = fma(_572, cbModelParam._m0[32u].z, fma(_568, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _564));
        float _978 = _564 + _317;
        float _979 = _568 + _318;
        float _980 = _572 + _319;
        float _990 = fma(_980, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978)) - _947;
        float _991 = fma(_980, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978)) - _951;
        float _992 = fma(_980, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978)) - _955;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_947 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_951 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[35u].z) + ((((((_955 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1046 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1013.x + (-0.5));
        float _1048 = _1046 * (_1013.y + (-0.5));
        float _1049 = _1046 * (_1013.z + (-0.5));
        float _1056 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1020.x + (-0.5));
        float _1058 = _1056 * (_1020.y + (-0.5));
        float _1059 = _1056 * (_1020.z + (-0.5));
        float _1066 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1027.x + (-0.5));
        float _1068 = _1066 * (_1027.y + (-0.5));
        float _1069 = _1066 * (_1027.z + (-0.5));
        float _1076 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1034.x + (-0.5));
        float _1078 = _1076 * (_1034.y + (-0.5));
        float _1079 = _1076 * (_1034.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_317, _318, _319), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3912 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1110 + 1.0))) + _1115) * _1080;
        float _1125 = _1048 * 0.5;
        float _1126 = _1058 * 0.5;
        float _1127 = _1068 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_317, _318, _319), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3945 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1152 + 1.0))) + _1157) * _1081;
        float _1167 = _1049 * 0.5;
        float _1168 = _1059 * 0.5;
        float _1169 = _1069 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_317, _318, _319), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3978 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1194 + 1.0))) + _1199) * _1082;
        _1216 = _1049;
        _1217 = _1048;
        _1218 = _1047;
        _1219 = _1059;
        _1220 = _1058;
        _1221 = _1057;
        _1222 = _1069;
        _1223 = _1068;
        _1224 = _1067;
        _1225 = _1082;
        _1226 = _1081;
        _1227 = _1080;
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _904;
        _1217 = _904;
        _1218 = _904;
        _1219 = _904;
        _1220 = _904;
        _1221 = _904;
        _1222 = _904;
        _1223 = _904;
        _1224 = _904;
        _1225 = _904;
        _1226 = _904;
        _1227 = _904;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _916)) + _916;
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _917)) + _917;
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _918)) + _918;
    float _1263 = fma(_1242, cbSceneParam._m0[89u].z, fma(_1241, cbSceneParam._m0[89u].y, _1240 * cbSceneParam._m0[89u].x));
    float _1266 = fma(_1242, cbSceneParam._m0[90u].z, fma(_1241, cbSceneParam._m0[90u].y, _1240 * cbSceneParam._m0[90u].x));
    float _1269 = fma(_1242, cbSceneParam._m0[91u].z, fma(_1241, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1240));
    float _1284 = _508 * 0.5;
    float _1285 = _509 * 0.5;
    float _1286 = _510 * 0.5;
    float _1287 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1290 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1293 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1327;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1300 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_903, _907, _910, _913));
        float _1304 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_905, _908, _911, _914));
        float _1308 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_906, _909, _912, _915));
        float _1315 = dot(vec4(cbModelParam._m0[39u]), vec4(_1284, _1285, _1286, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1315) ? 0.0 : (isnan(0.0) ? _1315 : max(0.0, _1315))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1338;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1329 = dot(vec4(cbModelParam._m0[40u]), vec4(_1284, _1285, _1286, 1.0));
        _1338 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1338 = 1.0;
    }
    float _1342 = (_1338 * cbModelParam._m0[1u].x) + (_1327 * (1.0 - cbModelParam._m0[1u].x));
    float _1352 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _320);
    float _1353 = isnan(_1352) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1352 : min(cbModelParam._m0[25u].z, _1352));
    float _1435;
    float _1437;
    float _1439;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1402 = fma(_572, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _564)) + cbModelParam._m0[13u].w;
        float _1406 = fma(_572, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _564)) + cbModelParam._m0[14u].w;
        float _1410 = fma(_572, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _564)) + cbModelParam._m0[15u].w;
        float _1413 = fma(_510, cbModelParam._m0[13u].z, fma(_509, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _508));
        float _1416 = fma(_510, cbModelParam._m0[14u].z, fma(_509, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _508));
        float _1419 = fma(_510, cbModelParam._m0[15u].z, fma(_509, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _508));
        float _1447;
        if (_1413 > 0.0)
        {
            _1447 = abs((1.0 - _1402) / _1413);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1402 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1447 = frontier_phi_19_17_ladder;
        }
        float _1622;
        if (_1416 > 0.0)
        {
            _1622 = abs((1.0 - _1406) / _1416);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1406 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1622 = frontier_phi_28_24_ladder;
        }
        float _1918;
        if (_1419 > 0.0)
        {
            _1918 = abs((1.0 - _1410) / _1419);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1410 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1918 = frontier_phi_40_35_ladder;
        }
        float _1920 = isnan(_1622) ? _1447 : (isnan(_1447) ? _1622 : min(_1447, _1622));
        float _1921 = isnan(_1918) ? _1920 : (isnan(_1920) ? _1918 : min(_1920, _1918));
        float _1925 = (_1921 * _1413) + _1402;
        float _1926 = (_1921 * _1416) + _1406;
        float _1927 = (_1921 * _1419) + _1410;
        float _1928 = _1921 * 9.9999997473787516355514526367188e-05;
        float _1930 = (-1.0) - _1928;
        float _1932 = _1928 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1927 > _1932) || ((_1927 < _1930) || ((_1926 > _1932) || ((_1926 < _1930) || ((_1925 < _1930) || (_1925 > _1932))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2072 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1927, cbModelParam._m0[9u].z, fma(_1926, cbModelParam._m0[9u].y, _1925 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1927, cbModelParam._m0[10u].z, fma(_1926, cbModelParam._m0[10u].y, _1925 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1927, cbModelParam._m0[11u].z, fma(_1926, cbModelParam._m0[11u].y, _1925 * cbModelParam._m0[11u].x))), _1353);
            frontier_phi_18_40_ladder = _2072.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2072.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2072.x * cbModelParam._m0[1u].y;
        }
        _1435 = frontier_phi_18_40_ladder_2;
        _1437 = frontier_phi_18_40_ladder_1;
        _1439 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_508, _509, _510), _1353);
        _1435 = _1423.x * cbModelParam._m0[1u].y;
        _1437 = _1423.y * cbModelParam._m0[1u].y;
        _1439 = _1423.z * cbModelParam._m0[1u].y;
    }
    float _1443 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _320);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1443 : min(cbModelParam._m0[25u].w, _1443));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1501 = fma(_572, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _564)) + cbModelParam._m0[21u].w;
        float _1505 = fma(_572, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _564)) + cbModelParam._m0[22u].w;
        float _1509 = fma(_572, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _564)) + cbModelParam._m0[23u].w;
        float _1512 = fma(_510, cbModelParam._m0[21u].z, fma(_509, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _508));
        float _1515 = fma(_510, cbModelParam._m0[22u].z, fma(_509, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _508));
        float _1518 = fma(_510, cbModelParam._m0[23u].z, fma(_509, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _508));
        float _1627;
        if (_1512 > 0.0)
        {
            _1627 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1627 = frontier_phi_30_26_ladder;
        }
        float _1945;
        if (_1515 > 0.0)
        {
            _1945 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1945 = frontier_phi_42_37_ladder;
        }
        float _2283;
        if (_1518 > 0.0)
        {
            _2283 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2283 = frontier_phi_52_49_ladder;
        }
        float _2285 = isnan(_1945) ? _1627 : (isnan(_1627) ? _1945 : min(_1627, _1945));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1512) + _1501;
        float _2291 = (_2286 * _1515) + _1505;
        float _2292 = (_2286 * _1518) + _1509;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2293;
        float _2296 = _2293 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2292 > _2296) || ((_2292 < _2294) || ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 < _2294) || (_2290 > _2296))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2414 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2292, cbModelParam._m0[17u].z, fma(_2291, cbModelParam._m0[17u].y, _2290 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2292, cbModelParam._m0[18u].z, fma(_2291, cbModelParam._m0[18u].y, _2290 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2292, cbModelParam._m0[19u].z, fma(_2291, cbModelParam._m0[19u].y, _2290 * cbModelParam._m0[19u].x))), _1444);
            frontier_phi_27_52_ladder = _2414.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2414.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2414.x * cbModelParam._m0[1u].z;
        }
        _1537 = frontier_phi_27_52_ladder_2;
        _1539 = frontier_phi_27_52_ladder_1;
        _1541 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_508, _509, _510), _1444);
        _1537 = _1521.x * cbModelParam._m0[1u].z;
        _1539 = _1521.y * cbModelParam._m0[1u].z;
        _1541 = _1521.z * cbModelParam._m0[1u].z;
    }
    float _1554 = (((_535 * _485) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1556 = (((_535 * _487) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1558 = (((_535 * _488) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1561 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1554 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1554 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, _1554 * cbSceneParam._m0[91u].x));
    float _1601 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1605 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1609 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1614 = _1601 / _1613;
    float _1615 = _1605 / _1613;
    float _1616 = _1609 / _1613;
    float _1763;
    float _1764;
    float _1765;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1643 = ((uint(_1616 > cbSceneParam._m0[59u].y) + uint(_1616 > cbSceneParam._m0[59u].x)) + uint(_1616 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1644 = _1643 + 43u;
        uint _1652 = _1643 + 44u;
        uint _1660 = _1643 + 45u;
        uint _1668 = _1643 + 46u;
        float _1679 = fma(_1613, cbSceneParam._m0[_1644].w, fma(_1609, cbSceneParam._m0[_1644].z, fma(_1605, cbSceneParam._m0[_1644].y, _1601 * cbSceneParam._m0[_1644].x)));
        float _1683 = fma(_1613, cbSceneParam._m0[_1652].w, fma(_1609, cbSceneParam._m0[_1652].z, fma(_1605, cbSceneParam._m0[_1652].y, _1601 * cbSceneParam._m0[_1652].x)));
        float _1691 = fma(_1613, cbSceneParam._m0[_1668].w, fma(_1609, cbSceneParam._m0[_1668].z, fma(_1605, cbSceneParam._m0[_1668].y, _1601 * cbSceneParam._m0[_1668].x)));
        float _1696 = cbSceneParam._m0[33u].z * _1691;
        float _1698 = cbSceneParam._m0[33u].w * _1691;
        float _1701 = fma(_1613, cbSceneParam._m0[_1660].w, fma(_1609, cbSceneParam._m0[_1660].z, fma(_1605, cbSceneParam._m0[_1660].y, _1601 * cbSceneParam._m0[_1660].x))) / _1691;
        float _1749 = (cbSceneParam._m0[33u].x - sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616))) * cbSceneParam._m0[33u].y;
        float _4104 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1756 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1696 + _1679) / _1691, (_1698 + _1683) / _1691), _1701), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1698 + _1679) / _1691, (_1683 - _1696) / _1691), _1701), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1679 - _1696) / _1691, (_1683 - _1698) / _1691), _1701), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1679 - _1698) / _1691, (_1696 + _1683) / _1691), _1701), 0.0)).x), vec4(0.25)));
        _1763 = 1.0 - (_1756 * cbSceneParam._m0[34u].x);
        _1764 = 1.0 - (_1756 * cbSceneParam._m0[34u].y);
        _1765 = 1.0 - (_1756 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1763 = 1.0;
        _1764 = 1.0;
        _1765 = 1.0;
    }
    float _1829;
    float _1831;
    float _1833;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1817 = fma(_1613, cbSceneParam._m0[63u].w, fma(_1609, cbSceneParam._m0[63u].z, fma(_1605, cbSceneParam._m0[63u].y, _1601 * cbSceneParam._m0[63u].x)));
        float _1818 = fma(_1613, cbSceneParam._m0[60u].w, fma(_1609, cbSceneParam._m0[60u].z, fma(_1605, cbSceneParam._m0[60u].y, _1601 * cbSceneParam._m0[60u].x))) / _1817;
        float _1819 = fma(_1613, cbSceneParam._m0[61u].w, fma(_1609, cbSceneParam._m0[61u].z, fma(_1605, cbSceneParam._m0[61u].y, _1601 * cbSceneParam._m0[61u].x))) / _1817;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1818 >= cbSceneParam._m0[64u].x) && (_1819 >= cbSceneParam._m0[64u].y)) && (_1818 <= cbSceneParam._m0[64u].z)) && (_1819 <= cbSceneParam._m0[64u].w))
        {
            float _1958 = fma(_1613, cbSceneParam._m0[62u].w, fma(_1609, cbSceneParam._m0[62u].z, fma(_1605, cbSceneParam._m0[62u].y, _1601 * cbSceneParam._m0[62u].x))) / _1817;
            float _1962 = isnan(cbSceneParam._m0[41u].w) ? _1958 : (isnan(_1958) ? cbSceneParam._m0[41u].w : max(_1958, cbSceneParam._m0[41u].w));
            float _2005 = (cbSceneParam._m0[33u].x - sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616))) * cbSceneParam._m0[33u].y;
            float _4120 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
            float _2012 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1818, cbSceneParam._m0[33u].w + _1819), _1962), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1818, _1819 - cbSceneParam._m0[33u].z), _1962), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1818 - cbSceneParam._m0[33u].z, _1819 - cbSceneParam._m0[33u].w), _1962), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1818 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1819), _1962), 0.0)).x), vec4(0.25)));
            float _2016 = 1.0 - (_2012 * cbSceneParam._m0[34u].x);
            float _2017 = 1.0 - (_2012 * cbSceneParam._m0[34u].y);
            float _2018 = 1.0 - (_2012 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2017) ? _1764 : (isnan(_1764) ? _2017 : min(_1764, _2017));
            frontier_phi_39_38_ladder_1 = isnan(_2016) ? _1763 : (isnan(_1763) ? _2016 : min(_1763, _2016));
            frontier_phi_39_38_ladder_2 = isnan(_2018) ? _1765 : (isnan(_1765) ? _2018 : min(_1765, _2018));
        }
        else
        {
            frontier_phi_39_38_ladder = _1764;
            frontier_phi_39_38_ladder_1 = _1763;
            frontier_phi_39_38_ladder_2 = _1765;
        }
        _1829 = frontier_phi_39_38_ladder_1;
        _1831 = frontier_phi_39_38_ladder;
        _1833 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1829 = _1763;
        _1831 = _1764;
        _1833 = _1765;
    }
    uvec4 _1838 = floatBitsToUint(cbInstanceData._m0[_459 + 5u]);
    uint _1840 = _1838.x * 14u;
    uint _1841 = _1840 + 13u;
    float _1848 = _500 + (-1.0);
    float _1853 = (cbLight._m0[_1841].x * _1848) + 1.0;
    float _1854 = (cbLight._m0[_1841].y * _1848) + 1.0;
    float _1855 = (cbLight._m0[_1841].z * _1848) + 1.0;
    float _1856 = (cbLight._m0[_1841].w * _1848) + 1.0;
    uint _1857 = _1840 + 5u;
    float _1863 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    uint _1867 = _1840 + 4u;
    float _1877 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _1881 = _1840 | 1u;
    float _1892 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_317, _318, _319));
    float _1895 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_317, _318, _319));
    float _4156 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _4167 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1900 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * 0.3183098733425140380859375;
    float _1902 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 0.3183098733425140380859375;
    float _1909 = ((cbLight._m0[_1857].x * _1863) * _1902) + (((cbLight._m0[_1867].x * _1829) * _1877) * _1900);
    float _1910 = ((_1863 * cbLight._m0[_1857].y) * _1902) + (((cbLight._m0[_1867].y * _1831) * _1877) * _1900);
    float _1911 = ((_1863 * cbLight._m0[_1857].z) * _1902) + (((cbLight._m0[_1867].z * _1833) * _1877) * _1900);
    uvec4 _1915 = floatBitsToUint(cbLight._m0[_1840 + 12u]);
    bool _1917 = _1915.x == 0u;
    float _2019;
    float _2021;
    float _2023;
    if (_1917)
    {
        _2019 = _1909;
        _2021 = _1910;
        _2023 = _1911;
    }
    else
    {
        uint _2027 = _1840 + 6u;
        float _2043 = (dot(vec3(cbLight._m0[_1840 + 2u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _2044 = _2043 * _2043;
        float _4178 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2045 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2046 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2019 = (((cbLight._m0[_2027].x * 0.3183098733425140380859375) * _2045) * _2046) + _1909;
        _2021 = (((cbLight._m0[_2027].y * 0.3183098733425140380859375) * _2045) * _2046) + _1910;
        _2023 = (((cbLight._m0[_2027].z * 0.3183098733425140380859375) * _2045) * _2046) + _1911;
    }
    bool _2026 = _1915.y == 0u;
    float _2081;
    float _2083;
    float _2085;
    if (_2026)
    {
        _2081 = _2019;
        _2083 = _2021;
        _2085 = _2023;
    }
    else
    {
        uint _2254 = _1840 + 7u;
        float _2270 = (dot(vec3(cbLight._m0[_1840 + 3u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _2271 = _2270 * _2270;
        float _4194 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2272 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2273 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2081 = (((cbLight._m0[_2254].x * 0.3183098733425140380859375) * _2272) * _2273) + _2019;
        _2083 = (((cbLight._m0[_2254].y * 0.3183098733425140380859375) * _2272) * _2273) + _2021;
        _2085 = (((cbLight._m0[_2254].z * 0.3183098733425140380859375) * _2272) * _2273) + _2023;
    }
    uint _2088 = _1840 + 8u;
    float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1840].w)) * _320) * 0.949999988079071044921875);
    float _2102 = _2101 * _2101;
    float _2103 = cbLight._m0[_1840].x + _398;
    float _2104 = cbLight._m0[_1840].y + _399;
    float _2105 = cbLight._m0[_1840].z + _400;
    float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
    float _2110 = _2109 * _2103;
    float _2111 = _2109 * _2104;
    float _2112 = _2109 * _2105;
    float _2113 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1840].xyz));
    float _4210 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _2117 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2118 = dot(vec3(_317, _318, _319), vec3(_2110, _2111, _2112));
    float _4232 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2122 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_2110, _2111, _2112));
    float _4243 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2126 = _2102 * _2102;
    float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
    float _2138 = exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0);
    float _2139 = 0.959999978542327880859375 - _482;
    float _2141 = 0.959999978542327880859375 - _483;
    float _2142 = 0.959999978542327880859375 - _484;
    float _2149 = 1.0 - _2102;
    float _2160 = (0.5 / (((_2117 * ((_2116 * _2149) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_2117 * _2149) + _2102) * _2116))) * _2116;
    float _4254 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2162 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
    uint _2176 = _1840 + 9u;
    float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1881].w)) * _320) * 0.949999988079071044921875);
    float _2188 = _2187 * _2187;
    float _2189 = cbLight._m0[_1881].x + _398;
    float _2190 = cbLight._m0[_1881].y + _399;
    float _2191 = cbLight._m0[_1881].z + _400;
    float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
    float _2196 = _2195 * _2189;
    float _2197 = _2195 * _2190;
    float _2198 = _2195 * _2191;
    float _2199 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1881].xyz));
    float _4265 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2203 = dot(vec3(_317, _318, _319), vec3(_2196, _2197, _2198));
    float _4276 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2207 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_2196, _2197, _2198));
    float _4287 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = _2188 * _2188;
    float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
    float _2222 = exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0);
    float _2229 = 1.0 - _2188;
    float _2239 = (0.5 / (((_2117 * ((_2202 * _2229) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_2117 * _2229) + _2188) * _2202))) * _2202;
    float _4298 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2241 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
    float _2251 = (((((_2222 * _2139) + _485) * cbLight._m0[_2176].x) * _2241) * _1863) + ((((cbLight._m0[_2088].x * _1829) * ((_2138 * _2139) + _485)) * _2162) * _1877);
    float _2252 = (((((_2222 * _2141) + _487) * cbLight._m0[_2176].y) * _2241) * _1863) + ((((cbLight._m0[_2088].y * _1831) * ((_2138 * _2141) + _487)) * _2162) * _1877);
    float _2253 = (((((_2222 * _2142) + _488) * cbLight._m0[_2176].z) * _2241) * _1863) + ((((cbLight._m0[_2088].z * _1833) * ((_2138 * _2142) + _488)) * _2162) * _1877);
    float _2309;
    float _2311;
    float _2313;
    if (_1917)
    {
        _2309 = _2251;
        _2311 = _2252;
        _2313 = _2253;
    }
    else
    {
        uint _2315 = _1840 + 2u;
        uint _2319 = _1840 + 10u;
        float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _320) * 0.949999988079071044921875);
        float _2334 = _2333 * _2333;
        float _2335 = cbLight._m0[_2315].x + _398;
        float _2336 = cbLight._m0[_2315].y + _399;
        float _2337 = cbLight._m0[_2315].z + _400;
        float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
        float _2342 = _2341 * _2335;
        float _2343 = _2341 * _2336;
        float _2344 = _2341 * _2337;
        float _2345 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_2315].xyz));
        float _4309 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2349 = dot(vec3(_317, _318, _319), vec3(_2342, _2343, _2344));
        float _4320 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2353 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2342, _2343, _2344));
        float _4331 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2357 = _2334 * _2334;
        float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
        float _2368 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
        float _2375 = 1.0 - _2334;
        float _2385 = (0.5 / (((_2117 * ((_2348 * _2375) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2117 * _2375) + _2334) * _2348))) * _2348;
        float _4342 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2387 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
        float _2388 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2309 = (((((_2368 * _2139) + _485) * cbLight._m0[_2319].x) * _2387) * _2388) + _2251;
        _2311 = (((((_2368 * _2141) + _487) * cbLight._m0[_2319].y) * _2387) * _2388) + _2252;
        _2313 = (((((_2368 * _2142) + _488) * cbLight._m0[_2319].z) * _2387) * _2388) + _2253;
    }
    float _2419;
    float _2421;
    float _2423;
    if (_2026)
    {
        _2419 = _2309;
        _2421 = _2311;
        _2423 = _2313;
    }
    else
    {
        uint _2430 = _1840 + 3u;
        uint _2434 = _1840 + 11u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _320) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _398;
        float _2451 = cbLight._m0[_2430].y + _399;
        float _2452 = cbLight._m0[_2430].z + _400;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_2430].xyz));
        float _4358 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2464 = dot(vec3(_317, _318, _319), vec3(_2457, _2458, _2459));
        float _4369 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4380 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) * 5.0);
        float _2490 = 1.0 - _2449;
        float _2500 = (0.5 / (((_2117 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2117 * _2490) + _2449) * _2463))) * _2463;
        float _4391 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2419 = (((((_2483 * _2139) + _485) * cbLight._m0[_2434].x) * _2502) * _2503) + _2309;
        _2421 = (((((_2483 * _2141) + _487) * cbLight._m0[_2434].y) * _2502) * _2503) + _2311;
        _2423 = (((((_2483 * _2142) + _488) * cbLight._m0[_2434].z) * _2502) * _2503) + _2313;
    }
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    if (_1838.y == 0u)
    {
        uvec4 _2524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2525 = _2524.x;
        uint _2536 = uint((float(_2524.y) * floor(float(uint(cbSceneParam._m0[85u].y * _420) / _2525))) + floor(float(uint(cbSceneParam._m0[85u].x * _419) / _2525)));
        float _2546 = (log2(_1616 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2547 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        uint _2550 = uint(isnan(14.0) ? _2547 : (isnan(_2547) ? 14.0 : min(_2547, 14.0)));
        uvec4 _2555 = texelFetch(g_lightClusterGridBuffer, int(((_2550 << 2u) + (_2536 << 6u)) >> 2u));
        uint _2556 = _2555.x;
        uint _2557 = _2524.z;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        if (((((1u << ((_2557 >> 4u) & 15u)) + 4294967295u) & _2556) == 0u) || ((_2557 & 240u) == 0u))
        {
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
        }
        else
        {
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            uint _2818 = 0u;
            uint _2827;
            bool _2828;
            for (;;)
            {
                _2827 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2818 << 2u)) >> 2u)).x;
                _2828 = _2827 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2828)
                {
                    frontier_phi_73_pred = _2817;
                    frontier_phi_73_pred_1 = _2816;
                    frontier_phi_73_pred_2 = _2815;
                    frontier_phi_73_pred_3 = _2814;
                    frontier_phi_73_pred_4 = _2813;
                    frontier_phi_73_pred_5 = _2812;
                }
                else
                {
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    uint _2963;
                    _2957 = _2812;
                    _2958 = _2813;
                    _2959 = _2814;
                    _2960 = _2815;
                    _2961 = _2816;
                    _2962 = _2817;
                    _2963 = _2827;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    for (;;)
                    {
                        uint _2967 = uint(findLSB(_2963)) + (_2818 << 5u);
                        uint _2964 = (_2963 + 4294967295u) & _2963;
                        uint _2969 = _2967 * 48u;
                        vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 3u)).x));
                        uint _2989 = (_2967 * 48u) + 4u;
                        vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2989)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 3u)).x));
                        uint _3008 = (_2967 * 48u) + 8u;
                        vec3 _3019 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x));
                        float _3023 = _2983.x - _1614;
                        float _3024 = _2983.y - _1615;
                        float _3025 = _2983.z - _1616;
                        float _3026 = dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025));
                        float _3029 = inversesqrt(_3026);
                        float _3030 = _3029 * _3023;
                        float _3031 = _3029 * _3024;
                        float _3032 = _3029 * _3025;
                        float _3033 = dot(vec3(_440, _443, _446), vec3(_3030, _3031, _3032));
                        float _3038 = 1.0 - (_3026 * _2983.w);
                        float _4417 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3039 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3040 = sqrt(_3026) * _3002.w;
                        float _3043 = 1.39999997615814208984375 / (_3040 + 1.39999997615814208984375);
                        float _3044 = _3043 * _3043;
                        float _3047 = ((1.0 - _3044) * _3033) + _3044;
                        float _3050 = _3040 * _3040;
                        float _3054 = ((isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))) * _3039) / ((_3050 * 0.699999988079071044921875) + 1.0);
                        float _3058 = (-0.0) - _1614;
                        float _3059 = (-0.0) - _1615;
                        float _3060 = (-0.0) - _1616;
                        float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
                        float _3065 = _3064 * _3058;
                        float _3066 = _3064 * _3059;
                        float _3067 = _3064 * _3060;
                        float _3074 = exp2(log2(1.0 / ((_3050 * 3.5) + 5.0)) * 0.25);
                        float _3075 = 1.0 - _516;
                        float _3082 = sqrt(1.0 - ((1.0 - (_3075 * _3075)) * (1.0 - (_3074 * _3074))));
                        float _3083 = _3082 * _3082;
                        float _3084 = _3083 * _3083;
                        float _3085 = _3065 + _3030;
                        float _3086 = _3066 + _3031;
                        float _3087 = _3067 + _3032;
                        float _3091 = inversesqrt(dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087)));
                        float _3095 = dot(vec3(_440, _443, _446), vec3(_3065, _3066, _3067));
                        float _4433 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3098 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3099 = dot(vec3(_440, _443, _446), vec3(_3091 * _3085, _3091 * _3086, _3091 * _3087));
                        float _4444 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3102 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                        float _3106 = ((_3102 * _3102) * (_3084 + (-1.0))) + 1.0;
                        float _3107 = _3043 * _3083;
                        float _3108 = _3107 * _3107;
                        float _3111 = ((1.0 - _3108) * _3033) + _3108;
                        float _4455 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3112 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3113 = 1.0 - _3083;
                        float _3123 = (0.5 / (((_3112 * ((_3098 * _3113) + _3083)) + 9.9999999392252902907785028219223e-09) + (((_3112 * _3113) + _3083) * _3098))) * _3112;
                        float _4466 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3134 = (((_3084 * 3.1415927410125732421875) * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) / ((_3106 * _3106) * ((_3050 * 2.1991131305694580078125) + 3.141590118408203125))) * _3039;
                        _2887 = (_3054 * _3002.x) + _2960;
                        _2888 = (_3054 * _3002.y) + _2961;
                        _2889 = (_3054 * _3002.z) + _2962;
                        _2884 = (_3134 * _3019.x) + _2957;
                        _2885 = (_3134 * _3019.y) + _2958;
                        _2886 = (_3134 * _3019.z) + _2959;
                        if (_2964 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2957 = _2884;
                            _2958 = _2885;
                            _2959 = _2886;
                            _2960 = _2887;
                            _2961 = _2888;
                            _2962 = _2889;
                            _2963 = _2964;
                        }
                    }
                    frontier_phi_73_pred = _2889;
                    frontier_phi_73_pred_1 = _2888;
                    frontier_phi_73_pred_2 = _2887;
                    frontier_phi_73_pred_3 = _2886;
                    frontier_phi_73_pred_4 = _2885;
                    frontier_phi_73_pred_5 = _2884;
                }
                _2671 = frontier_phi_73_pred;
                _2669 = frontier_phi_73_pred_1;
                _2667 = frontier_phi_73_pred_2;
                _2665 = frontier_phi_73_pred_3;
                _2663 = frontier_phi_73_pred_4;
                _2661 = frontier_phi_73_pred_5;
                uint _2819 = _2818 + 1u;
                if (_2819 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2812 = _2661;
                    _2813 = _2663;
                    _2814 = _2665;
                    _2815 = _2667;
                    _2816 = _2669;
                    _2817 = _2671;
                    _2818 = _2819;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
        }
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.z;
        uint _2677 = (_2675 >> 8u) & 15u;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        if (((4294967295u << _2677) & _2556) == 0u)
        {
            _2780 = _2660;
            _2782 = _2662;
            _2784 = _2664;
            _2786 = _2666;
            _2788 = _2668;
            _2790 = _2670;
        }
        else
        {
            float _2805 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
            float _2806 = _2805 * _1614;
            float _2807 = _2805 * _1615;
            float _2808 = _2805 * _1616;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2677 < ((_2675 >> 12u) & 15u))
            {
                float _2781;
                float _2783;
                float _2785;
                float _2787;
                float _2789;
                float _2791;
                float _2940 = _2660;
                float _2941 = _2662;
                float _2942 = _2664;
                float _2943 = _2666;
                float _2944 = _2668;
                float _2945 = _2670;
                uint _2946 = _2677;
                uint _2955;
                bool _2956;
                for (;;)
                {
                    _2955 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2946 << 2u)) >> 2u)).x;
                    _2956 = _2955 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2956)
                    {
                        frontier_phi_84_pred = _2944;
                        frontier_phi_84_pred_1 = _2943;
                        frontier_phi_84_pred_2 = _2942;
                        frontier_phi_84_pred_3 = _2941;
                        frontier_phi_84_pred_4 = _2940;
                        frontier_phi_84_pred_5 = _2945;
                    }
                    else
                    {
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3161 = _2940;
                        float _3162 = _2941;
                        float _3163 = _2942;
                        float _3164 = _2943;
                        float _3165 = _2944;
                        float _3166 = _2945;
                        uint _3167 = _2955;
                        uint _3168;
                        vec4 _3193;
                        float _3194;
                        vec4 _3209;
                        vec3 _3221;
                        vec4 _3237;
                        vec4 _3253;
                        float _3300;
                        bool _3301;
                        for (;;)
                        {
                            uint _3178 = ((_2946 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3167));
                            _3168 = (_3167 + 4294967295u) & _3167;
                            uint _3180 = _3178 * 40u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            _3194 = _3193.w;
                            uint _3196 = (_3178 * 40u) + 4u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3211 = (_3178 * 40u) + 8u;
                            _3221 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x));
                            uint _3224 = (_3178 * 40u) + 16u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3240 = (_3178 * 40u) + 20u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3256 = (_3178 * 40u) + 24u;
                            vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3275 = (_3178 * 40u) + 28u;
                            vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            _3300 = fma(_1616, _3288.z, fma(_1615, _3288.y, _3288.x * _1614)) + _3288.w;
                            _3301 = !((fma(_1616, _3269.z, fma(_1615, _3269.y, _3269.x * _1614)) + _3269.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3301)
                            {
                                float _3328 = _3193.x - _1614;
                                float _3329 = _3193.y - _1615;
                                float _3330 = _3193.z - _1616;
                                float _3331 = dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330));
                                float _3334 = inversesqrt(_3331);
                                float _3335 = _3334 * _3328;
                                float _3336 = _3334 * _3329;
                                float _3337 = _3334 * _3330;
                                float _3341 = 1.0 - (_3331 / (_3194 * _3194));
                                float _4477 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3346 = sqrt(_3331) * _3209.w;
                                float _3348 = 1.39999997615814208984375 / (_3346 + 1.39999997615814208984375);
                                float _3349 = _3348 * _3348;
                                float _3352 = ((1.0 - _3349) * dot(vec3(_3335, _3336, _3337), vec3(_440, _443, _446))) + _3349;
                                float _3355 = _3346 * _3346;
                                float _3359 = (fma(_1616, _3237.z, fma(_1615, _3237.y, _3237.x * _1614)) + _3237.w) / _3300;
                                float _3360 = (fma(_1616, _3253.z, fma(_1615, _3253.y, _3253.x * _1614)) + _3253.w) / _3300;
                                float _3364 = 1.0 - dot(vec2(_3359, _3360), vec2(_3359, _3360));
                                float _4493 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3366 = _3365 * (((isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0))) * _3342) / ((_3355 * 0.699999988079071044921875) + 1.0));
                                float _3378 = exp2(log2(1.0 / ((_3355 * 3.5) + 5.0)) * 0.25);
                                float _3379 = 1.0 - _516;
                                float _3386 = sqrt(1.0 - ((1.0 - (_3379 * _3379)) * (1.0 - (_3378 * _3378))));
                                float _3387 = _3386 * _3386;
                                float _3388 = _3387 * _3387;
                                float _3389 = _3335 - _2806;
                                float _3390 = _3336 - _2807;
                                float _3391 = _3337 - _2808;
                                float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                                float _3399 = dot(vec3(_440, _443, _446), vec3((-0.0) - _2806, (-0.0) - _2807, (-0.0) - _2808));
                                float _4504 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3402 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3403 = dot(vec3(_440, _443, _446), vec3(_3395 * _3389, _3395 * _3390, _3395 * _3391));
                                float _4515 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3406 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3410 = ((_3406 * _3406) * (_3388 + (-1.0))) + 1.0;
                                float _3411 = _3348 * _3387;
                                float _3412 = _3411 * _3411;
                                float _3418 = ((1.0 - _3412) * dot(vec3(_440, _443, _446), vec3(_3335, _3336, _3337))) + _3412;
                                float _4526 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3419 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3420 = 1.0 - _3387;
                                float _3430 = (0.5 / (((_3419 * ((_3402 * _3420) + _3387)) + 9.9999999392252902907785028219223e-09) + (((_3419 * _3420) + _3387) * _3402))) * _3419;
                                float _4537 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3440 = (_3365 * _3342) * (((_3388 * 3.1415927410125732421875) * (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) / ((_3410 * _3410) * ((_3355 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3366 * _3209.y;
                                frontier_phi_90_pred_1 = _3366 * _3209.x;
                                frontier_phi_90_pred_2 = _3440 * _3221.z;
                                frontier_phi_90_pred_3 = _3440 * _3221.y;
                                frontier_phi_90_pred_4 = _3440 * _3221.x;
                                frontier_phi_90_pred_5 = _3366 * _3209.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3448 = frontier_phi_90_pred;
                            _3447 = frontier_phi_90_pred_1;
                            _3446 = frontier_phi_90_pred_2;
                            _3445 = frontier_phi_90_pred_3;
                            _3444 = frontier_phi_90_pred_4;
                            _3449 = frontier_phi_90_pred_5;
                            _3151 = _3447 + _3164;
                            _3152 = _3448 + _3165;
                            _3153 = _3449 + _3166;
                            _3148 = _3444 + _3161;
                            _3149 = _3445 + _3162;
                            _3150 = _3446 + _3163;
                            if (_3168 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3168;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3152;
                        frontier_phi_84_pred_1 = _3151;
                        frontier_phi_84_pred_2 = _3150;
                        frontier_phi_84_pred_3 = _3149;
                        frontier_phi_84_pred_4 = _3148;
                        frontier_phi_84_pred_5 = _3153;
                    }
                    _2789 = frontier_phi_84_pred;
                    _2787 = frontier_phi_84_pred_1;
                    _2785 = frontier_phi_84_pred_2;
                    _2783 = frontier_phi_84_pred_3;
                    _2781 = frontier_phi_84_pred_4;
                    _2791 = frontier_phi_84_pred_5;
                    uint _2947 = _2946 + 1u;
                    if (_2947 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2940 = _2781;
                        _2941 = _2783;
                        _2942 = _2785;
                        _2943 = _2787;
                        _2944 = _2789;
                        _2945 = _2791;
                        _2946 = _2947;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2791;
                frontier_phi_65_66_ladder_1 = _2787;
                frontier_phi_65_66_ladder_2 = _2789;
                frontier_phi_65_66_ladder_3 = _2783;
                frontier_phi_65_66_ladder_4 = _2781;
                frontier_phi_65_66_ladder_5 = _2785;
            }
            else
            {
                frontier_phi_65_66_ladder = _2670;
                frontier_phi_65_66_ladder_1 = _2666;
                frontier_phi_65_66_ladder_2 = _2668;
                frontier_phi_65_66_ladder_3 = _2662;
                frontier_phi_65_66_ladder_4 = _2660;
                frontier_phi_65_66_ladder_5 = _2664;
            }
            _2780 = frontier_phi_65_66_ladder_4;
            _2782 = frontier_phi_65_66_ladder_3;
            _2784 = frontier_phi_65_66_ladder_5;
            _2786 = frontier_phi_65_66_ladder_1;
            _2788 = frontier_phi_65_66_ladder_2;
            _2790 = frontier_phi_65_66_ladder;
        }
        float _2795 = isnan(1.0) ? _500 : (isnan(_500) ? 1.0 : min(_500, 1.0));
        _2568 = (_2795 * _2786) + _2081;
        _2570 = (_2795 * _2788) + _2083;
        _2572 = (_2795 * _2790) + _2085;
        _2574 = ((_2780 * _485) * _2795) + _2419;
        _2576 = ((_2782 * _487) * _2795) + _2421;
        _2578 = ((_2784 * _488) * _2795) + _2423;
    }
    else
    {
        _2568 = _2081;
        _2570 = _2083;
        _2572 = _2085;
        _2574 = _2419;
        _2576 = _2421;
        _2578 = _2423;
    }
    uint _2584 = _461 + uint(cbMatDynParam._m0[0u].w);
    float _4553 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4564 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _4575 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _2615 = (((isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2568 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _500))) + ((_2574 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1342)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _299.x) * cbInstanceData._m0[_2584].x);
    float _2617 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _299.y) * cbInstanceData._m0[_2584].y) + ((_2576 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1342)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2570 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _500)));
    float _2619 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _299.z) * cbInstanceData._m0[_2584].z) + ((_2578 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1342)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2572 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _500)));
    float _2620 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2621 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2622 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    uint _2623 = _459 + 6u;
    float _2631 = _419 / cbSceneParam._m0[86u].x;
    float _2632 = _420 / cbSceneParam._m0[86u].y;
    vec4 _2646 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, (log2((isnan(cbSceneParam._m0[77u].w) ? _340 : (isnan(_340) ? cbSceneParam._m0[77u].w : min(_340, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2648 = _2646.x;
    float _2649 = _2646.y;
    float _2650 = _2646.z;
    float _2651 = _2646.w;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_340 > cbSceneParam._m0[78u].w)
    {
        float _2685 = isnan(_340) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _340 : min(cbSceneParam._m0[80u].w, _340));
        float _2686 = _2685 / _340;
        float _2697 = _2686 * _391;
        float _2698 = _392 * _2686;
        float _2699 = (-0.0) - _2698;
        float _2700 = _2686 * _393;
        float _2702 = (cbSceneParam._m0[77u].w * _2699) / _2685;
        float _2703 = _2702 + cbSceneParam._m0[79u].w;
        float _2704 = cbSceneParam._m0[79u].w - _2698;
        float _2710 = sqrt(((_2697 * _2697) + (_2698 * _2698)) + (_2700 * _2700));
        float _2713 = (1.0 - (cbSceneParam._m0[77u].w / _2685)) * _2710;
        float _2718 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2720 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2897;
        if (abs((_2699 - _2702) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2897 = ((((_2703 > 0.0) ? exp2(_2718 * _2703) : (2.0 - exp2(_2720 * _2703))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2713;
        }
        else
        {
            float _2841 = 1.0 / cbSceneParam._m0[80u].x;
            float _2842 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : max(_2703, _2704));
            float _2843 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : min(_2703, _2704));
            float _2852 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : min(_2842, 0.0));
            float _2853 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : min(_2843, 0.0));
            _2897 = ((abs(_2710 / _2699) * cbSceneParam._m0[80u].y) * ((((_2852 - _2853) * 2.0) - ((exp2(_2718 * (isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0)))) - exp2(_2718 * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0))))) * _2841)) - ((exp2(_2720 * _2852) - exp2(_2720 * _2853)) * _2841))) + (_2713 * cbSceneParam._m0[80u].z);
        }
        vec4 _2899 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, 1.0), 0.0);
        float _2908 = exp2((_2897 * (-1.44269502162933349609375)) * (1.0 - _2899.w));
        float _2909 = log2(_2908);
        float _2925 = log2(_2651);
        _2722 = (exp2(_2925 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].x)) * _2899.x) / cbSceneParam._m0[78u].x)) + _2648;
        _2724 = (exp2(_2925 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].y)) * _2899.y) / cbSceneParam._m0[78u].y)) + _2649;
        _2726 = (exp2(_2925 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].z)) * _2899.z) / cbSceneParam._m0[78u].z)) + _2650;
        _2728 = _2908 * _2651;
    }
    else
    {
        _2722 = _2648;
        _2724 = _2649;
        _2726 = _2650;
        _2728 = _2651;
    }
    bool _2935;
    vec4 _2738;
    vec4 _2760;
    float _2762;
    float _2766;
    float _2767;
    float _2768;
    float _2769;
    bool _2779;
    for (;;)
    {
        _2738 = cbMatDynParam._m0[0u];
        float _2740 = roundEven(_2738.y);
        bool _2741 = _2740 == 3.0;
        float _2742 = log2(_2728);
        float _2749 = exp2(_2742 * cbSceneParam._m0[78u].x) * _2620;
        float _2750 = exp2(_2742 * cbSceneParam._m0[78u].y) * _2621;
        float _2751 = exp2(_2742 * cbSceneParam._m0[78u].z) * _2622;
        float _2758 = _407 + (-0.5);
        _2760 = cbMtdParam._m0[1u];
        _2762 = _2760.y * _2758;
        float _2765 = (_2740 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2766 = _2765 * (_2741 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2722)));
        _2767 = _2765 * (_2741 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2724)));
        _2768 = _2765 * (_2741 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2726)));
        _2769 = _2758 * 0.999000012874603271484375;
        _2779 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2779)
        {
            if ((cbInstanceData._m0[_459 + 7u].x + _2769) < 0.5)
            {
                _2935 = true;
                break;
            }
        }
        uint _2876 = _461 + uint(_2738.w);
        if ((cbInstanceData._m0[_2876].w < 1.0) && ((cbInstanceData._m0[_2876].w + _2769) < 0.5))
        {
            _2935 = true;
            break;
        }
        if ((_2762 + 1.0) < _2760.x)
        {
            _2935 = true;
            break;
        }
        _2935 = false;
        break;
    }
    float _3139;
    if (_2935)
    {
        discard_state = true;
        _3139 = 0.0;
    }
    else
    {
        _3139 = cbInstanceData._m0[_2623].w;
    }
    SV_Target.x = _2766;
    SV_Target.y = _2767;
    SV_Target.z = _2768;
    SV_Target.w = _3139;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2623].w;
    discard_exit();
}


