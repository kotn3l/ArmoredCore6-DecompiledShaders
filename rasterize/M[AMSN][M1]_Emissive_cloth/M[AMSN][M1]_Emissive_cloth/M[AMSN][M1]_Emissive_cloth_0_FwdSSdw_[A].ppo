#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _919;
float _3358;
float _3359;
float _3360;
float _3361;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _239 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _259 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _266 = cbMtdParam._m0[11u].x + _259.x;
    vec4 _278 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _282 = _278.z;
    float _286 = (_278.x * 2.0) + (-1.0);
    float _288 = (_278.y * 2.0) + (-1.0);
    float _289 = dot(vec2(_286, _288), vec2(_286, _288));
    float _3370 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _295 = sqrt(1.0 - (isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))));
    vec4 _314 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _321 = fma(_295, _217, fma(_288, _209 * TANGENT.x, (_195 * _188) * _286));
    float _324 = fma(_295, _218, fma(_288, _209 * TANGENT.y, (_195 * _189) * _286));
    float _327 = fma(_295, _219, fma(_288, _209 * TANGENT.z, (_195 * _190) * _286));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    float _332 = _331 * _321;
    float _333 = _331 * _324;
    float _334 = _331 * _327;
    float _3381 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _335 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _3392 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3403 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3414 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3425 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _339 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _355 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _396 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _406 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _396);
    float _407 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _396);
    float _408 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _396);
    float _412 = inversesqrt(dot(vec3(_406, _407, _408), vec3(_406, _407, _408)));
    float _413 = _406 * _412;
    float _414 = _407 * _412;
    float _415 = _408 * _412;
    vec4 _420 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _422 = _420.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _598 = sqrt(((_406 * _406) + (_407 * _407)) + (_408 * _408));
        float _604 = (cbMatDynParam._m0[5u].x * _598) + cbMatDynParam._m0[5u].y;
        float _3436 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        float _605 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _609 = (cbMatDynParam._m0[5u].z * _598) + cbMatDynParam._m0[5u].w;
        float _3447 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) - _605)) + _605) < ((_422 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _434 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _435 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _455 = fma(_334, cbSceneParam._m0[5u].z, fma(_333, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _332));
    float _458 = fma(_334, cbSceneParam._m0[6u].z, fma(_333, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _332));
    float _461 = fma(_334, cbSceneParam._m0[7u].z, fma(_333, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _332));
    uint _474 = uint(roundEven(NORMAL.w)) * 13u;
    uint _476 = _474 + 9u;
    uint _477 = _476 + uint(cbMatDynParam._m0[0u].w);
    float _483 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0)))) * cbInstanceData._m0[_477].x;
    float _484 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0)))) * cbInstanceData._m0[_477].y;
    float _485 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0)))) * cbInstanceData._m0[_477].z;
    float _3458 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _486 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _3469 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _3480 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _488 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _489 = 1.0 - _339;
    float _490 = _486 * _489;
    float _491 = _487 * _489;
    float _492 = _488 * _489;
    float _497 = (_486 + (-0.039999999105930328369140625)) * _339;
    float _498 = (_487 + (-0.039999999105930328369140625)) * _339;
    float _499 = (_488 + (-0.039999999105930328369140625)) * _339;
    float _500 = _497 + 0.039999999105930328369140625;
    float _502 = _498 + 0.039999999105930328369140625;
    float _503 = _499 + 0.039999999105930328369140625;
    vec4 _512 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _434, cbSceneParam._m0[86u].y * _435));
    float _515 = _512.x * TEXCOORD.z;
    float _516 = dot(vec3(_332, _333, _334), vec3(_413, _414, _415));
    float _519 = _516 * 2.0;
    float _523 = (_519 * _332) - _413;
    float _524 = (_519 * _333) - _414;
    float _525 = (_519 * _334) - _415;
    float _529 = abs(dot(vec3(_413, _414, _415), vec3(_332, _333, _334)));
    float _3491 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _531 = sqrt(_335);
    float _544 = exp2((_531 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_531 * 3.0));
    float _550 = (1.0 - _544) * ((_531 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _551 = _544 * _531;
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _583 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _587 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _918;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _643 = fma(_587, cbModelParam._m0[26u].z, fma(_583, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _579));
        float _647 = fma(_587, cbModelParam._m0[27u].z, fma(_583, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _579));
        float _651 = fma(_587, cbModelParam._m0[28u].z, fma(_583, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _579));
        float _676 = _579 + _332;
        float _677 = _583 + _333;
        float _678 = _587 + _334;
        float _688 = fma(_678, cbModelParam._m0[26u].z, fma(_677, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _676)) - _643;
        float _689 = fma(_678, cbModelParam._m0[27u].z, fma(_677, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _676)) - _647;
        float _690 = fma(_678, cbModelParam._m0[28u].z, fma(_677, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _676)) - _651;
        float _694 = inversesqrt(dot(vec3(_688, _689, _690), vec3(_688, _689, _690)));
        float _707 = ((_694 * _688) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_643 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _708 = ((_694 * _689) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_647 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _709 = ((_694 * _690) / cbModelParam._m0[34u].z) + ((((((_651 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_707, _708, _709), 0.0);
        float _746 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_712.x + (-0.5));
        float _748 = _746 * (_712.y + (-0.5));
        float _749 = _746 * (_712.z + (-0.5));
        float _756 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_719.x + (-0.5));
        float _758 = _756 * (_719.y + (-0.5));
        float _759 = _756 * (_719.z + (-0.5));
        float _766 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_726.x + (-0.5));
        float _768 = _766 * (_726.y + (-0.5));
        float _769 = _766 * (_726.z + (-0.5));
        float _776 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _777 = _776 * (_733.x + (-0.5));
        float _778 = _776 * (_733.y + (-0.5));
        float _779 = _776 * (_733.z + (-0.5));
        float _780 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _781 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = _747 * 0.5;
        float _784 = _757 * 0.5;
        float _785 = _767 * 0.5;
        float _786 = dot(vec3(_783, _784, _785), vec3(_783, _784, _785));
        float _791 = (_786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_786);
        float _800 = (dot(vec3(_332, _333, _334), vec3(_791 * _783, _791 * _784, _791 * _785)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _810 = sqrt(((_784 * _784) + (_783 * _783)) + (_785 * _785)) / (_780 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3539 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_812 + 1.0))) + _817) * _780;
        float _827 = _748 * 0.5;
        float _828 = _758 * 0.5;
        float _829 = _768 * 0.5;
        float _830 = dot(vec3(_827, _828, _829), vec3(_827, _828, _829));
        float _835 = (_830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_830);
        float _843 = (dot(vec3(_332, _333, _334), vec3(_835 * _827, _835 * _828, _835 * _829)) + 1.0) * 0.5;
        float _3550 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _852 = sqrt(((_828 * _828) + (_827 * _827)) + (_829 * _829)) / (_781 + 9.9999997473787516355514526367188e-06);
        float _3561 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3572 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * (_854 + 1.0))) + _859) * _781;
        float _869 = _749 * 0.5;
        float _870 = _759 * 0.5;
        float _871 = _769 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _885 = (dot(vec3(_332, _333, _334), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _894 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3605 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_896 + 1.0))) + _901) * _782;
        _918 = _749;
        _920 = _748;
        _921 = _747;
        _922 = _759;
        _923 = _758;
        _924 = _757;
        _925 = _769;
        _926 = _768;
        _927 = _767;
        _928 = _782;
        _929 = _781;
        _930 = _780;
        _931 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
        _932 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
    }
    else
    {
        _918 = _919;
        _920 = _919;
        _921 = _919;
        _922 = _919;
        _923 = _919;
        _924 = _919;
        _925 = _919;
        _926 = _919;
        _927 = _919;
        _928 = _919;
        _929 = _919;
        _930 = _919;
        _931 = 0.0;
        _932 = 0.0;
        _933 = 0.0;
    }
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _962 = fma(_587, cbModelParam._m0[30u].z, fma(_583, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _579));
        float _966 = fma(_587, cbModelParam._m0[31u].z, fma(_583, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _579));
        float _970 = fma(_587, cbModelParam._m0[32u].z, fma(_583, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _579));
        float _993 = _579 + _332;
        float _994 = _583 + _333;
        float _995 = _587 + _334;
        float _1005 = fma(_995, cbModelParam._m0[30u].z, fma(_994, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993)) - _962;
        float _1006 = fma(_995, cbModelParam._m0[31u].z, fma(_994, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993)) - _966;
        float _1007 = fma(_995, cbModelParam._m0[32u].z, fma(_994, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993)) - _970;
        float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
        float _1024 = ((_1011 * _1005) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_962 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1011 * _1006) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_966 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1011 * _1007) / cbModelParam._m0[35u].z) + ((((((_970 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        float _1061 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1028.x + (-0.5));
        float _1063 = _1061 * (_1028.y + (-0.5));
        float _1064 = _1061 * (_1028.z + (-0.5));
        float _1071 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1035.x + (-0.5));
        float _1073 = _1071 * (_1035.y + (-0.5));
        float _1074 = _1071 * (_1035.z + (-0.5));
        float _1081 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1042.x + (-0.5));
        float _1083 = _1081 * (_1042.y + (-0.5));
        float _1084 = _1081 * (_1042.z + (-0.5));
        float _1091 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1049.x + (-0.5));
        float _1093 = _1091 * (_1049.y + (-0.5));
        float _1094 = _1091 * (_1049.z + (-0.5));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = _1062 * 0.5;
        float _1099 = _1072 * 0.5;
        float _1100 = _1082 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_332, _333, _334), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3668 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1125 + 1.0))) + _1130) * _1095;
        float _1140 = _1063 * 0.5;
        float _1141 = _1073 * 0.5;
        float _1142 = _1083 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_332, _333, _334), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3701 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1167 + 1.0))) + _1172) * _1096;
        float _1182 = _1064 * 0.5;
        float _1183 = _1074 * 0.5;
        float _1184 = _1084 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_332, _333, _334), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3734 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1209 + 1.0))) + _1214) * _1097;
        _1231 = _1064;
        _1232 = _1063;
        _1233 = _1062;
        _1234 = _1074;
        _1235 = _1073;
        _1236 = _1072;
        _1237 = _1084;
        _1238 = _1083;
        _1239 = _1082;
        _1240 = _1097;
        _1241 = _1096;
        _1242 = _1095;
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
    }
    else
    {
        _1231 = _919;
        _1232 = _919;
        _1233 = _919;
        _1234 = _919;
        _1235 = _919;
        _1236 = _919;
        _1237 = _919;
        _1238 = _919;
        _1239 = _919;
        _1240 = _919;
        _1241 = _919;
        _1242 = _919;
        _1243 = 0.0;
        _1244 = 0.0;
        _1245 = 0.0;
    }
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _931)) + _931;
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _932)) + _932;
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _933)) + _933;
    float _1278 = fma(_1257, cbSceneParam._m0[89u].z, fma(_1256, cbSceneParam._m0[89u].y, _1255 * cbSceneParam._m0[89u].x));
    float _1281 = fma(_1257, cbSceneParam._m0[90u].z, fma(_1256, cbSceneParam._m0[90u].y, _1255 * cbSceneParam._m0[90u].x));
    float _1284 = fma(_1257, cbSceneParam._m0[91u].z, fma(_1256, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1255));
    float _1299 = _523 * 0.5;
    float _1300 = _524 * 0.5;
    float _1301 = _525 * 0.5;
    float _1302 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1305 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1308 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1342;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1315 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_918, _922, _925, _928));
        float _1319 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_920, _923, _926, _929));
        float _1323 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_921, _924, _927, _930));
        float _1330 = dot(vec4(cbModelParam._m0[39u]), vec4(_1299, _1300, _1301, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1330) ? 0.0 : (isnan(0.0) ? _1330 : max(0.0, _1330))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1353;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1344 = dot(vec4(cbModelParam._m0[40u]), vec4(_1299, _1300, _1301, 1.0));
        _1353 = dot(vec3(isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1344) ? 0.0 : (isnan(0.0) ? _1344 : max(0.0, _1344))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1353 = 1.0;
    }
    float _1357 = (_1353 * cbModelParam._m0[1u].x) + (_1342 * (1.0 - cbModelParam._m0[1u].x));
    float _1367 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _335);
    float _1368 = isnan(_1367) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1367 : min(cbModelParam._m0[25u].z, _1367));
    float _1450;
    float _1452;
    float _1454;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1417 = fma(_587, cbModelParam._m0[13u].z, fma(_583, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _579)) + cbModelParam._m0[13u].w;
        float _1421 = fma(_587, cbModelParam._m0[14u].z, fma(_583, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _579)) + cbModelParam._m0[14u].w;
        float _1425 = fma(_587, cbModelParam._m0[15u].z, fma(_583, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _579)) + cbModelParam._m0[15u].w;
        float _1428 = fma(_525, cbModelParam._m0[13u].z, fma(_524, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _523));
        float _1431 = fma(_525, cbModelParam._m0[14u].z, fma(_524, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _523));
        float _1434 = fma(_525, cbModelParam._m0[15u].z, fma(_524, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _523));
        float _1462;
        if (_1428 > 0.0)
        {
            _1462 = abs((1.0 - _1417) / _1428);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1417 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1462 = frontier_phi_19_17_ladder;
        }
        float _1690;
        if (_1431 > 0.0)
        {
            _1690 = abs((1.0 - _1421) / _1431);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1421 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1690 = frontier_phi_28_24_ladder;
        }
        float _1947;
        if (_1434 > 0.0)
        {
            _1947 = abs((1.0 - _1425) / _1434);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1425 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1947 = frontier_phi_40_35_ladder;
        }
        float _1949 = isnan(_1690) ? _1462 : (isnan(_1462) ? _1690 : min(_1462, _1690));
        float _1950 = isnan(_1947) ? _1949 : (isnan(_1949) ? _1947 : min(_1949, _1947));
        float _1954 = (_1950 * _1428) + _1417;
        float _1955 = (_1950 * _1431) + _1421;
        float _1956 = (_1950 * _1434) + _1425;
        float _1957 = _1950 * 9.9999997473787516355514526367188e-05;
        float _1959 = (-1.0) - _1957;
        float _1961 = _1957 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1956 > _1961) || ((_1956 < _1959) || ((_1955 > _1961) || ((_1955 < _1959) || ((_1954 < _1959) || (_1954 > _1961))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2084 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1956, cbModelParam._m0[9u].z, fma(_1955, cbModelParam._m0[9u].y, _1954 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1956, cbModelParam._m0[10u].z, fma(_1955, cbModelParam._m0[10u].y, _1954 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1956, cbModelParam._m0[11u].z, fma(_1955, cbModelParam._m0[11u].y, _1954 * cbModelParam._m0[11u].x))), _1368);
            frontier_phi_18_40_ladder = _2084.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2084.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2084.x * cbModelParam._m0[1u].y;
        }
        _1450 = frontier_phi_18_40_ladder_2;
        _1452 = frontier_phi_18_40_ladder_1;
        _1454 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1438 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_523, _524, _525), _1368);
        _1450 = _1438.x * cbModelParam._m0[1u].y;
        _1452 = _1438.y * cbModelParam._m0[1u].y;
        _1454 = _1438.z * cbModelParam._m0[1u].y;
    }
    float _1458 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _335);
    float _1459 = isnan(_1458) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1458 : min(cbModelParam._m0[25u].w, _1458));
    float _1552;
    float _1554;
    float _1556;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1516 = fma(_587, cbModelParam._m0[21u].z, fma(_583, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _579)) + cbModelParam._m0[21u].w;
        float _1520 = fma(_587, cbModelParam._m0[22u].z, fma(_583, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _579)) + cbModelParam._m0[22u].w;
        float _1524 = fma(_587, cbModelParam._m0[23u].z, fma(_583, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _579)) + cbModelParam._m0[23u].w;
        float _1527 = fma(_525, cbModelParam._m0[21u].z, fma(_524, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _523));
        float _1530 = fma(_525, cbModelParam._m0[22u].z, fma(_524, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _523));
        float _1533 = fma(_525, cbModelParam._m0[23u].z, fma(_524, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _523));
        float _1695;
        if (_1527 > 0.0)
        {
            _1695 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1695 = frontier_phi_30_26_ladder;
        }
        float _1974;
        if (_1530 > 0.0)
        {
            _1974 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1974 = frontier_phi_42_37_ladder;
        }
        float _2187;
        if (_1533 > 0.0)
        {
            _2187 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2187 = frontier_phi_51_48_ladder;
        }
        float _2189 = isnan(_1974) ? _1695 : (isnan(_1695) ? _1974 : min(_1695, _1974));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1527) + _1516;
        float _2195 = (_2190 * _1530) + _1520;
        float _2196 = (_2190 * _1533) + _1524;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2197;
        float _2200 = _2197 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2196 > _2200) || ((_2196 < _2198) || ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 < _2198) || (_2194 > _2200))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2419 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2196, cbModelParam._m0[17u].z, fma(_2195, cbModelParam._m0[17u].y, _2194 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2196, cbModelParam._m0[18u].z, fma(_2195, cbModelParam._m0[18u].y, _2194 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2196, cbModelParam._m0[19u].z, fma(_2195, cbModelParam._m0[19u].y, _2194 * cbModelParam._m0[19u].x))), _1459);
            frontier_phi_27_51_ladder = _2419.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2419.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2419.x * cbModelParam._m0[1u].z;
        }
        _1552 = frontier_phi_27_51_ladder_2;
        _1554 = frontier_phi_27_51_ladder_1;
        _1556 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_523, _524, _525), _1459);
        _1552 = _1536.x * cbModelParam._m0[1u].z;
        _1554 = _1536.y * cbModelParam._m0[1u].z;
        _1556 = _1536.z * cbModelParam._m0[1u].z;
    }
    float _1569 = (((_550 * _500) + _551) * _515) * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1571 = (((_550 * _502) + _551) * _515) * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1573 = (((_550 * _503) + _551) * _515) * ((cbModelParam._m0[1u].w * (_1556 - _1454)) + _1454);
    float _1576 = fma(_1573, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1569 * cbSceneParam._m0[89u].x));
    float _1579 = fma(_1573, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1569 * cbSceneParam._m0[90u].x));
    float _1582 = fma(_1573, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, _1569 * cbSceneParam._m0[91u].x));
    vec4 _1590 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_434, _435));
    float _1592 = _1590.w;
    float _1604 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1592);
    float _1605 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1592);
    float _1606 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1592);
    uvec4 _1610 = floatBitsToUint(cbInstanceData._m0[_474 + 5u]);
    uint _1612 = _1610.x * 14u;
    uint _1613 = _1612 + 13u;
    float _1620 = _515 + (-1.0);
    float _1625 = (cbLight._m0[_1613].x * _1620) + 1.0;
    float _1626 = (cbLight._m0[_1613].y * _1620) + 1.0;
    float _1627 = (cbLight._m0[_1613].z * _1620) + 1.0;
    float _1628 = (cbLight._m0[_1613].w * _1620) + 1.0;
    uint _1629 = _1612 + 5u;
    float _1635 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
    uint _1639 = _1612 + 4u;
    float _1649 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
    uint _1653 = _1612 | 1u;
    float _1664 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_332, _333, _334));
    float _1667 = dot(vec3(cbLight._m0[_1653].xyz), vec3(_332, _333, _334));
    float _3870 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _3881 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1672 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * 0.3183098733425140380859375;
    float _1674 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 0.3183098733425140380859375;
    float _1681 = ((cbLight._m0[_1629].x * _1635) * _1674) + (((cbLight._m0[_1639].x * _1604) * _1649) * _1672);
    float _1682 = ((_1635 * cbLight._m0[_1629].y) * _1674) + (((cbLight._m0[_1639].y * _1605) * _1649) * _1672);
    float _1683 = ((_1635 * cbLight._m0[_1629].z) * _1674) + (((cbLight._m0[_1639].z * _1606) * _1649) * _1672);
    uvec4 _1687 = floatBitsToUint(cbLight._m0[_1612 + 12u]);
    bool _1689 = _1687.x == 0u;
    float _1700;
    float _1702;
    float _1704;
    if (_1689)
    {
        _1700 = _1681;
        _1702 = _1682;
        _1704 = _1683;
    }
    else
    {
        uint _1708 = _1612 + 6u;
        float _1724 = (dot(vec3(cbLight._m0[_1612 + 2u].xyz), vec3(_332, _333, _334)) * 0.5) + 0.5;
        float _1725 = _1724 * _1724;
        float _3892 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1727 = isnan(1.0) ? _1627 : (isnan(_1627) ? 1.0 : min(_1627, 1.0));
        _1700 = (((cbLight._m0[_1708].x * 0.3183098733425140380859375) * _1726) * _1727) + _1681;
        _1702 = (((cbLight._m0[_1708].y * 0.3183098733425140380859375) * _1726) * _1727) + _1682;
        _1704 = (((cbLight._m0[_1708].z * 0.3183098733425140380859375) * _1726) * _1727) + _1683;
    }
    bool _1707 = _1687.y == 0u;
    float _1745;
    float _1747;
    float _1749;
    if (_1707)
    {
        _1745 = _1700;
        _1747 = _1702;
        _1749 = _1704;
    }
    else
    {
        uint _1918 = _1612 + 7u;
        float _1934 = (dot(vec3(cbLight._m0[_1612 + 3u].xyz), vec3(_332, _333, _334)) * 0.5) + 0.5;
        float _1935 = _1934 * _1934;
        float _3908 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1936 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1937 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
        _1745 = (((cbLight._m0[_1918].x * 0.3183098733425140380859375) * _1936) * _1937) + _1700;
        _1747 = (((cbLight._m0[_1918].y * 0.3183098733425140380859375) * _1936) * _1937) + _1702;
        _1749 = (((cbLight._m0[_1918].z * 0.3183098733425140380859375) * _1936) * _1937) + _1704;
    }
    uint _1752 = _1612 + 8u;
    float _1765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1612].w)) * _335) * 0.949999988079071044921875);
    float _1766 = _1765 * _1765;
    float _1767 = cbLight._m0[_1612].x + _413;
    float _1768 = cbLight._m0[_1612].y + _414;
    float _1769 = cbLight._m0[_1612].z + _415;
    float _1773 = inversesqrt(dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769)));
    float _1774 = _1773 * _1767;
    float _1775 = _1773 * _1768;
    float _1776 = _1773 * _1769;
    float _1777 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_1612].xyz));
    float _3924 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _1781 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _1782 = dot(vec3(_332, _333, _334), vec3(_1774, _1775, _1776));
    float _3946 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _1786 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_1774, _1775, _1776));
    float _3957 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1790 = _1766 * _1766;
    float _1794 = ((_1785 * _1785) * (_1790 + (-1.0))) + 1.0;
    float _1802 = exp2(log2(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * 5.0);
    float _1803 = 0.959999978542327880859375 - _497;
    float _1805 = 0.959999978542327880859375 - _498;
    float _1806 = 0.959999978542327880859375 - _499;
    float _1813 = 1.0 - _1766;
    float _1824 = (0.5 / (((_1781 * ((_1780 * _1813) + _1766)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _1813) + _1766) * _1780))) * _1780;
    float _3968 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1826 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1790 / ((_1794 * _1794) * 3.141590118408203125));
    uint _1840 = _1612 + 9u;
    float _1851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1653].w)) * _335) * 0.949999988079071044921875);
    float _1852 = _1851 * _1851;
    float _1853 = cbLight._m0[_1653].x + _413;
    float _1854 = cbLight._m0[_1653].y + _414;
    float _1855 = cbLight._m0[_1653].z + _415;
    float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
    float _1860 = _1859 * _1853;
    float _1861 = _1859 * _1854;
    float _1862 = _1859 * _1855;
    float _1863 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_1653].xyz));
    float _3979 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _1867 = dot(vec3(_332, _333, _334), vec3(_1860, _1861, _1862));
    float _3990 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _1871 = dot(vec3(cbLight._m0[_1653].xyz), vec3(_1860, _1861, _1862));
    float _4001 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1875 = _1852 * _1852;
    float _1879 = ((_1870 * _1870) * (_1875 + (-1.0))) + 1.0;
    float _1886 = exp2(log2(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * 5.0);
    float _1893 = 1.0 - _1852;
    float _1903 = (0.5 / (((_1781 * ((_1866 * _1893) + _1852)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _1893) + _1852) * _1866))) * _1866;
    float _4012 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1905 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1875 / ((_1879 * _1879) * 3.141590118408203125));
    float _1915 = (((((_1886 * _1803) + _500) * cbLight._m0[_1840].x) * _1905) * _1635) + ((((cbLight._m0[_1752].x * _1604) * ((_1802 * _1803) + _500)) * _1826) * _1649);
    float _1916 = (((((_1886 * _1805) + _502) * cbLight._m0[_1840].y) * _1905) * _1635) + ((((cbLight._m0[_1752].y * _1605) * ((_1802 * _1805) + _502)) * _1826) * _1649);
    float _1917 = (((((_1886 * _1806) + _503) * cbLight._m0[_1840].z) * _1905) * _1635) + ((((cbLight._m0[_1752].z * _1606) * ((_1802 * _1806) + _503)) * _1826) * _1649);
    float _1979;
    float _1981;
    float _1983;
    if (_1689)
    {
        _1979 = _1915;
        _1981 = _1916;
        _1983 = _1917;
    }
    else
    {
        uint _1985 = _1612 + 2u;
        uint _1989 = _1612 + 10u;
        float _2003 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _335) * 0.949999988079071044921875);
        float _2004 = _2003 * _2003;
        float _2005 = cbLight._m0[_1985].x + _413;
        float _2006 = cbLight._m0[_1985].y + _414;
        float _2007 = cbLight._m0[_1985].z + _415;
        float _2011 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
        float _2012 = _2011 * _2005;
        float _2013 = _2011 * _2006;
        float _2014 = _2011 * _2007;
        float _2015 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_1985].xyz));
        float _4023 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2018 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _2019 = dot(vec3(_332, _333, _334), vec3(_2012, _2013, _2014));
        float _4034 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2022 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _2023 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2012, _2013, _2014));
        float _4045 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2027 = _2004 * _2004;
        float _2031 = ((_2022 * _2022) * (_2027 + (-1.0))) + 1.0;
        float _2038 = exp2(log2(1.0 - (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * 5.0);
        float _2045 = 1.0 - _2004;
        float _2055 = (0.5 / (((_1781 * ((_2018 * _2045) + _2004)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _2045) + _2004) * _2018))) * _2018;
        float _4056 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2057 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_2027 / ((_2031 * _2031) * 3.141590118408203125));
        float _2058 = isnan(1.0) ? _1627 : (isnan(_1627) ? 1.0 : min(_1627, 1.0));
        _1979 = (((((_2038 * _1803) + _500) * cbLight._m0[_1989].x) * _2057) * _2058) + _1915;
        _1981 = (((((_2038 * _1805) + _502) * cbLight._m0[_1989].y) * _2057) * _2058) + _1916;
        _1983 = (((((_2038 * _1806) + _503) * cbLight._m0[_1989].z) * _2057) * _2058) + _1917;
    }
    float _2093;
    float _2095;
    float _2097;
    if (_1707)
    {
        _2093 = _1979;
        _2095 = _1981;
        _2097 = _1983;
    }
    else
    {
        uint _2104 = _1612 + 3u;
        uint _2108 = _1612 + 11u;
        float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _335) * 0.949999988079071044921875);
        float _2123 = _2122 * _2122;
        float _2124 = cbLight._m0[_2104].x + _413;
        float _2125 = cbLight._m0[_2104].y + _414;
        float _2126 = cbLight._m0[_2104].z + _415;
        float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
        float _2131 = _2130 * _2124;
        float _2132 = _2130 * _2125;
        float _2133 = _2130 * _2126;
        float _2134 = dot(vec3(_332, _333, _334), vec3(cbLight._m0[_2104].xyz));
        float _4072 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2138 = dot(vec3(_332, _333, _334), vec3(_2131, _2132, _2133));
        float _4083 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2142 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2131, _2132, _2133));
        float _4094 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2146 = _2123 * _2123;
        float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
        float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * 5.0);
        float _2164 = 1.0 - _2123;
        float _2174 = (0.5 / (((_1781 * ((_2137 * _2164) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _2164) + _2123) * _2137))) * _2137;
        float _4105 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2176 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
        float _2177 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
        _2093 = (((((_2157 * _1803) + _500) * cbLight._m0[_2108].x) * _2176) * _2177) + _1979;
        _2095 = (((((_2157 * _1805) + _502) * cbLight._m0[_2108].y) * _2176) * _2177) + _1981;
        _2097 = (((((_2157 * _1806) + _503) * cbLight._m0[_2108].z) * _2176) * _2177) + _1983;
    }
    float _2311;
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    if (_1610.y == 0u)
    {
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2252;
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2252;
        float _2255 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2252;
        uvec4 _2267 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2268 = _2267.x;
        uint _2279 = uint((float(_2267.y) * floor(float(uint(cbSceneParam._m0[85u].y * _435) / _2268))) + floor(float(uint(cbSceneParam._m0[85u].x * _434) / _2268)));
        float _2289 = (log2(_2255 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2290 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        uint _2293 = uint(isnan(14.0) ? _2290 : (isnan(_2290) ? 14.0 : min(_2290, 14.0)));
        uvec4 _2298 = texelFetch(g_lightClusterGridBuffer, int(((_2293 << 2u) + (_2279 << 6u)) >> 2u));
        uint _2299 = _2298.x;
        uint _2300 = _2267.z;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        if (((((1u << ((_2300 >> 4u) & 15u)) + 4294967295u) & _2299) == 0u) || ((_2300 & 240u) == 0u))
        {
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
        }
        else
        {
            float _2425;
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            uint _2582 = 0u;
            uint _2591;
            bool _2592;
            for (;;)
            {
                _2591 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2582 << 2u)) >> 2u)).x;
                _2592 = _2591 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2592)
                {
                    frontier_phi_68_pred = _2578;
                    frontier_phi_68_pred_1 = _2581;
                    frontier_phi_68_pred_2 = _2580;
                    frontier_phi_68_pred_3 = _2579;
                    frontier_phi_68_pred_4 = _2577;
                    frontier_phi_68_pred_5 = _2576;
                }
                else
                {
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    uint _2727;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2580;
                    _2726 = _2581;
                    _2727 = _2591;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    for (;;)
                    {
                        uint _2731 = uint(findLSB(_2727)) + (_2582 << 5u);
                        uint _2728 = (_2727 + 4294967295u) & _2727;
                        uint _2733 = _2731 * 48u;
                        vec4 _2747 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2733)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 3u)).x));
                        uint _2753 = (_2731 * 48u) + 4u;
                        vec4 _2766 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2753)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 3u)).x));
                        uint _2772 = (_2731 * 48u) + 8u;
                        vec3 _2783 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x));
                        float _2787 = _2747.x - _2253;
                        float _2788 = _2747.y - _2254;
                        float _2789 = _2747.z - _2255;
                        float _2790 = dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789));
                        float _2793 = inversesqrt(_2790);
                        float _2794 = _2793 * _2787;
                        float _2795 = _2793 * _2788;
                        float _2796 = _2793 * _2789;
                        float _2797 = dot(vec3(_455, _458, _461), vec3(_2794, _2795, _2796));
                        float _2802 = 1.0 - (_2790 * _2747.w);
                        float _4131 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2803 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                        float _2804 = sqrt(_2790) * _2766.w;
                        float _2807 = 1.39999997615814208984375 / (_2804 + 1.39999997615814208984375);
                        float _2808 = _2807 * _2807;
                        float _2811 = ((1.0 - _2808) * _2797) + _2808;
                        float _2814 = _2804 * _2804;
                        float _2818 = ((isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0))) * _2803) / ((_2814 * 0.699999988079071044921875) + 1.0);
                        float _2822 = (-0.0) - _2253;
                        float _2823 = (-0.0) - _2254;
                        float _2824 = (-0.0) - _2255;
                        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
                        float _2829 = _2828 * _2822;
                        float _2830 = _2828 * _2823;
                        float _2831 = _2828 * _2824;
                        float _2839 = exp2(log2(1.0 / ((_2814 * 3.5) + 5.0)) * 0.25);
                        float _2840 = 1.0 - _531;
                        float _2847 = sqrt(1.0 - ((1.0 - (_2840 * _2840)) * (1.0 - (_2839 * _2839))));
                        float _2848 = _2847 * _2847;
                        float _2849 = _2848 * _2848;
                        float _2850 = _2829 + _2794;
                        float _2851 = _2830 + _2795;
                        float _2852 = _2831 + _2796;
                        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
                        float _2860 = dot(vec3(_455, _458, _461), vec3(_2829, _2830, _2831));
                        float _4147 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2863 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                        float _2864 = dot(vec3(_455, _458, _461), vec3(_2856 * _2850, _2856 * _2851, _2856 * _2852));
                        float _4158 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2867 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2871 = ((_2867 * _2867) * (_2849 + (-1.0))) + 1.0;
                        float _2872 = _2807 * _2848;
                        float _2873 = _2872 * _2872;
                        float _2876 = ((1.0 - _2873) * _2797) + _2873;
                        float _4169 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2877 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2878 = 1.0 - _2848;
                        float _2888 = (0.5 / (((_2877 * ((_2863 * _2878) + _2848)) + 9.9999999392252902907785028219223e-09) + (((_2877 * _2878) + _2848) * _2863))) * _2877;
                        float _4180 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2899 = (((_2849 * 3.1415927410125732421875) * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) / ((_2871 * _2871) * ((_2814 * 2.1991131305694580078125) + 3.141590118408203125))) * _2803;
                        _2651 = (_2818 * _2766.x) + _2724;
                        _2652 = (_2818 * _2766.y) + _2725;
                        _2653 = (_2818 * _2766.z) + _2726;
                        _2648 = (_2899 * _2783.x) + _2721;
                        _2649 = (_2899 * _2783.y) + _2722;
                        _2650 = (_2899 * _2783.z) + _2723;
                        if (_2728 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2721 = _2648;
                            _2722 = _2649;
                            _2723 = _2650;
                            _2724 = _2651;
                            _2725 = _2652;
                            _2726 = _2653;
                            _2727 = _2728;
                        }
                    }
                    frontier_phi_68_pred = _2650;
                    frontier_phi_68_pred_1 = _2653;
                    frontier_phi_68_pred_2 = _2652;
                    frontier_phi_68_pred_3 = _2651;
                    frontier_phi_68_pred_4 = _2649;
                    frontier_phi_68_pred_5 = _2648;
                }
                _2429 = frontier_phi_68_pred;
                _2435 = frontier_phi_68_pred_1;
                _2433 = frontier_phi_68_pred_2;
                _2431 = frontier_phi_68_pred_3;
                _2427 = frontier_phi_68_pred_4;
                _2425 = frontier_phi_68_pred_5;
                uint _2583 = _2582 + 1u;
                if (_2583 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2576 = _2425;
                    _2577 = _2427;
                    _2578 = _2429;
                    _2579 = _2431;
                    _2580 = _2433;
                    _2581 = _2435;
                    _2582 = _2583;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
        }
        uvec4 _2438 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2439 = _2438.z;
        uint _2441 = (_2439 >> 8u) & 15u;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        if (((4294967295u << _2441) & _2299) == 0u)
        {
            _2544 = _2424;
            _2546 = _2426;
            _2548 = _2428;
            _2550 = _2430;
            _2552 = _2432;
            _2554 = _2434;
        }
        else
        {
            float _2569 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
            float _2570 = _2569 * _2253;
            float _2571 = _2569 * _2254;
            float _2572 = _2569 * _2255;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2441 < ((_2439 >> 12u) & 15u))
            {
                float _2545;
                float _2547;
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2704 = _2424;
                float _2705 = _2426;
                float _2706 = _2428;
                float _2707 = _2430;
                float _2708 = _2432;
                float _2709 = _2434;
                uint _2710 = _2441;
                uint _2719;
                bool _2720;
                for (;;)
                {
                    _2719 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2710 << 2u)) >> 2u)).x;
                    _2720 = _2719 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2720)
                    {
                        frontier_phi_79_pred = _2709;
                        frontier_phi_79_pred_1 = _2708;
                        frontier_phi_79_pred_2 = _2707;
                        frontier_phi_79_pred_3 = _2706;
                        frontier_phi_79_pred_4 = _2705;
                        frontier_phi_79_pred_5 = _2704;
                    }
                    else
                    {
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _2926 = _2704;
                        float _2927 = _2705;
                        float _2928 = _2706;
                        float _2929 = _2707;
                        float _2930 = _2708;
                        float _2931 = _2709;
                        uint _2932 = _2719;
                        uint _2933;
                        vec4 _2958;
                        float _2959;
                        vec4 _2974;
                        vec3 _2986;
                        vec4 _3002;
                        vec4 _3018;
                        float _3065;
                        bool _3066;
                        for (;;)
                        {
                            uint _2943 = ((_2710 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2932));
                            _2933 = (_2932 + 4294967295u) & _2932;
                            uint _2945 = _2943 * 40u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            _2959 = _2958.w;
                            uint _2961 = (_2943 * 40u) + 4u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2976 = (_2943 * 40u) + 8u;
                            _2986 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x));
                            uint _2989 = (_2943 * 40u) + 16u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            uint _3005 = (_2943 * 40u) + 20u;
                            _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3021 = (_2943 * 40u) + 24u;
                            vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            uint _3040 = (_2943 * 40u) + 28u;
                            vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            _3065 = fma(_2255, _3053.z, fma(_2254, _3053.y, _3053.x * _2253)) + _3053.w;
                            _3066 = !((fma(_2255, _3034.z, fma(_2254, _3034.y, _3034.x * _2253)) + _3034.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3066)
                            {
                                float _3093 = _2958.x - _2253;
                                float _3094 = _2958.y - _2254;
                                float _3095 = _2958.z - _2255;
                                float _3096 = dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095));
                                float _3099 = inversesqrt(_3096);
                                float _3100 = _3099 * _3093;
                                float _3101 = _3099 * _3094;
                                float _3102 = _3099 * _3095;
                                float _3106 = 1.0 - (_3096 / (_2959 * _2959));
                                float _4191 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                                float _3111 = sqrt(_3096) * _2974.w;
                                float _3113 = 1.39999997615814208984375 / (_3111 + 1.39999997615814208984375);
                                float _3114 = _3113 * _3113;
                                float _3117 = ((1.0 - _3114) * dot(vec3(_3100, _3101, _3102), vec3(_455, _458, _461))) + _3114;
                                float _3120 = _3111 * _3111;
                                float _3124 = (fma(_2255, _3002.z, fma(_2254, _3002.y, _3002.x * _2253)) + _3002.w) / _3065;
                                float _3125 = (fma(_2255, _3018.z, fma(_2254, _3018.y, _3018.x * _2253)) + _3018.w) / _3065;
                                float _3129 = 1.0 - dot(vec2(_3124, _3125), vec2(_3124, _3125));
                                float _4207 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3130 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                                float _3131 = _3130 * (((isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))) * _3107) / ((_3120 * 0.699999988079071044921875) + 1.0));
                                float _3143 = exp2(log2(1.0 / ((_3120 * 3.5) + 5.0)) * 0.25);
                                float _3144 = 1.0 - _531;
                                float _3151 = sqrt(1.0 - ((1.0 - (_3144 * _3144)) * (1.0 - (_3143 * _3143))));
                                float _3152 = _3151 * _3151;
                                float _3153 = _3152 * _3152;
                                float _3154 = _3100 - _2570;
                                float _3155 = _3101 - _2571;
                                float _3156 = _3102 - _2572;
                                float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                                float _3164 = dot(vec3(_455, _458, _461), vec3((-0.0) - _2570, (-0.0) - _2571, (-0.0) - _2572));
                                float _4218 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3167 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3168 = dot(vec3(_455, _458, _461), vec3(_3160 * _3154, _3160 * _3155, _3160 * _3156));
                                float _4229 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3171 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3175 = ((_3171 * _3171) * (_3153 + (-1.0))) + 1.0;
                                float _3176 = _3113 * _3152;
                                float _3177 = _3176 * _3176;
                                float _3183 = ((1.0 - _3177) * dot(vec3(_455, _458, _461), vec3(_3100, _3101, _3102))) + _3177;
                                float _4240 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3184 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3185 = 1.0 - _3152;
                                float _3195 = (0.5 / (((_3184 * ((_3167 * _3185) + _3152)) + 9.9999999392252902907785028219223e-09) + (((_3184 * _3185) + _3152) * _3167))) * _3184;
                                float _4251 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3205 = (_3130 * _3107) * (((_3153 * 3.1415927410125732421875) * (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) / ((_3175 * _3175) * ((_3120 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3131 * _2974.z;
                                frontier_phi_85_pred_1 = _3131 * _2974.y;
                                frontier_phi_85_pred_2 = _3131 * _2974.x;
                                frontier_phi_85_pred_3 = _3205 * _2986.z;
                                frontier_phi_85_pred_4 = _3205 * _2986.y;
                                frontier_phi_85_pred_5 = _3205 * _2986.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3214 = frontier_phi_85_pred;
                            _3213 = frontier_phi_85_pred_1;
                            _3212 = frontier_phi_85_pred_2;
                            _3211 = frontier_phi_85_pred_3;
                            _3210 = frontier_phi_85_pred_4;
                            _3209 = frontier_phi_85_pred_5;
                            _2916 = _3212 + _2929;
                            _2917 = _3213 + _2930;
                            _2918 = _3214 + _2931;
                            _2913 = _3209 + _2926;
                            _2914 = _3210 + _2927;
                            _2915 = _3211 + _2928;
                            if (_2933 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2933;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2918;
                        frontier_phi_79_pred_1 = _2917;
                        frontier_phi_79_pred_2 = _2916;
                        frontier_phi_79_pred_3 = _2915;
                        frontier_phi_79_pred_4 = _2914;
                        frontier_phi_79_pred_5 = _2913;
                    }
                    _2555 = frontier_phi_79_pred;
                    _2553 = frontier_phi_79_pred_1;
                    _2551 = frontier_phi_79_pred_2;
                    _2549 = frontier_phi_79_pred_3;
                    _2547 = frontier_phi_79_pred_4;
                    _2545 = frontier_phi_79_pred_5;
                    uint _2711 = _2710 + 1u;
                    if (_2711 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2704 = _2545;
                        _2705 = _2547;
                        _2706 = _2549;
                        _2707 = _2551;
                        _2708 = _2553;
                        _2709 = _2555;
                        _2710 = _2711;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2551;
                frontier_phi_60_61_ladder_1 = _2555;
                frontier_phi_60_61_ladder_2 = _2553;
                frontier_phi_60_61_ladder_3 = _2549;
                frontier_phi_60_61_ladder_4 = _2547;
                frontier_phi_60_61_ladder_5 = _2545;
            }
            else
            {
                frontier_phi_60_61_ladder = _2430;
                frontier_phi_60_61_ladder_1 = _2434;
                frontier_phi_60_61_ladder_2 = _2432;
                frontier_phi_60_61_ladder_3 = _2428;
                frontier_phi_60_61_ladder_4 = _2426;
                frontier_phi_60_61_ladder_5 = _2424;
            }
            _2544 = frontier_phi_60_61_ladder_5;
            _2546 = frontier_phi_60_61_ladder_4;
            _2548 = frontier_phi_60_61_ladder_3;
            _2550 = frontier_phi_60_61_ladder;
            _2552 = frontier_phi_60_61_ladder_2;
            _2554 = frontier_phi_60_61_ladder_1;
        }
        float _2559 = isnan(1.0) ? _515 : (isnan(_515) ? 1.0 : min(_515, 1.0));
        _2311 = (_2559 * _2550) + _1745;
        _2313 = (_2559 * _2552) + _1747;
        _2315 = (_2559 * _2554) + _1749;
        _2317 = ((_2544 * _500) * _2559) + _2093;
        _2319 = ((_2546 * _502) * _2559) + _2095;
        _2321 = ((_2548 * _503) * _2559) + _2097;
    }
    else
    {
        _2311 = _1745;
        _2313 = _1747;
        _2315 = _1749;
        _2317 = _2093;
        _2319 = _2095;
        _2321 = _2097;
    }
    uint _2327 = _476 + uint(cbMatDynParam._m0[0u].w);
    float _4267 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _4278 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _4289 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _2358 = (((isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2311 + ((isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))) * _515))) + ((_2317 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _1357)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _314.x) * cbInstanceData._m0[_2327].x);
    float _2360 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _314.y) * cbInstanceData._m0[_2327].y) + ((_2319 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _1357)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2313 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _515)));
    float _2362 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _314.z) * cbInstanceData._m0[_2327].z) + ((_2321 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _1357)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2315 + ((isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))) * _515)));
    float _2363 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2364 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2365 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    uint _2366 = _474 + 6u;
    float _2374 = _434 / cbSceneParam._m0[86u].x;
    float _2375 = _435 / cbSceneParam._m0[86u].y;
    vec4 _2389 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2374, _2375, (log2((isnan(cbSceneParam._m0[77u].w) ? _355 : (isnan(_355) ? cbSceneParam._m0[77u].w : min(_355, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2391 = _2389.x;
    float _2392 = _2389.y;
    float _2393 = _2389.z;
    float _2394 = _2389.w;
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    if (_355 > cbSceneParam._m0[78u].w)
    {
        float _2449 = isnan(_355) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _355 : min(cbSceneParam._m0[80u].w, _355));
        float _2450 = _2449 / _355;
        float _2461 = _2450 * _406;
        float _2462 = _407 * _2450;
        float _2463 = (-0.0) - _2462;
        float _2464 = _2450 * _408;
        float _2466 = (cbSceneParam._m0[77u].w * _2463) / _2449;
        float _2467 = _2466 + cbSceneParam._m0[79u].w;
        float _2468 = cbSceneParam._m0[79u].w - _2462;
        float _2474 = sqrt(((_2461 * _2461) + (_2462 * _2462)) + (_2464 * _2464));
        float _2477 = (1.0 - (cbSceneParam._m0[77u].w / _2449)) * _2474;
        float _2482 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2484 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2661;
        if (abs((_2463 - _2466) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2661 = ((((_2467 > 0.0) ? exp2(_2482 * _2467) : (2.0 - exp2(_2484 * _2467))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2477;
        }
        else
        {
            float _2605 = 1.0 / cbSceneParam._m0[80u].x;
            float _2606 = isnan(_2468) ? _2467 : (isnan(_2467) ? _2468 : max(_2467, _2468));
            float _2607 = isnan(_2468) ? _2467 : (isnan(_2467) ? _2468 : min(_2467, _2468));
            float _2616 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : min(_2606, 0.0));
            float _2617 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : min(_2607, 0.0));
            _2661 = ((abs(_2474 / _2463) * cbSceneParam._m0[80u].y) * ((((_2616 - _2617) * 2.0) - ((exp2(_2482 * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0)))) - exp2(_2482 * (isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0))))) * _2605)) - ((exp2(_2484 * _2616) - exp2(_2484 * _2617)) * _2605))) + (_2477 * cbSceneParam._m0[80u].z);
        }
        vec4 _2663 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2374, _2375, 1.0), 0.0);
        float _2672 = exp2((_2661 * (-1.44269502162933349609375)) * (1.0 - _2663.w));
        float _2673 = log2(_2672);
        float _2689 = log2(_2394);
        _2486 = (exp2(_2689 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].x)) * _2663.x) / cbSceneParam._m0[78u].x)) + _2391;
        _2488 = (exp2(_2689 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].y)) * _2663.y) / cbSceneParam._m0[78u].y)) + _2392;
        _2490 = (exp2(_2689 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].z)) * _2663.z) / cbSceneParam._m0[78u].z)) + _2393;
        _2492 = _2672 * _2394;
    }
    else
    {
        _2486 = _2391;
        _2488 = _2392;
        _2490 = _2393;
        _2492 = _2394;
    }
    bool _2699;
    vec4 _2502;
    vec4 _2524;
    float _2526;
    float _2530;
    float _2531;
    float _2532;
    float _2533;
    bool _2543;
    for (;;)
    {
        _2502 = cbMatDynParam._m0[0u];
        float _2504 = roundEven(_2502.y);
        bool _2505 = _2504 == 3.0;
        float _2506 = log2(_2492);
        float _2513 = exp2(_2506 * cbSceneParam._m0[78u].x) * _2363;
        float _2514 = exp2(_2506 * cbSceneParam._m0[78u].y) * _2364;
        float _2515 = exp2(_2506 * cbSceneParam._m0[78u].z) * _2365;
        float _2522 = _422 + (-0.5);
        _2524 = cbMtdParam._m0[1u];
        _2526 = _2524.y * _2522;
        float _2529 = (_2504 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2530 = _2529 * (_2505 ? _2513 : (_2513 + (cbSceneParam._m0[72u].w * _2486)));
        _2531 = _2529 * (_2505 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2488)));
        _2532 = _2529 * (_2505 ? _2515 : (_2515 + (cbSceneParam._m0[72u].w * _2490)));
        _2533 = _2522 * 0.999000012874603271484375;
        _2543 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2543)
        {
            if ((cbInstanceData._m0[_474 + 7u].x + _2533) < 0.5)
            {
                _2699 = true;
                break;
            }
        }
        uint _2640 = _476 + uint(_2502.w);
        if ((cbInstanceData._m0[_2640].w < 1.0) && ((cbInstanceData._m0[_2640].w + _2533) < 0.5))
        {
            _2699 = true;
            break;
        }
        if ((_2526 + 1.0) < _2524.x)
        {
            _2699 = true;
            break;
        }
        _2699 = false;
        break;
    }
    float _2904;
    if (_2699)
    {
        discard_state = true;
        _2904 = 0.0;
    }
    else
    {
        _2904 = cbInstanceData._m0[_2366].w;
    }
    SV_Target.x = _2530;
    SV_Target.y = _2531;
    SV_Target.z = _2532;
    SV_Target.w = _2904;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2366].w;
    discard_exit();
}


