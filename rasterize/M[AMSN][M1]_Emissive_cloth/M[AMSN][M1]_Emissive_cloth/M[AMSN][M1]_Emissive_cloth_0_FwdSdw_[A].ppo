#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _921;
float _3619;
float _3620;
float _3621;
float _3622;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _241 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _261 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _268 = cbMtdParam._m0[11u].x + _261.x;
    vec4 _280 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _280.z;
    float _288 = (_280.x * 2.0) + (-1.0);
    float _290 = (_280.y * 2.0) + (-1.0);
    float _291 = dot(vec2(_288, _290), vec2(_288, _290));
    float _3631 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _297 = sqrt(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))));
    vec4 _316 = texture(sampler2D(M_AMSN_M1_Emissive_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _323 = fma(_297, _219, fma(_290, _211 * TANGENT.x, (_197 * _190) * _288));
    float _326 = fma(_297, _220, fma(_290, _211 * TANGENT.y, (_197 * _191) * _288));
    float _329 = fma(_297, _221, fma(_290, _211 * TANGENT.z, (_197 * _192) * _288));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    float _334 = _333 * _323;
    float _335 = _333 * _326;
    float _336 = _333 * _329;
    float _3642 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _337 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3664 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3675 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3686 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _341 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _357 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _398 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _408 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _398);
    float _409 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _398);
    float _410 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _398);
    float _414 = inversesqrt(dot(vec3(_408, _409, _410), vec3(_408, _409, _410)));
    float _415 = _408 * _414;
    float _416 = _409 * _414;
    float _417 = _410 * _414;
    vec4 _422 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _424 = _422.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _600 = sqrt(((_408 * _408) + (_409 * _409)) + (_410 * _410));
        float _606 = (cbMatDynParam._m0[5u].x * _600) + cbMatDynParam._m0[5u].y;
        float _3697 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        float _607 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _611 = (cbMatDynParam._m0[5u].z * _600) + cbMatDynParam._m0[5u].w;
        float _3708 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) - _607)) + _607) < ((_424 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _436 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _437 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _457 = fma(_336, cbSceneParam._m0[5u].z, fma(_335, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _334));
    float _460 = fma(_336, cbSceneParam._m0[6u].z, fma(_335, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _334));
    float _463 = fma(_336, cbSceneParam._m0[7u].z, fma(_335, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _334));
    uint _476 = uint(roundEven(NORMAL.w)) * 13u;
    uint _478 = _476 + 9u;
    uint _479 = _478 + uint(cbMatDynParam._m0[0u].w);
    float _485 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) * cbInstanceData._m0[_479].x;
    float _486 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) * cbInstanceData._m0[_479].y;
    float _487 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * cbInstanceData._m0[_479].z;
    float _3719 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _488 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _491 = 1.0 - _341;
    float _492 = _488 * _491;
    float _493 = _489 * _491;
    float _494 = _490 * _491;
    float _499 = (_488 + (-0.039999999105930328369140625)) * _341;
    float _500 = (_489 + (-0.039999999105930328369140625)) * _341;
    float _501 = (_490 + (-0.039999999105930328369140625)) * _341;
    float _502 = _499 + 0.039999999105930328369140625;
    float _504 = _500 + 0.039999999105930328369140625;
    float _505 = _501 + 0.039999999105930328369140625;
    vec4 _514 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _436, cbSceneParam._m0[86u].y * _437));
    float _517 = _514.x * TEXCOORD.z;
    float _518 = dot(vec3(_334, _335, _336), vec3(_415, _416, _417));
    float _521 = _518 * 2.0;
    float _525 = (_521 * _334) - _415;
    float _526 = (_521 * _335) - _416;
    float _527 = (_521 * _336) - _417;
    float _531 = abs(dot(vec3(_415, _416, _417), vec3(_334, _335, _336)));
    float _3752 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _533 = sqrt(_337);
    float _546 = exp2((_533 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_533 * 3.0));
    float _552 = (1.0 - _546) * ((_533 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _553 = _546 * _533;
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _920;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _645 = fma(_589, cbModelParam._m0[26u].z, fma(_585, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _581));
        float _649 = fma(_589, cbModelParam._m0[27u].z, fma(_585, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _581));
        float _653 = fma(_589, cbModelParam._m0[28u].z, fma(_585, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _581));
        float _678 = _581 + _334;
        float _679 = _585 + _335;
        float _680 = _589 + _336;
        float _690 = fma(_680, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _678)) - _645;
        float _691 = fma(_680, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _678)) - _649;
        float _692 = fma(_680, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _678)) - _653;
        float _696 = inversesqrt(dot(vec3(_690, _691, _692), vec3(_690, _691, _692)));
        float _709 = ((_696 * _690) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_645 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _710 = ((_696 * _691) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_649 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _711 = ((_696 * _692) / cbModelParam._m0[34u].z) + ((((((_653 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        float _748 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_714.x + (-0.5));
        float _750 = _748 * (_714.y + (-0.5));
        float _751 = _748 * (_714.z + (-0.5));
        float _758 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_721.x + (-0.5));
        float _760 = _758 * (_721.y + (-0.5));
        float _761 = _758 * (_721.z + (-0.5));
        float _768 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_728.x + (-0.5));
        float _770 = _768 * (_728.y + (-0.5));
        float _771 = _768 * (_728.z + (-0.5));
        float _778 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_735.x + (-0.5));
        float _780 = _778 * (_735.y + (-0.5));
        float _781 = _778 * (_735.z + (-0.5));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = _749 * 0.5;
        float _786 = _759 * 0.5;
        float _787 = _769 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _802 = (dot(vec3(_334, _335, _336), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _812 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3800 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_814 + 1.0))) + _819) * _782;
        float _829 = _750 * 0.5;
        float _830 = _760 * 0.5;
        float _831 = _770 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(_334, _335, _336), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3833 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_856 + 1.0))) + _861) * _783;
        float _871 = _751 * 0.5;
        float _872 = _761 * 0.5;
        float _873 = _771 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _887 = (dot(vec3(_334, _335, _336), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _896 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3866 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_898 + 1.0))) + _903) * _784;
        _920 = _751;
        _922 = _750;
        _923 = _749;
        _924 = _761;
        _925 = _760;
        _926 = _759;
        _927 = _771;
        _928 = _770;
        _929 = _769;
        _930 = _784;
        _931 = _783;
        _932 = _782;
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
    }
    else
    {
        _920 = _921;
        _922 = _921;
        _923 = _921;
        _924 = _921;
        _925 = _921;
        _926 = _921;
        _927 = _921;
        _928 = _921;
        _929 = _921;
        _930 = _921;
        _931 = _921;
        _932 = _921;
        _933 = 0.0;
        _934 = 0.0;
        _935 = 0.0;
    }
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _964 = fma(_589, cbModelParam._m0[30u].z, fma(_585, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _581));
        float _968 = fma(_589, cbModelParam._m0[31u].z, fma(_585, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _581));
        float _972 = fma(_589, cbModelParam._m0[32u].z, fma(_585, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _581));
        float _995 = _581 + _334;
        float _996 = _585 + _335;
        float _997 = _589 + _336;
        float _1007 = fma(_997, cbModelParam._m0[30u].z, fma(_996, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _995)) - _964;
        float _1008 = fma(_997, cbModelParam._m0[31u].z, fma(_996, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _995)) - _968;
        float _1009 = fma(_997, cbModelParam._m0[32u].z, fma(_996, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _995)) - _972;
        float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
        float _1026 = ((_1013 * _1007) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_964 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1013 * _1008) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_968 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1013 * _1009) / cbModelParam._m0[35u].z) + ((((((_972 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        float _1063 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1030.x + (-0.5));
        float _1065 = _1063 * (_1030.y + (-0.5));
        float _1066 = _1063 * (_1030.z + (-0.5));
        float _1073 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1037.x + (-0.5));
        float _1075 = _1073 * (_1037.y + (-0.5));
        float _1076 = _1073 * (_1037.z + (-0.5));
        float _1083 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1044.x + (-0.5));
        float _1085 = _1083 * (_1044.y + (-0.5));
        float _1086 = _1083 * (_1044.z + (-0.5));
        float _1093 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1051.x + (-0.5));
        float _1095 = _1093 * (_1051.y + (-0.5));
        float _1096 = _1093 * (_1051.z + (-0.5));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = _1064 * 0.5;
        float _1101 = _1074 * 0.5;
        float _1102 = _1084 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_334, _335, _336), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3929 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1127 + 1.0))) + _1132) * _1097;
        float _1142 = _1065 * 0.5;
        float _1143 = _1075 * 0.5;
        float _1144 = _1085 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_334, _335, _336), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3962 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1169 + 1.0))) + _1174) * _1098;
        float _1184 = _1066 * 0.5;
        float _1185 = _1076 * 0.5;
        float _1186 = _1086 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_334, _335, _336), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3995 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1211 + 1.0))) + _1216) * _1099;
        _1233 = _1066;
        _1234 = _1065;
        _1235 = _1064;
        _1236 = _1076;
        _1237 = _1075;
        _1238 = _1074;
        _1239 = _1086;
        _1240 = _1085;
        _1241 = _1084;
        _1242 = _1099;
        _1243 = _1098;
        _1244 = _1097;
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1247 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
    }
    else
    {
        _1233 = _921;
        _1234 = _921;
        _1235 = _921;
        _1236 = _921;
        _1237 = _921;
        _1238 = _921;
        _1239 = _921;
        _1240 = _921;
        _1241 = _921;
        _1242 = _921;
        _1243 = _921;
        _1244 = _921;
        _1245 = 0.0;
        _1246 = 0.0;
        _1247 = 0.0;
    }
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _933)) + _933;
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _934)) + _934;
    float _1259 = (cbModelParam._m0[1u].x * (_1247 - _935)) + _935;
    float _1280 = fma(_1259, cbSceneParam._m0[89u].z, fma(_1258, cbSceneParam._m0[89u].y, _1257 * cbSceneParam._m0[89u].x));
    float _1283 = fma(_1259, cbSceneParam._m0[90u].z, fma(_1258, cbSceneParam._m0[90u].y, _1257 * cbSceneParam._m0[90u].x));
    float _1286 = fma(_1259, cbSceneParam._m0[91u].z, fma(_1258, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1257));
    float _1301 = _525 * 0.5;
    float _1302 = _526 * 0.5;
    float _1303 = _527 * 0.5;
    float _1304 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1235, _1238, _1241, _1244));
    float _1307 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1310 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1344;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1317 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_920, _924, _927, _930));
        float _1321 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_922, _925, _928, _931));
        float _1325 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_923, _926, _929, _932));
        float _1332 = dot(vec4(cbModelParam._m0[39u]), vec4(_1301, _1302, _1303, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1332) ? 0.0 : (isnan(0.0) ? _1332 : max(0.0, _1332))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1355;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1346 = dot(vec4(cbModelParam._m0[40u]), vec4(_1301, _1302, _1303, 1.0));
        _1355 = dot(vec3(isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1346) ? 0.0 : (isnan(0.0) ? _1346 : max(0.0, _1346))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1355 = 1.0;
    }
    float _1359 = (_1355 * cbModelParam._m0[1u].x) + (_1344 * (1.0 - cbModelParam._m0[1u].x));
    float _1369 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _337);
    float _1370 = isnan(_1369) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1369 : min(cbModelParam._m0[25u].z, _1369));
    float _1452;
    float _1454;
    float _1456;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1419 = fma(_589, cbModelParam._m0[13u].z, fma(_585, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _581)) + cbModelParam._m0[13u].w;
        float _1423 = fma(_589, cbModelParam._m0[14u].z, fma(_585, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _581)) + cbModelParam._m0[14u].w;
        float _1427 = fma(_589, cbModelParam._m0[15u].z, fma(_585, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _581)) + cbModelParam._m0[15u].w;
        float _1430 = fma(_527, cbModelParam._m0[13u].z, fma(_526, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _525));
        float _1433 = fma(_527, cbModelParam._m0[14u].z, fma(_526, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _525));
        float _1436 = fma(_527, cbModelParam._m0[15u].z, fma(_526, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _525));
        float _1464;
        if (_1430 > 0.0)
        {
            _1464 = abs((1.0 - _1419) / _1430);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1419 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1464 = frontier_phi_19_17_ladder;
        }
        float _1639;
        if (_1433 > 0.0)
        {
            _1639 = abs((1.0 - _1423) / _1433);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1423 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1639 = frontier_phi_28_24_ladder;
        }
        float _1935;
        if (_1436 > 0.0)
        {
            _1935 = abs((1.0 - _1427) / _1436);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1427 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1935 = frontier_phi_40_35_ladder;
        }
        float _1937 = isnan(_1639) ? _1464 : (isnan(_1464) ? _1639 : min(_1464, _1639));
        float _1938 = isnan(_1935) ? _1937 : (isnan(_1937) ? _1935 : min(_1937, _1935));
        float _1942 = (_1938 * _1430) + _1419;
        float _1943 = (_1938 * _1433) + _1423;
        float _1944 = (_1938 * _1436) + _1427;
        float _1945 = _1938 * 9.9999997473787516355514526367188e-05;
        float _1947 = (-1.0) - _1945;
        float _1949 = _1945 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1944 > _1949) || ((_1944 < _1947) || ((_1943 > _1949) || ((_1943 < _1947) || ((_1942 < _1947) || (_1942 > _1949))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2089 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1944, cbModelParam._m0[9u].z, fma(_1943, cbModelParam._m0[9u].y, _1942 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1944, cbModelParam._m0[10u].z, fma(_1943, cbModelParam._m0[10u].y, _1942 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1944, cbModelParam._m0[11u].z, fma(_1943, cbModelParam._m0[11u].y, _1942 * cbModelParam._m0[11u].x))), _1370);
            frontier_phi_18_40_ladder = _2089.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2089.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2089.x * cbModelParam._m0[1u].y;
        }
        _1452 = frontier_phi_18_40_ladder_2;
        _1454 = frontier_phi_18_40_ladder_1;
        _1456 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1440 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_525, _526, _527), _1370);
        _1452 = _1440.x * cbModelParam._m0[1u].y;
        _1454 = _1440.y * cbModelParam._m0[1u].y;
        _1456 = _1440.z * cbModelParam._m0[1u].y;
    }
    float _1460 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _337);
    float _1461 = isnan(_1460) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1460 : min(cbModelParam._m0[25u].w, _1460));
    float _1554;
    float _1556;
    float _1558;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1518 = fma(_589, cbModelParam._m0[21u].z, fma(_585, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _581)) + cbModelParam._m0[21u].w;
        float _1522 = fma(_589, cbModelParam._m0[22u].z, fma(_585, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _581)) + cbModelParam._m0[22u].w;
        float _1526 = fma(_589, cbModelParam._m0[23u].z, fma(_585, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _581)) + cbModelParam._m0[23u].w;
        float _1529 = fma(_527, cbModelParam._m0[21u].z, fma(_526, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _525));
        float _1532 = fma(_527, cbModelParam._m0[22u].z, fma(_526, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _525));
        float _1535 = fma(_527, cbModelParam._m0[23u].z, fma(_526, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _525));
        float _1644;
        if (_1529 > 0.0)
        {
            _1644 = abs((1.0 - _1518) / _1529);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1518 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1644 = frontier_phi_30_26_ladder;
        }
        float _1962;
        if (_1532 > 0.0)
        {
            _1962 = abs((1.0 - _1522) / _1532);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1522 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1962 = frontier_phi_42_37_ladder;
        }
        float _2300;
        if (_1535 > 0.0)
        {
            _2300 = abs((1.0 - _1526) / _1535);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1526 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2300 = frontier_phi_52_49_ladder;
        }
        float _2302 = isnan(_1962) ? _1644 : (isnan(_1644) ? _1962 : min(_1644, _1962));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1529) + _1518;
        float _2308 = (_2303 * _1532) + _1522;
        float _2309 = (_2303 * _1535) + _1526;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2310;
        float _2313 = _2310 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2309 > _2313) || ((_2309 < _2311) || ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 < _2311) || (_2307 > _2313))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2309, cbModelParam._m0[17u].z, fma(_2308, cbModelParam._m0[17u].y, _2307 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2309, cbModelParam._m0[18u].z, fma(_2308, cbModelParam._m0[18u].y, _2307 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2309, cbModelParam._m0[19u].z, fma(_2308, cbModelParam._m0[19u].y, _2307 * cbModelParam._m0[19u].x))), _1461);
            frontier_phi_27_52_ladder = _2431.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2431.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2431.x * cbModelParam._m0[1u].z;
        }
        _1554 = frontier_phi_27_52_ladder_2;
        _1556 = frontier_phi_27_52_ladder_1;
        _1558 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1538 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_525, _526, _527), _1461);
        _1554 = _1538.x * cbModelParam._m0[1u].z;
        _1556 = _1538.y * cbModelParam._m0[1u].z;
        _1558 = _1538.z * cbModelParam._m0[1u].z;
    }
    float _1571 = (((_552 * _502) + _553) * _517) * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1573 = (((_552 * _504) + _553) * _517) * ((cbModelParam._m0[1u].w * (_1556 - _1454)) + _1454);
    float _1575 = (((_552 * _505) + _553) * _517) * ((cbModelParam._m0[1u].w * (_1558 - _1456)) + _1456);
    float _1578 = fma(_1575, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1571 * cbSceneParam._m0[89u].x));
    float _1581 = fma(_1575, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1571 * cbSceneParam._m0[90u].x));
    float _1584 = fma(_1575, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, _1571 * cbSceneParam._m0[91u].x));
    float _1618 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1622 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1626 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1630 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1631 = _1618 / _1630;
    float _1632 = _1622 / _1630;
    float _1633 = _1626 / _1630;
    float _1780;
    float _1781;
    float _1782;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1660 = ((uint(_1633 > cbSceneParam._m0[59u].y) + uint(_1633 > cbSceneParam._m0[59u].x)) + uint(_1633 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1661 = _1660 + 43u;
        uint _1669 = _1660 + 44u;
        uint _1677 = _1660 + 45u;
        uint _1685 = _1660 + 46u;
        float _1696 = fma(_1630, cbSceneParam._m0[_1661].w, fma(_1626, cbSceneParam._m0[_1661].z, fma(_1622, cbSceneParam._m0[_1661].y, _1618 * cbSceneParam._m0[_1661].x)));
        float _1700 = fma(_1630, cbSceneParam._m0[_1669].w, fma(_1626, cbSceneParam._m0[_1669].z, fma(_1622, cbSceneParam._m0[_1669].y, _1618 * cbSceneParam._m0[_1669].x)));
        float _1708 = fma(_1630, cbSceneParam._m0[_1685].w, fma(_1626, cbSceneParam._m0[_1685].z, fma(_1622, cbSceneParam._m0[_1685].y, _1618 * cbSceneParam._m0[_1685].x)));
        float _1713 = cbSceneParam._m0[33u].z * _1708;
        float _1715 = cbSceneParam._m0[33u].w * _1708;
        float _1718 = fma(_1630, cbSceneParam._m0[_1677].w, fma(_1626, cbSceneParam._m0[_1677].z, fma(_1622, cbSceneParam._m0[_1677].y, _1618 * cbSceneParam._m0[_1677].x))) / _1708;
        float _1766 = (cbSceneParam._m0[33u].x - sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633))) * cbSceneParam._m0[33u].y;
        float _4121 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1773 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1713 + _1696) / _1708, (_1715 + _1700) / _1708), _1718), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1715 + _1696) / _1708, (_1700 - _1713) / _1708), _1718), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1696 - _1713) / _1708, (_1700 - _1715) / _1708), _1718), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1696 - _1715) / _1708, (_1713 + _1700) / _1708), _1718), 0.0)).x), vec4(0.25)));
        _1780 = 1.0 - (_1773 * cbSceneParam._m0[34u].x);
        _1781 = 1.0 - (_1773 * cbSceneParam._m0[34u].y);
        _1782 = 1.0 - (_1773 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1780 = 1.0;
        _1781 = 1.0;
        _1782 = 1.0;
    }
    float _1846;
    float _1848;
    float _1850;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1834 = fma(_1630, cbSceneParam._m0[63u].w, fma(_1626, cbSceneParam._m0[63u].z, fma(_1622, cbSceneParam._m0[63u].y, _1618 * cbSceneParam._m0[63u].x)));
        float _1835 = fma(_1630, cbSceneParam._m0[60u].w, fma(_1626, cbSceneParam._m0[60u].z, fma(_1622, cbSceneParam._m0[60u].y, _1618 * cbSceneParam._m0[60u].x))) / _1834;
        float _1836 = fma(_1630, cbSceneParam._m0[61u].w, fma(_1626, cbSceneParam._m0[61u].z, fma(_1622, cbSceneParam._m0[61u].y, _1618 * cbSceneParam._m0[61u].x))) / _1834;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1835 >= cbSceneParam._m0[64u].x) && (_1836 >= cbSceneParam._m0[64u].y)) && (_1835 <= cbSceneParam._m0[64u].z)) && (_1836 <= cbSceneParam._m0[64u].w))
        {
            float _1975 = fma(_1630, cbSceneParam._m0[62u].w, fma(_1626, cbSceneParam._m0[62u].z, fma(_1622, cbSceneParam._m0[62u].y, _1618 * cbSceneParam._m0[62u].x))) / _1834;
            float _1979 = isnan(cbSceneParam._m0[41u].w) ? _1975 : (isnan(_1975) ? cbSceneParam._m0[41u].w : max(_1975, cbSceneParam._m0[41u].w));
            float _2022 = (cbSceneParam._m0[33u].x - sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633))) * cbSceneParam._m0[33u].y;
            float _4137 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
            float _2029 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1835, cbSceneParam._m0[33u].w + _1836), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1835, _1836 - cbSceneParam._m0[33u].z), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1835 - cbSceneParam._m0[33u].z, _1836 - cbSceneParam._m0[33u].w), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1835 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1836), _1979), 0.0)).x), vec4(0.25)));
            float _2033 = 1.0 - (_2029 * cbSceneParam._m0[34u].x);
            float _2034 = 1.0 - (_2029 * cbSceneParam._m0[34u].y);
            float _2035 = 1.0 - (_2029 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2034) ? _1781 : (isnan(_1781) ? _2034 : min(_1781, _2034));
            frontier_phi_39_38_ladder_1 = isnan(_2033) ? _1780 : (isnan(_1780) ? _2033 : min(_1780, _2033));
            frontier_phi_39_38_ladder_2 = isnan(_2035) ? _1782 : (isnan(_1782) ? _2035 : min(_1782, _2035));
        }
        else
        {
            frontier_phi_39_38_ladder = _1781;
            frontier_phi_39_38_ladder_1 = _1780;
            frontier_phi_39_38_ladder_2 = _1782;
        }
        _1846 = frontier_phi_39_38_ladder_1;
        _1848 = frontier_phi_39_38_ladder;
        _1850 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1846 = _1780;
        _1848 = _1781;
        _1850 = _1782;
    }
    uvec4 _1855 = floatBitsToUint(cbInstanceData._m0[_476 + 5u]);
    uint _1857 = _1855.x * 14u;
    uint _1858 = _1857 + 13u;
    float _1865 = _517 + (-1.0);
    float _1870 = (cbLight._m0[_1858].x * _1865) + 1.0;
    float _1871 = (cbLight._m0[_1858].y * _1865) + 1.0;
    float _1872 = (cbLight._m0[_1858].z * _1865) + 1.0;
    float _1873 = (cbLight._m0[_1858].w * _1865) + 1.0;
    uint _1874 = _1857 + 5u;
    float _1880 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
    uint _1884 = _1857 + 4u;
    float _1894 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1898 = _1857 | 1u;
    float _1909 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_334, _335, _336));
    float _1912 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_334, _335, _336));
    float _4173 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _4184 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1917 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * 0.3183098733425140380859375;
    float _1919 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * 0.3183098733425140380859375;
    float _1926 = ((cbLight._m0[_1874].x * _1880) * _1919) + (((cbLight._m0[_1884].x * _1846) * _1894) * _1917);
    float _1927 = ((_1880 * cbLight._m0[_1874].y) * _1919) + (((cbLight._m0[_1884].y * _1848) * _1894) * _1917);
    float _1928 = ((_1880 * cbLight._m0[_1874].z) * _1919) + (((cbLight._m0[_1884].z * _1850) * _1894) * _1917);
    uvec4 _1932 = floatBitsToUint(cbLight._m0[_1857 + 12u]);
    bool _1934 = _1932.x == 0u;
    float _2036;
    float _2038;
    float _2040;
    if (_1934)
    {
        _2036 = _1926;
        _2038 = _1927;
        _2040 = _1928;
    }
    else
    {
        uint _2044 = _1857 + 6u;
        float _2060 = (dot(vec3(cbLight._m0[_1857 + 2u].xyz), vec3(_334, _335, _336)) * 0.5) + 0.5;
        float _2061 = _2060 * _2060;
        float _4195 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2062 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2063 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2036 = (((cbLight._m0[_2044].x * 0.3183098733425140380859375) * _2062) * _2063) + _1926;
        _2038 = (((cbLight._m0[_2044].y * 0.3183098733425140380859375) * _2062) * _2063) + _1927;
        _2040 = (((cbLight._m0[_2044].z * 0.3183098733425140380859375) * _2062) * _2063) + _1928;
    }
    bool _2043 = _1932.y == 0u;
    float _2098;
    float _2100;
    float _2102;
    if (_2043)
    {
        _2098 = _2036;
        _2100 = _2038;
        _2102 = _2040;
    }
    else
    {
        uint _2271 = _1857 + 7u;
        float _2287 = (dot(vec3(cbLight._m0[_1857 + 3u].xyz), vec3(_334, _335, _336)) * 0.5) + 0.5;
        float _2288 = _2287 * _2287;
        float _4211 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2289 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2290 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2098 = (((cbLight._m0[_2271].x * 0.3183098733425140380859375) * _2289) * _2290) + _2036;
        _2100 = (((cbLight._m0[_2271].y * 0.3183098733425140380859375) * _2289) * _2290) + _2038;
        _2102 = (((cbLight._m0[_2271].z * 0.3183098733425140380859375) * _2289) * _2290) + _2040;
    }
    uint _2105 = _1857 + 8u;
    float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _337) * 0.949999988079071044921875);
    float _2119 = _2118 * _2118;
    float _2120 = cbLight._m0[_1857].x + _415;
    float _2121 = cbLight._m0[_1857].y + _416;
    float _2122 = cbLight._m0[_1857].z + _417;
    float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
    float _2127 = _2126 * _2120;
    float _2128 = _2126 * _2121;
    float _2129 = _2126 * _2122;
    float _2130 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_1857].xyz));
    float _4227 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _2134 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2135 = dot(vec3(_334, _335, _336), vec3(_2127, _2128, _2129));
    float _4249 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _2139 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_2127, _2128, _2129));
    float _4260 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2143 = _2119 * _2119;
    float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
    float _2155 = exp2(log2(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * 5.0);
    float _2156 = 0.959999978542327880859375 - _499;
    float _2158 = 0.959999978542327880859375 - _500;
    float _2159 = 0.959999978542327880859375 - _501;
    float _2166 = 1.0 - _2119;
    float _2177 = (0.5 / (((_2134 * ((_2133 * _2166) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2166) + _2119) * _2133))) * _2133;
    float _4271 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2179 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
    uint _2193 = _1857 + 9u;
    float _2204 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _337) * 0.949999988079071044921875);
    float _2205 = _2204 * _2204;
    float _2206 = cbLight._m0[_1898].x + _415;
    float _2207 = cbLight._m0[_1898].y + _416;
    float _2208 = cbLight._m0[_1898].z + _417;
    float _2212 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
    float _2213 = _2212 * _2206;
    float _2214 = _2212 * _2207;
    float _2215 = _2212 * _2208;
    float _2216 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_1898].xyz));
    float _4282 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2220 = dot(vec3(_334, _335, _336), vec3(_2213, _2214, _2215));
    float _4293 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2224 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_2213, _2214, _2215));
    float _4304 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2228 = _2205 * _2205;
    float _2232 = ((_2223 * _2223) * (_2228 + (-1.0))) + 1.0;
    float _2239 = exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0);
    float _2246 = 1.0 - _2205;
    float _2256 = (0.5 / (((_2134 * ((_2219 * _2246) + _2205)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2246) + _2205) * _2219))) * _2219;
    float _4315 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2258 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2228 / ((_2232 * _2232) * 3.141590118408203125));
    float _2268 = (((((_2239 * _2156) + _502) * cbLight._m0[_2193].x) * _2258) * _1880) + ((((cbLight._m0[_2105].x * _1846) * ((_2155 * _2156) + _502)) * _2179) * _1894);
    float _2269 = (((((_2239 * _2158) + _504) * cbLight._m0[_2193].y) * _2258) * _1880) + ((((cbLight._m0[_2105].y * _1848) * ((_2155 * _2158) + _504)) * _2179) * _1894);
    float _2270 = (((((_2239 * _2159) + _505) * cbLight._m0[_2193].z) * _2258) * _1880) + ((((cbLight._m0[_2105].z * _1850) * ((_2155 * _2159) + _505)) * _2179) * _1894);
    float _2326;
    float _2328;
    float _2330;
    if (_1934)
    {
        _2326 = _2268;
        _2328 = _2269;
        _2330 = _2270;
    }
    else
    {
        uint _2332 = _1857 + 2u;
        uint _2336 = _1857 + 10u;
        float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _337) * 0.949999988079071044921875);
        float _2351 = _2350 * _2350;
        float _2352 = cbLight._m0[_2332].x + _415;
        float _2353 = cbLight._m0[_2332].y + _416;
        float _2354 = cbLight._m0[_2332].z + _417;
        float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
        float _2359 = _2358 * _2352;
        float _2360 = _2358 * _2353;
        float _2361 = _2358 * _2354;
        float _2362 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_2332].xyz));
        float _4326 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2366 = dot(vec3(_334, _335, _336), vec3(_2359, _2360, _2361));
        float _4337 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2370 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2359, _2360, _2361));
        float _4348 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2374 = _2351 * _2351;
        float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
        float _2385 = exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0);
        float _2392 = 1.0 - _2351;
        float _2402 = (0.5 / (((_2134 * ((_2365 * _2392) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2392) + _2351) * _2365))) * _2365;
        float _4359 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2404 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
        float _2405 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2326 = (((((_2385 * _2156) + _502) * cbLight._m0[_2336].x) * _2404) * _2405) + _2268;
        _2328 = (((((_2385 * _2158) + _504) * cbLight._m0[_2336].y) * _2404) * _2405) + _2269;
        _2330 = (((((_2385 * _2159) + _505) * cbLight._m0[_2336].z) * _2404) * _2405) + _2270;
    }
    float _2436;
    float _2438;
    float _2440;
    if (_2043)
    {
        _2436 = _2326;
        _2438 = _2328;
        _2440 = _2330;
    }
    else
    {
        uint _2447 = _1857 + 3u;
        uint _2451 = _1857 + 11u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _337) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _415;
        float _2468 = cbLight._m0[_2447].y + _416;
        float _2469 = cbLight._m0[_2447].z + _417;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_2447].xyz));
        float _4375 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2481 = dot(vec3(_334, _335, _336), vec3(_2474, _2475, _2476));
        float _4386 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4397 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0);
        float _2507 = 1.0 - _2466;
        float _2517 = (0.5 / (((_2134 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2507) + _2466) * _2480))) * _2480;
        float _4408 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2519 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2520 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2436 = (((((_2500 * _2156) + _502) * cbLight._m0[_2451].x) * _2519) * _2520) + _2326;
        _2438 = (((((_2500 * _2158) + _504) * cbLight._m0[_2451].y) * _2519) * _2520) + _2328;
        _2440 = (((((_2500 * _2159) + _505) * cbLight._m0[_2451].z) * _2519) * _2520) + _2330;
    }
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    if (_1855.y == 0u)
    {
        uvec4 _2541 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2542 = _2541.x;
        uint _2553 = uint((float(_2541.y) * floor(float(uint(cbSceneParam._m0[85u].y * _437) / _2542))) + floor(float(uint(cbSceneParam._m0[85u].x * _436) / _2542)));
        float _2563 = (log2(_1633 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2564 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        uint _2567 = uint(isnan(14.0) ? _2564 : (isnan(_2564) ? 14.0 : min(_2564, 14.0)));
        uvec4 _2572 = texelFetch(g_lightClusterGridBuffer, int(((_2567 << 2u) + (_2553 << 6u)) >> 2u));
        uint _2573 = _2572.x;
        uint _2574 = _2541.z;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        if (((((1u << ((_2574 >> 4u) & 15u)) + 4294967295u) & _2573) == 0u) || ((_2574 & 240u) == 0u))
        {
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
        }
        else
        {
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            uint _2835 = 0u;
            uint _2844;
            bool _2845;
            for (;;)
            {
                _2844 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2835 << 2u)) >> 2u)).x;
                _2845 = _2844 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2845)
                {
                    frontier_phi_73_pred = _2834;
                    frontier_phi_73_pred_1 = _2833;
                    frontier_phi_73_pred_2 = _2832;
                    frontier_phi_73_pred_3 = _2831;
                    frontier_phi_73_pred_4 = _2830;
                    frontier_phi_73_pred_5 = _2829;
                }
                else
                {
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    uint _2980;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2831;
                    _2977 = _2832;
                    _2978 = _2833;
                    _2979 = _2834;
                    _2980 = _2844;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    for (;;)
                    {
                        uint _2984 = uint(findLSB(_2980)) + (_2835 << 5u);
                        uint _2981 = (_2980 + 4294967295u) & _2980;
                        uint _2986 = _2984 * 48u;
                        vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 3u)).x));
                        uint _3006 = (_2984 * 48u) + 4u;
                        vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 3u)).x));
                        uint _3025 = (_2984 * 48u) + 8u;
                        vec3 _3036 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x));
                        float _3040 = _3000.x - _1631;
                        float _3041 = _3000.y - _1632;
                        float _3042 = _3000.z - _1633;
                        float _3043 = dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042));
                        float _3046 = inversesqrt(_3043);
                        float _3047 = _3046 * _3040;
                        float _3048 = _3046 * _3041;
                        float _3049 = _3046 * _3042;
                        float _3050 = dot(vec3(_457, _460, _463), vec3(_3047, _3048, _3049));
                        float _3055 = 1.0 - (_3043 * _3000.w);
                        float _4434 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3057 = sqrt(_3043) * _3019.w;
                        float _3060 = 1.39999997615814208984375 / (_3057 + 1.39999997615814208984375);
                        float _3061 = _3060 * _3060;
                        float _3064 = ((1.0 - _3061) * _3050) + _3061;
                        float _3067 = _3057 * _3057;
                        float _3071 = ((isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))) * _3056) / ((_3067 * 0.699999988079071044921875) + 1.0);
                        float _3075 = (-0.0) - _1631;
                        float _3076 = (-0.0) - _1632;
                        float _3077 = (-0.0) - _1633;
                        float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                        float _3082 = _3081 * _3075;
                        float _3083 = _3081 * _3076;
                        float _3084 = _3081 * _3077;
                        float _3091 = exp2(log2(1.0 / ((_3067 * 3.5) + 5.0)) * 0.25);
                        float _3092 = 1.0 - _533;
                        float _3099 = sqrt(1.0 - ((1.0 - (_3092 * _3092)) * (1.0 - (_3091 * _3091))));
                        float _3100 = _3099 * _3099;
                        float _3101 = _3100 * _3100;
                        float _3102 = _3082 + _3047;
                        float _3103 = _3083 + _3048;
                        float _3104 = _3084 + _3049;
                        float _3108 = inversesqrt(dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104)));
                        float _3112 = dot(vec3(_457, _460, _463), vec3(_3082, _3083, _3084));
                        float _4450 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3115 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3116 = dot(vec3(_457, _460, _463), vec3(_3108 * _3102, _3108 * _3103, _3108 * _3104));
                        float _4461 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3119 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3123 = ((_3119 * _3119) * (_3101 + (-1.0))) + 1.0;
                        float _3124 = _3060 * _3100;
                        float _3125 = _3124 * _3124;
                        float _3128 = ((1.0 - _3125) * _3050) + _3125;
                        float _4472 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3129 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3130 = 1.0 - _3100;
                        float _3140 = (0.5 / (((_3129 * ((_3115 * _3130) + _3100)) + 9.9999999392252902907785028219223e-09) + (((_3129 * _3130) + _3100) * _3115))) * _3129;
                        float _4483 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3151 = (((_3101 * 3.1415927410125732421875) * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) / ((_3123 * _3123) * ((_3067 * 2.1991131305694580078125) + 3.141590118408203125))) * _3056;
                        _2904 = (_3071 * _3019.x) + _2977;
                        _2905 = (_3071 * _3019.y) + _2978;
                        _2906 = (_3071 * _3019.z) + _2979;
                        _2901 = (_3151 * _3036.x) + _2974;
                        _2902 = (_3151 * _3036.y) + _2975;
                        _2903 = (_3151 * _3036.z) + _2976;
                        if (_2981 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2903;
                            _2977 = _2904;
                            _2978 = _2905;
                            _2979 = _2906;
                            _2980 = _2981;
                        }
                    }
                    frontier_phi_73_pred = _2906;
                    frontier_phi_73_pred_1 = _2905;
                    frontier_phi_73_pred_2 = _2904;
                    frontier_phi_73_pred_3 = _2903;
                    frontier_phi_73_pred_4 = _2902;
                    frontier_phi_73_pred_5 = _2901;
                }
                _2688 = frontier_phi_73_pred;
                _2686 = frontier_phi_73_pred_1;
                _2684 = frontier_phi_73_pred_2;
                _2682 = frontier_phi_73_pred_3;
                _2680 = frontier_phi_73_pred_4;
                _2678 = frontier_phi_73_pred_5;
                uint _2836 = _2835 + 1u;
                if (_2836 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2829 = _2678;
                    _2830 = _2680;
                    _2831 = _2682;
                    _2832 = _2684;
                    _2833 = _2686;
                    _2834 = _2688;
                    _2835 = _2836;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
        }
        uvec4 _2691 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2692 = _2691.z;
        uint _2694 = (_2692 >> 8u) & 15u;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        if (((4294967295u << _2694) & _2573) == 0u)
        {
            _2797 = _2677;
            _2799 = _2679;
            _2801 = _2681;
            _2803 = _2683;
            _2805 = _2685;
            _2807 = _2687;
        }
        else
        {
            float _2822 = inversesqrt(dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633)));
            float _2823 = _2822 * _1631;
            float _2824 = _2822 * _1632;
            float _2825 = _2822 * _1633;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2694 < ((_2692 >> 12u) & 15u))
            {
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2806;
                float _2808;
                float _2957 = _2677;
                float _2958 = _2679;
                float _2959 = _2681;
                float _2960 = _2683;
                float _2961 = _2685;
                float _2962 = _2687;
                uint _2963 = _2694;
                uint _2972;
                bool _2973;
                for (;;)
                {
                    _2972 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2963 << 2u)) >> 2u)).x;
                    _2973 = _2972 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2973)
                    {
                        frontier_phi_84_pred = _2961;
                        frontier_phi_84_pred_1 = _2960;
                        frontier_phi_84_pred_2 = _2959;
                        frontier_phi_84_pred_3 = _2958;
                        frontier_phi_84_pred_4 = _2957;
                        frontier_phi_84_pred_5 = _2962;
                    }
                    else
                    {
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3178 = _2957;
                        float _3179 = _2958;
                        float _3180 = _2959;
                        float _3181 = _2960;
                        float _3182 = _2961;
                        float _3183 = _2962;
                        uint _3184 = _2972;
                        uint _3185;
                        vec4 _3210;
                        float _3211;
                        vec4 _3226;
                        vec3 _3238;
                        vec4 _3254;
                        vec4 _3270;
                        float _3317;
                        bool _3318;
                        for (;;)
                        {
                            uint _3195 = ((_2963 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3184));
                            _3185 = (_3184 + 4294967295u) & _3184;
                            uint _3197 = _3195 * 40u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            _3211 = _3210.w;
                            uint _3213 = (_3195 * 40u) + 4u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3228 = (_3195 * 40u) + 8u;
                            _3238 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x));
                            uint _3241 = (_3195 * 40u) + 16u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3257 = (_3195 * 40u) + 20u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3273 = (_3195 * 40u) + 24u;
                            vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3292 = (_3195 * 40u) + 28u;
                            vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3317 = fma(_1633, _3305.z, fma(_1632, _3305.y, _3305.x * _1631)) + _3305.w;
                            _3318 = !((fma(_1633, _3286.z, fma(_1632, _3286.y, _3286.x * _1631)) + _3286.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3318)
                            {
                                float _3345 = _3210.x - _1631;
                                float _3346 = _3210.y - _1632;
                                float _3347 = _3210.z - _1633;
                                float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                                float _3351 = inversesqrt(_3348);
                                float _3352 = _3351 * _3345;
                                float _3353 = _3351 * _3346;
                                float _3354 = _3351 * _3347;
                                float _3358 = 1.0 - (_3348 / (_3211 * _3211));
                                float _4494 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3363 = sqrt(_3348) * _3226.w;
                                float _3365 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                                float _3366 = _3365 * _3365;
                                float _3369 = ((1.0 - _3366) * dot(vec3(_3352, _3353, _3354), vec3(_457, _460, _463))) + _3366;
                                float _3372 = _3363 * _3363;
                                float _3376 = (fma(_1633, _3254.z, fma(_1632, _3254.y, _3254.x * _1631)) + _3254.w) / _3317;
                                float _3377 = (fma(_1633, _3270.z, fma(_1632, _3270.y, _3270.x * _1631)) + _3270.w) / _3317;
                                float _3381 = 1.0 - dot(vec2(_3376, _3377), vec2(_3376, _3377));
                                float _4510 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3383 = _3382 * (((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3359) / ((_3372 * 0.699999988079071044921875) + 1.0));
                                float _3395 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                                float _3396 = 1.0 - _533;
                                float _3403 = sqrt(1.0 - ((1.0 - (_3396 * _3396)) * (1.0 - (_3395 * _3395))));
                                float _3404 = _3403 * _3403;
                                float _3405 = _3404 * _3404;
                                float _3406 = _3352 - _2823;
                                float _3407 = _3353 - _2824;
                                float _3408 = _3354 - _2825;
                                float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                                float _3416 = dot(vec3(_457, _460, _463), vec3((-0.0) - _2823, (-0.0) - _2824, (-0.0) - _2825));
                                float _4521 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3420 = dot(vec3(_457, _460, _463), vec3(_3412 * _3406, _3412 * _3407, _3412 * _3408));
                                float _4532 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3423 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3427 = ((_3423 * _3423) * (_3405 + (-1.0))) + 1.0;
                                float _3428 = _3365 * _3404;
                                float _3429 = _3428 * _3428;
                                float _3435 = ((1.0 - _3429) * dot(vec3(_457, _460, _463), vec3(_3352, _3353, _3354))) + _3429;
                                float _4543 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3437 = 1.0 - _3404;
                                float _3447 = (0.5 / (((_3436 * ((_3419 * _3437) + _3404)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3404) * _3419))) * _3436;
                                float _4554 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3457 = (_3382 * _3359) * (((_3405 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3427 * _3427) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3383 * _3226.y;
                                frontier_phi_90_pred_1 = _3383 * _3226.x;
                                frontier_phi_90_pred_2 = _3457 * _3238.z;
                                frontier_phi_90_pred_3 = _3457 * _3238.y;
                                frontier_phi_90_pred_4 = _3457 * _3238.x;
                                frontier_phi_90_pred_5 = _3383 * _3226.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3465 = frontier_phi_90_pred;
                            _3464 = frontier_phi_90_pred_1;
                            _3463 = frontier_phi_90_pred_2;
                            _3462 = frontier_phi_90_pred_3;
                            _3461 = frontier_phi_90_pred_4;
                            _3466 = frontier_phi_90_pred_5;
                            _3168 = _3464 + _3181;
                            _3169 = _3465 + _3182;
                            _3170 = _3466 + _3183;
                            _3165 = _3461 + _3178;
                            _3166 = _3462 + _3179;
                            _3167 = _3463 + _3180;
                            if (_3185 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3185;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3169;
                        frontier_phi_84_pred_1 = _3168;
                        frontier_phi_84_pred_2 = _3167;
                        frontier_phi_84_pred_3 = _3166;
                        frontier_phi_84_pred_4 = _3165;
                        frontier_phi_84_pred_5 = _3170;
                    }
                    _2806 = frontier_phi_84_pred;
                    _2804 = frontier_phi_84_pred_1;
                    _2802 = frontier_phi_84_pred_2;
                    _2800 = frontier_phi_84_pred_3;
                    _2798 = frontier_phi_84_pred_4;
                    _2808 = frontier_phi_84_pred_5;
                    uint _2964 = _2963 + 1u;
                    if (_2964 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2957 = _2798;
                        _2958 = _2800;
                        _2959 = _2802;
                        _2960 = _2804;
                        _2961 = _2806;
                        _2962 = _2808;
                        _2963 = _2964;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2808;
                frontier_phi_65_66_ladder_1 = _2804;
                frontier_phi_65_66_ladder_2 = _2806;
                frontier_phi_65_66_ladder_3 = _2800;
                frontier_phi_65_66_ladder_4 = _2798;
                frontier_phi_65_66_ladder_5 = _2802;
            }
            else
            {
                frontier_phi_65_66_ladder = _2687;
                frontier_phi_65_66_ladder_1 = _2683;
                frontier_phi_65_66_ladder_2 = _2685;
                frontier_phi_65_66_ladder_3 = _2679;
                frontier_phi_65_66_ladder_4 = _2677;
                frontier_phi_65_66_ladder_5 = _2681;
            }
            _2797 = frontier_phi_65_66_ladder_4;
            _2799 = frontier_phi_65_66_ladder_3;
            _2801 = frontier_phi_65_66_ladder_5;
            _2803 = frontier_phi_65_66_ladder_1;
            _2805 = frontier_phi_65_66_ladder_2;
            _2807 = frontier_phi_65_66_ladder;
        }
        float _2812 = isnan(1.0) ? _517 : (isnan(_517) ? 1.0 : min(_517, 1.0));
        _2585 = (_2812 * _2803) + _2098;
        _2587 = (_2812 * _2805) + _2100;
        _2589 = (_2812 * _2807) + _2102;
        _2591 = ((_2797 * _502) * _2812) + _2436;
        _2593 = ((_2799 * _504) * _2812) + _2438;
        _2595 = ((_2801 * _505) * _2812) + _2440;
    }
    else
    {
        _2585 = _2098;
        _2587 = _2100;
        _2589 = _2102;
        _2591 = _2436;
        _2593 = _2438;
        _2595 = _2440;
    }
    uint _2601 = _478 + uint(cbMatDynParam._m0[0u].w);
    float _4570 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4581 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4592 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _2632 = (((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2585 + ((isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))) * _517))) + ((_2591 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1359)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _316.x) * cbInstanceData._m0[_2601].x);
    float _2634 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _316.y) * cbInstanceData._m0[_2601].y) + ((_2593 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1359)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2587 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _517)));
    float _2636 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _316.z) * cbInstanceData._m0[_2601].z) + ((_2595 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _1359)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2589 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _517)));
    float _2637 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2638 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2639 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    uint _2640 = _476 + 6u;
    float _2648 = _436 / cbSceneParam._m0[86u].x;
    float _2649 = _437 / cbSceneParam._m0[86u].y;
    vec4 _2663 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2648, _2649, (log2((isnan(cbSceneParam._m0[77u].w) ? _357 : (isnan(_357) ? cbSceneParam._m0[77u].w : min(_357, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2665 = _2663.x;
    float _2666 = _2663.y;
    float _2667 = _2663.z;
    float _2668 = _2663.w;
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    if (_357 > cbSceneParam._m0[78u].w)
    {
        float _2702 = isnan(_357) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _357 : min(cbSceneParam._m0[80u].w, _357));
        float _2703 = _2702 / _357;
        float _2714 = _2703 * _408;
        float _2715 = _409 * _2703;
        float _2716 = (-0.0) - _2715;
        float _2717 = _2703 * _410;
        float _2719 = (cbSceneParam._m0[77u].w * _2716) / _2702;
        float _2720 = _2719 + cbSceneParam._m0[79u].w;
        float _2721 = cbSceneParam._m0[79u].w - _2715;
        float _2727 = sqrt(((_2714 * _2714) + (_2715 * _2715)) + (_2717 * _2717));
        float _2730 = (1.0 - (cbSceneParam._m0[77u].w / _2702)) * _2727;
        float _2735 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2737 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2914;
        if (abs((_2716 - _2719) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2914 = ((((_2720 > 0.0) ? exp2(_2735 * _2720) : (2.0 - exp2(_2737 * _2720))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2730;
        }
        else
        {
            float _2858 = 1.0 / cbSceneParam._m0[80u].x;
            float _2859 = isnan(_2721) ? _2720 : (isnan(_2720) ? _2721 : max(_2720, _2721));
            float _2860 = isnan(_2721) ? _2720 : (isnan(_2720) ? _2721 : min(_2720, _2721));
            float _2869 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : min(_2859, 0.0));
            float _2870 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : min(_2860, 0.0));
            _2914 = ((abs(_2727 / _2716) * cbSceneParam._m0[80u].y) * ((((_2869 - _2870) * 2.0) - ((exp2(_2735 * (isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0)))) - exp2(_2735 * (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0))))) * _2858)) - ((exp2(_2737 * _2869) - exp2(_2737 * _2870)) * _2858))) + (_2730 * cbSceneParam._m0[80u].z);
        }
        vec4 _2916 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2648, _2649, 1.0), 0.0);
        float _2925 = exp2((_2914 * (-1.44269502162933349609375)) * (1.0 - _2916.w));
        float _2926 = log2(_2925);
        float _2942 = log2(_2668);
        _2739 = (exp2(_2942 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].x)) * _2916.x) / cbSceneParam._m0[78u].x)) + _2665;
        _2741 = (exp2(_2942 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].y)) * _2916.y) / cbSceneParam._m0[78u].y)) + _2666;
        _2743 = (exp2(_2942 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].z)) * _2916.z) / cbSceneParam._m0[78u].z)) + _2667;
        _2745 = _2925 * _2668;
    }
    else
    {
        _2739 = _2665;
        _2741 = _2666;
        _2743 = _2667;
        _2745 = _2668;
    }
    bool _2952;
    vec4 _2755;
    vec4 _2777;
    float _2779;
    float _2783;
    float _2784;
    float _2785;
    float _2786;
    bool _2796;
    for (;;)
    {
        _2755 = cbMatDynParam._m0[0u];
        float _2757 = roundEven(_2755.y);
        bool _2758 = _2757 == 3.0;
        float _2759 = log2(_2745);
        float _2766 = exp2(_2759 * cbSceneParam._m0[78u].x) * _2637;
        float _2767 = exp2(_2759 * cbSceneParam._m0[78u].y) * _2638;
        float _2768 = exp2(_2759 * cbSceneParam._m0[78u].z) * _2639;
        float _2775 = _424 + (-0.5);
        _2777 = cbMtdParam._m0[1u];
        _2779 = _2777.y * _2775;
        float _2782 = (_2757 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2783 = _2782 * (_2758 ? _2766 : (_2766 + (cbSceneParam._m0[72u].w * _2739)));
        _2784 = _2782 * (_2758 ? _2767 : (_2767 + (cbSceneParam._m0[72u].w * _2741)));
        _2785 = _2782 * (_2758 ? _2768 : (_2768 + (cbSceneParam._m0[72u].w * _2743)));
        _2786 = _2775 * 0.999000012874603271484375;
        _2796 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2796)
        {
            if ((cbInstanceData._m0[_476 + 7u].x + _2786) < 0.5)
            {
                _2952 = true;
                break;
            }
        }
        uint _2893 = _478 + uint(_2755.w);
        if ((cbInstanceData._m0[_2893].w < 1.0) && ((cbInstanceData._m0[_2893].w + _2786) < 0.5))
        {
            _2952 = true;
            break;
        }
        if ((_2779 + 1.0) < _2777.x)
        {
            _2952 = true;
            break;
        }
        _2952 = false;
        break;
    }
    float _3156;
    if (_2952)
    {
        discard_state = true;
        _3156 = 0.0;
    }
    else
    {
        _3156 = cbInstanceData._m0[_2640].w;
    }
    SV_Target.x = _2783;
    SV_Target.y = _2784;
    SV_Target.z = _2785;
    SV_Target.w = _3156;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2640].w;
    discard_exit();
}


