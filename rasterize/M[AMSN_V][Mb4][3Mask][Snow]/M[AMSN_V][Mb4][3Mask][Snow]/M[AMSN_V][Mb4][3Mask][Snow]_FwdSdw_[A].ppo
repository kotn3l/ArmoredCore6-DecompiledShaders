#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1225;
float _3873;
float _3874;
float _3875;
float _3876;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    float _242;
    float _243;
    float _244;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
    }
    else
    {
        _242 = _228;
        _243 = _229;
        _244 = _230;
    }
    vec4 _264 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _270 = _264.x * cbMtdParam._m0[10u].x;
    float _271 = _264.y * cbMtdParam._m0[10u].y;
    float _272 = _264.z * cbMtdParam._m0[10u].z;
    vec4 _291 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    vec4 _310 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _341 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x;
    float _352 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((((1.0 - TEXCOORD_3.x) - _310.x) * 2.0) - _341)) + 1.0;
    float _3885 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _353 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _360 = (_353 * ((_291.x * cbMtdParam._m0[11u].x) - _270)) + _270;
    float _361 = (_353 * ((_291.y * cbMtdParam._m0[11u].y) - _271)) + _271;
    float _362 = (_353 * ((_291.z * cbMtdParam._m0[11u].z) - _272)) + _272;
    vec4 _380 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _393 = ((((((1.0 - TEXCOORD_3.y) - _310.y) * 2.0) - _341) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3896 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _401 = (((_380.x * cbMtdParam._m0[12u].x) - _360) * _394) + _360;
    float _402 = (_394 * ((_380.y * cbMtdParam._m0[12u].y) - _361)) + _361;
    float _403 = (_394 * ((_380.z * cbMtdParam._m0[12u].z) - _362)) + _362;
    vec4 _421 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _434 = ((((((1.0 - TEXCOORD_3.z) - _310.z) * 2.0) - _341) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3907 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _442 = (((_421.x * cbMtdParam._m0[13u].x) - _401) * _435) + _401;
    float _443 = (_435 * ((_421.y * cbMtdParam._m0[13u].y) - _402)) + _402;
    float _444 = (_435 * ((_421.z * cbMtdParam._m0[13u].z) - _403)) + _403;
    vec4 _462 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    vec4 _484 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _486 = _484.x;
    float _487 = _484.y;
    float _488 = _484.z;
    vec4 _500 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _511 = ((_500.x - _486) * _353) + _486;
    float _512 = ((_500.y - _487) * _353) + _487;
    float _513 = ((_500.z - _488) * _353) + _488;
    vec4 _526 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _537 = ((_526.x - _511) * _394) + _511;
    float _538 = ((_526.y - _512) * _394) + _512;
    float _539 = ((_526.z - _513) * _394) + _513;
    vec4 _552 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _565 = ((_552.z - _539) * _435) + _539;
    float _568 = ((((_552.x - _537) * _435) + _537) * 2.0) + (-1.0);
    float _570 = ((((_552.y - _538) * _435) + _538) * 2.0) + (-1.0);
    float _571 = dot(vec2(_568, _570), vec2(_568, _570));
    float _3918 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _576 = sqrt(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))));
    float _579 = fma(_576, _242, fma(_570, _235, _568 * _221));
    float _582 = fma(_576, _243, fma(_570, _236, _568 * _222));
    float _585 = fma(_576, _244, fma(_570, _237, _568 * _223));
    float _594 = exp2(log2(inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585))) * _582) * cbMtdParam._m0[15u].y) * cbMtdParam._m0[14u].y;
    float _3929 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _598 = 3.0 - (_596 * 2.0);
    float _603 = _596 * _596;
    float _610 = ((_603 * ((_462.x * cbMtdParam._m0[9u].x) - _442)) * _598) + _442;
    float _611 = ((_603 * ((_462.y * cbMtdParam._m0[9u].y) - _443)) * _598) + _443;
    float _612 = ((_603 * ((_462.z * cbMtdParam._m0[9u].z) - _444)) * _598) + _444;
    vec4 _624 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _630 = (_624.x * 2.0) + (-1.0);
    float _631 = (_624.y * 2.0) + (-1.0);
    float _632 = dot(vec2(_630, _631), vec2(_630, _631));
    float _3951 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _647 = ((_603 * (_630 - _568)) * _598) + _568;
    float _648 = ((_603 * (_631 - _570)) * _598) + _570;
    float _649 = ((_603 * (sqrt(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) - _576)) * _598) + _576;
    float _652 = fma(_649, _242, fma(_648, _235, _647 * _221));
    float _655 = fma(_649, _243, fma(_648, _236, _647 * _222));
    float _658 = fma(_649, _244, fma(_648, _237, _647 * _223));
    float _662 = inversesqrt(dot(vec3(_652, _655, _658), vec3(_652, _655, _658)));
    float _663 = _662 * _652;
    float _664 = _662 * _655;
    float _665 = _662 * _658;
    float _3962 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _666 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3984 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3995 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _685 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _735 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _725);
    float _736 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _725);
    float _737 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _725);
    float _741 = inversesqrt(dot(vec3(_735, _736, _737), vec3(_735, _736, _737)));
    float _742 = _735 * _741;
    float _743 = _736 * _741;
    float _744 = _737 * _741;
    vec4 _749 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _751 = _749.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _904 = sqrt(((_735 * _735) + (_736 * _736)) + (_737 * _737));
        float _910 = (cbMatDynParam._m0[5u].x * _904) + cbMatDynParam._m0[5u].y;
        float _4006 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _915 = (cbMatDynParam._m0[5u].z * _904) + cbMatDynParam._m0[5u].w;
        float _4017 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) - _911)) + _911) < ((_751 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _762 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _763 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _781 = fma(_665, cbSceneParam._m0[5u].z, fma(_664, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _663));
    float _784 = fma(_665, cbSceneParam._m0[6u].z, fma(_664, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _663));
    float _787 = fma(_665, cbSceneParam._m0[7u].z, fma(_664, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _663));
    uint _800 = uint(roundEven(NORMAL.w)) * 13u;
    uint _801 = _800 + 9u;
    uint _802 = _801 + uint(cbMatDynParam._m0[0u].w);
    float _808 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * cbInstanceData._m0[_802].x;
    float _809 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * cbInstanceData._m0[_802].y;
    float _810 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * cbInstanceData._m0[_802].z;
    float _4028 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    vec4 _822 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _762, cbSceneParam._m0[86u].y * _763));
    float _825 = _822.x * TEXCOORD_3.w;
    float _826 = dot(vec3(_663, _664, _665), vec3(_742, _743, _744));
    float _829 = _826 * 2.0;
    float _833 = (_829 * _663) - _742;
    float _834 = (_829 * _664) - _743;
    float _835 = (_829 * _665) - _744;
    float _839 = abs(dot(vec3(_742, _743, _744), vec3(_663, _664, _665)));
    float _4061 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _841 = sqrt(_666);
    float _853 = exp2((_841 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_841 * 3.0));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1224;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _949 = fma(_893, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885));
        float _953 = fma(_893, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885));
        float _957 = fma(_893, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885));
        float _982 = _885 + _663;
        float _983 = _889 + _664;
        float _984 = _893 + _665;
        float _994 = fma(_984, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _982)) - _949;
        float _995 = fma(_984, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _982)) - _953;
        float _996 = fma(_984, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _982)) - _957;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_949 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_953 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[34u].z) + ((((((_957 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1052 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1018.x + (-0.5));
        float _1054 = _1052 * (_1018.y + (-0.5));
        float _1055 = _1052 * (_1018.z + (-0.5));
        float _1062 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1025.x + (-0.5));
        float _1064 = _1062 * (_1025.y + (-0.5));
        float _1065 = _1062 * (_1025.z + (-0.5));
        float _1072 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1032.x + (-0.5));
        float _1074 = _1072 * (_1032.y + (-0.5));
        float _1075 = _1072 * (_1032.z + (-0.5));
        float _1082 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1039.x + (-0.5));
        float _1084 = _1082 * (_1039.y + (-0.5));
        float _1085 = _1082 * (_1039.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1106 = (dot(vec3(_663, _664, _665), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1116 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _4109 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1118 + 1.0))) + _1123) * _1086;
        float _1133 = _1054 * 0.5;
        float _1134 = _1064 * 0.5;
        float _1135 = _1074 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_663, _664, _665), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _4142 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1160 + 1.0))) + _1165) * _1087;
        float _1175 = _1055 * 0.5;
        float _1176 = _1065 * 0.5;
        float _1177 = _1075 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_663, _664, _665), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _4175 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1202 + 1.0))) + _1207) * _1088;
        _1224 = _1055;
        _1226 = _1054;
        _1227 = _1053;
        _1228 = _1065;
        _1229 = _1064;
        _1230 = _1063;
        _1231 = _1075;
        _1232 = _1074;
        _1233 = _1073;
        _1234 = _1088;
        _1235 = _1087;
        _1236 = _1086;
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _1225;
        _1226 = _1225;
        _1227 = _1225;
        _1228 = _1225;
        _1229 = _1225;
        _1230 = _1225;
        _1231 = _1225;
        _1232 = _1225;
        _1233 = _1225;
        _1234 = _1225;
        _1235 = _1225;
        _1236 = _1225;
        _1237 = 0.0;
        _1238 = 0.0;
        _1239 = 0.0;
    }
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1268 = fma(_893, cbModelParam._m0[30u].z, fma(_889, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _885));
        float _1272 = fma(_893, cbModelParam._m0[31u].z, fma(_889, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _885));
        float _1276 = fma(_893, cbModelParam._m0[32u].z, fma(_889, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _885));
        float _1299 = _885 + _663;
        float _1300 = _889 + _664;
        float _1301 = _893 + _665;
        float _1311 = fma(_1301, cbModelParam._m0[30u].z, fma(_1300, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1299)) - _1268;
        float _1312 = fma(_1301, cbModelParam._m0[31u].z, fma(_1300, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1299)) - _1272;
        float _1313 = fma(_1301, cbModelParam._m0[32u].z, fma(_1300, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1299)) - _1276;
        float _1317 = inversesqrt(dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313)));
        float _1330 = ((_1317 * _1311) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1268 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1331 = ((_1317 * _1312) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1272 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1332 = ((_1317 * _1313) / cbModelParam._m0[35u].z) + ((((((_1276 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        float _1367 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1334.x + (-0.5));
        float _1369 = _1367 * (_1334.y + (-0.5));
        float _1370 = _1367 * (_1334.z + (-0.5));
        float _1377 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1341.x + (-0.5));
        float _1379 = _1377 * (_1341.y + (-0.5));
        float _1380 = _1377 * (_1341.z + (-0.5));
        float _1387 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1348.x + (-0.5));
        float _1389 = _1387 * (_1348.y + (-0.5));
        float _1390 = _1387 * (_1348.z + (-0.5));
        float _1397 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1355.x + (-0.5));
        float _1399 = _1397 * (_1355.y + (-0.5));
        float _1400 = _1397 * (_1355.z + (-0.5));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = _1368 * 0.5;
        float _1405 = _1378 * 0.5;
        float _1406 = _1388 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_663, _664, _665), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4238 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1431 + 1.0))) + _1436) * _1401;
        float _1446 = _1369 * 0.5;
        float _1447 = _1379 * 0.5;
        float _1448 = _1389 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_663, _664, _665), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4271 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1473 + 1.0))) + _1478) * _1402;
        float _1488 = _1370 * 0.5;
        float _1489 = _1380 * 0.5;
        float _1490 = _1390 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_663, _664, _665), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4304 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1515 + 1.0))) + _1520) * _1403;
        _1537 = _1370;
        _1538 = _1369;
        _1539 = _1368;
        _1540 = _1380;
        _1541 = _1379;
        _1542 = _1378;
        _1543 = _1390;
        _1544 = _1389;
        _1545 = _1388;
        _1546 = _1403;
        _1547 = _1402;
        _1548 = _1401;
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
    }
    else
    {
        _1537 = _1225;
        _1538 = _1225;
        _1539 = _1225;
        _1540 = _1225;
        _1541 = _1225;
        _1542 = _1225;
        _1543 = _1225;
        _1544 = _1225;
        _1545 = _1225;
        _1546 = _1225;
        _1547 = _1225;
        _1548 = _1225;
        _1549 = 0.0;
        _1550 = 0.0;
        _1551 = 0.0;
    }
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1237)) + _1237;
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1238)) + _1238;
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1239)) + _1239;
    float _1584 = fma(_1563, cbSceneParam._m0[89u].z, fma(_1562, cbSceneParam._m0[89u].y, _1561 * cbSceneParam._m0[89u].x));
    float _1587 = fma(_1563, cbSceneParam._m0[90u].z, fma(_1562, cbSceneParam._m0[90u].y, _1561 * cbSceneParam._m0[90u].x));
    float _1590 = fma(_1563, cbSceneParam._m0[91u].z, fma(_1562, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1561));
    float _1605 = _833 * 0.5;
    float _1606 = _834 * 0.5;
    float _1607 = _835 * 0.5;
    float _1608 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1611 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1614 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1648;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1621 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1224, _1228, _1231, _1234));
        float _1625 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1226, _1229, _1232, _1235));
        float _1629 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1227, _1230, _1233, _1236));
        float _1636 = dot(vec4(cbModelParam._m0[39u]), vec4(_1605, _1606, _1607, 1.0));
        _1648 = dot(vec3(isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1636) ? 0.0 : (isnan(0.0) ? _1636 : max(0.0, _1636))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1648 = 1.0;
    }
    float _1659;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1650 = dot(vec4(cbModelParam._m0[40u]), vec4(_1605, _1606, _1607, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1663 = (_1659 * cbModelParam._m0[1u].x) + (_1648 * (1.0 - cbModelParam._m0[1u].x));
    float _1673 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _666);
    float _1674 = isnan(_1673) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1673 : min(cbModelParam._m0[25u].z, _1673));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1721 = fma(_893, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885)) + cbModelParam._m0[13u].w;
        float _1725 = fma(_893, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885)) + cbModelParam._m0[14u].w;
        float _1729 = fma(_893, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885)) + cbModelParam._m0[15u].w;
        float _1732 = fma(_835, cbModelParam._m0[13u].z, fma(_834, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _833));
        float _1735 = fma(_835, cbModelParam._m0[14u].z, fma(_834, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _833));
        float _1738 = fma(_835, cbModelParam._m0[15u].z, fma(_834, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _833));
        float _1766;
        if (_1732 > 0.0)
        {
            _1766 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1766 = frontier_phi_19_17_ladder;
        }
        float _1939;
        if (_1735 > 0.0)
        {
            _1939 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1939 = frontier_phi_28_24_ladder;
        }
        float _2234;
        if (_1738 > 0.0)
        {
            _2234 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2234 = frontier_phi_40_35_ladder;
        }
        float _2236 = isnan(_1939) ? _1766 : (isnan(_1766) ? _1939 : min(_1766, _1939));
        float _2237 = isnan(_2234) ? _2236 : (isnan(_2236) ? _2234 : min(_2236, _2234));
        float _2241 = (_2237 * _1732) + _1721;
        float _2242 = (_2237 * _1735) + _1725;
        float _2243 = (_2237 * _1738) + _1729;
        float _2244 = _2237 * 9.9999997473787516355514526367188e-05;
        float _2246 = (-1.0) - _2244;
        float _2248 = _2244 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2243 > _2248) || ((_2243 < _2246) || ((_2242 > _2248) || ((_2242 < _2246) || ((_2241 < _2246) || (_2241 > _2248))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2388 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2243, cbModelParam._m0[9u].z, fma(_2242, cbModelParam._m0[9u].y, _2241 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2243, cbModelParam._m0[10u].z, fma(_2242, cbModelParam._m0[10u].y, _2241 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2243, cbModelParam._m0[11u].z, fma(_2242, cbModelParam._m0[11u].y, _2241 * cbModelParam._m0[11u].x))), _1674);
            frontier_phi_18_40_ladder = _2388.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2388.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2388.x * cbModelParam._m0[1u].y;
        }
        _1754 = frontier_phi_18_40_ladder_2;
        _1756 = frontier_phi_18_40_ladder_1;
        _1758 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_833, _834, _835), _1674);
        _1754 = _1742.x * cbModelParam._m0[1u].y;
        _1756 = _1742.y * cbModelParam._m0[1u].y;
        _1758 = _1742.z * cbModelParam._m0[1u].y;
    }
    float _1762 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _666);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1762 : min(cbModelParam._m0[25u].w, _1762));
    float _1856;
    float _1858;
    float _1860;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1820 = fma(_893, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885)) + cbModelParam._m0[21u].w;
        float _1824 = fma(_893, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885)) + cbModelParam._m0[22u].w;
        float _1828 = fma(_893, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885)) + cbModelParam._m0[23u].w;
        float _1831 = fma(_835, cbModelParam._m0[21u].z, fma(_834, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _833));
        float _1834 = fma(_835, cbModelParam._m0[22u].z, fma(_834, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _833));
        float _1837 = fma(_835, cbModelParam._m0[23u].z, fma(_834, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _833));
        float _1944;
        if (_1831 > 0.0)
        {
            _1944 = abs((1.0 - _1820) / _1831);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1820 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1944 = frontier_phi_30_26_ladder;
        }
        float _2261;
        if (_1834 > 0.0)
        {
            _2261 = abs((1.0 - _1824) / _1834);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1824 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2261 = frontier_phi_42_37_ladder;
        }
        float _2588;
        if (_1837 > 0.0)
        {
            _2588 = abs((1.0 - _1828) / _1837);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1828 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2588 = frontier_phi_52_49_ladder;
        }
        float _2590 = isnan(_2261) ? _1944 : (isnan(_1944) ? _2261 : min(_1944, _2261));
        float _2591 = isnan(_2588) ? _2590 : (isnan(_2590) ? _2588 : min(_2590, _2588));
        float _2595 = (_2591 * _1831) + _1820;
        float _2596 = (_2591 * _1834) + _1824;
        float _2597 = (_2591 * _1837) + _1828;
        float _2598 = _2591 * 9.9999997473787516355514526367188e-05;
        float _2599 = (-1.0) - _2598;
        float _2601 = _2598 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2597 > _2601) || ((_2597 < _2599) || ((_2596 > _2601) || ((_2596 < _2599) || ((_2595 < _2599) || (_2595 > _2601))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2597, cbModelParam._m0[17u].z, fma(_2596, cbModelParam._m0[17u].y, _2595 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2597, cbModelParam._m0[18u].z, fma(_2596, cbModelParam._m0[18u].y, _2595 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2597, cbModelParam._m0[19u].z, fma(_2596, cbModelParam._m0[19u].y, _2595 * cbModelParam._m0[19u].x))), _1763);
            frontier_phi_27_52_ladder = _2715.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2715.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2715.x * cbModelParam._m0[1u].z;
        }
        _1856 = frontier_phi_27_52_ladder_2;
        _1858 = frontier_phi_27_52_ladder_1;
        _1860 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_833, _834, _835), _1763);
        _1856 = _1840.x * cbModelParam._m0[1u].z;
        _1858 = _1840.y * cbModelParam._m0[1u].z;
        _1860 = _1840.z * cbModelParam._m0[1u].z;
    }
    float _1872 = ((((1.0 - _853) * ((_841 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_853 * _841)) * _825;
    float _1873 = _1872 * ((cbModelParam._m0[1u].w * (_1856 - _1754)) + _1754);
    float _1874 = _1872 * ((cbModelParam._m0[1u].w * (_1858 - _1756)) + _1756);
    float _1875 = _1872 * ((cbModelParam._m0[1u].w * (_1860 - _1758)) + _1758);
    float _1878 = fma(_1875, cbSceneParam._m0[89u].z, fma(_1874, cbSceneParam._m0[89u].y, _1873 * cbSceneParam._m0[89u].x));
    float _1881 = fma(_1875, cbSceneParam._m0[90u].z, fma(_1874, cbSceneParam._m0[90u].y, _1873 * cbSceneParam._m0[90u].x));
    float _1884 = fma(_1875, cbSceneParam._m0[91u].z, fma(_1874, cbSceneParam._m0[91u].y, _1873 * cbSceneParam._m0[91u].x));
    float _1918 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1922 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1926 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1930 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1931 = _1918 / _1930;
    float _1932 = _1922 / _1930;
    float _1933 = _1926 / _1930;
    float _2080;
    float _2081;
    float _2082;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1960 = ((uint(_1933 > cbSceneParam._m0[59u].y) + uint(_1933 > cbSceneParam._m0[59u].x)) + uint(_1933 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1961 = _1960 + 43u;
        uint _1969 = _1960 + 44u;
        uint _1977 = _1960 + 45u;
        uint _1985 = _1960 + 46u;
        float _1996 = fma(_1930, cbSceneParam._m0[_1961].w, fma(_1926, cbSceneParam._m0[_1961].z, fma(_1922, cbSceneParam._m0[_1961].y, _1918 * cbSceneParam._m0[_1961].x)));
        float _2000 = fma(_1930, cbSceneParam._m0[_1969].w, fma(_1926, cbSceneParam._m0[_1969].z, fma(_1922, cbSceneParam._m0[_1969].y, _1918 * cbSceneParam._m0[_1969].x)));
        float _2008 = fma(_1930, cbSceneParam._m0[_1985].w, fma(_1926, cbSceneParam._m0[_1985].z, fma(_1922, cbSceneParam._m0[_1985].y, _1918 * cbSceneParam._m0[_1985].x)));
        float _2013 = cbSceneParam._m0[33u].z * _2008;
        float _2015 = cbSceneParam._m0[33u].w * _2008;
        float _2018 = fma(_1930, cbSceneParam._m0[_1977].w, fma(_1926, cbSceneParam._m0[_1977].z, fma(_1922, cbSceneParam._m0[_1977].y, _1918 * cbSceneParam._m0[_1977].x))) / _2008;
        float _2066 = (cbSceneParam._m0[33u].x - sqrt(((_1932 * _1932) + (_1931 * _1931)) + (_1933 * _1933))) * cbSceneParam._m0[33u].y;
        float _4430 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2073 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 + _1996) / _2008, (_2015 + _2000) / _2008), _2018), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2015 + _1996) / _2008, (_2000 - _2013) / _2008), _2018), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1996 - _2013) / _2008, (_2000 - _2015) / _2008), _2018), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1996 - _2015) / _2008, (_2013 + _2000) / _2008), _2018), 0.0)).x), vec4(0.25)));
        _2080 = 1.0 - (_2073 * cbSceneParam._m0[34u].x);
        _2081 = 1.0 - (_2073 * cbSceneParam._m0[34u].y);
        _2082 = 1.0 - (_2073 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2080 = 1.0;
        _2081 = 1.0;
        _2082 = 1.0;
    }
    float _2146;
    float _2148;
    float _2150;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2134 = fma(_1930, cbSceneParam._m0[63u].w, fma(_1926, cbSceneParam._m0[63u].z, fma(_1922, cbSceneParam._m0[63u].y, _1918 * cbSceneParam._m0[63u].x)));
        float _2135 = fma(_1930, cbSceneParam._m0[60u].w, fma(_1926, cbSceneParam._m0[60u].z, fma(_1922, cbSceneParam._m0[60u].y, _1918 * cbSceneParam._m0[60u].x))) / _2134;
        float _2136 = fma(_1930, cbSceneParam._m0[61u].w, fma(_1926, cbSceneParam._m0[61u].z, fma(_1922, cbSceneParam._m0[61u].y, _1918 * cbSceneParam._m0[61u].x))) / _2134;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2135 >= cbSceneParam._m0[64u].x) && (_2136 >= cbSceneParam._m0[64u].y)) && (_2135 <= cbSceneParam._m0[64u].z)) && (_2136 <= cbSceneParam._m0[64u].w))
        {
            float _2274 = fma(_1930, cbSceneParam._m0[62u].w, fma(_1926, cbSceneParam._m0[62u].z, fma(_1922, cbSceneParam._m0[62u].y, _1918 * cbSceneParam._m0[62u].x))) / _2134;
            float _2278 = isnan(cbSceneParam._m0[41u].w) ? _2274 : (isnan(_2274) ? cbSceneParam._m0[41u].w : max(_2274, cbSceneParam._m0[41u].w));
            float _2321 = (cbSceneParam._m0[33u].x - sqrt(((_1932 * _1932) + (_1931 * _1931)) + (_1933 * _1933))) * cbSceneParam._m0[33u].y;
            float _4446 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
            float _2328 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2135, cbSceneParam._m0[33u].w + _2136), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2135, _2136 - cbSceneParam._m0[33u].z), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2135 - cbSceneParam._m0[33u].z, _2136 - cbSceneParam._m0[33u].w), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2135 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2136), _2278), 0.0)).x), vec4(0.25)));
            float _2332 = 1.0 - (_2328 * cbSceneParam._m0[34u].x);
            float _2333 = 1.0 - (_2328 * cbSceneParam._m0[34u].y);
            float _2334 = 1.0 - (_2328 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2333) ? _2081 : (isnan(_2081) ? _2333 : min(_2081, _2333));
            frontier_phi_39_38_ladder_1 = isnan(_2332) ? _2080 : (isnan(_2080) ? _2332 : min(_2080, _2332));
            frontier_phi_39_38_ladder_2 = isnan(_2334) ? _2082 : (isnan(_2082) ? _2334 : min(_2082, _2334));
        }
        else
        {
            frontier_phi_39_38_ladder = _2081;
            frontier_phi_39_38_ladder_1 = _2080;
            frontier_phi_39_38_ladder_2 = _2082;
        }
        _2146 = frontier_phi_39_38_ladder_1;
        _2148 = frontier_phi_39_38_ladder;
        _2150 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2146 = _2080;
        _2148 = _2081;
        _2150 = _2082;
    }
    uvec4 _2155 = floatBitsToUint(cbInstanceData._m0[_800 + 5u]);
    uint _2157 = _2155.x * 14u;
    uint _2158 = _2157 + 13u;
    float _2165 = _825 + (-1.0);
    float _2170 = (cbLight._m0[_2158].x * _2165) + 1.0;
    float _2171 = (cbLight._m0[_2158].y * _2165) + 1.0;
    float _2172 = (cbLight._m0[_2158].z * _2165) + 1.0;
    float _2173 = (cbLight._m0[_2158].w * _2165) + 1.0;
    uint _2174 = _2157 + 5u;
    float _2180 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
    uint _2184 = _2157 + 4u;
    float _2193 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
    uint _2197 = _2157 | 1u;
    float _2208 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_663, _664, _665));
    float _2211 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_663, _664, _665));
    float _4482 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _4493 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2216 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * 0.3183098733425140380859375;
    float _2218 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2225 = ((cbLight._m0[_2174].x * _2180) * _2218) + (((cbLight._m0[_2184].x * _2146) * _2193) * _2216);
    float _2226 = ((_2180 * cbLight._m0[_2174].y) * _2218) + (((cbLight._m0[_2184].y * _2148) * _2193) * _2216);
    float _2227 = ((_2180 * cbLight._m0[_2174].z) * _2218) + (((cbLight._m0[_2184].z * _2150) * _2193) * _2216);
    uvec4 _2231 = floatBitsToUint(cbLight._m0[_2157 + 12u]);
    bool _2233 = _2231.x == 0u;
    float _2335;
    float _2337;
    float _2339;
    if (_2233)
    {
        _2335 = _2225;
        _2337 = _2226;
        _2339 = _2227;
    }
    else
    {
        uint _2343 = _2157 + 6u;
        float _2359 = (dot(vec3(cbLight._m0[_2157 + 2u].xyz), vec3(_663, _664, _665)) * 0.5) + 0.5;
        float _2360 = _2359 * _2359;
        float _4504 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2361 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2362 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2335 = (((cbLight._m0[_2343].x * 0.3183098733425140380859375) * _2361) * _2362) + _2225;
        _2337 = (((cbLight._m0[_2343].y * 0.3183098733425140380859375) * _2361) * _2362) + _2226;
        _2339 = (((cbLight._m0[_2343].z * 0.3183098733425140380859375) * _2361) * _2362) + _2227;
    }
    bool _2342 = _2231.y == 0u;
    float _2397;
    float _2399;
    float _2401;
    if (_2342)
    {
        _2397 = _2335;
        _2399 = _2337;
        _2401 = _2339;
    }
    else
    {
        uint _2559 = _2157 + 7u;
        float _2575 = (dot(vec3(cbLight._m0[_2157 + 3u].xyz), vec3(_663, _664, _665)) * 0.5) + 0.5;
        float _2576 = _2575 * _2575;
        float _4520 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2577 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2578 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2397 = (((cbLight._m0[_2559].x * 0.3183098733425140380859375) * _2577) * _2578) + _2335;
        _2399 = (((cbLight._m0[_2559].y * 0.3183098733425140380859375) * _2577) * _2578) + _2337;
        _2401 = (((cbLight._m0[_2559].z * 0.3183098733425140380859375) * _2577) * _2578) + _2339;
    }
    uint _2404 = _2157 + 8u;
    float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _666) * 0.949999988079071044921875);
    float _2418 = _2417 * _2417;
    float _2419 = cbLight._m0[_2157].x + _742;
    float _2420 = cbLight._m0[_2157].y + _743;
    float _2421 = cbLight._m0[_2157].z + _744;
    float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
    float _2426 = _2425 * _2419;
    float _2427 = _2425 * _2420;
    float _2428 = _2425 * _2421;
    float _2429 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_2157].xyz));
    float _4536 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _4547 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _2433 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2434 = dot(vec3(_663, _664, _665), vec3(_2426, _2427, _2428));
    float _4558 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2426, _2427, _2428));
    float _4569 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2418 * _2418;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2457 = (exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2458 = 1.0 - _2418;
    float _2469 = (0.5 / (((_2433 * ((_2432 * _2458) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2458) + _2418) * _2432))) * _2432;
    float _4580 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2471 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    uint _2485 = _2157 + 9u;
    float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _666) * 0.949999988079071044921875);
    float _2497 = _2496 * _2496;
    float _2498 = cbLight._m0[_2197].x + _742;
    float _2499 = cbLight._m0[_2197].y + _743;
    float _2500 = cbLight._m0[_2197].z + _744;
    float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
    float _2505 = _2504 * _2498;
    float _2506 = _2504 * _2499;
    float _2507 = _2504 * _2500;
    float _2508 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_2197].xyz));
    float _4591 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2511 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2512 = dot(vec3(_663, _664, _665), vec3(_2505, _2506, _2507));
    float _4602 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2515 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2516 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2505, _2506, _2507));
    float _4613 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2520 = _2497 * _2497;
    float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
    float _2533 = (exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2534 = 1.0 - _2497;
    float _2544 = (0.5 / (((_2433 * ((_2511 * _2534) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2534) + _2497) * _2511))) * _2511;
    float _4624 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2546 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
    float _2556 = (((_2533 * cbLight._m0[_2485].x) * _2546) * _2180) + ((((cbLight._m0[_2404].x * _2146) * _2457) * _2471) * _2193);
    float _2557 = (((_2533 * cbLight._m0[_2485].y) * _2546) * _2180) + ((((cbLight._m0[_2404].y * _2148) * _2457) * _2471) * _2193);
    float _2558 = (((_2533 * cbLight._m0[_2485].z) * _2546) * _2180) + ((((cbLight._m0[_2404].z * _2150) * _2457) * _2471) * _2193);
    float _2614;
    float _2616;
    float _2618;
    if (_2233)
    {
        _2614 = _2556;
        _2616 = _2557;
        _2618 = _2558;
    }
    else
    {
        uint _2620 = _2157 + 2u;
        uint _2624 = _2157 + 10u;
        float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2620].w)) * _666) * 0.949999988079071044921875);
        float _2639 = _2638 * _2638;
        float _2640 = cbLight._m0[_2620].x + _742;
        float _2641 = cbLight._m0[_2620].y + _743;
        float _2642 = cbLight._m0[_2620].z + _744;
        float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
        float _2647 = _2646 * _2640;
        float _2648 = _2646 * _2641;
        float _2649 = _2646 * _2642;
        float _2650 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_2620].xyz));
        float _4635 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2654 = dot(vec3(_663, _664, _665), vec3(_2647, _2648, _2649));
        float _4646 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2658 = dot(vec3(cbLight._m0[_2620].xyz), vec3(_2647, _2648, _2649));
        float _4657 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2662 = _2639 * _2639;
        float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
        float _2675 = (exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2676 = 1.0 - _2639;
        float _2686 = (0.5 / (((_2433 * ((_2653 * _2676) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2676) + _2639) * _2653))) * _2653;
        float _4668 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2688 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
        float _2689 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2614 = (((_2675 * cbLight._m0[_2624].x) * _2688) * _2689) + _2556;
        _2616 = (((_2675 * cbLight._m0[_2624].y) * _2688) * _2689) + _2557;
        _2618 = (((_2675 * cbLight._m0[_2624].z) * _2688) * _2689) + _2558;
    }
    float _2720;
    float _2722;
    float _2724;
    if (_2342)
    {
        _2720 = _2614;
        _2722 = _2616;
        _2724 = _2618;
    }
    else
    {
        uint _2731 = _2157 + 3u;
        uint _2735 = _2157 + 11u;
        float _2749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2731].w)) * _666) * 0.949999988079071044921875);
        float _2750 = _2749 * _2749;
        float _2751 = cbLight._m0[_2731].x + _742;
        float _2752 = cbLight._m0[_2731].y + _743;
        float _2753 = cbLight._m0[_2731].z + _744;
        float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
        float _2758 = _2757 * _2751;
        float _2759 = _2757 * _2752;
        float _2760 = _2757 * _2753;
        float _2761 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_2731].xyz));
        float _4684 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2765 = dot(vec3(_663, _664, _665), vec3(_2758, _2759, _2760));
        float _4695 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2769 = dot(vec3(cbLight._m0[_2731].xyz), vec3(_2758, _2759, _2760));
        float _4706 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2773 = _2750 * _2750;
        float _2777 = ((_2768 * _2768) * (_2773 + (-1.0))) + 1.0;
        float _2786 = (exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2787 = 1.0 - _2750;
        float _2797 = (0.5 / (((_2433 * ((_2764 * _2787) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2787) + _2750) * _2764))) * _2764;
        float _4717 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2799 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2773 / ((_2777 * _2777) * 3.141590118408203125));
        float _2800 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2720 = (((_2786 * cbLight._m0[_2735].x) * _2799) * _2800) + _2614;
        _2722 = (((_2786 * cbLight._m0[_2735].y) * _2799) * _2800) + _2616;
        _2724 = (((_2786 * cbLight._m0[_2735].z) * _2799) * _2800) + _2618;
    }
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    if (_2155.y == 0u)
    {
        uvec4 _2821 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2822 = _2821.x;
        uint _2833 = uint((float(_2821.y) * floor(float(uint(cbSceneParam._m0[85u].y * _763) / _2822))) + floor(float(uint(cbSceneParam._m0[85u].x * _762) / _2822)));
        float _2843 = (log2(_1933 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2844 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        uint _2847 = uint(isnan(14.0) ? _2844 : (isnan(_2844) ? 14.0 : min(_2844, 14.0)));
        uvec4 _2852 = texelFetch(g_lightClusterGridBuffer, int(((_2847 << 2u) + (_2833 << 6u)) >> 2u));
        uint _2853 = _2852.x;
        uint _2854 = _2821.z;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        if (((((1u << ((_2854 >> 4u) & 15u)) + 4294967295u) & _2853) == 0u) || ((_2854 & 240u) == 0u))
        {
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
        }
        else
        {
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            uint _3090 = 0u;
            uint _3099;
            bool _3100;
            for (;;)
            {
                _3099 = texelFetch(g_lightClassification, int((((_2847 << 5u) + (_2833 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                _3100 = _3099 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3100)
                {
                    frontier_phi_73_pred = _3089;
                    frontier_phi_73_pred_1 = _3088;
                    frontier_phi_73_pred_2 = _3087;
                    frontier_phi_73_pred_3 = _3086;
                    frontier_phi_73_pred_4 = _3085;
                    frontier_phi_73_pred_5 = _3084;
                }
                else
                {
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    uint _3235;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3099;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    for (;;)
                    {
                        uint _3239 = uint(findLSB(_3235)) + (_3090 << 5u);
                        uint _3236 = (_3235 + 4294967295u) & _3235;
                        uint _3241 = _3239 * 48u;
                        vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3261 = (_3239 * 48u) + 4u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3280 = (_3239 * 48u) + 8u;
                        vec3 _3291 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x));
                        float _3295 = _3255.x - _1931;
                        float _3296 = _3255.y - _1932;
                        float _3297 = _3255.z - _1933;
                        float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                        float _3301 = inversesqrt(_3298);
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3305 = dot(vec3(_781, _784, _787), vec3(_3302, _3303, _3304));
                        float _3310 = 1.0 - (_3298 * _3255.w);
                        float _4743 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3312 = sqrt(_3298) * _3274.w;
                        float _3315 = 1.39999997615814208984375 / (_3312 + 1.39999997615814208984375);
                        float _3316 = _3315 * _3315;
                        float _3319 = ((1.0 - _3316) * _3305) + _3316;
                        float _3322 = _3312 * _3312;
                        float _3326 = ((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3311) / ((_3322 * 0.699999988079071044921875) + 1.0);
                        float _3330 = (-0.0) - _1931;
                        float _3331 = (-0.0) - _1932;
                        float _3332 = (-0.0) - _1933;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3337 = _3336 * _3330;
                        float _3338 = _3336 * _3331;
                        float _3339 = _3336 * _3332;
                        float _3346 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                        float _3347 = 1.0 - _841;
                        float _3354 = sqrt(1.0 - ((1.0 - (_3347 * _3347)) * (1.0 - (_3346 * _3346))));
                        float _3355 = _3354 * _3354;
                        float _3356 = _3355 * _3355;
                        float _3357 = _3337 + _3302;
                        float _3358 = _3338 + _3303;
                        float _3359 = _3339 + _3304;
                        float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                        float _3367 = dot(vec3(_781, _784, _787), vec3(_3337, _3338, _3339));
                        float _4759 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3371 = dot(vec3(_781, _784, _787), vec3(_3363 * _3357, _3363 * _3358, _3363 * _3359));
                        float _4770 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3374 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3378 = ((_3374 * _3374) * (_3356 + (-1.0))) + 1.0;
                        float _3379 = _3315 * _3355;
                        float _3380 = _3379 * _3379;
                        float _3383 = ((1.0 - _3380) * _3305) + _3380;
                        float _4781 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3384 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3385 = 1.0 - _3355;
                        float _3395 = (0.5 / (((_3384 * ((_3370 * _3385) + _3355)) + 9.9999999392252902907785028219223e-09) + (((_3384 * _3385) + _3355) * _3370))) * _3384;
                        float _4792 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3406 = (((_3356 * 3.1415927410125732421875) * (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) / ((_3378 * _3378) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125))) * _3311;
                        _3159 = (_3326 * _3274.x) + _3232;
                        _3160 = (_3326 * _3274.y) + _3233;
                        _3161 = (_3326 * _3274.z) + _3234;
                        _3156 = (_3406 * _3291.x) + _3229;
                        _3157 = (_3406 * _3291.y) + _3230;
                        _3158 = (_3406 * _3291.z) + _3231;
                        if (_3236 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3236;
                        }
                    }
                    frontier_phi_73_pred = _3161;
                    frontier_phi_73_pred_1 = _3160;
                    frontier_phi_73_pred_2 = _3159;
                    frontier_phi_73_pred_3 = _3158;
                    frontier_phi_73_pred_4 = _3157;
                    frontier_phi_73_pred_5 = _3156;
                }
                _2943 = frontier_phi_73_pred;
                _2941 = frontier_phi_73_pred_1;
                _2939 = frontier_phi_73_pred_2;
                _2937 = frontier_phi_73_pred_3;
                _2935 = frontier_phi_73_pred_4;
                _2933 = frontier_phi_73_pred_5;
                uint _3091 = _3090 + 1u;
                if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3084 = _2933;
                    _3085 = _2935;
                    _3086 = _2937;
                    _3087 = _2939;
                    _3088 = _2941;
                    _3089 = _2943;
                    _3090 = _3091;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
        }
        uvec4 _2946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2947 = _2946.z;
        uint _2949 = (_2947 >> 8u) & 15u;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((4294967295u << _2949) & _2853) == 0u)
        {
            _3052 = _2932;
            _3054 = _2934;
            _3056 = _2936;
            _3058 = _2938;
            _3060 = _2940;
            _3062 = _2942;
        }
        else
        {
            float _3077 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
            float _3078 = _3077 * _1931;
            float _3079 = _3077 * _1932;
            float _3080 = _3077 * _1933;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2949 < ((_2947 >> 12u) & 15u))
            {
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3212 = _2932;
                float _3213 = _2934;
                float _3214 = _2936;
                float _3215 = _2938;
                float _3216 = _2940;
                float _3217 = _2942;
                uint _3218 = _2949;
                uint _3227;
                bool _3228;
                for (;;)
                {
                    _3227 = texelFetch(g_lightClassification, int((((_2847 << 5u) + (_2833 << 9u)) + (_3218 << 2u)) >> 2u)).x;
                    _3228 = _3227 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3228)
                    {
                        frontier_phi_84_pred = _3216;
                        frontier_phi_84_pred_1 = _3215;
                        frontier_phi_84_pred_2 = _3214;
                        frontier_phi_84_pred_3 = _3213;
                        frontier_phi_84_pred_4 = _3212;
                        frontier_phi_84_pred_5 = _3217;
                    }
                    else
                    {
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3433 = _3212;
                        float _3434 = _3213;
                        float _3435 = _3214;
                        float _3436 = _3215;
                        float _3437 = _3216;
                        float _3438 = _3217;
                        uint _3439 = _3227;
                        uint _3440;
                        vec4 _3465;
                        float _3466;
                        vec4 _3481;
                        vec3 _3493;
                        vec4 _3508;
                        vec4 _3524;
                        float _3571;
                        bool _3572;
                        for (;;)
                        {
                            uint _3450 = ((_3218 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3439));
                            _3440 = (_3439 + 4294967295u) & _3439;
                            uint _3452 = _3450 * 40u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3466 = _3465.w;
                            uint _3468 = (_3450 * 40u) + 4u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3450 * 40u) + 8u;
                            _3493 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x));
                            uint _3495 = (_3450 * 40u) + 16u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3511 = (_3450 * 40u) + 20u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3527 = (_3450 * 40u) + 24u;
                            vec4 _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3546 = (_3450 * 40u) + 28u;
                            vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            _3571 = fma(_1933, _3559.z, fma(_1932, _3559.y, _3559.x * _1931)) + _3559.w;
                            _3572 = !((fma(_1933, _3540.z, fma(_1932, _3540.y, _3540.x * _1931)) + _3540.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3572)
                            {
                                float _3599 = _3465.x - _1931;
                                float _3600 = _3465.y - _1932;
                                float _3601 = _3465.z - _1933;
                                float _3602 = dot(vec3(_3599, _3600, _3601), vec3(_3599, _3600, _3601));
                                float _3605 = inversesqrt(_3602);
                                float _3606 = _3605 * _3599;
                                float _3607 = _3605 * _3600;
                                float _3608 = _3605 * _3601;
                                float _3612 = 1.0 - (_3602 / (_3466 * _3466));
                                float _4803 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3617 = sqrt(_3602) * _3481.w;
                                float _3619 = 1.39999997615814208984375 / (_3617 + 1.39999997615814208984375);
                                float _3620 = _3619 * _3619;
                                float _3623 = ((1.0 - _3620) * dot(vec3(_3606, _3607, _3608), vec3(_781, _784, _787))) + _3620;
                                float _3626 = _3617 * _3617;
                                float _3630 = (fma(_1933, _3508.z, fma(_1932, _3508.y, _3508.x * _1931)) + _3508.w) / _3571;
                                float _3631 = (fma(_1933, _3524.z, fma(_1932, _3524.y, _3524.x * _1931)) + _3524.w) / _3571;
                                float _3635 = 1.0 - dot(vec2(_3630, _3631), vec2(_3630, _3631));
                                float _4819 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3637 = _3636 * (((isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0))) * _3613) / ((_3626 * 0.699999988079071044921875) + 1.0));
                                float _3649 = exp2(log2(1.0 / ((_3626 * 3.5) + 5.0)) * 0.25);
                                float _3650 = 1.0 - _841;
                                float _3657 = sqrt(1.0 - ((1.0 - (_3650 * _3650)) * (1.0 - (_3649 * _3649))));
                                float _3658 = _3657 * _3657;
                                float _3659 = _3658 * _3658;
                                float _3660 = _3606 - _3078;
                                float _3661 = _3607 - _3079;
                                float _3662 = _3608 - _3080;
                                float _3666 = inversesqrt(dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662)));
                                float _3670 = dot(vec3(_781, _784, _787), vec3((-0.0) - _3078, (-0.0) - _3079, (-0.0) - _3080));
                                float _4830 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3673 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3674 = dot(vec3(_781, _784, _787), vec3(_3666 * _3660, _3666 * _3661, _3666 * _3662));
                                float _4841 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3677 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3681 = ((_3677 * _3677) * (_3659 + (-1.0))) + 1.0;
                                float _3682 = _3619 * _3658;
                                float _3683 = _3682 * _3682;
                                float _3689 = ((1.0 - _3683) * dot(vec3(_781, _784, _787), vec3(_3606, _3607, _3608))) + _3683;
                                float _4852 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3691 = 1.0 - _3658;
                                float _3701 = (0.5 / (((_3690 * ((_3673 * _3691) + _3658)) + 9.9999999392252902907785028219223e-09) + (((_3690 * _3691) + _3658) * _3673))) * _3690;
                                float _4863 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3711 = (_3636 * _3613) * (((_3659 * 3.1415927410125732421875) * (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) / ((_3681 * _3681) * ((_3626 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3637 * _3481.y;
                                frontier_phi_90_pred_1 = _3637 * _3481.x;
                                frontier_phi_90_pred_2 = _3711 * _3493.z;
                                frontier_phi_90_pred_3 = _3711 * _3493.y;
                                frontier_phi_90_pred_4 = _3711 * _3493.x;
                                frontier_phi_90_pred_5 = _3637 * _3481.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3719 = frontier_phi_90_pred;
                            _3718 = frontier_phi_90_pred_1;
                            _3717 = frontier_phi_90_pred_2;
                            _3716 = frontier_phi_90_pred_3;
                            _3715 = frontier_phi_90_pred_4;
                            _3720 = frontier_phi_90_pred_5;
                            _3423 = _3718 + _3436;
                            _3424 = _3719 + _3437;
                            _3425 = _3720 + _3438;
                            _3420 = _3715 + _3433;
                            _3421 = _3716 + _3434;
                            _3422 = _3717 + _3435;
                            if (_3440 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3440;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3424;
                        frontier_phi_84_pred_1 = _3423;
                        frontier_phi_84_pred_2 = _3422;
                        frontier_phi_84_pred_3 = _3421;
                        frontier_phi_84_pred_4 = _3420;
                        frontier_phi_84_pred_5 = _3425;
                    }
                    _3061 = frontier_phi_84_pred;
                    _3059 = frontier_phi_84_pred_1;
                    _3057 = frontier_phi_84_pred_2;
                    _3055 = frontier_phi_84_pred_3;
                    _3053 = frontier_phi_84_pred_4;
                    _3063 = frontier_phi_84_pred_5;
                    uint _3219 = _3218 + 1u;
                    if (_3219 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3212 = _3053;
                        _3213 = _3055;
                        _3214 = _3057;
                        _3215 = _3059;
                        _3216 = _3061;
                        _3217 = _3063;
                        _3218 = _3219;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3063;
                frontier_phi_65_66_ladder_1 = _3059;
                frontier_phi_65_66_ladder_2 = _3061;
                frontier_phi_65_66_ladder_3 = _3055;
                frontier_phi_65_66_ladder_4 = _3053;
                frontier_phi_65_66_ladder_5 = _3057;
            }
            else
            {
                frontier_phi_65_66_ladder = _2942;
                frontier_phi_65_66_ladder_1 = _2938;
                frontier_phi_65_66_ladder_2 = _2940;
                frontier_phi_65_66_ladder_3 = _2934;
                frontier_phi_65_66_ladder_4 = _2932;
                frontier_phi_65_66_ladder_5 = _2936;
            }
            _3052 = frontier_phi_65_66_ladder_4;
            _3054 = frontier_phi_65_66_ladder_3;
            _3056 = frontier_phi_65_66_ladder_5;
            _3058 = frontier_phi_65_66_ladder_1;
            _3060 = frontier_phi_65_66_ladder_2;
            _3062 = frontier_phi_65_66_ladder;
        }
        float _3067 = isnan(1.0) ? _825 : (isnan(_825) ? 1.0 : min(_825, 1.0));
        _2865 = (_3067 * _3058) + _2397;
        _2867 = (_3067 * _3060) + _2399;
        _2869 = (_3067 * _3062) + _2401;
        _2871 = ((_3052 * 0.039999999105930328369140625) * _3067) + _2720;
        _2873 = ((_3054 * 0.039999999105930328369140625) * _3067) + _2722;
        _2875 = ((_3056 * 0.039999999105930328369140625) * _3067) + _2724;
    }
    else
    {
        _2865 = _2397;
        _2867 = _2399;
        _2869 = _2401;
        _2871 = _2720;
        _2873 = _2722;
        _2875 = _2724;
    }
    float _4879 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4890 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4901 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _2892 = ((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2865 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _825))) + ((_2871 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1663)) * cbPerFrame._m0[3u].x);
    float _2893 = ((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2867 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _825))) + ((_2873 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1663)) * cbPerFrame._m0[3u].x);
    float _2894 = ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2869 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _825))) + ((_2875 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1663)) * cbPerFrame._m0[3u].x);
    uint _2895 = _800 + 6u;
    float _2903 = _762 / cbSceneParam._m0[86u].x;
    float _2904 = _763 / cbSceneParam._m0[86u].y;
    vec4 _2918 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2903, _2904, (log2((isnan(cbSceneParam._m0[77u].w) ? _685 : (isnan(_685) ? cbSceneParam._m0[77u].w : min(_685, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2920 = _2918.x;
    float _2921 = _2918.y;
    float _2922 = _2918.z;
    float _2923 = _2918.w;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_685 > cbSceneParam._m0[78u].w)
    {
        float _2957 = isnan(_685) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _685 : min(cbSceneParam._m0[80u].w, _685));
        float _2958 = _2957 / _685;
        float _2969 = _2958 * _735;
        float _2970 = _736 * _2958;
        float _2971 = (-0.0) - _2970;
        float _2972 = _2958 * _737;
        float _2974 = (cbSceneParam._m0[77u].w * _2971) / _2957;
        float _2975 = _2974 + cbSceneParam._m0[79u].w;
        float _2976 = cbSceneParam._m0[79u].w - _2970;
        float _2982 = sqrt(((_2969 * _2969) + (_2970 * _2970)) + (_2972 * _2972));
        float _2985 = (1.0 - (cbSceneParam._m0[77u].w / _2957)) * _2982;
        float _2990 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2992 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3169;
        if (abs((_2971 - _2974) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3169 = ((((_2975 > 0.0) ? exp2(_2990 * _2975) : (2.0 - exp2(_2992 * _2975))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2985;
        }
        else
        {
            float _3113 = 1.0 / cbSceneParam._m0[80u].x;
            float _3114 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : max(_2975, _2976));
            float _3115 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : min(_2975, _2976));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            float _3125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : min(_3115, 0.0));
            _3169 = ((abs(_2982 / _2971) * cbSceneParam._m0[80u].y) * ((((_3124 - _3125) * 2.0) - ((exp2(_2990 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0)))) - exp2(_2990 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))))) * _3113)) - ((exp2(_2992 * _3124) - exp2(_2992 * _3125)) * _3113))) + (_2985 * cbSceneParam._m0[80u].z);
        }
        vec4 _3171 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2903, _2904, 1.0), 0.0);
        float _3180 = exp2((_3169 * (-1.44269502162933349609375)) * (1.0 - _3171.w));
        float _3181 = log2(_3180);
        float _3197 = log2(_2923);
        _2994 = (exp2(_3197 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].x)) * _3171.x) / cbSceneParam._m0[78u].x)) + _2920;
        _2996 = (exp2(_3197 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].y)) * _3171.y) / cbSceneParam._m0[78u].y)) + _2921;
        _2998 = (exp2(_3197 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].z)) * _3171.z) / cbSceneParam._m0[78u].z)) + _2922;
        _3000 = _3180 * _2923;
    }
    else
    {
        _2994 = _2920;
        _2996 = _2921;
        _2998 = _2922;
        _3000 = _2923;
    }
    bool _3207;
    vec4 _3010;
    vec4 _3032;
    float _3034;
    float _3038;
    float _3039;
    float _3040;
    float _3041;
    bool _3051;
    for (;;)
    {
        _3010 = cbMatDynParam._m0[0u];
        float _3012 = roundEven(_3010.y);
        bool _3013 = _3012 == 3.0;
        float _3014 = log2(_3000);
        float _3021 = exp2(_3014 * cbSceneParam._m0[78u].x) * _2892;
        float _3022 = exp2(_3014 * cbSceneParam._m0[78u].y) * _2893;
        float _3023 = exp2(_3014 * cbSceneParam._m0[78u].z) * _2894;
        float _3030 = _751 + (-0.5);
        _3032 = cbMtdParam._m0[1u];
        _3034 = _3032.y * _3030;
        float _3037 = (_3012 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3038 = _3037 * (_3013 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2994)));
        _3039 = _3037 * (_3013 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2996)));
        _3040 = _3037 * (_3013 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2998)));
        _3041 = _3030 * 0.999000012874603271484375;
        _3051 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3051)
        {
            if ((cbInstanceData._m0[_800 + 7u].x + _3041) < 0.5)
            {
                _3207 = true;
                break;
            }
        }
        uint _3148 = _801 + uint(_3010.w);
        if ((cbInstanceData._m0[_3148].w < 1.0) && ((cbInstanceData._m0[_3148].w + _3041) < 0.5))
        {
            _3207 = true;
            break;
        }
        if ((_3034 + 1.0) < _3032.x)
        {
            _3207 = true;
            break;
        }
        _3207 = false;
        break;
    }
    float _3411;
    if (_3207)
    {
        discard_state = true;
        _3411 = 0.0;
    }
    else
    {
        _3411 = cbInstanceData._m0[_2895].w;
    }
    SV_Target.x = _3038;
    SV_Target.y = _3039;
    SV_Target.z = _3040;
    SV_Target.w = _3411;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2895].w;
    discard_exit();
}


