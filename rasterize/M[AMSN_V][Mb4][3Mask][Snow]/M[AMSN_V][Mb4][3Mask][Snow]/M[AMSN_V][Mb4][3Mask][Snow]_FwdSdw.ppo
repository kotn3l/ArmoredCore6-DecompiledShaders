#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1180;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _260 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _266 = _260.x * cbMtdParam._m0[10u].x;
    float _267 = _260.y * cbMtdParam._m0[10u].y;
    float _268 = _260.z * cbMtdParam._m0[10u].z;
    vec4 _287 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    vec4 _306 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _337 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x;
    float _348 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((((1.0 - TEXCOORD_3.x) - _306.x) * 2.0) - _337)) + 1.0;
    float _3774 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _349 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _356 = (_349 * ((_287.x * cbMtdParam._m0[11u].x) - _266)) + _266;
    float _357 = (_349 * ((_287.y * cbMtdParam._m0[11u].y) - _267)) + _267;
    float _358 = (_349 * ((_287.z * cbMtdParam._m0[11u].z) - _268)) + _268;
    vec4 _376 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _389 = ((((((1.0 - TEXCOORD_3.y) - _306.y) * 2.0) - _337) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3785 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _397 = (((_376.x * cbMtdParam._m0[12u].x) - _356) * _390) + _356;
    float _398 = (_390 * ((_376.y * cbMtdParam._m0[12u].y) - _357)) + _357;
    float _399 = (_390 * ((_376.z * cbMtdParam._m0[12u].z) - _358)) + _358;
    vec4 _417 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _430 = ((((((1.0 - TEXCOORD_3.z) - _306.z) * 2.0) - _337) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3796 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _438 = (((_417.x * cbMtdParam._m0[13u].x) - _397) * _431) + _397;
    float _439 = (_431 * ((_417.y * cbMtdParam._m0[13u].y) - _398)) + _398;
    float _440 = (_431 * ((_417.z * cbMtdParam._m0[13u].z) - _399)) + _399;
    vec4 _458 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    vec4 _480 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _484 = _480.z;
    vec4 _496 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _507 = ((_496.x - _482) * _349) + _482;
    float _508 = ((_496.y - _483) * _349) + _483;
    float _509 = ((_496.z - _484) * _349) + _484;
    vec4 _522 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _533 = ((_522.x - _507) * _390) + _507;
    float _534 = ((_522.y - _508) * _390) + _508;
    float _535 = ((_522.z - _509) * _390) + _509;
    vec4 _548 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _561 = ((_548.z - _535) * _431) + _535;
    float _564 = ((((_548.x - _533) * _431) + _533) * 2.0) + (-1.0);
    float _566 = ((((_548.y - _534) * _431) + _534) * 2.0) + (-1.0);
    float _567 = dot(vec2(_564, _566), vec2(_564, _566));
    float _3807 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))));
    float _575 = fma(_572, _238, fma(_566, _231, _564 * _217));
    float _578 = fma(_572, _239, fma(_566, _232, _564 * _218));
    float _581 = fma(_572, _240, fma(_566, _233, _564 * _219));
    float _590 = exp2(log2(inversesqrt(dot(vec3(_575, _578, _581), vec3(_575, _578, _581))) * _578) * cbMtdParam._m0[15u].y) * cbMtdParam._m0[14u].y;
    float _3818 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _594 = 3.0 - (_592 * 2.0);
    float _599 = _592 * _592;
    float _606 = ((_599 * ((_458.x * cbMtdParam._m0[9u].x) - _438)) * _594) + _438;
    float _607 = ((_599 * ((_458.y * cbMtdParam._m0[9u].y) - _439)) * _594) + _439;
    float _608 = ((_599 * ((_458.z * cbMtdParam._m0[9u].z) - _440)) * _594) + _440;
    vec4 _620 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _626 = (_620.x * 2.0) + (-1.0);
    float _627 = (_620.y * 2.0) + (-1.0);
    float _628 = dot(vec2(_626, _627), vec2(_626, _627));
    float _3840 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _643 = ((_599 * (_626 - _564)) * _594) + _564;
    float _644 = ((_599 * (_627 - _566)) * _594) + _566;
    float _645 = ((_599 * (sqrt(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) - _572)) * _594) + _572;
    float _648 = fma(_645, _238, fma(_644, _231, _643 * _217));
    float _651 = fma(_645, _239, fma(_644, _232, _643 * _218));
    float _654 = fma(_645, _240, fma(_644, _233, _643 * _219));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    float _659 = _658 * _648;
    float _660 = _658 * _651;
    float _661 = _658 * _654;
    float _3851 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _662 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3873 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _3884 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _681 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _731 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _721);
    float _732 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _721);
    float _733 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _721);
    float _737 = inversesqrt(dot(vec3(_731, _732, _733), vec3(_731, _732, _733)));
    float _738 = _731 * _737;
    float _739 = _732 * _737;
    float _740 = _733 * _737;
    float _746 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _747 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _765 = fma(_661, cbSceneParam._m0[5u].z, fma(_660, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _659));
    float _768 = fma(_661, cbSceneParam._m0[6u].z, fma(_660, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _659));
    float _771 = fma(_661, cbSceneParam._m0[7u].z, fma(_660, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _659));
    uint _784 = uint(roundEven(NORMAL.w)) * 13u;
    uint _786 = (_784 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _792 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_786].x;
    float _793 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_786].y;
    float _794 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_786].z;
    float _3895 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    vec4 _806 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _746, cbSceneParam._m0[86u].y * _747));
    float _809 = _806.x * TEXCOORD_3.w;
    float _810 = dot(vec3(_659, _660, _661), vec3(_738, _739, _740));
    float _813 = _810 * 2.0;
    float _817 = (_813 * _659) - _738;
    float _818 = (_813 * _660) - _739;
    float _819 = (_813 * _661) - _740;
    float _823 = abs(dot(vec3(_738, _739, _740), vec3(_659, _660, _661)));
    float _3928 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _825 = sqrt(_662);
    float _837 = exp2((_825 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_825 * 3.0));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1179;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _904 = fma(_877, cbModelParam._m0[26u].z, fma(_873, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _869));
        float _908 = fma(_877, cbModelParam._m0[27u].z, fma(_873, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _869));
        float _912 = fma(_877, cbModelParam._m0[28u].z, fma(_873, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _869));
        float _937 = _869 + _659;
        float _938 = _873 + _660;
        float _939 = _877 + _661;
        float _949 = fma(_939, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937)) - _904;
        float _950 = fma(_939, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937)) - _908;
        float _951 = fma(_939, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937)) - _912;
        float _955 = inversesqrt(dot(vec3(_949, _950, _951), vec3(_949, _950, _951)));
        float _968 = ((_955 * _949) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_904 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_955 * _950) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_908 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_955 * _951) / cbModelParam._m0[34u].z) + ((((((_912 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        float _1007 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_973.x + (-0.5));
        float _1009 = _1007 * (_973.y + (-0.5));
        float _1010 = _1007 * (_973.z + (-0.5));
        float _1017 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_980.x + (-0.5));
        float _1019 = _1017 * (_980.y + (-0.5));
        float _1020 = _1017 * (_980.z + (-0.5));
        float _1027 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_987.x + (-0.5));
        float _1029 = _1027 * (_987.y + (-0.5));
        float _1030 = _1027 * (_987.z + (-0.5));
        float _1037 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_994.x + (-0.5));
        float _1039 = _1037 * (_994.y + (-0.5));
        float _1040 = _1037 * (_994.z + (-0.5));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = _1008 * 0.5;
        float _1045 = _1018 * 0.5;
        float _1046 = _1028 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1061 = (dot(vec3(_659, _660, _661), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1071 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3976 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1073 + 1.0))) + _1078) * _1041;
        float _1088 = _1009 * 0.5;
        float _1089 = _1019 * 0.5;
        float _1090 = _1029 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_659, _660, _661), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _4009 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1115 + 1.0))) + _1120) * _1042;
        float _1130 = _1010 * 0.5;
        float _1131 = _1020 * 0.5;
        float _1132 = _1030 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_659, _660, _661), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _4042 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1157 + 1.0))) + _1162) * _1043;
        _1179 = _1010;
        _1181 = _1009;
        _1182 = _1008;
        _1183 = _1020;
        _1184 = _1019;
        _1185 = _1018;
        _1186 = _1030;
        _1187 = _1029;
        _1188 = _1028;
        _1189 = _1043;
        _1190 = _1042;
        _1191 = _1041;
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
    }
    else
    {
        _1179 = _1180;
        _1181 = _1180;
        _1182 = _1180;
        _1183 = _1180;
        _1184 = _1180;
        _1185 = _1180;
        _1186 = _1180;
        _1187 = _1180;
        _1188 = _1180;
        _1189 = _1180;
        _1190 = _1180;
        _1191 = _1180;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1220 = fma(_877, cbModelParam._m0[30u].z, fma(_873, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _869));
        float _1224 = fma(_877, cbModelParam._m0[31u].z, fma(_873, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _869));
        float _1228 = fma(_877, cbModelParam._m0[32u].z, fma(_873, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _869));
        float _1251 = _869 + _659;
        float _1252 = _873 + _660;
        float _1253 = _877 + _661;
        float _1263 = fma(_1253, cbModelParam._m0[30u].z, fma(_1252, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1251)) - _1220;
        float _1264 = fma(_1253, cbModelParam._m0[31u].z, fma(_1252, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1251)) - _1224;
        float _1265 = fma(_1253, cbModelParam._m0[32u].z, fma(_1252, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1251)) - _1228;
        float _1269 = inversesqrt(dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265)));
        float _1282 = ((_1269 * _1263) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1220 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1269 * _1264) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1224 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1269 * _1265) / cbModelParam._m0[35u].z) + ((((((_1228 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        float _1319 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1286.x + (-0.5));
        float _1321 = _1319 * (_1286.y + (-0.5));
        float _1322 = _1319 * (_1286.z + (-0.5));
        float _1329 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1293.x + (-0.5));
        float _1331 = _1329 * (_1293.y + (-0.5));
        float _1332 = _1329 * (_1293.z + (-0.5));
        float _1339 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1300.x + (-0.5));
        float _1341 = _1339 * (_1300.y + (-0.5));
        float _1342 = _1339 * (_1300.z + (-0.5));
        float _1349 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1307.x + (-0.5));
        float _1351 = _1349 * (_1307.y + (-0.5));
        float _1352 = _1349 * (_1307.z + (-0.5));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = _1320 * 0.5;
        float _1357 = _1330 * 0.5;
        float _1358 = _1340 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_659, _660, _661), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4105 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1383 + 1.0))) + _1388) * _1353;
        float _1398 = _1321 * 0.5;
        float _1399 = _1331 * 0.5;
        float _1400 = _1341 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_659, _660, _661), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4138 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1425 + 1.0))) + _1430) * _1354;
        float _1440 = _1322 * 0.5;
        float _1441 = _1332 * 0.5;
        float _1442 = _1342 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_659, _660, _661), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4171 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1467 + 1.0))) + _1472) * _1355;
        _1489 = _1322;
        _1490 = _1321;
        _1491 = _1320;
        _1492 = _1332;
        _1493 = _1331;
        _1494 = _1330;
        _1495 = _1342;
        _1496 = _1341;
        _1497 = _1340;
        _1498 = _1355;
        _1499 = _1354;
        _1500 = _1353;
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
    }
    else
    {
        _1489 = _1180;
        _1490 = _1180;
        _1491 = _1180;
        _1492 = _1180;
        _1493 = _1180;
        _1494 = _1180;
        _1495 = _1180;
        _1496 = _1180;
        _1497 = _1180;
        _1498 = _1180;
        _1499 = _1180;
        _1500 = _1180;
        _1501 = 0.0;
        _1502 = 0.0;
        _1503 = 0.0;
    }
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1192)) + _1192;
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1193)) + _1193;
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1194)) + _1194;
    float _1536 = fma(_1515, cbSceneParam._m0[89u].z, fma(_1514, cbSceneParam._m0[89u].y, _1513 * cbSceneParam._m0[89u].x));
    float _1539 = fma(_1515, cbSceneParam._m0[90u].z, fma(_1514, cbSceneParam._m0[90u].y, _1513 * cbSceneParam._m0[90u].x));
    float _1542 = fma(_1515, cbSceneParam._m0[91u].z, fma(_1514, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1513));
    float _1557 = _817 * 0.5;
    float _1558 = _818 * 0.5;
    float _1559 = _819 * 0.5;
    float _1560 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1563 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1566 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1600;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1573 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1179, _1183, _1186, _1189));
        float _1577 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1181, _1184, _1187, _1190));
        float _1581 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1182, _1185, _1188, _1191));
        float _1588 = dot(vec4(cbModelParam._m0[39u]), vec4(_1557, _1558, _1559, 1.0));
        _1600 = dot(vec3(isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1588) ? 0.0 : (isnan(0.0) ? _1588 : max(0.0, _1588))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1600 = 1.0;
    }
    float _1611;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1602 = dot(vec4(cbModelParam._m0[40u]), vec4(_1557, _1558, _1559, 1.0));
        _1611 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1602) ? 0.0 : (isnan(0.0) ? _1602 : max(0.0, _1602))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1611 = 1.0;
    }
    float _1615 = (_1611 * cbModelParam._m0[1u].x) + (_1600 * (1.0 - cbModelParam._m0[1u].x));
    float _1625 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _662);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1625 : min(cbModelParam._m0[25u].z, _1625));
    float _1706;
    float _1708;
    float _1710;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1673 = fma(_877, cbModelParam._m0[13u].z, fma(_873, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _869)) + cbModelParam._m0[13u].w;
        float _1677 = fma(_877, cbModelParam._m0[14u].z, fma(_873, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _869)) + cbModelParam._m0[14u].w;
        float _1681 = fma(_877, cbModelParam._m0[15u].z, fma(_873, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _869)) + cbModelParam._m0[15u].w;
        float _1684 = fma(_819, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817));
        float _1687 = fma(_819, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817));
        float _1690 = fma(_819, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817));
        float _1718;
        if (_1684 > 0.0)
        {
            _1718 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1718 = frontier_phi_16_14_ladder;
        }
        float _1891;
        if (_1687 > 0.0)
        {
            _1891 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1891 = frontier_phi_25_21_ladder;
        }
        float _2186;
        if (_1690 > 0.0)
        {
            _2186 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2186 = frontier_phi_37_32_ladder;
        }
        float _2188 = isnan(_1891) ? _1718 : (isnan(_1718) ? _1891 : min(_1718, _1891));
        float _2189 = isnan(_2186) ? _2188 : (isnan(_2188) ? _2186 : min(_2188, _2186));
        float _2193 = (_2189 * _1684) + _1673;
        float _2194 = (_2189 * _1687) + _1677;
        float _2195 = (_2189 * _1690) + _1681;
        float _2196 = _2189 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2196;
        float _2200 = _2196 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 > _2200) || ((_2194 < _2198) || ((_2193 < _2198) || (_2193 > _2200))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2340 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2195, cbModelParam._m0[9u].z, fma(_2194, cbModelParam._m0[9u].y, _2193 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2195, cbModelParam._m0[10u].z, fma(_2194, cbModelParam._m0[10u].y, _2193 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2195, cbModelParam._m0[11u].z, fma(_2194, cbModelParam._m0[11u].y, _2193 * cbModelParam._m0[11u].x))), _1626);
            frontier_phi_15_37_ladder = _2340.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2340.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2340.z * cbModelParam._m0[1u].y;
        }
        _1706 = frontier_phi_15_37_ladder_1;
        _1708 = frontier_phi_15_37_ladder;
        _1710 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1694 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_817, _818, _819), _1626);
        _1706 = _1694.x * cbModelParam._m0[1u].y;
        _1708 = _1694.y * cbModelParam._m0[1u].y;
        _1710 = _1694.z * cbModelParam._m0[1u].y;
    }
    float _1714 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _662);
    float _1715 = isnan(_1714) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1714 : min(cbModelParam._m0[25u].w, _1714));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1772 = fma(_877, cbModelParam._m0[21u].z, fma(_873, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _869)) + cbModelParam._m0[21u].w;
        float _1776 = fma(_877, cbModelParam._m0[22u].z, fma(_873, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _869)) + cbModelParam._m0[22u].w;
        float _1780 = fma(_877, cbModelParam._m0[23u].z, fma(_873, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _869)) + cbModelParam._m0[23u].w;
        float _1783 = fma(_819, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817));
        float _1786 = fma(_819, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817));
        float _1789 = fma(_819, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817));
        float _1896;
        if (_1783 > 0.0)
        {
            _1896 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1896 = frontier_phi_27_23_ladder;
        }
        float _2213;
        if (_1786 > 0.0)
        {
            _2213 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2213 = frontier_phi_39_34_ladder;
        }
        float _2540;
        if (_1789 > 0.0)
        {
            _2540 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2540 = frontier_phi_49_46_ladder;
        }
        float _2542 = isnan(_2213) ? _1896 : (isnan(_1896) ? _2213 : min(_1896, _2213));
        float _2543 = isnan(_2540) ? _2542 : (isnan(_2542) ? _2540 : min(_2542, _2540));
        float _2547 = (_2543 * _1783) + _1772;
        float _2548 = (_2543 * _1786) + _1776;
        float _2549 = (_2543 * _1789) + _1780;
        float _2550 = _2543 * 9.9999997473787516355514526367188e-05;
        float _2551 = (-1.0) - _2550;
        float _2553 = _2550 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2549 > _2553) || ((_2549 < _2551) || ((_2548 > _2553) || ((_2548 < _2551) || ((_2547 < _2551) || (_2547 > _2553))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2549, cbModelParam._m0[17u].z, fma(_2548, cbModelParam._m0[17u].y, _2547 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2549, cbModelParam._m0[18u].z, fma(_2548, cbModelParam._m0[18u].y, _2547 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2549, cbModelParam._m0[19u].z, fma(_2548, cbModelParam._m0[19u].y, _2547 * cbModelParam._m0[19u].x))), _1715);
            frontier_phi_24_49_ladder = _2667.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2667.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2667.x * cbModelParam._m0[1u].z;
        }
        _1808 = frontier_phi_24_49_ladder_2;
        _1810 = frontier_phi_24_49_ladder_1;
        _1812 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_817, _818, _819), _1715);
        _1808 = _1792.x * cbModelParam._m0[1u].z;
        _1810 = _1792.y * cbModelParam._m0[1u].z;
        _1812 = _1792.z * cbModelParam._m0[1u].z;
    }
    float _1824 = ((((1.0 - _837) * ((_825 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_837 * _825)) * _809;
    float _1825 = _1824 * ((cbModelParam._m0[1u].w * (_1808 - _1706)) + _1706);
    float _1826 = _1824 * ((cbModelParam._m0[1u].w * (_1810 - _1708)) + _1708);
    float _1827 = _1824 * ((cbModelParam._m0[1u].w * (_1812 - _1710)) + _1710);
    float _1830 = fma(_1827, cbSceneParam._m0[89u].z, fma(_1826, cbSceneParam._m0[89u].y, _1825 * cbSceneParam._m0[89u].x));
    float _1833 = fma(_1827, cbSceneParam._m0[90u].z, fma(_1826, cbSceneParam._m0[90u].y, _1825 * cbSceneParam._m0[90u].x));
    float _1836 = fma(_1827, cbSceneParam._m0[91u].z, fma(_1826, cbSceneParam._m0[91u].y, _1825 * cbSceneParam._m0[91u].x));
    float _1870 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1874 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1878 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1882 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1883 = _1870 / _1882;
    float _1884 = _1874 / _1882;
    float _1885 = _1878 / _1882;
    float _2032;
    float _2033;
    float _2034;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1912 = ((uint(_1885 > cbSceneParam._m0[59u].y) + uint(_1885 > cbSceneParam._m0[59u].x)) + uint(_1885 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1913 = _1912 + 43u;
        uint _1921 = _1912 + 44u;
        uint _1929 = _1912 + 45u;
        uint _1937 = _1912 + 46u;
        float _1948 = fma(_1882, cbSceneParam._m0[_1913].w, fma(_1878, cbSceneParam._m0[_1913].z, fma(_1874, cbSceneParam._m0[_1913].y, _1870 * cbSceneParam._m0[_1913].x)));
        float _1952 = fma(_1882, cbSceneParam._m0[_1921].w, fma(_1878, cbSceneParam._m0[_1921].z, fma(_1874, cbSceneParam._m0[_1921].y, _1870 * cbSceneParam._m0[_1921].x)));
        float _1960 = fma(_1882, cbSceneParam._m0[_1937].w, fma(_1878, cbSceneParam._m0[_1937].z, fma(_1874, cbSceneParam._m0[_1937].y, _1870 * cbSceneParam._m0[_1937].x)));
        float _1965 = cbSceneParam._m0[33u].z * _1960;
        float _1967 = cbSceneParam._m0[33u].w * _1960;
        float _1970 = fma(_1882, cbSceneParam._m0[_1929].w, fma(_1878, cbSceneParam._m0[_1929].z, fma(_1874, cbSceneParam._m0[_1929].y, _1870 * cbSceneParam._m0[_1929].x))) / _1960;
        float _2018 = (cbSceneParam._m0[33u].x - sqrt(((_1884 * _1884) + (_1883 * _1883)) + (_1885 * _1885))) * cbSceneParam._m0[33u].y;
        float _4297 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2025 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1965 + _1948) / _1960, (_1967 + _1952) / _1960), _1970), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1967 + _1948) / _1960, (_1952 - _1965) / _1960), _1970), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1948 - _1965) / _1960, (_1952 - _1967) / _1960), _1970), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1948 - _1967) / _1960, (_1965 + _1952) / _1960), _1970), 0.0)).x), vec4(0.25)));
        _2032 = 1.0 - (_2025 * cbSceneParam._m0[34u].x);
        _2033 = 1.0 - (_2025 * cbSceneParam._m0[34u].y);
        _2034 = 1.0 - (_2025 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2032 = 1.0;
        _2033 = 1.0;
        _2034 = 1.0;
    }
    float _2098;
    float _2100;
    float _2102;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2086 = fma(_1882, cbSceneParam._m0[63u].w, fma(_1878, cbSceneParam._m0[63u].z, fma(_1874, cbSceneParam._m0[63u].y, _1870 * cbSceneParam._m0[63u].x)));
        float _2087 = fma(_1882, cbSceneParam._m0[60u].w, fma(_1878, cbSceneParam._m0[60u].z, fma(_1874, cbSceneParam._m0[60u].y, _1870 * cbSceneParam._m0[60u].x))) / _2086;
        float _2088 = fma(_1882, cbSceneParam._m0[61u].w, fma(_1878, cbSceneParam._m0[61u].z, fma(_1874, cbSceneParam._m0[61u].y, _1870 * cbSceneParam._m0[61u].x))) / _2086;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2087 >= cbSceneParam._m0[64u].x) && (_2088 >= cbSceneParam._m0[64u].y)) && (_2087 <= cbSceneParam._m0[64u].z)) && (_2088 <= cbSceneParam._m0[64u].w))
        {
            float _2226 = fma(_1882, cbSceneParam._m0[62u].w, fma(_1878, cbSceneParam._m0[62u].z, fma(_1874, cbSceneParam._m0[62u].y, _1870 * cbSceneParam._m0[62u].x))) / _2086;
            float _2230 = isnan(cbSceneParam._m0[41u].w) ? _2226 : (isnan(_2226) ? cbSceneParam._m0[41u].w : max(_2226, cbSceneParam._m0[41u].w));
            float _2273 = (cbSceneParam._m0[33u].x - sqrt(((_1884 * _1884) + (_1883 * _1883)) + (_1885 * _1885))) * cbSceneParam._m0[33u].y;
            float _4313 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
            float _2280 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2087, cbSceneParam._m0[33u].w + _2088), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2087, _2088 - cbSceneParam._m0[33u].z), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2087 - cbSceneParam._m0[33u].z, _2088 - cbSceneParam._m0[33u].w), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2087 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2088), _2230), 0.0)).x), vec4(0.25)));
            float _2284 = 1.0 - (_2280 * cbSceneParam._m0[34u].x);
            float _2285 = 1.0 - (_2280 * cbSceneParam._m0[34u].y);
            float _2286 = 1.0 - (_2280 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2285) ? _2033 : (isnan(_2033) ? _2285 : min(_2033, _2285));
            frontier_phi_36_35_ladder_1 = isnan(_2286) ? _2034 : (isnan(_2034) ? _2286 : min(_2034, _2286));
            frontier_phi_36_35_ladder_2 = isnan(_2284) ? _2032 : (isnan(_2032) ? _2284 : min(_2032, _2284));
        }
        else
        {
            frontier_phi_36_35_ladder = _2033;
            frontier_phi_36_35_ladder_1 = _2034;
            frontier_phi_36_35_ladder_2 = _2032;
        }
        _2098 = frontier_phi_36_35_ladder_2;
        _2100 = frontier_phi_36_35_ladder;
        _2102 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2098 = _2032;
        _2100 = _2033;
        _2102 = _2034;
    }
    uvec4 _2107 = floatBitsToUint(cbInstanceData._m0[_784 + 5u]);
    uint _2109 = _2107.x * 14u;
    uint _2110 = _2109 + 13u;
    float _2117 = _809 + (-1.0);
    float _2122 = (cbLight._m0[_2110].x * _2117) + 1.0;
    float _2123 = (cbLight._m0[_2110].y * _2117) + 1.0;
    float _2124 = (cbLight._m0[_2110].z * _2117) + 1.0;
    float _2125 = (cbLight._m0[_2110].w * _2117) + 1.0;
    uint _2126 = _2109 + 5u;
    float _2132 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
    uint _2136 = _2109 + 4u;
    float _2145 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    uint _2149 = _2109 | 1u;
    float _2160 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_659, _660, _661));
    float _2163 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_659, _660, _661));
    float _4349 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _4360 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2168 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2170 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.3183098733425140380859375;
    float _2177 = ((cbLight._m0[_2126].x * _2132) * _2170) + (((cbLight._m0[_2136].x * _2098) * _2145) * _2168);
    float _2178 = ((_2132 * cbLight._m0[_2126].y) * _2170) + (((cbLight._m0[_2136].y * _2100) * _2145) * _2168);
    float _2179 = ((_2132 * cbLight._m0[_2126].z) * _2170) + (((cbLight._m0[_2136].z * _2102) * _2145) * _2168);
    uvec4 _2183 = floatBitsToUint(cbLight._m0[_2109 + 12u]);
    bool _2185 = _2183.x == 0u;
    float _2287;
    float _2289;
    float _2291;
    if (_2185)
    {
        _2287 = _2177;
        _2289 = _2178;
        _2291 = _2179;
    }
    else
    {
        uint _2295 = _2109 + 6u;
        float _2311 = (dot(vec3(cbLight._m0[_2109 + 2u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2312 = _2311 * _2311;
        float _4371 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2313 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2314 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2287 = (((cbLight._m0[_2295].x * 0.3183098733425140380859375) * _2313) * _2314) + _2177;
        _2289 = (((cbLight._m0[_2295].y * 0.3183098733425140380859375) * _2313) * _2314) + _2178;
        _2291 = (((cbLight._m0[_2295].z * 0.3183098733425140380859375) * _2313) * _2314) + _2179;
    }
    bool _2294 = _2183.y == 0u;
    float _2349;
    float _2351;
    float _2353;
    if (_2294)
    {
        _2349 = _2287;
        _2351 = _2289;
        _2353 = _2291;
    }
    else
    {
        uint _2511 = _2109 + 7u;
        float _2527 = (dot(vec3(cbLight._m0[_2109 + 3u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2528 = _2527 * _2527;
        float _4387 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2529 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2530 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2349 = (((cbLight._m0[_2511].x * 0.3183098733425140380859375) * _2529) * _2530) + _2287;
        _2351 = (((cbLight._m0[_2511].y * 0.3183098733425140380859375) * _2529) * _2530) + _2289;
        _2353 = (((cbLight._m0[_2511].z * 0.3183098733425140380859375) * _2529) * _2530) + _2291;
    }
    uint _2356 = _2109 + 8u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _662) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2109].x + _738;
    float _2372 = cbLight._m0[_2109].y + _739;
    float _2373 = cbLight._m0[_2109].z + _740;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2109].xyz));
    float _4403 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _4414 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2385 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2386 = dot(vec3(_659, _660, _661), vec3(_2378, _2379, _2380));
    float _4425 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2378, _2379, _2380));
    float _4436 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2370 * _2370;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2409 = (exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2410 = 1.0 - _2370;
    float _2421 = (0.5 / (((_2385 * ((_2384 * _2410) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2410) + _2370) * _2384))) * _2384;
    float _4447 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2423 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    uint _2437 = _2109 + 9u;
    float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _662) * 0.949999988079071044921875);
    float _2449 = _2448 * _2448;
    float _2450 = cbLight._m0[_2149].x + _738;
    float _2451 = cbLight._m0[_2149].y + _739;
    float _2452 = cbLight._m0[_2149].z + _740;
    float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
    float _2457 = _2456 * _2450;
    float _2458 = _2456 * _2451;
    float _2459 = _2456 * _2452;
    float _2460 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2149].xyz));
    float _4458 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2464 = dot(vec3(_659, _660, _661), vec3(_2457, _2458, _2459));
    float _4469 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2468 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2457, _2458, _2459));
    float _4480 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2472 = _2449 * _2449;
    float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
    float _2485 = (exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2486 = 1.0 - _2449;
    float _2496 = (0.5 / (((_2385 * ((_2463 * _2486) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2486) + _2449) * _2463))) * _2463;
    float _4491 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2498 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
    float _2508 = (((_2485 * cbLight._m0[_2437].x) * _2498) * _2132) + ((((cbLight._m0[_2356].x * _2098) * _2409) * _2423) * _2145);
    float _2509 = (((_2485 * cbLight._m0[_2437].y) * _2498) * _2132) + ((((cbLight._m0[_2356].y * _2100) * _2409) * _2423) * _2145);
    float _2510 = (((_2485 * cbLight._m0[_2437].z) * _2498) * _2132) + ((((cbLight._m0[_2356].z * _2102) * _2409) * _2423) * _2145);
    float _2566;
    float _2568;
    float _2570;
    if (_2185)
    {
        _2566 = _2508;
        _2568 = _2509;
        _2570 = _2510;
    }
    else
    {
        uint _2572 = _2109 + 2u;
        uint _2576 = _2109 + 10u;
        float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _662) * 0.949999988079071044921875);
        float _2591 = _2590 * _2590;
        float _2592 = cbLight._m0[_2572].x + _738;
        float _2593 = cbLight._m0[_2572].y + _739;
        float _2594 = cbLight._m0[_2572].z + _740;
        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
        float _2599 = _2598 * _2592;
        float _2600 = _2598 * _2593;
        float _2601 = _2598 * _2594;
        float _2602 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2572].xyz));
        float _4502 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2606 = dot(vec3(_659, _660, _661), vec3(_2599, _2600, _2601));
        float _4513 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2610 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2599, _2600, _2601));
        float _4524 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2614 = _2591 * _2591;
        float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
        float _2627 = (exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2628 = 1.0 - _2591;
        float _2638 = (0.5 / (((_2385 * ((_2605 * _2628) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2628) + _2591) * _2605))) * _2605;
        float _4535 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2640 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
        float _2641 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2566 = (((_2627 * cbLight._m0[_2576].x) * _2640) * _2641) + _2508;
        _2568 = (((_2627 * cbLight._m0[_2576].y) * _2640) * _2641) + _2509;
        _2570 = (((_2627 * cbLight._m0[_2576].z) * _2640) * _2641) + _2510;
    }
    float _2672;
    float _2674;
    float _2676;
    if (_2294)
    {
        _2672 = _2566;
        _2674 = _2568;
        _2676 = _2570;
    }
    else
    {
        uint _2683 = _2109 + 3u;
        uint _2687 = _2109 + 11u;
        float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2683].w)) * _662) * 0.949999988079071044921875);
        float _2702 = _2701 * _2701;
        float _2703 = cbLight._m0[_2683].x + _738;
        float _2704 = cbLight._m0[_2683].y + _739;
        float _2705 = cbLight._m0[_2683].z + _740;
        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
        float _2710 = _2709 * _2703;
        float _2711 = _2709 * _2704;
        float _2712 = _2709 * _2705;
        float _2713 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2683].xyz));
        float _4551 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2717 = dot(vec3(_659, _660, _661), vec3(_2710, _2711, _2712));
        float _4562 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2721 = dot(vec3(cbLight._m0[_2683].xyz), vec3(_2710, _2711, _2712));
        float _4573 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2725 = _2702 * _2702;
        float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
        float _2738 = (exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2739 = 1.0 - _2702;
        float _2749 = (0.5 / (((_2385 * ((_2716 * _2739) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2739) + _2702) * _2716))) * _2716;
        float _4584 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2751 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
        float _2752 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2672 = (((_2738 * cbLight._m0[_2687].x) * _2751) * _2752) + _2566;
        _2674 = (((_2738 * cbLight._m0[_2687].y) * _2751) * _2752) + _2568;
        _2676 = (((_2738 * cbLight._m0[_2687].z) * _2751) * _2752) + _2570;
    }
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    if (_2107.y == 0u)
    {
        uvec4 _2773 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2774 = _2773.x;
        uint _2785 = uint((float(_2773.y) * floor(float(uint(cbSceneParam._m0[85u].y * _747) / _2774))) + floor(float(uint(cbSceneParam._m0[85u].x * _746) / _2774)));
        float _2795 = (log2(_1885 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2796 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        uint _2799 = uint(isnan(14.0) ? _2796 : (isnan(_2796) ? 14.0 : min(_2796, 14.0)));
        uvec4 _2804 = texelFetch(g_lightClusterGridBuffer, int(((_2799 << 2u) + (_2785 << 6u)) >> 2u));
        uint _2805 = _2804.x;
        uint _2806 = _2773.z;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        if (((((1u << ((_2806 >> 4u) & 15u)) + 4294967295u) & _2805) == 0u) || ((_2806 & 240u) == 0u))
        {
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
        }
        else
        {
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            uint _3034 = 0u;
            uint _3043;
            bool _3044;
            for (;;)
            {
                _3043 = texelFetch(g_lightClassification, int((((_2799 << 5u) + (_2785 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                _3044 = _3043 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3044)
                {
                    frontier_phi_68_pred = _3033;
                    frontier_phi_68_pred_1 = _3032;
                    frontier_phi_68_pred_2 = _3031;
                    frontier_phi_68_pred_3 = _3029;
                    frontier_phi_68_pred_4 = _3028;
                    frontier_phi_68_pred_5 = _3030;
                }
                else
                {
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    uint _3158;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3043;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    for (;;)
                    {
                        uint _3162 = uint(findLSB(_3158)) + (_3034 << 5u);
                        uint _3159 = (_3158 + 4294967295u) & _3158;
                        uint _3164 = _3162 * 48u;
                        vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3184 = (_3162 * 48u) + 4u;
                        vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3203 = (_3162 * 48u) + 8u;
                        vec3 _3214 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x));
                        float _3218 = _3178.x - _1883;
                        float _3219 = _3178.y - _1884;
                        float _3220 = _3178.z - _1885;
                        float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                        float _3224 = inversesqrt(_3221);
                        float _3225 = _3224 * _3218;
                        float _3226 = _3224 * _3219;
                        float _3227 = _3224 * _3220;
                        float _3228 = dot(vec3(_765, _768, _771), vec3(_3225, _3226, _3227));
                        float _3233 = 1.0 - (_3221 * _3178.w);
                        float _4610 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3234 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3235 = sqrt(_3221) * _3197.w;
                        float _3238 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                        float _3239 = _3238 * _3238;
                        float _3242 = ((1.0 - _3239) * _3228) + _3239;
                        float _3245 = _3235 * _3235;
                        float _3249 = ((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3234) / ((_3245 * 0.699999988079071044921875) + 1.0);
                        float _3253 = (-0.0) - _1883;
                        float _3254 = (-0.0) - _1884;
                        float _3255 = (-0.0) - _1885;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3269 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                        float _3270 = 1.0 - _825;
                        float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                        float _3278 = _3277 * _3277;
                        float _3279 = _3278 * _3278;
                        float _3280 = _3260 + _3225;
                        float _3281 = _3261 + _3226;
                        float _3282 = _3262 + _3227;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3290 = dot(vec3(_765, _768, _771), vec3(_3260, _3261, _3262));
                        float _4626 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3294 = dot(vec3(_765, _768, _771), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                        float _4637 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                        float _3302 = _3238 * _3278;
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3228) + _3303;
                        float _4648 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3308 = 1.0 - _3278;
                        float _3318 = (0.5 / (((_3307 * ((_3293 * _3308) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3278) * _3293))) * _3307;
                        float _4659 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3329 = (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3301 * _3301) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125))) * _3234;
                        _3087 = (_3249 * _3197.x) + _3155;
                        _3088 = (_3249 * _3197.y) + _3156;
                        _3089 = (_3249 * _3197.z) + _3157;
                        _3084 = (_3329 * _3214.x) + _3152;
                        _3085 = (_3329 * _3214.y) + _3153;
                        _3086 = (_3329 * _3214.z) + _3154;
                        if (_3159 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3159;
                        }
                    }
                    frontier_phi_68_pred = _3089;
                    frontier_phi_68_pred_1 = _3088;
                    frontier_phi_68_pred_2 = _3087;
                    frontier_phi_68_pred_3 = _3085;
                    frontier_phi_68_pred_4 = _3084;
                    frontier_phi_68_pred_5 = _3086;
                }
                _2895 = frontier_phi_68_pred;
                _2893 = frontier_phi_68_pred_1;
                _2891 = frontier_phi_68_pred_2;
                _2887 = frontier_phi_68_pred_3;
                _2885 = frontier_phi_68_pred_4;
                _2889 = frontier_phi_68_pred_5;
                uint _3035 = _3034 + 1u;
                if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3028 = _2885;
                    _3029 = _2887;
                    _3030 = _2889;
                    _3031 = _2891;
                    _3032 = _2893;
                    _3033 = _2895;
                    _3034 = _3035;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
        }
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.z;
        uint _2901 = (_2899 >> 8u) & 15u;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((4294967295u << _2901) & _2805) == 0u)
        {
            _2996 = _2884;
            _2998 = _2886;
            _3000 = _2888;
            _3002 = _2890;
            _3004 = _2892;
            _3006 = _2894;
        }
        else
        {
            float _3021 = inversesqrt(dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885)));
            float _3022 = _3021 * _1883;
            float _3023 = _3021 * _1884;
            float _3024 = _3021 * _1885;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2901 < ((_2899 >> 12u) & 15u))
            {
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3135 = _2884;
                float _3136 = _2886;
                float _3137 = _2888;
                float _3138 = _2890;
                float _3139 = _2892;
                float _3140 = _2894;
                uint _3141 = _2901;
                uint _3150;
                bool _3151;
                for (;;)
                {
                    _3150 = texelFetch(g_lightClassification, int((((_2799 << 5u) + (_2785 << 9u)) + (_3141 << 2u)) >> 2u)).x;
                    _3151 = _3150 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3151)
                    {
                        frontier_phi_74_pred = _3137;
                        frontier_phi_74_pred_1 = _3136;
                        frontier_phi_74_pred_2 = _3135;
                        frontier_phi_74_pred_3 = _3140;
                        frontier_phi_74_pred_4 = _3139;
                        frontier_phi_74_pred_5 = _3138;
                    }
                    else
                    {
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3347 = _3135;
                        float _3348 = _3136;
                        float _3349 = _3137;
                        float _3350 = _3138;
                        float _3351 = _3139;
                        float _3352 = _3140;
                        uint _3353 = _3150;
                        uint _3354;
                        vec4 _3379;
                        float _3380;
                        vec4 _3395;
                        vec3 _3407;
                        vec4 _3422;
                        vec4 _3438;
                        float _3485;
                        bool _3486;
                        for (;;)
                        {
                            uint _3364 = ((_3141 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3353));
                            _3354 = (_3353 + 4294967295u) & _3353;
                            uint _3366 = _3364 * 40u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3380 = _3379.w;
                            uint _3382 = (_3364 * 40u) + 4u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3364 * 40u) + 8u;
                            _3407 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x));
                            uint _3409 = (_3364 * 40u) + 16u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3425 = (_3364 * 40u) + 20u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3441 = (_3364 * 40u) + 24u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3460 = (_3364 * 40u) + 28u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3485 = fma(_1885, _3473.z, fma(_1884, _3473.y, _3473.x * _1883)) + _3473.w;
                            _3486 = !((fma(_1885, _3454.z, fma(_1884, _3454.y, _3454.x * _1883)) + _3454.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3486)
                            {
                                float _3513 = _3379.x - _1883;
                                float _3514 = _3379.y - _1884;
                                float _3515 = _3379.z - _1885;
                                float _3516 = dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515));
                                float _3519 = inversesqrt(_3516);
                                float _3520 = _3519 * _3513;
                                float _3521 = _3519 * _3514;
                                float _3522 = _3519 * _3515;
                                float _3526 = 1.0 - (_3516 / (_3380 * _3380));
                                float _4670 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3531 = sqrt(_3516) * _3395.w;
                                float _3533 = 1.39999997615814208984375 / (_3531 + 1.39999997615814208984375);
                                float _3534 = _3533 * _3533;
                                float _3537 = ((1.0 - _3534) * dot(vec3(_3520, _3521, _3522), vec3(_765, _768, _771))) + _3534;
                                float _3540 = _3531 * _3531;
                                float _3544 = (fma(_1885, _3422.z, fma(_1884, _3422.y, _3422.x * _1883)) + _3422.w) / _3485;
                                float _3545 = (fma(_1885, _3438.z, fma(_1884, _3438.y, _3438.x * _1883)) + _3438.w) / _3485;
                                float _3549 = 1.0 - dot(vec2(_3544, _3545), vec2(_3544, _3545));
                                float _4686 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3551 = _3550 * (((isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0))) * _3527) / ((_3540 * 0.699999988079071044921875) + 1.0));
                                float _3563 = exp2(log2(1.0 / ((_3540 * 3.5) + 5.0)) * 0.25);
                                float _3564 = 1.0 - _825;
                                float _3571 = sqrt(1.0 - ((1.0 - (_3564 * _3564)) * (1.0 - (_3563 * _3563))));
                                float _3572 = _3571 * _3571;
                                float _3573 = _3572 * _3572;
                                float _3574 = _3520 - _3022;
                                float _3575 = _3521 - _3023;
                                float _3576 = _3522 - _3024;
                                float _3580 = inversesqrt(dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576)));
                                float _3584 = dot(vec3(_765, _768, _771), vec3((-0.0) - _3022, (-0.0) - _3023, (-0.0) - _3024));
                                float _4697 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3588 = dot(vec3(_765, _768, _771), vec3(_3580 * _3574, _3580 * _3575, _3580 * _3576));
                                float _4708 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3595 = ((_3591 * _3591) * (_3573 + (-1.0))) + 1.0;
                                float _3596 = _3533 * _3572;
                                float _3597 = _3596 * _3596;
                                float _3603 = ((1.0 - _3597) * dot(vec3(_765, _768, _771), vec3(_3520, _3521, _3522))) + _3597;
                                float _4719 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3605 = 1.0 - _3572;
                                float _3615 = (0.5 / (((_3604 * ((_3587 * _3605) + _3572)) + 9.9999999392252902907785028219223e-09) + (((_3604 * _3605) + _3572) * _3587))) * _3604;
                                float _4730 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3625 = (_3550 * _3527) * (((_3573 * 3.1415927410125732421875) * (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) / ((_3595 * _3595) * ((_3540 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3625 * _3407.z;
                                frontier_phi_80_pred_1 = _3625 * _3407.y;
                                frontier_phi_80_pred_2 = _3625 * _3407.x;
                                frontier_phi_80_pred_3 = _3551 * _3395.z;
                                frontier_phi_80_pred_4 = _3551 * _3395.y;
                                frontier_phi_80_pred_5 = _3551 * _3395.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3631 = frontier_phi_80_pred;
                            _3630 = frontier_phi_80_pred_1;
                            _3629 = frontier_phi_80_pred_2;
                            _3634 = frontier_phi_80_pred_3;
                            _3633 = frontier_phi_80_pred_4;
                            _3632 = frontier_phi_80_pred_5;
                            _3337 = _3632 + _3350;
                            _3338 = _3633 + _3351;
                            _3339 = _3634 + _3352;
                            _3334 = _3629 + _3347;
                            _3335 = _3630 + _3348;
                            _3336 = _3631 + _3349;
                            if (_3354 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3354;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3336;
                        frontier_phi_74_pred_1 = _3335;
                        frontier_phi_74_pred_2 = _3334;
                        frontier_phi_74_pred_3 = _3339;
                        frontier_phi_74_pred_4 = _3338;
                        frontier_phi_74_pred_5 = _3337;
                    }
                    _3001 = frontier_phi_74_pred;
                    _2999 = frontier_phi_74_pred_1;
                    _2997 = frontier_phi_74_pred_2;
                    _3007 = frontier_phi_74_pred_3;
                    _3005 = frontier_phi_74_pred_4;
                    _3003 = frontier_phi_74_pred_5;
                    uint _3142 = _3141 + 1u;
                    if (_3142 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3135 = _2997;
                        _3136 = _2999;
                        _3137 = _3001;
                        _3138 = _3003;
                        _3139 = _3005;
                        _3140 = _3007;
                        _3141 = _3142;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3005;
                frontier_phi_62_63_ladder_1 = _3003;
                frontier_phi_62_63_ladder_2 = _3001;
                frontier_phi_62_63_ladder_3 = _3007;
                frontier_phi_62_63_ladder_4 = _2999;
                frontier_phi_62_63_ladder_5 = _2997;
            }
            else
            {
                frontier_phi_62_63_ladder = _2892;
                frontier_phi_62_63_ladder_1 = _2890;
                frontier_phi_62_63_ladder_2 = _2888;
                frontier_phi_62_63_ladder_3 = _2894;
                frontier_phi_62_63_ladder_4 = _2886;
                frontier_phi_62_63_ladder_5 = _2884;
            }
            _2996 = frontier_phi_62_63_ladder_5;
            _2998 = frontier_phi_62_63_ladder_4;
            _3000 = frontier_phi_62_63_ladder_2;
            _3002 = frontier_phi_62_63_ladder_1;
            _3004 = frontier_phi_62_63_ladder;
            _3006 = frontier_phi_62_63_ladder_3;
        }
        float _3011 = isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0));
        _2817 = (_3011 * _3002) + _2349;
        _2819 = (_3011 * _3004) + _2351;
        _2821 = (_3011 * _3006) + _2353;
        _2823 = ((_2996 * 0.039999999105930328369140625) * _3011) + _2672;
        _2825 = ((_2998 * 0.039999999105930328369140625) * _3011) + _2674;
        _2827 = ((_3000 * 0.039999999105930328369140625) * _3011) + _2676;
    }
    else
    {
        _2817 = _2349;
        _2819 = _2351;
        _2821 = _2353;
        _2823 = _2672;
        _2825 = _2674;
        _2827 = _2676;
    }
    float _4746 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4757 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4768 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    uint _2847 = _784 + 6u;
    float _2855 = _746 / cbSceneParam._m0[86u].x;
    float _2856 = _747 / cbSceneParam._m0[86u].y;
    vec4 _2870 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2855, _2856, (log2((isnan(cbSceneParam._m0[77u].w) ? _681 : (isnan(_681) ? cbSceneParam._m0[77u].w : min(_681, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2872 = _2870.x;
    float _2873 = _2870.y;
    float _2874 = _2870.z;
    float _2875 = _2870.w;
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    if (_681 > cbSceneParam._m0[78u].w)
    {
        float _2909 = isnan(_681) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _681 : min(cbSceneParam._m0[80u].w, _681));
        float _2910 = _2909 / _681;
        float _2921 = _2910 * _731;
        float _2922 = _732 * _2910;
        float _2923 = (-0.0) - _2922;
        float _2924 = _2910 * _733;
        float _2926 = (cbSceneParam._m0[77u].w * _2923) / _2909;
        float _2927 = _2926 + cbSceneParam._m0[79u].w;
        float _2928 = cbSceneParam._m0[79u].w - _2922;
        float _2934 = sqrt(((_2921 * _2921) + (_2922 * _2922)) + (_2924 * _2924));
        float _2937 = (1.0 - (cbSceneParam._m0[77u].w / _2909)) * _2934;
        float _2942 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2944 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3097;
        if (abs((_2923 - _2926) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3097 = ((((_2927 > 0.0) ? exp2(_2942 * _2927) : (2.0 - exp2(_2944 * _2927))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2937;
        }
        else
        {
            float _3057 = 1.0 / cbSceneParam._m0[80u].x;
            float _3058 = isnan(_2928) ? _2927 : (isnan(_2927) ? _2928 : max(_2927, _2928));
            float _3059 = isnan(_2928) ? _2927 : (isnan(_2927) ? _2928 : min(_2927, _2928));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            _3097 = ((abs(_2934 / _2923) * cbSceneParam._m0[80u].y) * ((((_3068 - _3069) * 2.0) - ((exp2(_2942 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0)))) - exp2(_2942 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))))) * _3057)) - ((exp2(_2944 * _3068) - exp2(_2944 * _3069)) * _3057))) + (_2937 * cbSceneParam._m0[80u].z);
        }
        vec4 _3099 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2855, _2856, 1.0), 0.0);
        float _3108 = exp2((_3097 * (-1.44269502162933349609375)) * (1.0 - _3099.w));
        float _3109 = log2(_3108);
        float _3125 = log2(_2875);
        _2946 = (exp2(_3125 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].x)) * _3099.x) / cbSceneParam._m0[78u].x)) + _2872;
        _2948 = (exp2(_3125 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].y)) * _3099.y) / cbSceneParam._m0[78u].y)) + _2873;
        _2950 = (exp2(_3125 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].z)) * _3099.z) / cbSceneParam._m0[78u].z)) + _2874;
        _2952 = _3108 * _2875;
    }
    else
    {
        _2946 = _2872;
        _2948 = _2873;
        _2950 = _2874;
        _2952 = _2875;
    }
    float _2964 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2965 = _2964 == 3.0;
    float _2966 = log2(_2952);
    float _2973 = exp2(_2966 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2817 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _809))) + ((_2823 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1615)) * cbPerFrame._m0[3u].x));
    float _2974 = exp2(_2966 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2819 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _809))) + ((_2825 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1615)) * cbPerFrame._m0[3u].x));
    float _2975 = exp2(_2966 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2821 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _809))) + ((_2827 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1615)) * cbPerFrame._m0[3u].x));
    float _2984 = (_2964 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2984 * (_2965 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2946)));
    SV_Target.y = _2984 * (_2965 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2948)));
    SV_Target.z = _2984 * (_2965 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2950)));
    SV_Target.w = cbInstanceData._m0[_2847].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2847].w;
}


