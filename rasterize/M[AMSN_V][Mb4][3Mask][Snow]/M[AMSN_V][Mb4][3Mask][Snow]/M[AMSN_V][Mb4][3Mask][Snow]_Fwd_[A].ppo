#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1221;
float _3586;
float _3587;
float _3588;
float _3589;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _260 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _266 = _260.x * cbMtdParam._m0[10u].x;
    float _267 = _260.y * cbMtdParam._m0[10u].y;
    float _268 = _260.z * cbMtdParam._m0[10u].z;
    vec4 _287 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    vec4 _306 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _337 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x;
    float _348 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((((1.0 - TEXCOORD_3.x) - _306.x) * 2.0) - _337)) + 1.0;
    float _3598 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _349 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _356 = (_349 * ((_287.x * cbMtdParam._m0[11u].x) - _266)) + _266;
    float _357 = (_349 * ((_287.y * cbMtdParam._m0[11u].y) - _267)) + _267;
    float _358 = (_349 * ((_287.z * cbMtdParam._m0[11u].z) - _268)) + _268;
    vec4 _376 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _389 = ((((((1.0 - TEXCOORD_3.y) - _306.y) * 2.0) - _337) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3609 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _397 = (((_376.x * cbMtdParam._m0[12u].x) - _356) * _390) + _356;
    float _398 = (_390 * ((_376.y * cbMtdParam._m0[12u].y) - _357)) + _357;
    float _399 = (_390 * ((_376.z * cbMtdParam._m0[12u].z) - _358)) + _358;
    vec4 _417 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _430 = ((((((1.0 - TEXCOORD_3.z) - _306.z) * 2.0) - _337) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3620 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _438 = (((_417.x * cbMtdParam._m0[13u].x) - _397) * _431) + _397;
    float _439 = (_431 * ((_417.y * cbMtdParam._m0[13u].y) - _398)) + _398;
    float _440 = (_431 * ((_417.z * cbMtdParam._m0[13u].z) - _399)) + _399;
    vec4 _458 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    vec4 _480 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _484 = _480.z;
    vec4 _496 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _507 = ((_496.x - _482) * _349) + _482;
    float _508 = ((_496.y - _483) * _349) + _483;
    float _509 = ((_496.z - _484) * _349) + _484;
    vec4 _522 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _533 = ((_522.x - _507) * _390) + _507;
    float _534 = ((_522.y - _508) * _390) + _508;
    float _535 = ((_522.z - _509) * _390) + _509;
    vec4 _548 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _561 = ((_548.z - _535) * _431) + _535;
    float _564 = ((((_548.x - _533) * _431) + _533) * 2.0) + (-1.0);
    float _566 = ((((_548.y - _534) * _431) + _534) * 2.0) + (-1.0);
    float _567 = dot(vec2(_564, _566), vec2(_564, _566));
    float _3631 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))));
    float _575 = fma(_572, _238, fma(_566, _231, _564 * _217));
    float _578 = fma(_572, _239, fma(_566, _232, _564 * _218));
    float _581 = fma(_572, _240, fma(_566, _233, _564 * _219));
    float _590 = exp2(log2(inversesqrt(dot(vec3(_575, _578, _581), vec3(_575, _578, _581))) * _578) * cbMtdParam._m0[15u].y) * cbMtdParam._m0[14u].y;
    float _3642 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _594 = 3.0 - (_592 * 2.0);
    float _599 = _592 * _592;
    float _606 = ((_599 * ((_458.x * cbMtdParam._m0[9u].x) - _438)) * _594) + _438;
    float _607 = ((_599 * ((_458.y * cbMtdParam._m0[9u].y) - _439)) * _594) + _439;
    float _608 = ((_599 * ((_458.z * cbMtdParam._m0[9u].z) - _440)) * _594) + _440;
    vec4 _620 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _626 = (_620.x * 2.0) + (-1.0);
    float _627 = (_620.y * 2.0) + (-1.0);
    float _628 = dot(vec2(_626, _627), vec2(_626, _627));
    float _3664 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _643 = ((_599 * (_626 - _564)) * _594) + _564;
    float _644 = ((_599 * (_627 - _566)) * _594) + _566;
    float _645 = ((_599 * (sqrt(1.0 - (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) - _572)) * _594) + _572;
    float _648 = fma(_645, _238, fma(_644, _231, _643 * _217));
    float _651 = fma(_645, _239, fma(_644, _232, _643 * _218));
    float _654 = fma(_645, _240, fma(_644, _233, _643 * _219));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    float _659 = _658 * _648;
    float _660 = _658 * _651;
    float _661 = _658 * _654;
    float _3675 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _662 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3697 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _3708 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _681 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _731 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _721);
    float _732 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _721);
    float _733 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _721);
    float _737 = inversesqrt(dot(vec3(_731, _732, _733), vec3(_731, _732, _733)));
    float _738 = _731 * _737;
    float _739 = _732 * _737;
    float _740 = _733 * _737;
    vec4 _745 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _747 = _745.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _900 = sqrt(((_731 * _731) + (_732 * _732)) + (_733 * _733));
        float _906 = (cbMatDynParam._m0[5u].x * _900) + cbMatDynParam._m0[5u].y;
        float _3719 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _911 = (cbMatDynParam._m0[5u].z * _900) + cbMatDynParam._m0[5u].w;
        float _3730 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) - _907)) + _907) < ((_747 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _758 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _759 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _777 = fma(_661, cbSceneParam._m0[5u].z, fma(_660, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _659));
    float _780 = fma(_661, cbSceneParam._m0[6u].z, fma(_660, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _659));
    float _783 = fma(_661, cbSceneParam._m0[7u].z, fma(_660, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _659));
    uint _796 = uint(roundEven(NORMAL.w)) * 13u;
    uint _797 = _796 + 9u;
    uint _798 = _797 + uint(cbMatDynParam._m0[0u].w);
    float _804 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) * cbInstanceData._m0[_798].x;
    float _805 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) * cbInstanceData._m0[_798].y;
    float _806 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * cbInstanceData._m0[_798].z;
    float _3741 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    vec4 _818 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _758, cbSceneParam._m0[86u].y * _759));
    float _821 = _818.x * TEXCOORD_3.w;
    float _822 = dot(vec3(_659, _660, _661), vec3(_738, _739, _740));
    float _825 = _822 * 2.0;
    float _829 = (_825 * _659) - _738;
    float _830 = (_825 * _660) - _739;
    float _831 = (_825 * _661) - _740;
    float _835 = abs(dot(vec3(_738, _739, _740), vec3(_659, _660, _661)));
    float _3774 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _837 = sqrt(_662);
    float _849 = exp2((_837 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_837 * 3.0));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1220;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _945 = fma(_889, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881));
        float _949 = fma(_889, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881));
        float _953 = fma(_889, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881));
        float _978 = _881 + _659;
        float _979 = _885 + _660;
        float _980 = _889 + _661;
        float _990 = fma(_980, cbModelParam._m0[26u].z, fma(_979, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978)) - _945;
        float _991 = fma(_980, cbModelParam._m0[27u].z, fma(_979, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978)) - _949;
        float _992 = fma(_980, cbModelParam._m0[28u].z, fma(_979, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978)) - _953;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_945 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_949 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[34u].z) + ((((((_953 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1048 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1014.x + (-0.5));
        float _1050 = _1048 * (_1014.y + (-0.5));
        float _1051 = _1048 * (_1014.z + (-0.5));
        float _1058 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1021.x + (-0.5));
        float _1060 = _1058 * (_1021.y + (-0.5));
        float _1061 = _1058 * (_1021.z + (-0.5));
        float _1068 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1028.x + (-0.5));
        float _1070 = _1068 * (_1028.y + (-0.5));
        float _1071 = _1068 * (_1028.z + (-0.5));
        float _1078 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1035.x + (-0.5));
        float _1080 = _1078 * (_1035.y + (-0.5));
        float _1081 = _1078 * (_1035.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1102 = (dot(vec3(_659, _660, _661), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1112 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3822 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1114 + 1.0))) + _1119) * _1082;
        float _1129 = _1050 * 0.5;
        float _1130 = _1060 * 0.5;
        float _1131 = _1070 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_659, _660, _661), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3855 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1156 + 1.0))) + _1161) * _1083;
        float _1171 = _1051 * 0.5;
        float _1172 = _1061 * 0.5;
        float _1173 = _1071 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_659, _660, _661), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3888 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1198 + 1.0))) + _1203) * _1084;
        _1220 = _1051;
        _1222 = _1050;
        _1223 = _1049;
        _1224 = _1061;
        _1225 = _1060;
        _1226 = _1059;
        _1227 = _1071;
        _1228 = _1070;
        _1229 = _1069;
        _1230 = _1084;
        _1231 = _1083;
        _1232 = _1082;
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _1221;
        _1222 = _1221;
        _1223 = _1221;
        _1224 = _1221;
        _1225 = _1221;
        _1226 = _1221;
        _1227 = _1221;
        _1228 = _1221;
        _1229 = _1221;
        _1230 = _1221;
        _1231 = _1221;
        _1232 = _1221;
        _1233 = 0.0;
        _1234 = 0.0;
        _1235 = 0.0;
    }
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1264 = fma(_889, cbModelParam._m0[30u].z, fma(_885, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _881));
        float _1268 = fma(_889, cbModelParam._m0[31u].z, fma(_885, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _881));
        float _1272 = fma(_889, cbModelParam._m0[32u].z, fma(_885, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _881));
        float _1295 = _881 + _659;
        float _1296 = _885 + _660;
        float _1297 = _889 + _661;
        float _1307 = fma(_1297, cbModelParam._m0[30u].z, fma(_1296, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1295)) - _1264;
        float _1308 = fma(_1297, cbModelParam._m0[31u].z, fma(_1296, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1295)) - _1268;
        float _1309 = fma(_1297, cbModelParam._m0[32u].z, fma(_1296, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1295)) - _1272;
        float _1313 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
        float _1326 = ((_1313 * _1307) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1264 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1313 * _1308) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1268 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1313 * _1309) / cbModelParam._m0[35u].z) + ((((((_1272 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        float _1363 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1330.x + (-0.5));
        float _1365 = _1363 * (_1330.y + (-0.5));
        float _1366 = _1363 * (_1330.z + (-0.5));
        float _1373 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1337.x + (-0.5));
        float _1375 = _1373 * (_1337.y + (-0.5));
        float _1376 = _1373 * (_1337.z + (-0.5));
        float _1383 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1344.x + (-0.5));
        float _1385 = _1383 * (_1344.y + (-0.5));
        float _1386 = _1383 * (_1344.z + (-0.5));
        float _1393 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1351.x + (-0.5));
        float _1395 = _1393 * (_1351.y + (-0.5));
        float _1396 = _1393 * (_1351.z + (-0.5));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = _1364 * 0.5;
        float _1401 = _1374 * 0.5;
        float _1402 = _1384 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_659, _660, _661), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3951 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1427 + 1.0))) + _1432) * _1397;
        float _1442 = _1365 * 0.5;
        float _1443 = _1375 * 0.5;
        float _1444 = _1385 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_659, _660, _661), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _3984 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1469 + 1.0))) + _1474) * _1398;
        float _1484 = _1366 * 0.5;
        float _1485 = _1376 * 0.5;
        float _1486 = _1386 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_659, _660, _661), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4017 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1511 + 1.0))) + _1516) * _1399;
        _1533 = _1366;
        _1534 = _1365;
        _1535 = _1364;
        _1536 = _1376;
        _1537 = _1375;
        _1538 = _1374;
        _1539 = _1386;
        _1540 = _1385;
        _1541 = _1384;
        _1542 = _1399;
        _1543 = _1398;
        _1544 = _1397;
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1221;
        _1534 = _1221;
        _1535 = _1221;
        _1536 = _1221;
        _1537 = _1221;
        _1538 = _1221;
        _1539 = _1221;
        _1540 = _1221;
        _1541 = _1221;
        _1542 = _1221;
        _1543 = _1221;
        _1544 = _1221;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1233)) + _1233;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1234)) + _1234;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1235)) + _1235;
    float _1580 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1583 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1586 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1557));
    float _1601 = _829 * 0.5;
    float _1602 = _830 * 0.5;
    float _1603 = _831 * 0.5;
    float _1604 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1607 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1610 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1644;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1617 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1220, _1224, _1227, _1230));
        float _1621 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1222, _1225, _1228, _1231));
        float _1625 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1223, _1226, _1229, _1232));
        float _1632 = dot(vec4(cbModelParam._m0[39u]), vec4(_1601, _1602, _1603, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1655;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1646 = dot(vec4(cbModelParam._m0[40u]), vec4(_1601, _1602, _1603, 1.0));
        _1655 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1655 = 1.0;
    }
    float _1659 = (_1655 * cbModelParam._m0[1u].x) + (_1644 * (1.0 - cbModelParam._m0[1u].x));
    float _1669 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _662);
    float _1670 = isnan(_1669) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1669 : min(cbModelParam._m0[25u].z, _1669));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1717 = fma(_889, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881)) + cbModelParam._m0[13u].w;
        float _1721 = fma(_889, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881)) + cbModelParam._m0[14u].w;
        float _1725 = fma(_889, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881)) + cbModelParam._m0[15u].w;
        float _1728 = fma(_831, cbModelParam._m0[13u].z, fma(_830, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829));
        float _1731 = fma(_831, cbModelParam._m0[14u].z, fma(_830, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829));
        float _1734 = fma(_831, cbModelParam._m0[15u].z, fma(_830, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829));
        float _1762;
        if (_1728 > 0.0)
        {
            _1762 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1762 = frontier_phi_19_17_ladder;
        }
        float _1966;
        if (_1731 > 0.0)
        {
            _1966 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1966 = frontier_phi_28_24_ladder;
        }
        float _2209;
        if (_1734 > 0.0)
        {
            _2209 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2209 = frontier_phi_40_35_ladder;
        }
        float _2211 = isnan(_1966) ? _1762 : (isnan(_1762) ? _1966 : min(_1762, _1966));
        float _2212 = isnan(_2209) ? _2211 : (isnan(_2211) ? _2209 : min(_2211, _2209));
        float _2216 = (_2212 * _1728) + _1717;
        float _2217 = (_2212 * _1731) + _1721;
        float _2218 = (_2212 * _1734) + _1725;
        float _2219 = _2212 * 9.9999997473787516355514526367188e-05;
        float _2221 = (-1.0) - _2219;
        float _2223 = _2219 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2218 > _2223) || ((_2218 < _2221) || ((_2217 > _2223) || ((_2217 < _2221) || ((_2216 < _2221) || (_2216 > _2223))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2342 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2218, cbModelParam._m0[9u].z, fma(_2217, cbModelParam._m0[9u].y, _2216 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2218, cbModelParam._m0[10u].z, fma(_2217, cbModelParam._m0[10u].y, _2216 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2218, cbModelParam._m0[11u].z, fma(_2217, cbModelParam._m0[11u].y, _2216 * cbModelParam._m0[11u].x))), _1670);
            frontier_phi_18_40_ladder = _2342.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2342.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2342.x * cbModelParam._m0[1u].y;
        }
        _1750 = frontier_phi_18_40_ladder_2;
        _1752 = frontier_phi_18_40_ladder_1;
        _1754 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_829, _830, _831), _1670);
        _1750 = _1738.x * cbModelParam._m0[1u].y;
        _1752 = _1738.y * cbModelParam._m0[1u].y;
        _1754 = _1738.z * cbModelParam._m0[1u].y;
    }
    float _1758 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _662);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1758 : min(cbModelParam._m0[25u].w, _1758));
    float _1852;
    float _1854;
    float _1856;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1816 = fma(_889, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881)) + cbModelParam._m0[21u].w;
        float _1820 = fma(_889, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881)) + cbModelParam._m0[22u].w;
        float _1824 = fma(_889, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881)) + cbModelParam._m0[23u].w;
        float _1827 = fma(_831, cbModelParam._m0[21u].z, fma(_830, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829));
        float _1830 = fma(_831, cbModelParam._m0[22u].z, fma(_830, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829));
        float _1833 = fma(_831, cbModelParam._m0[23u].z, fma(_830, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829));
        float _1971;
        if (_1827 > 0.0)
        {
            _1971 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1971 = frontier_phi_30_26_ladder;
        }
        float _2236;
        if (_1830 > 0.0)
        {
            _2236 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2236 = frontier_phi_42_37_ladder;
        }
        float _2441;
        if (_1833 > 0.0)
        {
            _2441 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2441 = frontier_phi_51_48_ladder;
        }
        float _2443 = isnan(_2236) ? _1971 : (isnan(_1971) ? _2236 : min(_1971, _2236));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1827) + _1816;
        float _2449 = (_2444 * _1830) + _1820;
        float _2450 = (_2444 * _1833) + _1824;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2451;
        float _2454 = _2451 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2450 > _2454) || ((_2450 < _2452) || ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 < _2452) || (_2448 > _2454))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2450, cbModelParam._m0[17u].z, fma(_2449, cbModelParam._m0[17u].y, _2448 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2450, cbModelParam._m0[18u].z, fma(_2449, cbModelParam._m0[18u].y, _2448 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2450, cbModelParam._m0[19u].z, fma(_2449, cbModelParam._m0[19u].y, _2448 * cbModelParam._m0[19u].x))), _1759);
            frontier_phi_27_51_ladder = _2648.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2648.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2648.x * cbModelParam._m0[1u].z;
        }
        _1852 = frontier_phi_27_51_ladder_2;
        _1854 = frontier_phi_27_51_ladder_1;
        _1856 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_829, _830, _831), _1759);
        _1852 = _1836.x * cbModelParam._m0[1u].z;
        _1854 = _1836.y * cbModelParam._m0[1u].z;
        _1856 = _1836.z * cbModelParam._m0[1u].z;
    }
    float _1868 = ((((1.0 - _849) * ((_837 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_849 * _837)) * _821;
    float _1869 = _1868 * ((cbModelParam._m0[1u].w * (_1852 - _1750)) + _1750);
    float _1870 = _1868 * ((cbModelParam._m0[1u].w * (_1854 - _1752)) + _1752);
    float _1871 = _1868 * ((cbModelParam._m0[1u].w * (_1856 - _1754)) + _1754);
    float _1874 = fma(_1871, cbSceneParam._m0[89u].z, fma(_1870, cbSceneParam._m0[89u].y, _1869 * cbSceneParam._m0[89u].x));
    float _1877 = fma(_1871, cbSceneParam._m0[90u].z, fma(_1870, cbSceneParam._m0[90u].y, _1869 * cbSceneParam._m0[90u].x));
    float _1880 = fma(_1871, cbSceneParam._m0[91u].z, fma(_1870, cbSceneParam._m0[91u].y, _1869 * cbSceneParam._m0[91u].x));
    uvec4 _1890 = floatBitsToUint(cbInstanceData._m0[_796 + 5u]);
    uint _1892 = _1890.x * 14u;
    uint _1893 = _1892 + 13u;
    float _1900 = _821 + (-1.0);
    float _1905 = (cbLight._m0[_1893].x * _1900) + 1.0;
    float _1906 = (cbLight._m0[_1893].y * _1900) + 1.0;
    float _1907 = (cbLight._m0[_1893].z * _1900) + 1.0;
    float _1908 = (cbLight._m0[_1893].w * _1900) + 1.0;
    uint _1909 = _1892 + 5u;
    float _1915 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1919 = _1892 + 4u;
    float _1925 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
    uint _1929 = _1892 | 1u;
    float _1940 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_659, _660, _661));
    float _1943 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_659, _660, _661));
    float _4153 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _4164 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1948 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * 0.3183098733425140380859375;
    float _1950 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.3183098733425140380859375;
    float _1957 = ((cbLight._m0[_1909].x * _1915) * _1950) + ((cbLight._m0[_1919].x * _1925) * _1948);
    float _1958 = ((_1915 * cbLight._m0[_1909].y) * _1950) + ((_1925 * cbLight._m0[_1919].y) * _1948);
    float _1959 = ((_1915 * cbLight._m0[_1909].z) * _1950) + ((_1925 * cbLight._m0[_1919].z) * _1948);
    uvec4 _1963 = floatBitsToUint(cbLight._m0[_1892 + 12u]);
    bool _1965 = _1963.x == 0u;
    float _1976;
    float _1978;
    float _1980;
    if (_1965)
    {
        _1976 = _1957;
        _1978 = _1958;
        _1980 = _1959;
    }
    else
    {
        uint _1984 = _1892 + 6u;
        float _2000 = (dot(vec3(cbLight._m0[_1892 + 2u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2001 = _2000 * _2000;
        float _4175 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2002 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2003 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _1976 = (((cbLight._m0[_1984].x * 0.3183098733425140380859375) * _2002) * _2003) + _1957;
        _1978 = (((cbLight._m0[_1984].y * 0.3183098733425140380859375) * _2002) * _2003) + _1958;
        _1980 = (((cbLight._m0[_1984].z * 0.3183098733425140380859375) * _2002) * _2003) + _1959;
    }
    bool _1983 = _1963.y == 0u;
    float _2021;
    float _2023;
    float _2025;
    if (_1983)
    {
        _2021 = _1976;
        _2023 = _1978;
        _2025 = _1980;
    }
    else
    {
        uint _2180 = _1892 + 7u;
        float _2196 = (dot(vec3(cbLight._m0[_1892 + 3u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2197 = _2196 * _2196;
        float _4191 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2198 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2199 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2021 = (((cbLight._m0[_2180].x * 0.3183098733425140380859375) * _2198) * _2199) + _1976;
        _2023 = (((cbLight._m0[_2180].y * 0.3183098733425140380859375) * _2198) * _2199) + _1978;
        _2025 = (((cbLight._m0[_2180].z * 0.3183098733425140380859375) * _2198) * _2199) + _1980;
    }
    uint _2028 = _1892 + 8u;
    float _2041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1892].w)) * _662) * 0.949999988079071044921875);
    float _2042 = _2041 * _2041;
    float _2043 = cbLight._m0[_1892].x + _738;
    float _2044 = cbLight._m0[_1892].y + _739;
    float _2045 = cbLight._m0[_1892].z + _740;
    float _2049 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
    float _2050 = _2049 * _2043;
    float _2051 = _2049 * _2044;
    float _2052 = _2049 * _2045;
    float _2053 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_1892].xyz));
    float _4207 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _2057 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2058 = dot(vec3(_659, _660, _661), vec3(_2050, _2051, _2052));
    float _4229 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2062 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_2050, _2051, _2052));
    float _4240 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2066 = _2042 * _2042;
    float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
    float _2081 = (exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2082 = 1.0 - _2042;
    float _2093 = (0.5 / (((_2057 * ((_2056 * _2082) + _2042)) + 9.9999999392252902907785028219223e-09) + (((_2057 * _2082) + _2042) * _2056))) * _2056;
    float _4251 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2095 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
    uint _2106 = _1892 + 9u;
    float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _662) * 0.949999988079071044921875);
    float _2118 = _2117 * _2117;
    float _2119 = cbLight._m0[_1929].x + _738;
    float _2120 = cbLight._m0[_1929].y + _739;
    float _2121 = cbLight._m0[_1929].z + _740;
    float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
    float _2126 = _2125 * _2119;
    float _2127 = _2125 * _2120;
    float _2128 = _2125 * _2121;
    float _2129 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_1929].xyz));
    float _4262 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2133 = dot(vec3(_659, _660, _661), vec3(_2126, _2127, _2128));
    float _4273 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2137 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2126, _2127, _2128));
    float _4284 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2141 = _2118 * _2118;
    float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
    float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2155 = 1.0 - _2118;
    float _2165 = (0.5 / (((_2057 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_2057 * _2155) + _2118) * _2132))) * _2132;
    float _4295 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
    float _2177 = (((_2154 * cbLight._m0[_2106].x) * _2167) * _1915) + (((_2081 * cbLight._m0[_2028].x) * _2095) * _1925);
    float _2178 = (((_2154 * cbLight._m0[_2106].y) * _2167) * _1915) + (((_2081 * cbLight._m0[_2028].y) * _2095) * _1925);
    float _2179 = (((_2154 * cbLight._m0[_2106].z) * _2167) * _1915) + (((_2081 * cbLight._m0[_2028].z) * _2095) * _1925);
    float _2241;
    float _2243;
    float _2245;
    if (_1965)
    {
        _2241 = _2177;
        _2243 = _2178;
        _2245 = _2179;
    }
    else
    {
        uint _2247 = _1892 + 2u;
        uint _2251 = _1892 + 10u;
        float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _662) * 0.949999988079071044921875);
        float _2266 = _2265 * _2265;
        float _2267 = cbLight._m0[_2247].x + _738;
        float _2268 = cbLight._m0[_2247].y + _739;
        float _2269 = cbLight._m0[_2247].z + _740;
        float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
        float _2274 = _2273 * _2267;
        float _2275 = _2273 * _2268;
        float _2276 = _2273 * _2269;
        float _2277 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2247].xyz));
        float _4306 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2281 = dot(vec3(_659, _660, _661), vec3(_2274, _2275, _2276));
        float _4317 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2285 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2274, _2275, _2276));
        float _4328 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2289 = _2266 * _2266;
        float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
        float _2302 = (exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2303 = 1.0 - _2266;
        float _2313 = (0.5 / (((_2057 * ((_2280 * _2303) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2057 * _2303) + _2266) * _2280))) * _2280;
        float _4339 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2315 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
        float _2316 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2241 = (((_2302 * cbLight._m0[_2251].x) * _2315) * _2316) + _2177;
        _2243 = (((_2302 * cbLight._m0[_2251].y) * _2315) * _2316) + _2178;
        _2245 = (((_2302 * cbLight._m0[_2251].z) * _2315) * _2316) + _2179;
    }
    float _2351;
    float _2353;
    float _2355;
    if (_1983)
    {
        _2351 = _2241;
        _2353 = _2243;
        _2355 = _2245;
    }
    else
    {
        uint _2362 = _1892 + 3u;
        uint _2366 = _1892 + 11u;
        float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _662) * 0.949999988079071044921875);
        float _2381 = _2380 * _2380;
        float _2382 = cbLight._m0[_2362].x + _738;
        float _2383 = cbLight._m0[_2362].y + _739;
        float _2384 = cbLight._m0[_2362].z + _740;
        float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
        float _2389 = _2388 * _2382;
        float _2390 = _2388 * _2383;
        float _2391 = _2388 * _2384;
        float _2392 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2362].xyz));
        float _4355 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2396 = dot(vec3(_659, _660, _661), vec3(_2389, _2390, _2391));
        float _4366 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2400 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2389, _2390, _2391));
        float _4377 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2404 = _2381 * _2381;
        float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
        float _2417 = (exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2418 = 1.0 - _2381;
        float _2428 = (0.5 / (((_2057 * ((_2395 * _2418) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2057 * _2418) + _2381) * _2395))) * _2395;
        float _4388 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2430 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
        float _2431 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2351 = (((_2417 * cbLight._m0[_2366].x) * _2430) * _2431) + _2241;
        _2353 = (((_2417 * cbLight._m0[_2366].y) * _2430) * _2431) + _2243;
        _2355 = (((_2417 * cbLight._m0[_2366].z) * _2430) * _2431) + _2245;
    }
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    if (_1890.y == 0u)
    {
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2506;
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2506;
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2506;
        uvec4 _2521 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2522 = _2521.x;
        uint _2533 = uint((float(_2521.y) * floor(float(uint(cbSceneParam._m0[85u].y * _759) / _2522))) + floor(float(uint(cbSceneParam._m0[85u].x * _758) / _2522)));
        float _2543 = (log2(_2509 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2544 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        uint _2547 = uint(isnan(14.0) ? _2544 : (isnan(_2544) ? 14.0 : min(_2544, 14.0)));
        uvec4 _2552 = texelFetch(g_lightClusterGridBuffer, int(((_2547 << 2u) + (_2533 << 6u)) >> 2u));
        uint _2553 = _2552.x;
        uint _2554 = _2521.z;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        if (((((1u << ((_2554 >> 4u) & 15u)) + 4294967295u) & _2553) == 0u) || ((_2554 & 240u) == 0u))
        {
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
        }
        else
        {
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            uint _2811 = 0u;
            uint _2820;
            bool _2821;
            for (;;)
            {
                _2820 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2811 << 2u)) >> 2u)).x;
                _2821 = _2820 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2821)
                {
                    frontier_phi_68_pred = _2807;
                    frontier_phi_68_pred_1 = _2810;
                    frontier_phi_68_pred_2 = _2809;
                    frontier_phi_68_pred_3 = _2808;
                    frontier_phi_68_pred_4 = _2806;
                    frontier_phi_68_pred_5 = _2805;
                }
                else
                {
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    uint _2956;
                    _2950 = _2805;
                    _2951 = _2806;
                    _2952 = _2807;
                    _2953 = _2808;
                    _2954 = _2809;
                    _2955 = _2810;
                    _2956 = _2820;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    for (;;)
                    {
                        uint _2960 = uint(findLSB(_2956)) + (_2811 << 5u);
                        uint _2957 = (_2956 + 4294967295u) & _2956;
                        uint _2962 = _2960 * 48u;
                        vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2982 = (_2960 * 48u) + 4u;
                        vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 3u)).x));
                        uint _3001 = (_2960 * 48u) + 8u;
                        vec3 _3012 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x));
                        float _3016 = _2976.x - _2507;
                        float _3017 = _2976.y - _2508;
                        float _3018 = _2976.z - _2509;
                        float _3019 = dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018));
                        float _3022 = inversesqrt(_3019);
                        float _3023 = _3022 * _3016;
                        float _3024 = _3022 * _3017;
                        float _3025 = _3022 * _3018;
                        float _3026 = dot(vec3(_777, _780, _783), vec3(_3023, _3024, _3025));
                        float _3031 = 1.0 - (_3019 * _2976.w);
                        float _4414 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3032 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3033 = sqrt(_3019) * _2995.w;
                        float _3036 = 1.39999997615814208984375 / (_3033 + 1.39999997615814208984375);
                        float _3037 = _3036 * _3036;
                        float _3040 = ((1.0 - _3037) * _3026) + _3037;
                        float _3043 = _3033 * _3033;
                        float _3047 = ((isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))) * _3032) / ((_3043 * 0.699999988079071044921875) + 1.0);
                        float _3051 = (-0.0) - _2507;
                        float _3052 = (-0.0) - _2508;
                        float _3053 = (-0.0) - _2509;
                        float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
                        float _3058 = _3057 * _3051;
                        float _3059 = _3057 * _3052;
                        float _3060 = _3057 * _3053;
                        float _3068 = exp2(log2(1.0 / ((_3043 * 3.5) + 5.0)) * 0.25);
                        float _3069 = 1.0 - _837;
                        float _3076 = sqrt(1.0 - ((1.0 - (_3069 * _3069)) * (1.0 - (_3068 * _3068))));
                        float _3077 = _3076 * _3076;
                        float _3078 = _3077 * _3077;
                        float _3079 = _3058 + _3023;
                        float _3080 = _3059 + _3024;
                        float _3081 = _3060 + _3025;
                        float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                        float _3089 = dot(vec3(_777, _780, _783), vec3(_3058, _3059, _3060));
                        float _4430 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3092 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3093 = dot(vec3(_777, _780, _783), vec3(_3085 * _3079, _3085 * _3080, _3085 * _3081));
                        float _4441 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3096 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3100 = ((_3096 * _3096) * (_3078 + (-1.0))) + 1.0;
                        float _3101 = _3036 * _3077;
                        float _3102 = _3101 * _3101;
                        float _3105 = ((1.0 - _3102) * _3026) + _3102;
                        float _4452 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3106 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3107 = 1.0 - _3077;
                        float _3117 = (0.5 / (((_3106 * ((_3092 * _3107) + _3077)) + 9.9999999392252902907785028219223e-09) + (((_3106 * _3107) + _3077) * _3092))) * _3106;
                        float _4463 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3128 = (((_3078 * 3.1415927410125732421875) * (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) / ((_3100 * _3100) * ((_3043 * 2.1991131305694580078125) + 3.141590118408203125))) * _3032;
                        _2880 = (_3047 * _2995.x) + _2953;
                        _2881 = (_3047 * _2995.y) + _2954;
                        _2882 = (_3047 * _2995.z) + _2955;
                        _2877 = (_3128 * _3012.x) + _2950;
                        _2878 = (_3128 * _3012.y) + _2951;
                        _2879 = (_3128 * _3012.z) + _2952;
                        if (_2957 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2950 = _2877;
                            _2951 = _2878;
                            _2952 = _2879;
                            _2953 = _2880;
                            _2954 = _2881;
                            _2955 = _2882;
                            _2956 = _2957;
                        }
                    }
                    frontier_phi_68_pred = _2879;
                    frontier_phi_68_pred_1 = _2882;
                    frontier_phi_68_pred_2 = _2881;
                    frontier_phi_68_pred_3 = _2880;
                    frontier_phi_68_pred_4 = _2878;
                    frontier_phi_68_pred_5 = _2877;
                }
                _2658 = frontier_phi_68_pred;
                _2664 = frontier_phi_68_pred_1;
                _2662 = frontier_phi_68_pred_2;
                _2660 = frontier_phi_68_pred_3;
                _2656 = frontier_phi_68_pred_4;
                _2654 = frontier_phi_68_pred_5;
                uint _2812 = _2811 + 1u;
                if (_2812 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2805 = _2654;
                    _2806 = _2656;
                    _2807 = _2658;
                    _2808 = _2660;
                    _2809 = _2662;
                    _2810 = _2664;
                    _2811 = _2812;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
        }
        uvec4 _2667 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2668 = _2667.z;
        uint _2670 = (_2668 >> 8u) & 15u;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        if (((4294967295u << _2670) & _2553) == 0u)
        {
            _2773 = _2653;
            _2775 = _2655;
            _2777 = _2657;
            _2779 = _2659;
            _2781 = _2661;
            _2783 = _2663;
        }
        else
        {
            float _2798 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
            float _2799 = _2798 * _2507;
            float _2800 = _2798 * _2508;
            float _2801 = _2798 * _2509;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2670 < ((_2668 >> 12u) & 15u))
            {
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2933 = _2653;
                float _2934 = _2655;
                float _2935 = _2657;
                float _2936 = _2659;
                float _2937 = _2661;
                float _2938 = _2663;
                uint _2939 = _2670;
                uint _2948;
                bool _2949;
                for (;;)
                {
                    _2948 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2939 << 2u)) >> 2u)).x;
                    _2949 = _2948 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2949)
                    {
                        frontier_phi_79_pred = _2938;
                        frontier_phi_79_pred_1 = _2937;
                        frontier_phi_79_pred_2 = _2936;
                        frontier_phi_79_pred_3 = _2935;
                        frontier_phi_79_pred_4 = _2934;
                        frontier_phi_79_pred_5 = _2933;
                    }
                    else
                    {
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3155 = _2933;
                        float _3156 = _2934;
                        float _3157 = _2935;
                        float _3158 = _2936;
                        float _3159 = _2937;
                        float _3160 = _2938;
                        uint _3161 = _2948;
                        uint _3162;
                        vec4 _3187;
                        float _3188;
                        vec4 _3203;
                        vec3 _3215;
                        vec4 _3230;
                        vec4 _3246;
                        float _3293;
                        bool _3294;
                        for (;;)
                        {
                            uint _3172 = ((_2939 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3161));
                            _3162 = (_3161 + 4294967295u) & _3161;
                            uint _3174 = _3172 * 40u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            _3188 = _3187.w;
                            uint _3190 = (_3172 * 40u) + 4u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3205 = (_3172 * 40u) + 8u;
                            _3215 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x));
                            uint _3217 = (_3172 * 40u) + 16u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3233 = (_3172 * 40u) + 20u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3249 = (_3172 * 40u) + 24u;
                            vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3268 = (_3172 * 40u) + 28u;
                            vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            _3293 = fma(_2509, _3281.z, fma(_2508, _3281.y, _3281.x * _2507)) + _3281.w;
                            _3294 = !((fma(_2509, _3262.z, fma(_2508, _3262.y, _3262.x * _2507)) + _3262.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3294)
                            {
                                float _3321 = _3187.x - _2507;
                                float _3322 = _3187.y - _2508;
                                float _3323 = _3187.z - _2509;
                                float _3324 = dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323));
                                float _3327 = inversesqrt(_3324);
                                float _3328 = _3327 * _3321;
                                float _3329 = _3327 * _3322;
                                float _3330 = _3327 * _3323;
                                float _3334 = 1.0 - (_3324 / (_3188 * _3188));
                                float _4474 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3335 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3339 = sqrt(_3324) * _3203.w;
                                float _3341 = 1.39999997615814208984375 / (_3339 + 1.39999997615814208984375);
                                float _3342 = _3341 * _3341;
                                float _3345 = ((1.0 - _3342) * dot(vec3(_3328, _3329, _3330), vec3(_777, _780, _783))) + _3342;
                                float _3348 = _3339 * _3339;
                                float _3352 = (fma(_2509, _3230.z, fma(_2508, _3230.y, _3230.x * _2507)) + _3230.w) / _3293;
                                float _3353 = (fma(_2509, _3246.z, fma(_2508, _3246.y, _3246.x * _2507)) + _3246.w) / _3293;
                                float _3357 = 1.0 - dot(vec2(_3352, _3353), vec2(_3352, _3353));
                                float _4490 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3359 = _3358 * (((isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0))) * _3335) / ((_3348 * 0.699999988079071044921875) + 1.0));
                                float _3371 = exp2(log2(1.0 / ((_3348 * 3.5) + 5.0)) * 0.25);
                                float _3372 = 1.0 - _837;
                                float _3379 = sqrt(1.0 - ((1.0 - (_3372 * _3372)) * (1.0 - (_3371 * _3371))));
                                float _3380 = _3379 * _3379;
                                float _3381 = _3380 * _3380;
                                float _3382 = _3328 - _2799;
                                float _3383 = _3329 - _2800;
                                float _3384 = _3330 - _2801;
                                float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                                float _3392 = dot(vec3(_777, _780, _783), vec3((-0.0) - _2799, (-0.0) - _2800, (-0.0) - _2801));
                                float _4501 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3395 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3396 = dot(vec3(_777, _780, _783), vec3(_3388 * _3382, _3388 * _3383, _3388 * _3384));
                                float _4512 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3399 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3403 = ((_3399 * _3399) * (_3381 + (-1.0))) + 1.0;
                                float _3404 = _3341 * _3380;
                                float _3405 = _3404 * _3404;
                                float _3411 = ((1.0 - _3405) * dot(vec3(_777, _780, _783), vec3(_3328, _3329, _3330))) + _3405;
                                float _4523 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3413 = 1.0 - _3380;
                                float _3423 = (0.5 / (((_3412 * ((_3395 * _3413) + _3380)) + 9.9999999392252902907785028219223e-09) + (((_3412 * _3413) + _3380) * _3395))) * _3412;
                                float _4534 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3433 = (_3358 * _3335) * (((_3381 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3403 * _3403) * ((_3348 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3359 * _3203.z;
                                frontier_phi_85_pred_1 = _3359 * _3203.y;
                                frontier_phi_85_pred_2 = _3359 * _3203.x;
                                frontier_phi_85_pred_3 = _3433 * _3215.z;
                                frontier_phi_85_pred_4 = _3433 * _3215.y;
                                frontier_phi_85_pred_5 = _3433 * _3215.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3442 = frontier_phi_85_pred;
                            _3441 = frontier_phi_85_pred_1;
                            _3440 = frontier_phi_85_pred_2;
                            _3439 = frontier_phi_85_pred_3;
                            _3438 = frontier_phi_85_pred_4;
                            _3437 = frontier_phi_85_pred_5;
                            _3145 = _3440 + _3158;
                            _3146 = _3441 + _3159;
                            _3147 = _3442 + _3160;
                            _3142 = _3437 + _3155;
                            _3143 = _3438 + _3156;
                            _3144 = _3439 + _3157;
                            if (_3162 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3162;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3147;
                        frontier_phi_79_pred_1 = _3146;
                        frontier_phi_79_pred_2 = _3145;
                        frontier_phi_79_pred_3 = _3144;
                        frontier_phi_79_pred_4 = _3143;
                        frontier_phi_79_pred_5 = _3142;
                    }
                    _2784 = frontier_phi_79_pred;
                    _2782 = frontier_phi_79_pred_1;
                    _2780 = frontier_phi_79_pred_2;
                    _2778 = frontier_phi_79_pred_3;
                    _2776 = frontier_phi_79_pred_4;
                    _2774 = frontier_phi_79_pred_5;
                    uint _2940 = _2939 + 1u;
                    if (_2940 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2933 = _2774;
                        _2934 = _2776;
                        _2935 = _2778;
                        _2936 = _2780;
                        _2937 = _2782;
                        _2938 = _2784;
                        _2939 = _2940;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2780;
                frontier_phi_60_61_ladder_1 = _2784;
                frontier_phi_60_61_ladder_2 = _2782;
                frontier_phi_60_61_ladder_3 = _2778;
                frontier_phi_60_61_ladder_4 = _2776;
                frontier_phi_60_61_ladder_5 = _2774;
            }
            else
            {
                frontier_phi_60_61_ladder = _2659;
                frontier_phi_60_61_ladder_1 = _2663;
                frontier_phi_60_61_ladder_2 = _2661;
                frontier_phi_60_61_ladder_3 = _2657;
                frontier_phi_60_61_ladder_4 = _2655;
                frontier_phi_60_61_ladder_5 = _2653;
            }
            _2773 = frontier_phi_60_61_ladder_5;
            _2775 = frontier_phi_60_61_ladder_4;
            _2777 = frontier_phi_60_61_ladder_3;
            _2779 = frontier_phi_60_61_ladder;
            _2781 = frontier_phi_60_61_ladder_2;
            _2783 = frontier_phi_60_61_ladder_1;
        }
        float _2788 = isnan(1.0) ? _821 : (isnan(_821) ? 1.0 : min(_821, 1.0));
        _2565 = (_2788 * _2779) + _2021;
        _2567 = (_2788 * _2781) + _2023;
        _2569 = (_2788 * _2783) + _2025;
        _2571 = ((_2773 * 0.039999999105930328369140625) * _2788) + _2351;
        _2573 = ((_2775 * 0.039999999105930328369140625) * _2788) + _2353;
        _2575 = ((_2777 * 0.039999999105930328369140625) * _2788) + _2355;
    }
    else
    {
        _2565 = _2021;
        _2567 = _2023;
        _2569 = _2025;
        _2571 = _2351;
        _2573 = _2353;
        _2575 = _2355;
    }
    float _4550 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4561 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4572 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _2592 = ((isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2565 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _821))) + ((_2571 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    float _2593 = ((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2567 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _821))) + ((_2573 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    float _2594 = ((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2569 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _821))) + ((_2575 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    uint _2595 = _796 + 6u;
    float _2603 = _758 / cbSceneParam._m0[86u].x;
    float _2604 = _759 / cbSceneParam._m0[86u].y;
    vec4 _2618 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2603, _2604, (log2((isnan(cbSceneParam._m0[77u].w) ? _681 : (isnan(_681) ? cbSceneParam._m0[77u].w : min(_681, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2620 = _2618.x;
    float _2621 = _2618.y;
    float _2622 = _2618.z;
    float _2623 = _2618.w;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_681 > cbSceneParam._m0[78u].w)
    {
        float _2678 = isnan(_681) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _681 : min(cbSceneParam._m0[80u].w, _681));
        float _2679 = _2678 / _681;
        float _2690 = _2679 * _731;
        float _2691 = _732 * _2679;
        float _2692 = (-0.0) - _2691;
        float _2693 = _2679 * _733;
        float _2695 = (cbSceneParam._m0[77u].w * _2692) / _2678;
        float _2696 = _2695 + cbSceneParam._m0[79u].w;
        float _2697 = cbSceneParam._m0[79u].w - _2691;
        float _2703 = sqrt(((_2690 * _2690) + (_2691 * _2691)) + (_2693 * _2693));
        float _2706 = (1.0 - (cbSceneParam._m0[77u].w / _2678)) * _2703;
        float _2711 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2713 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2890;
        if (abs((_2692 - _2695) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2890 = ((((_2696 > 0.0) ? exp2(_2711 * _2696) : (2.0 - exp2(_2713 * _2696))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2706;
        }
        else
        {
            float _2834 = 1.0 / cbSceneParam._m0[80u].x;
            float _2835 = isnan(_2697) ? _2696 : (isnan(_2696) ? _2697 : max(_2696, _2697));
            float _2836 = isnan(_2697) ? _2696 : (isnan(_2696) ? _2697 : min(_2696, _2697));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            float _2846 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : min(_2836, 0.0));
            _2890 = ((abs(_2703 / _2692) * cbSceneParam._m0[80u].y) * ((((_2845 - _2846) * 2.0) - ((exp2(_2711 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0)))) - exp2(_2711 * (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0))))) * _2834)) - ((exp2(_2713 * _2845) - exp2(_2713 * _2846)) * _2834))) + (_2706 * cbSceneParam._m0[80u].z);
        }
        vec4 _2892 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2603, _2604, 1.0), 0.0);
        float _2901 = exp2((_2890 * (-1.44269502162933349609375)) * (1.0 - _2892.w));
        float _2902 = log2(_2901);
        float _2918 = log2(_2623);
        _2715 = (exp2(_2918 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2902 * cbSceneParam._m0[78u].x)) * _2892.x) / cbSceneParam._m0[78u].x)) + _2620;
        _2717 = (exp2(_2918 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2902 * cbSceneParam._m0[78u].y)) * _2892.y) / cbSceneParam._m0[78u].y)) + _2621;
        _2719 = (exp2(_2918 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2902 * cbSceneParam._m0[78u].z)) * _2892.z) / cbSceneParam._m0[78u].z)) + _2622;
        _2721 = _2901 * _2623;
    }
    else
    {
        _2715 = _2620;
        _2717 = _2621;
        _2719 = _2622;
        _2721 = _2623;
    }
    bool _2928;
    vec4 _2731;
    vec4 _2753;
    float _2755;
    float _2759;
    float _2760;
    float _2761;
    float _2762;
    bool _2772;
    for (;;)
    {
        _2731 = cbMatDynParam._m0[0u];
        float _2733 = roundEven(_2731.y);
        bool _2734 = _2733 == 3.0;
        float _2735 = log2(_2721);
        float _2742 = exp2(_2735 * cbSceneParam._m0[78u].x) * _2592;
        float _2743 = exp2(_2735 * cbSceneParam._m0[78u].y) * _2593;
        float _2744 = exp2(_2735 * cbSceneParam._m0[78u].z) * _2594;
        float _2751 = _747 + (-0.5);
        _2753 = cbMtdParam._m0[1u];
        _2755 = _2753.y * _2751;
        float _2758 = (_2733 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2759 = _2758 * (_2734 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2715)));
        _2760 = _2758 * (_2734 ? _2743 : (_2743 + (cbSceneParam._m0[72u].w * _2717)));
        _2761 = _2758 * (_2734 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2719)));
        _2762 = _2751 * 0.999000012874603271484375;
        _2772 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2772)
        {
            if ((cbInstanceData._m0[_796 + 7u].x + _2762) < 0.5)
            {
                _2928 = true;
                break;
            }
        }
        uint _2869 = _797 + uint(_2731.w);
        if ((cbInstanceData._m0[_2869].w < 1.0) && ((cbInstanceData._m0[_2869].w + _2762) < 0.5))
        {
            _2928 = true;
            break;
        }
        if ((_2755 + 1.0) < _2753.x)
        {
            _2928 = true;
            break;
        }
        _2928 = false;
        break;
    }
    float _3133;
    if (_2928)
    {
        discard_state = true;
        _3133 = 0.0;
    }
    else
    {
        _3133 = cbInstanceData._m0[_2595].w;
    }
    SV_Target.x = _2759;
    SV_Target.y = _2760;
    SV_Target.z = _2761;
    SV_Target.w = _3133;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2595].w;
    discard_exit();
}


