#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1178;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _258 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _264 = _258.x * cbMtdParam._m0[10u].x;
    float _265 = _258.y * cbMtdParam._m0[10u].y;
    float _266 = _258.z * cbMtdParam._m0[10u].z;
    vec4 _285 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    vec4 _304 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _335 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x;
    float _346 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((((1.0 - TEXCOORD_3.x) - _304.x) * 2.0) - _335)) + 1.0;
    float _3513 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _347 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _354 = (_347 * ((_285.x * cbMtdParam._m0[11u].x) - _264)) + _264;
    float _355 = (_347 * ((_285.y * cbMtdParam._m0[11u].y) - _265)) + _265;
    float _356 = (_347 * ((_285.z * cbMtdParam._m0[11u].z) - _266)) + _266;
    vec4 _374 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _387 = ((((((1.0 - TEXCOORD_3.y) - _304.y) * 2.0) - _335) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3524 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _395 = (((_374.x * cbMtdParam._m0[12u].x) - _354) * _388) + _354;
    float _396 = (_388 * ((_374.y * cbMtdParam._m0[12u].y) - _355)) + _355;
    float _397 = (_388 * ((_374.z * cbMtdParam._m0[12u].z) - _356)) + _356;
    vec4 _415 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _428 = ((((((1.0 - TEXCOORD_3.z) - _304.z) * 2.0) - _335) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3535 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _436 = (((_415.x * cbMtdParam._m0[13u].x) - _395) * _429) + _395;
    float _437 = (_429 * ((_415.y * cbMtdParam._m0[13u].y) - _396)) + _396;
    float _438 = (_429 * ((_415.z * cbMtdParam._m0[13u].z) - _397)) + _397;
    vec4 _456 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    float _482 = _478.z;
    vec4 _494 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _505 = ((_494.x - _480) * _347) + _480;
    float _506 = ((_494.y - _481) * _347) + _481;
    float _507 = ((_494.z - _482) * _347) + _482;
    vec4 _520 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _531 = ((_520.x - _505) * _388) + _505;
    float _532 = ((_520.y - _506) * _388) + _506;
    float _533 = ((_520.z - _507) * _388) + _507;
    vec4 _546 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _559 = ((_546.z - _533) * _429) + _533;
    float _562 = ((((_546.x - _531) * _429) + _531) * 2.0) + (-1.0);
    float _564 = ((((_546.y - _532) * _429) + _532) * 2.0) + (-1.0);
    float _565 = dot(vec2(_562, _564), vec2(_562, _564));
    float _3546 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))));
    float _573 = fma(_570, _236, fma(_564, _229, _562 * _215));
    float _576 = fma(_570, _237, fma(_564, _230, _562 * _216));
    float _579 = fma(_570, _238, fma(_564, _231, _562 * _217));
    float _588 = exp2(log2(inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579))) * _576) * cbMtdParam._m0[15u].y) * cbMtdParam._m0[14u].y;
    float _3557 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _3568 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _592 = 3.0 - (_590 * 2.0);
    float _597 = _590 * _590;
    float _604 = ((_597 * ((_456.x * cbMtdParam._m0[9u].x) - _436)) * _592) + _436;
    float _605 = ((_597 * ((_456.y * cbMtdParam._m0[9u].y) - _437)) * _592) + _437;
    float _606 = ((_597 * ((_456.z * cbMtdParam._m0[9u].z) - _438)) * _592) + _438;
    vec4 _618 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _624 = (_618.x * 2.0) + (-1.0);
    float _625 = (_618.y * 2.0) + (-1.0);
    float _626 = dot(vec2(_624, _625), vec2(_624, _625));
    float _3579 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _641 = ((_597 * (_624 - _562)) * _592) + _562;
    float _642 = ((_597 * (_625 - _564)) * _592) + _564;
    float _643 = ((_597 * (sqrt(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) - _570)) * _592) + _570;
    float _646 = fma(_643, _236, fma(_642, _229, _641 * _215));
    float _649 = fma(_643, _237, fma(_642, _230, _641 * _216));
    float _652 = fma(_643, _238, fma(_642, _231, _641 * _217));
    float _656 = inversesqrt(dot(vec3(_646, _649, _652), vec3(_646, _649, _652)));
    float _657 = _656 * _646;
    float _658 = _656 * _649;
    float _659 = _656 * _652;
    float _3590 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _660 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3612 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3623 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _679 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _729 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _719);
    float _730 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _719);
    float _731 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _719);
    float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
    float _736 = _729 * _735;
    float _737 = _730 * _735;
    float _738 = _731 * _735;
    float _744 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _745 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _763 = fma(_659, cbSceneParam._m0[5u].z, fma(_658, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _657));
    float _766 = fma(_659, cbSceneParam._m0[6u].z, fma(_658, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _657));
    float _769 = fma(_659, cbSceneParam._m0[7u].z, fma(_658, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _657));
    uint _782 = uint(roundEven(NORMAL.w)) * 13u;
    uint _784 = (_782 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _790 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * cbInstanceData._m0[_784].x;
    float _791 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_784].y;
    float _792 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_784].z;
    float _3634 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    vec4 _804 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _744, cbSceneParam._m0[86u].y * _745));
    float _807 = _804.x * TEXCOORD_3.w;
    float _808 = dot(vec3(_657, _658, _659), vec3(_736, _737, _738));
    float _811 = _808 * 2.0;
    float _815 = (_811 * _657) - _736;
    float _816 = (_811 * _658) - _737;
    float _817 = (_811 * _659) - _738;
    float _821 = abs(dot(vec3(_736, _737, _738), vec3(_657, _658, _659)));
    float _3667 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _823 = sqrt(_660);
    float _835 = exp2((_823 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_823 * 3.0));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1177;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _902 = fma(_875, cbModelParam._m0[26u].z, fma(_871, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _867));
        float _906 = fma(_875, cbModelParam._m0[27u].z, fma(_871, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _867));
        float _910 = fma(_875, cbModelParam._m0[28u].z, fma(_871, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _867));
        float _935 = _867 + _657;
        float _936 = _871 + _658;
        float _937 = _875 + _659;
        float _947 = fma(_937, cbModelParam._m0[26u].z, fma(_936, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _935)) - _902;
        float _948 = fma(_937, cbModelParam._m0[27u].z, fma(_936, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _935)) - _906;
        float _949 = fma(_937, cbModelParam._m0[28u].z, fma(_936, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _935)) - _910;
        float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
        float _966 = ((_953 * _947) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_902 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_953 * _948) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_906 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_953 * _949) / cbModelParam._m0[34u].z) + ((((((_910 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        float _1005 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_971.x + (-0.5));
        float _1007 = _1005 * (_971.y + (-0.5));
        float _1008 = _1005 * (_971.z + (-0.5));
        float _1015 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_978.x + (-0.5));
        float _1017 = _1015 * (_978.y + (-0.5));
        float _1018 = _1015 * (_978.z + (-0.5));
        float _1025 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_985.x + (-0.5));
        float _1027 = _1025 * (_985.y + (-0.5));
        float _1028 = _1025 * (_985.z + (-0.5));
        float _1035 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_992.x + (-0.5));
        float _1037 = _1035 * (_992.y + (-0.5));
        float _1038 = _1035 * (_992.z + (-0.5));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = _1006 * 0.5;
        float _1043 = _1016 * 0.5;
        float _1044 = _1026 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1059 = (dot(vec3(_657, _658, _659), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1069 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3715 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1071 + 1.0))) + _1076) * _1039;
        float _1086 = _1007 * 0.5;
        float _1087 = _1017 * 0.5;
        float _1088 = _1027 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_657, _658, _659), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3748 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1113 + 1.0))) + _1118) * _1040;
        float _1128 = _1008 * 0.5;
        float _1129 = _1018 * 0.5;
        float _1130 = _1028 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_657, _658, _659), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3781 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1155 + 1.0))) + _1160) * _1041;
        _1177 = _1008;
        _1179 = _1007;
        _1180 = _1006;
        _1181 = _1018;
        _1182 = _1017;
        _1183 = _1016;
        _1184 = _1028;
        _1185 = _1027;
        _1186 = _1026;
        _1187 = _1041;
        _1188 = _1040;
        _1189 = _1039;
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
    }
    else
    {
        _1177 = _1178;
        _1179 = _1178;
        _1180 = _1178;
        _1181 = _1178;
        _1182 = _1178;
        _1183 = _1178;
        _1184 = _1178;
        _1185 = _1178;
        _1186 = _1178;
        _1187 = _1178;
        _1188 = _1178;
        _1189 = _1178;
        _1190 = 0.0;
        _1191 = 0.0;
        _1192 = 0.0;
    }
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1218 = fma(_875, cbModelParam._m0[30u].z, fma(_871, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _867));
        float _1222 = fma(_875, cbModelParam._m0[31u].z, fma(_871, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _867));
        float _1226 = fma(_875, cbModelParam._m0[32u].z, fma(_871, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _867));
        float _1249 = _867 + _657;
        float _1250 = _871 + _658;
        float _1251 = _875 + _659;
        float _1261 = fma(_1251, cbModelParam._m0[30u].z, fma(_1250, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1249)) - _1218;
        float _1262 = fma(_1251, cbModelParam._m0[31u].z, fma(_1250, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1249)) - _1222;
        float _1263 = fma(_1251, cbModelParam._m0[32u].z, fma(_1250, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1249)) - _1226;
        float _1267 = inversesqrt(dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263)));
        float _1280 = ((_1267 * _1261) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1218 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1267 * _1262) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1222 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1267 * _1263) / cbModelParam._m0[35u].z) + ((((((_1226 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        float _1317 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1284.x + (-0.5));
        float _1319 = _1317 * (_1284.y + (-0.5));
        float _1320 = _1317 * (_1284.z + (-0.5));
        float _1327 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1291.x + (-0.5));
        float _1329 = _1327 * (_1291.y + (-0.5));
        float _1330 = _1327 * (_1291.z + (-0.5));
        float _1337 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1298.x + (-0.5));
        float _1339 = _1337 * (_1298.y + (-0.5));
        float _1340 = _1337 * (_1298.z + (-0.5));
        float _1347 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1305.x + (-0.5));
        float _1349 = _1347 * (_1305.y + (-0.5));
        float _1350 = _1347 * (_1305.z + (-0.5));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = _1318 * 0.5;
        float _1355 = _1328 * 0.5;
        float _1356 = _1338 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_657, _658, _659), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _3844 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1381 + 1.0))) + _1386) * _1351;
        float _1396 = _1319 * 0.5;
        float _1397 = _1329 * 0.5;
        float _1398 = _1339 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_657, _658, _659), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _3877 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1423 + 1.0))) + _1428) * _1352;
        float _1438 = _1320 * 0.5;
        float _1439 = _1330 * 0.5;
        float _1440 = _1340 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_657, _658, _659), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _3910 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1465 + 1.0))) + _1470) * _1353;
        _1487 = _1320;
        _1488 = _1319;
        _1489 = _1318;
        _1490 = _1330;
        _1491 = _1329;
        _1492 = _1328;
        _1493 = _1340;
        _1494 = _1339;
        _1495 = _1338;
        _1496 = _1353;
        _1497 = _1352;
        _1498 = _1351;
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
    }
    else
    {
        _1487 = _1178;
        _1488 = _1178;
        _1489 = _1178;
        _1490 = _1178;
        _1491 = _1178;
        _1492 = _1178;
        _1493 = _1178;
        _1494 = _1178;
        _1495 = _1178;
        _1496 = _1178;
        _1497 = _1178;
        _1498 = _1178;
        _1499 = 0.0;
        _1500 = 0.0;
        _1501 = 0.0;
    }
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1190)) + _1190;
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1191)) + _1191;
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1192)) + _1192;
    float _1534 = fma(_1513, cbSceneParam._m0[89u].z, fma(_1512, cbSceneParam._m0[89u].y, _1511 * cbSceneParam._m0[89u].x));
    float _1537 = fma(_1513, cbSceneParam._m0[90u].z, fma(_1512, cbSceneParam._m0[90u].y, _1511 * cbSceneParam._m0[90u].x));
    float _1540 = fma(_1513, cbSceneParam._m0[91u].z, fma(_1512, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1511));
    float _1555 = _815 * 0.5;
    float _1556 = _816 * 0.5;
    float _1557 = _817 * 0.5;
    float _1558 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1561 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1564 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1598;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1571 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1177, _1181, _1184, _1187));
        float _1575 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1179, _1182, _1185, _1188));
        float _1579 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1180, _1183, _1186, _1189));
        float _1586 = dot(vec4(cbModelParam._m0[39u]), vec4(_1555, _1556, _1557, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1586) ? 0.0 : (isnan(0.0) ? _1586 : max(0.0, _1586))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1609;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1600 = dot(vec4(cbModelParam._m0[40u]), vec4(_1555, _1556, _1557, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1600) ? 0.0 : (isnan(0.0) ? _1600 : max(0.0, _1600))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1613 = (_1609 * cbModelParam._m0[1u].x) + (_1598 * (1.0 - cbModelParam._m0[1u].x));
    float _1623 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _660);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1623 : min(cbModelParam._m0[25u].z, _1623));
    float _1704;
    float _1706;
    float _1708;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1671 = fma(_875, cbModelParam._m0[13u].z, fma(_871, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _867)) + cbModelParam._m0[13u].w;
        float _1675 = fma(_875, cbModelParam._m0[14u].z, fma(_871, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _867)) + cbModelParam._m0[14u].w;
        float _1679 = fma(_875, cbModelParam._m0[15u].z, fma(_871, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _867)) + cbModelParam._m0[15u].w;
        float _1682 = fma(_817, cbModelParam._m0[13u].z, fma(_816, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _815));
        float _1685 = fma(_817, cbModelParam._m0[14u].z, fma(_816, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _815));
        float _1688 = fma(_817, cbModelParam._m0[15u].z, fma(_816, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _815));
        float _1716;
        if (_1682 > 0.0)
        {
            _1716 = abs((1.0 - _1671) / _1682);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1671 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1716 = frontier_phi_16_14_ladder;
        }
        float _1941;
        if (_1685 > 0.0)
        {
            _1941 = abs((1.0 - _1675) / _1685);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1675 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1941 = frontier_phi_25_21_ladder;
        }
        float _2187;
        if (_1688 > 0.0)
        {
            _2187 = abs((1.0 - _1679) / _1688);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1679 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2187 = frontier_phi_37_32_ladder;
        }
        float _2189 = isnan(_1941) ? _1716 : (isnan(_1716) ? _1941 : min(_1716, _1941));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1682) + _1671;
        float _2195 = (_2190 * _1685) + _1675;
        float _2196 = (_2190 * _1688) + _1679;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2199 = (-1.0) - _2197;
        float _2201 = _2197 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2196 > _2201) || ((_2196 < _2199) || ((_2195 > _2201) || ((_2195 < _2199) || ((_2194 < _2199) || (_2194 > _2201))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2320 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2196, cbModelParam._m0[9u].z, fma(_2195, cbModelParam._m0[9u].y, _2194 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2196, cbModelParam._m0[10u].z, fma(_2195, cbModelParam._m0[10u].y, _2194 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2196, cbModelParam._m0[11u].z, fma(_2195, cbModelParam._m0[11u].y, _2194 * cbModelParam._m0[11u].x))), _1624);
            frontier_phi_15_37_ladder = _2320.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2320.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2320.x * cbModelParam._m0[1u].y;
        }
        _1704 = frontier_phi_15_37_ladder_2;
        _1706 = frontier_phi_15_37_ladder_1;
        _1708 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1692 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_815, _816, _817), _1624);
        _1704 = _1692.x * cbModelParam._m0[1u].y;
        _1706 = _1692.y * cbModelParam._m0[1u].y;
        _1708 = _1692.z * cbModelParam._m0[1u].y;
    }
    float _1712 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _660);
    float _1713 = isnan(_1712) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1712 : min(cbModelParam._m0[25u].w, _1712));
    float _1806;
    float _1808;
    float _1810;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1770 = fma(_875, cbModelParam._m0[21u].z, fma(_871, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _867)) + cbModelParam._m0[21u].w;
        float _1774 = fma(_875, cbModelParam._m0[22u].z, fma(_871, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _867)) + cbModelParam._m0[22u].w;
        float _1778 = fma(_875, cbModelParam._m0[23u].z, fma(_871, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _867)) + cbModelParam._m0[23u].w;
        float _1781 = fma(_817, cbModelParam._m0[21u].z, fma(_816, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _815));
        float _1784 = fma(_817, cbModelParam._m0[22u].z, fma(_816, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _815));
        float _1787 = fma(_817, cbModelParam._m0[23u].z, fma(_816, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _815));
        float _1946;
        if (_1781 > 0.0)
        {
            _1946 = abs((1.0 - _1770) / _1781);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1770 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1946 = frontier_phi_27_23_ladder;
        }
        float _2214;
        if (_1784 > 0.0)
        {
            _2214 = abs((1.0 - _1774) / _1784);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1774 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2214 = frontier_phi_39_34_ladder;
        }
        float _2419;
        if (_1787 > 0.0)
        {
            _2419 = abs((1.0 - _1778) / _1787);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1778 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2419 = frontier_phi_48_45_ladder;
        }
        float _2421 = isnan(_2214) ? _1946 : (isnan(_1946) ? _2214 : min(_1946, _2214));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1781) + _1770;
        float _2427 = (_2422 * _1784) + _1774;
        float _2428 = (_2422 * _1787) + _1778;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2429;
        float _2432 = _2429 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2428 > _2432) || ((_2428 < _2430) || ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 < _2430) || (_2426 > _2432))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2626 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2428, cbModelParam._m0[17u].z, fma(_2427, cbModelParam._m0[17u].y, _2426 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2428, cbModelParam._m0[18u].z, fma(_2427, cbModelParam._m0[18u].y, _2426 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2428, cbModelParam._m0[19u].z, fma(_2427, cbModelParam._m0[19u].y, _2426 * cbModelParam._m0[19u].x))), _1713);
            frontier_phi_24_48_ladder = _2626.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2626.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2626.x * cbModelParam._m0[1u].z;
        }
        _1806 = frontier_phi_24_48_ladder_2;
        _1808 = frontier_phi_24_48_ladder_1;
        _1810 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_815, _816, _817), _1713);
        _1806 = _1790.x * cbModelParam._m0[1u].z;
        _1808 = _1790.y * cbModelParam._m0[1u].z;
        _1810 = _1790.z * cbModelParam._m0[1u].z;
    }
    float _1822 = ((((1.0 - _835) * ((_823 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_835 * _823)) * _807;
    float _1823 = _1822 * ((cbModelParam._m0[1u].w * (_1806 - _1704)) + _1704);
    float _1824 = _1822 * ((cbModelParam._m0[1u].w * (_1808 - _1706)) + _1706);
    float _1825 = _1822 * ((cbModelParam._m0[1u].w * (_1810 - _1708)) + _1708);
    float _1828 = fma(_1825, cbSceneParam._m0[89u].z, fma(_1824, cbSceneParam._m0[89u].y, _1823 * cbSceneParam._m0[89u].x));
    float _1831 = fma(_1825, cbSceneParam._m0[90u].z, fma(_1824, cbSceneParam._m0[90u].y, _1823 * cbSceneParam._m0[90u].x));
    float _1834 = fma(_1825, cbSceneParam._m0[91u].z, fma(_1824, cbSceneParam._m0[91u].y, _1823 * cbSceneParam._m0[91u].x));
    vec4 _1842 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_744, _745));
    float _1844 = _1842.w;
    float _1856 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1844);
    float _1857 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1844);
    float _1858 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1844);
    uvec4 _1862 = floatBitsToUint(cbInstanceData._m0[_782 + 5u]);
    uint _1864 = _1862.x * 14u;
    uint _1865 = _1864 + 13u;
    float _1872 = _807 + (-1.0);
    float _1877 = (cbLight._m0[_1865].x * _1872) + 1.0;
    float _1878 = (cbLight._m0[_1865].y * _1872) + 1.0;
    float _1879 = (cbLight._m0[_1865].z * _1872) + 1.0;
    float _1880 = (cbLight._m0[_1865].w * _1872) + 1.0;
    uint _1881 = _1864 + 5u;
    float _1887 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
    uint _1891 = _1864 + 4u;
    float _1900 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
    uint _1904 = _1864 | 1u;
    float _1915 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_657, _658, _659));
    float _1918 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_657, _658, _659));
    float _4046 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _4057 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1923 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.3183098733425140380859375;
    float _1925 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1932 = ((cbLight._m0[_1881].x * _1887) * _1925) + (((cbLight._m0[_1891].x * _1856) * _1900) * _1923);
    float _1933 = ((_1887 * cbLight._m0[_1881].y) * _1925) + (((cbLight._m0[_1891].y * _1857) * _1900) * _1923);
    float _1934 = ((_1887 * cbLight._m0[_1881].z) * _1925) + (((cbLight._m0[_1891].z * _1858) * _1900) * _1923);
    uvec4 _1938 = floatBitsToUint(cbLight._m0[_1864 + 12u]);
    bool _1940 = _1938.x == 0u;
    float _1951;
    float _1953;
    float _1955;
    if (_1940)
    {
        _1951 = _1932;
        _1953 = _1933;
        _1955 = _1934;
    }
    else
    {
        uint _1959 = _1864 + 6u;
        float _1975 = (dot(vec3(cbLight._m0[_1864 + 2u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _1976 = _1975 * _1975;
        float _4068 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1977 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1978 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _1951 = (((cbLight._m0[_1959].x * 0.3183098733425140380859375) * _1977) * _1978) + _1932;
        _1953 = (((cbLight._m0[_1959].y * 0.3183098733425140380859375) * _1977) * _1978) + _1933;
        _1955 = (((cbLight._m0[_1959].z * 0.3183098733425140380859375) * _1977) * _1978) + _1934;
    }
    bool _1958 = _1938.y == 0u;
    float _1996;
    float _1998;
    float _2000;
    if (_1958)
    {
        _1996 = _1951;
        _1998 = _1953;
        _2000 = _1955;
    }
    else
    {
        uint _2158 = _1864 + 7u;
        float _2174 = (dot(vec3(cbLight._m0[_1864 + 3u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2175 = _2174 * _2174;
        float _4084 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2176 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2177 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _1996 = (((cbLight._m0[_2158].x * 0.3183098733425140380859375) * _2176) * _2177) + _1951;
        _1998 = (((cbLight._m0[_2158].y * 0.3183098733425140380859375) * _2176) * _2177) + _1953;
        _2000 = (((cbLight._m0[_2158].z * 0.3183098733425140380859375) * _2176) * _2177) + _1955;
    }
    uint _2003 = _1864 + 8u;
    float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1864].w)) * _660) * 0.949999988079071044921875);
    float _2017 = _2016 * _2016;
    float _2018 = cbLight._m0[_1864].x + _736;
    float _2019 = cbLight._m0[_1864].y + _737;
    float _2020 = cbLight._m0[_1864].z + _738;
    float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
    float _2025 = _2024 * _2018;
    float _2026 = _2024 * _2019;
    float _2027 = _2024 * _2020;
    float _2028 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_1864].xyz));
    float _4100 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _2032 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2033 = dot(vec3(_657, _658, _659), vec3(_2025, _2026, _2027));
    float _4122 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2037 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_2025, _2026, _2027));
    float _4133 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2041 = _2017 * _2017;
    float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
    float _2056 = (exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2057 = 1.0 - _2017;
    float _2068 = (0.5 / (((_2032 * ((_2031 * _2057) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2057) + _2017) * _2031))) * _2031;
    float _4144 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
    uint _2084 = _1864 + 9u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1904].w)) * _660) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1904].x + _736;
    float _2098 = cbLight._m0[_1904].y + _737;
    float _2099 = cbLight._m0[_1904].z + _738;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_1904].xyz));
    float _4155 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2111 = dot(vec3(_657, _658, _659), vec3(_2104, _2105, _2106));
    float _4166 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2115 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_2104, _2105, _2106));
    float _4177 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = _2096 * _2096;
    float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
    float _2132 = (exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2133 = 1.0 - _2096;
    float _2143 = (0.5 / (((_2032 * ((_2110 * _2133) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2133) + _2096) * _2110))) * _2110;
    float _4188 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
    float _2155 = (((_2132 * cbLight._m0[_2084].x) * _2145) * _1887) + ((((cbLight._m0[_2003].x * _1856) * _2056) * _2070) * _1900);
    float _2156 = (((_2132 * cbLight._m0[_2084].y) * _2145) * _1887) + ((((cbLight._m0[_2003].y * _1857) * _2056) * _2070) * _1900);
    float _2157 = (((_2132 * cbLight._m0[_2084].z) * _2145) * _1887) + ((((cbLight._m0[_2003].z * _1858) * _2056) * _2070) * _1900);
    float _2219;
    float _2221;
    float _2223;
    if (_1940)
    {
        _2219 = _2155;
        _2221 = _2156;
        _2223 = _2157;
    }
    else
    {
        uint _2225 = _1864 + 2u;
        uint _2229 = _1864 + 10u;
        float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _660) * 0.949999988079071044921875);
        float _2244 = _2243 * _2243;
        float _2245 = cbLight._m0[_2225].x + _736;
        float _2246 = cbLight._m0[_2225].y + _737;
        float _2247 = cbLight._m0[_2225].z + _738;
        float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
        float _2252 = _2251 * _2245;
        float _2253 = _2251 * _2246;
        float _2254 = _2251 * _2247;
        float _2255 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2225].xyz));
        float _4199 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2258 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2259 = dot(vec3(_657, _658, _659), vec3(_2252, _2253, _2254));
        float _4210 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2262 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2263 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2252, _2253, _2254));
        float _4221 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2267 = _2244 * _2244;
        float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
        float _2280 = (exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2281 = 1.0 - _2244;
        float _2291 = (0.5 / (((_2032 * ((_2258 * _2281) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2281) + _2244) * _2258))) * _2258;
        float _4232 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2293 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
        float _2294 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _2219 = (((_2280 * cbLight._m0[_2229].x) * _2293) * _2294) + _2155;
        _2221 = (((_2280 * cbLight._m0[_2229].y) * _2293) * _2294) + _2156;
        _2223 = (((_2280 * cbLight._m0[_2229].z) * _2293) * _2294) + _2157;
    }
    float _2329;
    float _2331;
    float _2333;
    if (_1958)
    {
        _2329 = _2219;
        _2331 = _2221;
        _2333 = _2223;
    }
    else
    {
        uint _2340 = _1864 + 3u;
        uint _2344 = _1864 + 11u;
        float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _660) * 0.949999988079071044921875);
        float _2359 = _2358 * _2358;
        float _2360 = cbLight._m0[_2340].x + _736;
        float _2361 = cbLight._m0[_2340].y + _737;
        float _2362 = cbLight._m0[_2340].z + _738;
        float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
        float _2367 = _2366 * _2360;
        float _2368 = _2366 * _2361;
        float _2369 = _2366 * _2362;
        float _2370 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2340].xyz));
        float _4248 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2374 = dot(vec3(_657, _658, _659), vec3(_2367, _2368, _2369));
        float _4259 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2378 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2367, _2368, _2369));
        float _4270 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2382 = _2359 * _2359;
        float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
        float _2395 = (exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2396 = 1.0 - _2359;
        float _2406 = (0.5 / (((_2032 * ((_2373 * _2396) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2396) + _2359) * _2373))) * _2373;
        float _4281 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2408 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
        float _2409 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2329 = (((_2395 * cbLight._m0[_2344].x) * _2408) * _2409) + _2219;
        _2331 = (((_2395 * cbLight._m0[_2344].y) * _2408) * _2409) + _2221;
        _2333 = (((_2395 * cbLight._m0[_2344].z) * _2408) * _2409) + _2223;
    }
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    if (_1862.y == 0u)
    {
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2484;
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2484;
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2484;
        uvec4 _2499 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2500 = _2499.x;
        uint _2511 = uint((float(_2499.y) * floor(float(uint(cbSceneParam._m0[85u].y * _745) / _2500))) + floor(float(uint(cbSceneParam._m0[85u].x * _744) / _2500)));
        float _2521 = (log2(_2487 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2522 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        uint _2525 = uint(isnan(14.0) ? _2522 : (isnan(_2522) ? 14.0 : min(_2522, 14.0)));
        uvec4 _2530 = texelFetch(g_lightClusterGridBuffer, int(((_2525 << 2u) + (_2511 << 6u)) >> 2u));
        uint _2531 = _2530.x;
        uint _2532 = _2499.z;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        if (((((1u << ((_2532 >> 4u) & 15u)) + 4294967295u) & _2531) == 0u) || ((_2532 & 240u) == 0u))
        {
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
        }
        else
        {
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            uint _2781 = 0u;
            uint _2790;
            bool _2791;
            for (;;)
            {
                _2790 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2781 << 2u)) >> 2u)).x;
                _2791 = _2790 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2791)
                {
                    frontier_phi_63_pred = _2780;
                    frontier_phi_63_pred_1 = _2779;
                    frontier_phi_63_pred_2 = _2778;
                    frontier_phi_63_pred_3 = _2777;
                    frontier_phi_63_pred_4 = _2776;
                    frontier_phi_63_pred_5 = _2775;
                }
                else
                {
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    uint _2905;
                    _2899 = _2775;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2778;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2790;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    for (;;)
                    {
                        uint _2909 = uint(findLSB(_2905)) + (_2781 << 5u);
                        uint _2906 = (_2905 + 4294967295u) & _2905;
                        uint _2911 = _2909 * 48u;
                        vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2931 = (_2909 * 48u) + 4u;
                        vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2931)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 3u)).x));
                        uint _2950 = (_2909 * 48u) + 8u;
                        vec3 _2961 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x));
                        float _2965 = _2925.x - _2485;
                        float _2966 = _2925.y - _2486;
                        float _2967 = _2925.z - _2487;
                        float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                        float _2971 = inversesqrt(_2968);
                        float _2972 = _2971 * _2965;
                        float _2973 = _2971 * _2966;
                        float _2974 = _2971 * _2967;
                        float _2975 = dot(vec3(_763, _766, _769), vec3(_2972, _2973, _2974));
                        float _2980 = 1.0 - (_2968 * _2925.w);
                        float _4307 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2981 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _2982 = sqrt(_2968) * _2944.w;
                        float _2985 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2975) + _2986;
                        float _2992 = _2982 * _2982;
                        float _2996 = ((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2981) / ((_2992 * 0.699999988079071044921875) + 1.0);
                        float _3000 = (-0.0) - _2485;
                        float _3001 = (-0.0) - _2486;
                        float _3002 = (-0.0) - _2487;
                        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3017 = exp2(log2(1.0 / ((_2992 * 3.5) + 5.0)) * 0.25);
                        float _3018 = 1.0 - _823;
                        float _3025 = sqrt(1.0 - ((1.0 - (_3018 * _3018)) * (1.0 - (_3017 * _3017))));
                        float _3026 = _3025 * _3025;
                        float _3027 = _3026 * _3026;
                        float _3028 = _3007 + _2972;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                        float _3038 = dot(vec3(_763, _766, _769), vec3(_3007, _3008, _3009));
                        float _4323 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3042 = dot(vec3(_763, _766, _769), vec3(_3034 * _3028, _3034 * _3029, _3034 * _3030));
                        float _4334 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3049 = ((_3045 * _3045) * (_3027 + (-1.0))) + 1.0;
                        float _3050 = _2985 * _3026;
                        float _3051 = _3050 * _3050;
                        float _3054 = ((1.0 - _3051) * _2975) + _3051;
                        float _4345 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3055 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3056 = 1.0 - _3026;
                        float _3066 = (0.5 / (((_3055 * ((_3041 * _3056) + _3026)) + 9.9999999392252902907785028219223e-09) + (((_3055 * _3056) + _3026) * _3041))) * _3055;
                        float _4356 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3077 = (((_3027 * 3.1415927410125732421875) * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) / ((_3049 * _3049) * ((_2992 * 2.1991131305694580078125) + 3.141590118408203125))) * _2981;
                        _2834 = (_2996 * _2944.x) + _2902;
                        _2835 = (_2996 * _2944.y) + _2903;
                        _2836 = (_2996 * _2944.z) + _2904;
                        _2831 = (_3077 * _2961.x) + _2899;
                        _2832 = (_3077 * _2961.y) + _2900;
                        _2833 = (_3077 * _2961.z) + _2901;
                        if (_2906 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2906;
                        }
                    }
                    frontier_phi_63_pred = _2836;
                    frontier_phi_63_pred_1 = _2835;
                    frontier_phi_63_pred_2 = _2834;
                    frontier_phi_63_pred_3 = _2833;
                    frontier_phi_63_pred_4 = _2832;
                    frontier_phi_63_pred_5 = _2831;
                }
                _2642 = frontier_phi_63_pred;
                _2640 = frontier_phi_63_pred_1;
                _2638 = frontier_phi_63_pred_2;
                _2636 = frontier_phi_63_pred_3;
                _2634 = frontier_phi_63_pred_4;
                _2632 = frontier_phi_63_pred_5;
                uint _2782 = _2781 + 1u;
                if (_2782 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2775 = _2632;
                    _2776 = _2634;
                    _2777 = _2636;
                    _2778 = _2638;
                    _2779 = _2640;
                    _2780 = _2642;
                    _2781 = _2782;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
        }
        uvec4 _2645 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2646 = _2645.z;
        uint _2648 = (_2646 >> 8u) & 15u;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((4294967295u << _2648) & _2531) == 0u)
        {
            _2743 = _2631;
            _2745 = _2633;
            _2747 = _2635;
            _2749 = _2637;
            _2751 = _2639;
            _2753 = _2641;
        }
        else
        {
            float _2768 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
            float _2769 = _2768 * _2485;
            float _2770 = _2768 * _2486;
            float _2771 = _2768 * _2487;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2648 < ((_2646 >> 12u) & 15u))
            {
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2882 = _2631;
                float _2883 = _2633;
                float _2884 = _2635;
                float _2885 = _2637;
                float _2886 = _2639;
                float _2887 = _2641;
                uint _2888 = _2648;
                uint _2897;
                bool _2898;
                for (;;)
                {
                    _2897 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2888 << 2u)) >> 2u)).x;
                    _2898 = _2897 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2898)
                    {
                        frontier_phi_69_pred = _2887;
                        frontier_phi_69_pred_1 = _2886;
                        frontier_phi_69_pred_2 = _2885;
                        frontier_phi_69_pred_3 = _2884;
                        frontier_phi_69_pred_4 = _2883;
                        frontier_phi_69_pred_5 = _2882;
                    }
                    else
                    {
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3095 = _2882;
                        float _3096 = _2883;
                        float _3097 = _2884;
                        float _3098 = _2885;
                        float _3099 = _2886;
                        float _3100 = _2887;
                        uint _3101 = _2897;
                        uint _3102;
                        vec4 _3127;
                        float _3128;
                        vec4 _3143;
                        vec3 _3155;
                        vec4 _3170;
                        vec4 _3186;
                        float _3233;
                        bool _3234;
                        for (;;)
                        {
                            uint _3112 = ((_2888 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3101));
                            _3102 = (_3101 + 4294967295u) & _3101;
                            uint _3114 = _3112 * 40u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3128 = _3127.w;
                            uint _3130 = (_3112 * 40u) + 4u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3112 * 40u) + 8u;
                            _3155 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x));
                            uint _3157 = (_3112 * 40u) + 16u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3173 = (_3112 * 40u) + 20u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3189 = (_3112 * 40u) + 24u;
                            vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3208 = (_3112 * 40u) + 28u;
                            vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            _3233 = fma(_2487, _3221.z, fma(_2486, _3221.y, _3221.x * _2485)) + _3221.w;
                            _3234 = !((fma(_2487, _3202.z, fma(_2486, _3202.y, _3202.x * _2485)) + _3202.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3234)
                            {
                                float _3261 = _3127.x - _2485;
                                float _3262 = _3127.y - _2486;
                                float _3263 = _3127.z - _2487;
                                float _3264 = dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263));
                                float _3267 = inversesqrt(_3264);
                                float _3268 = _3267 * _3261;
                                float _3269 = _3267 * _3262;
                                float _3270 = _3267 * _3263;
                                float _3274 = 1.0 - (_3264 / (_3128 * _3128));
                                float _4367 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3279 = sqrt(_3264) * _3143.w;
                                float _3281 = 1.39999997615814208984375 / (_3279 + 1.39999997615814208984375);
                                float _3282 = _3281 * _3281;
                                float _3285 = ((1.0 - _3282) * dot(vec3(_3268, _3269, _3270), vec3(_763, _766, _769))) + _3282;
                                float _3288 = _3279 * _3279;
                                float _3292 = (fma(_2487, _3170.z, fma(_2486, _3170.y, _3170.x * _2485)) + _3170.w) / _3233;
                                float _3293 = (fma(_2487, _3186.z, fma(_2486, _3186.y, _3186.x * _2485)) + _3186.w) / _3233;
                                float _3297 = 1.0 - dot(vec2(_3292, _3293), vec2(_3292, _3293));
                                float _4383 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3299 = _3298 * (((isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0))) * _3275) / ((_3288 * 0.699999988079071044921875) + 1.0));
                                float _3311 = exp2(log2(1.0 / ((_3288 * 3.5) + 5.0)) * 0.25);
                                float _3312 = 1.0 - _823;
                                float _3319 = sqrt(1.0 - ((1.0 - (_3312 * _3312)) * (1.0 - (_3311 * _3311))));
                                float _3320 = _3319 * _3319;
                                float _3321 = _3320 * _3320;
                                float _3322 = _3268 - _2769;
                                float _3323 = _3269 - _2770;
                                float _3324 = _3270 - _2771;
                                float _3328 = inversesqrt(dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324)));
                                float _3332 = dot(vec3(_763, _766, _769), vec3((-0.0) - _2769, (-0.0) - _2770, (-0.0) - _2771));
                                float _4394 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3335 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3336 = dot(vec3(_763, _766, _769), vec3(_3328 * _3322, _3328 * _3323, _3328 * _3324));
                                float _4405 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3339 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3343 = ((_3339 * _3339) * (_3321 + (-1.0))) + 1.0;
                                float _3344 = _3281 * _3320;
                                float _3345 = _3344 * _3344;
                                float _3351 = ((1.0 - _3345) * dot(vec3(_763, _766, _769), vec3(_3268, _3269, _3270))) + _3345;
                                float _4416 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3353 = 1.0 - _3320;
                                float _3363 = (0.5 / (((_3352 * ((_3335 * _3353) + _3320)) + 9.9999999392252902907785028219223e-09) + (((_3352 * _3353) + _3320) * _3335))) * _3352;
                                float _4427 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3373 = (_3298 * _3275) * (((_3321 * 3.1415927410125732421875) * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) / ((_3343 * _3343) * ((_3288 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3299 * _3143.z;
                                frontier_phi_75_pred_1 = _3299 * _3143.y;
                                frontier_phi_75_pred_2 = _3299 * _3143.x;
                                frontier_phi_75_pred_3 = _3373 * _3155.z;
                                frontier_phi_75_pred_4 = _3373 * _3155.y;
                                frontier_phi_75_pred_5 = _3373 * _3155.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3382 = frontier_phi_75_pred;
                            _3381 = frontier_phi_75_pred_1;
                            _3380 = frontier_phi_75_pred_2;
                            _3379 = frontier_phi_75_pred_3;
                            _3378 = frontier_phi_75_pred_4;
                            _3377 = frontier_phi_75_pred_5;
                            _3085 = _3380 + _3098;
                            _3086 = _3381 + _3099;
                            _3087 = _3382 + _3100;
                            _3082 = _3377 + _3095;
                            _3083 = _3378 + _3096;
                            _3084 = _3379 + _3097;
                            if (_3102 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3102;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3087;
                        frontier_phi_69_pred_1 = _3086;
                        frontier_phi_69_pred_2 = _3085;
                        frontier_phi_69_pred_3 = _3084;
                        frontier_phi_69_pred_4 = _3083;
                        frontier_phi_69_pred_5 = _3082;
                    }
                    _2754 = frontier_phi_69_pred;
                    _2752 = frontier_phi_69_pred_1;
                    _2750 = frontier_phi_69_pred_2;
                    _2748 = frontier_phi_69_pred_3;
                    _2746 = frontier_phi_69_pred_4;
                    _2744 = frontier_phi_69_pred_5;
                    uint _2889 = _2888 + 1u;
                    if (_2889 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2882 = _2744;
                        _2883 = _2746;
                        _2884 = _2748;
                        _2885 = _2750;
                        _2886 = _2752;
                        _2887 = _2754;
                        _2888 = _2889;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2754;
                frontier_phi_57_58_ladder_1 = _2752;
                frontier_phi_57_58_ladder_2 = _2750;
                frontier_phi_57_58_ladder_3 = _2748;
                frontier_phi_57_58_ladder_4 = _2746;
                frontier_phi_57_58_ladder_5 = _2744;
            }
            else
            {
                frontier_phi_57_58_ladder = _2641;
                frontier_phi_57_58_ladder_1 = _2639;
                frontier_phi_57_58_ladder_2 = _2637;
                frontier_phi_57_58_ladder_3 = _2635;
                frontier_phi_57_58_ladder_4 = _2633;
                frontier_phi_57_58_ladder_5 = _2631;
            }
            _2743 = frontier_phi_57_58_ladder_5;
            _2745 = frontier_phi_57_58_ladder_4;
            _2747 = frontier_phi_57_58_ladder_3;
            _2749 = frontier_phi_57_58_ladder_2;
            _2751 = frontier_phi_57_58_ladder_1;
            _2753 = frontier_phi_57_58_ladder;
        }
        float _2758 = isnan(1.0) ? _807 : (isnan(_807) ? 1.0 : min(_807, 1.0));
        _2543 = (_2758 * _2749) + _1996;
        _2545 = (_2758 * _2751) + _1998;
        _2547 = (_2758 * _2753) + _2000;
        _2549 = ((_2743 * 0.039999999105930328369140625) * _2758) + _2329;
        _2551 = ((_2745 * 0.039999999105930328369140625) * _2758) + _2331;
        _2553 = ((_2747 * 0.039999999105930328369140625) * _2758) + _2333;
    }
    else
    {
        _2543 = _1996;
        _2545 = _1998;
        _2547 = _2000;
        _2549 = _2329;
        _2551 = _2331;
        _2553 = _2333;
    }
    float _4443 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4454 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4465 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    uint _2573 = _782 + 6u;
    float _2581 = _744 / cbSceneParam._m0[86u].x;
    float _2582 = _745 / cbSceneParam._m0[86u].y;
    vec4 _2596 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, (log2((isnan(cbSceneParam._m0[77u].w) ? _679 : (isnan(_679) ? cbSceneParam._m0[77u].w : min(_679, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2598 = _2596.x;
    float _2599 = _2596.y;
    float _2600 = _2596.z;
    float _2601 = _2596.w;
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    if (_679 > cbSceneParam._m0[78u].w)
    {
        float _2656 = isnan(_679) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _679 : min(cbSceneParam._m0[80u].w, _679));
        float _2657 = _2656 / _679;
        float _2668 = _2657 * _729;
        float _2669 = _730 * _2657;
        float _2670 = (-0.0) - _2669;
        float _2671 = _2657 * _731;
        float _2673 = (cbSceneParam._m0[77u].w * _2670) / _2656;
        float _2674 = _2673 + cbSceneParam._m0[79u].w;
        float _2675 = cbSceneParam._m0[79u].w - _2669;
        float _2681 = sqrt(((_2668 * _2668) + (_2669 * _2669)) + (_2671 * _2671));
        float _2684 = (1.0 - (cbSceneParam._m0[77u].w / _2656)) * _2681;
        float _2689 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2691 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2844;
        if (abs((_2670 - _2673) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2844 = ((((_2674 > 0.0) ? exp2(_2689 * _2674) : (2.0 - exp2(_2691 * _2674))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2684;
        }
        else
        {
            float _2804 = 1.0 / cbSceneParam._m0[80u].x;
            float _2805 = isnan(_2675) ? _2674 : (isnan(_2674) ? _2675 : max(_2674, _2675));
            float _2806 = isnan(_2675) ? _2674 : (isnan(_2674) ? _2675 : min(_2674, _2675));
            float _2815 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : min(_2805, 0.0));
            float _2816 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : min(_2806, 0.0));
            _2844 = ((abs(_2681 / _2670) * cbSceneParam._m0[80u].y) * ((((_2815 - _2816) * 2.0) - ((exp2(_2689 * (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0)))) - exp2(_2689 * (isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))))) * _2804)) - ((exp2(_2691 * _2815) - exp2(_2691 * _2816)) * _2804))) + (_2684 * cbSceneParam._m0[80u].z);
        }
        vec4 _2846 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, 1.0), 0.0);
        float _2855 = exp2((_2844 * (-1.44269502162933349609375)) * (1.0 - _2846.w));
        float _2856 = log2(_2855);
        float _2872 = log2(_2601);
        _2693 = (exp2(_2872 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].x)) * _2846.x) / cbSceneParam._m0[78u].x)) + _2598;
        _2695 = (exp2(_2872 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].y)) * _2846.y) / cbSceneParam._m0[78u].y)) + _2599;
        _2697 = (exp2(_2872 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].z)) * _2846.z) / cbSceneParam._m0[78u].z)) + _2600;
        _2699 = _2855 * _2601;
    }
    else
    {
        _2693 = _2598;
        _2695 = _2599;
        _2697 = _2600;
        _2699 = _2601;
    }
    float _2711 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2712 = _2711 == 3.0;
    float _2713 = log2(_2699);
    float _2720 = exp2(_2713 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2543 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _807))) + ((_2549 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1613)) * cbPerFrame._m0[3u].x));
    float _2721 = exp2(_2713 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2545 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _807))) + ((_2551 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1613)) * cbPerFrame._m0[3u].x));
    float _2722 = exp2(_2713 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2547 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _807))) + ((_2553 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1613)) * cbPerFrame._m0[3u].x));
    float _2731 = (_2711 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2731 * (_2712 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2693)));
    SV_Target.y = _2731 * (_2712 ? _2721 : (_2721 + (cbSceneParam._m0[72u].w * _2695)));
    SV_Target.z = _2731 * (_2712 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2697)));
    SV_Target.w = cbInstanceData._m0[_2573].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2573].w;
}


