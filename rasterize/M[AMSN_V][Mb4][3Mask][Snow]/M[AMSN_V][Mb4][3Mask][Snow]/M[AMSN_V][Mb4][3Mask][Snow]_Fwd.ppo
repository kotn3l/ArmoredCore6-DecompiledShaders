#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1176;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _256 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _262 = _256.x * cbMtdParam._m0[10u].x;
    float _263 = _256.y * cbMtdParam._m0[10u].y;
    float _264 = _256.z * cbMtdParam._m0[10u].z;
    vec4 _283 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    vec4 _302 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _333 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x;
    float _344 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((((1.0 - TEXCOORD_3.x) - _302.x) * 2.0) - _333)) + 1.0;
    float _3487 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _345 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _352 = (_345 * ((_283.x * cbMtdParam._m0[11u].x) - _262)) + _262;
    float _353 = (_345 * ((_283.y * cbMtdParam._m0[11u].y) - _263)) + _263;
    float _354 = (_345 * ((_283.z * cbMtdParam._m0[11u].z) - _264)) + _264;
    vec4 _372 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _385 = ((((((1.0 - TEXCOORD_3.y) - _302.y) * 2.0) - _333) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3498 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _393 = (((_372.x * cbMtdParam._m0[12u].x) - _352) * _386) + _352;
    float _394 = (_386 * ((_372.y * cbMtdParam._m0[12u].y) - _353)) + _353;
    float _395 = (_386 * ((_372.z * cbMtdParam._m0[12u].z) - _354)) + _354;
    vec4 _413 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _426 = ((((((1.0 - TEXCOORD_3.z) - _302.z) * 2.0) - _333) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3509 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _434 = (((_413.x * cbMtdParam._m0[13u].x) - _393) * _427) + _393;
    float _435 = (_427 * ((_413.y * cbMtdParam._m0[13u].y) - _394)) + _394;
    float _436 = (_427 * ((_413.z * cbMtdParam._m0[13u].z) - _395)) + _395;
    vec4 _454 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _478 = _476.x;
    float _479 = _476.y;
    float _480 = _476.z;
    vec4 _492 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _503 = ((_492.x - _478) * _345) + _478;
    float _504 = ((_492.y - _479) * _345) + _479;
    float _505 = ((_492.z - _480) * _345) + _480;
    vec4 _518 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _529 = ((_518.x - _503) * _386) + _503;
    float _530 = ((_518.y - _504) * _386) + _504;
    float _531 = ((_518.z - _505) * _386) + _505;
    vec4 _544 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _557 = ((_544.z - _531) * _427) + _531;
    float _560 = ((((_544.x - _529) * _427) + _529) * 2.0) + (-1.0);
    float _562 = ((((_544.y - _530) * _427) + _530) * 2.0) + (-1.0);
    float _563 = dot(vec2(_560, _562), vec2(_560, _562));
    float _3520 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))));
    float _571 = fma(_568, _234, fma(_562, _227, _560 * _213));
    float _574 = fma(_568, _235, fma(_562, _228, _560 * _214));
    float _577 = fma(_568, _236, fma(_562, _229, _560 * _215));
    float _586 = exp2(log2(inversesqrt(dot(vec3(_571, _574, _577), vec3(_571, _574, _577))) * _574) * cbMtdParam._m0[15u].y) * cbMtdParam._m0[14u].y;
    float _3531 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _587 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _3542 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _590 = 3.0 - (_588 * 2.0);
    float _595 = _588 * _588;
    float _602 = ((_595 * ((_454.x * cbMtdParam._m0[9u].x) - _434)) * _590) + _434;
    float _603 = ((_595 * ((_454.y * cbMtdParam._m0[9u].y) - _435)) * _590) + _435;
    float _604 = ((_595 * ((_454.z * cbMtdParam._m0[9u].z) - _436)) * _590) + _436;
    vec4 _616 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Snow_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _622 = (_616.x * 2.0) + (-1.0);
    float _623 = (_616.y * 2.0) + (-1.0);
    float _624 = dot(vec2(_622, _623), vec2(_622, _623));
    float _3553 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _639 = ((_595 * (_622 - _560)) * _590) + _560;
    float _640 = ((_595 * (_623 - _562)) * _590) + _562;
    float _641 = ((_595 * (sqrt(1.0 - (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) - _568)) * _590) + _568;
    float _644 = fma(_641, _234, fma(_640, _227, _639 * _213));
    float _647 = fma(_641, _235, fma(_640, _228, _639 * _214));
    float _650 = fma(_641, _236, fma(_640, _229, _639 * _215));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _3564 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _658 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _3575 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3586 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3597 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _677 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _727 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _717);
    float _728 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _717);
    float _729 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _717);
    float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
    float _734 = _727 * _733;
    float _735 = _728 * _733;
    float _736 = _729 * _733;
    float _742 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _743 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _761 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _764 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _767 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    uint _780 = uint(roundEven(NORMAL.w)) * 13u;
    uint _782 = (_780 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _788 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_782].x;
    float _789 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_782].y;
    float _790 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_782].z;
    float _3608 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    vec4 _802 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _742, cbSceneParam._m0[86u].y * _743));
    float _805 = _802.x * TEXCOORD_3.w;
    float _806 = dot(vec3(_655, _656, _657), vec3(_734, _735, _736));
    float _809 = _806 * 2.0;
    float _813 = (_809 * _655) - _734;
    float _814 = (_809 * _656) - _735;
    float _815 = (_809 * _657) - _736;
    float _819 = abs(dot(vec3(_734, _735, _736), vec3(_655, _656, _657)));
    float _3641 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _821 = sqrt(_658);
    float _833 = exp2((_821 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_821 * 3.0));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1175;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _900 = fma(_873, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865));
        float _904 = fma(_873, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865));
        float _908 = fma(_873, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865));
        float _933 = _865 + _655;
        float _934 = _869 + _656;
        float _935 = _873 + _657;
        float _945 = fma(_935, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _933)) - _900;
        float _946 = fma(_935, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _933)) - _904;
        float _947 = fma(_935, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _933)) - _908;
        float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
        float _964 = ((_951 * _945) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_900 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_951 * _946) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_904 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_951 * _947) / cbModelParam._m0[34u].z) + ((((((_908 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        float _1003 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_969.x + (-0.5));
        float _1005 = _1003 * (_969.y + (-0.5));
        float _1006 = _1003 * (_969.z + (-0.5));
        float _1013 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_976.x + (-0.5));
        float _1015 = _1013 * (_976.y + (-0.5));
        float _1016 = _1013 * (_976.z + (-0.5));
        float _1023 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_983.x + (-0.5));
        float _1025 = _1023 * (_983.y + (-0.5));
        float _1026 = _1023 * (_983.z + (-0.5));
        float _1033 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_990.x + (-0.5));
        float _1035 = _1033 * (_990.y + (-0.5));
        float _1036 = _1033 * (_990.z + (-0.5));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = _1004 * 0.5;
        float _1041 = _1014 * 0.5;
        float _1042 = _1024 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1057 = (dot(vec3(_655, _656, _657), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1067 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3689 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1069 + 1.0))) + _1074) * _1037;
        float _1084 = _1005 * 0.5;
        float _1085 = _1015 * 0.5;
        float _1086 = _1025 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_655, _656, _657), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3722 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1111 + 1.0))) + _1116) * _1038;
        float _1126 = _1006 * 0.5;
        float _1127 = _1016 * 0.5;
        float _1128 = _1026 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_655, _656, _657), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3755 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1153 + 1.0))) + _1158) * _1039;
        _1175 = _1006;
        _1177 = _1005;
        _1178 = _1004;
        _1179 = _1016;
        _1180 = _1015;
        _1181 = _1014;
        _1182 = _1026;
        _1183 = _1025;
        _1184 = _1024;
        _1185 = _1039;
        _1186 = _1038;
        _1187 = _1037;
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
    }
    else
    {
        _1175 = _1176;
        _1177 = _1176;
        _1178 = _1176;
        _1179 = _1176;
        _1180 = _1176;
        _1181 = _1176;
        _1182 = _1176;
        _1183 = _1176;
        _1184 = _1176;
        _1185 = _1176;
        _1186 = _1176;
        _1187 = _1176;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1216 = fma(_873, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865));
        float _1220 = fma(_873, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865));
        float _1224 = fma(_873, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865));
        float _1247 = _865 + _655;
        float _1248 = _869 + _656;
        float _1249 = _873 + _657;
        float _1259 = fma(_1249, cbModelParam._m0[30u].z, fma(_1248, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1247)) - _1216;
        float _1260 = fma(_1249, cbModelParam._m0[31u].z, fma(_1248, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1247)) - _1220;
        float _1261 = fma(_1249, cbModelParam._m0[32u].z, fma(_1248, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1247)) - _1224;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1278 = ((_1265 * _1259) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1216 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1265 * _1260) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1220 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1265 * _1261) / cbModelParam._m0[35u].z) + ((((((_1224 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        float _1315 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1282.x + (-0.5));
        float _1317 = _1315 * (_1282.y + (-0.5));
        float _1318 = _1315 * (_1282.z + (-0.5));
        float _1325 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1289.x + (-0.5));
        float _1327 = _1325 * (_1289.y + (-0.5));
        float _1328 = _1325 * (_1289.z + (-0.5));
        float _1335 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1296.x + (-0.5));
        float _1337 = _1335 * (_1296.y + (-0.5));
        float _1338 = _1335 * (_1296.z + (-0.5));
        float _1345 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1303.x + (-0.5));
        float _1347 = _1345 * (_1303.y + (-0.5));
        float _1348 = _1345 * (_1303.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_655, _656, _657), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3818 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1379 + 1.0))) + _1384) * _1349;
        float _1394 = _1317 * 0.5;
        float _1395 = _1327 * 0.5;
        float _1396 = _1337 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_655, _656, _657), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _3851 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1421 + 1.0))) + _1426) * _1350;
        float _1436 = _1318 * 0.5;
        float _1437 = _1328 * 0.5;
        float _1438 = _1338 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_655, _656, _657), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _3884 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1463 + 1.0))) + _1468) * _1351;
        _1485 = _1318;
        _1486 = _1317;
        _1487 = _1316;
        _1488 = _1328;
        _1489 = _1327;
        _1490 = _1326;
        _1491 = _1338;
        _1492 = _1337;
        _1493 = _1336;
        _1494 = _1351;
        _1495 = _1350;
        _1496 = _1349;
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
    }
    else
    {
        _1485 = _1176;
        _1486 = _1176;
        _1487 = _1176;
        _1488 = _1176;
        _1489 = _1176;
        _1490 = _1176;
        _1491 = _1176;
        _1492 = _1176;
        _1493 = _1176;
        _1494 = _1176;
        _1495 = _1176;
        _1496 = _1176;
        _1497 = 0.0;
        _1498 = 0.0;
        _1499 = 0.0;
    }
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1188)) + _1188;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1189)) + _1189;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1190)) + _1190;
    float _1532 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1509));
    float _1553 = _813 * 0.5;
    float _1554 = _814 * 0.5;
    float _1555 = _815 * 0.5;
    float _1556 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1559 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1562 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1596;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1569 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1175, _1179, _1182, _1185));
        float _1573 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1577 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1178, _1181, _1184, _1187));
        float _1584 = dot(vec4(cbModelParam._m0[39u]), vec4(_1553, _1554, _1555, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1584) ? 0.0 : (isnan(0.0) ? _1584 : max(0.0, _1584))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1607;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1598 = dot(vec4(cbModelParam._m0[40u]), vec4(_1553, _1554, _1555, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1598) ? 0.0 : (isnan(0.0) ? _1598 : max(0.0, _1598))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1611 = (_1607 * cbModelParam._m0[1u].x) + (_1596 * (1.0 - cbModelParam._m0[1u].x));
    float _1621 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _658);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1621 : min(cbModelParam._m0[25u].z, _1621));
    float _1702;
    float _1704;
    float _1706;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1669 = fma(_873, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865)) + cbModelParam._m0[13u].w;
        float _1673 = fma(_873, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865)) + cbModelParam._m0[14u].w;
        float _1677 = fma(_873, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865)) + cbModelParam._m0[15u].w;
        float _1680 = fma(_815, cbModelParam._m0[13u].z, fma(_814, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _813));
        float _1683 = fma(_815, cbModelParam._m0[14u].z, fma(_814, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _813));
        float _1686 = fma(_815, cbModelParam._m0[15u].z, fma(_814, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _813));
        float _1714;
        if (_1680 > 0.0)
        {
            _1714 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1714 = frontier_phi_16_14_ladder;
        }
        float _1918;
        if (_1683 > 0.0)
        {
            _1918 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1918 = frontier_phi_25_21_ladder;
        }
        float _2161;
        if (_1686 > 0.0)
        {
            _2161 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2161 = frontier_phi_37_32_ladder;
        }
        float _2163 = isnan(_1918) ? _1714 : (isnan(_1714) ? _1918 : min(_1714, _1918));
        float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
        float _2168 = (_2164 * _1680) + _1669;
        float _2169 = (_2164 * _1683) + _1673;
        float _2170 = (_2164 * _1686) + _1677;
        float _2171 = _2164 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2171;
        float _2175 = _2171 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 > _2175) || ((_2169 < _2173) || ((_2168 < _2173) || (_2168 > _2175))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2294 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2170, cbModelParam._m0[9u].z, fma(_2169, cbModelParam._m0[9u].y, _2168 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2170, cbModelParam._m0[10u].z, fma(_2169, cbModelParam._m0[10u].y, _2168 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2170, cbModelParam._m0[11u].z, fma(_2169, cbModelParam._m0[11u].y, _2168 * cbModelParam._m0[11u].x))), _1622);
            frontier_phi_15_37_ladder = _2294.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2294.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2294.x * cbModelParam._m0[1u].y;
        }
        _1702 = frontier_phi_15_37_ladder_2;
        _1704 = frontier_phi_15_37_ladder_1;
        _1706 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1690 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_813, _814, _815), _1622);
        _1702 = _1690.x * cbModelParam._m0[1u].y;
        _1704 = _1690.y * cbModelParam._m0[1u].y;
        _1706 = _1690.z * cbModelParam._m0[1u].y;
    }
    float _1710 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _658);
    float _1711 = isnan(_1710) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1710 : min(cbModelParam._m0[25u].w, _1710));
    float _1804;
    float _1806;
    float _1808;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1768 = fma(_873, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865)) + cbModelParam._m0[21u].w;
        float _1772 = fma(_873, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865)) + cbModelParam._m0[22u].w;
        float _1776 = fma(_873, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865)) + cbModelParam._m0[23u].w;
        float _1779 = fma(_815, cbModelParam._m0[21u].z, fma(_814, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _813));
        float _1782 = fma(_815, cbModelParam._m0[22u].z, fma(_814, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _813));
        float _1785 = fma(_815, cbModelParam._m0[23u].z, fma(_814, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _813));
        float _1923;
        if (_1779 > 0.0)
        {
            _1923 = abs((1.0 - _1768) / _1779);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1768 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1923 = frontier_phi_27_23_ladder;
        }
        float _2188;
        if (_1782 > 0.0)
        {
            _2188 = abs((1.0 - _1772) / _1782);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1772 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2188 = frontier_phi_39_34_ladder;
        }
        float _2393;
        if (_1785 > 0.0)
        {
            _2393 = abs((1.0 - _1776) / _1785);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1776 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2393 = frontier_phi_48_45_ladder;
        }
        float _2395 = isnan(_2188) ? _1923 : (isnan(_1923) ? _2188 : min(_1923, _2188));
        float _2396 = isnan(_2393) ? _2395 : (isnan(_2395) ? _2393 : min(_2395, _2393));
        float _2400 = (_2396 * _1779) + _1768;
        float _2401 = (_2396 * _1782) + _1772;
        float _2402 = (_2396 * _1785) + _1776;
        float _2403 = _2396 * 9.9999997473787516355514526367188e-05;
        float _2404 = (-1.0) - _2403;
        float _2406 = _2403 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2402 > _2406) || ((_2402 < _2404) || ((_2401 > _2406) || ((_2401 < _2404) || ((_2400 < _2404) || (_2400 > _2406))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2402, cbModelParam._m0[17u].z, fma(_2401, cbModelParam._m0[17u].y, _2400 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2402, cbModelParam._m0[18u].z, fma(_2401, cbModelParam._m0[18u].y, _2400 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2402, cbModelParam._m0[19u].z, fma(_2401, cbModelParam._m0[19u].y, _2400 * cbModelParam._m0[19u].x))), _1711);
            frontier_phi_24_48_ladder = _2600.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2600.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2600.x * cbModelParam._m0[1u].z;
        }
        _1804 = frontier_phi_24_48_ladder_2;
        _1806 = frontier_phi_24_48_ladder_1;
        _1808 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1788 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_813, _814, _815), _1711);
        _1804 = _1788.x * cbModelParam._m0[1u].z;
        _1806 = _1788.y * cbModelParam._m0[1u].z;
        _1808 = _1788.z * cbModelParam._m0[1u].z;
    }
    float _1820 = ((((1.0 - _833) * ((_821 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_833 * _821)) * _805;
    float _1821 = _1820 * ((cbModelParam._m0[1u].w * (_1804 - _1702)) + _1702);
    float _1822 = _1820 * ((cbModelParam._m0[1u].w * (_1806 - _1704)) + _1704);
    float _1823 = _1820 * ((cbModelParam._m0[1u].w * (_1808 - _1706)) + _1706);
    float _1826 = fma(_1823, cbSceneParam._m0[89u].z, fma(_1822, cbSceneParam._m0[89u].y, _1821 * cbSceneParam._m0[89u].x));
    float _1829 = fma(_1823, cbSceneParam._m0[90u].z, fma(_1822, cbSceneParam._m0[90u].y, _1821 * cbSceneParam._m0[90u].x));
    float _1832 = fma(_1823, cbSceneParam._m0[91u].z, fma(_1822, cbSceneParam._m0[91u].y, _1821 * cbSceneParam._m0[91u].x));
    uvec4 _1842 = floatBitsToUint(cbInstanceData._m0[_780 + 5u]);
    uint _1844 = _1842.x * 14u;
    uint _1845 = _1844 + 13u;
    float _1852 = _805 + (-1.0);
    float _1857 = (cbLight._m0[_1845].x * _1852) + 1.0;
    float _1858 = (cbLight._m0[_1845].y * _1852) + 1.0;
    float _1859 = (cbLight._m0[_1845].z * _1852) + 1.0;
    float _1860 = (cbLight._m0[_1845].w * _1852) + 1.0;
    uint _1861 = _1844 + 5u;
    float _1867 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1871 = _1844 + 4u;
    float _1877 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1881 = _1844 | 1u;
    float _1892 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_655, _656, _657));
    float _1895 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_655, _656, _657));
    float _4020 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _4031 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1900 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 0.3183098733425140380859375;
    float _1902 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * 0.3183098733425140380859375;
    float _1909 = ((cbLight._m0[_1861].x * _1867) * _1902) + ((cbLight._m0[_1871].x * _1877) * _1900);
    float _1910 = ((_1867 * cbLight._m0[_1861].y) * _1902) + ((_1877 * cbLight._m0[_1871].y) * _1900);
    float _1911 = ((_1867 * cbLight._m0[_1861].z) * _1902) + ((_1877 * cbLight._m0[_1871].z) * _1900);
    uvec4 _1915 = floatBitsToUint(cbLight._m0[_1844 + 12u]);
    bool _1917 = _1915.x == 0u;
    float _1928;
    float _1930;
    float _1932;
    if (_1917)
    {
        _1928 = _1909;
        _1930 = _1910;
        _1932 = _1911;
    }
    else
    {
        uint _1936 = _1844 + 6u;
        float _1952 = (dot(vec3(cbLight._m0[_1844 + 2u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _1953 = _1952 * _1952;
        float _4042 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1954 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1955 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _1928 = (((cbLight._m0[_1936].x * 0.3183098733425140380859375) * _1954) * _1955) + _1909;
        _1930 = (((cbLight._m0[_1936].y * 0.3183098733425140380859375) * _1954) * _1955) + _1910;
        _1932 = (((cbLight._m0[_1936].z * 0.3183098733425140380859375) * _1954) * _1955) + _1911;
    }
    bool _1935 = _1915.y == 0u;
    float _1973;
    float _1975;
    float _1977;
    if (_1935)
    {
        _1973 = _1928;
        _1975 = _1930;
        _1977 = _1932;
    }
    else
    {
        uint _2132 = _1844 + 7u;
        float _2148 = (dot(vec3(cbLight._m0[_1844 + 3u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2149 = _2148 * _2148;
        float _4058 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2150 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2151 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _1973 = (((cbLight._m0[_2132].x * 0.3183098733425140380859375) * _2150) * _2151) + _1928;
        _1975 = (((cbLight._m0[_2132].y * 0.3183098733425140380859375) * _2150) * _2151) + _1930;
        _1977 = (((cbLight._m0[_2132].z * 0.3183098733425140380859375) * _2150) * _2151) + _1932;
    }
    uint _1980 = _1844 + 8u;
    float _1993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _658) * 0.949999988079071044921875);
    float _1994 = _1993 * _1993;
    float _1995 = cbLight._m0[_1844].x + _734;
    float _1996 = cbLight._m0[_1844].y + _735;
    float _1997 = cbLight._m0[_1844].z + _736;
    float _2001 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
    float _2002 = _2001 * _1995;
    float _2003 = _2001 * _1996;
    float _2004 = _2001 * _1997;
    float _2005 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1844].xyz));
    float _4074 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _2009 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _2010 = dot(vec3(_655, _656, _657), vec3(_2002, _2003, _2004));
    float _4096 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _2014 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2002, _2003, _2004));
    float _4107 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2018 = _1994 * _1994;
    float _2022 = ((_2013 * _2013) * (_2018 + (-1.0))) + 1.0;
    float _2033 = (exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2034 = 1.0 - _1994;
    float _2045 = (0.5 / (((_2009 * ((_2008 * _2034) + _1994)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2034) + _1994) * _2008))) * _2008;
    float _4118 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2047 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2018 / ((_2022 * _2022) * 3.141590118408203125));
    uint _2058 = _1844 + 9u;
    float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1881].w)) * _658) * 0.949999988079071044921875);
    float _2070 = _2069 * _2069;
    float _2071 = cbLight._m0[_1881].x + _734;
    float _2072 = cbLight._m0[_1881].y + _735;
    float _2073 = cbLight._m0[_1881].z + _736;
    float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
    float _2078 = _2077 * _2071;
    float _2079 = _2077 * _2072;
    float _2080 = _2077 * _2073;
    float _2081 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1881].xyz));
    float _4129 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2085 = dot(vec3(_655, _656, _657), vec3(_2078, _2079, _2080));
    float _4140 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_2078, _2079, _2080));
    float _4151 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2070 * _2070;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2106 = (exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2107 = 1.0 - _2070;
    float _2117 = (0.5 / (((_2009 * ((_2084 * _2107) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2107) + _2070) * _2084))) * _2084;
    float _4162 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2119 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    float _2129 = (((_2106 * cbLight._m0[_2058].x) * _2119) * _1867) + (((_2033 * cbLight._m0[_1980].x) * _2047) * _1877);
    float _2130 = (((_2106 * cbLight._m0[_2058].y) * _2119) * _1867) + (((_2033 * cbLight._m0[_1980].y) * _2047) * _1877);
    float _2131 = (((_2106 * cbLight._m0[_2058].z) * _2119) * _1867) + (((_2033 * cbLight._m0[_1980].z) * _2047) * _1877);
    float _2193;
    float _2195;
    float _2197;
    if (_1917)
    {
        _2193 = _2129;
        _2195 = _2130;
        _2197 = _2131;
    }
    else
    {
        uint _2199 = _1844 + 2u;
        uint _2203 = _1844 + 10u;
        float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _658) * 0.949999988079071044921875);
        float _2218 = _2217 * _2217;
        float _2219 = cbLight._m0[_2199].x + _734;
        float _2220 = cbLight._m0[_2199].y + _735;
        float _2221 = cbLight._m0[_2199].z + _736;
        float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
        float _2226 = _2225 * _2219;
        float _2227 = _2225 * _2220;
        float _2228 = _2225 * _2221;
        float _2229 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2199].xyz));
        float _4173 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2233 = dot(vec3(_655, _656, _657), vec3(_2226, _2227, _2228));
        float _4184 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2237 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2226, _2227, _2228));
        float _4195 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2241 = _2218 * _2218;
        float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
        float _2254 = (exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2255 = 1.0 - _2218;
        float _2265 = (0.5 / (((_2009 * ((_2232 * _2255) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2255) + _2218) * _2232))) * _2232;
        float _4206 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2267 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
        float _2268 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2193 = (((_2254 * cbLight._m0[_2203].x) * _2267) * _2268) + _2129;
        _2195 = (((_2254 * cbLight._m0[_2203].y) * _2267) * _2268) + _2130;
        _2197 = (((_2254 * cbLight._m0[_2203].z) * _2267) * _2268) + _2131;
    }
    float _2303;
    float _2305;
    float _2307;
    if (_1935)
    {
        _2303 = _2193;
        _2305 = _2195;
        _2307 = _2197;
    }
    else
    {
        uint _2314 = _1844 + 3u;
        uint _2318 = _1844 + 11u;
        float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _658) * 0.949999988079071044921875);
        float _2333 = _2332 * _2332;
        float _2334 = cbLight._m0[_2314].x + _734;
        float _2335 = cbLight._m0[_2314].y + _735;
        float _2336 = cbLight._m0[_2314].z + _736;
        float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
        float _2341 = _2340 * _2334;
        float _2342 = _2340 * _2335;
        float _2343 = _2340 * _2336;
        float _2344 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2314].xyz));
        float _4222 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2348 = dot(vec3(_655, _656, _657), vec3(_2341, _2342, _2343));
        float _4233 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2352 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2341, _2342, _2343));
        float _4244 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2356 = _2333 * _2333;
        float _2360 = ((_2351 * _2351) * (_2356 + (-1.0))) + 1.0;
        float _2369 = (exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2370 = 1.0 - _2333;
        float _2380 = (0.5 / (((_2009 * ((_2347 * _2370) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2370) + _2333) * _2347))) * _2347;
        float _4255 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2382 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2356 / ((_2360 * _2360) * 3.141590118408203125));
        float _2383 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2303 = (((_2369 * cbLight._m0[_2318].x) * _2382) * _2383) + _2193;
        _2305 = (((_2369 * cbLight._m0[_2318].y) * _2382) * _2383) + _2195;
        _2307 = (((_2369 * cbLight._m0[_2318].z) * _2382) * _2383) + _2197;
    }
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    if (_1842.y == 0u)
    {
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2458;
        float _2460 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2458;
        float _2461 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2458;
        uvec4 _2473 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2474 = _2473.x;
        uint _2485 = uint((float(_2473.y) * floor(float(uint(cbSceneParam._m0[85u].y * _743) / _2474))) + floor(float(uint(cbSceneParam._m0[85u].x * _742) / _2474)));
        float _2495 = (log2(_2461 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2496 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        uint _2499 = uint(isnan(14.0) ? _2496 : (isnan(_2496) ? 14.0 : min(_2496, 14.0)));
        uvec4 _2504 = texelFetch(g_lightClusterGridBuffer, int(((_2499 << 2u) + (_2485 << 6u)) >> 2u));
        uint _2505 = _2504.x;
        uint _2506 = _2473.z;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        if (((((1u << ((_2506 >> 4u) & 15u)) + 4294967295u) & _2505) == 0u) || ((_2506 & 240u) == 0u))
        {
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
        }
        else
        {
            float _2606;
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            uint _2755 = 0u;
            uint _2764;
            bool _2765;
            for (;;)
            {
                _2764 = texelFetch(g_lightClassification, int((((_2499 << 5u) + (_2485 << 9u)) + (_2755 << 2u)) >> 2u)).x;
                _2765 = _2764 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2765)
                {
                    frontier_phi_63_pred = _2754;
                    frontier_phi_63_pred_1 = _2753;
                    frontier_phi_63_pred_2 = _2752;
                    frontier_phi_63_pred_3 = _2751;
                    frontier_phi_63_pred_4 = _2750;
                    frontier_phi_63_pred_5 = _2749;
                }
                else
                {
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    uint _2879;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2754;
                    _2879 = _2764;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    for (;;)
                    {
                        uint _2883 = uint(findLSB(_2879)) + (_2755 << 5u);
                        uint _2880 = (_2879 + 4294967295u) & _2879;
                        uint _2885 = _2883 * 48u;
                        vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 3u)).x));
                        uint _2905 = (_2883 * 48u) + 4u;
                        vec4 _2918 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 3u)).x));
                        uint _2924 = (_2883 * 48u) + 8u;
                        vec3 _2935 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2924)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 2u)).x));
                        float _2939 = _2899.x - _2459;
                        float _2940 = _2899.y - _2460;
                        float _2941 = _2899.z - _2461;
                        float _2942 = dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941));
                        float _2945 = inversesqrt(_2942);
                        float _2946 = _2945 * _2939;
                        float _2947 = _2945 * _2940;
                        float _2948 = _2945 * _2941;
                        float _2949 = dot(vec3(_761, _764, _767), vec3(_2946, _2947, _2948));
                        float _2954 = 1.0 - (_2942 * _2899.w);
                        float _4281 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2955 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                        float _2956 = sqrt(_2942) * _2918.w;
                        float _2959 = 1.39999997615814208984375 / (_2956 + 1.39999997615814208984375);
                        float _2960 = _2959 * _2959;
                        float _2963 = ((1.0 - _2960) * _2949) + _2960;
                        float _2966 = _2956 * _2956;
                        float _2970 = ((isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))) * _2955) / ((_2966 * 0.699999988079071044921875) + 1.0);
                        float _2974 = (-0.0) - _2459;
                        float _2975 = (-0.0) - _2460;
                        float _2976 = (-0.0) - _2461;
                        float _2980 = inversesqrt(dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976)));
                        float _2981 = _2980 * _2974;
                        float _2982 = _2980 * _2975;
                        float _2983 = _2980 * _2976;
                        float _2991 = exp2(log2(1.0 / ((_2966 * 3.5) + 5.0)) * 0.25);
                        float _2992 = 1.0 - _821;
                        float _2999 = sqrt(1.0 - ((1.0 - (_2992 * _2992)) * (1.0 - (_2991 * _2991))));
                        float _3000 = _2999 * _2999;
                        float _3001 = _3000 * _3000;
                        float _3002 = _2981 + _2946;
                        float _3003 = _2982 + _2947;
                        float _3004 = _2983 + _2948;
                        float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                        float _3012 = dot(vec3(_761, _764, _767), vec3(_2981, _2982, _2983));
                        float _4297 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3015 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                        float _3016 = dot(vec3(_761, _764, _767), vec3(_3008 * _3002, _3008 * _3003, _3008 * _3004));
                        float _4308 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3019 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _3023 = ((_3019 * _3019) * (_3001 + (-1.0))) + 1.0;
                        float _3024 = _2959 * _3000;
                        float _3025 = _3024 * _3024;
                        float _3028 = ((1.0 - _3025) * _2949) + _3025;
                        float _4319 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3029 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3030 = 1.0 - _3000;
                        float _3040 = (0.5 / (((_3029 * ((_3015 * _3030) + _3000)) + 9.9999999392252902907785028219223e-09) + (((_3029 * _3030) + _3000) * _3015))) * _3029;
                        float _4330 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3051 = (((_3001 * 3.1415927410125732421875) * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) / ((_3023 * _3023) * ((_2966 * 2.1991131305694580078125) + 3.141590118408203125))) * _2955;
                        _2808 = (_2970 * _2918.x) + _2876;
                        _2809 = (_2970 * _2918.y) + _2877;
                        _2810 = (_2970 * _2918.z) + _2878;
                        _2805 = (_3051 * _2935.x) + _2873;
                        _2806 = (_3051 * _2935.y) + _2874;
                        _2807 = (_3051 * _2935.z) + _2875;
                        if (_2880 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2810;
                            _2879 = _2880;
                        }
                    }
                    frontier_phi_63_pred = _2810;
                    frontier_phi_63_pred_1 = _2809;
                    frontier_phi_63_pred_2 = _2808;
                    frontier_phi_63_pred_3 = _2807;
                    frontier_phi_63_pred_4 = _2806;
                    frontier_phi_63_pred_5 = _2805;
                }
                _2616 = frontier_phi_63_pred;
                _2614 = frontier_phi_63_pred_1;
                _2612 = frontier_phi_63_pred_2;
                _2610 = frontier_phi_63_pred_3;
                _2608 = frontier_phi_63_pred_4;
                _2606 = frontier_phi_63_pred_5;
                uint _2756 = _2755 + 1u;
                if (_2756 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2749 = _2606;
                    _2750 = _2608;
                    _2751 = _2610;
                    _2752 = _2612;
                    _2753 = _2614;
                    _2754 = _2616;
                    _2755 = _2756;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
        }
        uvec4 _2619 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2620 = _2619.z;
        uint _2622 = (_2620 >> 8u) & 15u;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        if (((4294967295u << _2622) & _2505) == 0u)
        {
            _2717 = _2605;
            _2719 = _2607;
            _2721 = _2609;
            _2723 = _2611;
            _2725 = _2613;
            _2727 = _2615;
        }
        else
        {
            float _2742 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
            float _2743 = _2742 * _2459;
            float _2744 = _2742 * _2460;
            float _2745 = _2742 * _2461;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2622 < ((_2620 >> 12u) & 15u))
            {
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2856 = _2605;
                float _2857 = _2607;
                float _2858 = _2609;
                float _2859 = _2611;
                float _2860 = _2613;
                float _2861 = _2615;
                uint _2862 = _2622;
                uint _2871;
                bool _2872;
                for (;;)
                {
                    _2871 = texelFetch(g_lightClassification, int((((_2499 << 5u) + (_2485 << 9u)) + (_2862 << 2u)) >> 2u)).x;
                    _2872 = _2871 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2872)
                    {
                        frontier_phi_69_pred = _2861;
                        frontier_phi_69_pred_1 = _2860;
                        frontier_phi_69_pred_2 = _2859;
                        frontier_phi_69_pred_3 = _2858;
                        frontier_phi_69_pred_4 = _2857;
                        frontier_phi_69_pred_5 = _2856;
                    }
                    else
                    {
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3069 = _2856;
                        float _3070 = _2857;
                        float _3071 = _2858;
                        float _3072 = _2859;
                        float _3073 = _2860;
                        float _3074 = _2861;
                        uint _3075 = _2871;
                        uint _3076;
                        vec4 _3101;
                        float _3102;
                        vec4 _3117;
                        vec3 _3129;
                        vec4 _3144;
                        vec4 _3160;
                        float _3207;
                        bool _3208;
                        for (;;)
                        {
                            uint _3086 = ((_2862 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3075));
                            _3076 = (_3075 + 4294967295u) & _3075;
                            uint _3088 = _3086 * 40u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            _3102 = _3101.w;
                            uint _3104 = (_3086 * 40u) + 4u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3119 = (_3086 * 40u) + 8u;
                            _3129 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x));
                            uint _3131 = (_3086 * 40u) + 16u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3147 = (_3086 * 40u) + 20u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3163 = (_3086 * 40u) + 24u;
                            vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3182 = (_3086 * 40u) + 28u;
                            vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            _3207 = fma(_2461, _3195.z, fma(_2460, _3195.y, _3195.x * _2459)) + _3195.w;
                            _3208 = !((fma(_2461, _3176.z, fma(_2460, _3176.y, _3176.x * _2459)) + _3176.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3208)
                            {
                                float _3235 = _3101.x - _2459;
                                float _3236 = _3101.y - _2460;
                                float _3237 = _3101.z - _2461;
                                float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                                float _3241 = inversesqrt(_3238);
                                float _3242 = _3241 * _3235;
                                float _3243 = _3241 * _3236;
                                float _3244 = _3241 * _3237;
                                float _3248 = 1.0 - (_3238 / (_3102 * _3102));
                                float _4341 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3253 = sqrt(_3238) * _3117.w;
                                float _3255 = 1.39999997615814208984375 / (_3253 + 1.39999997615814208984375);
                                float _3256 = _3255 * _3255;
                                float _3259 = ((1.0 - _3256) * dot(vec3(_3242, _3243, _3244), vec3(_761, _764, _767))) + _3256;
                                float _3262 = _3253 * _3253;
                                float _3266 = (fma(_2461, _3144.z, fma(_2460, _3144.y, _3144.x * _2459)) + _3144.w) / _3207;
                                float _3267 = (fma(_2461, _3160.z, fma(_2460, _3160.y, _3160.x * _2459)) + _3160.w) / _3207;
                                float _3271 = 1.0 - dot(vec2(_3266, _3267), vec2(_3266, _3267));
                                float _4357 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3273 = _3272 * (((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3249) / ((_3262 * 0.699999988079071044921875) + 1.0));
                                float _3285 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                                float _3286 = 1.0 - _821;
                                float _3293 = sqrt(1.0 - ((1.0 - (_3286 * _3286)) * (1.0 - (_3285 * _3285))));
                                float _3294 = _3293 * _3293;
                                float _3295 = _3294 * _3294;
                                float _3296 = _3242 - _2743;
                                float _3297 = _3243 - _2744;
                                float _3298 = _3244 - _2745;
                                float _3302 = inversesqrt(dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298)));
                                float _3306 = dot(vec3(_761, _764, _767), vec3((-0.0) - _2743, (-0.0) - _2744, (-0.0) - _2745));
                                float _4368 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3310 = dot(vec3(_761, _764, _767), vec3(_3302 * _3296, _3302 * _3297, _3302 * _3298));
                                float _4379 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3313 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3317 = ((_3313 * _3313) * (_3295 + (-1.0))) + 1.0;
                                float _3318 = _3255 * _3294;
                                float _3319 = _3318 * _3318;
                                float _3325 = ((1.0 - _3319) * dot(vec3(_761, _764, _767), vec3(_3242, _3243, _3244))) + _3319;
                                float _4390 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3327 = 1.0 - _3294;
                                float _3337 = (0.5 / (((_3326 * ((_3309 * _3327) + _3294)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3294) * _3309))) * _3326;
                                float _4401 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3347 = (_3272 * _3249) * (((_3295 * 3.1415927410125732421875) * (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) / ((_3317 * _3317) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3273 * _3117.z;
                                frontier_phi_75_pred_1 = _3273 * _3117.y;
                                frontier_phi_75_pred_2 = _3273 * _3117.x;
                                frontier_phi_75_pred_3 = _3347 * _3129.z;
                                frontier_phi_75_pred_4 = _3347 * _3129.y;
                                frontier_phi_75_pred_5 = _3347 * _3129.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3356 = frontier_phi_75_pred;
                            _3355 = frontier_phi_75_pred_1;
                            _3354 = frontier_phi_75_pred_2;
                            _3353 = frontier_phi_75_pred_3;
                            _3352 = frontier_phi_75_pred_4;
                            _3351 = frontier_phi_75_pred_5;
                            _3059 = _3354 + _3072;
                            _3060 = _3355 + _3073;
                            _3061 = _3356 + _3074;
                            _3056 = _3351 + _3069;
                            _3057 = _3352 + _3070;
                            _3058 = _3353 + _3071;
                            if (_3076 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3076;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3061;
                        frontier_phi_69_pred_1 = _3060;
                        frontier_phi_69_pred_2 = _3059;
                        frontier_phi_69_pred_3 = _3058;
                        frontier_phi_69_pred_4 = _3057;
                        frontier_phi_69_pred_5 = _3056;
                    }
                    _2728 = frontier_phi_69_pred;
                    _2726 = frontier_phi_69_pred_1;
                    _2724 = frontier_phi_69_pred_2;
                    _2722 = frontier_phi_69_pred_3;
                    _2720 = frontier_phi_69_pred_4;
                    _2718 = frontier_phi_69_pred_5;
                    uint _2863 = _2862 + 1u;
                    if (_2863 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2856 = _2718;
                        _2857 = _2720;
                        _2858 = _2722;
                        _2859 = _2724;
                        _2860 = _2726;
                        _2861 = _2728;
                        _2862 = _2863;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2728;
                frontier_phi_57_58_ladder_1 = _2726;
                frontier_phi_57_58_ladder_2 = _2724;
                frontier_phi_57_58_ladder_3 = _2722;
                frontier_phi_57_58_ladder_4 = _2720;
                frontier_phi_57_58_ladder_5 = _2718;
            }
            else
            {
                frontier_phi_57_58_ladder = _2615;
                frontier_phi_57_58_ladder_1 = _2613;
                frontier_phi_57_58_ladder_2 = _2611;
                frontier_phi_57_58_ladder_3 = _2609;
                frontier_phi_57_58_ladder_4 = _2607;
                frontier_phi_57_58_ladder_5 = _2605;
            }
            _2717 = frontier_phi_57_58_ladder_5;
            _2719 = frontier_phi_57_58_ladder_4;
            _2721 = frontier_phi_57_58_ladder_3;
            _2723 = frontier_phi_57_58_ladder_2;
            _2725 = frontier_phi_57_58_ladder_1;
            _2727 = frontier_phi_57_58_ladder;
        }
        float _2732 = isnan(1.0) ? _805 : (isnan(_805) ? 1.0 : min(_805, 1.0));
        _2517 = (_2732 * _2723) + _1973;
        _2519 = (_2732 * _2725) + _1975;
        _2521 = (_2732 * _2727) + _1977;
        _2523 = ((_2717 * 0.039999999105930328369140625) * _2732) + _2303;
        _2525 = ((_2719 * 0.039999999105930328369140625) * _2732) + _2305;
        _2527 = ((_2721 * 0.039999999105930328369140625) * _2732) + _2307;
    }
    else
    {
        _2517 = _1973;
        _2519 = _1975;
        _2521 = _1977;
        _2523 = _2303;
        _2525 = _2305;
        _2527 = _2307;
    }
    float _4417 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4428 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4439 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    uint _2547 = _780 + 6u;
    float _2555 = _742 / cbSceneParam._m0[86u].x;
    float _2556 = _743 / cbSceneParam._m0[86u].y;
    vec4 _2570 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, (log2((isnan(cbSceneParam._m0[77u].w) ? _677 : (isnan(_677) ? cbSceneParam._m0[77u].w : min(_677, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2572 = _2570.x;
    float _2573 = _2570.y;
    float _2574 = _2570.z;
    float _2575 = _2570.w;
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    if (_677 > cbSceneParam._m0[78u].w)
    {
        float _2630 = isnan(_677) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _677 : min(cbSceneParam._m0[80u].w, _677));
        float _2631 = _2630 / _677;
        float _2642 = _2631 * _727;
        float _2643 = _728 * _2631;
        float _2644 = (-0.0) - _2643;
        float _2645 = _2631 * _729;
        float _2647 = (cbSceneParam._m0[77u].w * _2644) / _2630;
        float _2648 = _2647 + cbSceneParam._m0[79u].w;
        float _2649 = cbSceneParam._m0[79u].w - _2643;
        float _2655 = sqrt(((_2642 * _2642) + (_2643 * _2643)) + (_2645 * _2645));
        float _2658 = (1.0 - (cbSceneParam._m0[77u].w / _2630)) * _2655;
        float _2663 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2665 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2818;
        if (abs((_2644 - _2647) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2818 = ((((_2648 > 0.0) ? exp2(_2663 * _2648) : (2.0 - exp2(_2665 * _2648))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2658;
        }
        else
        {
            float _2778 = 1.0 / cbSceneParam._m0[80u].x;
            float _2779 = isnan(_2649) ? _2648 : (isnan(_2648) ? _2649 : max(_2648, _2649));
            float _2780 = isnan(_2649) ? _2648 : (isnan(_2648) ? _2649 : min(_2648, _2649));
            float _2789 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : min(_2779, 0.0));
            float _2790 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : min(_2780, 0.0));
            _2818 = ((abs(_2655 / _2644) * cbSceneParam._m0[80u].y) * ((((_2789 - _2790) * 2.0) - ((exp2(_2663 * (isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0)))) - exp2(_2663 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0))))) * _2778)) - ((exp2(_2665 * _2789) - exp2(_2665 * _2790)) * _2778))) + (_2658 * cbSceneParam._m0[80u].z);
        }
        vec4 _2820 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, 1.0), 0.0);
        float _2829 = exp2((_2818 * (-1.44269502162933349609375)) * (1.0 - _2820.w));
        float _2830 = log2(_2829);
        float _2846 = log2(_2575);
        _2667 = (exp2(_2846 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].x)) * _2820.x) / cbSceneParam._m0[78u].x)) + _2572;
        _2669 = (exp2(_2846 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].y)) * _2820.y) / cbSceneParam._m0[78u].y)) + _2573;
        _2671 = (exp2(_2846 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].z)) * _2820.z) / cbSceneParam._m0[78u].z)) + _2574;
        _2673 = _2829 * _2575;
    }
    else
    {
        _2667 = _2572;
        _2669 = _2573;
        _2671 = _2574;
        _2673 = _2575;
    }
    float _2685 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2686 = _2685 == 3.0;
    float _2687 = log2(_2673);
    float _2694 = exp2(_2687 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2517 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _805))) + ((_2523 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2695 = exp2(_2687 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2519 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _805))) + ((_2525 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2696 = exp2(_2687 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2521 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _805))) + ((_2527 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2705 = (_2685 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2705 * (_2686 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2667)));
    SV_Target.y = _2705 * (_2686 ? _2695 : (_2695 + (cbSceneParam._m0[72u].w * _2669)));
    SV_Target.z = _2705 * (_2686 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2671)));
    SV_Target.w = cbInstanceData._m0[_2547].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2547].w;
}


