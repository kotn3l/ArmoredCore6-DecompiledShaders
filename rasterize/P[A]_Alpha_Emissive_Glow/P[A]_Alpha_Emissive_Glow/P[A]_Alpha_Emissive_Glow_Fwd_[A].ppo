#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_A_Alpha_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D P_A_Alpha_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _2303;
float _2304;
float _2305;
float _2306;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _162 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _163 = _162 * NORMAL.x;
    float _164 = _162 * NORMAL.y;
    float _165 = _162 * NORMAL.z;
    float _170;
    float _171;
    float _172;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _170 = (-0.0) - _163;
        _171 = (-0.0) - _164;
        _172 = (-0.0) - _165;
    }
    else
    {
        _170 = _163;
        _171 = _164;
        _172 = _165;
    }
    vec4 _186 = texture(sampler2D(P_A_Alpha_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _189 = _186.x;
    float _190 = _186.y;
    float _191 = _186.z;
    float _192 = _186.w;
    float _193 = _192 * TEXCOORD_1.z;
    vec4 _209 = texture(sampler2D(P_A_Alpha_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _220 = inversesqrt(dot(vec3(_170, _171, _172), vec3(_170, _171, _172)));
    float _221 = _220 * _170;
    float _222 = _220 * _171;
    float _223 = _220 * _172;
    float _2315 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _2326 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _2337 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _2348 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _228 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
    float _244 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _286 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _296 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _286);
    float _297 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _286);
    float _298 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _286);
    float _302 = inversesqrt(dot(vec3(_296, _297, _298), vec3(_296, _297, _298)));
    float _303 = _296 * _302;
    float _304 = _297 * _302;
    float _305 = _298 * _302;
    vec4 _310 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _312 = _310.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _431 = sqrt(((_296 * _296) + (_297 * _297)) + (_298 * _298));
        float _437 = (cbMatDynParam._m0[5u].x * _431) + cbMatDynParam._m0[5u].y;
        float _2359 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
        float _438 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        float _442 = (cbMatDynParam._m0[5u].z * _431) + cbMatDynParam._m0[5u].w;
        float _2370 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0))) - _438)) + _438) < ((_312 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _324 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _325 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _345 = fma(_223, cbSceneParam._m0[5u].z, fma(_222, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _221));
    float _348 = fma(_223, cbSceneParam._m0[6u].z, fma(_222, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _221));
    float _351 = fma(_223, cbSceneParam._m0[7u].z, fma(_222, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _221));
    uint _364 = uint(roundEven(NORMAL.w)) * 13u;
    uint _366 = _364 + 9u;
    uint _367 = _366 + uint(cbMatDynParam._m0[0u].w);
    float _373 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0)))) * cbInstanceData._m0[_367].x;
    float _374 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0)))) * cbInstanceData._m0[_367].y;
    float _375 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0)))) * cbInstanceData._m0[_367].z;
    float _2381 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _376 = isnan(1.0) ? _2381 : (isnan(_2381) ? 1.0 : min(_2381, 1.0));
    float _2392 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _377 = isnan(1.0) ? _2392 : (isnan(_2392) ? 1.0 : min(_2392, 1.0));
    float _2403 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _378 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
    vec4 _387 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _324, cbSceneParam._m0[86u].y * _325));
    float _390 = _387.x * TEXCOORD_1.w;
    float _412 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _420 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _752;
    float _753;
    float _754;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _476 = fma(_420, cbModelParam._m0[26u].z, fma(_416, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _412));
        float _480 = fma(_420, cbModelParam._m0[27u].z, fma(_416, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _412));
        float _484 = fma(_420, cbModelParam._m0[28u].z, fma(_416, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _412));
        float _509 = _412 + _221;
        float _510 = _416 + _222;
        float _511 = _420 + _223;
        float _521 = fma(_511, cbModelParam._m0[26u].z, fma(_510, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _509)) - _476;
        float _522 = fma(_511, cbModelParam._m0[27u].z, fma(_510, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _509)) - _480;
        float _523 = fma(_511, cbModelParam._m0[28u].z, fma(_510, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _509)) - _484;
        float _527 = inversesqrt(dot(vec3(_521, _522, _523), vec3(_521, _522, _523)));
        float _540 = ((_527 * _521) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_476 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _541 = ((_527 * _522) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_480 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _542 = ((_527 * _523) / cbModelParam._m0[34u].z) + ((((((_484 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _545 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        vec4 _552 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        vec4 _559 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        float _579 = exp2((_545.w + (-0.5)) * 20.0) * 2.0;
        float _587 = exp2((_552.w + (-0.5)) * 20.0) * 2.0;
        float _594 = exp2((_559.w + (-0.5)) * 20.0) * 2.0;
        float _601 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _602 = _601 * (_566.x + (-0.5));
        float _603 = _601 * (_566.y + (-0.5));
        float _604 = _601 * (_566.z + (-0.5));
        float _605 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        float _606 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _607 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        float _609 = ((_545.x + (-0.5)) * 0.5) * _579;
        float _611 = ((_552.x + (-0.5)) * 0.5) * _587;
        float _613 = ((_559.x + (-0.5)) * 0.5) * _594;
        float _614 = dot(vec3(_609, _611, _613), vec3(_609, _611, _613));
        float _619 = (_614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_614);
        float _628 = (dot(vec3(_221, _222, _223), vec3(_619 * _609, _619 * _611, _619 * _613)) + 1.0) * 0.5;
        float _2429 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _638 = sqrt(((_611 * _611) + (_609 * _609)) + (_613 * _613)) / (_605 + 9.9999997473787516355514526367188e-06);
        float _2440 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _639 = isnan(1.0) ? _2440 : (isnan(_2440) ? 1.0 : min(_2440, 1.0));
        float _640 = _639 * 2.0;
        float _644 = (1.0 - _639) / (_639 + 1.0);
        float _2451 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _645 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        float _654 = ((((1.0 - _645) * (_640 + 2.0)) * exp2(log2(isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0))) * (_640 + 1.0))) + _645) * _605;
        float _656 = ((_545.y + (-0.5)) * 0.5) * _579;
        float _658 = ((_552.y + (-0.5)) * 0.5) * _587;
        float _660 = ((_559.y + (-0.5)) * 0.5) * _594;
        float _661 = dot(vec3(_656, _658, _660), vec3(_656, _658, _660));
        float _666 = (_661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_661);
        float _674 = (dot(vec3(_221, _222, _223), vec3(_666 * _656, _666 * _658, _666 * _660)) + 1.0) * 0.5;
        float _2462 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _683 = sqrt(((_658 * _658) + (_656 * _656)) + (_660 * _660)) / (_606 + 9.9999997473787516355514526367188e-06);
        float _2473 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
        float _685 = _684 * 2.0;
        float _689 = (1.0 - _684) / (_684 + 1.0);
        float _2484 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _2484 : (isnan(_2484) ? 1.0 : min(_2484, 1.0));
        float _699 = ((((1.0 - _690) * (_685 + 2.0)) * exp2(log2(isnan(1.0) ? _2462 : (isnan(_2462) ? 1.0 : min(_2462, 1.0))) * (_685 + 1.0))) + _690) * _606;
        float _701 = ((_545.z + (-0.5)) * 0.5) * _579;
        float _703 = ((_552.z + (-0.5)) * 0.5) * _587;
        float _705 = ((_559.z + (-0.5)) * 0.5) * _594;
        float _706 = dot(vec3(_701, _703, _705), vec3(_701, _703, _705));
        float _711 = (_706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_706);
        float _719 = (dot(vec3(_221, _222, _223), vec3(_711 * _701, _711 * _703, _711 * _705)) + 1.0) * 0.5;
        float _2495 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _728 = sqrt(((_703 * _703) + (_701 * _701)) + (_705 * _705)) / (_607 + 9.9999997473787516355514526367188e-06);
        float _2506 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _2506 : (isnan(_2506) ? 1.0 : min(_2506, 1.0));
        float _730 = _729 * 2.0;
        float _734 = (1.0 - _729) / (_729 + 1.0);
        float _2517 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _2517 : (isnan(_2517) ? 1.0 : min(_2517, 1.0));
        float _744 = ((((1.0 - _735) * (_730 + 2.0)) * exp2(log2(isnan(1.0) ? _2495 : (isnan(_2495) ? 1.0 : min(_2495, 1.0))) * (_730 + 1.0))) + _735) * _607;
        _752 = cbModelParam._m0[36u].z * (isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0)));
        _753 = cbModelParam._m0[36u].z * (isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0)));
        _754 = cbModelParam._m0[36u].z * (isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0)));
    }
    else
    {
        _752 = 0.0;
        _753 = 0.0;
        _754 = 0.0;
    }
    float _1052;
    float _1053;
    float _1054;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _783 = fma(_420, cbModelParam._m0[30u].z, fma(_416, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _412));
        float _787 = fma(_420, cbModelParam._m0[31u].z, fma(_416, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _412));
        float _791 = fma(_420, cbModelParam._m0[32u].z, fma(_416, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _412));
        float _814 = _412 + _221;
        float _815 = _416 + _222;
        float _816 = _420 + _223;
        float _826 = fma(_816, cbModelParam._m0[30u].z, fma(_815, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _814)) - _783;
        float _827 = fma(_816, cbModelParam._m0[31u].z, fma(_815, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _814)) - _787;
        float _828 = fma(_816, cbModelParam._m0[32u].z, fma(_815, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _814)) - _791;
        float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
        float _845 = ((_832 * _826) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_783 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_832 * _827) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_787 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_832 * _828) / cbModelParam._m0[35u].z) + ((((((_791 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        float _882 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _889 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _896 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _903 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_870.x + (-0.5));
        float _905 = _903 * (_870.y + (-0.5));
        float _906 = _903 * (_870.z + (-0.5));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _911 = ((_849.x + (-0.5)) * 0.5) * _882;
        float _913 = ((_856.x + (-0.5)) * 0.5) * _889;
        float _915 = ((_863.x + (-0.5)) * 0.5) * _896;
        float _916 = dot(vec3(_911, _913, _915), vec3(_911, _913, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _929 = (dot(vec3(_221, _222, _223), vec3(_921 * _911, _921 * _913, _921 * _915)) + 1.0) * 0.5;
        float _2558 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _938 = sqrt(((_913 * _913) + (_911 * _911)) + (_915 * _915)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _2569 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _2569 : (isnan(_2569) ? 1.0 : min(_2569, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _2580 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _2580 : (isnan(_2580) ? 1.0 : min(_2580, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _2558 : (isnan(_2558) ? 1.0 : min(_2558, 1.0))) * (_940 + 1.0))) + _945) * _907;
        float _956 = ((_849.y + (-0.5)) * 0.5) * _882;
        float _958 = ((_856.y + (-0.5)) * 0.5) * _889;
        float _960 = ((_863.y + (-0.5)) * 0.5) * _896;
        float _961 = dot(vec3(_956, _958, _960), vec3(_956, _958, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_221, _222, _223), vec3(_966 * _956, _966 * _958, _966 * _960)) + 1.0) * 0.5;
        float _2591 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_958 * _958) + (_956 * _956)) + (_960 * _960)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _2602 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _2602 : (isnan(_2602) ? 1.0 : min(_2602, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _2613 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _2613 : (isnan(_2613) ? 1.0 : min(_2613, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _2591 : (isnan(_2591) ? 1.0 : min(_2591, 1.0))) * (_985 + 1.0))) + _990) * _908;
        float _1001 = ((_849.z + (-0.5)) * 0.5) * _882;
        float _1003 = ((_856.z + (-0.5)) * 0.5) * _889;
        float _1005 = ((_863.z + (-0.5)) * 0.5) * _896;
        float _1006 = dot(vec3(_1001, _1003, _1005), vec3(_1001, _1003, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_221, _222, _223), vec3(_1011 * _1001, _1011 * _1003, _1011 * _1005)) + 1.0) * 0.5;
        float _2624 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1003 * _1003) + (_1001 * _1001)) + (_1005 * _1005)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _2635 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _2635 : (isnan(_2635) ? 1.0 : min(_2635, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _2646 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _2646 : (isnan(_2646) ? 1.0 : min(_2646, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _2624 : (isnan(_2624) ? 1.0 : min(_2624, 1.0))) * (_1030 + 1.0))) + _1035) * _909;
        _1052 = cbModelParam._m0[36u].w * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1053 = cbModelParam._m0[36u].w * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1054 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
    }
    else
    {
        _1052 = 0.0;
        _1053 = 0.0;
        _1054 = 0.0;
    }
    float _1064 = (cbModelParam._m0[1u].x * (_1052 - _752)) + _752;
    float _1065 = (cbModelParam._m0[1u].x * (_1053 - _753)) + _753;
    float _1066 = (cbModelParam._m0[1u].x * (_1054 - _754)) + _754;
    float _1087 = fma(_1066, cbSceneParam._m0[89u].z, fma(_1065, cbSceneParam._m0[89u].y, _1064 * cbSceneParam._m0[89u].x));
    float _1090 = fma(_1066, cbSceneParam._m0[90u].z, fma(_1065, cbSceneParam._m0[90u].y, _1064 * cbSceneParam._m0[90u].x));
    float _1093 = fma(_1066, cbSceneParam._m0[91u].z, fma(_1065, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1064));
    uvec4 _1103 = floatBitsToUint(cbInstanceData._m0[_364 + 5u]);
    uint _1105 = _1103.x * 14u;
    uint _1107 = _1105 + 13u;
    float _1114 = _390 + (-1.0);
    float _1120 = (cbLight._m0[_1107].x * _1114) + 1.0;
    float _1121 = (cbLight._m0[_1107].y * _1114) + 1.0;
    float _1122 = (cbLight._m0[_1107].z * _1114) + 1.0;
    float _1123 = (cbLight._m0[_1107].w * _1114) + 1.0;
    uint _1124 = _1105 + 5u;
    float _1130 = isnan(1.0) ? _1121 : (isnan(_1121) ? 1.0 : min(_1121, 1.0));
    uint _1134 = _1105 + 4u;
    float _1141 = isnan(1.0) ? _1120 : (isnan(_1120) ? 1.0 : min(_1120, 1.0));
    uint _1145 = _1105 | 1u;
    float _1156 = dot(vec3(cbLight._m0[_1105].xyz), vec3(_221, _222, _223));
    float _1159 = dot(vec3(cbLight._m0[_1145].xyz), vec3(_221, _222, _223));
    float _2697 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _2708 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1164 = (isnan(1.0) ? _2697 : (isnan(_2697) ? 1.0 : min(_2697, 1.0))) * 0.3183098733425140380859375;
    float _1166 = (isnan(1.0) ? _2708 : (isnan(_2708) ? 1.0 : min(_2708, 1.0))) * 0.3183098733425140380859375;
    float _1173 = ((cbLight._m0[_1124].x * _1130) * _1166) + ((cbLight._m0[_1134].x * _1141) * _1164);
    float _1174 = ((_1130 * cbLight._m0[_1124].y) * _1166) + ((_1141 * cbLight._m0[_1134].y) * _1164);
    float _1175 = ((_1130 * cbLight._m0[_1124].z) * _1166) + ((_1141 * cbLight._m0[_1134].z) * _1164);
    uvec4 _1180 = floatBitsToUint(cbLight._m0[_1105 + 12u]);
    bool _1182 = _1180.x == 0u;
    float _1183;
    float _1185;
    float _1187;
    if (_1182)
    {
        _1183 = _1173;
        _1185 = _1174;
        _1187 = _1175;
    }
    else
    {
        uint _1191 = _1105 + 6u;
        float _1207 = (dot(vec3(cbLight._m0[_1105 + 2u].xyz), vec3(_221, _222, _223)) * 0.5) + 0.5;
        float _1208 = _1207 * _1207;
        float _2719 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _2719 : (isnan(_2719) ? 1.0 : min(_2719, 1.0));
        float _1210 = isnan(1.0) ? _1122 : (isnan(_1122) ? 1.0 : min(_1122, 1.0));
        _1183 = (((cbLight._m0[_1191].x * 0.3183098733425140380859375) * _1209) * _1210) + _1173;
        _1185 = (((cbLight._m0[_1191].y * 0.3183098733425140380859375) * _1209) * _1210) + _1174;
        _1187 = (((cbLight._m0[_1191].z * 0.3183098733425140380859375) * _1209) * _1210) + _1175;
    }
    bool _1190 = _1180.y == 0u;
    float _1220;
    float _1222;
    float _1224;
    if (_1190)
    {
        _1220 = _1183;
        _1222 = _1185;
        _1224 = _1187;
    }
    else
    {
        uint _1322 = _1105 + 7u;
        float _1338 = (dot(vec3(cbLight._m0[_1105 + 3u].xyz), vec3(_221, _222, _223)) * 0.5) + 0.5;
        float _1339 = _1338 * _1338;
        float _2735 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _2735 : (isnan(_2735) ? 1.0 : min(_2735, 1.0));
        float _1341 = isnan(1.0) ? _1123 : (isnan(_1123) ? 1.0 : min(_1123, 1.0));
        _1220 = (((cbLight._m0[_1322].x * 0.3183098733425140380859375) * _1340) * _1341) + _1183;
        _1222 = (((cbLight._m0[_1322].y * 0.3183098733425140380859375) * _1340) * _1341) + _1185;
        _1224 = (((cbLight._m0[_1322].z * 0.3183098733425140380859375) * _1340) * _1341) + _1187;
    }
    uint _1226 = _1105 + 8u;
    float _1232 = cbLight._m0[_1105].x + _303;
    float _1233 = cbLight._m0[_1105].y + _304;
    float _1234 = cbLight._m0[_1105].z + _305;
    float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
    float _1242 = dot(vec3(_221, _222, _223), vec3(cbLight._m0[_1105].xyz));
    float _2751 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _1245 = isnan(1.0) ? _2751 : (isnan(_2751) ? 1.0 : min(_2751, 1.0));
    float _1246 = dot(vec3(_221, _222, _223), vec3(_303, _304, _305));
    float _2762 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
    float _1249 = isnan(1.0) ? _2762 : (isnan(_2762) ? 1.0 : min(_2762, 1.0));
    float _1250 = dot(vec3(cbLight._m0[_1105].xyz), vec3(_1232 * _1238, _1233 * _1238, _1234 * _1238));
    float _2773 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
    float _1258 = exp2(log2(1.0 - (isnan(1.0) ? _2773 : (isnan(_2773) ? 1.0 : min(_2773, 1.0)))) * 5.0);
    float _1263 = (0.5 / ((_1245 + 9.9999999392252902907785028219223e-09) + _1249)) * _1245;
    float _2784 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _1265 = (isnan(1.0) ? _2784 : (isnan(_2784) ? 1.0 : min(_2784, 1.0))) * 0.31831014156341552734375;
    uint _1276 = _1105 + 9u;
    float _1282 = cbLight._m0[_1145].x + _303;
    float _1283 = cbLight._m0[_1145].y + _304;
    float _1284 = cbLight._m0[_1145].z + _305;
    float _1288 = inversesqrt(dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284)));
    float _1292 = dot(vec3(_221, _222, _223), vec3(cbLight._m0[_1145].xyz));
    float _2795 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
    float _1295 = isnan(1.0) ? _2795 : (isnan(_2795) ? 1.0 : min(_2795, 1.0));
    float _1296 = dot(vec3(cbLight._m0[_1145].xyz), vec3(_1282 * _1288, _1283 * _1288, _1284 * _1288));
    float _2806 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
    float _1303 = exp2(log2(1.0 - (isnan(1.0) ? _2806 : (isnan(_2806) ? 1.0 : min(_2806, 1.0)))) * 5.0);
    float _1307 = (0.5 / ((_1295 + 9.9999999392252902907785028219223e-09) + _1249)) * _1295;
    float _2817 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
    float _1309 = (isnan(1.0) ? _2817 : (isnan(_2817) ? 1.0 : min(_2817, 1.0))) * 0.31831014156341552734375;
    float _1319 = (((_1303 * cbLight._m0[_1276].x) * _1309) * _1130) + (((_1258 * cbLight._m0[_1226].x) * _1265) * _1141);
    float _1320 = (((_1303 * cbLight._m0[_1276].y) * _1309) * _1130) + (((_1258 * cbLight._m0[_1226].y) * _1265) * _1141);
    float _1321 = (((_1303 * cbLight._m0[_1276].z) * _1309) * _1130) + (((_1258 * cbLight._m0[_1226].z) * _1265) * _1141);
    float _1351;
    float _1353;
    float _1355;
    if (_1182)
    {
        _1351 = _1319;
        _1353 = _1320;
        _1355 = _1321;
    }
    else
    {
        uint _1357 = _1105 + 10u;
        uint _1363 = _1105 + 2u;
        float _1369 = cbLight._m0[_1363].x + _303;
        float _1370 = cbLight._m0[_1363].y + _304;
        float _1371 = cbLight._m0[_1363].z + _305;
        float _1375 = inversesqrt(dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371)));
        float _1379 = dot(vec3(_221, _222, _223), vec3(cbLight._m0[_1363].xyz));
        float _2828 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1382 = isnan(1.0) ? _2828 : (isnan(_2828) ? 1.0 : min(_2828, 1.0));
        float _1383 = dot(vec3(cbLight._m0[_1363].xyz), vec3(_1369 * _1375, _1370 * _1375, _1371 * _1375));
        float _2839 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1390 = exp2(log2(1.0 - (isnan(1.0) ? _2839 : (isnan(_2839) ? 1.0 : min(_2839, 1.0)))) * 5.0);
        float _1394 = (0.5 / ((_1382 + 9.9999999392252902907785028219223e-09) + _1249)) * _1382;
        float _2850 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1396 = (isnan(1.0) ? _2850 : (isnan(_2850) ? 1.0 : min(_2850, 1.0))) * 0.31831014156341552734375;
        float _1397 = isnan(1.0) ? _1122 : (isnan(_1122) ? 1.0 : min(_1122, 1.0));
        _1351 = (((_1390 * cbLight._m0[_1357].x) * _1396) * _1397) + _1319;
        _1353 = (((_1390 * cbLight._m0[_1357].y) * _1396) * _1397) + _1320;
        _1355 = (((_1390 * cbLight._m0[_1357].z) * _1396) * _1397) + _1321;
    }
    float _1407;
    float _1409;
    float _1411;
    if (_1190)
    {
        _1407 = _1351;
        _1409 = _1353;
        _1411 = _1355;
    }
    else
    {
        uint _1418 = _1105 + 11u;
        uint _1424 = _1105 + 3u;
        float _1430 = cbLight._m0[_1424].x + _303;
        float _1431 = cbLight._m0[_1424].y + _304;
        float _1432 = cbLight._m0[_1424].z + _305;
        float _1436 = inversesqrt(dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432)));
        float _1440 = dot(vec3(_221, _222, _223), vec3(cbLight._m0[_1424].xyz));
        float _2866 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1443 = isnan(1.0) ? _2866 : (isnan(_2866) ? 1.0 : min(_2866, 1.0));
        float _1444 = dot(vec3(cbLight._m0[_1424].xyz), vec3(_1430 * _1436, _1431 * _1436, _1432 * _1436));
        float _2877 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1451 = exp2(log2(1.0 - (isnan(1.0) ? _2877 : (isnan(_2877) ? 1.0 : min(_2877, 1.0)))) * 5.0);
        float _1455 = (0.5 / ((_1443 + 9.9999999392252902907785028219223e-09) + _1249)) * _1443;
        float _2888 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1457 = (isnan(1.0) ? _2888 : (isnan(_2888) ? 1.0 : min(_2888, 1.0))) * 0.31831014156341552734375;
        float _1458 = isnan(1.0) ? _1123 : (isnan(_1123) ? 1.0 : min(_1123, 1.0));
        _1407 = (((_1451 * cbLight._m0[_1418].x) * _1457) * _1458) + _1351;
        _1409 = (((_1451 * cbLight._m0[_1418].y) * _1457) * _1458) + _1353;
        _1411 = (((_1451 * cbLight._m0[_1418].z) * _1457) * _1458) + _1355;
    }
    float _1567;
    float _1569;
    float _1571;
    if (_1103.y == 0u)
    {
        float _1508 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1509 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1508;
        float _1510 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1508;
        float _1511 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1508;
        uvec4 _1523 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1524 = _1523.x;
        uint _1535 = uint((float(_1523.y) * floor(float(uint(cbSceneParam._m0[85u].y * _325) / _1524))) + floor(float(uint(cbSceneParam._m0[85u].x * _324) / _1524)));
        float _1545 = (log2(_1511 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1546 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        uint _1549 = uint(isnan(14.0) ? _1546 : (isnan(_1546) ? 14.0 : min(_1546, 14.0)));
        uvec4 _1554 = texelFetch(g_lightClusterGridBuffer, int(((_1549 << 2u) + (_1535 << 6u)) >> 2u));
        uint _1555 = _1554.x;
        uint _1556 = _1523.z;
        float _1656;
        float _1658;
        float _1660;
        if (((((1u << ((_1556 >> 4u) & 15u)) + 4294967295u) & _1555) == 0u) || ((_1556 & 240u) == 0u))
        {
            _1656 = 0.0;
            _1658 = 0.0;
            _1660 = 0.0;
        }
        else
        {
            float _1657;
            float _1659;
            float _1661;
            float _1795 = 0.0;
            float _1796 = 0.0;
            float _1797 = 0.0;
            uint _1798 = 0u;
            uint _1807;
            bool _1808;
            for (;;)
            {
                _1807 = texelFetch(g_lightClassification, int((((_1549 << 5u) + (_1535 << 9u)) + (_1798 << 2u)) >> 2u)).x;
                _1808 = _1807 == 0u;
                float frontier_phi_32_pred;
                float frontier_phi_32_pred_1;
                float frontier_phi_32_pred_2;
                if (_1808)
                {
                    frontier_phi_32_pred = _1797;
                    frontier_phi_32_pred_1 = _1795;
                    frontier_phi_32_pred_2 = _1796;
                }
                else
                {
                    float _1931;
                    float _1932;
                    float _1933;
                    uint _1934;
                    _1931 = _1795;
                    _1932 = _1796;
                    _1933 = _1797;
                    _1934 = _1807;
                    float _1864;
                    float _1865;
                    float _1866;
                    for (;;)
                    {
                        uint _1938 = uint(findLSB(_1934)) + (_1798 << 5u);
                        uint _1935 = (_1934 + 4294967295u) & _1934;
                        uint _1940 = _1938 * 48u;
                        vec4 _1954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1940)).x, texelFetch(g_PointLightRenderingBuffer, int(_1940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1940 + 3u)).x));
                        uint _1960 = (_1938 * 48u) + 4u;
                        vec4 _1973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1960)).x, texelFetch(g_PointLightRenderingBuffer, int(_1960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1960 + 3u)).x));
                        float _1978 = _1954.x - _1509;
                        float _1979 = _1954.y - _1510;
                        float _1980 = _1954.z - _1511;
                        float _1981 = dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980));
                        float _1984 = inversesqrt(_1981);
                        float _1993 = 1.0 - (_1981 * _1954.w);
                        float _2914 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
                        float _1995 = sqrt(_1981) * _1973.w;
                        float _1998 = 1.39999997615814208984375 / (_1995 + 1.39999997615814208984375);
                        float _1999 = _1998 * _1998;
                        float _2002 = ((1.0 - _1999) * dot(vec3(_345, _348, _351), vec3(_1984 * _1978, _1984 * _1979, _1984 * _1980))) + _1999;
                        float _2009 = ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * (isnan(1.0) ? _2914 : (isnan(_2914) ? 1.0 : min(_2914, 1.0)))) / (((_1995 * _1995) * 0.699999988079071044921875) + 1.0);
                        _1864 = (_2009 * _1973.x) + _1931;
                        _1865 = (_2009 * _1973.y) + _1932;
                        _1866 = (_2009 * _1973.z) + _1933;
                        if (_1935 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1931 = _1864;
                            _1932 = _1865;
                            _1933 = _1866;
                            _1934 = _1935;
                        }
                    }
                    frontier_phi_32_pred = _1866;
                    frontier_phi_32_pred_1 = _1864;
                    frontier_phi_32_pred_2 = _1865;
                }
                _1661 = frontier_phi_32_pred;
                _1657 = frontier_phi_32_pred_1;
                _1659 = frontier_phi_32_pred_2;
                uint _1799 = _1798 + 1u;
                if (_1799 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1795 = _1657;
                    _1796 = _1659;
                    _1797 = _1661;
                    _1798 = _1799;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1656 = _1657;
            _1658 = _1659;
            _1660 = _1661;
        }
        uvec4 _1664 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1665 = _1664.z;
        uint _1667 = (_1665 >> 8u) & 15u;
        float _1782;
        float _1784;
        float _1786;
        if (((4294967295u << _1667) & _1555) == 0u)
        {
            _1782 = _1656;
            _1784 = _1658;
            _1786 = _1660;
        }
        else
        {
            float frontier_phi_24_25_ladder;
            float frontier_phi_24_25_ladder_1;
            float frontier_phi_24_25_ladder_2;
            if (_1667 < ((_1665 >> 12u) & 15u))
            {
                float _1783;
                float _1785;
                float _1787;
                float _1917 = _1656;
                float _1918 = _1658;
                float _1919 = _1660;
                uint _1920 = _1667;
                uint _1929;
                bool _1930;
                for (;;)
                {
                    _1929 = texelFetch(g_lightClassification, int((((_1549 << 5u) + (_1535 << 9u)) + (_1920 << 2u)) >> 2u)).x;
                    _1930 = _1929 == 0u;
                    float frontier_phi_43_pred;
                    float frontier_phi_43_pred_1;
                    float frontier_phi_43_pred_2;
                    if (_1930)
                    {
                        frontier_phi_43_pred = _1918;
                        frontier_phi_43_pred_1 = _1919;
                        frontier_phi_43_pred_2 = _1917;
                    }
                    else
                    {
                        float _2023;
                        float _2024;
                        float _2025;
                        float _2225;
                        float _2226;
                        float _2227;
                        float _2033 = _1917;
                        float _2034 = _1918;
                        float _2035 = _1919;
                        uint _2036 = _1929;
                        uint _2037;
                        vec4 _2063;
                        float _2064;
                        vec4 _2079;
                        vec4 _2095;
                        vec4 _2111;
                        float _2158;
                        bool _2159;
                        for (;;)
                        {
                            uint _2047 = ((_1920 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2036));
                            _2037 = (_2036 + 4294967295u) & _2036;
                            uint _2049 = _2047 * 40u;
                            _2063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2049 + 3u)).x));
                            _2064 = _2063.w;
                            uint _2066 = (_2047 * 40u) + 4u;
                            _2079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2066 + 3u)).x));
                            uint _2082 = (_2047 * 40u) + 16u;
                            _2095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2082 + 3u)).x));
                            uint _2098 = (_2047 * 40u) + 20u;
                            _2111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2098 + 3u)).x));
                            uint _2114 = (_2047 * 40u) + 24u;
                            vec4 _2127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2114 + 3u)).x));
                            uint _2133 = (_2047 * 40u) + 28u;
                            vec4 _2146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2133 + 3u)).x));
                            _2158 = fma(_1511, _2146.z, fma(_1510, _2146.y, _2146.x * _1509)) + _2146.w;
                            _2159 = !((fma(_1511, _2127.z, fma(_1510, _2127.y, _2127.x * _1509)) + _2127.w) <= 0.0);
                            float frontier_phi_49_pred;
                            float frontier_phi_49_pred_1;
                            float frontier_phi_49_pred_2;
                            if (_2159)
                            {
                                float _2183 = _2063.x - _1509;
                                float _2184 = _2063.y - _1510;
                                float _2185 = _2063.z - _1511;
                                float _2186 = dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185));
                                float _2189 = inversesqrt(_2186);
                                float _2196 = 1.0 - (_2186 / (_2064 * _2064));
                                float _2930 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
                                float _2201 = sqrt(_2186) * _2079.w;
                                float _2203 = 1.39999997615814208984375 / (_2201 + 1.39999997615814208984375);
                                float _2204 = _2203 * _2203;
                                float _2207 = ((1.0 - _2204) * dot(vec3(_2189 * _2183, _2189 * _2184, _2189 * _2185), vec3(_345, _348, _351))) + _2204;
                                float _2214 = (fma(_1511, _2095.z, fma(_1510, _2095.y, _2095.x * _1509)) + _2095.w) / _2158;
                                float _2215 = (fma(_1511, _2111.z, fma(_1510, _2111.y, _2111.x * _1509)) + _2111.w) / _2158;
                                float _2219 = 1.0 - dot(vec2(_2214, _2215), vec2(_2214, _2215));
                                float _2946 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
                                float _2221 = (isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0))) * (((isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0))) * (isnan(1.0) ? _2930 : (isnan(_2930) ? 1.0 : min(_2930, 1.0)))) / (((_2201 * _2201) * 0.699999988079071044921875) + 1.0));
                                frontier_phi_49_pred = _2221 * _2079.z;
                                frontier_phi_49_pred_1 = _2221 * _2079.y;
                                frontier_phi_49_pred_2 = _2221 * _2079.x;
                            }
                            else
                            {
                                frontier_phi_49_pred = 0.0;
                                frontier_phi_49_pred_1 = 0.0;
                                frontier_phi_49_pred_2 = 0.0;
                            }
                            _2227 = frontier_phi_49_pred;
                            _2226 = frontier_phi_49_pred_1;
                            _2225 = frontier_phi_49_pred_2;
                            _2023 = _2225 + _2033;
                            _2024 = _2226 + _2034;
                            _2025 = _2227 + _2035;
                            if (_2037 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2033 = _2023;
                                _2034 = _2024;
                                _2035 = _2025;
                                _2036 = _2037;
                                continue;
                            }
                        }
                        frontier_phi_43_pred = _2024;
                        frontier_phi_43_pred_1 = _2025;
                        frontier_phi_43_pred_2 = _2023;
                    }
                    _1785 = frontier_phi_43_pred;
                    _1787 = frontier_phi_43_pred_1;
                    _1783 = frontier_phi_43_pred_2;
                    uint _1921 = _1920 + 1u;
                    if (_1921 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1917 = _1783;
                        _1918 = _1785;
                        _1919 = _1787;
                        _1920 = _1921;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_24_25_ladder = _1787;
                frontier_phi_24_25_ladder_1 = _1785;
                frontier_phi_24_25_ladder_2 = _1783;
            }
            else
            {
                frontier_phi_24_25_ladder = _1660;
                frontier_phi_24_25_ladder_1 = _1658;
                frontier_phi_24_25_ladder_2 = _1656;
            }
            _1782 = frontier_phi_24_25_ladder_2;
            _1784 = frontier_phi_24_25_ladder_1;
            _1786 = frontier_phi_24_25_ladder;
        }
        float _1788 = isnan(1.0) ? _390 : (isnan(_390) ? 1.0 : min(_390, 1.0));
        _1567 = (_1788 * _1782) + _1220;
        _1569 = (_1788 * _1784) + _1222;
        _1571 = (_1788 * _1786) + _1224;
    }
    else
    {
        _1567 = _1220;
        _1569 = _1222;
        _1571 = _1224;
    }
    uint _1577 = _366 + uint(cbMatDynParam._m0[0u].w);
    float _1583 = (_209.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1577].x;
    float _1584 = (_209.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1577].y;
    float _1585 = (_209.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1577].z;
    float _2962 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _2973 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _2984 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _2995 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _1600 = (((isnan(1.0) ? _2962 : (isnan(_2962) ? 1.0 : min(_2962, 1.0))) * (_1567 + ((isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0))) * _390))) + (cbPerFrame._m0[3u].x * _1407)) + _1583;
    float _1602 = (_1584 + (cbPerFrame._m0[3u].x * _1409)) + ((isnan(1.0) ? _2973 : (isnan(_2973) ? 1.0 : min(_2973, 1.0))) * (_1569 + ((isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))) * _390)));
    float _1604 = (_1585 + (cbPerFrame._m0[3u].x * _1411)) + ((isnan(1.0) ? _2984 : (isnan(_2984) ? 1.0 : min(_2984, 1.0))) * (_1571 + ((isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0))) * _390)));
    float _1605 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1606 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _1613 = cbMtdParam._m0[2u].x * _1583;
    float _1614 = cbMtdParam._m0[2u].y * _1584;
    float _1615 = cbMtdParam._m0[2u].z * _1585;
    float _3021 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1617 = isnan(1.0) ? _3021 : (isnan(_3021) ? 1.0 : min(_3021, 1.0));
    float _1622 = cbInstanceData._m0[_364 + 6u].w * (isnan(1.0) ? _2995 : (isnan(_2995) ? 1.0 : min(_2995, 1.0)));
    float _1627 = _324 / cbSceneParam._m0[86u].x;
    float _1628 = _325 / cbSceneParam._m0[86u].y;
    vec4 _1642 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1627, _1628, (log2((isnan(cbSceneParam._m0[77u].w) ? _244 : (isnan(_244) ? cbSceneParam._m0[77u].w : min(_244, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1644 = _1642.x;
    float _1645 = _1642.y;
    float _1646 = _1642.z;
    float _1647 = _1642.w;
    float _1713;
    float _1715;
    float _1717;
    float _1719;
    if (_244 > cbSceneParam._m0[78u].w)
    {
        float _1675 = isnan(_244) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _244 : min(cbSceneParam._m0[80u].w, _244));
        float _1676 = _1675 / _244;
        float _1687 = _1676 * _296;
        float _1688 = _297 * _1676;
        float _1689 = (-0.0) - _1688;
        float _1690 = _1676 * _298;
        float _1692 = (cbSceneParam._m0[77u].w * _1689) / _1675;
        float _1693 = _1692 + cbSceneParam._m0[79u].w;
        float _1694 = cbSceneParam._m0[79u].w - _1688;
        float _1700 = sqrt(((_1687 * _1687) + (_1688 * _1688)) + (_1690 * _1690));
        float _1703 = (1.0 - (cbSceneParam._m0[77u].w / _1675)) * _1700;
        float _1709 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1711 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1874;
        if (abs((_1689 - _1692) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1874 = ((((_1693 > 0.0) ? exp2(_1709 * _1693) : (2.0 - exp2(_1711 * _1693))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1703;
        }
        else
        {
            float _1821 = 1.0 / cbSceneParam._m0[80u].x;
            float _1822 = isnan(_1694) ? _1693 : (isnan(_1693) ? _1694 : max(_1693, _1694));
            float _1823 = isnan(_1694) ? _1693 : (isnan(_1693) ? _1694 : min(_1693, _1694));
            float _1832 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : min(_1822, 0.0));
            float _1833 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : min(_1823, 0.0));
            _1874 = ((abs(_1700 / _1689) * cbSceneParam._m0[80u].y) * ((((_1832 - _1833) * 2.0) - ((exp2(_1709 * (isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)))) - exp2(_1709 * (isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))))) * _1821)) - ((exp2(_1711 * _1832) - exp2(_1711 * _1833)) * _1821))) + (_1703 * cbSceneParam._m0[80u].z);
        }
        vec4 _1876 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1627, _1628, 1.0), 0.0);
        float _1885 = exp2((_1874 * (-1.44269502162933349609375)) * (1.0 - _1876.w));
        float _1886 = log2(_1885);
        float _1902 = log2(_1647);
        _1713 = (exp2(_1902 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1886 * cbSceneParam._m0[78u].x)) * _1876.x) / cbSceneParam._m0[78u].x)) + _1644;
        _1715 = (exp2(_1902 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1886 * cbSceneParam._m0[78u].y)) * _1876.y) / cbSceneParam._m0[78u].y)) + _1645;
        _1717 = (exp2(_1902 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1886 * cbSceneParam._m0[78u].z)) * _1876.z) / cbSceneParam._m0[78u].z)) + _1646;
        _1719 = _1885 * _1647;
    }
    else
    {
        _1713 = _1644;
        _1715 = _1645;
        _1717 = _1646;
        _1719 = _1647;
    }
    bool _1912;
    vec4 _1729;
    vec4 _1752;
    float _1754;
    float _1758;
    float _1759;
    float _1760;
    float _1763;
    float _1766;
    float _1769;
    float _1770;
    bool _1781;
    for (;;)
    {
        _1729 = cbMatDynParam._m0[0u];
        float _1731 = roundEven(_1729.y);
        bool _1732 = _1731 == 3.0;
        float _1734 = log2(_1719);
        float _1738 = exp2(_1734 * cbSceneParam._m0[78u].x);
        float _1739 = exp2(_1734 * cbSceneParam._m0[78u].y);
        float _1740 = exp2(_1734 * cbSceneParam._m0[78u].z);
        float _1741 = _1738 * _1605;
        float _1742 = _1739 * _1606;
        float _1743 = _1740 * _1607;
        float _1750 = _312 + (-0.5);
        _1752 = cbMtdParam._m0[1u];
        _1754 = _1752.y * _1750;
        float _1757 = (_1731 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1758 = _1757 * (_1732 ? _1741 : (_1741 + (cbSceneParam._m0[72u].w * _1713)));
        _1759 = _1757 * (_1732 ? _1742 : (_1742 + (cbSceneParam._m0[72u].w * _1715)));
        _1760 = _1757 * (_1732 ? _1743 : (_1743 + (cbSceneParam._m0[72u].w * _1717)));
        _1763 = ((_1613 * _1617) * _1738) * _1757;
        _1766 = ((_1614 * _1617) * _1739) * _1757;
        _1769 = ((_1615 * _1617) * _1740) * _1757;
        _1770 = _1750 * 0.999000012874603271484375;
        _1781 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1781)
        {
            if ((cbInstanceData._m0[_364 + 7u].x + _1770) < 0.5)
            {
                _1912 = true;
                break;
            }
        }
        uint _1856 = _366 + uint(_1729.w);
        if ((cbInstanceData._m0[_1856].w < 1.0) && ((cbInstanceData._m0[_1856].w + _1770) < 0.5))
        {
            _1912 = true;
            break;
        }
        if ((_1754 + _192) < _1752.x)
        {
            _1912 = true;
            break;
        }
        _1912 = false;
        break;
    }
    float _2014;
    if (_1912)
    {
        discard_state = true;
        _2014 = 0.0;
    }
    else
    {
        _2014 = _1622;
    }
    SV_Target.x = _1758;
    SV_Target.y = _1759;
    SV_Target.z = _1760;
    SV_Target.w = _2014;
    SV_Target_1.x = _1763;
    SV_Target_1.y = _1766;
    SV_Target_1.z = _1769;
    SV_Target_1.w = _1622;
    discard_exit();
}


