#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_A_Alpha_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D P_A_Alpha_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _2591;
float _2592;
float _2593;
float _2594;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    float _174;
    float _175;
    float _176;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
    }
    else
    {
        _174 = _167;
        _175 = _168;
        _176 = _169;
    }
    vec4 _190 = texture(sampler2D(P_A_Alpha_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _193 = _190.x;
    float _194 = _190.y;
    float _195 = _190.z;
    float _196 = _190.w;
    float _197 = _196 * TEXCOORD_1.z;
    vec4 _213 = texture(sampler2D(P_A_Alpha_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _224 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _225 = _224 * _174;
    float _226 = _224 * _175;
    float _227 = _224 * _176;
    float _2603 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _2614 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2625 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _2636 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _232 = isnan(1.0) ? _2636 : (isnan(_2636) ? 1.0 : min(_2636, 1.0));
    float _248 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _290 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _300 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _290);
    float _301 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _290);
    float _302 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _290);
    float _306 = inversesqrt(dot(vec3(_300, _301, _302), vec3(_300, _301, _302)));
    float _307 = _300 * _306;
    float _308 = _301 * _306;
    float _309 = _302 * _306;
    vec4 _314 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _316 = _314.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _435 = sqrt(((_300 * _300) + (_301 * _301)) + (_302 * _302));
        float _441 = (cbMatDynParam._m0[5u].x * _435) + cbMatDynParam._m0[5u].y;
        float _2647 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
        float _442 = isnan(1.0) ? _2647 : (isnan(_2647) ? 1.0 : min(_2647, 1.0));
        float _446 = (cbMatDynParam._m0[5u].z * _435) + cbMatDynParam._m0[5u].w;
        float _2658 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2658 : (isnan(_2658) ? 1.0 : min(_2658, 1.0))) - _442)) + _442) < ((_316 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _328 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _329 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _349 = fma(_227, cbSceneParam._m0[5u].z, fma(_226, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _225));
    float _352 = fma(_227, cbSceneParam._m0[6u].z, fma(_226, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _225));
    float _355 = fma(_227, cbSceneParam._m0[7u].z, fma(_226, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _225));
    uint _368 = uint(roundEven(NORMAL.w)) * 13u;
    uint _370 = _368 + 9u;
    uint _371 = _370 + uint(cbMatDynParam._m0[0u].w);
    float _377 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2603 : (isnan(_2603) ? 1.0 : min(_2603, 1.0)))) * cbInstanceData._m0[_371].x;
    float _378 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2614 : (isnan(_2614) ? 1.0 : min(_2614, 1.0)))) * cbInstanceData._m0[_371].y;
    float _379 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2625 : (isnan(_2625) ? 1.0 : min(_2625, 1.0)))) * cbInstanceData._m0[_371].z;
    float _2669 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _380 = isnan(1.0) ? _2669 : (isnan(_2669) ? 1.0 : min(_2669, 1.0));
    float _2680 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _2680 : (isnan(_2680) ? 1.0 : min(_2680, 1.0));
    float _2691 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _2691 : (isnan(_2691) ? 1.0 : min(_2691, 1.0));
    vec4 _391 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _328, cbSceneParam._m0[86u].y * _329));
    float _394 = _391.x * TEXCOORD_1.w;
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _420 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _424 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _756;
    float _757;
    float _758;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _480 = fma(_424, cbModelParam._m0[26u].z, fma(_420, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _416));
        float _484 = fma(_424, cbModelParam._m0[27u].z, fma(_420, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _416));
        float _488 = fma(_424, cbModelParam._m0[28u].z, fma(_420, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _416));
        float _513 = _416 + _225;
        float _514 = _420 + _226;
        float _515 = _424 + _227;
        float _525 = fma(_515, cbModelParam._m0[26u].z, fma(_514, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _513)) - _480;
        float _526 = fma(_515, cbModelParam._m0[27u].z, fma(_514, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _513)) - _484;
        float _527 = fma(_515, cbModelParam._m0[28u].z, fma(_514, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _513)) - _488;
        float _531 = inversesqrt(dot(vec3(_525, _526, _527), vec3(_525, _526, _527)));
        float _544 = ((_531 * _525) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_480 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _545 = ((_531 * _526) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_484 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _546 = ((_531 * _527) / cbModelParam._m0[34u].z) + ((((((_488 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _549 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_544, _545, _546), 0.0);
        vec4 _556 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_544, _545, _546), 0.0);
        vec4 _563 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_544, _545, _546), 0.0);
        vec4 _570 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_544, _545, _546), 0.0);
        float _583 = exp2((_549.w + (-0.5)) * 20.0) * 2.0;
        float _591 = exp2((_556.w + (-0.5)) * 20.0) * 2.0;
        float _598 = exp2((_563.w + (-0.5)) * 20.0) * 2.0;
        float _605 = exp2((_570.w + (-0.5)) * 20.0) * 2.0;
        float _606 = _605 * (_570.x + (-0.5));
        float _607 = _605 * (_570.y + (-0.5));
        float _608 = _605 * (_570.z + (-0.5));
        float _609 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        float _610 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _611 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        float _613 = ((_549.x + (-0.5)) * 0.5) * _583;
        float _615 = ((_556.x + (-0.5)) * 0.5) * _591;
        float _617 = ((_563.x + (-0.5)) * 0.5) * _598;
        float _618 = dot(vec3(_613, _615, _617), vec3(_613, _615, _617));
        float _623 = (_618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_618);
        float _632 = (dot(vec3(_225, _226, _227), vec3(_623 * _613, _623 * _615, _623 * _617)) + 1.0) * 0.5;
        float _2717 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _642 = sqrt(((_615 * _615) + (_613 * _613)) + (_617 * _617)) / (_609 + 9.9999997473787516355514526367188e-06);
        float _2728 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _643 = isnan(1.0) ? _2728 : (isnan(_2728) ? 1.0 : min(_2728, 1.0));
        float _644 = _643 * 2.0;
        float _648 = (1.0 - _643) / (_643 + 1.0);
        float _2739 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _649 = isnan(1.0) ? _2739 : (isnan(_2739) ? 1.0 : min(_2739, 1.0));
        float _658 = ((((1.0 - _649) * (_644 + 2.0)) * exp2(log2(isnan(1.0) ? _2717 : (isnan(_2717) ? 1.0 : min(_2717, 1.0))) * (_644 + 1.0))) + _649) * _609;
        float _660 = ((_549.y + (-0.5)) * 0.5) * _583;
        float _662 = ((_556.y + (-0.5)) * 0.5) * _591;
        float _664 = ((_563.y + (-0.5)) * 0.5) * _598;
        float _665 = dot(vec3(_660, _662, _664), vec3(_660, _662, _664));
        float _670 = (_665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_665);
        float _678 = (dot(vec3(_225, _226, _227), vec3(_670 * _660, _670 * _662, _670 * _664)) + 1.0) * 0.5;
        float _2750 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _687 = sqrt(((_662 * _662) + (_660 * _660)) + (_664 * _664)) / (_610 + 9.9999997473787516355514526367188e-06);
        float _2761 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _2761 : (isnan(_2761) ? 1.0 : min(_2761, 1.0));
        float _689 = _688 * 2.0;
        float _693 = (1.0 - _688) / (_688 + 1.0);
        float _2772 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _694 = isnan(1.0) ? _2772 : (isnan(_2772) ? 1.0 : min(_2772, 1.0));
        float _703 = ((((1.0 - _694) * (_689 + 2.0)) * exp2(log2(isnan(1.0) ? _2750 : (isnan(_2750) ? 1.0 : min(_2750, 1.0))) * (_689 + 1.0))) + _694) * _610;
        float _705 = ((_549.z + (-0.5)) * 0.5) * _583;
        float _707 = ((_556.z + (-0.5)) * 0.5) * _591;
        float _709 = ((_563.z + (-0.5)) * 0.5) * _598;
        float _710 = dot(vec3(_705, _707, _709), vec3(_705, _707, _709));
        float _715 = (_710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_710);
        float _723 = (dot(vec3(_225, _226, _227), vec3(_715 * _705, _715 * _707, _715 * _709)) + 1.0) * 0.5;
        float _2783 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _732 = sqrt(((_707 * _707) + (_705 * _705)) + (_709 * _709)) / (_611 + 9.9999997473787516355514526367188e-06);
        float _2794 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _2794 : (isnan(_2794) ? 1.0 : min(_2794, 1.0));
        float _734 = _733 * 2.0;
        float _738 = (1.0 - _733) / (_733 + 1.0);
        float _2805 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _2805 : (isnan(_2805) ? 1.0 : min(_2805, 1.0));
        float _748 = ((((1.0 - _739) * (_734 + 2.0)) * exp2(log2(isnan(1.0) ? _2783 : (isnan(_2783) ? 1.0 : min(_2783, 1.0))) * (_734 + 1.0))) + _739) * _611;
        _756 = cbModelParam._m0[36u].z * (isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0)));
        _757 = cbModelParam._m0[36u].z * (isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0)));
        _758 = cbModelParam._m0[36u].z * (isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0)));
    }
    else
    {
        _756 = 0.0;
        _757 = 0.0;
        _758 = 0.0;
    }
    float _1056;
    float _1057;
    float _1058;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _787 = fma(_424, cbModelParam._m0[30u].z, fma(_420, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _416));
        float _791 = fma(_424, cbModelParam._m0[31u].z, fma(_420, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _416));
        float _795 = fma(_424, cbModelParam._m0[32u].z, fma(_420, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _416));
        float _818 = _416 + _225;
        float _819 = _420 + _226;
        float _820 = _424 + _227;
        float _830 = fma(_820, cbModelParam._m0[30u].z, fma(_819, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818)) - _787;
        float _831 = fma(_820, cbModelParam._m0[31u].z, fma(_819, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818)) - _791;
        float _832 = fma(_820, cbModelParam._m0[32u].z, fma(_819, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818)) - _795;
        float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
        float _849 = ((_836 * _830) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_787 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_836 * _831) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_791 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_836 * _832) / cbModelParam._m0[35u].z) + ((((((_795 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        float _886 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _893 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _900 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _907 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_874.x + (-0.5));
        float _909 = _907 * (_874.y + (-0.5));
        float _910 = _907 * (_874.z + (-0.5));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _915 = ((_853.x + (-0.5)) * 0.5) * _886;
        float _917 = ((_860.x + (-0.5)) * 0.5) * _893;
        float _919 = ((_867.x + (-0.5)) * 0.5) * _900;
        float _920 = dot(vec3(_915, _917, _919), vec3(_915, _917, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _933 = (dot(vec3(_225, _226, _227), vec3(_925 * _915, _925 * _917, _925 * _919)) + 1.0) * 0.5;
        float _2846 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _942 = sqrt(((_917 * _917) + (_915 * _915)) + (_919 * _919)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _2857 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _2868 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0))) * (_944 + 1.0))) + _949) * _911;
        float _960 = ((_853.y + (-0.5)) * 0.5) * _886;
        float _962 = ((_860.y + (-0.5)) * 0.5) * _893;
        float _964 = ((_867.y + (-0.5)) * 0.5) * _900;
        float _965 = dot(vec3(_960, _962, _964), vec3(_960, _962, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_225, _226, _227), vec3(_970 * _960, _970 * _962, _970 * _964)) + 1.0) * 0.5;
        float _2879 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_962 * _962) + (_960 * _960)) + (_964 * _964)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _2890 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _2890 : (isnan(_2890) ? 1.0 : min(_2890, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _2901 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _2901 : (isnan(_2901) ? 1.0 : min(_2901, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _2879 : (isnan(_2879) ? 1.0 : min(_2879, 1.0))) * (_989 + 1.0))) + _994) * _912;
        float _1005 = ((_853.z + (-0.5)) * 0.5) * _886;
        float _1007 = ((_860.z + (-0.5)) * 0.5) * _893;
        float _1009 = ((_867.z + (-0.5)) * 0.5) * _900;
        float _1010 = dot(vec3(_1005, _1007, _1009), vec3(_1005, _1007, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_225, _226, _227), vec3(_1015 * _1005, _1015 * _1007, _1015 * _1009)) + 1.0) * 0.5;
        float _2912 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1007 * _1007) + (_1005 * _1005)) + (_1009 * _1009)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _2923 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _2923 : (isnan(_2923) ? 1.0 : min(_2923, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _2934 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _2934 : (isnan(_2934) ? 1.0 : min(_2934, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _2912 : (isnan(_2912) ? 1.0 : min(_2912, 1.0))) * (_1034 + 1.0))) + _1039) * _913;
        _1056 = cbModelParam._m0[36u].w * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1057 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1058 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
    }
    else
    {
        _1056 = 0.0;
        _1057 = 0.0;
        _1058 = 0.0;
    }
    float _1068 = (cbModelParam._m0[1u].x * (_1056 - _756)) + _756;
    float _1069 = (cbModelParam._m0[1u].x * (_1057 - _757)) + _757;
    float _1070 = (cbModelParam._m0[1u].x * (_1058 - _758)) + _758;
    float _1091 = fma(_1070, cbSceneParam._m0[89u].z, fma(_1069, cbSceneParam._m0[89u].y, _1068 * cbSceneParam._m0[89u].x));
    float _1094 = fma(_1070, cbSceneParam._m0[90u].z, fma(_1069, cbSceneParam._m0[90u].y, _1068 * cbSceneParam._m0[90u].x));
    float _1097 = fma(_1070, cbSceneParam._m0[91u].z, fma(_1069, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1068));
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1147 = _1134 / _1146;
    float _1148 = _1138 / _1146;
    float _1149 = _1142 / _1146;
    float _1286;
    float _1287;
    float _1288;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1166 = ((uint(_1149 > cbSceneParam._m0[59u].y) + uint(_1149 > cbSceneParam._m0[59u].x)) + uint(_1149 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1167 = _1166 + 43u;
        uint _1175 = _1166 + 44u;
        uint _1183 = _1166 + 45u;
        uint _1191 = _1166 + 46u;
        float _1202 = fma(_1146, cbSceneParam._m0[_1167].w, fma(_1142, cbSceneParam._m0[_1167].z, fma(_1138, cbSceneParam._m0[_1167].y, _1134 * cbSceneParam._m0[_1167].x)));
        float _1206 = fma(_1146, cbSceneParam._m0[_1175].w, fma(_1142, cbSceneParam._m0[_1175].z, fma(_1138, cbSceneParam._m0[_1175].y, _1134 * cbSceneParam._m0[_1175].x)));
        float _1214 = fma(_1146, cbSceneParam._m0[_1191].w, fma(_1142, cbSceneParam._m0[_1191].z, fma(_1138, cbSceneParam._m0[_1191].y, _1134 * cbSceneParam._m0[_1191].x)));
        float _1219 = cbSceneParam._m0[33u].z * _1214;
        float _1221 = cbSceneParam._m0[33u].w * _1214;
        float _1224 = fma(_1146, cbSceneParam._m0[_1183].w, fma(_1142, cbSceneParam._m0[_1183].z, fma(_1138, cbSceneParam._m0[_1183].y, _1134 * cbSceneParam._m0[_1183].x))) / _1214;
        float _1272 = (cbSceneParam._m0[33u].x - sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149))) * cbSceneParam._m0[33u].y;
        float _2975 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1279 = (isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1219 + _1202) / _1214, (_1221 + _1206) / _1214), _1224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1221 + _1202) / _1214, (_1206 - _1219) / _1214), _1224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1202 - _1219) / _1214, (_1206 - _1221) / _1214), _1224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1202 - _1221) / _1214, (_1219 + _1206) / _1214), _1224), 0.0)).x), vec4(0.25)));
        _1286 = 1.0 - (_1279 * cbSceneParam._m0[34u].x);
        _1287 = 1.0 - (_1279 * cbSceneParam._m0[34u].y);
        _1288 = 1.0 - (_1279 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1286 = 1.0;
        _1287 = 1.0;
        _1288 = 1.0;
    }
    float _1344;
    float _1346;
    float _1348;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1332 = fma(_1146, cbSceneParam._m0[63u].w, fma(_1142, cbSceneParam._m0[63u].z, fma(_1138, cbSceneParam._m0[63u].y, _1134 * cbSceneParam._m0[63u].x)));
        float _1333 = fma(_1146, cbSceneParam._m0[60u].w, fma(_1142, cbSceneParam._m0[60u].z, fma(_1138, cbSceneParam._m0[60u].y, _1134 * cbSceneParam._m0[60u].x))) / _1332;
        float _1334 = fma(_1146, cbSceneParam._m0[61u].w, fma(_1142, cbSceneParam._m0[61u].z, fma(_1138, cbSceneParam._m0[61u].y, _1134 * cbSceneParam._m0[61u].x))) / _1332;
        float frontier_phi_13_12_ladder;
        float frontier_phi_13_12_ladder_1;
        float frontier_phi_13_12_ladder_2;
        if ((((_1333 >= cbSceneParam._m0[64u].x) && (_1334 >= cbSceneParam._m0[64u].y)) && (_1333 <= cbSceneParam._m0[64u].z)) && (_1334 <= cbSceneParam._m0[64u].w))
        {
            float _1442 = fma(_1146, cbSceneParam._m0[62u].w, fma(_1142, cbSceneParam._m0[62u].z, fma(_1138, cbSceneParam._m0[62u].y, _1134 * cbSceneParam._m0[62u].x))) / _1332;
            float _1446 = isnan(cbSceneParam._m0[41u].w) ? _1442 : (isnan(_1442) ? cbSceneParam._m0[41u].w : max(_1442, cbSceneParam._m0[41u].w));
            float _1489 = (cbSceneParam._m0[33u].x - sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149))) * cbSceneParam._m0[33u].y;
            float _2991 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
            float _1496 = (isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1333, cbSceneParam._m0[33u].w + _1334), _1446), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1333, _1334 - cbSceneParam._m0[33u].z), _1446), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1333 - cbSceneParam._m0[33u].z, _1334 - cbSceneParam._m0[33u].w), _1446), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1333 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1334), _1446), 0.0)).x), vec4(0.25)));
            float _1500 = 1.0 - (_1496 * cbSceneParam._m0[34u].x);
            float _1501 = 1.0 - (_1496 * cbSceneParam._m0[34u].y);
            float _1502 = 1.0 - (_1496 * cbSceneParam._m0[34u].z);
            frontier_phi_13_12_ladder = isnan(_1502) ? _1288 : (isnan(_1288) ? _1502 : min(_1288, _1502));
            frontier_phi_13_12_ladder_1 = isnan(_1501) ? _1287 : (isnan(_1287) ? _1501 : min(_1287, _1501));
            frontier_phi_13_12_ladder_2 = isnan(_1500) ? _1286 : (isnan(_1286) ? _1500 : min(_1286, _1500));
        }
        else
        {
            frontier_phi_13_12_ladder = _1288;
            frontier_phi_13_12_ladder_1 = _1287;
            frontier_phi_13_12_ladder_2 = _1286;
        }
        _1344 = frontier_phi_13_12_ladder_2;
        _1346 = frontier_phi_13_12_ladder_1;
        _1348 = frontier_phi_13_12_ladder;
    }
    else
    {
        _1344 = _1286;
        _1346 = _1287;
        _1348 = _1288;
    }
    uvec4 _1353 = floatBitsToUint(cbInstanceData._m0[_368 + 5u]);
    uint _1355 = _1353.x * 14u;
    uint _1356 = _1355 + 13u;
    float _1363 = _394 + (-1.0);
    float _1369 = (cbLight._m0[_1356].x * _1363) + 1.0;
    float _1370 = (cbLight._m0[_1356].y * _1363) + 1.0;
    float _1371 = (cbLight._m0[_1356].z * _1363) + 1.0;
    float _1372 = (cbLight._m0[_1356].w * _1363) + 1.0;
    uint _1373 = _1355 + 5u;
    float _1379 = isnan(1.0) ? _1370 : (isnan(_1370) ? 1.0 : min(_1370, 1.0));
    uint _1383 = _1355 + 4u;
    float _1393 = isnan(1.0) ? _1369 : (isnan(_1369) ? 1.0 : min(_1369, 1.0));
    uint _1397 = _1355 | 1u;
    float _1408 = dot(vec3(cbLight._m0[_1355].xyz), vec3(_225, _226, _227));
    float _1411 = dot(vec3(cbLight._m0[_1397].xyz), vec3(_225, _226, _227));
    float _3027 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
    float _3038 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
    float _1416 = (isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0))) * 0.3183098733425140380859375;
    float _1418 = (isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0))) * 0.3183098733425140380859375;
    float _1425 = ((cbLight._m0[_1373].x * _1379) * _1418) + (((cbLight._m0[_1383].x * _1344) * _1393) * _1416);
    float _1426 = ((_1379 * cbLight._m0[_1373].y) * _1418) + (((cbLight._m0[_1383].y * _1346) * _1393) * _1416);
    float _1427 = ((_1379 * cbLight._m0[_1373].z) * _1418) + (((cbLight._m0[_1383].z * _1348) * _1393) * _1416);
    uvec4 _1431 = floatBitsToUint(cbLight._m0[_1355 + 12u]);
    bool _1433 = _1431.x == 0u;
    float _1503;
    float _1505;
    float _1507;
    if (_1433)
    {
        _1503 = _1425;
        _1505 = _1426;
        _1507 = _1427;
    }
    else
    {
        uint _1511 = _1355 + 6u;
        float _1527 = (dot(vec3(cbLight._m0[_1355 + 2u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _1528 = _1527 * _1527;
        float _3049 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0));
        float _1530 = isnan(1.0) ? _1371 : (isnan(_1371) ? 1.0 : min(_1371, 1.0));
        _1503 = (((cbLight._m0[_1511].x * 0.3183098733425140380859375) * _1529) * _1530) + _1425;
        _1505 = (((cbLight._m0[_1511].y * 0.3183098733425140380859375) * _1529) * _1530) + _1426;
        _1507 = (((cbLight._m0[_1511].z * 0.3183098733425140380859375) * _1529) * _1530) + _1427;
    }
    bool _1510 = _1431.y == 0u;
    float _1540;
    float _1542;
    float _1544;
    if (_1510)
    {
        _1540 = _1503;
        _1542 = _1505;
        _1544 = _1507;
    }
    else
    {
        uint _1645 = _1355 + 7u;
        float _1661 = (dot(vec3(cbLight._m0[_1355 + 3u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _1662 = _1661 * _1661;
        float _3065 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0));
        float _1664 = isnan(1.0) ? _1372 : (isnan(_1372) ? 1.0 : min(_1372, 1.0));
        _1540 = (((cbLight._m0[_1645].x * 0.3183098733425140380859375) * _1663) * _1664) + _1503;
        _1542 = (((cbLight._m0[_1645].y * 0.3183098733425140380859375) * _1663) * _1664) + _1505;
        _1544 = (((cbLight._m0[_1645].z * 0.3183098733425140380859375) * _1663) * _1664) + _1507;
    }
    uint _1546 = _1355 + 8u;
    float _1552 = cbLight._m0[_1355].x + _307;
    float _1553 = cbLight._m0[_1355].y + _308;
    float _1554 = cbLight._m0[_1355].z + _309;
    float _1558 = inversesqrt(dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554)));
    float _1562 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1355].xyz));
    float _3081 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
    float _1565 = isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0));
    float _1566 = dot(vec3(_225, _226, _227), vec3(_307, _308, _309));
    float _3092 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1569 = isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0));
    float _1570 = dot(vec3(cbLight._m0[_1355].xyz), vec3(_1552 * _1558, _1553 * _1558, _1554 * _1558));
    float _3103 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
    float _1578 = exp2(log2(1.0 - (isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0)))) * 5.0);
    float _1583 = (0.5 / ((_1565 + 9.9999999392252902907785028219223e-09) + _1569)) * _1565;
    float _3114 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1585 = (isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0))) * 0.31831014156341552734375;
    uint _1599 = _1355 + 9u;
    float _1605 = cbLight._m0[_1397].x + _307;
    float _1606 = cbLight._m0[_1397].y + _308;
    float _1607 = cbLight._m0[_1397].z + _309;
    float _1611 = inversesqrt(dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607)));
    float _1615 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1397].xyz));
    float _3125 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1618 = isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0));
    float _1619 = dot(vec3(cbLight._m0[_1397].xyz), vec3(_1605 * _1611, _1606 * _1611, _1607 * _1611));
    float _3136 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1626 = exp2(log2(1.0 - (isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0)))) * 5.0);
    float _1630 = (0.5 / ((_1618 + 9.9999999392252902907785028219223e-09) + _1569)) * _1618;
    float _3147 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
    float _1632 = (isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0))) * 0.31831014156341552734375;
    float _1642 = (((_1626 * cbLight._m0[_1599].x) * _1632) * _1379) + ((((cbLight._m0[_1546].x * _1344) * _1578) * _1585) * _1393);
    float _1643 = (((_1626 * cbLight._m0[_1599].y) * _1632) * _1379) + ((((cbLight._m0[_1546].y * _1346) * _1578) * _1585) * _1393);
    float _1644 = (((_1626 * cbLight._m0[_1599].z) * _1632) * _1379) + ((((cbLight._m0[_1546].z * _1348) * _1578) * _1585) * _1393);
    float _1674;
    float _1676;
    float _1678;
    if (_1433)
    {
        _1674 = _1642;
        _1676 = _1643;
        _1678 = _1644;
    }
    else
    {
        uint _1680 = _1355 + 10u;
        uint _1686 = _1355 + 2u;
        float _1692 = cbLight._m0[_1686].x + _307;
        float _1693 = cbLight._m0[_1686].y + _308;
        float _1694 = cbLight._m0[_1686].z + _309;
        float _1698 = inversesqrt(dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694)));
        float _1702 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1686].xyz));
        float _3158 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1705 = isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0));
        float _1706 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_1692 * _1698, _1693 * _1698, _1694 * _1698));
        float _3169 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1713 = exp2(log2(1.0 - (isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0)))) * 5.0);
        float _1717 = (0.5 / ((_1705 + 9.9999999392252902907785028219223e-09) + _1569)) * _1705;
        float _3180 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1719 = (isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0))) * 0.31831014156341552734375;
        float _1720 = isnan(1.0) ? _1371 : (isnan(_1371) ? 1.0 : min(_1371, 1.0));
        _1674 = (((_1713 * cbLight._m0[_1680].x) * _1719) * _1720) + _1642;
        _1676 = (((_1713 * cbLight._m0[_1680].y) * _1719) * _1720) + _1643;
        _1678 = (((_1713 * cbLight._m0[_1680].z) * _1719) * _1720) + _1644;
    }
    float _1730;
    float _1732;
    float _1734;
    if (_1510)
    {
        _1730 = _1674;
        _1732 = _1676;
        _1734 = _1678;
    }
    else
    {
        uint _1741 = _1355 + 11u;
        uint _1747 = _1355 + 3u;
        float _1753 = cbLight._m0[_1747].x + _307;
        float _1754 = cbLight._m0[_1747].y + _308;
        float _1755 = cbLight._m0[_1747].z + _309;
        float _1759 = inversesqrt(dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755)));
        float _1763 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1747].xyz));
        float _3196 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1766 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
        float _1767 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_1753 * _1759, _1754 * _1759, _1755 * _1759));
        float _3207 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1774 = exp2(log2(1.0 - (isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0)))) * 5.0);
        float _1778 = (0.5 / ((_1766 + 9.9999999392252902907785028219223e-09) + _1569)) * _1766;
        float _3218 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1780 = (isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0))) * 0.31831014156341552734375;
        float _1781 = isnan(1.0) ? _1372 : (isnan(_1372) ? 1.0 : min(_1372, 1.0));
        _1730 = (((_1774 * cbLight._m0[_1741].x) * _1780) * _1781) + _1674;
        _1732 = (((_1774 * cbLight._m0[_1741].y) * _1780) * _1781) + _1676;
        _1734 = (((_1774 * cbLight._m0[_1741].z) * _1780) * _1781) + _1678;
    }
    float _1846;
    float _1848;
    float _1850;
    if (_1353.y == 0u)
    {
        uvec4 _1802 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1803 = _1802.x;
        uint _1814 = uint((float(_1802.y) * floor(float(uint(cbSceneParam._m0[85u].y * _329) / _1803))) + floor(float(uint(cbSceneParam._m0[85u].x * _328) / _1803)));
        float _1824 = (log2(_1149 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1825 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        uint _1828 = uint(isnan(14.0) ? _1825 : (isnan(_1825) ? 14.0 : min(_1825, 14.0)));
        uvec4 _1833 = texelFetch(g_lightClusterGridBuffer, int(((_1828 << 2u) + (_1814 << 6u)) >> 2u));
        uint _1834 = _1833.x;
        uint _1835 = _1802.z;
        float _1935;
        float _1937;
        float _1939;
        if (((((1u << ((_1835 >> 4u) & 15u)) + 4294967295u) & _1834) == 0u) || ((_1835 & 240u) == 0u))
        {
            _1935 = 0.0;
            _1937 = 0.0;
            _1939 = 0.0;
        }
        else
        {
            float _1936;
            float _1938;
            float _1940;
            float _2074 = 0.0;
            float _2075 = 0.0;
            float _2076 = 0.0;
            uint _2077 = 0u;
            uint _2086;
            bool _2087;
            for (;;)
            {
                _2086 = texelFetch(g_lightClassification, int((((_1828 << 5u) + (_1814 << 9u)) + (_2077 << 2u)) >> 2u)).x;
                _2087 = _2086 == 0u;
                float frontier_phi_37_pred;
                float frontier_phi_37_pred_1;
                float frontier_phi_37_pred_2;
                if (_2087)
                {
                    frontier_phi_37_pred = _2076;
                    frontier_phi_37_pred_1 = _2075;
                    frontier_phi_37_pred_2 = _2074;
                }
                else
                {
                    float _2210;
                    float _2211;
                    float _2212;
                    uint _2213;
                    _2210 = _2074;
                    _2211 = _2075;
                    _2212 = _2076;
                    _2213 = _2086;
                    float _2143;
                    float _2144;
                    float _2145;
                    for (;;)
                    {
                        uint _2217 = uint(findLSB(_2213)) + (_2077 << 5u);
                        uint _2214 = (_2213 + 4294967295u) & _2213;
                        uint _2219 = _2217 * 48u;
                        vec4 _2233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2219)).x, texelFetch(g_PointLightRenderingBuffer, int(_2219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2219 + 3u)).x));
                        uint _2239 = (_2217 * 48u) + 4u;
                        vec4 _2252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2239)).x, texelFetch(g_PointLightRenderingBuffer, int(_2239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2239 + 3u)).x));
                        float _2257 = _2233.x - _1147;
                        float _2258 = _2233.y - _1148;
                        float _2259 = _2233.z - _1149;
                        float _2260 = dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259));
                        float _2263 = inversesqrt(_2260);
                        float _2272 = 1.0 - (_2260 * _2233.w);
                        float _3244 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
                        float _2274 = sqrt(_2260) * _2252.w;
                        float _2277 = 1.39999997615814208984375 / (_2274 + 1.39999997615814208984375);
                        float _2278 = _2277 * _2277;
                        float _2281 = ((1.0 - _2278) * dot(vec3(_349, _352, _355), vec3(_2263 * _2257, _2263 * _2258, _2263 * _2259))) + _2278;
                        float _2288 = ((isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0))) * (isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0)))) / (((_2274 * _2274) * 0.699999988079071044921875) + 1.0);
                        _2143 = (_2288 * _2252.x) + _2210;
                        _2144 = (_2288 * _2252.y) + _2211;
                        _2145 = (_2288 * _2252.z) + _2212;
                        if (_2214 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2210 = _2143;
                            _2211 = _2144;
                            _2212 = _2145;
                            _2213 = _2214;
                        }
                    }
                    frontier_phi_37_pred = _2145;
                    frontier_phi_37_pred_1 = _2144;
                    frontier_phi_37_pred_2 = _2143;
                }
                _1940 = frontier_phi_37_pred;
                _1938 = frontier_phi_37_pred_1;
                _1936 = frontier_phi_37_pred_2;
                uint _2078 = _2077 + 1u;
                if (_2078 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2074 = _1936;
                    _2075 = _1938;
                    _2076 = _1940;
                    _2077 = _2078;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1935 = _1936;
            _1937 = _1938;
            _1939 = _1940;
        }
        uvec4 _1943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1944 = _1943.z;
        uint _1946 = (_1944 >> 8u) & 15u;
        float _2061;
        float _2063;
        float _2065;
        if (((4294967295u << _1946) & _1834) == 0u)
        {
            _2061 = _1935;
            _2063 = _1937;
            _2065 = _1939;
        }
        else
        {
            float frontier_phi_29_30_ladder;
            float frontier_phi_29_30_ladder_1;
            float frontier_phi_29_30_ladder_2;
            if (_1946 < ((_1944 >> 12u) & 15u))
            {
                float _2062;
                float _2064;
                float _2066;
                float _2196 = _1935;
                float _2197 = _1937;
                float _2198 = _1939;
                uint _2199 = _1946;
                uint _2208;
                bool _2209;
                for (;;)
                {
                    _2208 = texelFetch(g_lightClassification, int((((_1828 << 5u) + (_1814 << 9u)) + (_2199 << 2u)) >> 2u)).x;
                    _2209 = _2208 == 0u;
                    float frontier_phi_48_pred;
                    float frontier_phi_48_pred_1;
                    float frontier_phi_48_pred_2;
                    if (_2209)
                    {
                        frontier_phi_48_pred = _2198;
                        frontier_phi_48_pred_1 = _2197;
                        frontier_phi_48_pred_2 = _2196;
                    }
                    else
                    {
                        float _2302;
                        float _2303;
                        float _2304;
                        float _2504;
                        float _2505;
                        float _2506;
                        float _2312 = _2196;
                        float _2313 = _2197;
                        float _2314 = _2198;
                        uint _2315 = _2208;
                        uint _2316;
                        vec4 _2342;
                        float _2343;
                        vec4 _2358;
                        vec4 _2374;
                        vec4 _2390;
                        float _2437;
                        bool _2438;
                        for (;;)
                        {
                            uint _2326 = ((_2199 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2315));
                            _2316 = (_2315 + 4294967295u) & _2315;
                            uint _2328 = _2326 * 40u;
                            _2342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2328 + 3u)).x));
                            _2343 = _2342.w;
                            uint _2345 = (_2326 * 40u) + 4u;
                            _2358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2345 + 3u)).x));
                            uint _2361 = (_2326 * 40u) + 16u;
                            _2374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2361 + 3u)).x));
                            uint _2377 = (_2326 * 40u) + 20u;
                            _2390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2377 + 3u)).x));
                            uint _2393 = (_2326 * 40u) + 24u;
                            vec4 _2406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2393 + 3u)).x));
                            uint _2412 = (_2326 * 40u) + 28u;
                            vec4 _2425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2412 + 3u)).x));
                            _2437 = fma(_1149, _2425.z, fma(_1148, _2425.y, _2425.x * _1147)) + _2425.w;
                            _2438 = !((fma(_1149, _2406.z, fma(_1148, _2406.y, _2406.x * _1147)) + _2406.w) <= 0.0);
                            float frontier_phi_54_pred;
                            float frontier_phi_54_pred_1;
                            float frontier_phi_54_pred_2;
                            if (_2438)
                            {
                                float _2462 = _2342.x - _1147;
                                float _2463 = _2342.y - _1148;
                                float _2464 = _2342.z - _1149;
                                float _2465 = dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464));
                                float _2468 = inversesqrt(_2465);
                                float _2475 = 1.0 - (_2465 / (_2343 * _2343));
                                float _3260 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
                                float _2480 = sqrt(_2465) * _2358.w;
                                float _2482 = 1.39999997615814208984375 / (_2480 + 1.39999997615814208984375);
                                float _2483 = _2482 * _2482;
                                float _2486 = ((1.0 - _2483) * dot(vec3(_2468 * _2462, _2468 * _2463, _2468 * _2464), vec3(_349, _352, _355))) + _2483;
                                float _2493 = (fma(_1149, _2374.z, fma(_1148, _2374.y, _2374.x * _1147)) + _2374.w) / _2437;
                                float _2494 = (fma(_1149, _2390.z, fma(_1148, _2390.y, _2390.x * _1147)) + _2390.w) / _2437;
                                float _2498 = 1.0 - dot(vec2(_2493, _2494), vec2(_2493, _2494));
                                float _3276 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
                                float _2500 = (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))) * (((isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0))) * (isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0)))) / (((_2480 * _2480) * 0.699999988079071044921875) + 1.0));
                                frontier_phi_54_pred = _2500 * _2358.x;
                                frontier_phi_54_pred_1 = _2500 * _2358.y;
                                frontier_phi_54_pred_2 = _2500 * _2358.z;
                            }
                            else
                            {
                                frontier_phi_54_pred = 0.0;
                                frontier_phi_54_pred_1 = 0.0;
                                frontier_phi_54_pred_2 = 0.0;
                            }
                            _2504 = frontier_phi_54_pred;
                            _2505 = frontier_phi_54_pred_1;
                            _2506 = frontier_phi_54_pred_2;
                            _2302 = _2504 + _2312;
                            _2303 = _2505 + _2313;
                            _2304 = _2506 + _2314;
                            if (_2316 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2312 = _2302;
                                _2313 = _2303;
                                _2314 = _2304;
                                _2315 = _2316;
                                continue;
                            }
                        }
                        frontier_phi_48_pred = _2304;
                        frontier_phi_48_pred_1 = _2303;
                        frontier_phi_48_pred_2 = _2302;
                    }
                    _2066 = frontier_phi_48_pred;
                    _2064 = frontier_phi_48_pred_1;
                    _2062 = frontier_phi_48_pred_2;
                    uint _2200 = _2199 + 1u;
                    if (_2200 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2196 = _2062;
                        _2197 = _2064;
                        _2198 = _2066;
                        _2199 = _2200;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_29_30_ladder = _2066;
                frontier_phi_29_30_ladder_1 = _2064;
                frontier_phi_29_30_ladder_2 = _2062;
            }
            else
            {
                frontier_phi_29_30_ladder = _1939;
                frontier_phi_29_30_ladder_1 = _1937;
                frontier_phi_29_30_ladder_2 = _1935;
            }
            _2061 = frontier_phi_29_30_ladder_2;
            _2063 = frontier_phi_29_30_ladder_1;
            _2065 = frontier_phi_29_30_ladder;
        }
        float _2067 = isnan(1.0) ? _394 : (isnan(_394) ? 1.0 : min(_394, 1.0));
        _1846 = (_2067 * _2061) + _1540;
        _1848 = (_2067 * _2063) + _1542;
        _1850 = (_2067 * _2065) + _1544;
    }
    else
    {
        _1846 = _1540;
        _1848 = _1542;
        _1850 = _1544;
    }
    uint _1856 = _370 + uint(cbMatDynParam._m0[0u].w);
    float _1862 = (_213.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1856].x;
    float _1863 = (_213.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1856].y;
    float _1864 = (_213.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1856].z;
    float _3292 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3303 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3314 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3325 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _1879 = (((isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * (_1846 + ((isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0))) * _394))) + (cbPerFrame._m0[3u].x * _1730)) + _1862;
    float _1881 = (_1863 + (cbPerFrame._m0[3u].x * _1732)) + ((isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0))) * (_1848 + ((isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0))) * _394)));
    float _1883 = (_1864 + (cbPerFrame._m0[3u].x * _1734)) + ((isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) * (_1850 + ((isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0))) * _394)));
    float _1884 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1885 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1886 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1892 = cbMtdParam._m0[2u].x * _1862;
    float _1893 = cbMtdParam._m0[2u].y * _1863;
    float _1894 = cbMtdParam._m0[2u].z * _1864;
    float _3351 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1896 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
    float _1901 = cbInstanceData._m0[_368 + 6u].w * (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0)));
    float _1906 = _328 / cbSceneParam._m0[86u].x;
    float _1907 = _329 / cbSceneParam._m0[86u].y;
    vec4 _1921 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1906, _1907, (log2((isnan(cbSceneParam._m0[77u].w) ? _248 : (isnan(_248) ? cbSceneParam._m0[77u].w : min(_248, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1923 = _1921.x;
    float _1924 = _1921.y;
    float _1925 = _1921.z;
    float _1926 = _1921.w;
    float _1992;
    float _1994;
    float _1996;
    float _1998;
    if (_248 > cbSceneParam._m0[78u].w)
    {
        float _1954 = isnan(_248) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _248 : min(cbSceneParam._m0[80u].w, _248));
        float _1955 = _1954 / _248;
        float _1966 = _1955 * _300;
        float _1967 = _301 * _1955;
        float _1968 = (-0.0) - _1967;
        float _1969 = _1955 * _302;
        float _1971 = (cbSceneParam._m0[77u].w * _1968) / _1954;
        float _1972 = _1971 + cbSceneParam._m0[79u].w;
        float _1973 = cbSceneParam._m0[79u].w - _1967;
        float _1979 = sqrt(((_1966 * _1966) + (_1967 * _1967)) + (_1969 * _1969));
        float _1982 = (1.0 - (cbSceneParam._m0[77u].w / _1954)) * _1979;
        float _1988 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1990 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2153;
        if (abs((_1968 - _1971) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2153 = ((((_1972 > 0.0) ? exp2(_1988 * _1972) : (2.0 - exp2(_1990 * _1972))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1982;
        }
        else
        {
            float _2100 = 1.0 / cbSceneParam._m0[80u].x;
            float _2101 = isnan(_1973) ? _1972 : (isnan(_1972) ? _1973 : max(_1972, _1973));
            float _2102 = isnan(_1973) ? _1972 : (isnan(_1972) ? _1973 : min(_1972, _1973));
            float _2111 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : min(_2101, 0.0));
            float _2112 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : min(_2102, 0.0));
            _2153 = ((abs(_1979 / _1968) * cbSceneParam._m0[80u].y) * ((((_2111 - _2112) * 2.0) - ((exp2(_1988 * (isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0)))) - exp2(_1988 * (isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))))) * _2100)) - ((exp2(_1990 * _2111) - exp2(_1990 * _2112)) * _2100))) + (_1982 * cbSceneParam._m0[80u].z);
        }
        vec4 _2155 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1906, _1907, 1.0), 0.0);
        float _2164 = exp2((_2153 * (-1.44269502162933349609375)) * (1.0 - _2155.w));
        float _2165 = log2(_2164);
        float _2181 = log2(_1926);
        _1992 = (exp2(_2181 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2165 * cbSceneParam._m0[78u].x)) * _2155.x) / cbSceneParam._m0[78u].x)) + _1923;
        _1994 = (exp2(_2181 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2165 * cbSceneParam._m0[78u].y)) * _2155.y) / cbSceneParam._m0[78u].y)) + _1924;
        _1996 = (exp2(_2181 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2165 * cbSceneParam._m0[78u].z)) * _2155.z) / cbSceneParam._m0[78u].z)) + _1925;
        _1998 = _2164 * _1926;
    }
    else
    {
        _1992 = _1923;
        _1994 = _1924;
        _1996 = _1925;
        _1998 = _1926;
    }
    bool _2191;
    vec4 _2008;
    vec4 _2031;
    float _2033;
    float _2037;
    float _2038;
    float _2039;
    float _2042;
    float _2045;
    float _2048;
    float _2049;
    bool _2060;
    for (;;)
    {
        _2008 = cbMatDynParam._m0[0u];
        float _2010 = roundEven(_2008.y);
        bool _2011 = _2010 == 3.0;
        float _2013 = log2(_1998);
        float _2017 = exp2(_2013 * cbSceneParam._m0[78u].x);
        float _2018 = exp2(_2013 * cbSceneParam._m0[78u].y);
        float _2019 = exp2(_2013 * cbSceneParam._m0[78u].z);
        float _2020 = _2017 * _1884;
        float _2021 = _2018 * _1885;
        float _2022 = _2019 * _1886;
        float _2029 = _316 + (-0.5);
        _2031 = cbMtdParam._m0[1u];
        _2033 = _2031.y * _2029;
        float _2036 = (_2010 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2037 = _2036 * (_2011 ? _2020 : (_2020 + (cbSceneParam._m0[72u].w * _1992)));
        _2038 = _2036 * (_2011 ? _2021 : (_2021 + (cbSceneParam._m0[72u].w * _1994)));
        _2039 = _2036 * (_2011 ? _2022 : (_2022 + (cbSceneParam._m0[72u].w * _1996)));
        _2042 = ((_1892 * _1896) * _2017) * _2036;
        _2045 = ((_1893 * _1896) * _2018) * _2036;
        _2048 = ((_1894 * _1896) * _2019) * _2036;
        _2049 = _2029 * 0.999000012874603271484375;
        _2060 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2060)
        {
            if ((cbInstanceData._m0[_368 + 7u].x + _2049) < 0.5)
            {
                _2191 = true;
                break;
            }
        }
        uint _2135 = _370 + uint(_2008.w);
        if ((cbInstanceData._m0[_2135].w < 1.0) && ((cbInstanceData._m0[_2135].w + _2049) < 0.5))
        {
            _2191 = true;
            break;
        }
        if ((_2033 + _196) < _2031.x)
        {
            _2191 = true;
            break;
        }
        _2191 = false;
        break;
    }
    float _2293;
    if (_2191)
    {
        discard_state = true;
        _2293 = 0.0;
    }
    else
    {
        _2293 = _1901;
    }
    SV_Target.x = _2037;
    SV_Target.y = _2038;
    SV_Target.z = _2039;
    SV_Target.w = _2293;
    SV_Target_1.x = _2042;
    SV_Target_1.y = _2045;
    SV_Target_1.z = _2048;
    SV_Target_1.w = _1901;
    discard_exit();
}


