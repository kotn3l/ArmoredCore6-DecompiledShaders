#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_A_Alpha_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D P_A_Alpha_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _160 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _161 = _160 * NORMAL.x;
    float _162 = _160 * NORMAL.y;
    float _163 = _160 * NORMAL.z;
    float _168;
    float _169;
    float _170;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _168 = (-0.0) - _161;
        _169 = (-0.0) - _162;
        _170 = (-0.0) - _163;
    }
    else
    {
        _168 = _161;
        _169 = _162;
        _170 = _163;
    }
    vec4 _184 = texture(sampler2D(P_A_Alpha_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _187 = _184.x;
    float _188 = _184.y;
    float _189 = _184.z;
    float _191 = _184.w * TEXCOORD_1.z;
    vec4 _207 = texture(sampler2D(P_A_Alpha_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _218 = inversesqrt(dot(vec3(_168, _169, _170), vec3(_168, _169, _170)));
    float _219 = _218 * _168;
    float _220 = _218 * _169;
    float _221 = _218 * _170;
    float _2229 = isnan(0.0) ? _187 : (isnan(_187) ? 0.0 : max(_187, 0.0));
    float _2240 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _2251 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _2262 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _226 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
    float _242 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _284 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _294 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _284);
    float _295 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _284);
    float _296 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _284);
    float _300 = inversesqrt(dot(vec3(_294, _295, _296), vec3(_294, _295, _296)));
    float _301 = _294 * _300;
    float _302 = _295 * _300;
    float _303 = _296 * _300;
    float _309 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _310 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _331 = fma(_221, cbSceneParam._m0[5u].z, fma(_220, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _219));
    float _334 = fma(_221, cbSceneParam._m0[6u].z, fma(_220, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _219));
    float _337 = fma(_221, cbSceneParam._m0[7u].z, fma(_220, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _219));
    uint _350 = uint(roundEven(NORMAL.w)) * 13u;
    uint _352 = _350 + 9u;
    uint _353 = _352 + uint(cbMatDynParam._m0[0u].w);
    float _359 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0)))) * cbInstanceData._m0[_353].x;
    float _360 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0)))) * cbInstanceData._m0[_353].y;
    float _361 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0)))) * cbInstanceData._m0[_353].z;
    float _2273 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _362 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
    float _2284 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _363 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
    float _2295 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
    vec4 _373 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _309, cbSceneParam._m0[86u].y * _310));
    float _376 = _373.x * TEXCOORD_1.w;
    float _398 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _402 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _406 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _709;
    float _710;
    float _711;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _433 = fma(_406, cbModelParam._m0[26u].z, fma(_402, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _398));
        float _437 = fma(_406, cbModelParam._m0[27u].z, fma(_402, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _398));
        float _441 = fma(_406, cbModelParam._m0[28u].z, fma(_402, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _398));
        float _466 = _398 + _219;
        float _467 = _402 + _220;
        float _468 = _406 + _221;
        float _478 = fma(_468, cbModelParam._m0[26u].z, fma(_467, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _466)) - _433;
        float _479 = fma(_468, cbModelParam._m0[27u].z, fma(_467, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _466)) - _437;
        float _480 = fma(_468, cbModelParam._m0[28u].z, fma(_467, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _466)) - _441;
        float _484 = inversesqrt(dot(vec3(_478, _479, _480), vec3(_478, _479, _480)));
        float _497 = ((_484 * _478) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_433 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _498 = ((_484 * _479) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_437 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _499 = ((_484 * _480) / cbModelParam._m0[34u].z) + ((((((_441 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _502 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_497, _498, _499), 0.0);
        vec4 _509 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_497, _498, _499), 0.0);
        vec4 _516 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_497, _498, _499), 0.0);
        vec4 _523 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_497, _498, _499), 0.0);
        float _536 = exp2((_502.w + (-0.5)) * 20.0) * 2.0;
        float _544 = exp2((_509.w + (-0.5)) * 20.0) * 2.0;
        float _551 = exp2((_516.w + (-0.5)) * 20.0) * 2.0;
        float _558 = exp2((_523.w + (-0.5)) * 20.0) * 2.0;
        float _559 = _558 * (_523.x + (-0.5));
        float _560 = _558 * (_523.y + (-0.5));
        float _561 = _558 * (_523.z + (-0.5));
        float _562 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
        float _563 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
        float _564 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
        float _566 = ((_502.x + (-0.5)) * 0.5) * _536;
        float _568 = ((_509.x + (-0.5)) * 0.5) * _544;
        float _570 = ((_516.x + (-0.5)) * 0.5) * _551;
        float _571 = dot(vec3(_566, _568, _570), vec3(_566, _568, _570));
        float _576 = (_571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_571);
        float _585 = (dot(vec3(_219, _220, _221), vec3(_576 * _566, _576 * _568, _576 * _570)) + 1.0) * 0.5;
        float _2321 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _595 = sqrt(((_568 * _568) + (_566 * _566)) + (_570 * _570)) / (_562 + 9.9999997473787516355514526367188e-06);
        float _2332 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _596 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
        float _597 = _596 * 2.0;
        float _601 = (1.0 - _596) / (_596 + 1.0);
        float _2343 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _602 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
        float _611 = ((((1.0 - _602) * (_597 + 2.0)) * exp2(log2(isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0))) * (_597 + 1.0))) + _602) * _562;
        float _613 = ((_502.y + (-0.5)) * 0.5) * _536;
        float _615 = ((_509.y + (-0.5)) * 0.5) * _544;
        float _617 = ((_516.y + (-0.5)) * 0.5) * _551;
        float _618 = dot(vec3(_613, _615, _617), vec3(_613, _615, _617));
        float _623 = (_618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_618);
        float _631 = (dot(vec3(_219, _220, _221), vec3(_623 * _613, _623 * _615, _623 * _617)) + 1.0) * 0.5;
        float _2354 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _640 = sqrt(((_615 * _615) + (_613 * _613)) + (_617 * _617)) / (_563 + 9.9999997473787516355514526367188e-06);
        float _2365 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _641 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
        float _642 = _641 * 2.0;
        float _646 = (1.0 - _641) / (_641 + 1.0);
        float _2376 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _647 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
        float _656 = ((((1.0 - _647) * (_642 + 2.0)) * exp2(log2(isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0))) * (_642 + 1.0))) + _647) * _563;
        float _658 = ((_502.z + (-0.5)) * 0.5) * _536;
        float _660 = ((_509.z + (-0.5)) * 0.5) * _544;
        float _662 = ((_516.z + (-0.5)) * 0.5) * _551;
        float _663 = dot(vec3(_658, _660, _662), vec3(_658, _660, _662));
        float _668 = (_663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_663);
        float _676 = (dot(vec3(_219, _220, _221), vec3(_668 * _658, _668 * _660, _668 * _662)) + 1.0) * 0.5;
        float _2387 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _685 = sqrt(((_660 * _660) + (_658 * _658)) + (_662 * _662)) / (_564 + 9.9999997473787516355514526367188e-06);
        float _2398 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        float _687 = _686 * 2.0;
        float _691 = (1.0 - _686) / (_686 + 1.0);
        float _2409 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0));
        float _701 = ((((1.0 - _692) * (_687 + 2.0)) * exp2(log2(isnan(1.0) ? _2387 : (isnan(_2387) ? 1.0 : min(_2387, 1.0))) * (_687 + 1.0))) + _692) * _564;
        _709 = cbModelParam._m0[36u].z * (isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0)));
        _710 = cbModelParam._m0[36u].z * (isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0)));
        _711 = cbModelParam._m0[36u].z * (isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0)));
    }
    else
    {
        _709 = 0.0;
        _710 = 0.0;
        _711 = 0.0;
    }
    float _1006;
    float _1007;
    float _1008;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _737 = fma(_406, cbModelParam._m0[30u].z, fma(_402, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _398));
        float _741 = fma(_406, cbModelParam._m0[31u].z, fma(_402, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _398));
        float _745 = fma(_406, cbModelParam._m0[32u].z, fma(_402, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _398));
        float _768 = _398 + _219;
        float _769 = _402 + _220;
        float _770 = _406 + _221;
        float _780 = fma(_770, cbModelParam._m0[30u].z, fma(_769, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _768)) - _737;
        float _781 = fma(_770, cbModelParam._m0[31u].z, fma(_769, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _768)) - _741;
        float _782 = fma(_770, cbModelParam._m0[32u].z, fma(_769, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _768)) - _745;
        float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
        float _799 = ((_786 * _780) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_737 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _800 = ((_786 * _781) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_741 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _801 = ((_786 * _782) / cbModelParam._m0[35u].z) + ((((((_745 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        float _836 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _843 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _850 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _857 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_824.x + (-0.5));
        float _859 = _857 * (_824.y + (-0.5));
        float _860 = _857 * (_824.z + (-0.5));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _865 = ((_803.x + (-0.5)) * 0.5) * _836;
        float _867 = ((_810.x + (-0.5)) * 0.5) * _843;
        float _869 = ((_817.x + (-0.5)) * 0.5) * _850;
        float _870 = dot(vec3(_865, _867, _869), vec3(_865, _867, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _883 = (dot(vec3(_219, _220, _221), vec3(_875 * _865, _875 * _867, _875 * _869)) + 1.0) * 0.5;
        float _2450 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _892 = sqrt(((_867 * _867) + (_865 * _865)) + (_869 * _869)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _2461 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _2461 : (isnan(_2461) ? 1.0 : min(_2461, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _2472 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0))) * (_894 + 1.0))) + _899) * _861;
        float _910 = ((_803.y + (-0.5)) * 0.5) * _836;
        float _912 = ((_810.y + (-0.5)) * 0.5) * _843;
        float _914 = ((_817.y + (-0.5)) * 0.5) * _850;
        float _915 = dot(vec3(_910, _912, _914), vec3(_910, _912, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_219, _220, _221), vec3(_920 * _910, _920 * _912, _920 * _914)) + 1.0) * 0.5;
        float _2483 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_912 * _912) + (_910 * _910)) + (_914 * _914)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _2494 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _2494 : (isnan(_2494) ? 1.0 : min(_2494, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _2505 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _2505 : (isnan(_2505) ? 1.0 : min(_2505, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _2483 : (isnan(_2483) ? 1.0 : min(_2483, 1.0))) * (_939 + 1.0))) + _944) * _862;
        float _955 = ((_803.z + (-0.5)) * 0.5) * _836;
        float _957 = ((_810.z + (-0.5)) * 0.5) * _843;
        float _959 = ((_817.z + (-0.5)) * 0.5) * _850;
        float _960 = dot(vec3(_955, _957, _959), vec3(_955, _957, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_219, _220, _221), vec3(_965 * _955, _965 * _957, _965 * _959)) + 1.0) * 0.5;
        float _2516 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_957 * _957) + (_955 * _955)) + (_959 * _959)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _2527 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _2527 : (isnan(_2527) ? 1.0 : min(_2527, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _2538 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _2538 : (isnan(_2538) ? 1.0 : min(_2538, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _2516 : (isnan(_2516) ? 1.0 : min(_2516, 1.0))) * (_984 + 1.0))) + _989) * _863;
        _1006 = cbModelParam._m0[36u].w * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
        _1007 = cbModelParam._m0[36u].w * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1008 = cbModelParam._m0[36u].w * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
    }
    else
    {
        _1006 = 0.0;
        _1007 = 0.0;
        _1008 = 0.0;
    }
    float _1018 = (cbModelParam._m0[1u].x * (_1006 - _709)) + _709;
    float _1019 = (cbModelParam._m0[1u].x * (_1007 - _710)) + _710;
    float _1020 = (cbModelParam._m0[1u].x * (_1008 - _711)) + _711;
    float _1041 = fma(_1020, cbSceneParam._m0[89u].z, fma(_1019, cbSceneParam._m0[89u].y, _1018 * cbSceneParam._m0[89u].x));
    float _1044 = fma(_1020, cbSceneParam._m0[90u].z, fma(_1019, cbSceneParam._m0[90u].y, _1018 * cbSceneParam._m0[90u].x));
    float _1047 = fma(_1020, cbSceneParam._m0[91u].z, fma(_1019, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1018));
    vec4 _1055 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_309, _310));
    float _1057 = _1055.w;
    float _1069 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1057);
    float _1070 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1057);
    float _1071 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1057);
    uvec4 _1075 = floatBitsToUint(cbInstanceData._m0[_350 + 5u]);
    uint _1077 = _1075.x * 14u;
    uint _1079 = _1077 + 13u;
    float _1086 = _376 + (-1.0);
    float _1092 = (cbLight._m0[_1079].x * _1086) + 1.0;
    float _1093 = (cbLight._m0[_1079].y * _1086) + 1.0;
    float _1094 = (cbLight._m0[_1079].z * _1086) + 1.0;
    float _1095 = (cbLight._m0[_1079].w * _1086) + 1.0;
    uint _1096 = _1077 + 5u;
    float _1102 = isnan(1.0) ? _1093 : (isnan(_1093) ? 1.0 : min(_1093, 1.0));
    uint _1106 = _1077 + 4u;
    float _1116 = isnan(1.0) ? _1092 : (isnan(_1092) ? 1.0 : min(_1092, 1.0));
    uint _1120 = _1077 | 1u;
    float _1131 = dot(vec3(cbLight._m0[_1077].xyz), vec3(_219, _220, _221));
    float _1134 = dot(vec3(cbLight._m0[_1120].xyz), vec3(_219, _220, _221));
    float _2589 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _2600 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _1139 = (isnan(1.0) ? _2589 : (isnan(_2589) ? 1.0 : min(_2589, 1.0))) * 0.3183098733425140380859375;
    float _1141 = (isnan(1.0) ? _2600 : (isnan(_2600) ? 1.0 : min(_2600, 1.0))) * 0.3183098733425140380859375;
    float _1148 = ((cbLight._m0[_1096].x * _1102) * _1141) + (((cbLight._m0[_1106].x * _1069) * _1116) * _1139);
    float _1149 = ((_1102 * cbLight._m0[_1096].y) * _1141) + (((cbLight._m0[_1106].y * _1070) * _1116) * _1139);
    float _1150 = ((_1102 * cbLight._m0[_1096].z) * _1141) + (((cbLight._m0[_1106].z * _1071) * _1116) * _1139);
    uvec4 _1155 = floatBitsToUint(cbLight._m0[_1077 + 12u]);
    bool _1157 = _1155.x == 0u;
    float _1158;
    float _1160;
    float _1162;
    if (_1157)
    {
        _1158 = _1148;
        _1160 = _1149;
        _1162 = _1150;
    }
    else
    {
        uint _1166 = _1077 + 6u;
        float _1182 = (dot(vec3(cbLight._m0[_1077 + 2u].xyz), vec3(_219, _220, _221)) * 0.5) + 0.5;
        float _1183 = _1182 * _1182;
        float _2611 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _2611 : (isnan(_2611) ? 1.0 : min(_2611, 1.0));
        float _1185 = isnan(1.0) ? _1094 : (isnan(_1094) ? 1.0 : min(_1094, 1.0));
        _1158 = (((cbLight._m0[_1166].x * 0.3183098733425140380859375) * _1184) * _1185) + _1148;
        _1160 = (((cbLight._m0[_1166].y * 0.3183098733425140380859375) * _1184) * _1185) + _1149;
        _1162 = (((cbLight._m0[_1166].z * 0.3183098733425140380859375) * _1184) * _1185) + _1150;
    }
    bool _1165 = _1155.y == 0u;
    float _1195;
    float _1197;
    float _1199;
    if (_1165)
    {
        _1195 = _1158;
        _1197 = _1160;
        _1199 = _1162;
    }
    else
    {
        uint _1300 = _1077 + 7u;
        float _1316 = (dot(vec3(cbLight._m0[_1077 + 3u].xyz), vec3(_219, _220, _221)) * 0.5) + 0.5;
        float _1317 = _1316 * _1316;
        float _2627 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _2627 : (isnan(_2627) ? 1.0 : min(_2627, 1.0));
        float _1319 = isnan(1.0) ? _1095 : (isnan(_1095) ? 1.0 : min(_1095, 1.0));
        _1195 = (((cbLight._m0[_1300].x * 0.3183098733425140380859375) * _1318) * _1319) + _1158;
        _1197 = (((cbLight._m0[_1300].y * 0.3183098733425140380859375) * _1318) * _1319) + _1160;
        _1199 = (((cbLight._m0[_1300].z * 0.3183098733425140380859375) * _1318) * _1319) + _1162;
    }
    uint _1201 = _1077 + 8u;
    float _1207 = cbLight._m0[_1077].x + _301;
    float _1208 = cbLight._m0[_1077].y + _302;
    float _1209 = cbLight._m0[_1077].z + _303;
    float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
    float _1217 = dot(vec3(_219, _220, _221), vec3(cbLight._m0[_1077].xyz));
    float _2643 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _1220 = isnan(1.0) ? _2643 : (isnan(_2643) ? 1.0 : min(_2643, 1.0));
    float _1221 = dot(vec3(_219, _220, _221), vec3(_301, _302, _303));
    float _2654 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _1224 = isnan(1.0) ? _2654 : (isnan(_2654) ? 1.0 : min(_2654, 1.0));
    float _1225 = dot(vec3(cbLight._m0[_1077].xyz), vec3(_1207 * _1213, _1208 * _1213, _1209 * _1213));
    float _2665 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _1233 = exp2(log2(1.0 - (isnan(1.0) ? _2665 : (isnan(_2665) ? 1.0 : min(_2665, 1.0)))) * 5.0);
    float _1238 = (0.5 / ((_1220 + 9.9999999392252902907785028219223e-09) + _1224)) * _1220;
    float _2676 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _1240 = (isnan(1.0) ? _2676 : (isnan(_2676) ? 1.0 : min(_2676, 1.0))) * 0.31831014156341552734375;
    uint _1254 = _1077 + 9u;
    float _1260 = cbLight._m0[_1120].x + _301;
    float _1261 = cbLight._m0[_1120].y + _302;
    float _1262 = cbLight._m0[_1120].z + _303;
    float _1266 = inversesqrt(dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262)));
    float _1270 = dot(vec3(_219, _220, _221), vec3(cbLight._m0[_1120].xyz));
    float _2687 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
    float _1273 = isnan(1.0) ? _2687 : (isnan(_2687) ? 1.0 : min(_2687, 1.0));
    float _1274 = dot(vec3(cbLight._m0[_1120].xyz), vec3(_1260 * _1266, _1261 * _1266, _1262 * _1266));
    float _2698 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
    float _1281 = exp2(log2(1.0 - (isnan(1.0) ? _2698 : (isnan(_2698) ? 1.0 : min(_2698, 1.0)))) * 5.0);
    float _1285 = (0.5 / ((_1273 + 9.9999999392252902907785028219223e-09) + _1224)) * _1273;
    float _2709 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
    float _1287 = (isnan(1.0) ? _2709 : (isnan(_2709) ? 1.0 : min(_2709, 1.0))) * 0.31831014156341552734375;
    float _1297 = (((_1281 * cbLight._m0[_1254].x) * _1287) * _1102) + ((((cbLight._m0[_1201].x * _1069) * _1233) * _1240) * _1116);
    float _1298 = (((_1281 * cbLight._m0[_1254].y) * _1287) * _1102) + ((((cbLight._m0[_1201].y * _1070) * _1233) * _1240) * _1116);
    float _1299 = (((_1281 * cbLight._m0[_1254].z) * _1287) * _1102) + ((((cbLight._m0[_1201].z * _1071) * _1233) * _1240) * _1116);
    float _1329;
    float _1331;
    float _1333;
    if (_1157)
    {
        _1329 = _1297;
        _1331 = _1298;
        _1333 = _1299;
    }
    else
    {
        uint _1335 = _1077 + 10u;
        uint _1341 = _1077 + 2u;
        float _1347 = cbLight._m0[_1341].x + _301;
        float _1348 = cbLight._m0[_1341].y + _302;
        float _1349 = cbLight._m0[_1341].z + _303;
        float _1353 = inversesqrt(dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349)));
        float _1357 = dot(vec3(_219, _220, _221), vec3(cbLight._m0[_1341].xyz));
        float _2720 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1360 = isnan(1.0) ? _2720 : (isnan(_2720) ? 1.0 : min(_2720, 1.0));
        float _1361 = dot(vec3(cbLight._m0[_1341].xyz), vec3(_1347 * _1353, _1348 * _1353, _1349 * _1353));
        float _2731 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1368 = exp2(log2(1.0 - (isnan(1.0) ? _2731 : (isnan(_2731) ? 1.0 : min(_2731, 1.0)))) * 5.0);
        float _1372 = (0.5 / ((_1360 + 9.9999999392252902907785028219223e-09) + _1224)) * _1360;
        float _2742 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1374 = (isnan(1.0) ? _2742 : (isnan(_2742) ? 1.0 : min(_2742, 1.0))) * 0.31831014156341552734375;
        float _1375 = isnan(1.0) ? _1094 : (isnan(_1094) ? 1.0 : min(_1094, 1.0));
        _1329 = (((_1368 * cbLight._m0[_1335].x) * _1374) * _1375) + _1297;
        _1331 = (((_1368 * cbLight._m0[_1335].y) * _1374) * _1375) + _1298;
        _1333 = (((_1368 * cbLight._m0[_1335].z) * _1374) * _1375) + _1299;
    }
    float _1385;
    float _1387;
    float _1389;
    if (_1165)
    {
        _1385 = _1329;
        _1387 = _1331;
        _1389 = _1333;
    }
    else
    {
        uint _1396 = _1077 + 11u;
        uint _1402 = _1077 + 3u;
        float _1408 = cbLight._m0[_1402].x + _301;
        float _1409 = cbLight._m0[_1402].y + _302;
        float _1410 = cbLight._m0[_1402].z + _303;
        float _1414 = inversesqrt(dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410)));
        float _1418 = dot(vec3(_219, _220, _221), vec3(cbLight._m0[_1402].xyz));
        float _2758 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1421 = isnan(1.0) ? _2758 : (isnan(_2758) ? 1.0 : min(_2758, 1.0));
        float _1422 = dot(vec3(cbLight._m0[_1402].xyz), vec3(_1408 * _1414, _1409 * _1414, _1410 * _1414));
        float _2769 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1429 = exp2(log2(1.0 - (isnan(1.0) ? _2769 : (isnan(_2769) ? 1.0 : min(_2769, 1.0)))) * 5.0);
        float _1433 = (0.5 / ((_1421 + 9.9999999392252902907785028219223e-09) + _1224)) * _1421;
        float _2780 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1435 = (isnan(1.0) ? _2780 : (isnan(_2780) ? 1.0 : min(_2780, 1.0))) * 0.31831014156341552734375;
        float _1436 = isnan(1.0) ? _1095 : (isnan(_1095) ? 1.0 : min(_1095, 1.0));
        _1385 = (((_1429 * cbLight._m0[_1396].x) * _1435) * _1436) + _1329;
        _1387 = (((_1429 * cbLight._m0[_1396].y) * _1435) * _1436) + _1331;
        _1389 = (((_1429 * cbLight._m0[_1396].z) * _1435) * _1436) + _1333;
    }
    float _1545;
    float _1547;
    float _1549;
    if (_1075.y == 0u)
    {
        float _1486 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1487 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1486;
        float _1488 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1486;
        float _1489 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1486;
        uvec4 _1501 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1502 = _1501.x;
        uint _1513 = uint((float(_1501.y) * floor(float(uint(cbSceneParam._m0[85u].y * _310) / _1502))) + floor(float(uint(cbSceneParam._m0[85u].x * _309) / _1502)));
        float _1523 = (log2(_1489 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1524 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        uint _1527 = uint(isnan(14.0) ? _1524 : (isnan(_1524) ? 14.0 : min(_1524, 14.0)));
        uvec4 _1532 = texelFetch(g_lightClusterGridBuffer, int(((_1527 << 2u) + (_1513 << 6u)) >> 2u));
        uint _1533 = _1532.x;
        uint _1534 = _1501.z;
        float _1634;
        float _1636;
        float _1638;
        if (((((1u << ((_1534 >> 4u) & 15u)) + 4294967295u) & _1533) == 0u) || ((_1534 & 240u) == 0u))
        {
            _1634 = 0.0;
            _1636 = 0.0;
            _1638 = 0.0;
        }
        else
        {
            float _1635;
            float _1637;
            float _1639;
            float _1764 = 0.0;
            float _1765 = 0.0;
            float _1766 = 0.0;
            uint _1767 = 0u;
            uint _1776;
            bool _1777;
            for (;;)
            {
                _1776 = texelFetch(g_lightClassification, int((((_1527 << 5u) + (_1513 << 9u)) + (_1767 << 2u)) >> 2u)).x;
                _1777 = _1776 == 0u;
                float frontier_phi_27_pred;
                float frontier_phi_27_pred_1;
                float frontier_phi_27_pred_2;
                if (_1777)
                {
                    frontier_phi_27_pred = _1765;
                    frontier_phi_27_pred_1 = _1766;
                    frontier_phi_27_pred_2 = _1764;
                }
                else
                {
                    float _1879;
                    float _1880;
                    float _1881;
                    uint _1882;
                    _1879 = _1764;
                    _1880 = _1765;
                    _1881 = _1766;
                    _1882 = _1776;
                    float _1817;
                    float _1818;
                    float _1819;
                    for (;;)
                    {
                        uint _1886 = uint(findLSB(_1882)) + (_1767 << 5u);
                        uint _1883 = (_1882 + 4294967295u) & _1882;
                        uint _1888 = _1886 * 48u;
                        vec4 _1902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1888)).x, texelFetch(g_PointLightRenderingBuffer, int(_1888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1888 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1888 + 3u)).x));
                        uint _1908 = (_1886 * 48u) + 4u;
                        vec4 _1921 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1908)).x, texelFetch(g_PointLightRenderingBuffer, int(_1908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1908 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1908 + 3u)).x));
                        float _1926 = _1902.x - _1487;
                        float _1927 = _1902.y - _1488;
                        float _1928 = _1902.z - _1489;
                        float _1929 = dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928));
                        float _1932 = inversesqrt(_1929);
                        float _1941 = 1.0 - (_1929 * _1902.w);
                        float _2806 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
                        float _1943 = sqrt(_1929) * _1921.w;
                        float _1946 = 1.39999997615814208984375 / (_1943 + 1.39999997615814208984375);
                        float _1947 = _1946 * _1946;
                        float _1950 = ((1.0 - _1947) * dot(vec3(_331, _334, _337), vec3(_1932 * _1926, _1932 * _1927, _1932 * _1928))) + _1947;
                        float _1957 = ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * (isnan(1.0) ? _2806 : (isnan(_2806) ? 1.0 : min(_2806, 1.0)))) / (((_1943 * _1943) * 0.699999988079071044921875) + 1.0);
                        _1817 = (_1957 * _1921.x) + _1879;
                        _1818 = (_1957 * _1921.y) + _1880;
                        _1819 = (_1957 * _1921.z) + _1881;
                        if (_1883 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1879 = _1817;
                            _1880 = _1818;
                            _1881 = _1819;
                            _1882 = _1883;
                        }
                    }
                    frontier_phi_27_pred = _1818;
                    frontier_phi_27_pred_1 = _1819;
                    frontier_phi_27_pred_2 = _1817;
                }
                _1637 = frontier_phi_27_pred;
                _1639 = frontier_phi_27_pred_1;
                _1635 = frontier_phi_27_pred_2;
                uint _1768 = _1767 + 1u;
                if (_1768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1764 = _1635;
                    _1765 = _1637;
                    _1766 = _1639;
                    _1767 = _1768;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1634 = _1635;
            _1636 = _1637;
            _1638 = _1639;
        }
        uvec4 _1642 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1643 = _1642.z;
        uint _1645 = (_1643 >> 8u) & 15u;
        float _1751;
        float _1753;
        float _1755;
        if (((4294967295u << _1645) & _1533) == 0u)
        {
            _1751 = _1634;
            _1753 = _1636;
            _1755 = _1638;
        }
        else
        {
            float frontier_phi_21_22_ladder;
            float frontier_phi_21_22_ladder_1;
            float frontier_phi_21_22_ladder_2;
            if (_1645 < ((_1643 >> 12u) & 15u))
            {
                float _1752;
                float _1754;
                float _1756;
                float _1865 = _1634;
                float _1866 = _1636;
                float _1867 = _1638;
                uint _1868 = _1645;
                uint _1877;
                bool _1878;
                for (;;)
                {
                    _1877 = texelFetch(g_lightClassification, int((((_1527 << 5u) + (_1513 << 9u)) + (_1868 << 2u)) >> 2u)).x;
                    _1878 = _1877 == 0u;
                    float frontier_phi_33_pred;
                    float frontier_phi_33_pred_1;
                    float frontier_phi_33_pred_2;
                    if (_1878)
                    {
                        frontier_phi_33_pred = _1867;
                        frontier_phi_33_pred_1 = _1866;
                        frontier_phi_33_pred_2 = _1865;
                    }
                    else
                    {
                        float _1962;
                        float _1963;
                        float _1964;
                        float _2164;
                        float _2165;
                        float _2166;
                        float _1972 = _1865;
                        float _1973 = _1866;
                        float _1974 = _1867;
                        uint _1975 = _1877;
                        uint _1976;
                        vec4 _2002;
                        float _2003;
                        vec4 _2018;
                        vec4 _2034;
                        vec4 _2050;
                        float _2097;
                        bool _2098;
                        for (;;)
                        {
                            uint _1986 = ((_1868 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1975));
                            _1976 = (_1975 + 4294967295u) & _1975;
                            uint _1988 = _1986 * 40u;
                            _2002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1988 + 3u)).x));
                            _2003 = _2002.w;
                            uint _2005 = (_1986 * 40u) + 4u;
                            _2018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2005 + 3u)).x));
                            uint _2021 = (_1986 * 40u) + 16u;
                            _2034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2021 + 3u)).x));
                            uint _2037 = (_1986 * 40u) + 20u;
                            _2050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2037 + 3u)).x));
                            uint _2053 = (_1986 * 40u) + 24u;
                            vec4 _2066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2053 + 3u)).x));
                            uint _2072 = (_1986 * 40u) + 28u;
                            vec4 _2085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2072 + 3u)).x));
                            _2097 = fma(_1489, _2085.z, fma(_1488, _2085.y, _2085.x * _1487)) + _2085.w;
                            _2098 = !((fma(_1489, _2066.z, fma(_1488, _2066.y, _2066.x * _1487)) + _2066.w) <= 0.0);
                            float frontier_phi_39_pred;
                            float frontier_phi_39_pred_1;
                            float frontier_phi_39_pred_2;
                            if (_2098)
                            {
                                float _2122 = _2002.x - _1487;
                                float _2123 = _2002.y - _1488;
                                float _2124 = _2002.z - _1489;
                                float _2125 = dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124));
                                float _2128 = inversesqrt(_2125);
                                float _2135 = 1.0 - (_2125 / (_2003 * _2003));
                                float _2822 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
                                float _2140 = sqrt(_2125) * _2018.w;
                                float _2142 = 1.39999997615814208984375 / (_2140 + 1.39999997615814208984375);
                                float _2143 = _2142 * _2142;
                                float _2146 = ((1.0 - _2143) * dot(vec3(_2128 * _2122, _2128 * _2123, _2128 * _2124), vec3(_331, _334, _337))) + _2143;
                                float _2153 = (fma(_1489, _2034.z, fma(_1488, _2034.y, _2034.x * _1487)) + _2034.w) / _2097;
                                float _2154 = (fma(_1489, _2050.z, fma(_1488, _2050.y, _2050.x * _1487)) + _2050.w) / _2097;
                                float _2158 = 1.0 - dot(vec2(_2153, _2154), vec2(_2153, _2154));
                                float _2838 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
                                float _2160 = (isnan(1.0) ? _2838 : (isnan(_2838) ? 1.0 : min(_2838, 1.0))) * (((isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0))) * (isnan(1.0) ? _2822 : (isnan(_2822) ? 1.0 : min(_2822, 1.0)))) / (((_2140 * _2140) * 0.699999988079071044921875) + 1.0));
                                frontier_phi_39_pred = _2160 * _2018.z;
                                frontier_phi_39_pred_1 = _2160 * _2018.y;
                                frontier_phi_39_pred_2 = _2160 * _2018.x;
                            }
                            else
                            {
                                frontier_phi_39_pred = 0.0;
                                frontier_phi_39_pred_1 = 0.0;
                                frontier_phi_39_pred_2 = 0.0;
                            }
                            _2166 = frontier_phi_39_pred;
                            _2165 = frontier_phi_39_pred_1;
                            _2164 = frontier_phi_39_pred_2;
                            _1962 = _2164 + _1972;
                            _1963 = _2165 + _1973;
                            _1964 = _2166 + _1974;
                            if (_1976 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1972 = _1962;
                                _1973 = _1963;
                                _1974 = _1964;
                                _1975 = _1976;
                                continue;
                            }
                        }
                        frontier_phi_33_pred = _1964;
                        frontier_phi_33_pred_1 = _1963;
                        frontier_phi_33_pred_2 = _1962;
                    }
                    _1756 = frontier_phi_33_pred;
                    _1754 = frontier_phi_33_pred_1;
                    _1752 = frontier_phi_33_pred_2;
                    uint _1869 = _1868 + 1u;
                    if (_1869 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1865 = _1752;
                        _1866 = _1754;
                        _1867 = _1756;
                        _1868 = _1869;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_21_22_ladder = _1756;
                frontier_phi_21_22_ladder_1 = _1754;
                frontier_phi_21_22_ladder_2 = _1752;
            }
            else
            {
                frontier_phi_21_22_ladder = _1638;
                frontier_phi_21_22_ladder_1 = _1636;
                frontier_phi_21_22_ladder_2 = _1634;
            }
            _1751 = frontier_phi_21_22_ladder_2;
            _1753 = frontier_phi_21_22_ladder_1;
            _1755 = frontier_phi_21_22_ladder;
        }
        float _1757 = isnan(1.0) ? _376 : (isnan(_376) ? 1.0 : min(_376, 1.0));
        _1545 = (_1757 * _1751) + _1195;
        _1547 = (_1757 * _1753) + _1197;
        _1549 = (_1757 * _1755) + _1199;
    }
    else
    {
        _1545 = _1195;
        _1547 = _1197;
        _1549 = _1199;
    }
    uint _1555 = _352 + uint(cbMatDynParam._m0[0u].w);
    float _1561 = (_207.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1555].x;
    float _1562 = (_207.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1555].y;
    float _1563 = (_207.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1555].z;
    float _2854 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _2865 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _2876 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _2887 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _1578 = (((isnan(1.0) ? _2854 : (isnan(_2854) ? 1.0 : min(_2854, 1.0))) * (_1545 + ((isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0))) * _376))) + (cbPerFrame._m0[3u].x * _1385)) + _1561;
    float _1580 = (_1562 + (cbPerFrame._m0[3u].x * _1387)) + ((isnan(1.0) ? _2865 : (isnan(_2865) ? 1.0 : min(_2865, 1.0))) * (_1547 + ((isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0))) * _376)));
    float _1582 = (_1563 + (cbPerFrame._m0[3u].x * _1389)) + ((isnan(1.0) ? _2876 : (isnan(_2876) ? 1.0 : min(_2876, 1.0))) * (_1549 + ((isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0))) * _376)));
    float _2913 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1595 = isnan(1.0) ? _2913 : (isnan(_2913) ? 1.0 : min(_2913, 1.0));
    float _1600 = cbInstanceData._m0[_350 + 6u].w * (isnan(1.0) ? _2887 : (isnan(_2887) ? 1.0 : min(_2887, 1.0)));
    float _1605 = _309 / cbSceneParam._m0[86u].x;
    float _1606 = _310 / cbSceneParam._m0[86u].y;
    vec4 _1620 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1605, _1606, (log2((isnan(cbSceneParam._m0[77u].w) ? _242 : (isnan(_242) ? cbSceneParam._m0[77u].w : min(_242, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1622 = _1620.x;
    float _1623 = _1620.y;
    float _1624 = _1620.z;
    float _1625 = _1620.w;
    float _1691;
    float _1693;
    float _1695;
    float _1697;
    if (_242 > cbSceneParam._m0[78u].w)
    {
        float _1653 = isnan(_242) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _242 : min(cbSceneParam._m0[80u].w, _242));
        float _1654 = _1653 / _242;
        float _1665 = _1654 * _294;
        float _1666 = _295 * _1654;
        float _1667 = (-0.0) - _1666;
        float _1668 = _1654 * _296;
        float _1670 = (cbSceneParam._m0[77u].w * _1667) / _1653;
        float _1671 = _1670 + cbSceneParam._m0[79u].w;
        float _1672 = cbSceneParam._m0[79u].w - _1666;
        float _1678 = sqrt(((_1665 * _1665) + (_1666 * _1666)) + (_1668 * _1668));
        float _1681 = (1.0 - (cbSceneParam._m0[77u].w / _1653)) * _1678;
        float _1687 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1689 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1827;
        if (abs((_1667 - _1670) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1827 = ((((_1671 > 0.0) ? exp2(_1687 * _1671) : (2.0 - exp2(_1689 * _1671))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1681;
        }
        else
        {
            float _1790 = 1.0 / cbSceneParam._m0[80u].x;
            float _1791 = isnan(_1672) ? _1671 : (isnan(_1671) ? _1672 : max(_1671, _1672));
            float _1792 = isnan(_1672) ? _1671 : (isnan(_1671) ? _1672 : min(_1671, _1672));
            float _1801 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : min(_1791, 0.0));
            float _1802 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : min(_1792, 0.0));
            _1827 = ((abs(_1678 / _1667) * cbSceneParam._m0[80u].y) * ((((_1801 - _1802) * 2.0) - ((exp2(_1687 * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)))) - exp2(_1687 * (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))))) * _1790)) - ((exp2(_1689 * _1801) - exp2(_1689 * _1802)) * _1790))) + (_1681 * cbSceneParam._m0[80u].z);
        }
        vec4 _1829 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1605, _1606, 1.0), 0.0);
        float _1838 = exp2((_1827 * (-1.44269502162933349609375)) * (1.0 - _1829.w));
        float _1839 = log2(_1838);
        float _1855 = log2(_1625);
        _1691 = (exp2(_1855 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1839 * cbSceneParam._m0[78u].x)) * _1829.x) / cbSceneParam._m0[78u].x)) + _1622;
        _1693 = (exp2(_1855 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1839 * cbSceneParam._m0[78u].y)) * _1829.y) / cbSceneParam._m0[78u].y)) + _1623;
        _1695 = (exp2(_1855 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1839 * cbSceneParam._m0[78u].z)) * _1829.z) / cbSceneParam._m0[78u].z)) + _1624;
        _1697 = _1838 * _1625;
    }
    else
    {
        _1691 = _1622;
        _1693 = _1623;
        _1695 = _1624;
        _1697 = _1625;
    }
    float _1709 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1710 = _1709 == 3.0;
    float _1712 = log2(_1697);
    float _1716 = exp2(_1712 * cbSceneParam._m0[78u].x);
    float _1717 = exp2(_1712 * cbSceneParam._m0[78u].y);
    float _1718 = exp2(_1712 * cbSceneParam._m0[78u].z);
    float _1719 = _1716 * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
    float _1720 = _1717 * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
    float _1721 = _1718 * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
    float _1730 = (_1709 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1730 * (_1710 ? _1719 : (_1719 + (cbSceneParam._m0[72u].w * _1691)));
    SV_Target.y = _1730 * (_1710 ? _1720 : (_1720 + (cbSceneParam._m0[72u].w * _1693)));
    SV_Target.z = _1730 * (_1710 ? _1721 : (_1721 + (cbSceneParam._m0[72u].w * _1695)));
    SV_Target.w = _1600;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1561) * _1595) * _1716) * _1730;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1562) * _1595) * _1717) * _1730;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1563) * _1595) * _1718) * _1730;
    SV_Target_1.w = _1600;
}


