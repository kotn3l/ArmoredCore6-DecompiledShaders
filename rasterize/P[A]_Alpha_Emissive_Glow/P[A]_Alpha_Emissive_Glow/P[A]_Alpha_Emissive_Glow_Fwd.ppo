#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_A_Alpha_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D P_A_Alpha_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _158 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _159 = _158 * NORMAL.x;
    float _160 = _158 * NORMAL.y;
    float _161 = _158 * NORMAL.z;
    float _166;
    float _167;
    float _168;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _166 = (-0.0) - _159;
        _167 = (-0.0) - _160;
        _168 = (-0.0) - _161;
    }
    else
    {
        _166 = _159;
        _167 = _160;
        _168 = _161;
    }
    vec4 _182 = texture(sampler2D(P_A_Alpha_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _185 = _182.x;
    float _186 = _182.y;
    float _187 = _182.z;
    float _189 = _182.w * TEXCOORD_1.z;
    vec4 _205 = texture(sampler2D(P_A_Alpha_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _216 = inversesqrt(dot(vec3(_166, _167, _168), vec3(_166, _167, _168)));
    float _217 = _216 * _166;
    float _218 = _216 * _167;
    float _219 = _216 * _168;
    float _2203 = isnan(0.0) ? _185 : (isnan(_185) ? 0.0 : max(_185, 0.0));
    float _2214 = isnan(0.0) ? _186 : (isnan(_186) ? 0.0 : max(_186, 0.0));
    float _2225 = isnan(0.0) ? _187 : (isnan(_187) ? 0.0 : max(_187, 0.0));
    float _2236 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _224 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
    float _240 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _282 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _292 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _282);
    float _293 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _282);
    float _294 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _282);
    float _298 = inversesqrt(dot(vec3(_292, _293, _294), vec3(_292, _293, _294)));
    float _299 = _292 * _298;
    float _300 = _293 * _298;
    float _301 = _294 * _298;
    float _307 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _308 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _329 = fma(_219, cbSceneParam._m0[5u].z, fma(_218, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _217));
    float _332 = fma(_219, cbSceneParam._m0[6u].z, fma(_218, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _217));
    float _335 = fma(_219, cbSceneParam._m0[7u].z, fma(_218, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _217));
    uint _348 = uint(roundEven(NORMAL.w)) * 13u;
    uint _350 = _348 + 9u;
    uint _351 = _350 + uint(cbMatDynParam._m0[0u].w);
    float _357 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0)))) * cbInstanceData._m0[_351].x;
    float _358 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0)))) * cbInstanceData._m0[_351].y;
    float _359 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0)))) * cbInstanceData._m0[_351].z;
    float _2247 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _360 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
    float _2258 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _361 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    float _2269 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _362 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
    vec4 _371 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _307, cbSceneParam._m0[86u].y * _308));
    float _374 = _371.x * TEXCOORD_1.w;
    float _396 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _400 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _404 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _707;
    float _708;
    float _709;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _431 = fma(_404, cbModelParam._m0[26u].z, fma(_400, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _396));
        float _435 = fma(_404, cbModelParam._m0[27u].z, fma(_400, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _396));
        float _439 = fma(_404, cbModelParam._m0[28u].z, fma(_400, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _396));
        float _464 = _396 + _217;
        float _465 = _400 + _218;
        float _466 = _404 + _219;
        float _476 = fma(_466, cbModelParam._m0[26u].z, fma(_465, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _464)) - _431;
        float _477 = fma(_466, cbModelParam._m0[27u].z, fma(_465, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _464)) - _435;
        float _478 = fma(_466, cbModelParam._m0[28u].z, fma(_465, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _464)) - _439;
        float _482 = inversesqrt(dot(vec3(_476, _477, _478), vec3(_476, _477, _478)));
        float _495 = ((_482 * _476) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_431 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _496 = ((_482 * _477) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_435 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _497 = ((_482 * _478) / cbModelParam._m0[34u].z) + ((((((_439 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _500 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_495, _496, _497), 0.0);
        vec4 _507 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_495, _496, _497), 0.0);
        vec4 _514 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_495, _496, _497), 0.0);
        vec4 _521 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_495, _496, _497), 0.0);
        float _534 = exp2((_500.w + (-0.5)) * 20.0) * 2.0;
        float _542 = exp2((_507.w + (-0.5)) * 20.0) * 2.0;
        float _549 = exp2((_514.w + (-0.5)) * 20.0) * 2.0;
        float _556 = exp2((_521.w + (-0.5)) * 20.0) * 2.0;
        float _557 = _556 * (_521.x + (-0.5));
        float _558 = _556 * (_521.y + (-0.5));
        float _559 = _556 * (_521.z + (-0.5));
        float _560 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
        float _561 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        float _562 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
        float _564 = ((_500.x + (-0.5)) * 0.5) * _534;
        float _566 = ((_507.x + (-0.5)) * 0.5) * _542;
        float _568 = ((_514.x + (-0.5)) * 0.5) * _549;
        float _569 = dot(vec3(_564, _566, _568), vec3(_564, _566, _568));
        float _574 = (_569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_569);
        float _583 = (dot(vec3(_217, _218, _219), vec3(_574 * _564, _574 * _566, _574 * _568)) + 1.0) * 0.5;
        float _2295 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        float _593 = sqrt(((_566 * _566) + (_564 * _564)) + (_568 * _568)) / (_560 + 9.9999997473787516355514526367188e-06);
        float _2306 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _594 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        float _595 = _594 * 2.0;
        float _599 = (1.0 - _594) / (_594 + 1.0);
        float _2317 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _600 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        float _609 = ((((1.0 - _600) * (_595 + 2.0)) * exp2(log2(isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0))) * (_595 + 1.0))) + _600) * _560;
        float _611 = ((_500.y + (-0.5)) * 0.5) * _534;
        float _613 = ((_507.y + (-0.5)) * 0.5) * _542;
        float _615 = ((_514.y + (-0.5)) * 0.5) * _549;
        float _616 = dot(vec3(_611, _613, _615), vec3(_611, _613, _615));
        float _621 = (_616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_616);
        float _629 = (dot(vec3(_217, _218, _219), vec3(_621 * _611, _621 * _613, _621 * _615)) + 1.0) * 0.5;
        float _2328 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _638 = sqrt(((_613 * _613) + (_611 * _611)) + (_615 * _615)) / (_561 + 9.9999997473787516355514526367188e-06);
        float _2339 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _639 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
        float _640 = _639 * 2.0;
        float _644 = (1.0 - _639) / (_639 + 1.0);
        float _2350 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _645 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        float _654 = ((((1.0 - _645) * (_640 + 2.0)) * exp2(log2(isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0))) * (_640 + 1.0))) + _645) * _561;
        float _656 = ((_500.z + (-0.5)) * 0.5) * _534;
        float _658 = ((_507.z + (-0.5)) * 0.5) * _542;
        float _660 = ((_514.z + (-0.5)) * 0.5) * _549;
        float _661 = dot(vec3(_656, _658, _660), vec3(_656, _658, _660));
        float _666 = (_661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_661);
        float _674 = (dot(vec3(_217, _218, _219), vec3(_666 * _656, _666 * _658, _666 * _660)) + 1.0) * 0.5;
        float _2361 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _683 = sqrt(((_658 * _658) + (_656 * _656)) + (_660 * _660)) / (_562 + 9.9999997473787516355514526367188e-06);
        float _2372 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        float _685 = _684 * 2.0;
        float _689 = (1.0 - _684) / (_684 + 1.0);
        float _2383 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
        float _699 = ((((1.0 - _690) * (_685 + 2.0)) * exp2(log2(isnan(1.0) ? _2361 : (isnan(_2361) ? 1.0 : min(_2361, 1.0))) * (_685 + 1.0))) + _690) * _562;
        _707 = cbModelParam._m0[36u].z * (isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0)));
        _708 = cbModelParam._m0[36u].z * (isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0)));
        _709 = cbModelParam._m0[36u].z * (isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0)));
    }
    else
    {
        _707 = 0.0;
        _708 = 0.0;
        _709 = 0.0;
    }
    float _1004;
    float _1005;
    float _1006;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _735 = fma(_404, cbModelParam._m0[30u].z, fma(_400, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _396));
        float _739 = fma(_404, cbModelParam._m0[31u].z, fma(_400, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _396));
        float _743 = fma(_404, cbModelParam._m0[32u].z, fma(_400, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _396));
        float _766 = _396 + _217;
        float _767 = _400 + _218;
        float _768 = _404 + _219;
        float _778 = fma(_768, cbModelParam._m0[30u].z, fma(_767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _766)) - _735;
        float _779 = fma(_768, cbModelParam._m0[31u].z, fma(_767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _766)) - _739;
        float _780 = fma(_768, cbModelParam._m0[32u].z, fma(_767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _766)) - _743;
        float _784 = inversesqrt(dot(vec3(_778, _779, _780), vec3(_778, _779, _780)));
        float _797 = ((_784 * _778) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_735 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _798 = ((_784 * _779) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_739 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _799 = ((_784 * _780) / cbModelParam._m0[35u].z) + ((((((_743 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        float _834 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _841 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _848 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _855 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_822.x + (-0.5));
        float _857 = _855 * (_822.y + (-0.5));
        float _858 = _855 * (_822.z + (-0.5));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _863 = ((_801.x + (-0.5)) * 0.5) * _834;
        float _865 = ((_808.x + (-0.5)) * 0.5) * _841;
        float _867 = ((_815.x + (-0.5)) * 0.5) * _848;
        float _868 = dot(vec3(_863, _865, _867), vec3(_863, _865, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _881 = (dot(vec3(_217, _218, _219), vec3(_873 * _863, _873 * _865, _873 * _867)) + 1.0) * 0.5;
        float _2424 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _890 = sqrt(((_865 * _865) + (_863 * _863)) + (_867 * _867)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _2435 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _2435 : (isnan(_2435) ? 1.0 : min(_2435, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _2446 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0))) * (_892 + 1.0))) + _897) * _859;
        float _908 = ((_801.y + (-0.5)) * 0.5) * _834;
        float _910 = ((_808.y + (-0.5)) * 0.5) * _841;
        float _912 = ((_815.y + (-0.5)) * 0.5) * _848;
        float _913 = dot(vec3(_908, _910, _912), vec3(_908, _910, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_217, _218, _219), vec3(_918 * _908, _918 * _910, _918 * _912)) + 1.0) * 0.5;
        float _2457 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_910 * _910) + (_908 * _908)) + (_912 * _912)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _2468 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _2468 : (isnan(_2468) ? 1.0 : min(_2468, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _2479 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _2479 : (isnan(_2479) ? 1.0 : min(_2479, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0))) * (_937 + 1.0))) + _942) * _860;
        float _953 = ((_801.z + (-0.5)) * 0.5) * _834;
        float _955 = ((_808.z + (-0.5)) * 0.5) * _841;
        float _957 = ((_815.z + (-0.5)) * 0.5) * _848;
        float _958 = dot(vec3(_953, _955, _957), vec3(_953, _955, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_217, _218, _219), vec3(_963 * _953, _963 * _955, _963 * _957)) + 1.0) * 0.5;
        float _2490 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_955 * _955) + (_953 * _953)) + (_957 * _957)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _2501 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _2501 : (isnan(_2501) ? 1.0 : min(_2501, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _2512 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _2512 : (isnan(_2512) ? 1.0 : min(_2512, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _2490 : (isnan(_2490) ? 1.0 : min(_2490, 1.0))) * (_982 + 1.0))) + _987) * _861;
        _1004 = cbModelParam._m0[36u].w * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
        _1005 = cbModelParam._m0[36u].w * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1006 = cbModelParam._m0[36u].w * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
    }
    else
    {
        _1004 = 0.0;
        _1005 = 0.0;
        _1006 = 0.0;
    }
    float _1016 = (cbModelParam._m0[1u].x * (_1004 - _707)) + _707;
    float _1017 = (cbModelParam._m0[1u].x * (_1005 - _708)) + _708;
    float _1018 = (cbModelParam._m0[1u].x * (_1006 - _709)) + _709;
    float _1039 = fma(_1018, cbSceneParam._m0[89u].z, fma(_1017, cbSceneParam._m0[89u].y, _1016 * cbSceneParam._m0[89u].x));
    float _1042 = fma(_1018, cbSceneParam._m0[90u].z, fma(_1017, cbSceneParam._m0[90u].y, _1016 * cbSceneParam._m0[90u].x));
    float _1045 = fma(_1018, cbSceneParam._m0[91u].z, fma(_1017, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1016));
    uvec4 _1055 = floatBitsToUint(cbInstanceData._m0[_348 + 5u]);
    uint _1057 = _1055.x * 14u;
    uint _1059 = _1057 + 13u;
    float _1066 = _374 + (-1.0);
    float _1072 = (cbLight._m0[_1059].x * _1066) + 1.0;
    float _1073 = (cbLight._m0[_1059].y * _1066) + 1.0;
    float _1074 = (cbLight._m0[_1059].z * _1066) + 1.0;
    float _1075 = (cbLight._m0[_1059].w * _1066) + 1.0;
    uint _1076 = _1057 + 5u;
    float _1082 = isnan(1.0) ? _1073 : (isnan(_1073) ? 1.0 : min(_1073, 1.0));
    uint _1086 = _1057 + 4u;
    float _1093 = isnan(1.0) ? _1072 : (isnan(_1072) ? 1.0 : min(_1072, 1.0));
    uint _1097 = _1057 | 1u;
    float _1108 = dot(vec3(cbLight._m0[_1057].xyz), vec3(_217, _218, _219));
    float _1111 = dot(vec3(cbLight._m0[_1097].xyz), vec3(_217, _218, _219));
    float _2563 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2574 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1116 = (isnan(1.0) ? _2563 : (isnan(_2563) ? 1.0 : min(_2563, 1.0))) * 0.3183098733425140380859375;
    float _1118 = (isnan(1.0) ? _2574 : (isnan(_2574) ? 1.0 : min(_2574, 1.0))) * 0.3183098733425140380859375;
    float _1125 = ((cbLight._m0[_1076].x * _1082) * _1118) + ((cbLight._m0[_1086].x * _1093) * _1116);
    float _1126 = ((_1082 * cbLight._m0[_1076].y) * _1118) + ((_1093 * cbLight._m0[_1086].y) * _1116);
    float _1127 = ((_1082 * cbLight._m0[_1076].z) * _1118) + ((_1093 * cbLight._m0[_1086].z) * _1116);
    uvec4 _1132 = floatBitsToUint(cbLight._m0[_1057 + 12u]);
    bool _1134 = _1132.x == 0u;
    float _1135;
    float _1137;
    float _1139;
    if (_1134)
    {
        _1135 = _1125;
        _1137 = _1126;
        _1139 = _1127;
    }
    else
    {
        uint _1143 = _1057 + 6u;
        float _1159 = (dot(vec3(cbLight._m0[_1057 + 2u].xyz), vec3(_217, _218, _219)) * 0.5) + 0.5;
        float _1160 = _1159 * _1159;
        float _2585 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _2585 : (isnan(_2585) ? 1.0 : min(_2585, 1.0));
        float _1162 = isnan(1.0) ? _1074 : (isnan(_1074) ? 1.0 : min(_1074, 1.0));
        _1135 = (((cbLight._m0[_1143].x * 0.3183098733425140380859375) * _1161) * _1162) + _1125;
        _1137 = (((cbLight._m0[_1143].y * 0.3183098733425140380859375) * _1161) * _1162) + _1126;
        _1139 = (((cbLight._m0[_1143].z * 0.3183098733425140380859375) * _1161) * _1162) + _1127;
    }
    bool _1142 = _1132.y == 0u;
    float _1172;
    float _1174;
    float _1176;
    if (_1142)
    {
        _1172 = _1135;
        _1174 = _1137;
        _1176 = _1139;
    }
    else
    {
        uint _1274 = _1057 + 7u;
        float _1290 = (dot(vec3(cbLight._m0[_1057 + 3u].xyz), vec3(_217, _218, _219)) * 0.5) + 0.5;
        float _1291 = _1290 * _1290;
        float _2601 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _2601 : (isnan(_2601) ? 1.0 : min(_2601, 1.0));
        float _1293 = isnan(1.0) ? _1075 : (isnan(_1075) ? 1.0 : min(_1075, 1.0));
        _1172 = (((cbLight._m0[_1274].x * 0.3183098733425140380859375) * _1292) * _1293) + _1135;
        _1174 = (((cbLight._m0[_1274].y * 0.3183098733425140380859375) * _1292) * _1293) + _1137;
        _1176 = (((cbLight._m0[_1274].z * 0.3183098733425140380859375) * _1292) * _1293) + _1139;
    }
    uint _1178 = _1057 + 8u;
    float _1184 = cbLight._m0[_1057].x + _299;
    float _1185 = cbLight._m0[_1057].y + _300;
    float _1186 = cbLight._m0[_1057].z + _301;
    float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
    float _1194 = dot(vec3(_217, _218, _219), vec3(cbLight._m0[_1057].xyz));
    float _2617 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _1197 = isnan(1.0) ? _2617 : (isnan(_2617) ? 1.0 : min(_2617, 1.0));
    float _1198 = dot(vec3(_217, _218, _219), vec3(_299, _300, _301));
    float _2628 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _1201 = isnan(1.0) ? _2628 : (isnan(_2628) ? 1.0 : min(_2628, 1.0));
    float _1202 = dot(vec3(cbLight._m0[_1057].xyz), vec3(_1184 * _1190, _1185 * _1190, _1186 * _1190));
    float _2639 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _1210 = exp2(log2(1.0 - (isnan(1.0) ? _2639 : (isnan(_2639) ? 1.0 : min(_2639, 1.0)))) * 5.0);
    float _1215 = (0.5 / ((_1197 + 9.9999999392252902907785028219223e-09) + _1201)) * _1197;
    float _2650 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _1217 = (isnan(1.0) ? _2650 : (isnan(_2650) ? 1.0 : min(_2650, 1.0))) * 0.31831014156341552734375;
    uint _1228 = _1057 + 9u;
    float _1234 = cbLight._m0[_1097].x + _299;
    float _1235 = cbLight._m0[_1097].y + _300;
    float _1236 = cbLight._m0[_1097].z + _301;
    float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
    float _1244 = dot(vec3(_217, _218, _219), vec3(cbLight._m0[_1097].xyz));
    float _2661 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    float _1247 = isnan(1.0) ? _2661 : (isnan(_2661) ? 1.0 : min(_2661, 1.0));
    float _1248 = dot(vec3(cbLight._m0[_1097].xyz), vec3(_1234 * _1240, _1235 * _1240, _1236 * _1240));
    float _2672 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
    float _1255 = exp2(log2(1.0 - (isnan(1.0) ? _2672 : (isnan(_2672) ? 1.0 : min(_2672, 1.0)))) * 5.0);
    float _1259 = (0.5 / ((_1247 + 9.9999999392252902907785028219223e-09) + _1201)) * _1247;
    float _2683 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
    float _1261 = (isnan(1.0) ? _2683 : (isnan(_2683) ? 1.0 : min(_2683, 1.0))) * 0.31831014156341552734375;
    float _1271 = (((_1255 * cbLight._m0[_1228].x) * _1261) * _1082) + (((_1210 * cbLight._m0[_1178].x) * _1217) * _1093);
    float _1272 = (((_1255 * cbLight._m0[_1228].y) * _1261) * _1082) + (((_1210 * cbLight._m0[_1178].y) * _1217) * _1093);
    float _1273 = (((_1255 * cbLight._m0[_1228].z) * _1261) * _1082) + (((_1210 * cbLight._m0[_1178].z) * _1217) * _1093);
    float _1303;
    float _1305;
    float _1307;
    if (_1134)
    {
        _1303 = _1271;
        _1305 = _1272;
        _1307 = _1273;
    }
    else
    {
        uint _1309 = _1057 + 10u;
        uint _1315 = _1057 + 2u;
        float _1321 = cbLight._m0[_1315].x + _299;
        float _1322 = cbLight._m0[_1315].y + _300;
        float _1323 = cbLight._m0[_1315].z + _301;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1331 = dot(vec3(_217, _218, _219), vec3(cbLight._m0[_1315].xyz));
        float _2694 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1334 = isnan(1.0) ? _2694 : (isnan(_2694) ? 1.0 : min(_2694, 1.0));
        float _1335 = dot(vec3(cbLight._m0[_1315].xyz), vec3(_1321 * _1327, _1322 * _1327, _1323 * _1327));
        float _2705 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1342 = exp2(log2(1.0 - (isnan(1.0) ? _2705 : (isnan(_2705) ? 1.0 : min(_2705, 1.0)))) * 5.0);
        float _1346 = (0.5 / ((_1334 + 9.9999999392252902907785028219223e-09) + _1201)) * _1334;
        float _2716 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1348 = (isnan(1.0) ? _2716 : (isnan(_2716) ? 1.0 : min(_2716, 1.0))) * 0.31831014156341552734375;
        float _1349 = isnan(1.0) ? _1074 : (isnan(_1074) ? 1.0 : min(_1074, 1.0));
        _1303 = (((_1342 * cbLight._m0[_1309].x) * _1348) * _1349) + _1271;
        _1305 = (((_1342 * cbLight._m0[_1309].y) * _1348) * _1349) + _1272;
        _1307 = (((_1342 * cbLight._m0[_1309].z) * _1348) * _1349) + _1273;
    }
    float _1359;
    float _1361;
    float _1363;
    if (_1142)
    {
        _1359 = _1303;
        _1361 = _1305;
        _1363 = _1307;
    }
    else
    {
        uint _1370 = _1057 + 11u;
        uint _1376 = _1057 + 3u;
        float _1382 = cbLight._m0[_1376].x + _299;
        float _1383 = cbLight._m0[_1376].y + _300;
        float _1384 = cbLight._m0[_1376].z + _301;
        float _1388 = inversesqrt(dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384)));
        float _1392 = dot(vec3(_217, _218, _219), vec3(cbLight._m0[_1376].xyz));
        float _2732 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1395 = isnan(1.0) ? _2732 : (isnan(_2732) ? 1.0 : min(_2732, 1.0));
        float _1396 = dot(vec3(cbLight._m0[_1376].xyz), vec3(_1382 * _1388, _1383 * _1388, _1384 * _1388));
        float _2743 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1403 = exp2(log2(1.0 - (isnan(1.0) ? _2743 : (isnan(_2743) ? 1.0 : min(_2743, 1.0)))) * 5.0);
        float _1407 = (0.5 / ((_1395 + 9.9999999392252902907785028219223e-09) + _1201)) * _1395;
        float _2754 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1409 = (isnan(1.0) ? _2754 : (isnan(_2754) ? 1.0 : min(_2754, 1.0))) * 0.31831014156341552734375;
        float _1410 = isnan(1.0) ? _1075 : (isnan(_1075) ? 1.0 : min(_1075, 1.0));
        _1359 = (((_1403 * cbLight._m0[_1370].x) * _1409) * _1410) + _1303;
        _1361 = (((_1403 * cbLight._m0[_1370].y) * _1409) * _1410) + _1305;
        _1363 = (((_1403 * cbLight._m0[_1370].z) * _1409) * _1410) + _1307;
    }
    float _1519;
    float _1521;
    float _1523;
    if (_1055.y == 0u)
    {
        float _1460 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1461 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1460;
        float _1462 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1460;
        float _1463 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1460;
        uvec4 _1475 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1476 = _1475.x;
        uint _1487 = uint((float(_1475.y) * floor(float(uint(cbSceneParam._m0[85u].y * _308) / _1476))) + floor(float(uint(cbSceneParam._m0[85u].x * _307) / _1476)));
        float _1497 = (log2(_1463 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1498 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        uint _1501 = uint(isnan(14.0) ? _1498 : (isnan(_1498) ? 14.0 : min(_1498, 14.0)));
        uvec4 _1506 = texelFetch(g_lightClusterGridBuffer, int(((_1501 << 2u) + (_1487 << 6u)) >> 2u));
        uint _1507 = _1506.x;
        uint _1508 = _1475.z;
        float _1608;
        float _1610;
        float _1612;
        if (((((1u << ((_1508 >> 4u) & 15u)) + 4294967295u) & _1507) == 0u) || ((_1508 & 240u) == 0u))
        {
            _1608 = 0.0;
            _1610 = 0.0;
            _1612 = 0.0;
        }
        else
        {
            float _1609;
            float _1611;
            float _1613;
            float _1738 = 0.0;
            float _1739 = 0.0;
            float _1740 = 0.0;
            uint _1741 = 0u;
            uint _1750;
            bool _1751;
            for (;;)
            {
                _1750 = texelFetch(g_lightClassification, int((((_1501 << 5u) + (_1487 << 9u)) + (_1741 << 2u)) >> 2u)).x;
                _1751 = _1750 == 0u;
                float frontier_phi_27_pred;
                float frontier_phi_27_pred_1;
                float frontier_phi_27_pred_2;
                if (_1751)
                {
                    frontier_phi_27_pred = _1739;
                    frontier_phi_27_pred_1 = _1740;
                    frontier_phi_27_pred_2 = _1738;
                }
                else
                {
                    float _1853;
                    float _1854;
                    float _1855;
                    uint _1856;
                    _1853 = _1738;
                    _1854 = _1739;
                    _1855 = _1740;
                    _1856 = _1750;
                    float _1791;
                    float _1792;
                    float _1793;
                    for (;;)
                    {
                        uint _1860 = uint(findLSB(_1856)) + (_1741 << 5u);
                        uint _1857 = (_1856 + 4294967295u) & _1856;
                        uint _1862 = _1860 * 48u;
                        vec4 _1876 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1862)).x, texelFetch(g_PointLightRenderingBuffer, int(_1862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1862 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1862 + 3u)).x));
                        uint _1882 = (_1860 * 48u) + 4u;
                        vec4 _1895 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1882)).x, texelFetch(g_PointLightRenderingBuffer, int(_1882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1882 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1882 + 3u)).x));
                        float _1900 = _1876.x - _1461;
                        float _1901 = _1876.y - _1462;
                        float _1902 = _1876.z - _1463;
                        float _1903 = dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902));
                        float _1906 = inversesqrt(_1903);
                        float _1915 = 1.0 - (_1903 * _1876.w);
                        float _2780 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
                        float _1917 = sqrt(_1903) * _1895.w;
                        float _1920 = 1.39999997615814208984375 / (_1917 + 1.39999997615814208984375);
                        float _1921 = _1920 * _1920;
                        float _1924 = ((1.0 - _1921) * dot(vec3(_329, _332, _335), vec3(_1906 * _1900, _1906 * _1901, _1906 * _1902))) + _1921;
                        float _1931 = ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * (isnan(1.0) ? _2780 : (isnan(_2780) ? 1.0 : min(_2780, 1.0)))) / (((_1917 * _1917) * 0.699999988079071044921875) + 1.0);
                        _1791 = (_1931 * _1895.x) + _1853;
                        _1792 = (_1931 * _1895.y) + _1854;
                        _1793 = (_1931 * _1895.z) + _1855;
                        if (_1857 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1853 = _1791;
                            _1854 = _1792;
                            _1855 = _1793;
                            _1856 = _1857;
                        }
                    }
                    frontier_phi_27_pred = _1792;
                    frontier_phi_27_pred_1 = _1793;
                    frontier_phi_27_pred_2 = _1791;
                }
                _1611 = frontier_phi_27_pred;
                _1613 = frontier_phi_27_pred_1;
                _1609 = frontier_phi_27_pred_2;
                uint _1742 = _1741 + 1u;
                if (_1742 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1738 = _1609;
                    _1739 = _1611;
                    _1740 = _1613;
                    _1741 = _1742;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1608 = _1609;
            _1610 = _1611;
            _1612 = _1613;
        }
        uvec4 _1616 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1617 = _1616.z;
        uint _1619 = (_1617 >> 8u) & 15u;
        float _1725;
        float _1727;
        float _1729;
        if (((4294967295u << _1619) & _1507) == 0u)
        {
            _1725 = _1608;
            _1727 = _1610;
            _1729 = _1612;
        }
        else
        {
            float frontier_phi_21_22_ladder;
            float frontier_phi_21_22_ladder_1;
            float frontier_phi_21_22_ladder_2;
            if (_1619 < ((_1617 >> 12u) & 15u))
            {
                float _1726;
                float _1728;
                float _1730;
                float _1839 = _1608;
                float _1840 = _1610;
                float _1841 = _1612;
                uint _1842 = _1619;
                uint _1851;
                bool _1852;
                for (;;)
                {
                    _1851 = texelFetch(g_lightClassification, int((((_1501 << 5u) + (_1487 << 9u)) + (_1842 << 2u)) >> 2u)).x;
                    _1852 = _1851 == 0u;
                    float frontier_phi_33_pred;
                    float frontier_phi_33_pred_1;
                    float frontier_phi_33_pred_2;
                    if (_1852)
                    {
                        frontier_phi_33_pred = _1841;
                        frontier_phi_33_pred_1 = _1840;
                        frontier_phi_33_pred_2 = _1839;
                    }
                    else
                    {
                        float _1936;
                        float _1937;
                        float _1938;
                        float _2138;
                        float _2139;
                        float _2140;
                        float _1946 = _1839;
                        float _1947 = _1840;
                        float _1948 = _1841;
                        uint _1949 = _1851;
                        uint _1950;
                        vec4 _1976;
                        float _1977;
                        vec4 _1992;
                        vec4 _2008;
                        vec4 _2024;
                        float _2071;
                        bool _2072;
                        for (;;)
                        {
                            uint _1960 = ((_1842 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1949));
                            _1950 = (_1949 + 4294967295u) & _1949;
                            uint _1962 = _1960 * 40u;
                            _1976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1962 + 3u)).x));
                            _1977 = _1976.w;
                            uint _1979 = (_1960 * 40u) + 4u;
                            _1992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1979 + 3u)).x));
                            uint _1995 = (_1960 * 40u) + 16u;
                            _2008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 3u)).x));
                            uint _2011 = (_1960 * 40u) + 20u;
                            _2024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2011 + 3u)).x));
                            uint _2027 = (_1960 * 40u) + 24u;
                            vec4 _2040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2027 + 3u)).x));
                            uint _2046 = (_1960 * 40u) + 28u;
                            vec4 _2059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2046 + 3u)).x));
                            _2071 = fma(_1463, _2059.z, fma(_1462, _2059.y, _2059.x * _1461)) + _2059.w;
                            _2072 = !((fma(_1463, _2040.z, fma(_1462, _2040.y, _2040.x * _1461)) + _2040.w) <= 0.0);
                            float frontier_phi_39_pred;
                            float frontier_phi_39_pred_1;
                            float frontier_phi_39_pred_2;
                            if (_2072)
                            {
                                float _2096 = _1976.x - _1461;
                                float _2097 = _1976.y - _1462;
                                float _2098 = _1976.z - _1463;
                                float _2099 = dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098));
                                float _2102 = inversesqrt(_2099);
                                float _2109 = 1.0 - (_2099 / (_1977 * _1977));
                                float _2796 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
                                float _2114 = sqrt(_2099) * _1992.w;
                                float _2116 = 1.39999997615814208984375 / (_2114 + 1.39999997615814208984375);
                                float _2117 = _2116 * _2116;
                                float _2120 = ((1.0 - _2117) * dot(vec3(_2102 * _2096, _2102 * _2097, _2102 * _2098), vec3(_329, _332, _335))) + _2117;
                                float _2127 = (fma(_1463, _2008.z, fma(_1462, _2008.y, _2008.x * _1461)) + _2008.w) / _2071;
                                float _2128 = (fma(_1463, _2024.z, fma(_1462, _2024.y, _2024.x * _1461)) + _2024.w) / _2071;
                                float _2132 = 1.0 - dot(vec2(_2127, _2128), vec2(_2127, _2128));
                                float _2812 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
                                float _2134 = (isnan(1.0) ? _2812 : (isnan(_2812) ? 1.0 : min(_2812, 1.0))) * (((isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0))) * (isnan(1.0) ? _2796 : (isnan(_2796) ? 1.0 : min(_2796, 1.0)))) / (((_2114 * _2114) * 0.699999988079071044921875) + 1.0));
                                frontier_phi_39_pred = _2134 * _1992.z;
                                frontier_phi_39_pred_1 = _2134 * _1992.y;
                                frontier_phi_39_pred_2 = _2134 * _1992.x;
                            }
                            else
                            {
                                frontier_phi_39_pred = 0.0;
                                frontier_phi_39_pred_1 = 0.0;
                                frontier_phi_39_pred_2 = 0.0;
                            }
                            _2140 = frontier_phi_39_pred;
                            _2139 = frontier_phi_39_pred_1;
                            _2138 = frontier_phi_39_pred_2;
                            _1936 = _2138 + _1946;
                            _1937 = _2139 + _1947;
                            _1938 = _2140 + _1948;
                            if (_1950 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1946 = _1936;
                                _1947 = _1937;
                                _1948 = _1938;
                                _1949 = _1950;
                                continue;
                            }
                        }
                        frontier_phi_33_pred = _1938;
                        frontier_phi_33_pred_1 = _1937;
                        frontier_phi_33_pred_2 = _1936;
                    }
                    _1730 = frontier_phi_33_pred;
                    _1728 = frontier_phi_33_pred_1;
                    _1726 = frontier_phi_33_pred_2;
                    uint _1843 = _1842 + 1u;
                    if (_1843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1839 = _1726;
                        _1840 = _1728;
                        _1841 = _1730;
                        _1842 = _1843;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_21_22_ladder = _1730;
                frontier_phi_21_22_ladder_1 = _1728;
                frontier_phi_21_22_ladder_2 = _1726;
            }
            else
            {
                frontier_phi_21_22_ladder = _1612;
                frontier_phi_21_22_ladder_1 = _1610;
                frontier_phi_21_22_ladder_2 = _1608;
            }
            _1725 = frontier_phi_21_22_ladder_2;
            _1727 = frontier_phi_21_22_ladder_1;
            _1729 = frontier_phi_21_22_ladder;
        }
        float _1731 = isnan(1.0) ? _374 : (isnan(_374) ? 1.0 : min(_374, 1.0));
        _1519 = (_1731 * _1725) + _1172;
        _1521 = (_1731 * _1727) + _1174;
        _1523 = (_1731 * _1729) + _1176;
    }
    else
    {
        _1519 = _1172;
        _1521 = _1174;
        _1523 = _1176;
    }
    uint _1529 = _350 + uint(cbMatDynParam._m0[0u].w);
    float _1535 = (_205.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1529].x;
    float _1536 = (_205.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1529].y;
    float _1537 = (_205.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1529].z;
    float _2828 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _2839 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _2850 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _2861 = isnan(0.0) ? _224 : (isnan(_224) ? 0.0 : max(_224, 0.0));
    float _1552 = (((isnan(1.0) ? _2828 : (isnan(_2828) ? 1.0 : min(_2828, 1.0))) * (_1519 + ((isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0))) * _374))) + (cbPerFrame._m0[3u].x * _1359)) + _1535;
    float _1554 = (_1536 + (cbPerFrame._m0[3u].x * _1361)) + ((isnan(1.0) ? _2839 : (isnan(_2839) ? 1.0 : min(_2839, 1.0))) * (_1521 + ((isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0))) * _374)));
    float _1556 = (_1537 + (cbPerFrame._m0[3u].x * _1363)) + ((isnan(1.0) ? _2850 : (isnan(_2850) ? 1.0 : min(_2850, 1.0))) * (_1523 + ((isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0))) * _374)));
    float _2887 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1569 = isnan(1.0) ? _2887 : (isnan(_2887) ? 1.0 : min(_2887, 1.0));
    float _1574 = cbInstanceData._m0[_348 + 6u].w * (isnan(1.0) ? _2861 : (isnan(_2861) ? 1.0 : min(_2861, 1.0)));
    float _1579 = _307 / cbSceneParam._m0[86u].x;
    float _1580 = _308 / cbSceneParam._m0[86u].y;
    vec4 _1594 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1579, _1580, (log2((isnan(cbSceneParam._m0[77u].w) ? _240 : (isnan(_240) ? cbSceneParam._m0[77u].w : min(_240, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1596 = _1594.x;
    float _1597 = _1594.y;
    float _1598 = _1594.z;
    float _1599 = _1594.w;
    float _1665;
    float _1667;
    float _1669;
    float _1671;
    if (_240 > cbSceneParam._m0[78u].w)
    {
        float _1627 = isnan(_240) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _240 : min(cbSceneParam._m0[80u].w, _240));
        float _1628 = _1627 / _240;
        float _1639 = _1628 * _292;
        float _1640 = _293 * _1628;
        float _1641 = (-0.0) - _1640;
        float _1642 = _1628 * _294;
        float _1644 = (cbSceneParam._m0[77u].w * _1641) / _1627;
        float _1645 = _1644 + cbSceneParam._m0[79u].w;
        float _1646 = cbSceneParam._m0[79u].w - _1640;
        float _1652 = sqrt(((_1639 * _1639) + (_1640 * _1640)) + (_1642 * _1642));
        float _1655 = (1.0 - (cbSceneParam._m0[77u].w / _1627)) * _1652;
        float _1661 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1663 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1801;
        if (abs((_1641 - _1644) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1801 = ((((_1645 > 0.0) ? exp2(_1661 * _1645) : (2.0 - exp2(_1663 * _1645))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1655;
        }
        else
        {
            float _1764 = 1.0 / cbSceneParam._m0[80u].x;
            float _1765 = isnan(_1646) ? _1645 : (isnan(_1645) ? _1646 : max(_1645, _1646));
            float _1766 = isnan(_1646) ? _1645 : (isnan(_1645) ? _1646 : min(_1645, _1646));
            float _1775 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : min(_1765, 0.0));
            float _1776 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : min(_1766, 0.0));
            _1801 = ((abs(_1652 / _1641) * cbSceneParam._m0[80u].y) * ((((_1775 - _1776) * 2.0) - ((exp2(_1661 * (isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)))) - exp2(_1661 * (isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))))) * _1764)) - ((exp2(_1663 * _1775) - exp2(_1663 * _1776)) * _1764))) + (_1655 * cbSceneParam._m0[80u].z);
        }
        vec4 _1803 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1579, _1580, 1.0), 0.0);
        float _1812 = exp2((_1801 * (-1.44269502162933349609375)) * (1.0 - _1803.w));
        float _1813 = log2(_1812);
        float _1829 = log2(_1599);
        _1665 = (exp2(_1829 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1813 * cbSceneParam._m0[78u].x)) * _1803.x) / cbSceneParam._m0[78u].x)) + _1596;
        _1667 = (exp2(_1829 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1813 * cbSceneParam._m0[78u].y)) * _1803.y) / cbSceneParam._m0[78u].y)) + _1597;
        _1669 = (exp2(_1829 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1813 * cbSceneParam._m0[78u].z)) * _1803.z) / cbSceneParam._m0[78u].z)) + _1598;
        _1671 = _1812 * _1599;
    }
    else
    {
        _1665 = _1596;
        _1667 = _1597;
        _1669 = _1598;
        _1671 = _1599;
    }
    float _1683 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1684 = _1683 == 3.0;
    float _1686 = log2(_1671);
    float _1690 = exp2(_1686 * cbSceneParam._m0[78u].x);
    float _1691 = exp2(_1686 * cbSceneParam._m0[78u].y);
    float _1692 = exp2(_1686 * cbSceneParam._m0[78u].z);
    float _1693 = _1690 * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
    float _1694 = _1691 * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
    float _1695 = _1692 * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    float _1704 = (_1683 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1704 * (_1684 ? _1693 : (_1693 + (cbSceneParam._m0[72u].w * _1665)));
    SV_Target.y = _1704 * (_1684 ? _1694 : (_1694 + (cbSceneParam._m0[72u].w * _1667)));
    SV_Target.z = _1704 * (_1684 ? _1695 : (_1695 + (cbSceneParam._m0[72u].w * _1669)));
    SV_Target.w = _1574;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1535) * _1569) * _1690) * _1704;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1536) * _1569) * _1691) * _1704;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1537) * _1569) * _1692) * _1704;
    SV_Target_1.w = _1574;
}


