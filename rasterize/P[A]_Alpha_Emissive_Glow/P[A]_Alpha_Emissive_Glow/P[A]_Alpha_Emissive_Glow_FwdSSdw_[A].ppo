#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_A_Alpha_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D P_A_Alpha_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _2329;
float _2330;
float _2331;
float _2332;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    float _172;
    float _173;
    float _174;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _172 = (-0.0) - _165;
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
    }
    else
    {
        _172 = _165;
        _173 = _166;
        _174 = _167;
    }
    vec4 _188 = texture(sampler2D(P_A_Alpha_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _191 = _188.x;
    float _192 = _188.y;
    float _193 = _188.z;
    float _194 = _188.w;
    float _195 = _194 * TEXCOORD_1.z;
    vec4 _211 = texture(sampler2D(P_A_Alpha_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _222 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _223 = _222 * _172;
    float _224 = _222 * _173;
    float _225 = _222 * _174;
    float _2341 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _2352 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _2363 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _2374 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _230 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
    float _246 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _288 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _298 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _288);
    float _299 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _288);
    float _300 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _288);
    float _304 = inversesqrt(dot(vec3(_298, _299, _300), vec3(_298, _299, _300)));
    float _305 = _298 * _304;
    float _306 = _299 * _304;
    float _307 = _300 * _304;
    vec4 _312 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _314 = _312.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _433 = sqrt(((_298 * _298) + (_299 * _299)) + (_300 * _300));
        float _439 = (cbMatDynParam._m0[5u].x * _433) + cbMatDynParam._m0[5u].y;
        float _2385 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
        float _440 = isnan(1.0) ? _2385 : (isnan(_2385) ? 1.0 : min(_2385, 1.0));
        float _444 = (cbMatDynParam._m0[5u].z * _433) + cbMatDynParam._m0[5u].w;
        float _2396 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0))) - _440)) + _440) < ((_314 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _326 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _327 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _347 = fma(_225, cbSceneParam._m0[5u].z, fma(_224, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _223));
    float _350 = fma(_225, cbSceneParam._m0[6u].z, fma(_224, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _223));
    float _353 = fma(_225, cbSceneParam._m0[7u].z, fma(_224, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _223));
    uint _366 = uint(roundEven(NORMAL.w)) * 13u;
    uint _368 = _366 + 9u;
    uint _369 = _368 + uint(cbMatDynParam._m0[0u].w);
    float _375 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0)))) * cbInstanceData._m0[_369].x;
    float _376 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0)))) * cbInstanceData._m0[_369].y;
    float _377 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0)))) * cbInstanceData._m0[_369].z;
    float _2407 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _378 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
    float _2418 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _379 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
    float _2429 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _380 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
    vec4 _389 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _326, cbSceneParam._m0[86u].y * _327));
    float _392 = _389.x * TEXCOORD_1.w;
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _422 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _754;
    float _755;
    float _756;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _478 = fma(_422, cbModelParam._m0[26u].z, fma(_418, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _414));
        float _482 = fma(_422, cbModelParam._m0[27u].z, fma(_418, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _414));
        float _486 = fma(_422, cbModelParam._m0[28u].z, fma(_418, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _414));
        float _511 = _414 + _223;
        float _512 = _418 + _224;
        float _513 = _422 + _225;
        float _523 = fma(_513, cbModelParam._m0[26u].z, fma(_512, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _511)) - _478;
        float _524 = fma(_513, cbModelParam._m0[27u].z, fma(_512, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _511)) - _482;
        float _525 = fma(_513, cbModelParam._m0[28u].z, fma(_512, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _511)) - _486;
        float _529 = inversesqrt(dot(vec3(_523, _524, _525), vec3(_523, _524, _525)));
        float _542 = ((_529 * _523) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_478 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _543 = ((_529 * _524) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_482 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _544 = ((_529 * _525) / cbModelParam._m0[34u].z) + ((((((_486 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _547 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_542, _543, _544), 0.0);
        vec4 _554 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_542, _543, _544), 0.0);
        vec4 _561 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_542, _543, _544), 0.0);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_542, _543, _544), 0.0);
        float _581 = exp2((_547.w + (-0.5)) * 20.0) * 2.0;
        float _589 = exp2((_554.w + (-0.5)) * 20.0) * 2.0;
        float _596 = exp2((_561.w + (-0.5)) * 20.0) * 2.0;
        float _603 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _604 = _603 * (_568.x + (-0.5));
        float _605 = _603 * (_568.y + (-0.5));
        float _606 = _603 * (_568.z + (-0.5));
        float _607 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        float _608 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _609 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        float _611 = ((_547.x + (-0.5)) * 0.5) * _581;
        float _613 = ((_554.x + (-0.5)) * 0.5) * _589;
        float _615 = ((_561.x + (-0.5)) * 0.5) * _596;
        float _616 = dot(vec3(_611, _613, _615), vec3(_611, _613, _615));
        float _621 = (_616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_616);
        float _630 = (dot(vec3(_223, _224, _225), vec3(_621 * _611, _621 * _613, _621 * _615)) + 1.0) * 0.5;
        float _2455 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _640 = sqrt(((_613 * _613) + (_611 * _611)) + (_615 * _615)) / (_607 + 9.9999997473787516355514526367188e-06);
        float _2466 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _641 = isnan(1.0) ? _2466 : (isnan(_2466) ? 1.0 : min(_2466, 1.0));
        float _642 = _641 * 2.0;
        float _646 = (1.0 - _641) / (_641 + 1.0);
        float _2477 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _647 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
        float _656 = ((((1.0 - _647) * (_642 + 2.0)) * exp2(log2(isnan(1.0) ? _2455 : (isnan(_2455) ? 1.0 : min(_2455, 1.0))) * (_642 + 1.0))) + _647) * _607;
        float _658 = ((_547.y + (-0.5)) * 0.5) * _581;
        float _660 = ((_554.y + (-0.5)) * 0.5) * _589;
        float _662 = ((_561.y + (-0.5)) * 0.5) * _596;
        float _663 = dot(vec3(_658, _660, _662), vec3(_658, _660, _662));
        float _668 = (_663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_663);
        float _676 = (dot(vec3(_223, _224, _225), vec3(_668 * _658, _668 * _660, _668 * _662)) + 1.0) * 0.5;
        float _2488 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _685 = sqrt(((_660 * _660) + (_658 * _658)) + (_662 * _662)) / (_608 + 9.9999997473787516355514526367188e-06);
        float _2499 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _2499 : (isnan(_2499) ? 1.0 : min(_2499, 1.0));
        float _687 = _686 * 2.0;
        float _691 = (1.0 - _686) / (_686 + 1.0);
        float _2510 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _2510 : (isnan(_2510) ? 1.0 : min(_2510, 1.0));
        float _701 = ((((1.0 - _692) * (_687 + 2.0)) * exp2(log2(isnan(1.0) ? _2488 : (isnan(_2488) ? 1.0 : min(_2488, 1.0))) * (_687 + 1.0))) + _692) * _608;
        float _703 = ((_547.z + (-0.5)) * 0.5) * _581;
        float _705 = ((_554.z + (-0.5)) * 0.5) * _589;
        float _707 = ((_561.z + (-0.5)) * 0.5) * _596;
        float _708 = dot(vec3(_703, _705, _707), vec3(_703, _705, _707));
        float _713 = (_708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_708);
        float _721 = (dot(vec3(_223, _224, _225), vec3(_713 * _703, _713 * _705, _713 * _707)) + 1.0) * 0.5;
        float _2521 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _730 = sqrt(((_705 * _705) + (_703 * _703)) + (_707 * _707)) / (_609 + 9.9999997473787516355514526367188e-06);
        float _2532 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _2532 : (isnan(_2532) ? 1.0 : min(_2532, 1.0));
        float _732 = _731 * 2.0;
        float _736 = (1.0 - _731) / (_731 + 1.0);
        float _2543 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _2543 : (isnan(_2543) ? 1.0 : min(_2543, 1.0));
        float _746 = ((((1.0 - _737) * (_732 + 2.0)) * exp2(log2(isnan(1.0) ? _2521 : (isnan(_2521) ? 1.0 : min(_2521, 1.0))) * (_732 + 1.0))) + _737) * _609;
        _754 = cbModelParam._m0[36u].z * (isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0)));
        _755 = cbModelParam._m0[36u].z * (isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0)));
        _756 = cbModelParam._m0[36u].z * (isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0)));
    }
    else
    {
        _754 = 0.0;
        _755 = 0.0;
        _756 = 0.0;
    }
    float _1054;
    float _1055;
    float _1056;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _785 = fma(_422, cbModelParam._m0[30u].z, fma(_418, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _414));
        float _789 = fma(_422, cbModelParam._m0[31u].z, fma(_418, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _414));
        float _793 = fma(_422, cbModelParam._m0[32u].z, fma(_418, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _414));
        float _816 = _414 + _223;
        float _817 = _418 + _224;
        float _818 = _422 + _225;
        float _828 = fma(_818, cbModelParam._m0[30u].z, fma(_817, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _816)) - _785;
        float _829 = fma(_818, cbModelParam._m0[31u].z, fma(_817, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _816)) - _789;
        float _830 = fma(_818, cbModelParam._m0[32u].z, fma(_817, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _816)) - _793;
        float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
        float _847 = ((_834 * _828) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_785 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_834 * _829) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_789 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_834 * _830) / cbModelParam._m0[35u].z) + ((((((_793 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        float _884 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _891 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _898 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _905 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_872.x + (-0.5));
        float _907 = _905 * (_872.y + (-0.5));
        float _908 = _905 * (_872.z + (-0.5));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _913 = ((_851.x + (-0.5)) * 0.5) * _884;
        float _915 = ((_858.x + (-0.5)) * 0.5) * _891;
        float _917 = ((_865.x + (-0.5)) * 0.5) * _898;
        float _918 = dot(vec3(_913, _915, _917), vec3(_913, _915, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_223, _224, _225), vec3(_923 * _913, _923 * _915, _923 * _917)) + 1.0) * 0.5;
        float _2584 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_915 * _915) + (_913 * _913)) + (_917 * _917)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _2595 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _2595 : (isnan(_2595) ? 1.0 : min(_2595, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _2606 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _2606 : (isnan(_2606) ? 1.0 : min(_2606, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _2584 : (isnan(_2584) ? 1.0 : min(_2584, 1.0))) * (_942 + 1.0))) + _947) * _909;
        float _958 = ((_851.y + (-0.5)) * 0.5) * _884;
        float _960 = ((_858.y + (-0.5)) * 0.5) * _891;
        float _962 = ((_865.y + (-0.5)) * 0.5) * _898;
        float _963 = dot(vec3(_958, _960, _962), vec3(_958, _960, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_223, _224, _225), vec3(_968 * _958, _968 * _960, _968 * _962)) + 1.0) * 0.5;
        float _2617 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_960 * _960) + (_958 * _958)) + (_962 * _962)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _2628 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _2628 : (isnan(_2628) ? 1.0 : min(_2628, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _2639 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _2639 : (isnan(_2639) ? 1.0 : min(_2639, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _2617 : (isnan(_2617) ? 1.0 : min(_2617, 1.0))) * (_987 + 1.0))) + _992) * _910;
        float _1003 = ((_851.z + (-0.5)) * 0.5) * _884;
        float _1005 = ((_858.z + (-0.5)) * 0.5) * _891;
        float _1007 = ((_865.z + (-0.5)) * 0.5) * _898;
        float _1008 = dot(vec3(_1003, _1005, _1007), vec3(_1003, _1005, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_223, _224, _225), vec3(_1013 * _1003, _1013 * _1005, _1013 * _1007)) + 1.0) * 0.5;
        float _2650 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1005 * _1005) + (_1003 * _1003)) + (_1007 * _1007)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _2661 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _2661 : (isnan(_2661) ? 1.0 : min(_2661, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _2672 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _2672 : (isnan(_2672) ? 1.0 : min(_2672, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _2650 : (isnan(_2650) ? 1.0 : min(_2650, 1.0))) * (_1032 + 1.0))) + _1037) * _911;
        _1054 = cbModelParam._m0[36u].w * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1055 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1056 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
    }
    else
    {
        _1054 = 0.0;
        _1055 = 0.0;
        _1056 = 0.0;
    }
    float _1066 = (cbModelParam._m0[1u].x * (_1054 - _754)) + _754;
    float _1067 = (cbModelParam._m0[1u].x * (_1055 - _755)) + _755;
    float _1068 = (cbModelParam._m0[1u].x * (_1056 - _756)) + _756;
    float _1089 = fma(_1068, cbSceneParam._m0[89u].z, fma(_1067, cbSceneParam._m0[89u].y, _1066 * cbSceneParam._m0[89u].x));
    float _1092 = fma(_1068, cbSceneParam._m0[90u].z, fma(_1067, cbSceneParam._m0[90u].y, _1066 * cbSceneParam._m0[90u].x));
    float _1095 = fma(_1068, cbSceneParam._m0[91u].z, fma(_1067, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1066));
    vec4 _1103 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_326, _327));
    float _1105 = _1103.w;
    float _1117 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1105);
    float _1118 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1105);
    float _1119 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1105);
    uvec4 _1123 = floatBitsToUint(cbInstanceData._m0[_366 + 5u]);
    uint _1125 = _1123.x * 14u;
    uint _1127 = _1125 + 13u;
    float _1134 = _392 + (-1.0);
    float _1140 = (cbLight._m0[_1127].x * _1134) + 1.0;
    float _1141 = (cbLight._m0[_1127].y * _1134) + 1.0;
    float _1142 = (cbLight._m0[_1127].z * _1134) + 1.0;
    float _1143 = (cbLight._m0[_1127].w * _1134) + 1.0;
    uint _1144 = _1125 + 5u;
    float _1150 = isnan(1.0) ? _1141 : (isnan(_1141) ? 1.0 : min(_1141, 1.0));
    uint _1154 = _1125 + 4u;
    float _1164 = isnan(1.0) ? _1140 : (isnan(_1140) ? 1.0 : min(_1140, 1.0));
    uint _1168 = _1125 | 1u;
    float _1179 = dot(vec3(cbLight._m0[_1125].xyz), vec3(_223, _224, _225));
    float _1182 = dot(vec3(cbLight._m0[_1168].xyz), vec3(_223, _224, _225));
    float _2723 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _2734 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _1187 = (isnan(1.0) ? _2723 : (isnan(_2723) ? 1.0 : min(_2723, 1.0))) * 0.3183098733425140380859375;
    float _1189 = (isnan(1.0) ? _2734 : (isnan(_2734) ? 1.0 : min(_2734, 1.0))) * 0.3183098733425140380859375;
    float _1196 = ((cbLight._m0[_1144].x * _1150) * _1189) + (((cbLight._m0[_1154].x * _1117) * _1164) * _1187);
    float _1197 = ((_1150 * cbLight._m0[_1144].y) * _1189) + (((cbLight._m0[_1154].y * _1118) * _1164) * _1187);
    float _1198 = ((_1150 * cbLight._m0[_1144].z) * _1189) + (((cbLight._m0[_1154].z * _1119) * _1164) * _1187);
    uvec4 _1203 = floatBitsToUint(cbLight._m0[_1125 + 12u]);
    bool _1205 = _1203.x == 0u;
    float _1206;
    float _1208;
    float _1210;
    if (_1205)
    {
        _1206 = _1196;
        _1208 = _1197;
        _1210 = _1198;
    }
    else
    {
        uint _1214 = _1125 + 6u;
        float _1230 = (dot(vec3(cbLight._m0[_1125 + 2u].xyz), vec3(_223, _224, _225)) * 0.5) + 0.5;
        float _1231 = _1230 * _1230;
        float _2745 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _2745 : (isnan(_2745) ? 1.0 : min(_2745, 1.0));
        float _1233 = isnan(1.0) ? _1142 : (isnan(_1142) ? 1.0 : min(_1142, 1.0));
        _1206 = (((cbLight._m0[_1214].x * 0.3183098733425140380859375) * _1232) * _1233) + _1196;
        _1208 = (((cbLight._m0[_1214].y * 0.3183098733425140380859375) * _1232) * _1233) + _1197;
        _1210 = (((cbLight._m0[_1214].z * 0.3183098733425140380859375) * _1232) * _1233) + _1198;
    }
    bool _1213 = _1203.y == 0u;
    float _1243;
    float _1245;
    float _1247;
    if (_1213)
    {
        _1243 = _1206;
        _1245 = _1208;
        _1247 = _1210;
    }
    else
    {
        uint _1348 = _1125 + 7u;
        float _1364 = (dot(vec3(cbLight._m0[_1125 + 3u].xyz), vec3(_223, _224, _225)) * 0.5) + 0.5;
        float _1365 = _1364 * _1364;
        float _2761 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _2761 : (isnan(_2761) ? 1.0 : min(_2761, 1.0));
        float _1367 = isnan(1.0) ? _1143 : (isnan(_1143) ? 1.0 : min(_1143, 1.0));
        _1243 = (((cbLight._m0[_1348].x * 0.3183098733425140380859375) * _1366) * _1367) + _1206;
        _1245 = (((cbLight._m0[_1348].y * 0.3183098733425140380859375) * _1366) * _1367) + _1208;
        _1247 = (((cbLight._m0[_1348].z * 0.3183098733425140380859375) * _1366) * _1367) + _1210;
    }
    uint _1249 = _1125 + 8u;
    float _1255 = cbLight._m0[_1125].x + _305;
    float _1256 = cbLight._m0[_1125].y + _306;
    float _1257 = cbLight._m0[_1125].z + _307;
    float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
    float _1265 = dot(vec3(_223, _224, _225), vec3(cbLight._m0[_1125].xyz));
    float _2777 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
    float _1268 = isnan(1.0) ? _2777 : (isnan(_2777) ? 1.0 : min(_2777, 1.0));
    float _1269 = dot(vec3(_223, _224, _225), vec3(_305, _306, _307));
    float _2788 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
    float _1272 = isnan(1.0) ? _2788 : (isnan(_2788) ? 1.0 : min(_2788, 1.0));
    float _1273 = dot(vec3(cbLight._m0[_1125].xyz), vec3(_1255 * _1261, _1256 * _1261, _1257 * _1261));
    float _2799 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
    float _1281 = exp2(log2(1.0 - (isnan(1.0) ? _2799 : (isnan(_2799) ? 1.0 : min(_2799, 1.0)))) * 5.0);
    float _1286 = (0.5 / ((_1268 + 9.9999999392252902907785028219223e-09) + _1272)) * _1268;
    float _2810 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
    float _1288 = (isnan(1.0) ? _2810 : (isnan(_2810) ? 1.0 : min(_2810, 1.0))) * 0.31831014156341552734375;
    uint _1302 = _1125 + 9u;
    float _1308 = cbLight._m0[_1168].x + _305;
    float _1309 = cbLight._m0[_1168].y + _306;
    float _1310 = cbLight._m0[_1168].z + _307;
    float _1314 = inversesqrt(dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310)));
    float _1318 = dot(vec3(_223, _224, _225), vec3(cbLight._m0[_1168].xyz));
    float _2821 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _1321 = isnan(1.0) ? _2821 : (isnan(_2821) ? 1.0 : min(_2821, 1.0));
    float _1322 = dot(vec3(cbLight._m0[_1168].xyz), vec3(_1308 * _1314, _1309 * _1314, _1310 * _1314));
    float _2832 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
    float _1329 = exp2(log2(1.0 - (isnan(1.0) ? _2832 : (isnan(_2832) ? 1.0 : min(_2832, 1.0)))) * 5.0);
    float _1333 = (0.5 / ((_1321 + 9.9999999392252902907785028219223e-09) + _1272)) * _1321;
    float _2843 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
    float _1335 = (isnan(1.0) ? _2843 : (isnan(_2843) ? 1.0 : min(_2843, 1.0))) * 0.31831014156341552734375;
    float _1345 = (((_1329 * cbLight._m0[_1302].x) * _1335) * _1150) + ((((cbLight._m0[_1249].x * _1117) * _1281) * _1288) * _1164);
    float _1346 = (((_1329 * cbLight._m0[_1302].y) * _1335) * _1150) + ((((cbLight._m0[_1249].y * _1118) * _1281) * _1288) * _1164);
    float _1347 = (((_1329 * cbLight._m0[_1302].z) * _1335) * _1150) + ((((cbLight._m0[_1249].z * _1119) * _1281) * _1288) * _1164);
    float _1377;
    float _1379;
    float _1381;
    if (_1205)
    {
        _1377 = _1345;
        _1379 = _1346;
        _1381 = _1347;
    }
    else
    {
        uint _1383 = _1125 + 10u;
        uint _1389 = _1125 + 2u;
        float _1395 = cbLight._m0[_1389].x + _305;
        float _1396 = cbLight._m0[_1389].y + _306;
        float _1397 = cbLight._m0[_1389].z + _307;
        float _1401 = inversesqrt(dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397)));
        float _1405 = dot(vec3(_223, _224, _225), vec3(cbLight._m0[_1389].xyz));
        float _2854 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1408 = isnan(1.0) ? _2854 : (isnan(_2854) ? 1.0 : min(_2854, 1.0));
        float _1409 = dot(vec3(cbLight._m0[_1389].xyz), vec3(_1395 * _1401, _1396 * _1401, _1397 * _1401));
        float _2865 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1416 = exp2(log2(1.0 - (isnan(1.0) ? _2865 : (isnan(_2865) ? 1.0 : min(_2865, 1.0)))) * 5.0);
        float _1420 = (0.5 / ((_1408 + 9.9999999392252902907785028219223e-09) + _1272)) * _1408;
        float _2876 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1422 = (isnan(1.0) ? _2876 : (isnan(_2876) ? 1.0 : min(_2876, 1.0))) * 0.31831014156341552734375;
        float _1423 = isnan(1.0) ? _1142 : (isnan(_1142) ? 1.0 : min(_1142, 1.0));
        _1377 = (((_1416 * cbLight._m0[_1383].x) * _1422) * _1423) + _1345;
        _1379 = (((_1416 * cbLight._m0[_1383].y) * _1422) * _1423) + _1346;
        _1381 = (((_1416 * cbLight._m0[_1383].z) * _1422) * _1423) + _1347;
    }
    float _1433;
    float _1435;
    float _1437;
    if (_1213)
    {
        _1433 = _1377;
        _1435 = _1379;
        _1437 = _1381;
    }
    else
    {
        uint _1444 = _1125 + 11u;
        uint _1450 = _1125 + 3u;
        float _1456 = cbLight._m0[_1450].x + _305;
        float _1457 = cbLight._m0[_1450].y + _306;
        float _1458 = cbLight._m0[_1450].z + _307;
        float _1462 = inversesqrt(dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458)));
        float _1466 = dot(vec3(_223, _224, _225), vec3(cbLight._m0[_1450].xyz));
        float _2892 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1469 = isnan(1.0) ? _2892 : (isnan(_2892) ? 1.0 : min(_2892, 1.0));
        float _1470 = dot(vec3(cbLight._m0[_1450].xyz), vec3(_1456 * _1462, _1457 * _1462, _1458 * _1462));
        float _2903 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1477 = exp2(log2(1.0 - (isnan(1.0) ? _2903 : (isnan(_2903) ? 1.0 : min(_2903, 1.0)))) * 5.0);
        float _1481 = (0.5 / ((_1469 + 9.9999999392252902907785028219223e-09) + _1272)) * _1469;
        float _2914 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1483 = (isnan(1.0) ? _2914 : (isnan(_2914) ? 1.0 : min(_2914, 1.0))) * 0.31831014156341552734375;
        float _1484 = isnan(1.0) ? _1143 : (isnan(_1143) ? 1.0 : min(_1143, 1.0));
        _1433 = (((_1477 * cbLight._m0[_1444].x) * _1483) * _1484) + _1377;
        _1435 = (((_1477 * cbLight._m0[_1444].y) * _1483) * _1484) + _1379;
        _1437 = (((_1477 * cbLight._m0[_1444].z) * _1483) * _1484) + _1381;
    }
    float _1593;
    float _1595;
    float _1597;
    if (_1123.y == 0u)
    {
        float _1534 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1535 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1534;
        float _1536 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1534;
        float _1537 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1534;
        uvec4 _1549 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1550 = _1549.x;
        uint _1561 = uint((float(_1549.y) * floor(float(uint(cbSceneParam._m0[85u].y * _327) / _1550))) + floor(float(uint(cbSceneParam._m0[85u].x * _326) / _1550)));
        float _1571 = (log2(_1537 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1572 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        uint _1575 = uint(isnan(14.0) ? _1572 : (isnan(_1572) ? 14.0 : min(_1572, 14.0)));
        uvec4 _1580 = texelFetch(g_lightClusterGridBuffer, int(((_1575 << 2u) + (_1561 << 6u)) >> 2u));
        uint _1581 = _1580.x;
        uint _1582 = _1549.z;
        float _1682;
        float _1684;
        float _1686;
        if (((((1u << ((_1582 >> 4u) & 15u)) + 4294967295u) & _1581) == 0u) || ((_1582 & 240u) == 0u))
        {
            _1682 = 0.0;
            _1684 = 0.0;
            _1686 = 0.0;
        }
        else
        {
            float _1683;
            float _1685;
            float _1687;
            float _1821 = 0.0;
            float _1822 = 0.0;
            float _1823 = 0.0;
            uint _1824 = 0u;
            uint _1833;
            bool _1834;
            for (;;)
            {
                _1833 = texelFetch(g_lightClassification, int((((_1575 << 5u) + (_1561 << 9u)) + (_1824 << 2u)) >> 2u)).x;
                _1834 = _1833 == 0u;
                float frontier_phi_32_pred;
                float frontier_phi_32_pred_1;
                float frontier_phi_32_pred_2;
                if (_1834)
                {
                    frontier_phi_32_pred = _1823;
                    frontier_phi_32_pred_1 = _1821;
                    frontier_phi_32_pred_2 = _1822;
                }
                else
                {
                    float _1957;
                    float _1958;
                    float _1959;
                    uint _1960;
                    _1957 = _1821;
                    _1958 = _1822;
                    _1959 = _1823;
                    _1960 = _1833;
                    float _1890;
                    float _1891;
                    float _1892;
                    for (;;)
                    {
                        uint _1964 = uint(findLSB(_1960)) + (_1824 << 5u);
                        uint _1961 = (_1960 + 4294967295u) & _1960;
                        uint _1966 = _1964 * 48u;
                        vec4 _1980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1966)).x, texelFetch(g_PointLightRenderingBuffer, int(_1966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1966 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1966 + 3u)).x));
                        uint _1986 = (_1964 * 48u) + 4u;
                        vec4 _1999 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1986)).x, texelFetch(g_PointLightRenderingBuffer, int(_1986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1986 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1986 + 3u)).x));
                        float _2004 = _1980.x - _1535;
                        float _2005 = _1980.y - _1536;
                        float _2006 = _1980.z - _1537;
                        float _2007 = dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006));
                        float _2010 = inversesqrt(_2007);
                        float _2019 = 1.0 - (_2007 * _1980.w);
                        float _2940 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
                        float _2021 = sqrt(_2007) * _1999.w;
                        float _2024 = 1.39999997615814208984375 / (_2021 + 1.39999997615814208984375);
                        float _2025 = _2024 * _2024;
                        float _2028 = ((1.0 - _2025) * dot(vec3(_347, _350, _353), vec3(_2010 * _2004, _2010 * _2005, _2010 * _2006))) + _2025;
                        float _2035 = ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * (isnan(1.0) ? _2940 : (isnan(_2940) ? 1.0 : min(_2940, 1.0)))) / (((_2021 * _2021) * 0.699999988079071044921875) + 1.0);
                        _1890 = (_2035 * _1999.x) + _1957;
                        _1891 = (_2035 * _1999.y) + _1958;
                        _1892 = (_2035 * _1999.z) + _1959;
                        if (_1961 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1957 = _1890;
                            _1958 = _1891;
                            _1959 = _1892;
                            _1960 = _1961;
                        }
                    }
                    frontier_phi_32_pred = _1892;
                    frontier_phi_32_pred_1 = _1890;
                    frontier_phi_32_pred_2 = _1891;
                }
                _1687 = frontier_phi_32_pred;
                _1683 = frontier_phi_32_pred_1;
                _1685 = frontier_phi_32_pred_2;
                uint _1825 = _1824 + 1u;
                if (_1825 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1821 = _1683;
                    _1822 = _1685;
                    _1823 = _1687;
                    _1824 = _1825;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1682 = _1683;
            _1684 = _1685;
            _1686 = _1687;
        }
        uvec4 _1690 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1691 = _1690.z;
        uint _1693 = (_1691 >> 8u) & 15u;
        float _1808;
        float _1810;
        float _1812;
        if (((4294967295u << _1693) & _1581) == 0u)
        {
            _1808 = _1682;
            _1810 = _1684;
            _1812 = _1686;
        }
        else
        {
            float frontier_phi_24_25_ladder;
            float frontier_phi_24_25_ladder_1;
            float frontier_phi_24_25_ladder_2;
            if (_1693 < ((_1691 >> 12u) & 15u))
            {
                float _1809;
                float _1811;
                float _1813;
                float _1943 = _1682;
                float _1944 = _1684;
                float _1945 = _1686;
                uint _1946 = _1693;
                uint _1955;
                bool _1956;
                for (;;)
                {
                    _1955 = texelFetch(g_lightClassification, int((((_1575 << 5u) + (_1561 << 9u)) + (_1946 << 2u)) >> 2u)).x;
                    _1956 = _1955 == 0u;
                    float frontier_phi_43_pred;
                    float frontier_phi_43_pred_1;
                    float frontier_phi_43_pred_2;
                    if (_1956)
                    {
                        frontier_phi_43_pred = _1944;
                        frontier_phi_43_pred_1 = _1945;
                        frontier_phi_43_pred_2 = _1943;
                    }
                    else
                    {
                        float _2049;
                        float _2050;
                        float _2051;
                        float _2251;
                        float _2252;
                        float _2253;
                        float _2059 = _1943;
                        float _2060 = _1944;
                        float _2061 = _1945;
                        uint _2062 = _1955;
                        uint _2063;
                        vec4 _2089;
                        float _2090;
                        vec4 _2105;
                        vec4 _2121;
                        vec4 _2137;
                        float _2184;
                        bool _2185;
                        for (;;)
                        {
                            uint _2073 = ((_1946 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2062));
                            _2063 = (_2062 + 4294967295u) & _2062;
                            uint _2075 = _2073 * 40u;
                            _2089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2075 + 3u)).x));
                            _2090 = _2089.w;
                            uint _2092 = (_2073 * 40u) + 4u;
                            _2105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2092 + 3u)).x));
                            uint _2108 = (_2073 * 40u) + 16u;
                            _2121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2108 + 3u)).x));
                            uint _2124 = (_2073 * 40u) + 20u;
                            _2137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2124 + 3u)).x));
                            uint _2140 = (_2073 * 40u) + 24u;
                            vec4 _2153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2140 + 3u)).x));
                            uint _2159 = (_2073 * 40u) + 28u;
                            vec4 _2172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2159 + 3u)).x));
                            _2184 = fma(_1537, _2172.z, fma(_1536, _2172.y, _2172.x * _1535)) + _2172.w;
                            _2185 = !((fma(_1537, _2153.z, fma(_1536, _2153.y, _2153.x * _1535)) + _2153.w) <= 0.0);
                            float frontier_phi_49_pred;
                            float frontier_phi_49_pred_1;
                            float frontier_phi_49_pred_2;
                            if (_2185)
                            {
                                float _2209 = _2089.x - _1535;
                                float _2210 = _2089.y - _1536;
                                float _2211 = _2089.z - _1537;
                                float _2212 = dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211));
                                float _2215 = inversesqrt(_2212);
                                float _2222 = 1.0 - (_2212 / (_2090 * _2090));
                                float _2956 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
                                float _2227 = sqrt(_2212) * _2105.w;
                                float _2229 = 1.39999997615814208984375 / (_2227 + 1.39999997615814208984375);
                                float _2230 = _2229 * _2229;
                                float _2233 = ((1.0 - _2230) * dot(vec3(_2215 * _2209, _2215 * _2210, _2215 * _2211), vec3(_347, _350, _353))) + _2230;
                                float _2240 = (fma(_1537, _2121.z, fma(_1536, _2121.y, _2121.x * _1535)) + _2121.w) / _2184;
                                float _2241 = (fma(_1537, _2137.z, fma(_1536, _2137.y, _2137.x * _1535)) + _2137.w) / _2184;
                                float _2245 = 1.0 - dot(vec2(_2240, _2241), vec2(_2240, _2241));
                                float _2972 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
                                float _2247 = (isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0))) * (((isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0))) * (isnan(1.0) ? _2956 : (isnan(_2956) ? 1.0 : min(_2956, 1.0)))) / (((_2227 * _2227) * 0.699999988079071044921875) + 1.0));
                                frontier_phi_49_pred = _2247 * _2105.z;
                                frontier_phi_49_pred_1 = _2247 * _2105.y;
                                frontier_phi_49_pred_2 = _2247 * _2105.x;
                            }
                            else
                            {
                                frontier_phi_49_pred = 0.0;
                                frontier_phi_49_pred_1 = 0.0;
                                frontier_phi_49_pred_2 = 0.0;
                            }
                            _2253 = frontier_phi_49_pred;
                            _2252 = frontier_phi_49_pred_1;
                            _2251 = frontier_phi_49_pred_2;
                            _2049 = _2251 + _2059;
                            _2050 = _2252 + _2060;
                            _2051 = _2253 + _2061;
                            if (_2063 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2059 = _2049;
                                _2060 = _2050;
                                _2061 = _2051;
                                _2062 = _2063;
                                continue;
                            }
                        }
                        frontier_phi_43_pred = _2050;
                        frontier_phi_43_pred_1 = _2051;
                        frontier_phi_43_pred_2 = _2049;
                    }
                    _1811 = frontier_phi_43_pred;
                    _1813 = frontier_phi_43_pred_1;
                    _1809 = frontier_phi_43_pred_2;
                    uint _1947 = _1946 + 1u;
                    if (_1947 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1943 = _1809;
                        _1944 = _1811;
                        _1945 = _1813;
                        _1946 = _1947;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_24_25_ladder = _1813;
                frontier_phi_24_25_ladder_1 = _1811;
                frontier_phi_24_25_ladder_2 = _1809;
            }
            else
            {
                frontier_phi_24_25_ladder = _1686;
                frontier_phi_24_25_ladder_1 = _1684;
                frontier_phi_24_25_ladder_2 = _1682;
            }
            _1808 = frontier_phi_24_25_ladder_2;
            _1810 = frontier_phi_24_25_ladder_1;
            _1812 = frontier_phi_24_25_ladder;
        }
        float _1814 = isnan(1.0) ? _392 : (isnan(_392) ? 1.0 : min(_392, 1.0));
        _1593 = (_1814 * _1808) + _1243;
        _1595 = (_1814 * _1810) + _1245;
        _1597 = (_1814 * _1812) + _1247;
    }
    else
    {
        _1593 = _1243;
        _1595 = _1245;
        _1597 = _1247;
    }
    uint _1603 = _368 + uint(cbMatDynParam._m0[0u].w);
    float _1609 = (_211.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1603].x;
    float _1610 = (_211.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1603].y;
    float _1611 = (_211.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1603].z;
    float _2988 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _2999 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3010 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3021 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _1626 = (((isnan(1.0) ? _2988 : (isnan(_2988) ? 1.0 : min(_2988, 1.0))) * (_1593 + ((isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0))) * _392))) + (cbPerFrame._m0[3u].x * _1433)) + _1609;
    float _1628 = (_1610 + (cbPerFrame._m0[3u].x * _1435)) + ((isnan(1.0) ? _2999 : (isnan(_2999) ? 1.0 : min(_2999, 1.0))) * (_1595 + ((isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0))) * _392)));
    float _1630 = (_1611 + (cbPerFrame._m0[3u].x * _1437)) + ((isnan(1.0) ? _3010 : (isnan(_3010) ? 1.0 : min(_3010, 1.0))) * (_1597 + ((isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0))) * _392)));
    float _1631 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1632 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
    float _1639 = cbMtdParam._m0[2u].x * _1609;
    float _1640 = cbMtdParam._m0[2u].y * _1610;
    float _1641 = cbMtdParam._m0[2u].z * _1611;
    float _3047 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1643 = isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0));
    float _1648 = cbInstanceData._m0[_366 + 6u].w * (isnan(1.0) ? _3021 : (isnan(_3021) ? 1.0 : min(_3021, 1.0)));
    float _1653 = _326 / cbSceneParam._m0[86u].x;
    float _1654 = _327 / cbSceneParam._m0[86u].y;
    vec4 _1668 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1653, _1654, (log2((isnan(cbSceneParam._m0[77u].w) ? _246 : (isnan(_246) ? cbSceneParam._m0[77u].w : min(_246, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1670 = _1668.x;
    float _1671 = _1668.y;
    float _1672 = _1668.z;
    float _1673 = _1668.w;
    float _1739;
    float _1741;
    float _1743;
    float _1745;
    if (_246 > cbSceneParam._m0[78u].w)
    {
        float _1701 = isnan(_246) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _246 : min(cbSceneParam._m0[80u].w, _246));
        float _1702 = _1701 / _246;
        float _1713 = _1702 * _298;
        float _1714 = _299 * _1702;
        float _1715 = (-0.0) - _1714;
        float _1716 = _1702 * _300;
        float _1718 = (cbSceneParam._m0[77u].w * _1715) / _1701;
        float _1719 = _1718 + cbSceneParam._m0[79u].w;
        float _1720 = cbSceneParam._m0[79u].w - _1714;
        float _1726 = sqrt(((_1713 * _1713) + (_1714 * _1714)) + (_1716 * _1716));
        float _1729 = (1.0 - (cbSceneParam._m0[77u].w / _1701)) * _1726;
        float _1735 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1737 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1900;
        if (abs((_1715 - _1718) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1900 = ((((_1719 > 0.0) ? exp2(_1735 * _1719) : (2.0 - exp2(_1737 * _1719))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1729;
        }
        else
        {
            float _1847 = 1.0 / cbSceneParam._m0[80u].x;
            float _1848 = isnan(_1720) ? _1719 : (isnan(_1719) ? _1720 : max(_1719, _1720));
            float _1849 = isnan(_1720) ? _1719 : (isnan(_1719) ? _1720 : min(_1719, _1720));
            float _1858 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : min(_1848, 0.0));
            float _1859 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : min(_1849, 0.0));
            _1900 = ((abs(_1726 / _1715) * cbSceneParam._m0[80u].y) * ((((_1858 - _1859) * 2.0) - ((exp2(_1735 * (isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)))) - exp2(_1735 * (isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))))) * _1847)) - ((exp2(_1737 * _1858) - exp2(_1737 * _1859)) * _1847))) + (_1729 * cbSceneParam._m0[80u].z);
        }
        vec4 _1902 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1653, _1654, 1.0), 0.0);
        float _1911 = exp2((_1900 * (-1.44269502162933349609375)) * (1.0 - _1902.w));
        float _1912 = log2(_1911);
        float _1928 = log2(_1673);
        _1739 = (exp2(_1928 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1912 * cbSceneParam._m0[78u].x)) * _1902.x) / cbSceneParam._m0[78u].x)) + _1670;
        _1741 = (exp2(_1928 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1912 * cbSceneParam._m0[78u].y)) * _1902.y) / cbSceneParam._m0[78u].y)) + _1671;
        _1743 = (exp2(_1928 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1912 * cbSceneParam._m0[78u].z)) * _1902.z) / cbSceneParam._m0[78u].z)) + _1672;
        _1745 = _1911 * _1673;
    }
    else
    {
        _1739 = _1670;
        _1741 = _1671;
        _1743 = _1672;
        _1745 = _1673;
    }
    bool _1938;
    vec4 _1755;
    vec4 _1778;
    float _1780;
    float _1784;
    float _1785;
    float _1786;
    float _1789;
    float _1792;
    float _1795;
    float _1796;
    bool _1807;
    for (;;)
    {
        _1755 = cbMatDynParam._m0[0u];
        float _1757 = roundEven(_1755.y);
        bool _1758 = _1757 == 3.0;
        float _1760 = log2(_1745);
        float _1764 = exp2(_1760 * cbSceneParam._m0[78u].x);
        float _1765 = exp2(_1760 * cbSceneParam._m0[78u].y);
        float _1766 = exp2(_1760 * cbSceneParam._m0[78u].z);
        float _1767 = _1764 * _1631;
        float _1768 = _1765 * _1632;
        float _1769 = _1766 * _1633;
        float _1776 = _314 + (-0.5);
        _1778 = cbMtdParam._m0[1u];
        _1780 = _1778.y * _1776;
        float _1783 = (_1757 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1784 = _1783 * (_1758 ? _1767 : (_1767 + (cbSceneParam._m0[72u].w * _1739)));
        _1785 = _1783 * (_1758 ? _1768 : (_1768 + (cbSceneParam._m0[72u].w * _1741)));
        _1786 = _1783 * (_1758 ? _1769 : (_1769 + (cbSceneParam._m0[72u].w * _1743)));
        _1789 = ((_1639 * _1643) * _1764) * _1783;
        _1792 = ((_1640 * _1643) * _1765) * _1783;
        _1795 = ((_1641 * _1643) * _1766) * _1783;
        _1796 = _1776 * 0.999000012874603271484375;
        _1807 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1807)
        {
            if ((cbInstanceData._m0[_366 + 7u].x + _1796) < 0.5)
            {
                _1938 = true;
                break;
            }
        }
        uint _1882 = _368 + uint(_1755.w);
        if ((cbInstanceData._m0[_1882].w < 1.0) && ((cbInstanceData._m0[_1882].w + _1796) < 0.5))
        {
            _1938 = true;
            break;
        }
        if ((_1780 + _194) < _1778.x)
        {
            _1938 = true;
            break;
        }
        _1938 = false;
        break;
    }
    float _2040;
    if (_1938)
    {
        discard_state = true;
        _2040 = 0.0;
    }
    else
    {
        _2040 = _1648;
    }
    SV_Target.x = _1784;
    SV_Target.y = _1785;
    SV_Target.z = _1786;
    SV_Target.w = _2040;
    SV_Target_1.x = _1789;
    SV_Target_1.y = _1792;
    SV_Target_1.z = _1795;
    SV_Target_1.w = _1648;
    discard_exit();
}


