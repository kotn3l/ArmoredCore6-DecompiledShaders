#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[42];
} cbMtdParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in vec2 TEXCOORD_13;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    bool _118;
    vec4 _76;
    float _78;
    float _79;
    bool _92;
    uint _93;
    for (;;)
    {
        float _72 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w + (-0.5);
        _76 = cbMtdParam._m0[1u];
        _78 = _72 * _76.y;
        _79 = _72 * 0.999000012874603271484375;
        _92 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        _93 = uint(roundEven(NORMAL.w)) * 13u;
        if (_92)
        {
            if ((cbInstanceData._m0[_93 + 7u].x + _79) < 0.5)
            {
                _118 = true;
                break;
            }
        }
        uint _109 = (_93 + 9u) + uint(cbMatDynParam._m0[0u].w);
        if ((cbInstanceData._m0[_109].w < 1.0) && ((cbInstanceData._m0[_109].w + _79) < 0.5))
        {
            _118 = true;
            break;
        }
        if ((_78 + 1.0) < _76.x)
        {
            _118 = true;
            break;
        }
        _118 = false;
        break;
    }
    if (_118)
    {
        discard_state = true;
    }
    discard_exit();
}


