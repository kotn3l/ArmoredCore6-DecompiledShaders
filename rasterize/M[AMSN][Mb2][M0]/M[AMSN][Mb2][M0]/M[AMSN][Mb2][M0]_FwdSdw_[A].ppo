#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _955;
float _3606;
float _3607;
float _3608;
float _3609;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223;
    float _224;
    float _225;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
    }
    else
    {
        _223 = _209;
        _224 = _210;
        _225 = _211;
    }
    vec4 _251 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _278 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _311 = (TEXCOORD_7.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMtdParam._m0[11u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[11u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3618 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _319 = (_312 * ((_278.x * cbMtdParam._m0[10u].x) - _257)) + _257;
    float _320 = (_312 * ((_278.y * cbMtdParam._m0[10u].y) - _258)) + _258;
    float _321 = (_312 * ((_278.z * cbMtdParam._m0[10u].z) - _259)) + _259;
    vec4 _333 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _335 = _333.x;
    float _336 = _333.y;
    float _337 = _333.z;
    vec4 _349 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _362 = ((_349.z - _337) * _312) + _337;
    float _366 = ((((_349.x - _335) * _312) + _335) * 2.0) + (-1.0);
    float _368 = ((((_349.y - _336) * _312) + _336) * 2.0) + (-1.0);
    float _369 = dot(vec2(_366, _368), vec2(_366, _368));
    float _3629 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _374 = sqrt(1.0 - (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))));
    float _377 = fma(_374, _223, fma(_368, _215 * TANGENT.x, (_201 * _193) * _366));
    float _380 = fma(_374, _224, fma(_368, _215 * TANGENT.y, (_201 * _194) * _366));
    float _383 = fma(_374, _225, fma(_368, _215 * TANGENT.z, (_201 * _195) * _366));
    float _387 = inversesqrt(dot(vec3(_377, _380, _383), vec3(_377, _380, _383)));
    float _388 = _387 * _377;
    float _389 = _387 * _380;
    float _390 = _387 * _383;
    float _3640 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _391 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3662 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3673 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _410 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _461 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _451);
    float _462 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _451);
    float _463 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _451);
    float _467 = inversesqrt(dot(vec3(_461, _462, _463), vec3(_461, _462, _463)));
    float _468 = _461 * _467;
    float _469 = _462 * _467;
    float _470 = _463 * _467;
    vec4 _475 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _477 = _475.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _635 = sqrt(((_461 * _461) + (_462 * _462)) + (_463 * _463));
        float _641 = (cbMatDynParam._m0[5u].x * _635) + cbMatDynParam._m0[5u].y;
        float _3684 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _646 = (cbMatDynParam._m0[5u].z * _635) + cbMatDynParam._m0[5u].w;
        float _3695 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) - _642)) + _642) < ((_477 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _489 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _490 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _510 = fma(_390, cbSceneParam._m0[5u].z, fma(_389, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _388));
    float _513 = fma(_390, cbSceneParam._m0[6u].z, fma(_389, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _388));
    float _516 = fma(_390, cbSceneParam._m0[7u].z, fma(_389, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _388));
    uint _529 = uint(roundEven(NORMAL.w)) * 13u;
    uint _531 = _529 + 9u;
    uint _532 = _531 + uint(cbMatDynParam._m0[0u].w);
    float _538 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_532].x;
    float _539 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_532].y;
    float _540 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_532].z;
    float _3706 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    vec4 _552 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _489, cbSceneParam._m0[86u].y * _490));
    float _555 = _552.x * TEXCOORD_7.w;
    float _556 = dot(vec3(_388, _389, _390), vec3(_468, _469, _470));
    float _559 = _556 * 2.0;
    float _563 = (_559 * _388) - _468;
    float _564 = (_559 * _389) - _469;
    float _565 = (_559 * _390) - _470;
    float _569 = abs(dot(vec3(_468, _469, _470), vec3(_388, _389, _390)));
    float _3739 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _571 = sqrt(_391);
    float _584 = exp2((_571 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_571 * 3.0));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _954;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _679 = fma(_624, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616));
        float _683 = fma(_624, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616));
        float _687 = fma(_624, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616));
        float _712 = _616 + _388;
        float _713 = _620 + _389;
        float _714 = _624 + _390;
        float _724 = fma(_714, cbModelParam._m0[26u].z, fma(_713, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _712)) - _679;
        float _725 = fma(_714, cbModelParam._m0[27u].z, fma(_713, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _712)) - _683;
        float _726 = fma(_714, cbModelParam._m0[28u].z, fma(_713, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _712)) - _687;
        float _730 = inversesqrt(dot(vec3(_724, _725, _726), vec3(_724, _725, _726)));
        float _743 = ((_730 * _724) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_679 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _744 = ((_730 * _725) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_683 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_730 * _726) / cbModelParam._m0[34u].z) + ((((((_687 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        float _782 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _783 = _782 * (_748.x + (-0.5));
        float _784 = _782 * (_748.y + (-0.5));
        float _785 = _782 * (_748.z + (-0.5));
        float _792 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _793 = _792 * (_755.x + (-0.5));
        float _794 = _792 * (_755.y + (-0.5));
        float _795 = _792 * (_755.z + (-0.5));
        float _802 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_762.x + (-0.5));
        float _804 = _802 * (_762.y + (-0.5));
        float _805 = _802 * (_762.z + (-0.5));
        float _812 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_769.x + (-0.5));
        float _814 = _812 * (_769.y + (-0.5));
        float _815 = _812 * (_769.z + (-0.5));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = _783 * 0.5;
        float _820 = _793 * 0.5;
        float _821 = _803 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _836 = (dot(vec3(_388, _389, _390), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _846 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3787 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_848 + 1.0))) + _853) * _816;
        float _863 = _784 * 0.5;
        float _864 = _794 * 0.5;
        float _865 = _804 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _879 = (dot(vec3(_388, _389, _390), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _888 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3820 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_890 + 1.0))) + _895) * _817;
        float _905 = _785 * 0.5;
        float _906 = _795 * 0.5;
        float _907 = _805 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _921 = (dot(vec3(_388, _389, _390), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _930 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3853 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_932 + 1.0))) + _937) * _818;
        _954 = _785;
        _956 = _784;
        _957 = _783;
        _958 = _795;
        _959 = _794;
        _960 = _793;
        _961 = _805;
        _962 = _804;
        _963 = _803;
        _964 = _818;
        _965 = _817;
        _966 = _816;
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
    }
    else
    {
        _954 = _955;
        _956 = _955;
        _957 = _955;
        _958 = _955;
        _959 = _955;
        _960 = _955;
        _961 = _955;
        _962 = _955;
        _963 = _955;
        _964 = _955;
        _965 = _955;
        _966 = _955;
        _967 = 0.0;
        _968 = 0.0;
        _969 = 0.0;
    }
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _998 = fma(_624, cbModelParam._m0[30u].z, fma(_620, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _616));
        float _1002 = fma(_624, cbModelParam._m0[31u].z, fma(_620, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _616));
        float _1006 = fma(_624, cbModelParam._m0[32u].z, fma(_620, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _616));
        float _1029 = _616 + _388;
        float _1030 = _620 + _389;
        float _1031 = _624 + _390;
        float _1041 = fma(_1031, cbModelParam._m0[30u].z, fma(_1030, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1029)) - _998;
        float _1042 = fma(_1031, cbModelParam._m0[31u].z, fma(_1030, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1029)) - _1002;
        float _1043 = fma(_1031, cbModelParam._m0[32u].z, fma(_1030, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1029)) - _1006;
        float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
        float _1060 = ((_1047 * _1041) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_998 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1047 * _1042) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1002 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1047 * _1043) / cbModelParam._m0[35u].z) + ((((((_1006 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        float _1097 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1064.x + (-0.5));
        float _1099 = _1097 * (_1064.y + (-0.5));
        float _1100 = _1097 * (_1064.z + (-0.5));
        float _1107 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1071.x + (-0.5));
        float _1109 = _1107 * (_1071.y + (-0.5));
        float _1110 = _1107 * (_1071.z + (-0.5));
        float _1117 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1078.x + (-0.5));
        float _1119 = _1117 * (_1078.y + (-0.5));
        float _1120 = _1117 * (_1078.z + (-0.5));
        float _1127 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1085.x + (-0.5));
        float _1129 = _1127 * (_1085.y + (-0.5));
        float _1130 = _1127 * (_1085.z + (-0.5));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = _1098 * 0.5;
        float _1135 = _1108 * 0.5;
        float _1136 = _1118 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_388, _389, _390), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3916 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1161 + 1.0))) + _1166) * _1131;
        float _1176 = _1099 * 0.5;
        float _1177 = _1109 * 0.5;
        float _1178 = _1119 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_388, _389, _390), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3949 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1203 + 1.0))) + _1208) * _1132;
        float _1218 = _1100 * 0.5;
        float _1219 = _1110 * 0.5;
        float _1220 = _1120 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_388, _389, _390), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3982 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1245 + 1.0))) + _1250) * _1133;
        _1267 = _1100;
        _1268 = _1099;
        _1269 = _1098;
        _1270 = _1110;
        _1271 = _1109;
        _1272 = _1108;
        _1273 = _1120;
        _1274 = _1119;
        _1275 = _1118;
        _1276 = _1133;
        _1277 = _1132;
        _1278 = _1131;
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
    }
    else
    {
        _1267 = _955;
        _1268 = _955;
        _1269 = _955;
        _1270 = _955;
        _1271 = _955;
        _1272 = _955;
        _1273 = _955;
        _1274 = _955;
        _1275 = _955;
        _1276 = _955;
        _1277 = _955;
        _1278 = _955;
        _1279 = 0.0;
        _1280 = 0.0;
        _1281 = 0.0;
    }
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _967)) + _967;
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _969)) + _969;
    float _1314 = fma(_1293, cbSceneParam._m0[89u].z, fma(_1292, cbSceneParam._m0[89u].y, _1291 * cbSceneParam._m0[89u].x));
    float _1317 = fma(_1293, cbSceneParam._m0[90u].z, fma(_1292, cbSceneParam._m0[90u].y, _1291 * cbSceneParam._m0[90u].x));
    float _1320 = fma(_1293, cbSceneParam._m0[91u].z, fma(_1292, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1291));
    float _1335 = _563 * 0.5;
    float _1336 = _564 * 0.5;
    float _1337 = _565 * 0.5;
    float _1338 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1341 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1344 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1378;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1351 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_954, _958, _961, _964));
        float _1355 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_956, _959, _962, _965));
        float _1359 = dot(vec4(_1335, _1336, _1337, 1.0), vec4(_957, _960, _963, _966));
        float _1366 = dot(vec4(cbModelParam._m0[39u]), vec4(_1335, _1336, _1337, 1.0));
        _1378 = dot(vec3(isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1366) ? 0.0 : (isnan(0.0) ? _1366 : max(0.0, _1366))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1378 = 1.0;
    }
    float _1389;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1380 = dot(vec4(cbModelParam._m0[40u]), vec4(_1335, _1336, _1337, 1.0));
        _1389 = dot(vec3(isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1380) ? 0.0 : (isnan(0.0) ? _1380 : max(0.0, _1380))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1389 = 1.0;
    }
    float _1393 = (_1389 * cbModelParam._m0[1u].x) + (_1378 * (1.0 - cbModelParam._m0[1u].x));
    float _1403 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _391);
    float _1404 = isnan(_1403) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1403 : min(cbModelParam._m0[25u].z, _1403));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1453 = fma(_624, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _616)) + cbModelParam._m0[13u].w;
        float _1457 = fma(_624, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _616)) + cbModelParam._m0[14u].w;
        float _1461 = fma(_624, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _616)) + cbModelParam._m0[15u].w;
        float _1464 = fma(_565, cbModelParam._m0[13u].z, fma(_564, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _563));
        float _1467 = fma(_565, cbModelParam._m0[14u].z, fma(_564, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _563));
        float _1470 = fma(_565, cbModelParam._m0[15u].z, fma(_564, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _563));
        float _1498;
        if (_1464 > 0.0)
        {
            _1498 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1498 = frontier_phi_19_17_ladder;
        }
        float _1671;
        if (_1467 > 0.0)
        {
            _1671 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1671 = frontier_phi_28_24_ladder;
        }
        float _1966;
        if (_1470 > 0.0)
        {
            _1966 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1966 = frontier_phi_40_35_ladder;
        }
        float _1968 = isnan(_1671) ? _1498 : (isnan(_1498) ? _1671 : min(_1498, _1671));
        float _1969 = isnan(_1966) ? _1968 : (isnan(_1968) ? _1966 : min(_1968, _1966));
        float _1973 = (_1969 * _1464) + _1453;
        float _1974 = (_1969 * _1467) + _1457;
        float _1975 = (_1969 * _1470) + _1461;
        float _1976 = _1969 * 9.9999997473787516355514526367188e-05;
        float _1978 = (-1.0) - _1976;
        float _1980 = _1976 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1975 > _1980) || ((_1975 < _1978) || ((_1974 > _1980) || ((_1974 < _1978) || ((_1973 < _1978) || (_1973 > _1980))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2120 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1975, cbModelParam._m0[9u].z, fma(_1974, cbModelParam._m0[9u].y, _1973 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1975, cbModelParam._m0[10u].z, fma(_1974, cbModelParam._m0[10u].y, _1973 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1975, cbModelParam._m0[11u].z, fma(_1974, cbModelParam._m0[11u].y, _1973 * cbModelParam._m0[11u].x))), _1404);
            frontier_phi_18_40_ladder = _2120.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2120.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2120.x * cbModelParam._m0[1u].y;
        }
        _1486 = frontier_phi_18_40_ladder_2;
        _1488 = frontier_phi_18_40_ladder_1;
        _1490 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_563, _564, _565), _1404);
        _1486 = _1474.x * cbModelParam._m0[1u].y;
        _1488 = _1474.y * cbModelParam._m0[1u].y;
        _1490 = _1474.z * cbModelParam._m0[1u].y;
    }
    float _1494 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _391);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1494 : min(cbModelParam._m0[25u].w, _1494));
    float _1588;
    float _1590;
    float _1592;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1552 = fma(_624, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _616)) + cbModelParam._m0[21u].w;
        float _1556 = fma(_624, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _616)) + cbModelParam._m0[22u].w;
        float _1560 = fma(_624, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _616)) + cbModelParam._m0[23u].w;
        float _1563 = fma(_565, cbModelParam._m0[21u].z, fma(_564, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _563));
        float _1566 = fma(_565, cbModelParam._m0[22u].z, fma(_564, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _563));
        float _1569 = fma(_565, cbModelParam._m0[23u].z, fma(_564, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _563));
        float _1676;
        if (_1563 > 0.0)
        {
            _1676 = abs((1.0 - _1552) / _1563);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1552 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1676 = frontier_phi_30_26_ladder;
        }
        float _1993;
        if (_1566 > 0.0)
        {
            _1993 = abs((1.0 - _1556) / _1566);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1556 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1993 = frontier_phi_42_37_ladder;
        }
        float _2320;
        if (_1569 > 0.0)
        {
            _2320 = abs((1.0 - _1560) / _1569);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1560 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2320 = frontier_phi_52_49_ladder;
        }
        float _2322 = isnan(_1993) ? _1676 : (isnan(_1676) ? _1993 : min(_1676, _1993));
        float _2323 = isnan(_2320) ? _2322 : (isnan(_2322) ? _2320 : min(_2322, _2320));
        float _2327 = (_2323 * _1563) + _1552;
        float _2328 = (_2323 * _1566) + _1556;
        float _2329 = (_2323 * _1569) + _1560;
        float _2330 = _2323 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2330;
        float _2333 = _2330 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2329 > _2333) || ((_2329 < _2331) || ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 < _2331) || (_2327 > _2333))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2329, cbModelParam._m0[17u].z, fma(_2328, cbModelParam._m0[17u].y, _2327 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2329, cbModelParam._m0[18u].z, fma(_2328, cbModelParam._m0[18u].y, _2327 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2329, cbModelParam._m0[19u].z, fma(_2328, cbModelParam._m0[19u].y, _2327 * cbModelParam._m0[19u].x))), _1495);
            frontier_phi_27_52_ladder = _2447.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2447.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2447.x * cbModelParam._m0[1u].z;
        }
        _1588 = frontier_phi_27_52_ladder_2;
        _1590 = frontier_phi_27_52_ladder_1;
        _1592 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1572 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_563, _564, _565), _1495);
        _1588 = _1572.x * cbModelParam._m0[1u].z;
        _1590 = _1572.y * cbModelParam._m0[1u].z;
        _1592 = _1572.z * cbModelParam._m0[1u].z;
    }
    float _1604 = ((((1.0 - _584) * ((_571 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_584 * _571)) * _555;
    float _1605 = _1604 * ((cbModelParam._m0[1u].w * (_1588 - _1486)) + _1486);
    float _1606 = _1604 * ((cbModelParam._m0[1u].w * (_1590 - _1488)) + _1488);
    float _1607 = _1604 * ((cbModelParam._m0[1u].w * (_1592 - _1490)) + _1490);
    float _1610 = fma(_1607, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1605 * cbSceneParam._m0[89u].x));
    float _1613 = fma(_1607, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1605 * cbSceneParam._m0[90u].x));
    float _1616 = fma(_1607, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, _1605 * cbSceneParam._m0[91u].x));
    float _1650 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1654 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1658 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1662 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1663 = _1650 / _1662;
    float _1664 = _1654 / _1662;
    float _1665 = _1658 / _1662;
    float _1812;
    float _1813;
    float _1814;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1692 = ((uint(_1665 > cbSceneParam._m0[59u].y) + uint(_1665 > cbSceneParam._m0[59u].x)) + uint(_1665 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1693 = _1692 + 43u;
        uint _1701 = _1692 + 44u;
        uint _1709 = _1692 + 45u;
        uint _1717 = _1692 + 46u;
        float _1728 = fma(_1662, cbSceneParam._m0[_1693].w, fma(_1658, cbSceneParam._m0[_1693].z, fma(_1654, cbSceneParam._m0[_1693].y, _1650 * cbSceneParam._m0[_1693].x)));
        float _1732 = fma(_1662, cbSceneParam._m0[_1701].w, fma(_1658, cbSceneParam._m0[_1701].z, fma(_1654, cbSceneParam._m0[_1701].y, _1650 * cbSceneParam._m0[_1701].x)));
        float _1740 = fma(_1662, cbSceneParam._m0[_1717].w, fma(_1658, cbSceneParam._m0[_1717].z, fma(_1654, cbSceneParam._m0[_1717].y, _1650 * cbSceneParam._m0[_1717].x)));
        float _1745 = cbSceneParam._m0[33u].z * _1740;
        float _1747 = cbSceneParam._m0[33u].w * _1740;
        float _1750 = fma(_1662, cbSceneParam._m0[_1709].w, fma(_1658, cbSceneParam._m0[_1709].z, fma(_1654, cbSceneParam._m0[_1709].y, _1650 * cbSceneParam._m0[_1709].x))) / _1740;
        float _1798 = (cbSceneParam._m0[33u].x - sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665))) * cbSceneParam._m0[33u].y;
        float _4108 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1805 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1745 + _1728) / _1740, (_1747 + _1732) / _1740), _1750), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1747 + _1728) / _1740, (_1732 - _1745) / _1740), _1750), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1728 - _1745) / _1740, (_1732 - _1747) / _1740), _1750), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1728 - _1747) / _1740, (_1745 + _1732) / _1740), _1750), 0.0)).x), vec4(0.25)));
        _1812 = 1.0 - (_1805 * cbSceneParam._m0[34u].x);
        _1813 = 1.0 - (_1805 * cbSceneParam._m0[34u].y);
        _1814 = 1.0 - (_1805 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1812 = 1.0;
        _1813 = 1.0;
        _1814 = 1.0;
    }
    float _1878;
    float _1880;
    float _1882;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1866 = fma(_1662, cbSceneParam._m0[63u].w, fma(_1658, cbSceneParam._m0[63u].z, fma(_1654, cbSceneParam._m0[63u].y, _1650 * cbSceneParam._m0[63u].x)));
        float _1867 = fma(_1662, cbSceneParam._m0[60u].w, fma(_1658, cbSceneParam._m0[60u].z, fma(_1654, cbSceneParam._m0[60u].y, _1650 * cbSceneParam._m0[60u].x))) / _1866;
        float _1868 = fma(_1662, cbSceneParam._m0[61u].w, fma(_1658, cbSceneParam._m0[61u].z, fma(_1654, cbSceneParam._m0[61u].y, _1650 * cbSceneParam._m0[61u].x))) / _1866;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1867 >= cbSceneParam._m0[64u].x) && (_1868 >= cbSceneParam._m0[64u].y)) && (_1867 <= cbSceneParam._m0[64u].z)) && (_1868 <= cbSceneParam._m0[64u].w))
        {
            float _2006 = fma(_1662, cbSceneParam._m0[62u].w, fma(_1658, cbSceneParam._m0[62u].z, fma(_1654, cbSceneParam._m0[62u].y, _1650 * cbSceneParam._m0[62u].x))) / _1866;
            float _2010 = isnan(cbSceneParam._m0[41u].w) ? _2006 : (isnan(_2006) ? cbSceneParam._m0[41u].w : max(_2006, cbSceneParam._m0[41u].w));
            float _2053 = (cbSceneParam._m0[33u].x - sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665))) * cbSceneParam._m0[33u].y;
            float _4124 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
            float _2060 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1867, cbSceneParam._m0[33u].w + _1868), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1867, _1868 - cbSceneParam._m0[33u].z), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1867 - cbSceneParam._m0[33u].z, _1868 - cbSceneParam._m0[33u].w), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1867 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1868), _2010), 0.0)).x), vec4(0.25)));
            float _2064 = 1.0 - (_2060 * cbSceneParam._m0[34u].x);
            float _2065 = 1.0 - (_2060 * cbSceneParam._m0[34u].y);
            float _2066 = 1.0 - (_2060 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2065) ? _1813 : (isnan(_1813) ? _2065 : min(_1813, _2065));
            frontier_phi_39_38_ladder_1 = isnan(_2064) ? _1812 : (isnan(_1812) ? _2064 : min(_1812, _2064));
            frontier_phi_39_38_ladder_2 = isnan(_2066) ? _1814 : (isnan(_1814) ? _2066 : min(_1814, _2066));
        }
        else
        {
            frontier_phi_39_38_ladder = _1813;
            frontier_phi_39_38_ladder_1 = _1812;
            frontier_phi_39_38_ladder_2 = _1814;
        }
        _1878 = frontier_phi_39_38_ladder_1;
        _1880 = frontier_phi_39_38_ladder;
        _1882 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1878 = _1812;
        _1880 = _1813;
        _1882 = _1814;
    }
    uvec4 _1887 = floatBitsToUint(cbInstanceData._m0[_529 + 5u]);
    uint _1889 = _1887.x * 14u;
    uint _1890 = _1889 + 13u;
    float _1897 = _555 + (-1.0);
    float _1902 = (cbLight._m0[_1890].x * _1897) + 1.0;
    float _1903 = (cbLight._m0[_1890].y * _1897) + 1.0;
    float _1904 = (cbLight._m0[_1890].z * _1897) + 1.0;
    float _1905 = (cbLight._m0[_1890].w * _1897) + 1.0;
    uint _1906 = _1889 + 5u;
    float _1912 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
    uint _1916 = _1889 + 4u;
    float _1925 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
    uint _1929 = _1889 | 1u;
    float _1940 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_388, _389, _390));
    float _1943 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_388, _389, _390));
    float _4160 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _4171 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1948 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * 0.3183098733425140380859375;
    float _1950 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 0.3183098733425140380859375;
    float _1957 = ((cbLight._m0[_1906].x * _1912) * _1950) + (((cbLight._m0[_1916].x * _1878) * _1925) * _1948);
    float _1958 = ((_1912 * cbLight._m0[_1906].y) * _1950) + (((cbLight._m0[_1916].y * _1880) * _1925) * _1948);
    float _1959 = ((_1912 * cbLight._m0[_1906].z) * _1950) + (((cbLight._m0[_1916].z * _1882) * _1925) * _1948);
    uvec4 _1963 = floatBitsToUint(cbLight._m0[_1889 + 12u]);
    bool _1965 = _1963.x == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_1965)
    {
        _2067 = _1957;
        _2069 = _1958;
        _2071 = _1959;
    }
    else
    {
        uint _2075 = _1889 + 6u;
        float _2091 = (dot(vec3(cbLight._m0[_1889 + 2u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _2092 = _2091 * _2091;
        float _4182 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2093 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2094 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2067 = (((cbLight._m0[_2075].x * 0.3183098733425140380859375) * _2093) * _2094) + _1957;
        _2069 = (((cbLight._m0[_2075].y * 0.3183098733425140380859375) * _2093) * _2094) + _1958;
        _2071 = (((cbLight._m0[_2075].z * 0.3183098733425140380859375) * _2093) * _2094) + _1959;
    }
    bool _2074 = _1963.y == 0u;
    float _2129;
    float _2131;
    float _2133;
    if (_2074)
    {
        _2129 = _2067;
        _2131 = _2069;
        _2133 = _2071;
    }
    else
    {
        uint _2291 = _1889 + 7u;
        float _2307 = (dot(vec3(cbLight._m0[_1889 + 3u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _2308 = _2307 * _2307;
        float _4198 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2309 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2310 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2129 = (((cbLight._m0[_2291].x * 0.3183098733425140380859375) * _2309) * _2310) + _2067;
        _2131 = (((cbLight._m0[_2291].y * 0.3183098733425140380859375) * _2309) * _2310) + _2069;
        _2133 = (((cbLight._m0[_2291].z * 0.3183098733425140380859375) * _2309) * _2310) + _2071;
    }
    uint _2136 = _1889 + 8u;
    float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1889].w)) * _391) * 0.949999988079071044921875);
    float _2150 = _2149 * _2149;
    float _2151 = cbLight._m0[_1889].x + _468;
    float _2152 = cbLight._m0[_1889].y + _469;
    float _2153 = cbLight._m0[_1889].z + _470;
    float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
    float _2158 = _2157 * _2151;
    float _2159 = _2157 * _2152;
    float _2160 = _2157 * _2153;
    float _2161 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1889].xyz));
    float _4214 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _4225 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _2165 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2166 = dot(vec3(_388, _389, _390), vec3(_2158, _2159, _2160));
    float _4236 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2170 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_2158, _2159, _2160));
    float _4247 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2174 = _2150 * _2150;
    float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
    float _2189 = (exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2190 = 1.0 - _2150;
    float _2201 = (0.5 / (((_2165 * ((_2164 * _2190) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2190) + _2150) * _2164))) * _2164;
    float _4258 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2203 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
    uint _2217 = _1889 + 9u;
    float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _391) * 0.949999988079071044921875);
    float _2229 = _2228 * _2228;
    float _2230 = cbLight._m0[_1929].x + _468;
    float _2231 = cbLight._m0[_1929].y + _469;
    float _2232 = cbLight._m0[_1929].z + _470;
    float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
    float _2237 = _2236 * _2230;
    float _2238 = _2236 * _2231;
    float _2239 = _2236 * _2232;
    float _2240 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1929].xyz));
    float _4269 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2244 = dot(vec3(_388, _389, _390), vec3(_2237, _2238, _2239));
    float _4280 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2248 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2237, _2238, _2239));
    float _4291 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2252 = _2229 * _2229;
    float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
    float _2265 = (exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2266 = 1.0 - _2229;
    float _2276 = (0.5 / (((_2165 * ((_2243 * _2266) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2266) + _2229) * _2243))) * _2243;
    float _4302 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2278 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
    float _2288 = (((_2265 * cbLight._m0[_2217].x) * _2278) * _1912) + ((((cbLight._m0[_2136].x * _1878) * _2189) * _2203) * _1925);
    float _2289 = (((_2265 * cbLight._m0[_2217].y) * _2278) * _1912) + ((((cbLight._m0[_2136].y * _1880) * _2189) * _2203) * _1925);
    float _2290 = (((_2265 * cbLight._m0[_2217].z) * _2278) * _1912) + ((((cbLight._m0[_2136].z * _1882) * _2189) * _2203) * _1925);
    float _2346;
    float _2348;
    float _2350;
    if (_1965)
    {
        _2346 = _2288;
        _2348 = _2289;
        _2350 = _2290;
    }
    else
    {
        uint _2352 = _1889 + 2u;
        uint _2356 = _1889 + 10u;
        float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _391) * 0.949999988079071044921875);
        float _2371 = _2370 * _2370;
        float _2372 = cbLight._m0[_2352].x + _468;
        float _2373 = cbLight._m0[_2352].y + _469;
        float _2374 = cbLight._m0[_2352].z + _470;
        float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
        float _2379 = _2378 * _2372;
        float _2380 = _2378 * _2373;
        float _2381 = _2378 * _2374;
        float _2382 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_2352].xyz));
        float _4313 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2386 = dot(vec3(_388, _389, _390), vec3(_2379, _2380, _2381));
        float _4324 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2390 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2379, _2380, _2381));
        float _4335 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2394 = _2371 * _2371;
        float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
        float _2407 = (exp2(log2(1.0 - (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2408 = 1.0 - _2371;
        float _2418 = (0.5 / (((_2165 * ((_2385 * _2408) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2408) + _2371) * _2385))) * _2385;
        float _4346 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2346 = (((_2407 * cbLight._m0[_2356].x) * _2420) * _2421) + _2288;
        _2348 = (((_2407 * cbLight._m0[_2356].y) * _2420) * _2421) + _2289;
        _2350 = (((_2407 * cbLight._m0[_2356].z) * _2420) * _2421) + _2290;
    }
    float _2452;
    float _2454;
    float _2456;
    if (_2074)
    {
        _2452 = _2346;
        _2454 = _2348;
        _2456 = _2350;
    }
    else
    {
        uint _2463 = _1889 + 3u;
        uint _2467 = _1889 + 11u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _391) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _468;
        float _2484 = cbLight._m0[_2463].y + _469;
        float _2485 = cbLight._m0[_2463].z + _470;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_2463].xyz));
        float _4362 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2497 = dot(vec3(_388, _389, _390), vec3(_2490, _2491, _2492));
        float _4373 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4384 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2518 = (exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2519 = 1.0 - _2482;
        float _2529 = (0.5 / (((_2165 * ((_2496 * _2519) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2519) + _2482) * _2496))) * _2496;
        float _4395 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2452 = (((_2518 * cbLight._m0[_2467].x) * _2531) * _2532) + _2346;
        _2454 = (((_2518 * cbLight._m0[_2467].y) * _2531) * _2532) + _2348;
        _2456 = (((_2518 * cbLight._m0[_2467].z) * _2531) * _2532) + _2350;
    }
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    if (_1887.y == 0u)
    {
        uvec4 _2553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2554 = _2553.x;
        uint _2565 = uint((float(_2553.y) * floor(float(uint(cbSceneParam._m0[85u].y * _490) / _2554))) + floor(float(uint(cbSceneParam._m0[85u].x * _489) / _2554)));
        float _2575 = (log2(_1665 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2576 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        uint _2579 = uint(isnan(14.0) ? _2576 : (isnan(_2576) ? 14.0 : min(_2576, 14.0)));
        uvec4 _2584 = texelFetch(g_lightClusterGridBuffer, int(((_2579 << 2u) + (_2565 << 6u)) >> 2u));
        uint _2585 = _2584.x;
        uint _2586 = _2553.z;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        if (((((1u << ((_2586 >> 4u) & 15u)) + 4294967295u) & _2585) == 0u) || ((_2586 & 240u) == 0u))
        {
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
        }
        else
        {
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            uint _2822 = 0u;
            uint _2831;
            bool _2832;
            for (;;)
            {
                _2831 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2822 << 2u)) >> 2u)).x;
                _2832 = _2831 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2832)
                {
                    frontier_phi_73_pred = _2821;
                    frontier_phi_73_pred_1 = _2820;
                    frontier_phi_73_pred_2 = _2819;
                    frontier_phi_73_pred_3 = _2818;
                    frontier_phi_73_pred_4 = _2817;
                    frontier_phi_73_pred_5 = _2816;
                }
                else
                {
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    uint _2967;
                    _2961 = _2816;
                    _2962 = _2817;
                    _2963 = _2818;
                    _2964 = _2819;
                    _2965 = _2820;
                    _2966 = _2821;
                    _2967 = _2831;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    for (;;)
                    {
                        uint _2971 = uint(findLSB(_2967)) + (_2822 << 5u);
                        uint _2968 = (_2967 + 4294967295u) & _2967;
                        uint _2973 = _2971 * 48u;
                        vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2973)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 3u)).x));
                        uint _2993 = (_2971 * 48u) + 4u;
                        vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2993)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 3u)).x));
                        uint _3012 = (_2971 * 48u) + 8u;
                        vec3 _3023 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x));
                        float _3027 = _2987.x - _1663;
                        float _3028 = _2987.y - _1664;
                        float _3029 = _2987.z - _1665;
                        float _3030 = dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029));
                        float _3033 = inversesqrt(_3030);
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3037 = dot(vec3(_510, _513, _516), vec3(_3034, _3035, _3036));
                        float _3042 = 1.0 - (_3030 * _2987.w);
                        float _4421 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3043 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3044 = sqrt(_3030) * _3006.w;
                        float _3047 = 1.39999997615814208984375 / (_3044 + 1.39999997615814208984375);
                        float _3048 = _3047 * _3047;
                        float _3051 = ((1.0 - _3048) * _3037) + _3048;
                        float _3054 = _3044 * _3044;
                        float _3058 = ((isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))) * _3043) / ((_3054 * 0.699999988079071044921875) + 1.0);
                        float _3062 = (-0.0) - _1663;
                        float _3063 = (-0.0) - _1664;
                        float _3064 = (-0.0) - _1665;
                        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                        float _3069 = _3068 * _3062;
                        float _3070 = _3068 * _3063;
                        float _3071 = _3068 * _3064;
                        float _3078 = exp2(log2(1.0 / ((_3054 * 3.5) + 5.0)) * 0.25);
                        float _3079 = 1.0 - _571;
                        float _3086 = sqrt(1.0 - ((1.0 - (_3079 * _3079)) * (1.0 - (_3078 * _3078))));
                        float _3087 = _3086 * _3086;
                        float _3088 = _3087 * _3087;
                        float _3089 = _3069 + _3034;
                        float _3090 = _3070 + _3035;
                        float _3091 = _3071 + _3036;
                        float _3095 = inversesqrt(dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091)));
                        float _3099 = dot(vec3(_510, _513, _516), vec3(_3069, _3070, _3071));
                        float _4437 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3102 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3103 = dot(vec3(_510, _513, _516), vec3(_3095 * _3089, _3095 * _3090, _3095 * _3091));
                        float _4448 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3106 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3110 = ((_3106 * _3106) * (_3088 + (-1.0))) + 1.0;
                        float _3111 = _3047 * _3087;
                        float _3112 = _3111 * _3111;
                        float _3115 = ((1.0 - _3112) * _3037) + _3112;
                        float _4459 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3116 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3117 = 1.0 - _3087;
                        float _3127 = (0.5 / (((_3116 * ((_3102 * _3117) + _3087)) + 9.9999999392252902907785028219223e-09) + (((_3116 * _3117) + _3087) * _3102))) * _3116;
                        float _4470 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3138 = (((_3088 * 3.1415927410125732421875) * (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) / ((_3110 * _3110) * ((_3054 * 2.1991131305694580078125) + 3.141590118408203125))) * _3043;
                        _2891 = (_3058 * _3006.x) + _2964;
                        _2892 = (_3058 * _3006.y) + _2965;
                        _2893 = (_3058 * _3006.z) + _2966;
                        _2888 = (_3138 * _3023.x) + _2961;
                        _2889 = (_3138 * _3023.y) + _2962;
                        _2890 = (_3138 * _3023.z) + _2963;
                        if (_2968 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2961 = _2888;
                            _2962 = _2889;
                            _2963 = _2890;
                            _2964 = _2891;
                            _2965 = _2892;
                            _2966 = _2893;
                            _2967 = _2968;
                        }
                    }
                    frontier_phi_73_pred = _2893;
                    frontier_phi_73_pred_1 = _2892;
                    frontier_phi_73_pred_2 = _2891;
                    frontier_phi_73_pred_3 = _2890;
                    frontier_phi_73_pred_4 = _2889;
                    frontier_phi_73_pred_5 = _2888;
                }
                _2675 = frontier_phi_73_pred;
                _2673 = frontier_phi_73_pred_1;
                _2671 = frontier_phi_73_pred_2;
                _2669 = frontier_phi_73_pred_3;
                _2667 = frontier_phi_73_pred_4;
                _2665 = frontier_phi_73_pred_5;
                uint _2823 = _2822 + 1u;
                if (_2823 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2816 = _2665;
                    _2817 = _2667;
                    _2818 = _2669;
                    _2819 = _2671;
                    _2820 = _2673;
                    _2821 = _2675;
                    _2822 = _2823;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
        }
        uvec4 _2678 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2679 = _2678.z;
        uint _2681 = (_2679 >> 8u) & 15u;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        if (((4294967295u << _2681) & _2585) == 0u)
        {
            _2784 = _2664;
            _2786 = _2666;
            _2788 = _2668;
            _2790 = _2670;
            _2792 = _2672;
            _2794 = _2674;
        }
        else
        {
            float _2809 = inversesqrt(dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665)));
            float _2810 = _2809 * _1663;
            float _2811 = _2809 * _1664;
            float _2812 = _2809 * _1665;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2681 < ((_2679 >> 12u) & 15u))
            {
                float _2785;
                float _2787;
                float _2789;
                float _2791;
                float _2793;
                float _2795;
                float _2944 = _2664;
                float _2945 = _2666;
                float _2946 = _2668;
                float _2947 = _2670;
                float _2948 = _2672;
                float _2949 = _2674;
                uint _2950 = _2681;
                uint _2959;
                bool _2960;
                for (;;)
                {
                    _2959 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2950 << 2u)) >> 2u)).x;
                    _2960 = _2959 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2960)
                    {
                        frontier_phi_84_pred = _2948;
                        frontier_phi_84_pred_1 = _2947;
                        frontier_phi_84_pred_2 = _2946;
                        frontier_phi_84_pred_3 = _2945;
                        frontier_phi_84_pred_4 = _2944;
                        frontier_phi_84_pred_5 = _2949;
                    }
                    else
                    {
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3165 = _2944;
                        float _3166 = _2945;
                        float _3167 = _2946;
                        float _3168 = _2947;
                        float _3169 = _2948;
                        float _3170 = _2949;
                        uint _3171 = _2959;
                        uint _3172;
                        vec4 _3197;
                        float _3198;
                        vec4 _3213;
                        vec3 _3225;
                        vec4 _3241;
                        vec4 _3257;
                        float _3304;
                        bool _3305;
                        for (;;)
                        {
                            uint _3182 = ((_2950 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3171));
                            _3172 = (_3171 + 4294967295u) & _3171;
                            uint _3184 = _3182 * 40u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            _3198 = _3197.w;
                            uint _3200 = (_3182 * 40u) + 4u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3215 = (_3182 * 40u) + 8u;
                            _3225 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x));
                            uint _3228 = (_3182 * 40u) + 16u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3244 = (_3182 * 40u) + 20u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3260 = (_3182 * 40u) + 24u;
                            vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3279 = (_3182 * 40u) + 28u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3304 = fma(_1665, _3292.z, fma(_1664, _3292.y, _3292.x * _1663)) + _3292.w;
                            _3305 = !((fma(_1665, _3273.z, fma(_1664, _3273.y, _3273.x * _1663)) + _3273.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3305)
                            {
                                float _3332 = _3197.x - _1663;
                                float _3333 = _3197.y - _1664;
                                float _3334 = _3197.z - _1665;
                                float _3335 = dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334));
                                float _3338 = inversesqrt(_3335);
                                float _3339 = _3338 * _3332;
                                float _3340 = _3338 * _3333;
                                float _3341 = _3338 * _3334;
                                float _3345 = 1.0 - (_3335 / (_3198 * _3198));
                                float _4481 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3350 = sqrt(_3335) * _3213.w;
                                float _3352 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                                float _3353 = _3352 * _3352;
                                float _3356 = ((1.0 - _3353) * dot(vec3(_3339, _3340, _3341), vec3(_510, _513, _516))) + _3353;
                                float _3359 = _3350 * _3350;
                                float _3363 = (fma(_1665, _3241.z, fma(_1664, _3241.y, _3241.x * _1663)) + _3241.w) / _3304;
                                float _3364 = (fma(_1665, _3257.z, fma(_1664, _3257.y, _3257.x * _1663)) + _3257.w) / _3304;
                                float _3368 = 1.0 - dot(vec2(_3363, _3364), vec2(_3363, _3364));
                                float _4497 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3370 = _3369 * (((isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0))) * _3346) / ((_3359 * 0.699999988079071044921875) + 1.0));
                                float _3382 = exp2(log2(1.0 / ((_3359 * 3.5) + 5.0)) * 0.25);
                                float _3383 = 1.0 - _571;
                                float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                                float _3391 = _3390 * _3390;
                                float _3392 = _3391 * _3391;
                                float _3393 = _3339 - _2810;
                                float _3394 = _3340 - _2811;
                                float _3395 = _3341 - _2812;
                                float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                                float _3403 = dot(vec3(_510, _513, _516), vec3((-0.0) - _2810, (-0.0) - _2811, (-0.0) - _2812));
                                float _4508 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3406 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3407 = dot(vec3(_510, _513, _516), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                                float _4519 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                                float _3415 = _3352 * _3391;
                                float _3416 = _3415 * _3415;
                                float _3422 = ((1.0 - _3416) * dot(vec3(_510, _513, _516), vec3(_3339, _3340, _3341))) + _3416;
                                float _4530 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3424 = 1.0 - _3391;
                                float _3434 = (0.5 / (((_3423 * ((_3406 * _3424) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3391) * _3406))) * _3423;
                                float _4541 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3444 = (_3369 * _3346) * (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) / ((_3414 * _3414) * ((_3359 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3370 * _3213.y;
                                frontier_phi_90_pred_1 = _3370 * _3213.x;
                                frontier_phi_90_pred_2 = _3444 * _3225.z;
                                frontier_phi_90_pred_3 = _3444 * _3225.y;
                                frontier_phi_90_pred_4 = _3444 * _3225.x;
                                frontier_phi_90_pred_5 = _3370 * _3213.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3452 = frontier_phi_90_pred;
                            _3451 = frontier_phi_90_pred_1;
                            _3450 = frontier_phi_90_pred_2;
                            _3449 = frontier_phi_90_pred_3;
                            _3448 = frontier_phi_90_pred_4;
                            _3453 = frontier_phi_90_pred_5;
                            _3155 = _3451 + _3168;
                            _3156 = _3452 + _3169;
                            _3157 = _3453 + _3170;
                            _3152 = _3448 + _3165;
                            _3153 = _3449 + _3166;
                            _3154 = _3450 + _3167;
                            if (_3172 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3172;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3156;
                        frontier_phi_84_pred_1 = _3155;
                        frontier_phi_84_pred_2 = _3154;
                        frontier_phi_84_pred_3 = _3153;
                        frontier_phi_84_pred_4 = _3152;
                        frontier_phi_84_pred_5 = _3157;
                    }
                    _2793 = frontier_phi_84_pred;
                    _2791 = frontier_phi_84_pred_1;
                    _2789 = frontier_phi_84_pred_2;
                    _2787 = frontier_phi_84_pred_3;
                    _2785 = frontier_phi_84_pred_4;
                    _2795 = frontier_phi_84_pred_5;
                    uint _2951 = _2950 + 1u;
                    if (_2951 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2944 = _2785;
                        _2945 = _2787;
                        _2946 = _2789;
                        _2947 = _2791;
                        _2948 = _2793;
                        _2949 = _2795;
                        _2950 = _2951;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2795;
                frontier_phi_65_66_ladder_1 = _2791;
                frontier_phi_65_66_ladder_2 = _2793;
                frontier_phi_65_66_ladder_3 = _2787;
                frontier_phi_65_66_ladder_4 = _2785;
                frontier_phi_65_66_ladder_5 = _2789;
            }
            else
            {
                frontier_phi_65_66_ladder = _2674;
                frontier_phi_65_66_ladder_1 = _2670;
                frontier_phi_65_66_ladder_2 = _2672;
                frontier_phi_65_66_ladder_3 = _2666;
                frontier_phi_65_66_ladder_4 = _2664;
                frontier_phi_65_66_ladder_5 = _2668;
            }
            _2784 = frontier_phi_65_66_ladder_4;
            _2786 = frontier_phi_65_66_ladder_3;
            _2788 = frontier_phi_65_66_ladder_5;
            _2790 = frontier_phi_65_66_ladder_1;
            _2792 = frontier_phi_65_66_ladder_2;
            _2794 = frontier_phi_65_66_ladder;
        }
        float _2799 = isnan(1.0) ? _555 : (isnan(_555) ? 1.0 : min(_555, 1.0));
        _2597 = (_2799 * _2790) + _2129;
        _2599 = (_2799 * _2792) + _2131;
        _2601 = (_2799 * _2794) + _2133;
        _2603 = ((_2784 * 0.039999999105930328369140625) * _2799) + _2452;
        _2605 = ((_2786 * 0.039999999105930328369140625) * _2799) + _2454;
        _2607 = ((_2788 * 0.039999999105930328369140625) * _2799) + _2456;
    }
    else
    {
        _2597 = _2129;
        _2599 = _2131;
        _2601 = _2133;
        _2603 = _2452;
        _2605 = _2454;
        _2607 = _2456;
    }
    float _4557 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4568 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4579 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _2624 = ((isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2597 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _555))) + ((_2603 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1393)) * cbPerFrame._m0[3u].x);
    float _2625 = ((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2599 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _555))) + ((_2605 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1393)) * cbPerFrame._m0[3u].x);
    float _2626 = ((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2601 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _555))) + ((_2607 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1393)) * cbPerFrame._m0[3u].x);
    uint _2627 = _529 + 6u;
    float _2635 = _489 / cbSceneParam._m0[86u].x;
    float _2636 = _490 / cbSceneParam._m0[86u].y;
    vec4 _2650 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2635, _2636, (log2((isnan(cbSceneParam._m0[77u].w) ? _410 : (isnan(_410) ? cbSceneParam._m0[77u].w : min(_410, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2652 = _2650.x;
    float _2653 = _2650.y;
    float _2654 = _2650.z;
    float _2655 = _2650.w;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_410 > cbSceneParam._m0[78u].w)
    {
        float _2689 = isnan(_410) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _410 : min(cbSceneParam._m0[80u].w, _410));
        float _2690 = _2689 / _410;
        float _2701 = _2690 * _461;
        float _2702 = _462 * _2690;
        float _2703 = (-0.0) - _2702;
        float _2704 = _2690 * _463;
        float _2706 = (cbSceneParam._m0[77u].w * _2703) / _2689;
        float _2707 = _2706 + cbSceneParam._m0[79u].w;
        float _2708 = cbSceneParam._m0[79u].w - _2702;
        float _2714 = sqrt(((_2701 * _2701) + (_2702 * _2702)) + (_2704 * _2704));
        float _2717 = (1.0 - (cbSceneParam._m0[77u].w / _2689)) * _2714;
        float _2722 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2724 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2901;
        if (abs((_2703 - _2706) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2901 = ((((_2707 > 0.0) ? exp2(_2722 * _2707) : (2.0 - exp2(_2724 * _2707))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2717;
        }
        else
        {
            float _2845 = 1.0 / cbSceneParam._m0[80u].x;
            float _2846 = isnan(_2708) ? _2707 : (isnan(_2707) ? _2708 : max(_2707, _2708));
            float _2847 = isnan(_2708) ? _2707 : (isnan(_2707) ? _2708 : min(_2707, _2708));
            float _2856 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : min(_2846, 0.0));
            float _2857 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : min(_2847, 0.0));
            _2901 = ((abs(_2714 / _2703) * cbSceneParam._m0[80u].y) * ((((_2856 - _2857) * 2.0) - ((exp2(_2722 * (isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0)))) - exp2(_2722 * (isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0))))) * _2845)) - ((exp2(_2724 * _2856) - exp2(_2724 * _2857)) * _2845))) + (_2717 * cbSceneParam._m0[80u].z);
        }
        vec4 _2903 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2635, _2636, 1.0), 0.0);
        float _2912 = exp2((_2901 * (-1.44269502162933349609375)) * (1.0 - _2903.w));
        float _2913 = log2(_2912);
        float _2929 = log2(_2655);
        _2726 = (exp2(_2929 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].x)) * _2903.x) / cbSceneParam._m0[78u].x)) + _2652;
        _2728 = (exp2(_2929 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].y)) * _2903.y) / cbSceneParam._m0[78u].y)) + _2653;
        _2730 = (exp2(_2929 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].z)) * _2903.z) / cbSceneParam._m0[78u].z)) + _2654;
        _2732 = _2912 * _2655;
    }
    else
    {
        _2726 = _2652;
        _2728 = _2653;
        _2730 = _2654;
        _2732 = _2655;
    }
    bool _2939;
    vec4 _2742;
    vec4 _2764;
    float _2766;
    float _2770;
    float _2771;
    float _2772;
    float _2773;
    bool _2783;
    for (;;)
    {
        _2742 = cbMatDynParam._m0[0u];
        float _2744 = roundEven(_2742.y);
        bool _2745 = _2744 == 3.0;
        float _2746 = log2(_2732);
        float _2753 = exp2(_2746 * cbSceneParam._m0[78u].x) * _2624;
        float _2754 = exp2(_2746 * cbSceneParam._m0[78u].y) * _2625;
        float _2755 = exp2(_2746 * cbSceneParam._m0[78u].z) * _2626;
        float _2762 = _477 + (-0.5);
        _2764 = cbMtdParam._m0[1u];
        _2766 = _2764.y * _2762;
        float _2769 = (_2744 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2770 = _2769 * (_2745 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2726)));
        _2771 = _2769 * (_2745 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2728)));
        _2772 = _2769 * (_2745 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2730)));
        _2773 = _2762 * 0.999000012874603271484375;
        _2783 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2783)
        {
            if ((cbInstanceData._m0[_529 + 7u].x + _2773) < 0.5)
            {
                _2939 = true;
                break;
            }
        }
        uint _2880 = _531 + uint(_2742.w);
        if ((cbInstanceData._m0[_2880].w < 1.0) && ((cbInstanceData._m0[_2880].w + _2773) < 0.5))
        {
            _2939 = true;
            break;
        }
        if ((_2766 + 1.0) < _2764.x)
        {
            _2939 = true;
            break;
        }
        _2939 = false;
        break;
    }
    float _3143;
    if (_2939)
    {
        discard_state = true;
        _3143 = 0.0;
    }
    else
    {
        _3143 = cbInstanceData._m0[_2627].w;
    }
    SV_Target.x = _2770;
    SV_Target.y = _2771;
    SV_Target.z = _2772;
    SV_Target.w = _3143;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2627].w;
    discard_exit();
}


