#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _951;
float _3319;
float _3320;
float _3321;
float _3322;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _274 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _307 = (TEXCOORD_7.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMtdParam._m0[11u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[11u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3331 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _315 = (_308 * ((_274.x * cbMtdParam._m0[10u].x) - _253)) + _253;
    float _316 = (_308 * ((_274.y * cbMtdParam._m0[10u].y) - _254)) + _254;
    float _317 = (_308 * ((_274.z * cbMtdParam._m0[10u].z) - _255)) + _255;
    vec4 _329 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _331 = _329.x;
    float _332 = _329.y;
    float _333 = _329.z;
    vec4 _345 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _358 = ((_345.z - _333) * _308) + _333;
    float _362 = ((((_345.x - _331) * _308) + _331) * 2.0) + (-1.0);
    float _364 = ((((_345.y - _332) * _308) + _332) * 2.0) + (-1.0);
    float _365 = dot(vec2(_362, _364), vec2(_362, _364));
    float _3342 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _370 = sqrt(1.0 - (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))));
    float _373 = fma(_370, _219, fma(_364, _211 * TANGENT.x, (_197 * _189) * _362));
    float _376 = fma(_370, _220, fma(_364, _211 * TANGENT.y, (_197 * _190) * _362));
    float _379 = fma(_370, _221, fma(_364, _211 * TANGENT.z, (_197 * _191) * _362));
    float _383 = inversesqrt(dot(vec3(_373, _376, _379), vec3(_373, _376, _379)));
    float _384 = _383 * _373;
    float _385 = _383 * _376;
    float _386 = _383 * _379;
    float _3353 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _387 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _3364 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3375 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3386 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _406 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _457 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _447);
    float _458 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _447);
    float _459 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _447);
    float _463 = inversesqrt(dot(vec3(_457, _458, _459), vec3(_457, _458, _459)));
    float _464 = _457 * _463;
    float _465 = _458 * _463;
    float _466 = _459 * _463;
    vec4 _471 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _473 = _471.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _631 = sqrt(((_457 * _457) + (_458 * _458)) + (_459 * _459));
        float _637 = (cbMatDynParam._m0[5u].x * _631) + cbMatDynParam._m0[5u].y;
        float _3397 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _642 = (cbMatDynParam._m0[5u].z * _631) + cbMatDynParam._m0[5u].w;
        float _3408 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) - _638)) + _638) < ((_473 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _485 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _486 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _506 = fma(_386, cbSceneParam._m0[5u].z, fma(_385, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _384));
    float _509 = fma(_386, cbSceneParam._m0[6u].z, fma(_385, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _384));
    float _512 = fma(_386, cbSceneParam._m0[7u].z, fma(_385, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _384));
    uint _525 = uint(roundEven(NORMAL.w)) * 13u;
    uint _527 = _525 + 9u;
    uint _528 = _527 + uint(cbMatDynParam._m0[0u].w);
    float _534 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_528].x;
    float _535 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_528].y;
    float _536 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_528].z;
    float _3419 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _537 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _539 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    vec4 _548 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _485, cbSceneParam._m0[86u].y * _486));
    float _551 = _548.x * TEXCOORD_7.w;
    float _552 = dot(vec3(_384, _385, _386), vec3(_464, _465, _466));
    float _555 = _552 * 2.0;
    float _559 = (_555 * _384) - _464;
    float _560 = (_555 * _385) - _465;
    float _561 = (_555 * _386) - _466;
    float _565 = abs(dot(vec3(_464, _465, _466), vec3(_384, _385, _386)));
    float _3452 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _567 = sqrt(_387);
    float _580 = exp2((_567 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_567 * 3.0));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _950;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _675 = fma(_620, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612));
        float _679 = fma(_620, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612));
        float _683 = fma(_620, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612));
        float _708 = _612 + _384;
        float _709 = _616 + _385;
        float _710 = _620 + _386;
        float _720 = fma(_710, cbModelParam._m0[26u].z, fma(_709, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _708)) - _675;
        float _721 = fma(_710, cbModelParam._m0[27u].z, fma(_709, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _708)) - _679;
        float _722 = fma(_710, cbModelParam._m0[28u].z, fma(_709, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _708)) - _683;
        float _726 = inversesqrt(dot(vec3(_720, _721, _722), vec3(_720, _721, _722)));
        float _739 = ((_726 * _720) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_675 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _740 = ((_726 * _721) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_679 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _741 = ((_726 * _722) / cbModelParam._m0[34u].z) + ((((((_683 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        float _778 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_744.x + (-0.5));
        float _780 = _778 * (_744.y + (-0.5));
        float _781 = _778 * (_744.z + (-0.5));
        float _788 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_751.x + (-0.5));
        float _790 = _788 * (_751.y + (-0.5));
        float _791 = _788 * (_751.z + (-0.5));
        float _798 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_758.x + (-0.5));
        float _800 = _798 * (_758.y + (-0.5));
        float _801 = _798 * (_758.z + (-0.5));
        float _808 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_765.x + (-0.5));
        float _810 = _808 * (_765.y + (-0.5));
        float _811 = _808 * (_765.z + (-0.5));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _815 = _779 * 0.5;
        float _816 = _789 * 0.5;
        float _817 = _799 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _832 = (dot(vec3(_384, _385, _386), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _842 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3500 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_844 + 1.0))) + _849) * _812;
        float _859 = _780 * 0.5;
        float _860 = _790 * 0.5;
        float _861 = _800 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _875 = (dot(vec3(_384, _385, _386), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _884 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3533 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_886 + 1.0))) + _891) * _813;
        float _901 = _781 * 0.5;
        float _902 = _791 * 0.5;
        float _903 = _801 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _917 = (dot(vec3(_384, _385, _386), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _926 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_814 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3566 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_928 + 1.0))) + _933) * _814;
        _950 = _781;
        _952 = _780;
        _953 = _779;
        _954 = _791;
        _955 = _790;
        _956 = _789;
        _957 = _801;
        _958 = _800;
        _959 = _799;
        _960 = _814;
        _961 = _813;
        _962 = _812;
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
        _965 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
    }
    else
    {
        _950 = _951;
        _952 = _951;
        _953 = _951;
        _954 = _951;
        _955 = _951;
        _956 = _951;
        _957 = _951;
        _958 = _951;
        _959 = _951;
        _960 = _951;
        _961 = _951;
        _962 = _951;
        _963 = 0.0;
        _964 = 0.0;
        _965 = 0.0;
    }
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _994 = fma(_620, cbModelParam._m0[30u].z, fma(_616, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _612));
        float _998 = fma(_620, cbModelParam._m0[31u].z, fma(_616, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _612));
        float _1002 = fma(_620, cbModelParam._m0[32u].z, fma(_616, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _612));
        float _1025 = _612 + _384;
        float _1026 = _616 + _385;
        float _1027 = _620 + _386;
        float _1037 = fma(_1027, cbModelParam._m0[30u].z, fma(_1026, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1025)) - _994;
        float _1038 = fma(_1027, cbModelParam._m0[31u].z, fma(_1026, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1025)) - _998;
        float _1039 = fma(_1027, cbModelParam._m0[32u].z, fma(_1026, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1025)) - _1002;
        float _1043 = inversesqrt(dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039)));
        float _1056 = ((_1043 * _1037) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_994 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1043 * _1038) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_998 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1043 * _1039) / cbModelParam._m0[35u].z) + ((((((_1002 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        float _1093 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1060.x + (-0.5));
        float _1095 = _1093 * (_1060.y + (-0.5));
        float _1096 = _1093 * (_1060.z + (-0.5));
        float _1103 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1067.x + (-0.5));
        float _1105 = _1103 * (_1067.y + (-0.5));
        float _1106 = _1103 * (_1067.z + (-0.5));
        float _1113 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1074.x + (-0.5));
        float _1115 = _1113 * (_1074.y + (-0.5));
        float _1116 = _1113 * (_1074.z + (-0.5));
        float _1123 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1081.x + (-0.5));
        float _1125 = _1123 * (_1081.y + (-0.5));
        float _1126 = _1123 * (_1081.z + (-0.5));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = _1094 * 0.5;
        float _1131 = _1104 * 0.5;
        float _1132 = _1114 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_384, _385, _386), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3629 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1157 + 1.0))) + _1162) * _1127;
        float _1172 = _1095 * 0.5;
        float _1173 = _1105 * 0.5;
        float _1174 = _1115 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_384, _385, _386), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3662 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1199 + 1.0))) + _1204) * _1128;
        float _1214 = _1096 * 0.5;
        float _1215 = _1106 * 0.5;
        float _1216 = _1116 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_384, _385, _386), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3695 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1241 + 1.0))) + _1246) * _1129;
        _1263 = _1096;
        _1264 = _1095;
        _1265 = _1094;
        _1266 = _1106;
        _1267 = _1105;
        _1268 = _1104;
        _1269 = _1116;
        _1270 = _1115;
        _1271 = _1114;
        _1272 = _1129;
        _1273 = _1128;
        _1274 = _1127;
        _1275 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
    }
    else
    {
        _1263 = _951;
        _1264 = _951;
        _1265 = _951;
        _1266 = _951;
        _1267 = _951;
        _1268 = _951;
        _1269 = _951;
        _1270 = _951;
        _1271 = _951;
        _1272 = _951;
        _1273 = _951;
        _1274 = _951;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1287 = (cbModelParam._m0[1u].x * (_1275 - _963)) + _963;
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _964)) + _964;
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _965)) + _965;
    float _1310 = fma(_1289, cbSceneParam._m0[89u].z, fma(_1288, cbSceneParam._m0[89u].y, _1287 * cbSceneParam._m0[89u].x));
    float _1313 = fma(_1289, cbSceneParam._m0[90u].z, fma(_1288, cbSceneParam._m0[90u].y, _1287 * cbSceneParam._m0[90u].x));
    float _1316 = fma(_1289, cbSceneParam._m0[91u].z, fma(_1288, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1287));
    float _1331 = _559 * 0.5;
    float _1332 = _560 * 0.5;
    float _1333 = _561 * 0.5;
    float _1334 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1337 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1340 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1374;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1347 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_950, _954, _957, _960));
        float _1351 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_952, _955, _958, _961));
        float _1355 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_953, _956, _959, _962));
        float _1362 = dot(vec4(cbModelParam._m0[39u]), vec4(_1331, _1332, _1333, 1.0));
        _1374 = dot(vec3(isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1362) ? 0.0 : (isnan(0.0) ? _1362 : max(0.0, _1362))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1374 = 1.0;
    }
    float _1385;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1376 = dot(vec4(cbModelParam._m0[40u]), vec4(_1331, _1332, _1333, 1.0));
        _1385 = dot(vec3(isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1376) ? 0.0 : (isnan(0.0) ? _1376 : max(0.0, _1376))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1385 = 1.0;
    }
    float _1389 = (_1385 * cbModelParam._m0[1u].x) + (_1374 * (1.0 - cbModelParam._m0[1u].x));
    float _1399 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _387);
    float _1400 = isnan(_1399) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1399 : min(cbModelParam._m0[25u].z, _1399));
    float _1482;
    float _1484;
    float _1486;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1449 = fma(_620, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _612)) + cbModelParam._m0[13u].w;
        float _1453 = fma(_620, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _612)) + cbModelParam._m0[14u].w;
        float _1457 = fma(_620, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _612)) + cbModelParam._m0[15u].w;
        float _1460 = fma(_561, cbModelParam._m0[13u].z, fma(_560, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _559));
        float _1463 = fma(_561, cbModelParam._m0[14u].z, fma(_560, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _559));
        float _1466 = fma(_561, cbModelParam._m0[15u].z, fma(_560, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _559));
        float _1494;
        if (_1460 > 0.0)
        {
            _1494 = abs((1.0 - _1449) / _1460);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1449 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1494 = frontier_phi_19_17_ladder;
        }
        float _1698;
        if (_1463 > 0.0)
        {
            _1698 = abs((1.0 - _1453) / _1463);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1453 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1698 = frontier_phi_28_24_ladder;
        }
        float _1941;
        if (_1466 > 0.0)
        {
            _1941 = abs((1.0 - _1457) / _1466);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1457 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1941 = frontier_phi_40_35_ladder;
        }
        float _1943 = isnan(_1698) ? _1494 : (isnan(_1494) ? _1698 : min(_1494, _1698));
        float _1944 = isnan(_1941) ? _1943 : (isnan(_1943) ? _1941 : min(_1943, _1941));
        float _1948 = (_1944 * _1460) + _1449;
        float _1949 = (_1944 * _1463) + _1453;
        float _1950 = (_1944 * _1466) + _1457;
        float _1951 = _1944 * 9.9999997473787516355514526367188e-05;
        float _1953 = (-1.0) - _1951;
        float _1955 = _1951 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1950 > _1955) || ((_1950 < _1953) || ((_1949 > _1955) || ((_1949 < _1953) || ((_1948 < _1953) || (_1948 > _1955))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1950, cbModelParam._m0[9u].z, fma(_1949, cbModelParam._m0[9u].y, _1948 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1950, cbModelParam._m0[10u].z, fma(_1949, cbModelParam._m0[10u].y, _1948 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1950, cbModelParam._m0[11u].z, fma(_1949, cbModelParam._m0[11u].y, _1948 * cbModelParam._m0[11u].x))), _1400);
            frontier_phi_18_40_ladder = _2074.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2074.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2074.x * cbModelParam._m0[1u].y;
        }
        _1482 = frontier_phi_18_40_ladder_2;
        _1484 = frontier_phi_18_40_ladder_1;
        _1486 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1470 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_559, _560, _561), _1400);
        _1482 = _1470.x * cbModelParam._m0[1u].y;
        _1484 = _1470.y * cbModelParam._m0[1u].y;
        _1486 = _1470.z * cbModelParam._m0[1u].y;
    }
    float _1490 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _387);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1490 : min(cbModelParam._m0[25u].w, _1490));
    float _1584;
    float _1586;
    float _1588;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1548 = fma(_620, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _612)) + cbModelParam._m0[21u].w;
        float _1552 = fma(_620, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _612)) + cbModelParam._m0[22u].w;
        float _1556 = fma(_620, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _612)) + cbModelParam._m0[23u].w;
        float _1559 = fma(_561, cbModelParam._m0[21u].z, fma(_560, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _559));
        float _1562 = fma(_561, cbModelParam._m0[22u].z, fma(_560, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _559));
        float _1565 = fma(_561, cbModelParam._m0[23u].z, fma(_560, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _559));
        float _1703;
        if (_1559 > 0.0)
        {
            _1703 = abs((1.0 - _1548) / _1559);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1548 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1703 = frontier_phi_30_26_ladder;
        }
        float _1968;
        if (_1562 > 0.0)
        {
            _1968 = abs((1.0 - _1552) / _1562);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1552 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1968 = frontier_phi_42_37_ladder;
        }
        float _2173;
        if (_1565 > 0.0)
        {
            _2173 = abs((1.0 - _1556) / _1565);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1556 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2173 = frontier_phi_51_48_ladder;
        }
        float _2175 = isnan(_1968) ? _1703 : (isnan(_1703) ? _1968 : min(_1703, _1968));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1559) + _1548;
        float _2181 = (_2176 * _1562) + _1552;
        float _2182 = (_2176 * _1565) + _1556;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2184 = (-1.0) - _2183;
        float _2186 = _2183 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2182 > _2186) || ((_2182 < _2184) || ((_2181 > _2186) || ((_2181 < _2184) || ((_2180 < _2184) || (_2180 > _2186))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2380 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2182, cbModelParam._m0[17u].z, fma(_2181, cbModelParam._m0[17u].y, _2180 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2182, cbModelParam._m0[18u].z, fma(_2181, cbModelParam._m0[18u].y, _2180 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2182, cbModelParam._m0[19u].z, fma(_2181, cbModelParam._m0[19u].y, _2180 * cbModelParam._m0[19u].x))), _1491);
            frontier_phi_27_51_ladder = _2380.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2380.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2380.x * cbModelParam._m0[1u].z;
        }
        _1584 = frontier_phi_27_51_ladder_2;
        _1586 = frontier_phi_27_51_ladder_1;
        _1588 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1568 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_559, _560, _561), _1491);
        _1584 = _1568.x * cbModelParam._m0[1u].z;
        _1586 = _1568.y * cbModelParam._m0[1u].z;
        _1588 = _1568.z * cbModelParam._m0[1u].z;
    }
    float _1600 = ((((1.0 - _580) * ((_567 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_580 * _567)) * _551;
    float _1601 = _1600 * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1602 = _1600 * ((cbModelParam._m0[1u].w * (_1586 - _1484)) + _1484);
    float _1603 = _1600 * ((cbModelParam._m0[1u].w * (_1588 - _1486)) + _1486);
    float _1606 = fma(_1603, cbSceneParam._m0[89u].z, fma(_1602, cbSceneParam._m0[89u].y, _1601 * cbSceneParam._m0[89u].x));
    float _1609 = fma(_1603, cbSceneParam._m0[90u].z, fma(_1602, cbSceneParam._m0[90u].y, _1601 * cbSceneParam._m0[90u].x));
    float _1612 = fma(_1603, cbSceneParam._m0[91u].z, fma(_1602, cbSceneParam._m0[91u].y, _1601 * cbSceneParam._m0[91u].x));
    uvec4 _1622 = floatBitsToUint(cbInstanceData._m0[_525 + 5u]);
    uint _1624 = _1622.x * 14u;
    uint _1625 = _1624 + 13u;
    float _1632 = _551 + (-1.0);
    float _1637 = (cbLight._m0[_1625].x * _1632) + 1.0;
    float _1638 = (cbLight._m0[_1625].y * _1632) + 1.0;
    float _1639 = (cbLight._m0[_1625].z * _1632) + 1.0;
    float _1640 = (cbLight._m0[_1625].w * _1632) + 1.0;
    uint _1641 = _1624 + 5u;
    float _1647 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
    uint _1651 = _1624 + 4u;
    float _1657 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
    uint _1661 = _1624 | 1u;
    float _1672 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_384, _385, _386));
    float _1675 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_384, _385, _386));
    float _3831 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _3842 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _1680 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.3183098733425140380859375;
    float _1682 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 0.3183098733425140380859375;
    float _1689 = ((cbLight._m0[_1641].x * _1647) * _1682) + ((cbLight._m0[_1651].x * _1657) * _1680);
    float _1690 = ((_1647 * cbLight._m0[_1641].y) * _1682) + ((_1657 * cbLight._m0[_1651].y) * _1680);
    float _1691 = ((_1647 * cbLight._m0[_1641].z) * _1682) + ((_1657 * cbLight._m0[_1651].z) * _1680);
    uvec4 _1695 = floatBitsToUint(cbLight._m0[_1624 + 12u]);
    bool _1697 = _1695.x == 0u;
    float _1708;
    float _1710;
    float _1712;
    if (_1697)
    {
        _1708 = _1689;
        _1710 = _1690;
        _1712 = _1691;
    }
    else
    {
        uint _1716 = _1624 + 6u;
        float _1732 = (dot(vec3(cbLight._m0[_1624 + 2u].xyz), vec3(_384, _385, _386)) * 0.5) + 0.5;
        float _1733 = _1732 * _1732;
        float _3853 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1735 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
        _1708 = (((cbLight._m0[_1716].x * 0.3183098733425140380859375) * _1734) * _1735) + _1689;
        _1710 = (((cbLight._m0[_1716].y * 0.3183098733425140380859375) * _1734) * _1735) + _1690;
        _1712 = (((cbLight._m0[_1716].z * 0.3183098733425140380859375) * _1734) * _1735) + _1691;
    }
    bool _1715 = _1695.y == 0u;
    float _1753;
    float _1755;
    float _1757;
    if (_1715)
    {
        _1753 = _1708;
        _1755 = _1710;
        _1757 = _1712;
    }
    else
    {
        uint _1912 = _1624 + 7u;
        float _1928 = (dot(vec3(cbLight._m0[_1624 + 3u].xyz), vec3(_384, _385, _386)) * 0.5) + 0.5;
        float _1929 = _1928 * _1928;
        float _3869 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1930 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1931 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _1753 = (((cbLight._m0[_1912].x * 0.3183098733425140380859375) * _1930) * _1931) + _1708;
        _1755 = (((cbLight._m0[_1912].y * 0.3183098733425140380859375) * _1930) * _1931) + _1710;
        _1757 = (((cbLight._m0[_1912].z * 0.3183098733425140380859375) * _1930) * _1931) + _1712;
    }
    uint _1760 = _1624 + 8u;
    float _1773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1624].w)) * _387) * 0.949999988079071044921875);
    float _1774 = _1773 * _1773;
    float _1775 = cbLight._m0[_1624].x + _464;
    float _1776 = cbLight._m0[_1624].y + _465;
    float _1777 = cbLight._m0[_1624].z + _466;
    float _1781 = inversesqrt(dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777)));
    float _1782 = _1781 * _1775;
    float _1783 = _1781 * _1776;
    float _1784 = _1781 * _1777;
    float _1785 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1624].xyz));
    float _3885 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _1789 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1790 = dot(vec3(_384, _385, _386), vec3(_1782, _1783, _1784));
    float _3907 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1793 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1794 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_1782, _1783, _1784));
    float _3918 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1798 = _1774 * _1774;
    float _1802 = ((_1793 * _1793) * (_1798 + (-1.0))) + 1.0;
    float _1813 = (exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1814 = 1.0 - _1774;
    float _1825 = (0.5 / (((_1789 * ((_1788 * _1814) + _1774)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _1814) + _1774) * _1788))) * _1788;
    float _3929 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1827 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1798 / ((_1802 * _1802) * 3.141590118408203125));
    uint _1838 = _1624 + 9u;
    float _1849 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1661].w)) * _387) * 0.949999988079071044921875);
    float _1850 = _1849 * _1849;
    float _1851 = cbLight._m0[_1661].x + _464;
    float _1852 = cbLight._m0[_1661].y + _465;
    float _1853 = cbLight._m0[_1661].z + _466;
    float _1857 = inversesqrt(dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853)));
    float _1858 = _1857 * _1851;
    float _1859 = _1857 * _1852;
    float _1860 = _1857 * _1853;
    float _1861 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1661].xyz));
    float _3940 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1864 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1865 = dot(vec3(_384, _385, _386), vec3(_1858, _1859, _1860));
    float _3951 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _1869 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_1858, _1859, _1860));
    float _3962 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1873 = _1850 * _1850;
    float _1877 = ((_1868 * _1868) * (_1873 + (-1.0))) + 1.0;
    float _1886 = (exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1887 = 1.0 - _1850;
    float _1897 = (0.5 / (((_1789 * ((_1864 * _1887) + _1850)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _1887) + _1850) * _1864))) * _1864;
    float _3973 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1899 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1873 / ((_1877 * _1877) * 3.141590118408203125));
    float _1909 = (((_1886 * cbLight._m0[_1838].x) * _1899) * _1647) + (((_1813 * cbLight._m0[_1760].x) * _1827) * _1657);
    float _1910 = (((_1886 * cbLight._m0[_1838].y) * _1899) * _1647) + (((_1813 * cbLight._m0[_1760].y) * _1827) * _1657);
    float _1911 = (((_1886 * cbLight._m0[_1838].z) * _1899) * _1647) + (((_1813 * cbLight._m0[_1760].z) * _1827) * _1657);
    float _1973;
    float _1975;
    float _1977;
    if (_1697)
    {
        _1973 = _1909;
        _1975 = _1910;
        _1977 = _1911;
    }
    else
    {
        uint _1979 = _1624 + 2u;
        uint _1983 = _1624 + 10u;
        float _1997 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _387) * 0.949999988079071044921875);
        float _1998 = _1997 * _1997;
        float _1999 = cbLight._m0[_1979].x + _464;
        float _2000 = cbLight._m0[_1979].y + _465;
        float _2001 = cbLight._m0[_1979].z + _466;
        float _2005 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
        float _2006 = _2005 * _1999;
        float _2007 = _2005 * _2000;
        float _2008 = _2005 * _2001;
        float _2009 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1979].xyz));
        float _3984 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2012 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _2013 = dot(vec3(_384, _385, _386), vec3(_2006, _2007, _2008));
        float _3995 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2016 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _2017 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2006, _2007, _2008));
        float _4006 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2021 = _1998 * _1998;
        float _2025 = ((_2016 * _2016) * (_2021 + (-1.0))) + 1.0;
        float _2034 = (exp2(log2(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2035 = 1.0 - _1998;
        float _2045 = (0.5 / (((_1789 * ((_2012 * _2035) + _1998)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _2035) + _1998) * _2012))) * _2012;
        float _4017 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2047 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_2021 / ((_2025 * _2025) * 3.141590118408203125));
        float _2048 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
        _1973 = (((_2034 * cbLight._m0[_1983].x) * _2047) * _2048) + _1909;
        _1975 = (((_2034 * cbLight._m0[_1983].y) * _2047) * _2048) + _1910;
        _1977 = (((_2034 * cbLight._m0[_1983].z) * _2047) * _2048) + _1911;
    }
    float _2083;
    float _2085;
    float _2087;
    if (_1715)
    {
        _2083 = _1973;
        _2085 = _1975;
        _2087 = _1977;
    }
    else
    {
        uint _2094 = _1624 + 3u;
        uint _2098 = _1624 + 11u;
        float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _387) * 0.949999988079071044921875);
        float _2113 = _2112 * _2112;
        float _2114 = cbLight._m0[_2094].x + _464;
        float _2115 = cbLight._m0[_2094].y + _465;
        float _2116 = cbLight._m0[_2094].z + _466;
        float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
        float _2121 = _2120 * _2114;
        float _2122 = _2120 * _2115;
        float _2123 = _2120 * _2116;
        float _2124 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_2094].xyz));
        float _4033 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2128 = dot(vec3(_384, _385, _386), vec3(_2121, _2122, _2123));
        float _4044 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _2132 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2121, _2122, _2123));
        float _4055 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2136 = _2113 * _2113;
        float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
        float _2149 = (exp2(log2(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2150 = 1.0 - _2113;
        float _2160 = (0.5 / (((_1789 * ((_2127 * _2150) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _2150) + _2113) * _2127))) * _2127;
        float _4066 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2162 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
        float _2163 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _2083 = (((_2149 * cbLight._m0[_2098].x) * _2162) * _2163) + _1973;
        _2085 = (((_2149 * cbLight._m0[_2098].y) * _2162) * _2163) + _1975;
        _2087 = (((_2149 * cbLight._m0[_2098].z) * _2162) * _2163) + _1977;
    }
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    if (_1622.y == 0u)
    {
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2238;
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2238;
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2238;
        uvec4 _2253 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2254 = _2253.x;
        uint _2265 = uint((float(_2253.y) * floor(float(uint(cbSceneParam._m0[85u].y * _486) / _2254))) + floor(float(uint(cbSceneParam._m0[85u].x * _485) / _2254)));
        float _2275 = (log2(_2241 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2276 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        uint _2279 = uint(isnan(14.0) ? _2276 : (isnan(_2276) ? 14.0 : min(_2276, 14.0)));
        uvec4 _2284 = texelFetch(g_lightClusterGridBuffer, int(((_2279 << 2u) + (_2265 << 6u)) >> 2u));
        uint _2285 = _2284.x;
        uint _2286 = _2253.z;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        if (((((1u << ((_2286 >> 4u) & 15u)) + 4294967295u) & _2285) == 0u) || ((_2286 & 240u) == 0u))
        {
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
        }
        else
        {
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            uint _2543 = 0u;
            uint _2552;
            bool _2553;
            for (;;)
            {
                _2552 = texelFetch(g_lightClassification, int((((_2279 << 5u) + (_2265 << 9u)) + (_2543 << 2u)) >> 2u)).x;
                _2553 = _2552 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2553)
                {
                    frontier_phi_68_pred = _2539;
                    frontier_phi_68_pred_1 = _2542;
                    frontier_phi_68_pred_2 = _2541;
                    frontier_phi_68_pred_3 = _2540;
                    frontier_phi_68_pred_4 = _2538;
                    frontier_phi_68_pred_5 = _2537;
                }
                else
                {
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    uint _2688;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2539;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2542;
                    _2688 = _2552;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    for (;;)
                    {
                        uint _2692 = uint(findLSB(_2688)) + (_2543 << 5u);
                        uint _2689 = (_2688 + 4294967295u) & _2688;
                        uint _2694 = _2692 * 48u;
                        vec4 _2708 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 3u)).x));
                        uint _2714 = (_2692 * 48u) + 4u;
                        vec4 _2727 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 3u)).x));
                        uint _2733 = (_2692 * 48u) + 8u;
                        vec3 _2744 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2733)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 2u)).x));
                        float _2748 = _2708.x - _2239;
                        float _2749 = _2708.y - _2240;
                        float _2750 = _2708.z - _2241;
                        float _2751 = dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750));
                        float _2754 = inversesqrt(_2751);
                        float _2755 = _2754 * _2748;
                        float _2756 = _2754 * _2749;
                        float _2757 = _2754 * _2750;
                        float _2758 = dot(vec3(_506, _509, _512), vec3(_2755, _2756, _2757));
                        float _2763 = 1.0 - (_2751 * _2708.w);
                        float _4092 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2764 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2765 = sqrt(_2751) * _2727.w;
                        float _2768 = 1.39999997615814208984375 / (_2765 + 1.39999997615814208984375);
                        float _2769 = _2768 * _2768;
                        float _2772 = ((1.0 - _2769) * _2758) + _2769;
                        float _2775 = _2765 * _2765;
                        float _2779 = ((isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0))) * _2764) / ((_2775 * 0.699999988079071044921875) + 1.0);
                        float _2783 = (-0.0) - _2239;
                        float _2784 = (-0.0) - _2240;
                        float _2785 = (-0.0) - _2241;
                        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
                        float _2790 = _2789 * _2783;
                        float _2791 = _2789 * _2784;
                        float _2792 = _2789 * _2785;
                        float _2800 = exp2(log2(1.0 / ((_2775 * 3.5) + 5.0)) * 0.25);
                        float _2801 = 1.0 - _567;
                        float _2808 = sqrt(1.0 - ((1.0 - (_2801 * _2801)) * (1.0 - (_2800 * _2800))));
                        float _2809 = _2808 * _2808;
                        float _2810 = _2809 * _2809;
                        float _2811 = _2790 + _2755;
                        float _2812 = _2791 + _2756;
                        float _2813 = _2792 + _2757;
                        float _2817 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
                        float _2821 = dot(vec3(_506, _509, _512), vec3(_2790, _2791, _2792));
                        float _4108 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2824 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2825 = dot(vec3(_506, _509, _512), vec3(_2817 * _2811, _2817 * _2812, _2817 * _2813));
                        float _4119 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2828 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2832 = ((_2828 * _2828) * (_2810 + (-1.0))) + 1.0;
                        float _2833 = _2768 * _2809;
                        float _2834 = _2833 * _2833;
                        float _2837 = ((1.0 - _2834) * _2758) + _2834;
                        float _4130 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2838 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _2839 = 1.0 - _2809;
                        float _2849 = (0.5 / (((_2838 * ((_2824 * _2839) + _2809)) + 9.9999999392252902907785028219223e-09) + (((_2838 * _2839) + _2809) * _2824))) * _2838;
                        float _4141 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2860 = (((_2810 * 3.1415927410125732421875) * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) / ((_2832 * _2832) * ((_2775 * 2.1991131305694580078125) + 3.141590118408203125))) * _2764;
                        _2612 = (_2779 * _2727.x) + _2685;
                        _2613 = (_2779 * _2727.y) + _2686;
                        _2614 = (_2779 * _2727.z) + _2687;
                        _2609 = (_2860 * _2744.x) + _2682;
                        _2610 = (_2860 * _2744.y) + _2683;
                        _2611 = (_2860 * _2744.z) + _2684;
                        if (_2689 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2682 = _2609;
                            _2683 = _2610;
                            _2684 = _2611;
                            _2685 = _2612;
                            _2686 = _2613;
                            _2687 = _2614;
                            _2688 = _2689;
                        }
                    }
                    frontier_phi_68_pred = _2611;
                    frontier_phi_68_pred_1 = _2614;
                    frontier_phi_68_pred_2 = _2613;
                    frontier_phi_68_pred_3 = _2612;
                    frontier_phi_68_pred_4 = _2610;
                    frontier_phi_68_pred_5 = _2609;
                }
                _2390 = frontier_phi_68_pred;
                _2396 = frontier_phi_68_pred_1;
                _2394 = frontier_phi_68_pred_2;
                _2392 = frontier_phi_68_pred_3;
                _2388 = frontier_phi_68_pred_4;
                _2386 = frontier_phi_68_pred_5;
                uint _2544 = _2543 + 1u;
                if (_2544 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2537 = _2386;
                    _2538 = _2388;
                    _2539 = _2390;
                    _2540 = _2392;
                    _2541 = _2394;
                    _2542 = _2396;
                    _2543 = _2544;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
        }
        uvec4 _2399 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2400 = _2399.z;
        uint _2402 = (_2400 >> 8u) & 15u;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        if (((4294967295u << _2402) & _2285) == 0u)
        {
            _2505 = _2385;
            _2507 = _2387;
            _2509 = _2389;
            _2511 = _2391;
            _2513 = _2393;
            _2515 = _2395;
        }
        else
        {
            float _2530 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
            float _2531 = _2530 * _2239;
            float _2532 = _2530 * _2240;
            float _2533 = _2530 * _2241;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2402 < ((_2400 >> 12u) & 15u))
            {
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2514;
                float _2516;
                float _2665 = _2385;
                float _2666 = _2387;
                float _2667 = _2389;
                float _2668 = _2391;
                float _2669 = _2393;
                float _2670 = _2395;
                uint _2671 = _2402;
                uint _2680;
                bool _2681;
                for (;;)
                {
                    _2680 = texelFetch(g_lightClassification, int((((_2279 << 5u) + (_2265 << 9u)) + (_2671 << 2u)) >> 2u)).x;
                    _2681 = _2680 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2681)
                    {
                        frontier_phi_79_pred = _2670;
                        frontier_phi_79_pred_1 = _2669;
                        frontier_phi_79_pred_2 = _2668;
                        frontier_phi_79_pred_3 = _2667;
                        frontier_phi_79_pred_4 = _2666;
                        frontier_phi_79_pred_5 = _2665;
                    }
                    else
                    {
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _2887 = _2665;
                        float _2888 = _2666;
                        float _2889 = _2667;
                        float _2890 = _2668;
                        float _2891 = _2669;
                        float _2892 = _2670;
                        uint _2893 = _2680;
                        uint _2894;
                        vec4 _2919;
                        float _2920;
                        vec4 _2935;
                        vec3 _2947;
                        vec4 _2963;
                        vec4 _2979;
                        float _3026;
                        bool _3027;
                        for (;;)
                        {
                            uint _2904 = ((_2671 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2893));
                            _2894 = (_2893 + 4294967295u) & _2893;
                            uint _2906 = _2904 * 40u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            _2920 = _2919.w;
                            uint _2922 = (_2904 * 40u) + 4u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            uint _2937 = (_2904 * 40u) + 8u;
                            _2947 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x));
                            uint _2950 = (_2904 * 40u) + 16u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2966 = (_2904 * 40u) + 20u;
                            _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2982 = (_2904 * 40u) + 24u;
                            vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _3001 = (_2904 * 40u) + 28u;
                            vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            _3026 = fma(_2241, _3014.z, fma(_2240, _3014.y, _3014.x * _2239)) + _3014.w;
                            _3027 = !((fma(_2241, _2995.z, fma(_2240, _2995.y, _2995.x * _2239)) + _2995.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3027)
                            {
                                float _3054 = _2919.x - _2239;
                                float _3055 = _2919.y - _2240;
                                float _3056 = _2919.z - _2241;
                                float _3057 = dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056));
                                float _3060 = inversesqrt(_3057);
                                float _3061 = _3060 * _3054;
                                float _3062 = _3060 * _3055;
                                float _3063 = _3060 * _3056;
                                float _3067 = 1.0 - (_3057 / (_2920 * _2920));
                                float _4152 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3068 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3072 = sqrt(_3057) * _2935.w;
                                float _3074 = 1.39999997615814208984375 / (_3072 + 1.39999997615814208984375);
                                float _3075 = _3074 * _3074;
                                float _3078 = ((1.0 - _3075) * dot(vec3(_3061, _3062, _3063), vec3(_506, _509, _512))) + _3075;
                                float _3081 = _3072 * _3072;
                                float _3085 = (fma(_2241, _2963.z, fma(_2240, _2963.y, _2963.x * _2239)) + _2963.w) / _3026;
                                float _3086 = (fma(_2241, _2979.z, fma(_2240, _2979.y, _2979.x * _2239)) + _2979.w) / _3026;
                                float _3090 = 1.0 - dot(vec2(_3085, _3086), vec2(_3085, _3086));
                                float _4168 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3091 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3092 = _3091 * (((isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0))) * _3068) / ((_3081 * 0.699999988079071044921875) + 1.0));
                                float _3104 = exp2(log2(1.0 / ((_3081 * 3.5) + 5.0)) * 0.25);
                                float _3105 = 1.0 - _567;
                                float _3112 = sqrt(1.0 - ((1.0 - (_3105 * _3105)) * (1.0 - (_3104 * _3104))));
                                float _3113 = _3112 * _3112;
                                float _3114 = _3113 * _3113;
                                float _3115 = _3061 - _2531;
                                float _3116 = _3062 - _2532;
                                float _3117 = _3063 - _2533;
                                float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                                float _3125 = dot(vec3(_506, _509, _512), vec3((-0.0) - _2531, (-0.0) - _2532, (-0.0) - _2533));
                                float _4179 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3128 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3129 = dot(vec3(_506, _509, _512), vec3(_3121 * _3115, _3121 * _3116, _3121 * _3117));
                                float _4190 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3132 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3136 = ((_3132 * _3132) * (_3114 + (-1.0))) + 1.0;
                                float _3137 = _3074 * _3113;
                                float _3138 = _3137 * _3137;
                                float _3144 = ((1.0 - _3138) * dot(vec3(_506, _509, _512), vec3(_3061, _3062, _3063))) + _3138;
                                float _4201 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3145 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3146 = 1.0 - _3113;
                                float _3156 = (0.5 / (((_3145 * ((_3128 * _3146) + _3113)) + 9.9999999392252902907785028219223e-09) + (((_3145 * _3146) + _3113) * _3128))) * _3145;
                                float _4212 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3166 = (_3091 * _3068) * (((_3114 * 3.1415927410125732421875) * (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) / ((_3136 * _3136) * ((_3081 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3092 * _2935.z;
                                frontier_phi_85_pred_1 = _3092 * _2935.y;
                                frontier_phi_85_pred_2 = _3092 * _2935.x;
                                frontier_phi_85_pred_3 = _3166 * _2947.z;
                                frontier_phi_85_pred_4 = _3166 * _2947.y;
                                frontier_phi_85_pred_5 = _3166 * _2947.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3175 = frontier_phi_85_pred;
                            _3174 = frontier_phi_85_pred_1;
                            _3173 = frontier_phi_85_pred_2;
                            _3172 = frontier_phi_85_pred_3;
                            _3171 = frontier_phi_85_pred_4;
                            _3170 = frontier_phi_85_pred_5;
                            _2877 = _3173 + _2890;
                            _2878 = _3174 + _2891;
                            _2879 = _3175 + _2892;
                            _2874 = _3170 + _2887;
                            _2875 = _3171 + _2888;
                            _2876 = _3172 + _2889;
                            if (_2894 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2894;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2879;
                        frontier_phi_79_pred_1 = _2878;
                        frontier_phi_79_pred_2 = _2877;
                        frontier_phi_79_pred_3 = _2876;
                        frontier_phi_79_pred_4 = _2875;
                        frontier_phi_79_pred_5 = _2874;
                    }
                    _2516 = frontier_phi_79_pred;
                    _2514 = frontier_phi_79_pred_1;
                    _2512 = frontier_phi_79_pred_2;
                    _2510 = frontier_phi_79_pred_3;
                    _2508 = frontier_phi_79_pred_4;
                    _2506 = frontier_phi_79_pred_5;
                    uint _2672 = _2671 + 1u;
                    if (_2672 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2665 = _2506;
                        _2666 = _2508;
                        _2667 = _2510;
                        _2668 = _2512;
                        _2669 = _2514;
                        _2670 = _2516;
                        _2671 = _2672;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2512;
                frontier_phi_60_61_ladder_1 = _2516;
                frontier_phi_60_61_ladder_2 = _2514;
                frontier_phi_60_61_ladder_3 = _2510;
                frontier_phi_60_61_ladder_4 = _2508;
                frontier_phi_60_61_ladder_5 = _2506;
            }
            else
            {
                frontier_phi_60_61_ladder = _2391;
                frontier_phi_60_61_ladder_1 = _2395;
                frontier_phi_60_61_ladder_2 = _2393;
                frontier_phi_60_61_ladder_3 = _2389;
                frontier_phi_60_61_ladder_4 = _2387;
                frontier_phi_60_61_ladder_5 = _2385;
            }
            _2505 = frontier_phi_60_61_ladder_5;
            _2507 = frontier_phi_60_61_ladder_4;
            _2509 = frontier_phi_60_61_ladder_3;
            _2511 = frontier_phi_60_61_ladder;
            _2513 = frontier_phi_60_61_ladder_2;
            _2515 = frontier_phi_60_61_ladder_1;
        }
        float _2520 = isnan(1.0) ? _551 : (isnan(_551) ? 1.0 : min(_551, 1.0));
        _2297 = (_2520 * _2511) + _1753;
        _2299 = (_2520 * _2513) + _1755;
        _2301 = (_2520 * _2515) + _1757;
        _2303 = ((_2505 * 0.039999999105930328369140625) * _2520) + _2083;
        _2305 = ((_2507 * 0.039999999105930328369140625) * _2520) + _2085;
        _2307 = ((_2509 * 0.039999999105930328369140625) * _2520) + _2087;
    }
    else
    {
        _2297 = _1753;
        _2299 = _1755;
        _2301 = _1757;
        _2303 = _2083;
        _2305 = _2085;
        _2307 = _2087;
    }
    float _4228 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _4239 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4250 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _2324 = ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2297 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _551))) + ((_2303 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _1389)) * cbPerFrame._m0[3u].x);
    float _2325 = ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2299 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _551))) + ((_2305 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1389)) * cbPerFrame._m0[3u].x);
    float _2326 = ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2301 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _551))) + ((_2307 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1389)) * cbPerFrame._m0[3u].x);
    uint _2327 = _525 + 6u;
    float _2335 = _485 / cbSceneParam._m0[86u].x;
    float _2336 = _486 / cbSceneParam._m0[86u].y;
    vec4 _2350 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, (log2((isnan(cbSceneParam._m0[77u].w) ? _406 : (isnan(_406) ? cbSceneParam._m0[77u].w : min(_406, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2352 = _2350.x;
    float _2353 = _2350.y;
    float _2354 = _2350.z;
    float _2355 = _2350.w;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    if (_406 > cbSceneParam._m0[78u].w)
    {
        float _2410 = isnan(_406) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _406 : min(cbSceneParam._m0[80u].w, _406));
        float _2411 = _2410 / _406;
        float _2422 = _2411 * _457;
        float _2423 = _458 * _2411;
        float _2424 = (-0.0) - _2423;
        float _2425 = _2411 * _459;
        float _2427 = (cbSceneParam._m0[77u].w * _2424) / _2410;
        float _2428 = _2427 + cbSceneParam._m0[79u].w;
        float _2429 = cbSceneParam._m0[79u].w - _2423;
        float _2435 = sqrt(((_2422 * _2422) + (_2423 * _2423)) + (_2425 * _2425));
        float _2438 = (1.0 - (cbSceneParam._m0[77u].w / _2410)) * _2435;
        float _2443 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2445 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2622;
        if (abs((_2424 - _2427) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2622 = ((((_2428 > 0.0) ? exp2(_2443 * _2428) : (2.0 - exp2(_2445 * _2428))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2438;
        }
        else
        {
            float _2566 = 1.0 / cbSceneParam._m0[80u].x;
            float _2567 = isnan(_2429) ? _2428 : (isnan(_2428) ? _2429 : max(_2428, _2429));
            float _2568 = isnan(_2429) ? _2428 : (isnan(_2428) ? _2429 : min(_2428, _2429));
            float _2577 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : min(_2567, 0.0));
            float _2578 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : min(_2568, 0.0));
            _2622 = ((abs(_2435 / _2424) * cbSceneParam._m0[80u].y) * ((((_2577 - _2578) * 2.0) - ((exp2(_2443 * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0)))) - exp2(_2443 * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0))))) * _2566)) - ((exp2(_2445 * _2577) - exp2(_2445 * _2578)) * _2566))) + (_2438 * cbSceneParam._m0[80u].z);
        }
        vec4 _2624 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, 1.0), 0.0);
        float _2633 = exp2((_2622 * (-1.44269502162933349609375)) * (1.0 - _2624.w));
        float _2634 = log2(_2633);
        float _2650 = log2(_2355);
        _2447 = (exp2(_2650 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].x)) * _2624.x) / cbSceneParam._m0[78u].x)) + _2352;
        _2449 = (exp2(_2650 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].y)) * _2624.y) / cbSceneParam._m0[78u].y)) + _2353;
        _2451 = (exp2(_2650 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].z)) * _2624.z) / cbSceneParam._m0[78u].z)) + _2354;
        _2453 = _2633 * _2355;
    }
    else
    {
        _2447 = _2352;
        _2449 = _2353;
        _2451 = _2354;
        _2453 = _2355;
    }
    bool _2660;
    vec4 _2463;
    vec4 _2485;
    float _2487;
    float _2491;
    float _2492;
    float _2493;
    float _2494;
    bool _2504;
    for (;;)
    {
        _2463 = cbMatDynParam._m0[0u];
        float _2465 = roundEven(_2463.y);
        bool _2466 = _2465 == 3.0;
        float _2467 = log2(_2453);
        float _2474 = exp2(_2467 * cbSceneParam._m0[78u].x) * _2324;
        float _2475 = exp2(_2467 * cbSceneParam._m0[78u].y) * _2325;
        float _2476 = exp2(_2467 * cbSceneParam._m0[78u].z) * _2326;
        float _2483 = _473 + (-0.5);
        _2485 = cbMtdParam._m0[1u];
        _2487 = _2485.y * _2483;
        float _2490 = (_2465 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2491 = _2490 * (_2466 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2447)));
        _2492 = _2490 * (_2466 ? _2475 : (_2475 + (cbSceneParam._m0[72u].w * _2449)));
        _2493 = _2490 * (_2466 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2451)));
        _2494 = _2483 * 0.999000012874603271484375;
        _2504 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2504)
        {
            if ((cbInstanceData._m0[_525 + 7u].x + _2494) < 0.5)
            {
                _2660 = true;
                break;
            }
        }
        uint _2601 = _527 + uint(_2463.w);
        if ((cbInstanceData._m0[_2601].w < 1.0) && ((cbInstanceData._m0[_2601].w + _2494) < 0.5))
        {
            _2660 = true;
            break;
        }
        if ((_2487 + 1.0) < _2485.x)
        {
            _2660 = true;
            break;
        }
        _2660 = false;
        break;
    }
    float _2865;
    if (_2660)
    {
        discard_state = true;
        _2865 = 0.0;
    }
    else
    {
        _2865 = cbInstanceData._m0[_2327].w;
    }
    SV_Target.x = _2491;
    SV_Target.y = _2492;
    SV_Target.z = _2493;
    SV_Target.w = _2865;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2327].w;
    discard_exit();
}


