#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _907;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _243 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _303 = (TEXCOORD_7.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMtdParam._m0[11u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[11u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3221 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0));
    float _311 = (_304 * ((_270.x * cbMtdParam._m0[10u].x) - _249)) + _249;
    float _312 = (_304 * ((_270.y * cbMtdParam._m0[10u].y) - _250)) + _250;
    float _313 = (_304 * ((_270.z * cbMtdParam._m0[10u].z) - _251)) + _251;
    vec4 _325 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _327 = _325.x;
    float _328 = _325.y;
    float _329 = _325.z;
    vec4 _341 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _354 = ((_341.z - _329) * _304) + _329;
    float _358 = ((((_341.x - _327) * _304) + _327) * 2.0) + (-1.0);
    float _360 = ((((_341.y - _328) * _304) + _328) * 2.0) + (-1.0);
    float _361 = dot(vec2(_358, _360), vec2(_358, _360));
    float _3232 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _366 = sqrt(1.0 - (isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0))));
    float _369 = fma(_366, _215, fma(_360, _207 * TANGENT.x, (_193 * _185) * _358));
    float _372 = fma(_366, _216, fma(_360, _207 * TANGENT.y, (_193 * _186) * _358));
    float _375 = fma(_366, _217, fma(_360, _207 * TANGENT.z, (_193 * _187) * _358));
    float _379 = inversesqrt(dot(vec3(_369, _372, _375), vec3(_369, _372, _375)));
    float _380 = _379 * _369;
    float _381 = _379 * _372;
    float _382 = _379 * _375;
    float _3243 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _383 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
    float _3254 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3265 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3276 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _402 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _453 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _443);
    float _454 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _443);
    float _455 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _443);
    float _459 = inversesqrt(dot(vec3(_453, _454, _455), vec3(_453, _454, _455)));
    float _460 = _453 * _459;
    float _461 = _454 * _459;
    float _462 = _455 * _459;
    float _468 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _469 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _490 = fma(_382, cbSceneParam._m0[5u].z, fma(_381, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _380));
    float _493 = fma(_382, cbSceneParam._m0[6u].z, fma(_381, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _380));
    float _496 = fma(_382, cbSceneParam._m0[7u].z, fma(_381, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _380));
    uint _509 = uint(roundEven(NORMAL.w)) * 13u;
    uint _512 = (_509 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _518 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0)))) * cbInstanceData._m0[_512].x;
    float _519 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0)))) * cbInstanceData._m0[_512].y;
    float _520 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0)))) * cbInstanceData._m0[_512].z;
    float _3287 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _521 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _3298 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _522 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    float _3309 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _523 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    vec4 _532 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _468, cbSceneParam._m0[86u].y * _469));
    float _535 = _532.x * TEXCOORD_7.w;
    float _536 = dot(vec3(_380, _381, _382), vec3(_460, _461, _462));
    float _539 = _536 * 2.0;
    float _543 = (_539 * _380) - _460;
    float _544 = (_539 * _381) - _461;
    float _545 = (_539 * _382) - _462;
    float _549 = abs(dot(vec3(_460, _461, _462), vec3(_380, _381, _382)));
    float _3320 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _551 = sqrt(_383);
    float _564 = exp2((_551 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_551 * 3.0));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _906;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _631 = fma(_604, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _596));
        float _635 = fma(_604, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _596));
        float _639 = fma(_604, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _596));
        float _664 = _596 + _380;
        float _665 = _600 + _381;
        float _666 = _604 + _382;
        float _676 = fma(_666, cbModelParam._m0[26u].z, fma(_665, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664)) - _631;
        float _677 = fma(_666, cbModelParam._m0[27u].z, fma(_665, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664)) - _635;
        float _678 = fma(_666, cbModelParam._m0[28u].z, fma(_665, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664)) - _639;
        float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
        float _695 = ((_682 * _676) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_631 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_682 * _677) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_635 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _697 = ((_682 * _678) / cbModelParam._m0[34u].z) + ((((((_639 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        float _734 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_700.x + (-0.5));
        float _736 = _734 * (_700.y + (-0.5));
        float _737 = _734 * (_700.z + (-0.5));
        float _744 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_707.x + (-0.5));
        float _746 = _744 * (_707.y + (-0.5));
        float _747 = _744 * (_707.z + (-0.5));
        float _754 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_714.x + (-0.5));
        float _756 = _754 * (_714.y + (-0.5));
        float _757 = _754 * (_714.z + (-0.5));
        float _764 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_721.x + (-0.5));
        float _766 = _764 * (_721.y + (-0.5));
        float _767 = _764 * (_721.z + (-0.5));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = _735 * 0.5;
        float _772 = _745 * 0.5;
        float _773 = _755 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _788 = (dot(vec3(_380, _381, _382), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3346 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _798 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3357 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3368 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * (_800 + 1.0))) + _805) * _768;
        float _815 = _736 * 0.5;
        float _816 = _746 * 0.5;
        float _817 = _756 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_380, _381, _382), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3401 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_842 + 1.0))) + _847) * _769;
        float _857 = _737 * 0.5;
        float _858 = _747 * 0.5;
        float _859 = _757 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _873 = (dot(vec3(_380, _381, _382), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3412 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _882 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3423 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3434 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * (_884 + 1.0))) + _889) * _770;
        _906 = _737;
        _908 = _736;
        _909 = _735;
        _910 = _747;
        _911 = _746;
        _912 = _745;
        _913 = _757;
        _914 = _756;
        _915 = _755;
        _916 = _770;
        _917 = _769;
        _918 = _768;
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
    }
    else
    {
        _906 = _907;
        _908 = _907;
        _909 = _907;
        _910 = _907;
        _911 = _907;
        _912 = _907;
        _913 = _907;
        _914 = _907;
        _915 = _907;
        _916 = _907;
        _917 = _907;
        _918 = _907;
        _919 = 0.0;
        _920 = 0.0;
        _921 = 0.0;
    }
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _947 = fma(_604, cbModelParam._m0[30u].z, fma(_600, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _596));
        float _951 = fma(_604, cbModelParam._m0[31u].z, fma(_600, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _596));
        float _955 = fma(_604, cbModelParam._m0[32u].z, fma(_600, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _596));
        float _978 = _596 + _380;
        float _979 = _600 + _381;
        float _980 = _604 + _382;
        float _990 = fma(_980, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978)) - _947;
        float _991 = fma(_980, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978)) - _951;
        float _992 = fma(_980, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978)) - _955;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_947 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_951 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[35u].z) + ((((((_955 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1046 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1013.x + (-0.5));
        float _1048 = _1046 * (_1013.y + (-0.5));
        float _1049 = _1046 * (_1013.z + (-0.5));
        float _1056 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1020.x + (-0.5));
        float _1058 = _1056 * (_1020.y + (-0.5));
        float _1059 = _1056 * (_1020.z + (-0.5));
        float _1066 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1027.x + (-0.5));
        float _1068 = _1066 * (_1027.y + (-0.5));
        float _1069 = _1066 * (_1027.z + (-0.5));
        float _1076 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1034.x + (-0.5));
        float _1078 = _1076 * (_1034.y + (-0.5));
        float _1079 = _1076 * (_1034.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_380, _381, _382), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3497 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_1110 + 1.0))) + _1115) * _1080;
        float _1125 = _1048 * 0.5;
        float _1126 = _1058 * 0.5;
        float _1127 = _1068 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_380, _381, _382), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3530 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_1152 + 1.0))) + _1157) * _1081;
        float _1167 = _1049 * 0.5;
        float _1168 = _1059 * 0.5;
        float _1169 = _1069 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_380, _381, _382), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3563 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_1194 + 1.0))) + _1199) * _1082;
        _1216 = _1049;
        _1217 = _1048;
        _1218 = _1047;
        _1219 = _1059;
        _1220 = _1058;
        _1221 = _1057;
        _1222 = _1069;
        _1223 = _1068;
        _1224 = _1067;
        _1225 = _1082;
        _1226 = _1081;
        _1227 = _1080;
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _907;
        _1217 = _907;
        _1218 = _907;
        _1219 = _907;
        _1220 = _907;
        _1221 = _907;
        _1222 = _907;
        _1223 = _907;
        _1224 = _907;
        _1225 = _907;
        _1226 = _907;
        _1227 = _907;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _919)) + _919;
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _920)) + _920;
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _921)) + _921;
    float _1263 = fma(_1242, cbSceneParam._m0[89u].z, fma(_1241, cbSceneParam._m0[89u].y, _1240 * cbSceneParam._m0[89u].x));
    float _1266 = fma(_1242, cbSceneParam._m0[90u].z, fma(_1241, cbSceneParam._m0[90u].y, _1240 * cbSceneParam._m0[90u].x));
    float _1269 = fma(_1242, cbSceneParam._m0[91u].z, fma(_1241, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1240));
    float _1284 = _543 * 0.5;
    float _1285 = _544 * 0.5;
    float _1286 = _545 * 0.5;
    float _1287 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1290 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1293 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1327;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1300 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_906, _910, _913, _916));
        float _1304 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_908, _911, _914, _917));
        float _1308 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_909, _912, _915, _918));
        float _1315 = dot(vec4(cbModelParam._m0[39u]), vec4(_1284, _1285, _1286, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1315) ? 0.0 : (isnan(0.0) ? _1315 : max(0.0, _1315))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1338;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1329 = dot(vec4(cbModelParam._m0[40u]), vec4(_1284, _1285, _1286, 1.0));
        _1338 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1338 = 1.0;
    }
    float _1342 = (_1338 * cbModelParam._m0[1u].x) + (_1327 * (1.0 - cbModelParam._m0[1u].x));
    float _1352 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _383);
    float _1353 = isnan(_1352) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1352 : min(cbModelParam._m0[25u].z, _1352));
    float _1435;
    float _1437;
    float _1439;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1402 = fma(_604, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _596)) + cbModelParam._m0[13u].w;
        float _1406 = fma(_604, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _596)) + cbModelParam._m0[14u].w;
        float _1410 = fma(_604, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _596)) + cbModelParam._m0[15u].w;
        float _1413 = fma(_545, cbModelParam._m0[13u].z, fma(_544, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _543));
        float _1416 = fma(_545, cbModelParam._m0[14u].z, fma(_544, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _543));
        float _1419 = fma(_545, cbModelParam._m0[15u].z, fma(_544, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _543));
        float _1447;
        if (_1413 > 0.0)
        {
            _1447 = abs((1.0 - _1402) / _1413);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1402 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1447 = frontier_phi_16_14_ladder;
        }
        float _1651;
        if (_1416 > 0.0)
        {
            _1651 = abs((1.0 - _1406) / _1416);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1406 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1651 = frontier_phi_25_21_ladder;
        }
        float _1894;
        if (_1419 > 0.0)
        {
            _1894 = abs((1.0 - _1410) / _1419);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1410 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1894 = frontier_phi_37_32_ladder;
        }
        float _1896 = isnan(_1651) ? _1447 : (isnan(_1447) ? _1651 : min(_1447, _1651));
        float _1897 = isnan(_1894) ? _1896 : (isnan(_1896) ? _1894 : min(_1896, _1894));
        float _1901 = (_1897 * _1413) + _1402;
        float _1902 = (_1897 * _1416) + _1406;
        float _1903 = (_1897 * _1419) + _1410;
        float _1904 = _1897 * 9.9999997473787516355514526367188e-05;
        float _1906 = (-1.0) - _1904;
        float _1908 = _1904 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1903 > _1908) || ((_1903 < _1906) || ((_1902 > _1908) || ((_1902 < _1906) || ((_1901 < _1906) || (_1901 > _1908))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2027 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1903, cbModelParam._m0[9u].z, fma(_1902, cbModelParam._m0[9u].y, _1901 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1903, cbModelParam._m0[10u].z, fma(_1902, cbModelParam._m0[10u].y, _1901 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1903, cbModelParam._m0[11u].z, fma(_1902, cbModelParam._m0[11u].y, _1901 * cbModelParam._m0[11u].x))), _1353);
            frontier_phi_15_37_ladder = _2027.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2027.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2027.x * cbModelParam._m0[1u].y;
        }
        _1435 = frontier_phi_15_37_ladder_2;
        _1437 = frontier_phi_15_37_ladder_1;
        _1439 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_543, _544, _545), _1353);
        _1435 = _1423.x * cbModelParam._m0[1u].y;
        _1437 = _1423.y * cbModelParam._m0[1u].y;
        _1439 = _1423.z * cbModelParam._m0[1u].y;
    }
    float _1443 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _383);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1443 : min(cbModelParam._m0[25u].w, _1443));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1501 = fma(_604, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _596)) + cbModelParam._m0[21u].w;
        float _1505 = fma(_604, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _596)) + cbModelParam._m0[22u].w;
        float _1509 = fma(_604, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _596)) + cbModelParam._m0[23u].w;
        float _1512 = fma(_545, cbModelParam._m0[21u].z, fma(_544, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _543));
        float _1515 = fma(_545, cbModelParam._m0[22u].z, fma(_544, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _543));
        float _1518 = fma(_545, cbModelParam._m0[23u].z, fma(_544, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _543));
        float _1656;
        if (_1512 > 0.0)
        {
            _1656 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1656 = frontier_phi_27_23_ladder;
        }
        float _1921;
        if (_1515 > 0.0)
        {
            _1921 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1921 = frontier_phi_39_34_ladder;
        }
        float _2126;
        if (_1518 > 0.0)
        {
            _2126 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2126 = frontier_phi_48_45_ladder;
        }
        float _2128 = isnan(_1921) ? _1656 : (isnan(_1656) ? _1921 : min(_1656, _1921));
        float _2129 = isnan(_2126) ? _2128 : (isnan(_2128) ? _2126 : min(_2128, _2126));
        float _2133 = (_2129 * _1512) + _1501;
        float _2134 = (_2129 * _1515) + _1505;
        float _2135 = (_2129 * _1518) + _1509;
        float _2136 = _2129 * 9.9999997473787516355514526367188e-05;
        float _2137 = (-1.0) - _2136;
        float _2139 = _2136 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2135 > _2139) || ((_2135 < _2137) || ((_2134 > _2139) || ((_2134 < _2137) || ((_2133 < _2137) || (_2133 > _2139))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2333 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2135, cbModelParam._m0[17u].z, fma(_2134, cbModelParam._m0[17u].y, _2133 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2135, cbModelParam._m0[18u].z, fma(_2134, cbModelParam._m0[18u].y, _2133 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2135, cbModelParam._m0[19u].z, fma(_2134, cbModelParam._m0[19u].y, _2133 * cbModelParam._m0[19u].x))), _1444);
            frontier_phi_24_48_ladder = _2333.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2333.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2333.x * cbModelParam._m0[1u].z;
        }
        _1537 = frontier_phi_24_48_ladder_2;
        _1539 = frontier_phi_24_48_ladder_1;
        _1541 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_543, _544, _545), _1444);
        _1537 = _1521.x * cbModelParam._m0[1u].z;
        _1539 = _1521.y * cbModelParam._m0[1u].z;
        _1541 = _1521.z * cbModelParam._m0[1u].z;
    }
    float _1553 = ((((1.0 - _564) * ((_551 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_564 * _551)) * _535;
    float _1554 = _1553 * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1555 = _1553 * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1556 = _1553 * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1559 = fma(_1556, cbSceneParam._m0[89u].z, fma(_1555, cbSceneParam._m0[89u].y, _1554 * cbSceneParam._m0[89u].x));
    float _1562 = fma(_1556, cbSceneParam._m0[90u].z, fma(_1555, cbSceneParam._m0[90u].y, _1554 * cbSceneParam._m0[90u].x));
    float _1565 = fma(_1556, cbSceneParam._m0[91u].z, fma(_1555, cbSceneParam._m0[91u].y, _1554 * cbSceneParam._m0[91u].x));
    uvec4 _1575 = floatBitsToUint(cbInstanceData._m0[_509 + 5u]);
    uint _1577 = _1575.x * 14u;
    uint _1578 = _1577 + 13u;
    float _1585 = _535 + (-1.0);
    float _1590 = (cbLight._m0[_1578].x * _1585) + 1.0;
    float _1591 = (cbLight._m0[_1578].y * _1585) + 1.0;
    float _1592 = (cbLight._m0[_1578].z * _1585) + 1.0;
    float _1593 = (cbLight._m0[_1578].w * _1585) + 1.0;
    uint _1594 = _1577 + 5u;
    float _1600 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
    uint _1604 = _1577 + 4u;
    float _1610 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
    uint _1614 = _1577 | 1u;
    float _1625 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_380, _381, _382));
    float _1628 = dot(vec3(cbLight._m0[_1614].xyz), vec3(_380, _381, _382));
    float _3699 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
    float _3710 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1633 = (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.3183098733425140380859375;
    float _1635 = (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * 0.3183098733425140380859375;
    float _1642 = ((cbLight._m0[_1594].x * _1600) * _1635) + ((cbLight._m0[_1604].x * _1610) * _1633);
    float _1643 = ((_1600 * cbLight._m0[_1594].y) * _1635) + ((_1610 * cbLight._m0[_1604].y) * _1633);
    float _1644 = ((_1600 * cbLight._m0[_1594].z) * _1635) + ((_1610 * cbLight._m0[_1604].z) * _1633);
    uvec4 _1648 = floatBitsToUint(cbLight._m0[_1577 + 12u]);
    bool _1650 = _1648.x == 0u;
    float _1661;
    float _1663;
    float _1665;
    if (_1650)
    {
        _1661 = _1642;
        _1663 = _1643;
        _1665 = _1644;
    }
    else
    {
        uint _1669 = _1577 + 6u;
        float _1685 = (dot(vec3(cbLight._m0[_1577 + 2u].xyz), vec3(_380, _381, _382)) * 0.5) + 0.5;
        float _1686 = _1685 * _1685;
        float _3721 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1688 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _1661 = (((cbLight._m0[_1669].x * 0.3183098733425140380859375) * _1687) * _1688) + _1642;
        _1663 = (((cbLight._m0[_1669].y * 0.3183098733425140380859375) * _1687) * _1688) + _1643;
        _1665 = (((cbLight._m0[_1669].z * 0.3183098733425140380859375) * _1687) * _1688) + _1644;
    }
    bool _1668 = _1648.y == 0u;
    float _1706;
    float _1708;
    float _1710;
    if (_1668)
    {
        _1706 = _1661;
        _1708 = _1663;
        _1710 = _1665;
    }
    else
    {
        uint _1865 = _1577 + 7u;
        float _1881 = (dot(vec3(cbLight._m0[_1577 + 3u].xyz), vec3(_380, _381, _382)) * 0.5) + 0.5;
        float _1882 = _1881 * _1881;
        float _3737 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1883 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1884 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
        _1706 = (((cbLight._m0[_1865].x * 0.3183098733425140380859375) * _1883) * _1884) + _1661;
        _1708 = (((cbLight._m0[_1865].y * 0.3183098733425140380859375) * _1883) * _1884) + _1663;
        _1710 = (((cbLight._m0[_1865].z * 0.3183098733425140380859375) * _1883) * _1884) + _1665;
    }
    uint _1713 = _1577 + 8u;
    float _1726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1577].w)) * _383) * 0.949999988079071044921875);
    float _1727 = _1726 * _1726;
    float _1728 = cbLight._m0[_1577].x + _460;
    float _1729 = cbLight._m0[_1577].y + _461;
    float _1730 = cbLight._m0[_1577].z + _462;
    float _1734 = inversesqrt(dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730)));
    float _1735 = _1734 * _1728;
    float _1736 = _1734 * _1729;
    float _1737 = _1734 * _1730;
    float _1738 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_1577].xyz));
    float _3753 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1741 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _1742 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _1743 = dot(vec3(_380, _381, _382), vec3(_1735, _1736, _1737));
    float _3775 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _1747 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_1735, _1736, _1737));
    float _3786 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1751 = _1727 * _1727;
    float _1755 = ((_1746 * _1746) * (_1751 + (-1.0))) + 1.0;
    float _1766 = (exp2(log2(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1767 = 1.0 - _1727;
    float _1778 = (0.5 / (((_1742 * ((_1741 * _1767) + _1727)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _1767) + _1727) * _1741))) * _1741;
    float _3797 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1780 = (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1751 / ((_1755 * _1755) * 3.141590118408203125));
    uint _1791 = _1577 + 9u;
    float _1802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1614].w)) * _383) * 0.949999988079071044921875);
    float _1803 = _1802 * _1802;
    float _1804 = cbLight._m0[_1614].x + _460;
    float _1805 = cbLight._m0[_1614].y + _461;
    float _1806 = cbLight._m0[_1614].z + _462;
    float _1810 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
    float _1811 = _1810 * _1804;
    float _1812 = _1810 * _1805;
    float _1813 = _1810 * _1806;
    float _1814 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_1614].xyz));
    float _3808 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _1818 = dot(vec3(_380, _381, _382), vec3(_1811, _1812, _1813));
    float _3819 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _1822 = dot(vec3(cbLight._m0[_1614].xyz), vec3(_1811, _1812, _1813));
    float _3830 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1826 = _1803 * _1803;
    float _1830 = ((_1821 * _1821) * (_1826 + (-1.0))) + 1.0;
    float _1839 = (exp2(log2(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1840 = 1.0 - _1803;
    float _1850 = (0.5 / (((_1742 * ((_1817 * _1840) + _1803)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _1840) + _1803) * _1817))) * _1817;
    float _3841 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1852 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1826 / ((_1830 * _1830) * 3.141590118408203125));
    float _1862 = (((_1839 * cbLight._m0[_1791].x) * _1852) * _1600) + (((_1766 * cbLight._m0[_1713].x) * _1780) * _1610);
    float _1863 = (((_1839 * cbLight._m0[_1791].y) * _1852) * _1600) + (((_1766 * cbLight._m0[_1713].y) * _1780) * _1610);
    float _1864 = (((_1839 * cbLight._m0[_1791].z) * _1852) * _1600) + (((_1766 * cbLight._m0[_1713].z) * _1780) * _1610);
    float _1926;
    float _1928;
    float _1930;
    if (_1650)
    {
        _1926 = _1862;
        _1928 = _1863;
        _1930 = _1864;
    }
    else
    {
        uint _1932 = _1577 + 2u;
        uint _1936 = _1577 + 10u;
        float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _383) * 0.949999988079071044921875);
        float _1951 = _1950 * _1950;
        float _1952 = cbLight._m0[_1932].x + _460;
        float _1953 = cbLight._m0[_1932].y + _461;
        float _1954 = cbLight._m0[_1932].z + _462;
        float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
        float _1959 = _1958 * _1952;
        float _1960 = _1958 * _1953;
        float _1961 = _1958 * _1954;
        float _1962 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_1932].xyz));
        float _3852 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1965 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1966 = dot(vec3(_380, _381, _382), vec3(_1959, _1960, _1961));
        float _3863 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1969 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1970 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_1959, _1960, _1961));
        float _3874 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1974 = _1951 * _1951;
        float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
        float _1987 = (exp2(log2(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1988 = 1.0 - _1951;
        float _1998 = (0.5 / (((_1742 * ((_1965 * _1988) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _1988) + _1951) * _1965))) * _1965;
        float _3885 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2000 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
        float _2001 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _1926 = (((_1987 * cbLight._m0[_1936].x) * _2000) * _2001) + _1862;
        _1928 = (((_1987 * cbLight._m0[_1936].y) * _2000) * _2001) + _1863;
        _1930 = (((_1987 * cbLight._m0[_1936].z) * _2000) * _2001) + _1864;
    }
    float _2036;
    float _2038;
    float _2040;
    if (_1668)
    {
        _2036 = _1926;
        _2038 = _1928;
        _2040 = _1930;
    }
    else
    {
        uint _2047 = _1577 + 3u;
        uint _2051 = _1577 + 11u;
        float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _383) * 0.949999988079071044921875);
        float _2066 = _2065 * _2065;
        float _2067 = cbLight._m0[_2047].x + _460;
        float _2068 = cbLight._m0[_2047].y + _461;
        float _2069 = cbLight._m0[_2047].z + _462;
        float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
        float _2074 = _2073 * _2067;
        float _2075 = _2073 * _2068;
        float _2076 = _2073 * _2069;
        float _2077 = dot(vec3(_380, _381, _382), vec3(cbLight._m0[_2047].xyz));
        float _3901 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _2081 = dot(vec3(_380, _381, _382), vec3(_2074, _2075, _2076));
        float _3912 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _2085 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2074, _2075, _2076));
        float _3923 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2089 = _2066 * _2066;
        float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
        float _2102 = (exp2(log2(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2103 = 1.0 - _2066;
        float _2113 = (0.5 / (((_1742 * ((_2080 * _2103) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _2103) + _2066) * _2080))) * _2080;
        float _3934 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2115 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
        float _2116 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
        _2036 = (((_2102 * cbLight._m0[_2051].x) * _2115) * _2116) + _1926;
        _2038 = (((_2102 * cbLight._m0[_2051].y) * _2115) * _2116) + _1928;
        _2040 = (((_2102 * cbLight._m0[_2051].z) * _2115) * _2116) + _1930;
    }
    float _2250;
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    float _2260;
    if (_1575.y == 0u)
    {
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2191;
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2191;
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2191;
        uvec4 _2206 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2207 = _2206.x;
        uint _2218 = uint((float(_2206.y) * floor(float(uint(cbSceneParam._m0[85u].y * _469) / _2207))) + floor(float(uint(cbSceneParam._m0[85u].x * _468) / _2207)));
        float _2228 = (log2(_2194 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2229 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        uint _2232 = uint(isnan(14.0) ? _2229 : (isnan(_2229) ? 14.0 : min(_2229, 14.0)));
        uvec4 _2237 = texelFetch(g_lightClusterGridBuffer, int(((_2232 << 2u) + (_2218 << 6u)) >> 2u));
        uint _2238 = _2237.x;
        uint _2239 = _2206.z;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        if (((((1u << ((_2239 >> 4u) & 15u)) + 4294967295u) & _2238) == 0u) || ((_2239 & 240u) == 0u))
        {
            _2338 = 0.0;
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
        }
        else
        {
            float _2339;
            float _2341;
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2482 = 0.0;
            float _2483 = 0.0;
            float _2484 = 0.0;
            float _2485 = 0.0;
            float _2486 = 0.0;
            float _2487 = 0.0;
            uint _2488 = 0u;
            uint _2497;
            bool _2498;
            for (;;)
            {
                _2497 = texelFetch(g_lightClassification, int((((_2232 << 5u) + (_2218 << 9u)) + (_2488 << 2u)) >> 2u)).x;
                _2498 = _2497 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2498)
                {
                    frontier_phi_63_pred = _2487;
                    frontier_phi_63_pred_1 = _2486;
                    frontier_phi_63_pred_2 = _2485;
                    frontier_phi_63_pred_3 = _2484;
                    frontier_phi_63_pred_4 = _2483;
                    frontier_phi_63_pred_5 = _2482;
                }
                else
                {
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    uint _2612;
                    _2606 = _2482;
                    _2607 = _2483;
                    _2608 = _2484;
                    _2609 = _2485;
                    _2610 = _2486;
                    _2611 = _2487;
                    _2612 = _2497;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    for (;;)
                    {
                        uint _2616 = uint(findLSB(_2612)) + (_2488 << 5u);
                        uint _2613 = (_2612 + 4294967295u) & _2612;
                        uint _2618 = _2616 * 48u;
                        vec4 _2632 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2618)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 3u)).x));
                        uint _2638 = (_2616 * 48u) + 4u;
                        vec4 _2651 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2638)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 3u)).x));
                        uint _2657 = (_2616 * 48u) + 8u;
                        vec3 _2668 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2657)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 2u)).x));
                        float _2672 = _2632.x - _2192;
                        float _2673 = _2632.y - _2193;
                        float _2674 = _2632.z - _2194;
                        float _2675 = dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674));
                        float _2678 = inversesqrt(_2675);
                        float _2679 = _2678 * _2672;
                        float _2680 = _2678 * _2673;
                        float _2681 = _2678 * _2674;
                        float _2682 = dot(vec3(_490, _493, _496), vec3(_2679, _2680, _2681));
                        float _2687 = 1.0 - (_2675 * _2632.w);
                        float _3960 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
                        float _2688 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                        float _2689 = sqrt(_2675) * _2651.w;
                        float _2692 = 1.39999997615814208984375 / (_2689 + 1.39999997615814208984375);
                        float _2693 = _2692 * _2692;
                        float _2696 = ((1.0 - _2693) * _2682) + _2693;
                        float _2699 = _2689 * _2689;
                        float _2703 = ((isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0))) * _2688) / ((_2699 * 0.699999988079071044921875) + 1.0);
                        float _2707 = (-0.0) - _2192;
                        float _2708 = (-0.0) - _2193;
                        float _2709 = (-0.0) - _2194;
                        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
                        float _2714 = _2713 * _2707;
                        float _2715 = _2713 * _2708;
                        float _2716 = _2713 * _2709;
                        float _2724 = exp2(log2(1.0 / ((_2699 * 3.5) + 5.0)) * 0.25);
                        float _2725 = 1.0 - _551;
                        float _2732 = sqrt(1.0 - ((1.0 - (_2725 * _2725)) * (1.0 - (_2724 * _2724))));
                        float _2733 = _2732 * _2732;
                        float _2734 = _2733 * _2733;
                        float _2735 = _2714 + _2679;
                        float _2736 = _2715 + _2680;
                        float _2737 = _2716 + _2681;
                        float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
                        float _2745 = dot(vec3(_490, _493, _496), vec3(_2714, _2715, _2716));
                        float _3976 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                        float _2748 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
                        float _2749 = dot(vec3(_490, _493, _496), vec3(_2741 * _2735, _2741 * _2736, _2741 * _2737));
                        float _3987 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                        float _2752 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                        float _2756 = ((_2752 * _2752) * (_2734 + (-1.0))) + 1.0;
                        float _2757 = _2692 * _2733;
                        float _2758 = _2757 * _2757;
                        float _2761 = ((1.0 - _2758) * _2682) + _2758;
                        float _3998 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                        float _2762 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _2763 = 1.0 - _2733;
                        float _2773 = (0.5 / (((_2762 * ((_2748 * _2763) + _2733)) + 9.9999999392252902907785028219223e-09) + (((_2762 * _2763) + _2733) * _2748))) * _2762;
                        float _4009 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2784 = (((_2734 * 3.1415927410125732421875) * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) / ((_2756 * _2756) * ((_2699 * 2.1991131305694580078125) + 3.141590118408203125))) * _2688;
                        _2541 = (_2703 * _2651.x) + _2609;
                        _2542 = (_2703 * _2651.y) + _2610;
                        _2543 = (_2703 * _2651.z) + _2611;
                        _2538 = (_2784 * _2668.x) + _2606;
                        _2539 = (_2784 * _2668.y) + _2607;
                        _2540 = (_2784 * _2668.z) + _2608;
                        if (_2613 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2606 = _2538;
                            _2607 = _2539;
                            _2608 = _2540;
                            _2609 = _2541;
                            _2610 = _2542;
                            _2611 = _2543;
                            _2612 = _2613;
                        }
                    }
                    frontier_phi_63_pred = _2543;
                    frontier_phi_63_pred_1 = _2542;
                    frontier_phi_63_pred_2 = _2541;
                    frontier_phi_63_pred_3 = _2540;
                    frontier_phi_63_pred_4 = _2539;
                    frontier_phi_63_pred_5 = _2538;
                }
                _2349 = frontier_phi_63_pred;
                _2347 = frontier_phi_63_pred_1;
                _2345 = frontier_phi_63_pred_2;
                _2343 = frontier_phi_63_pred_3;
                _2341 = frontier_phi_63_pred_4;
                _2339 = frontier_phi_63_pred_5;
                uint _2489 = _2488 + 1u;
                if (_2489 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2482 = _2339;
                    _2483 = _2341;
                    _2484 = _2343;
                    _2485 = _2345;
                    _2486 = _2347;
                    _2487 = _2349;
                    _2488 = _2489;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2338 = _2339;
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
        }
        uvec4 _2352 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2353 = _2352.z;
        uint _2355 = (_2353 >> 8u) & 15u;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        if (((4294967295u << _2355) & _2238) == 0u)
        {
            _2450 = _2338;
            _2452 = _2340;
            _2454 = _2342;
            _2456 = _2344;
            _2458 = _2346;
            _2460 = _2348;
        }
        else
        {
            float _2475 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
            float _2476 = _2475 * _2192;
            float _2477 = _2475 * _2193;
            float _2478 = _2475 * _2194;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2355 < ((_2353 >> 12u) & 15u))
            {
                float _2451;
                float _2453;
                float _2455;
                float _2457;
                float _2459;
                float _2461;
                float _2589 = _2338;
                float _2590 = _2340;
                float _2591 = _2342;
                float _2592 = _2344;
                float _2593 = _2346;
                float _2594 = _2348;
                uint _2595 = _2355;
                uint _2604;
                bool _2605;
                for (;;)
                {
                    _2604 = texelFetch(g_lightClassification, int((((_2232 << 5u) + (_2218 << 9u)) + (_2595 << 2u)) >> 2u)).x;
                    _2605 = _2604 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2605)
                    {
                        frontier_phi_69_pred = _2594;
                        frontier_phi_69_pred_1 = _2593;
                        frontier_phi_69_pred_2 = _2592;
                        frontier_phi_69_pred_3 = _2591;
                        frontier_phi_69_pred_4 = _2590;
                        frontier_phi_69_pred_5 = _2589;
                    }
                    else
                    {
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _2802 = _2589;
                        float _2803 = _2590;
                        float _2804 = _2591;
                        float _2805 = _2592;
                        float _2806 = _2593;
                        float _2807 = _2594;
                        uint _2808 = _2604;
                        uint _2809;
                        vec4 _2834;
                        float _2835;
                        vec4 _2850;
                        vec3 _2862;
                        vec4 _2878;
                        vec4 _2894;
                        float _2941;
                        bool _2942;
                        for (;;)
                        {
                            uint _2819 = ((_2595 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2808));
                            _2809 = (_2808 + 4294967295u) & _2808;
                            uint _2821 = _2819 * 40u;
                            _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            _2835 = _2834.w;
                            uint _2837 = (_2819 * 40u) + 4u;
                            _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            uint _2852 = (_2819 * 40u) + 8u;
                            _2862 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x));
                            uint _2865 = (_2819 * 40u) + 16u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2881 = (_2819 * 40u) + 20u;
                            _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            uint _2897 = (_2819 * 40u) + 24u;
                            vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            uint _2916 = (_2819 * 40u) + 28u;
                            vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            _2941 = fma(_2194, _2929.z, fma(_2193, _2929.y, _2929.x * _2192)) + _2929.w;
                            _2942 = !((fma(_2194, _2910.z, fma(_2193, _2910.y, _2910.x * _2192)) + _2910.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2942)
                            {
                                float _2969 = _2834.x - _2192;
                                float _2970 = _2834.y - _2193;
                                float _2971 = _2834.z - _2194;
                                float _2972 = dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971));
                                float _2975 = inversesqrt(_2972);
                                float _2976 = _2975 * _2969;
                                float _2977 = _2975 * _2970;
                                float _2978 = _2975 * _2971;
                                float _2982 = 1.0 - (_2972 / (_2835 * _2835));
                                float _4020 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2983 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _2987 = sqrt(_2972) * _2850.w;
                                float _2989 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                                float _2990 = _2989 * _2989;
                                float _2993 = ((1.0 - _2990) * dot(vec3(_2976, _2977, _2978), vec3(_490, _493, _496))) + _2990;
                                float _2996 = _2987 * _2987;
                                float _3000 = (fma(_2194, _2878.z, fma(_2193, _2878.y, _2878.x * _2192)) + _2878.w) / _2941;
                                float _3001 = (fma(_2194, _2894.z, fma(_2193, _2894.y, _2894.x * _2192)) + _2894.w) / _2941;
                                float _3005 = 1.0 - dot(vec2(_3000, _3001), vec2(_3000, _3001));
                                float _4036 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3006 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                                float _3007 = _3006 * (((isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))) * _2983) / ((_2996 * 0.699999988079071044921875) + 1.0));
                                float _3019 = exp2(log2(1.0 / ((_2996 * 3.5) + 5.0)) * 0.25);
                                float _3020 = 1.0 - _551;
                                float _3027 = sqrt(1.0 - ((1.0 - (_3020 * _3020)) * (1.0 - (_3019 * _3019))));
                                float _3028 = _3027 * _3027;
                                float _3029 = _3028 * _3028;
                                float _3030 = _2976 - _2476;
                                float _3031 = _2977 - _2477;
                                float _3032 = _2978 - _2478;
                                float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
                                float _3040 = dot(vec3(_490, _493, _496), vec3((-0.0) - _2476, (-0.0) - _2477, (-0.0) - _2478));
                                float _4047 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3043 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                                float _3044 = dot(vec3(_490, _493, _496), vec3(_3036 * _3030, _3036 * _3031, _3036 * _3032));
                                float _4058 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3047 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3051 = ((_3047 * _3047) * (_3029 + (-1.0))) + 1.0;
                                float _3052 = _2989 * _3028;
                                float _3053 = _3052 * _3052;
                                float _3059 = ((1.0 - _3053) * dot(vec3(_490, _493, _496), vec3(_2976, _2977, _2978))) + _3053;
                                float _4069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3060 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3061 = 1.0 - _3028;
                                float _3071 = (0.5 / (((_3060 * ((_3043 * _3061) + _3028)) + 9.9999999392252902907785028219223e-09) + (((_3060 * _3061) + _3028) * _3043))) * _3060;
                                float _4080 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3081 = (_3006 * _2983) * (((_3029 * 3.1415927410125732421875) * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) / ((_3051 * _3051) * ((_2996 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3007 * _2850.z;
                                frontier_phi_75_pred_1 = _3007 * _2850.y;
                                frontier_phi_75_pred_2 = _3007 * _2850.x;
                                frontier_phi_75_pred_3 = _3081 * _2862.z;
                                frontier_phi_75_pred_4 = _3081 * _2862.y;
                                frontier_phi_75_pred_5 = _3081 * _2862.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3090 = frontier_phi_75_pred;
                            _3089 = frontier_phi_75_pred_1;
                            _3088 = frontier_phi_75_pred_2;
                            _3087 = frontier_phi_75_pred_3;
                            _3086 = frontier_phi_75_pred_4;
                            _3085 = frontier_phi_75_pred_5;
                            _2792 = _3088 + _2805;
                            _2793 = _3089 + _2806;
                            _2794 = _3090 + _2807;
                            _2789 = _3085 + _2802;
                            _2790 = _3086 + _2803;
                            _2791 = _3087 + _2804;
                            if (_2809 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2809;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2794;
                        frontier_phi_69_pred_1 = _2793;
                        frontier_phi_69_pred_2 = _2792;
                        frontier_phi_69_pred_3 = _2791;
                        frontier_phi_69_pred_4 = _2790;
                        frontier_phi_69_pred_5 = _2789;
                    }
                    _2461 = frontier_phi_69_pred;
                    _2459 = frontier_phi_69_pred_1;
                    _2457 = frontier_phi_69_pred_2;
                    _2455 = frontier_phi_69_pred_3;
                    _2453 = frontier_phi_69_pred_4;
                    _2451 = frontier_phi_69_pred_5;
                    uint _2596 = _2595 + 1u;
                    if (_2596 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2589 = _2451;
                        _2590 = _2453;
                        _2591 = _2455;
                        _2592 = _2457;
                        _2593 = _2459;
                        _2594 = _2461;
                        _2595 = _2596;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2461;
                frontier_phi_57_58_ladder_1 = _2459;
                frontier_phi_57_58_ladder_2 = _2457;
                frontier_phi_57_58_ladder_3 = _2455;
                frontier_phi_57_58_ladder_4 = _2453;
                frontier_phi_57_58_ladder_5 = _2451;
            }
            else
            {
                frontier_phi_57_58_ladder = _2348;
                frontier_phi_57_58_ladder_1 = _2346;
                frontier_phi_57_58_ladder_2 = _2344;
                frontier_phi_57_58_ladder_3 = _2342;
                frontier_phi_57_58_ladder_4 = _2340;
                frontier_phi_57_58_ladder_5 = _2338;
            }
            _2450 = frontier_phi_57_58_ladder_5;
            _2452 = frontier_phi_57_58_ladder_4;
            _2454 = frontier_phi_57_58_ladder_3;
            _2456 = frontier_phi_57_58_ladder_2;
            _2458 = frontier_phi_57_58_ladder_1;
            _2460 = frontier_phi_57_58_ladder;
        }
        float _2465 = isnan(1.0) ? _535 : (isnan(_535) ? 1.0 : min(_535, 1.0));
        _2250 = (_2465 * _2456) + _1706;
        _2252 = (_2465 * _2458) + _1708;
        _2254 = (_2465 * _2460) + _1710;
        _2256 = ((_2450 * 0.039999999105930328369140625) * _2465) + _2036;
        _2258 = ((_2452 * 0.039999999105930328369140625) * _2465) + _2038;
        _2260 = ((_2454 * 0.039999999105930328369140625) * _2465) + _2040;
    }
    else
    {
        _2250 = _1706;
        _2252 = _1708;
        _2254 = _1710;
        _2256 = _2036;
        _2258 = _2038;
        _2260 = _2040;
    }
    float _4096 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _4107 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _4118 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    uint _2280 = _509 + 6u;
    float _2288 = _468 / cbSceneParam._m0[86u].x;
    float _2289 = _469 / cbSceneParam._m0[86u].y;
    vec4 _2303 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2288, _2289, (log2((isnan(cbSceneParam._m0[77u].w) ? _402 : (isnan(_402) ? cbSceneParam._m0[77u].w : min(_402, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2305 = _2303.x;
    float _2306 = _2303.y;
    float _2307 = _2303.z;
    float _2308 = _2303.w;
    float _2400;
    float _2402;
    float _2404;
    float _2406;
    if (_402 > cbSceneParam._m0[78u].w)
    {
        float _2363 = isnan(_402) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _402 : min(cbSceneParam._m0[80u].w, _402));
        float _2364 = _2363 / _402;
        float _2375 = _2364 * _453;
        float _2376 = _454 * _2364;
        float _2377 = (-0.0) - _2376;
        float _2378 = _2364 * _455;
        float _2380 = (cbSceneParam._m0[77u].w * _2377) / _2363;
        float _2381 = _2380 + cbSceneParam._m0[79u].w;
        float _2382 = cbSceneParam._m0[79u].w - _2376;
        float _2388 = sqrt(((_2375 * _2375) + (_2376 * _2376)) + (_2378 * _2378));
        float _2391 = (1.0 - (cbSceneParam._m0[77u].w / _2363)) * _2388;
        float _2396 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2398 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2551;
        if (abs((_2377 - _2380) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2551 = ((((_2381 > 0.0) ? exp2(_2396 * _2381) : (2.0 - exp2(_2398 * _2381))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2391;
        }
        else
        {
            float _2511 = 1.0 / cbSceneParam._m0[80u].x;
            float _2512 = isnan(_2382) ? _2381 : (isnan(_2381) ? _2382 : max(_2381, _2382));
            float _2513 = isnan(_2382) ? _2381 : (isnan(_2381) ? _2382 : min(_2381, _2382));
            float _2522 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : min(_2512, 0.0));
            float _2523 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : min(_2513, 0.0));
            _2551 = ((abs(_2388 / _2377) * cbSceneParam._m0[80u].y) * ((((_2522 - _2523) * 2.0) - ((exp2(_2396 * (isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0)))) - exp2(_2396 * (isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0))))) * _2511)) - ((exp2(_2398 * _2522) - exp2(_2398 * _2523)) * _2511))) + (_2391 * cbSceneParam._m0[80u].z);
        }
        vec4 _2553 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2288, _2289, 1.0), 0.0);
        float _2562 = exp2((_2551 * (-1.44269502162933349609375)) * (1.0 - _2553.w));
        float _2563 = log2(_2562);
        float _2579 = log2(_2308);
        _2400 = (exp2(_2579 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2563 * cbSceneParam._m0[78u].x)) * _2553.x) / cbSceneParam._m0[78u].x)) + _2305;
        _2402 = (exp2(_2579 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2563 * cbSceneParam._m0[78u].y)) * _2553.y) / cbSceneParam._m0[78u].y)) + _2306;
        _2404 = (exp2(_2579 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2563 * cbSceneParam._m0[78u].z)) * _2553.z) / cbSceneParam._m0[78u].z)) + _2307;
        _2406 = _2562 * _2308;
    }
    else
    {
        _2400 = _2305;
        _2402 = _2306;
        _2404 = _2307;
        _2406 = _2308;
    }
    float _2418 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2419 = _2418 == 3.0;
    float _2420 = log2(_2406);
    float _2427 = exp2(_2420 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2250 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _535))) + ((_2256 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1342)) * cbPerFrame._m0[3u].x));
    float _2428 = exp2(_2420 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2252 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _535))) + ((_2258 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1342)) * cbPerFrame._m0[3u].x));
    float _2429 = exp2(_2420 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2254 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _535))) + ((_2260 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1342)) * cbPerFrame._m0[3u].x));
    float _2438 = (_2418 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2438 * (_2419 ? _2427 : (_2427 + (cbSceneParam._m0[72u].w * _2400)));
    SV_Target.y = _2438 * (_2419 ? _2428 : (_2428 + (cbSceneParam._m0[72u].w * _2402)));
    SV_Target.z = _2438 * (_2419 ? _2429 : (_2429 + (cbSceneParam._m0[72u].w * _2404)));
    SV_Target.w = cbInstanceData._m0[_2280].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2280].w;
}


