#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _953;
float _3345;
float _3346;
float _3347;
float _3348;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    vec4 _249 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _276 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _309 = (TEXCOORD_7.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMtdParam._m0[11u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[11u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3357 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    float _317 = (_310 * ((_276.x * cbMtdParam._m0[10u].x) - _255)) + _255;
    float _318 = (_310 * ((_276.y * cbMtdParam._m0[10u].y) - _256)) + _256;
    float _319 = (_310 * ((_276.z * cbMtdParam._m0[10u].z) - _257)) + _257;
    vec4 _331 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _333 = _331.x;
    float _334 = _331.y;
    float _335 = _331.z;
    vec4 _347 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _360 = ((_347.z - _335) * _310) + _335;
    float _364 = ((((_347.x - _333) * _310) + _333) * 2.0) + (-1.0);
    float _366 = ((((_347.y - _334) * _310) + _334) * 2.0) + (-1.0);
    float _367 = dot(vec2(_364, _366), vec2(_364, _366));
    float _3368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _372 = sqrt(1.0 - (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))));
    float _375 = fma(_372, _221, fma(_366, _213 * TANGENT.x, (_199 * _191) * _364));
    float _378 = fma(_372, _222, fma(_366, _213 * TANGENT.y, (_199 * _192) * _364));
    float _381 = fma(_372, _223, fma(_366, _213 * TANGENT.z, (_199 * _193) * _364));
    float _385 = inversesqrt(dot(vec3(_375, _378, _381), vec3(_375, _378, _381)));
    float _386 = _385 * _375;
    float _387 = _385 * _378;
    float _388 = _385 * _381;
    float _3379 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _389 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _3390 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3401 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3412 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _408 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _459 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _449);
    float _460 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _449);
    float _461 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _449);
    float _465 = inversesqrt(dot(vec3(_459, _460, _461), vec3(_459, _460, _461)));
    float _466 = _459 * _465;
    float _467 = _460 * _465;
    float _468 = _461 * _465;
    vec4 _473 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _475 = _473.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _633 = sqrt(((_459 * _459) + (_460 * _460)) + (_461 * _461));
        float _639 = (cbMatDynParam._m0[5u].x * _633) + cbMatDynParam._m0[5u].y;
        float _3423 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _640 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _644 = (cbMatDynParam._m0[5u].z * _633) + cbMatDynParam._m0[5u].w;
        float _3434 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) - _640)) + _640) < ((_475 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _487 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _488 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _508 = fma(_388, cbSceneParam._m0[5u].z, fma(_387, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _386));
    float _511 = fma(_388, cbSceneParam._m0[6u].z, fma(_387, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _386));
    float _514 = fma(_388, cbSceneParam._m0[7u].z, fma(_387, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _386));
    uint _527 = uint(roundEven(NORMAL.w)) * 13u;
    uint _529 = _527 + 9u;
    uint _530 = _529 + uint(cbMatDynParam._m0[0u].w);
    float _536 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * cbInstanceData._m0[_530].x;
    float _537 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * cbInstanceData._m0[_530].y;
    float _538 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * cbInstanceData._m0[_530].z;
    float _3445 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _539 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _3456 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _540 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _3467 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    vec4 _550 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _487, cbSceneParam._m0[86u].y * _488));
    float _553 = _550.x * TEXCOORD_7.w;
    float _554 = dot(vec3(_386, _387, _388), vec3(_466, _467, _468));
    float _557 = _554 * 2.0;
    float _561 = (_557 * _386) - _466;
    float _562 = (_557 * _387) - _467;
    float _563 = (_557 * _388) - _468;
    float _567 = abs(dot(vec3(_466, _467, _468), vec3(_386, _387, _388)));
    float _3478 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _569 = sqrt(_389);
    float _582 = exp2((_569 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_569 * 3.0));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _952;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _677 = fma(_622, cbModelParam._m0[26u].z, fma(_618, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614));
        float _681 = fma(_622, cbModelParam._m0[27u].z, fma(_618, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614));
        float _685 = fma(_622, cbModelParam._m0[28u].z, fma(_618, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614));
        float _710 = _614 + _386;
        float _711 = _618 + _387;
        float _712 = _622 + _388;
        float _722 = fma(_712, cbModelParam._m0[26u].z, fma(_711, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _710)) - _677;
        float _723 = fma(_712, cbModelParam._m0[27u].z, fma(_711, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _710)) - _681;
        float _724 = fma(_712, cbModelParam._m0[28u].z, fma(_711, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _710)) - _685;
        float _728 = inversesqrt(dot(vec3(_722, _723, _724), vec3(_722, _723, _724)));
        float _741 = ((_728 * _722) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_677 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _742 = ((_728 * _723) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_681 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _743 = ((_728 * _724) / cbModelParam._m0[34u].z) + ((((((_685 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_741, _742, _743), 0.0);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_741, _742, _743), 0.0);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_741, _742, _743), 0.0);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_741, _742, _743), 0.0);
        float _780 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _781 = _780 * (_746.x + (-0.5));
        float _782 = _780 * (_746.y + (-0.5));
        float _783 = _780 * (_746.z + (-0.5));
        float _790 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _791 = _790 * (_753.x + (-0.5));
        float _792 = _790 * (_753.y + (-0.5));
        float _793 = _790 * (_753.z + (-0.5));
        float _800 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _801 = _800 * (_760.x + (-0.5));
        float _802 = _800 * (_760.y + (-0.5));
        float _803 = _800 * (_760.z + (-0.5));
        float _810 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_767.x + (-0.5));
        float _812 = _810 * (_767.y + (-0.5));
        float _813 = _810 * (_767.z + (-0.5));
        float _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = _781 * 0.5;
        float _818 = _791 * 0.5;
        float _819 = _801 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _834 = (dot(vec3(_386, _387, _388), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _844 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_814 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3526 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_846 + 1.0))) + _851) * _814;
        float _861 = _782 * 0.5;
        float _862 = _792 * 0.5;
        float _863 = _802 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _877 = (dot(vec3(_386, _387, _388), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _886 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3559 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_888 + 1.0))) + _893) * _815;
        float _903 = _783 * 0.5;
        float _904 = _793 * 0.5;
        float _905 = _803 * 0.5;
        float _906 = dot(vec3(_903, _904, _905), vec3(_903, _904, _905));
        float _911 = (_906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_906);
        float _919 = (dot(vec3(_386, _387, _388), vec3(_911 * _903, _911 * _904, _911 * _905)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _928 = sqrt(((_904 * _904) + (_903 * _903)) + (_905 * _905)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3592 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_930 + 1.0))) + _935) * _816;
        _952 = _783;
        _954 = _782;
        _955 = _781;
        _956 = _793;
        _957 = _792;
        _958 = _791;
        _959 = _803;
        _960 = _802;
        _961 = _801;
        _962 = _816;
        _963 = _815;
        _964 = _814;
        _965 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
    }
    else
    {
        _952 = _953;
        _954 = _953;
        _955 = _953;
        _956 = _953;
        _957 = _953;
        _958 = _953;
        _959 = _953;
        _960 = _953;
        _961 = _953;
        _962 = _953;
        _963 = _953;
        _964 = _953;
        _965 = 0.0;
        _966 = 0.0;
        _967 = 0.0;
    }
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _996 = fma(_622, cbModelParam._m0[30u].z, fma(_618, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _614));
        float _1000 = fma(_622, cbModelParam._m0[31u].z, fma(_618, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _614));
        float _1004 = fma(_622, cbModelParam._m0[32u].z, fma(_618, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _614));
        float _1027 = _614 + _386;
        float _1028 = _618 + _387;
        float _1029 = _622 + _388;
        float _1039 = fma(_1029, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1027)) - _996;
        float _1040 = fma(_1029, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1027)) - _1000;
        float _1041 = fma(_1029, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1027)) - _1004;
        float _1045 = inversesqrt(dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041)));
        float _1058 = ((_1045 * _1039) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_996 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1045 * _1040) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1000 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1045 * _1041) / cbModelParam._m0[35u].z) + ((((((_1004 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        float _1095 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1062.x + (-0.5));
        float _1097 = _1095 * (_1062.y + (-0.5));
        float _1098 = _1095 * (_1062.z + (-0.5));
        float _1105 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1069.x + (-0.5));
        float _1107 = _1105 * (_1069.y + (-0.5));
        float _1108 = _1105 * (_1069.z + (-0.5));
        float _1115 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1076.x + (-0.5));
        float _1117 = _1115 * (_1076.y + (-0.5));
        float _1118 = _1115 * (_1076.z + (-0.5));
        float _1125 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1083.x + (-0.5));
        float _1127 = _1125 * (_1083.y + (-0.5));
        float _1128 = _1125 * (_1083.z + (-0.5));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = _1096 * 0.5;
        float _1133 = _1106 * 0.5;
        float _1134 = _1116 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_386, _387, _388), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3655 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1159 + 1.0))) + _1164) * _1129;
        float _1174 = _1097 * 0.5;
        float _1175 = _1107 * 0.5;
        float _1176 = _1117 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_386, _387, _388), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3688 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1201 + 1.0))) + _1206) * _1130;
        float _1216 = _1098 * 0.5;
        float _1217 = _1108 * 0.5;
        float _1218 = _1118 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_386, _387, _388), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3721 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1243 + 1.0))) + _1248) * _1131;
        _1265 = _1098;
        _1266 = _1097;
        _1267 = _1096;
        _1268 = _1108;
        _1269 = _1107;
        _1270 = _1106;
        _1271 = _1118;
        _1272 = _1117;
        _1273 = _1116;
        _1274 = _1131;
        _1275 = _1130;
        _1276 = _1129;
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
    }
    else
    {
        _1265 = _953;
        _1266 = _953;
        _1267 = _953;
        _1268 = _953;
        _1269 = _953;
        _1270 = _953;
        _1271 = _953;
        _1272 = _953;
        _1273 = _953;
        _1274 = _953;
        _1275 = _953;
        _1276 = _953;
        _1277 = 0.0;
        _1278 = 0.0;
        _1279 = 0.0;
    }
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _965)) + _965;
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _966)) + _966;
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _967)) + _967;
    float _1312 = fma(_1291, cbSceneParam._m0[89u].z, fma(_1290, cbSceneParam._m0[89u].y, _1289 * cbSceneParam._m0[89u].x));
    float _1315 = fma(_1291, cbSceneParam._m0[90u].z, fma(_1290, cbSceneParam._m0[90u].y, _1289 * cbSceneParam._m0[90u].x));
    float _1318 = fma(_1291, cbSceneParam._m0[91u].z, fma(_1290, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1289));
    float _1333 = _561 * 0.5;
    float _1334 = _562 * 0.5;
    float _1335 = _563 * 0.5;
    float _1336 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1339 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1342 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1376;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1349 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_952, _956, _959, _962));
        float _1353 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_954, _957, _960, _963));
        float _1357 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_955, _958, _961, _964));
        float _1364 = dot(vec4(cbModelParam._m0[39u]), vec4(_1333, _1334, _1335, 1.0));
        _1376 = dot(vec3(isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1364) ? 0.0 : (isnan(0.0) ? _1364 : max(0.0, _1364))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1376 = 1.0;
    }
    float _1387;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1378 = dot(vec4(cbModelParam._m0[40u]), vec4(_1333, _1334, _1335, 1.0));
        _1387 = dot(vec3(isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1378) ? 0.0 : (isnan(0.0) ? _1378 : max(0.0, _1378))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1387 = 1.0;
    }
    float _1391 = (_1387 * cbModelParam._m0[1u].x) + (_1376 * (1.0 - cbModelParam._m0[1u].x));
    float _1401 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _389);
    float _1402 = isnan(_1401) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1401 : min(cbModelParam._m0[25u].z, _1401));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1451 = fma(_622, cbModelParam._m0[13u].z, fma(_618, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _614)) + cbModelParam._m0[13u].w;
        float _1455 = fma(_622, cbModelParam._m0[14u].z, fma(_618, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _614)) + cbModelParam._m0[14u].w;
        float _1459 = fma(_622, cbModelParam._m0[15u].z, fma(_618, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _614)) + cbModelParam._m0[15u].w;
        float _1462 = fma(_563, cbModelParam._m0[13u].z, fma(_562, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _561));
        float _1465 = fma(_563, cbModelParam._m0[14u].z, fma(_562, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _561));
        float _1468 = fma(_563, cbModelParam._m0[15u].z, fma(_562, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _561));
        float _1496;
        if (_1462 > 0.0)
        {
            _1496 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1496 = frontier_phi_19_17_ladder;
        }
        float _1721;
        if (_1465 > 0.0)
        {
            _1721 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1721 = frontier_phi_28_24_ladder;
        }
        float _1967;
        if (_1468 > 0.0)
        {
            _1967 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1967 = frontier_phi_40_35_ladder;
        }
        float _1969 = isnan(_1721) ? _1496 : (isnan(_1496) ? _1721 : min(_1496, _1721));
        float _1970 = isnan(_1967) ? _1969 : (isnan(_1969) ? _1967 : min(_1969, _1967));
        float _1974 = (_1970 * _1462) + _1451;
        float _1975 = (_1970 * _1465) + _1455;
        float _1976 = (_1970 * _1468) + _1459;
        float _1977 = _1970 * 9.9999997473787516355514526367188e-05;
        float _1979 = (-1.0) - _1977;
        float _1981 = _1977 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1976 > _1981) || ((_1976 < _1979) || ((_1975 > _1981) || ((_1975 < _1979) || ((_1974 < _1979) || (_1974 > _1981))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2100 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1976, cbModelParam._m0[9u].z, fma(_1975, cbModelParam._m0[9u].y, _1974 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1976, cbModelParam._m0[10u].z, fma(_1975, cbModelParam._m0[10u].y, _1974 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1976, cbModelParam._m0[11u].z, fma(_1975, cbModelParam._m0[11u].y, _1974 * cbModelParam._m0[11u].x))), _1402);
            frontier_phi_18_40_ladder = _2100.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2100.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2100.x * cbModelParam._m0[1u].y;
        }
        _1484 = frontier_phi_18_40_ladder_2;
        _1486 = frontier_phi_18_40_ladder_1;
        _1488 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1472 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_561, _562, _563), _1402);
        _1484 = _1472.x * cbModelParam._m0[1u].y;
        _1486 = _1472.y * cbModelParam._m0[1u].y;
        _1488 = _1472.z * cbModelParam._m0[1u].y;
    }
    float _1492 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _389);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1492 : min(cbModelParam._m0[25u].w, _1492));
    float _1586;
    float _1588;
    float _1590;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1550 = fma(_622, cbModelParam._m0[21u].z, fma(_618, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _614)) + cbModelParam._m0[21u].w;
        float _1554 = fma(_622, cbModelParam._m0[22u].z, fma(_618, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _614)) + cbModelParam._m0[22u].w;
        float _1558 = fma(_622, cbModelParam._m0[23u].z, fma(_618, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _614)) + cbModelParam._m0[23u].w;
        float _1561 = fma(_563, cbModelParam._m0[21u].z, fma(_562, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _561));
        float _1564 = fma(_563, cbModelParam._m0[22u].z, fma(_562, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _561));
        float _1567 = fma(_563, cbModelParam._m0[23u].z, fma(_562, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _561));
        float _1726;
        if (_1561 > 0.0)
        {
            _1726 = abs((1.0 - _1550) / _1561);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1550 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1726 = frontier_phi_30_26_ladder;
        }
        float _1994;
        if (_1564 > 0.0)
        {
            _1994 = abs((1.0 - _1554) / _1564);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1554 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1994 = frontier_phi_42_37_ladder;
        }
        float _2199;
        if (_1567 > 0.0)
        {
            _2199 = abs((1.0 - _1558) / _1567);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1558 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2199 = frontier_phi_51_48_ladder;
        }
        float _2201 = isnan(_1994) ? _1726 : (isnan(_1726) ? _1994 : min(_1726, _1994));
        float _2202 = isnan(_2199) ? _2201 : (isnan(_2201) ? _2199 : min(_2201, _2199));
        float _2206 = (_2202 * _1561) + _1550;
        float _2207 = (_2202 * _1564) + _1554;
        float _2208 = (_2202 * _1567) + _1558;
        float _2209 = _2202 * 9.9999997473787516355514526367188e-05;
        float _2210 = (-1.0) - _2209;
        float _2212 = _2209 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2208 > _2212) || ((_2208 < _2210) || ((_2207 > _2212) || ((_2207 < _2210) || ((_2206 < _2210) || (_2206 > _2212))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2208, cbModelParam._m0[17u].z, fma(_2207, cbModelParam._m0[17u].y, _2206 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2208, cbModelParam._m0[18u].z, fma(_2207, cbModelParam._m0[18u].y, _2206 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2208, cbModelParam._m0[19u].z, fma(_2207, cbModelParam._m0[19u].y, _2206 * cbModelParam._m0[19u].x))), _1493);
            frontier_phi_27_51_ladder = _2406.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2406.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2406.x * cbModelParam._m0[1u].z;
        }
        _1586 = frontier_phi_27_51_ladder_2;
        _1588 = frontier_phi_27_51_ladder_1;
        _1590 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1570 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_561, _562, _563), _1493);
        _1586 = _1570.x * cbModelParam._m0[1u].z;
        _1588 = _1570.y * cbModelParam._m0[1u].z;
        _1590 = _1570.z * cbModelParam._m0[1u].z;
    }
    float _1602 = ((((1.0 - _582) * ((_569 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_582 * _569)) * _553;
    float _1603 = _1602 * ((cbModelParam._m0[1u].w * (_1586 - _1484)) + _1484);
    float _1604 = _1602 * ((cbModelParam._m0[1u].w * (_1588 - _1486)) + _1486);
    float _1605 = _1602 * ((cbModelParam._m0[1u].w * (_1590 - _1488)) + _1488);
    float _1608 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1611 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1614 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, _1603 * cbSceneParam._m0[91u].x));
    vec4 _1622 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_487, _488));
    float _1624 = _1622.w;
    float _1636 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1624);
    float _1637 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1624);
    float _1638 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1624);
    uvec4 _1642 = floatBitsToUint(cbInstanceData._m0[_527 + 5u]);
    uint _1644 = _1642.x * 14u;
    uint _1645 = _1644 + 13u;
    float _1652 = _553 + (-1.0);
    float _1657 = (cbLight._m0[_1645].x * _1652) + 1.0;
    float _1658 = (cbLight._m0[_1645].y * _1652) + 1.0;
    float _1659 = (cbLight._m0[_1645].z * _1652) + 1.0;
    float _1660 = (cbLight._m0[_1645].w * _1652) + 1.0;
    uint _1661 = _1644 + 5u;
    float _1667 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
    uint _1671 = _1644 + 4u;
    float _1680 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
    uint _1684 = _1644 | 1u;
    float _1695 = dot(vec3(cbLight._m0[_1644].xyz), vec3(_386, _387, _388));
    float _1698 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_386, _387, _388));
    float _3857 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _3868 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1703 = (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.3183098733425140380859375;
    float _1705 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.3183098733425140380859375;
    float _1712 = ((cbLight._m0[_1661].x * _1667) * _1705) + (((cbLight._m0[_1671].x * _1636) * _1680) * _1703);
    float _1713 = ((_1667 * cbLight._m0[_1661].y) * _1705) + (((cbLight._m0[_1671].y * _1637) * _1680) * _1703);
    float _1714 = ((_1667 * cbLight._m0[_1661].z) * _1705) + (((cbLight._m0[_1671].z * _1638) * _1680) * _1703);
    uvec4 _1718 = floatBitsToUint(cbLight._m0[_1644 + 12u]);
    bool _1720 = _1718.x == 0u;
    float _1731;
    float _1733;
    float _1735;
    if (_1720)
    {
        _1731 = _1712;
        _1733 = _1713;
        _1735 = _1714;
    }
    else
    {
        uint _1739 = _1644 + 6u;
        float _1755 = (dot(vec3(cbLight._m0[_1644 + 2u].xyz), vec3(_386, _387, _388)) * 0.5) + 0.5;
        float _1756 = _1755 * _1755;
        float _3879 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1758 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _1731 = (((cbLight._m0[_1739].x * 0.3183098733425140380859375) * _1757) * _1758) + _1712;
        _1733 = (((cbLight._m0[_1739].y * 0.3183098733425140380859375) * _1757) * _1758) + _1713;
        _1735 = (((cbLight._m0[_1739].z * 0.3183098733425140380859375) * _1757) * _1758) + _1714;
    }
    bool _1738 = _1718.y == 0u;
    float _1776;
    float _1778;
    float _1780;
    if (_1738)
    {
        _1776 = _1731;
        _1778 = _1733;
        _1780 = _1735;
    }
    else
    {
        uint _1938 = _1644 + 7u;
        float _1954 = (dot(vec3(cbLight._m0[_1644 + 3u].xyz), vec3(_386, _387, _388)) * 0.5) + 0.5;
        float _1955 = _1954 * _1954;
        float _3895 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1957 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
        _1776 = (((cbLight._m0[_1938].x * 0.3183098733425140380859375) * _1956) * _1957) + _1731;
        _1778 = (((cbLight._m0[_1938].y * 0.3183098733425140380859375) * _1956) * _1957) + _1733;
        _1780 = (((cbLight._m0[_1938].z * 0.3183098733425140380859375) * _1956) * _1957) + _1735;
    }
    uint _1783 = _1644 + 8u;
    float _1796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1644].w)) * _389) * 0.949999988079071044921875);
    float _1797 = _1796 * _1796;
    float _1798 = cbLight._m0[_1644].x + _466;
    float _1799 = cbLight._m0[_1644].y + _467;
    float _1800 = cbLight._m0[_1644].z + _468;
    float _1804 = inversesqrt(dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800)));
    float _1805 = _1804 * _1798;
    float _1806 = _1804 * _1799;
    float _1807 = _1804 * _1800;
    float _1808 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1644].xyz));
    float _3911 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _1812 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _1813 = dot(vec3(_386, _387, _388), vec3(_1805, _1806, _1807));
    float _3933 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1816 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1817 = dot(vec3(cbLight._m0[_1644].xyz), vec3(_1805, _1806, _1807));
    float _3944 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1821 = _1797 * _1797;
    float _1825 = ((_1816 * _1816) * (_1821 + (-1.0))) + 1.0;
    float _1836 = (exp2(log2(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1837 = 1.0 - _1797;
    float _1848 = (0.5 / (((_1812 * ((_1811 * _1837) + _1797)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _1837) + _1797) * _1811))) * _1811;
    float _3955 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1850 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1821 / ((_1825 * _1825) * 3.141590118408203125));
    uint _1864 = _1644 + 9u;
    float _1875 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1684].w)) * _389) * 0.949999988079071044921875);
    float _1876 = _1875 * _1875;
    float _1877 = cbLight._m0[_1684].x + _466;
    float _1878 = cbLight._m0[_1684].y + _467;
    float _1879 = cbLight._m0[_1684].z + _468;
    float _1883 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
    float _1884 = _1883 * _1877;
    float _1885 = _1883 * _1878;
    float _1886 = _1883 * _1879;
    float _1887 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1684].xyz));
    float _3966 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _1891 = dot(vec3(_386, _387, _388), vec3(_1884, _1885, _1886));
    float _3977 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_1884, _1885, _1886));
    float _3988 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1876 * _1876;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1912 = (exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1913 = 1.0 - _1876;
    float _1923 = (0.5 / (((_1812 * ((_1890 * _1913) + _1876)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _1913) + _1876) * _1890))) * _1890;
    float _3999 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1925 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    float _1935 = (((_1912 * cbLight._m0[_1864].x) * _1925) * _1667) + ((((cbLight._m0[_1783].x * _1636) * _1836) * _1850) * _1680);
    float _1936 = (((_1912 * cbLight._m0[_1864].y) * _1925) * _1667) + ((((cbLight._m0[_1783].y * _1637) * _1836) * _1850) * _1680);
    float _1937 = (((_1912 * cbLight._m0[_1864].z) * _1925) * _1667) + ((((cbLight._m0[_1783].z * _1638) * _1836) * _1850) * _1680);
    float _1999;
    float _2001;
    float _2003;
    if (_1720)
    {
        _1999 = _1935;
        _2001 = _1936;
        _2003 = _1937;
    }
    else
    {
        uint _2005 = _1644 + 2u;
        uint _2009 = _1644 + 10u;
        float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _389) * 0.949999988079071044921875);
        float _2024 = _2023 * _2023;
        float _2025 = cbLight._m0[_2005].x + _466;
        float _2026 = cbLight._m0[_2005].y + _467;
        float _2027 = cbLight._m0[_2005].z + _468;
        float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
        float _2032 = _2031 * _2025;
        float _2033 = _2031 * _2026;
        float _2034 = _2031 * _2027;
        float _2035 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_2005].xyz));
        float _4010 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2038 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _2039 = dot(vec3(_386, _387, _388), vec3(_2032, _2033, _2034));
        float _4021 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2043 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2032, _2033, _2034));
        float _4032 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2047 = _2024 * _2024;
        float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
        float _2060 = (exp2(log2(1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2061 = 1.0 - _2024;
        float _2071 = (0.5 / (((_1812 * ((_2038 * _2061) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _2061) + _2024) * _2038))) * _2038;
        float _4043 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2073 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
        float _2074 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _1999 = (((_2060 * cbLight._m0[_2009].x) * _2073) * _2074) + _1935;
        _2001 = (((_2060 * cbLight._m0[_2009].y) * _2073) * _2074) + _1936;
        _2003 = (((_2060 * cbLight._m0[_2009].z) * _2073) * _2074) + _1937;
    }
    float _2109;
    float _2111;
    float _2113;
    if (_1738)
    {
        _2109 = _1999;
        _2111 = _2001;
        _2113 = _2003;
    }
    else
    {
        uint _2120 = _1644 + 3u;
        uint _2124 = _1644 + 11u;
        float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _389) * 0.949999988079071044921875);
        float _2139 = _2138 * _2138;
        float _2140 = cbLight._m0[_2120].x + _466;
        float _2141 = cbLight._m0[_2120].y + _467;
        float _2142 = cbLight._m0[_2120].z + _468;
        float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
        float _2147 = _2146 * _2140;
        float _2148 = _2146 * _2141;
        float _2149 = _2146 * _2142;
        float _2150 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_2120].xyz));
        float _4059 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _2154 = dot(vec3(_386, _387, _388), vec3(_2147, _2148, _2149));
        float _4070 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2158 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2147, _2148, _2149));
        float _4081 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2162 = _2139 * _2139;
        float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
        float _2175 = (exp2(log2(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2176 = 1.0 - _2139;
        float _2186 = (0.5 / (((_1812 * ((_2153 * _2176) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _2176) + _2139) * _2153))) * _2153;
        float _4092 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2188 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
        float _2189 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
        _2109 = (((_2175 * cbLight._m0[_2124].x) * _2188) * _2189) + _1999;
        _2111 = (((_2175 * cbLight._m0[_2124].y) * _2188) * _2189) + _2001;
        _2113 = (((_2175 * cbLight._m0[_2124].z) * _2188) * _2189) + _2003;
    }
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    if (_1642.y == 0u)
    {
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2264;
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2264;
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2264;
        uvec4 _2279 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2280 = _2279.x;
        uint _2291 = uint((float(_2279.y) * floor(float(uint(cbSceneParam._m0[85u].y * _488) / _2280))) + floor(float(uint(cbSceneParam._m0[85u].x * _487) / _2280)));
        float _2301 = (log2(_2267 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2302 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        uint _2305 = uint(isnan(14.0) ? _2302 : (isnan(_2302) ? 14.0 : min(_2302, 14.0)));
        uvec4 _2310 = texelFetch(g_lightClusterGridBuffer, int(((_2305 << 2u) + (_2291 << 6u)) >> 2u));
        uint _2311 = _2310.x;
        uint _2312 = _2279.z;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        if (((((1u << ((_2312 >> 4u) & 15u)) + 4294967295u) & _2311) == 0u) || ((_2312 & 240u) == 0u))
        {
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
        }
        else
        {
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            uint _2569 = 0u;
            uint _2578;
            bool _2579;
            for (;;)
            {
                _2578 = texelFetch(g_lightClassification, int((((_2305 << 5u) + (_2291 << 9u)) + (_2569 << 2u)) >> 2u)).x;
                _2579 = _2578 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2579)
                {
                    frontier_phi_68_pred = _2565;
                    frontier_phi_68_pred_1 = _2568;
                    frontier_phi_68_pred_2 = _2567;
                    frontier_phi_68_pred_3 = _2566;
                    frontier_phi_68_pred_4 = _2564;
                    frontier_phi_68_pred_5 = _2563;
                }
                else
                {
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    uint _2714;
                    _2708 = _2563;
                    _2709 = _2564;
                    _2710 = _2565;
                    _2711 = _2566;
                    _2712 = _2567;
                    _2713 = _2568;
                    _2714 = _2578;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    for (;;)
                    {
                        uint _2718 = uint(findLSB(_2714)) + (_2569 << 5u);
                        uint _2715 = (_2714 + 4294967295u) & _2714;
                        uint _2720 = _2718 * 48u;
                        vec4 _2734 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2720)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 3u)).x));
                        uint _2740 = (_2718 * 48u) + 4u;
                        vec4 _2753 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2740)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 3u)).x));
                        uint _2759 = (_2718 * 48u) + 8u;
                        vec3 _2770 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2759)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 2u)).x));
                        float _2774 = _2734.x - _2265;
                        float _2775 = _2734.y - _2266;
                        float _2776 = _2734.z - _2267;
                        float _2777 = dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776));
                        float _2780 = inversesqrt(_2777);
                        float _2781 = _2780 * _2774;
                        float _2782 = _2780 * _2775;
                        float _2783 = _2780 * _2776;
                        float _2784 = dot(vec3(_508, _511, _514), vec3(_2781, _2782, _2783));
                        float _2789 = 1.0 - (_2777 * _2734.w);
                        float _4118 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2790 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2791 = sqrt(_2777) * _2753.w;
                        float _2794 = 1.39999997615814208984375 / (_2791 + 1.39999997615814208984375);
                        float _2795 = _2794 * _2794;
                        float _2798 = ((1.0 - _2795) * _2784) + _2795;
                        float _2801 = _2791 * _2791;
                        float _2805 = ((isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0))) * _2790) / ((_2801 * 0.699999988079071044921875) + 1.0);
                        float _2809 = (-0.0) - _2265;
                        float _2810 = (-0.0) - _2266;
                        float _2811 = (-0.0) - _2267;
                        float _2815 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
                        float _2816 = _2815 * _2809;
                        float _2817 = _2815 * _2810;
                        float _2818 = _2815 * _2811;
                        float _2826 = exp2(log2(1.0 / ((_2801 * 3.5) + 5.0)) * 0.25);
                        float _2827 = 1.0 - _569;
                        float _2834 = sqrt(1.0 - ((1.0 - (_2827 * _2827)) * (1.0 - (_2826 * _2826))));
                        float _2835 = _2834 * _2834;
                        float _2836 = _2835 * _2835;
                        float _2837 = _2816 + _2781;
                        float _2838 = _2817 + _2782;
                        float _2839 = _2818 + _2783;
                        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
                        float _2847 = dot(vec3(_508, _511, _514), vec3(_2816, _2817, _2818));
                        float _4134 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2850 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2851 = dot(vec3(_508, _511, _514), vec3(_2843 * _2837, _2843 * _2838, _2843 * _2839));
                        float _4145 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2854 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                        float _2858 = ((_2854 * _2854) * (_2836 + (-1.0))) + 1.0;
                        float _2859 = _2794 * _2835;
                        float _2860 = _2859 * _2859;
                        float _2863 = ((1.0 - _2860) * _2784) + _2860;
                        float _4156 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2864 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2865 = 1.0 - _2835;
                        float _2875 = (0.5 / (((_2864 * ((_2850 * _2865) + _2835)) + 9.9999999392252902907785028219223e-09) + (((_2864 * _2865) + _2835) * _2850))) * _2864;
                        float _4167 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2886 = (((_2836 * 3.1415927410125732421875) * (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) / ((_2858 * _2858) * ((_2801 * 2.1991131305694580078125) + 3.141590118408203125))) * _2790;
                        _2638 = (_2805 * _2753.x) + _2711;
                        _2639 = (_2805 * _2753.y) + _2712;
                        _2640 = (_2805 * _2753.z) + _2713;
                        _2635 = (_2886 * _2770.x) + _2708;
                        _2636 = (_2886 * _2770.y) + _2709;
                        _2637 = (_2886 * _2770.z) + _2710;
                        if (_2715 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2708 = _2635;
                            _2709 = _2636;
                            _2710 = _2637;
                            _2711 = _2638;
                            _2712 = _2639;
                            _2713 = _2640;
                            _2714 = _2715;
                        }
                    }
                    frontier_phi_68_pred = _2637;
                    frontier_phi_68_pred_1 = _2640;
                    frontier_phi_68_pred_2 = _2639;
                    frontier_phi_68_pred_3 = _2638;
                    frontier_phi_68_pred_4 = _2636;
                    frontier_phi_68_pred_5 = _2635;
                }
                _2416 = frontier_phi_68_pred;
                _2422 = frontier_phi_68_pred_1;
                _2420 = frontier_phi_68_pred_2;
                _2418 = frontier_phi_68_pred_3;
                _2414 = frontier_phi_68_pred_4;
                _2412 = frontier_phi_68_pred_5;
                uint _2570 = _2569 + 1u;
                if (_2570 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2563 = _2412;
                    _2564 = _2414;
                    _2565 = _2416;
                    _2566 = _2418;
                    _2567 = _2420;
                    _2568 = _2422;
                    _2569 = _2570;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
        }
        uvec4 _2425 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2426 = _2425.z;
        uint _2428 = (_2426 >> 8u) & 15u;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        if (((4294967295u << _2428) & _2311) == 0u)
        {
            _2531 = _2411;
            _2533 = _2413;
            _2535 = _2415;
            _2537 = _2417;
            _2539 = _2419;
            _2541 = _2421;
        }
        else
        {
            float _2556 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
            float _2557 = _2556 * _2265;
            float _2558 = _2556 * _2266;
            float _2559 = _2556 * _2267;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2428 < ((_2426 >> 12u) & 15u))
            {
                float _2532;
                float _2534;
                float _2536;
                float _2538;
                float _2540;
                float _2542;
                float _2691 = _2411;
                float _2692 = _2413;
                float _2693 = _2415;
                float _2694 = _2417;
                float _2695 = _2419;
                float _2696 = _2421;
                uint _2697 = _2428;
                uint _2706;
                bool _2707;
                for (;;)
                {
                    _2706 = texelFetch(g_lightClassification, int((((_2305 << 5u) + (_2291 << 9u)) + (_2697 << 2u)) >> 2u)).x;
                    _2707 = _2706 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2707)
                    {
                        frontier_phi_79_pred = _2696;
                        frontier_phi_79_pred_1 = _2695;
                        frontier_phi_79_pred_2 = _2694;
                        frontier_phi_79_pred_3 = _2693;
                        frontier_phi_79_pred_4 = _2692;
                        frontier_phi_79_pred_5 = _2691;
                    }
                    else
                    {
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _2913 = _2691;
                        float _2914 = _2692;
                        float _2915 = _2693;
                        float _2916 = _2694;
                        float _2917 = _2695;
                        float _2918 = _2696;
                        uint _2919 = _2706;
                        uint _2920;
                        vec4 _2945;
                        float _2946;
                        vec4 _2961;
                        vec3 _2973;
                        vec4 _2989;
                        vec4 _3005;
                        float _3052;
                        bool _3053;
                        for (;;)
                        {
                            uint _2930 = ((_2697 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2919));
                            _2920 = (_2919 + 4294967295u) & _2919;
                            uint _2932 = _2930 * 40u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            _2946 = _2945.w;
                            uint _2948 = (_2930 * 40u) + 4u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            uint _2963 = (_2930 * 40u) + 8u;
                            _2973 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x));
                            uint _2976 = (_2930 * 40u) + 16u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2992 = (_2930 * 40u) + 20u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3008 = (_2930 * 40u) + 24u;
                            vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3027 = (_2930 * 40u) + 28u;
                            vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            _3052 = fma(_2267, _3040.z, fma(_2266, _3040.y, _3040.x * _2265)) + _3040.w;
                            _3053 = !((fma(_2267, _3021.z, fma(_2266, _3021.y, _3021.x * _2265)) + _3021.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3053)
                            {
                                float _3080 = _2945.x - _2265;
                                float _3081 = _2945.y - _2266;
                                float _3082 = _2945.z - _2267;
                                float _3083 = dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082));
                                float _3086 = inversesqrt(_3083);
                                float _3087 = _3086 * _3080;
                                float _3088 = _3086 * _3081;
                                float _3089 = _3086 * _3082;
                                float _3093 = 1.0 - (_3083 / (_2946 * _2946));
                                float _4178 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3094 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3098 = sqrt(_3083) * _2961.w;
                                float _3100 = 1.39999997615814208984375 / (_3098 + 1.39999997615814208984375);
                                float _3101 = _3100 * _3100;
                                float _3104 = ((1.0 - _3101) * dot(vec3(_3087, _3088, _3089), vec3(_508, _511, _514))) + _3101;
                                float _3107 = _3098 * _3098;
                                float _3111 = (fma(_2267, _2989.z, fma(_2266, _2989.y, _2989.x * _2265)) + _2989.w) / _3052;
                                float _3112 = (fma(_2267, _3005.z, fma(_2266, _3005.y, _3005.x * _2265)) + _3005.w) / _3052;
                                float _3116 = 1.0 - dot(vec2(_3111, _3112), vec2(_3111, _3112));
                                float _4194 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3118 = _3117 * (((isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0))) * _3094) / ((_3107 * 0.699999988079071044921875) + 1.0));
                                float _3130 = exp2(log2(1.0 / ((_3107 * 3.5) + 5.0)) * 0.25);
                                float _3131 = 1.0 - _569;
                                float _3138 = sqrt(1.0 - ((1.0 - (_3131 * _3131)) * (1.0 - (_3130 * _3130))));
                                float _3139 = _3138 * _3138;
                                float _3140 = _3139 * _3139;
                                float _3141 = _3087 - _2557;
                                float _3142 = _3088 - _2558;
                                float _3143 = _3089 - _2559;
                                float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                                float _3151 = dot(vec3(_508, _511, _514), vec3((-0.0) - _2557, (-0.0) - _2558, (-0.0) - _2559));
                                float _4205 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3154 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3155 = dot(vec3(_508, _511, _514), vec3(_3147 * _3141, _3147 * _3142, _3147 * _3143));
                                float _4216 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3158 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3162 = ((_3158 * _3158) * (_3140 + (-1.0))) + 1.0;
                                float _3163 = _3100 * _3139;
                                float _3164 = _3163 * _3163;
                                float _3170 = ((1.0 - _3164) * dot(vec3(_508, _511, _514), vec3(_3087, _3088, _3089))) + _3164;
                                float _4227 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3172 = 1.0 - _3139;
                                float _3182 = (0.5 / (((_3171 * ((_3154 * _3172) + _3139)) + 9.9999999392252902907785028219223e-09) + (((_3171 * _3172) + _3139) * _3154))) * _3171;
                                float _4238 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3192 = (_3117 * _3094) * (((_3140 * 3.1415927410125732421875) * (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) / ((_3162 * _3162) * ((_3107 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3118 * _2961.z;
                                frontier_phi_85_pred_1 = _3118 * _2961.y;
                                frontier_phi_85_pred_2 = _3118 * _2961.x;
                                frontier_phi_85_pred_3 = _3192 * _2973.z;
                                frontier_phi_85_pred_4 = _3192 * _2973.y;
                                frontier_phi_85_pred_5 = _3192 * _2973.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3201 = frontier_phi_85_pred;
                            _3200 = frontier_phi_85_pred_1;
                            _3199 = frontier_phi_85_pred_2;
                            _3198 = frontier_phi_85_pred_3;
                            _3197 = frontier_phi_85_pred_4;
                            _3196 = frontier_phi_85_pred_5;
                            _2903 = _3199 + _2916;
                            _2904 = _3200 + _2917;
                            _2905 = _3201 + _2918;
                            _2900 = _3196 + _2913;
                            _2901 = _3197 + _2914;
                            _2902 = _3198 + _2915;
                            if (_2920 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2920;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2905;
                        frontier_phi_79_pred_1 = _2904;
                        frontier_phi_79_pred_2 = _2903;
                        frontier_phi_79_pred_3 = _2902;
                        frontier_phi_79_pred_4 = _2901;
                        frontier_phi_79_pred_5 = _2900;
                    }
                    _2542 = frontier_phi_79_pred;
                    _2540 = frontier_phi_79_pred_1;
                    _2538 = frontier_phi_79_pred_2;
                    _2536 = frontier_phi_79_pred_3;
                    _2534 = frontier_phi_79_pred_4;
                    _2532 = frontier_phi_79_pred_5;
                    uint _2698 = _2697 + 1u;
                    if (_2698 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2691 = _2532;
                        _2692 = _2534;
                        _2693 = _2536;
                        _2694 = _2538;
                        _2695 = _2540;
                        _2696 = _2542;
                        _2697 = _2698;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2538;
                frontier_phi_60_61_ladder_1 = _2542;
                frontier_phi_60_61_ladder_2 = _2540;
                frontier_phi_60_61_ladder_3 = _2536;
                frontier_phi_60_61_ladder_4 = _2534;
                frontier_phi_60_61_ladder_5 = _2532;
            }
            else
            {
                frontier_phi_60_61_ladder = _2417;
                frontier_phi_60_61_ladder_1 = _2421;
                frontier_phi_60_61_ladder_2 = _2419;
                frontier_phi_60_61_ladder_3 = _2415;
                frontier_phi_60_61_ladder_4 = _2413;
                frontier_phi_60_61_ladder_5 = _2411;
            }
            _2531 = frontier_phi_60_61_ladder_5;
            _2533 = frontier_phi_60_61_ladder_4;
            _2535 = frontier_phi_60_61_ladder_3;
            _2537 = frontier_phi_60_61_ladder;
            _2539 = frontier_phi_60_61_ladder_2;
            _2541 = frontier_phi_60_61_ladder_1;
        }
        float _2546 = isnan(1.0) ? _553 : (isnan(_553) ? 1.0 : min(_553, 1.0));
        _2323 = (_2546 * _2537) + _1776;
        _2325 = (_2546 * _2539) + _1778;
        _2327 = (_2546 * _2541) + _1780;
        _2329 = ((_2531 * 0.039999999105930328369140625) * _2546) + _2109;
        _2331 = ((_2533 * 0.039999999105930328369140625) * _2546) + _2111;
        _2333 = ((_2535 * 0.039999999105930328369140625) * _2546) + _2113;
    }
    else
    {
        _2323 = _1776;
        _2325 = _1778;
        _2327 = _1780;
        _2329 = _2109;
        _2331 = _2111;
        _2333 = _2113;
    }
    float _4254 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4265 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4276 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _2350 = ((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2323 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _553))) + ((_2329 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1391)) * cbPerFrame._m0[3u].x);
    float _2351 = ((isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2325 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _553))) + ((_2331 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1391)) * cbPerFrame._m0[3u].x);
    float _2352 = ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2327 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _553))) + ((_2333 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1391)) * cbPerFrame._m0[3u].x);
    uint _2353 = _527 + 6u;
    float _2361 = _487 / cbSceneParam._m0[86u].x;
    float _2362 = _488 / cbSceneParam._m0[86u].y;
    vec4 _2376 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2361, _2362, (log2((isnan(cbSceneParam._m0[77u].w) ? _408 : (isnan(_408) ? cbSceneParam._m0[77u].w : min(_408, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2378 = _2376.x;
    float _2379 = _2376.y;
    float _2380 = _2376.z;
    float _2381 = _2376.w;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    if (_408 > cbSceneParam._m0[78u].w)
    {
        float _2436 = isnan(_408) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _408 : min(cbSceneParam._m0[80u].w, _408));
        float _2437 = _2436 / _408;
        float _2448 = _2437 * _459;
        float _2449 = _460 * _2437;
        float _2450 = (-0.0) - _2449;
        float _2451 = _2437 * _461;
        float _2453 = (cbSceneParam._m0[77u].w * _2450) / _2436;
        float _2454 = _2453 + cbSceneParam._m0[79u].w;
        float _2455 = cbSceneParam._m0[79u].w - _2449;
        float _2461 = sqrt(((_2448 * _2448) + (_2449 * _2449)) + (_2451 * _2451));
        float _2464 = (1.0 - (cbSceneParam._m0[77u].w / _2436)) * _2461;
        float _2469 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2471 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2648;
        if (abs((_2450 - _2453) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2648 = ((((_2454 > 0.0) ? exp2(_2469 * _2454) : (2.0 - exp2(_2471 * _2454))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2464;
        }
        else
        {
            float _2592 = 1.0 / cbSceneParam._m0[80u].x;
            float _2593 = isnan(_2455) ? _2454 : (isnan(_2454) ? _2455 : max(_2454, _2455));
            float _2594 = isnan(_2455) ? _2454 : (isnan(_2454) ? _2455 : min(_2454, _2455));
            float _2603 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : min(_2593, 0.0));
            float _2604 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : min(_2594, 0.0));
            _2648 = ((abs(_2461 / _2450) * cbSceneParam._m0[80u].y) * ((((_2603 - _2604) * 2.0) - ((exp2(_2469 * (isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0)))) - exp2(_2469 * (isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0))))) * _2592)) - ((exp2(_2471 * _2603) - exp2(_2471 * _2604)) * _2592))) + (_2464 * cbSceneParam._m0[80u].z);
        }
        vec4 _2650 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2361, _2362, 1.0), 0.0);
        float _2659 = exp2((_2648 * (-1.44269502162933349609375)) * (1.0 - _2650.w));
        float _2660 = log2(_2659);
        float _2676 = log2(_2381);
        _2473 = (exp2(_2676 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2660 * cbSceneParam._m0[78u].x)) * _2650.x) / cbSceneParam._m0[78u].x)) + _2378;
        _2475 = (exp2(_2676 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2660 * cbSceneParam._m0[78u].y)) * _2650.y) / cbSceneParam._m0[78u].y)) + _2379;
        _2477 = (exp2(_2676 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2660 * cbSceneParam._m0[78u].z)) * _2650.z) / cbSceneParam._m0[78u].z)) + _2380;
        _2479 = _2659 * _2381;
    }
    else
    {
        _2473 = _2378;
        _2475 = _2379;
        _2477 = _2380;
        _2479 = _2381;
    }
    bool _2686;
    vec4 _2489;
    vec4 _2511;
    float _2513;
    float _2517;
    float _2518;
    float _2519;
    float _2520;
    bool _2530;
    for (;;)
    {
        _2489 = cbMatDynParam._m0[0u];
        float _2491 = roundEven(_2489.y);
        bool _2492 = _2491 == 3.0;
        float _2493 = log2(_2479);
        float _2500 = exp2(_2493 * cbSceneParam._m0[78u].x) * _2350;
        float _2501 = exp2(_2493 * cbSceneParam._m0[78u].y) * _2351;
        float _2502 = exp2(_2493 * cbSceneParam._m0[78u].z) * _2352;
        float _2509 = _475 + (-0.5);
        _2511 = cbMtdParam._m0[1u];
        _2513 = _2511.y * _2509;
        float _2516 = (_2491 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2517 = _2516 * (_2492 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2473)));
        _2518 = _2516 * (_2492 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2475)));
        _2519 = _2516 * (_2492 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2477)));
        _2520 = _2509 * 0.999000012874603271484375;
        _2530 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2530)
        {
            if ((cbInstanceData._m0[_527 + 7u].x + _2520) < 0.5)
            {
                _2686 = true;
                break;
            }
        }
        uint _2627 = _529 + uint(_2489.w);
        if ((cbInstanceData._m0[_2627].w < 1.0) && ((cbInstanceData._m0[_2627].w + _2520) < 0.5))
        {
            _2686 = true;
            break;
        }
        if ((_2513 + 1.0) < _2511.x)
        {
            _2686 = true;
            break;
        }
        _2686 = false;
        break;
    }
    float _2891;
    if (_2686)
    {
        discard_state = true;
        _2891 = 0.0;
    }
    else
    {
        _2891 = cbInstanceData._m0[_2353].w;
    }
    SV_Target.x = _2517;
    SV_Target.y = _2518;
    SV_Target.z = _2519;
    SV_Target.w = _2891;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2353].w;
    discard_exit();
}


