#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _911;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _274 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _307 = (TEXCOORD_7.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMtdParam._m0[11u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[11u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3508 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _315 = (_308 * ((_274.x * cbMtdParam._m0[10u].x) - _253)) + _253;
    float _316 = (_308 * ((_274.y * cbMtdParam._m0[10u].y) - _254)) + _254;
    float _317 = (_308 * ((_274.z * cbMtdParam._m0[10u].z) - _255)) + _255;
    vec4 _329 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _331 = _329.x;
    float _332 = _329.y;
    float _333 = _329.z;
    vec4 _345 = texture(sampler2D(M_AMSN_Mb2_M0_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _358 = ((_345.z - _333) * _308) + _333;
    float _362 = ((((_345.x - _331) * _308) + _331) * 2.0) + (-1.0);
    float _364 = ((((_345.y - _332) * _308) + _332) * 2.0) + (-1.0);
    float _365 = dot(vec2(_362, _364), vec2(_362, _364));
    float _3519 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _370 = sqrt(1.0 - (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))));
    float _373 = fma(_370, _219, fma(_364, _211 * TANGENT.x, (_197 * _189) * _362));
    float _376 = fma(_370, _220, fma(_364, _211 * TANGENT.y, (_197 * _190) * _362));
    float _379 = fma(_370, _221, fma(_364, _211 * TANGENT.z, (_197 * _191) * _362));
    float _383 = inversesqrt(dot(vec3(_373, _376, _379), vec3(_373, _376, _379)));
    float _384 = _383 * _373;
    float _385 = _383 * _376;
    float _386 = _383 * _379;
    float _3530 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _387 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3552 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3563 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _406 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _457 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _447);
    float _458 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _447);
    float _459 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _447);
    float _463 = inversesqrt(dot(vec3(_457, _458, _459), vec3(_457, _458, _459)));
    float _464 = _457 * _463;
    float _465 = _458 * _463;
    float _466 = _459 * _463;
    float _472 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _473 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _494 = fma(_386, cbSceneParam._m0[5u].z, fma(_385, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _384));
    float _497 = fma(_386, cbSceneParam._m0[6u].z, fma(_385, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _384));
    float _500 = fma(_386, cbSceneParam._m0[7u].z, fma(_385, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _384));
    uint _513 = uint(roundEven(NORMAL.w)) * 13u;
    uint _516 = (_513 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _522 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_516].x;
    float _523 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_516].y;
    float _524 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_516].z;
    float _3574 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _525 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _527 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    vec4 _536 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _472, cbSceneParam._m0[86u].y * _473));
    float _539 = _536.x * TEXCOORD_7.w;
    float _540 = dot(vec3(_384, _385, _386), vec3(_464, _465, _466));
    float _543 = _540 * 2.0;
    float _547 = (_543 * _384) - _464;
    float _548 = (_543 * _385) - _465;
    float _549 = (_543 * _386) - _466;
    float _553 = abs(dot(vec3(_464, _465, _466), vec3(_384, _385, _386)));
    float _3607 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _555 = sqrt(_387);
    float _568 = exp2((_555 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_555 * 3.0));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _910;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _635 = fma(_608, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _600));
        float _639 = fma(_608, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _600));
        float _643 = fma(_608, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _600));
        float _668 = _600 + _384;
        float _669 = _604 + _385;
        float _670 = _608 + _386;
        float _680 = fma(_670, cbModelParam._m0[26u].z, fma(_669, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _668)) - _635;
        float _681 = fma(_670, cbModelParam._m0[27u].z, fma(_669, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _668)) - _639;
        float _682 = fma(_670, cbModelParam._m0[28u].z, fma(_669, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _668)) - _643;
        float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
        float _699 = ((_686 * _680) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_635 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_686 * _681) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_639 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_686 * _682) / cbModelParam._m0[34u].z) + ((((((_643 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        float _738 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_704.x + (-0.5));
        float _740 = _738 * (_704.y + (-0.5));
        float _741 = _738 * (_704.z + (-0.5));
        float _748 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_711.x + (-0.5));
        float _750 = _748 * (_711.y + (-0.5));
        float _751 = _748 * (_711.z + (-0.5));
        float _758 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_718.x + (-0.5));
        float _760 = _758 * (_718.y + (-0.5));
        float _761 = _758 * (_718.z + (-0.5));
        float _768 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_725.x + (-0.5));
        float _770 = _768 * (_725.y + (-0.5));
        float _771 = _768 * (_725.z + (-0.5));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = _739 * 0.5;
        float _776 = _749 * 0.5;
        float _777 = _759 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _792 = (dot(vec3(_384, _385, _386), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _802 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3655 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_804 + 1.0))) + _809) * _772;
        float _819 = _740 * 0.5;
        float _820 = _750 * 0.5;
        float _821 = _760 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_384, _385, _386), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3688 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_846 + 1.0))) + _851) * _773;
        float _861 = _741 * 0.5;
        float _862 = _751 * 0.5;
        float _863 = _761 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _877 = (dot(vec3(_384, _385, _386), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _886 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3721 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_888 + 1.0))) + _893) * _774;
        _910 = _741;
        _912 = _740;
        _913 = _739;
        _914 = _751;
        _915 = _750;
        _916 = _749;
        _917 = _761;
        _918 = _760;
        _919 = _759;
        _920 = _774;
        _921 = _773;
        _922 = _772;
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
    }
    else
    {
        _910 = _911;
        _912 = _911;
        _913 = _911;
        _914 = _911;
        _915 = _911;
        _916 = _911;
        _917 = _911;
        _918 = _911;
        _919 = _911;
        _920 = _911;
        _921 = _911;
        _922 = _911;
        _923 = 0.0;
        _924 = 0.0;
        _925 = 0.0;
    }
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _951 = fma(_608, cbModelParam._m0[30u].z, fma(_604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _600));
        float _955 = fma(_608, cbModelParam._m0[31u].z, fma(_604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _600));
        float _959 = fma(_608, cbModelParam._m0[32u].z, fma(_604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _600));
        float _982 = _600 + _384;
        float _983 = _604 + _385;
        float _984 = _608 + _386;
        float _994 = fma(_984, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982)) - _951;
        float _995 = fma(_984, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982)) - _955;
        float _996 = fma(_984, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982)) - _959;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_951 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_955 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[35u].z) + ((((((_959 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1050 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1017.x + (-0.5));
        float _1052 = _1050 * (_1017.y + (-0.5));
        float _1053 = _1050 * (_1017.z + (-0.5));
        float _1060 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1024.x + (-0.5));
        float _1062 = _1060 * (_1024.y + (-0.5));
        float _1063 = _1060 * (_1024.z + (-0.5));
        float _1070 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1031.x + (-0.5));
        float _1072 = _1070 * (_1031.y + (-0.5));
        float _1073 = _1070 * (_1031.z + (-0.5));
        float _1080 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1038.x + (-0.5));
        float _1082 = _1080 * (_1038.y + (-0.5));
        float _1083 = _1080 * (_1038.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_384, _385, _386), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3784 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1114 + 1.0))) + _1119) * _1084;
        float _1129 = _1052 * 0.5;
        float _1130 = _1062 * 0.5;
        float _1131 = _1072 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_384, _385, _386), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3817 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1156 + 1.0))) + _1161) * _1085;
        float _1171 = _1053 * 0.5;
        float _1172 = _1063 * 0.5;
        float _1173 = _1073 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_384, _385, _386), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3850 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1198 + 1.0))) + _1203) * _1086;
        _1220 = _1053;
        _1221 = _1052;
        _1222 = _1051;
        _1223 = _1063;
        _1224 = _1062;
        _1225 = _1061;
        _1226 = _1073;
        _1227 = _1072;
        _1228 = _1071;
        _1229 = _1086;
        _1230 = _1085;
        _1231 = _1084;
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _911;
        _1221 = _911;
        _1222 = _911;
        _1223 = _911;
        _1224 = _911;
        _1225 = _911;
        _1226 = _911;
        _1227 = _911;
        _1228 = _911;
        _1229 = _911;
        _1230 = _911;
        _1231 = _911;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _923)) + _923;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _924)) + _924;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1267 = fma(_1246, cbSceneParam._m0[89u].z, fma(_1245, cbSceneParam._m0[89u].y, _1244 * cbSceneParam._m0[89u].x));
    float _1270 = fma(_1246, cbSceneParam._m0[90u].z, fma(_1245, cbSceneParam._m0[90u].y, _1244 * cbSceneParam._m0[90u].x));
    float _1273 = fma(_1246, cbSceneParam._m0[91u].z, fma(_1245, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1244));
    float _1288 = _547 * 0.5;
    float _1289 = _548 * 0.5;
    float _1290 = _549 * 0.5;
    float _1291 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1294 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1297 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1331;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1304 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_910, _914, _917, _920));
        float _1308 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_912, _915, _918, _921));
        float _1312 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_913, _916, _919, _922));
        float _1319 = dot(vec4(cbModelParam._m0[39u]), vec4(_1288, _1289, _1290, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1342;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1333 = dot(vec4(cbModelParam._m0[40u]), vec4(_1288, _1289, _1290, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1346 = (_1342 * cbModelParam._m0[1u].x) + (_1331 * (1.0 - cbModelParam._m0[1u].x));
    float _1356 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _387);
    float _1357 = isnan(_1356) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1356 : min(cbModelParam._m0[25u].z, _1356));
    float _1439;
    float _1441;
    float _1443;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1406 = fma(_608, cbModelParam._m0[13u].z, fma(_604, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _600)) + cbModelParam._m0[13u].w;
        float _1410 = fma(_608, cbModelParam._m0[14u].z, fma(_604, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _600)) + cbModelParam._m0[14u].w;
        float _1414 = fma(_608, cbModelParam._m0[15u].z, fma(_604, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _600)) + cbModelParam._m0[15u].w;
        float _1417 = fma(_549, cbModelParam._m0[13u].z, fma(_548, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547));
        float _1420 = fma(_549, cbModelParam._m0[14u].z, fma(_548, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547));
        float _1423 = fma(_549, cbModelParam._m0[15u].z, fma(_548, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547));
        float _1451;
        if (_1417 > 0.0)
        {
            _1451 = abs((1.0 - _1406) / _1417);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1406 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1451 = frontier_phi_16_14_ladder;
        }
        float _1624;
        if (_1420 > 0.0)
        {
            _1624 = abs((1.0 - _1410) / _1420);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1410 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1624 = frontier_phi_25_21_ladder;
        }
        float _1919;
        if (_1423 > 0.0)
        {
            _1919 = abs((1.0 - _1414) / _1423);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1414 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1919 = frontier_phi_37_32_ladder;
        }
        float _1921 = isnan(_1624) ? _1451 : (isnan(_1451) ? _1624 : min(_1451, _1624));
        float _1922 = isnan(_1919) ? _1921 : (isnan(_1921) ? _1919 : min(_1921, _1919));
        float _1926 = (_1922 * _1417) + _1406;
        float _1927 = (_1922 * _1420) + _1410;
        float _1928 = (_1922 * _1423) + _1414;
        float _1929 = _1922 * 9.9999997473787516355514526367188e-05;
        float _1931 = (-1.0) - _1929;
        float _1933 = _1929 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1928 > _1933) || ((_1928 < _1931) || ((_1927 > _1933) || ((_1927 < _1931) || ((_1926 < _1931) || (_1926 > _1933))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2073 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1928, cbModelParam._m0[9u].z, fma(_1927, cbModelParam._m0[9u].y, _1926 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1928, cbModelParam._m0[10u].z, fma(_1927, cbModelParam._m0[10u].y, _1926 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1928, cbModelParam._m0[11u].z, fma(_1927, cbModelParam._m0[11u].y, _1926 * cbModelParam._m0[11u].x))), _1357);
            frontier_phi_15_37_ladder = _2073.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2073.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2073.z * cbModelParam._m0[1u].y;
        }
        _1439 = frontier_phi_15_37_ladder_1;
        _1441 = frontier_phi_15_37_ladder;
        _1443 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_547, _548, _549), _1357);
        _1439 = _1427.x * cbModelParam._m0[1u].y;
        _1441 = _1427.y * cbModelParam._m0[1u].y;
        _1443 = _1427.z * cbModelParam._m0[1u].y;
    }
    float _1447 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _387);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1447 : min(cbModelParam._m0[25u].w, _1447));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1505 = fma(_608, cbModelParam._m0[21u].z, fma(_604, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _600)) + cbModelParam._m0[21u].w;
        float _1509 = fma(_608, cbModelParam._m0[22u].z, fma(_604, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _600)) + cbModelParam._m0[22u].w;
        float _1513 = fma(_608, cbModelParam._m0[23u].z, fma(_604, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _600)) + cbModelParam._m0[23u].w;
        float _1516 = fma(_549, cbModelParam._m0[21u].z, fma(_548, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547));
        float _1519 = fma(_549, cbModelParam._m0[22u].z, fma(_548, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547));
        float _1522 = fma(_549, cbModelParam._m0[23u].z, fma(_548, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547));
        float _1629;
        if (_1516 > 0.0)
        {
            _1629 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1629 = frontier_phi_27_23_ladder;
        }
        float _1946;
        if (_1519 > 0.0)
        {
            _1946 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1946 = frontier_phi_39_34_ladder;
        }
        float _2273;
        if (_1522 > 0.0)
        {
            _2273 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2273 = frontier_phi_49_46_ladder;
        }
        float _2275 = isnan(_1946) ? _1629 : (isnan(_1629) ? _1946 : min(_1629, _1946));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1516) + _1505;
        float _2281 = (_2276 * _1519) + _1509;
        float _2282 = (_2276 * _1522) + _1513;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2284 = (-1.0) - _2283;
        float _2286 = _2283 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2282 > _2286) || ((_2282 < _2284) || ((_2281 > _2286) || ((_2281 < _2284) || ((_2280 < _2284) || (_2280 > _2286))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2282, cbModelParam._m0[17u].z, fma(_2281, cbModelParam._m0[17u].y, _2280 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2282, cbModelParam._m0[18u].z, fma(_2281, cbModelParam._m0[18u].y, _2280 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2282, cbModelParam._m0[19u].z, fma(_2281, cbModelParam._m0[19u].y, _2280 * cbModelParam._m0[19u].x))), _1448);
            frontier_phi_24_49_ladder = _2400.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2400.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2400.x * cbModelParam._m0[1u].z;
        }
        _1541 = frontier_phi_24_49_ladder_2;
        _1543 = frontier_phi_24_49_ladder_1;
        _1545 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_547, _548, _549), _1448);
        _1541 = _1525.x * cbModelParam._m0[1u].z;
        _1543 = _1525.y * cbModelParam._m0[1u].z;
        _1545 = _1525.z * cbModelParam._m0[1u].z;
    }
    float _1557 = ((((1.0 - _568) * ((_555 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_568 * _555)) * _539;
    float _1558 = _1557 * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1559 = _1557 * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1560 = _1557 * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1563 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, _1558 * cbSceneParam._m0[91u].x));
    float _1603 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1607 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1611 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1615 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1616 = _1603 / _1615;
    float _1617 = _1607 / _1615;
    float _1618 = _1611 / _1615;
    float _1765;
    float _1766;
    float _1767;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1645 = ((uint(_1618 > cbSceneParam._m0[59u].y) + uint(_1618 > cbSceneParam._m0[59u].x)) + uint(_1618 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1646 = _1645 + 43u;
        uint _1654 = _1645 + 44u;
        uint _1662 = _1645 + 45u;
        uint _1670 = _1645 + 46u;
        float _1681 = fma(_1615, cbSceneParam._m0[_1646].w, fma(_1611, cbSceneParam._m0[_1646].z, fma(_1607, cbSceneParam._m0[_1646].y, _1603 * cbSceneParam._m0[_1646].x)));
        float _1685 = fma(_1615, cbSceneParam._m0[_1654].w, fma(_1611, cbSceneParam._m0[_1654].z, fma(_1607, cbSceneParam._m0[_1654].y, _1603 * cbSceneParam._m0[_1654].x)));
        float _1693 = fma(_1615, cbSceneParam._m0[_1670].w, fma(_1611, cbSceneParam._m0[_1670].z, fma(_1607, cbSceneParam._m0[_1670].y, _1603 * cbSceneParam._m0[_1670].x)));
        float _1698 = cbSceneParam._m0[33u].z * _1693;
        float _1700 = cbSceneParam._m0[33u].w * _1693;
        float _1703 = fma(_1615, cbSceneParam._m0[_1662].w, fma(_1611, cbSceneParam._m0[_1662].z, fma(_1607, cbSceneParam._m0[_1662].y, _1603 * cbSceneParam._m0[_1662].x))) / _1693;
        float _1751 = (cbSceneParam._m0[33u].x - sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618))) * cbSceneParam._m0[33u].y;
        float _3976 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1758 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1698 + _1681) / _1693, (_1700 + _1685) / _1693), _1703), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1700 + _1681) / _1693, (_1685 - _1698) / _1693), _1703), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1681 - _1698) / _1693, (_1685 - _1700) / _1693), _1703), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1681 - _1700) / _1693, (_1698 + _1685) / _1693), _1703), 0.0)).x), vec4(0.25)));
        _1765 = 1.0 - (_1758 * cbSceneParam._m0[34u].x);
        _1766 = 1.0 - (_1758 * cbSceneParam._m0[34u].y);
        _1767 = 1.0 - (_1758 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1765 = 1.0;
        _1766 = 1.0;
        _1767 = 1.0;
    }
    float _1831;
    float _1833;
    float _1835;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1819 = fma(_1615, cbSceneParam._m0[63u].w, fma(_1611, cbSceneParam._m0[63u].z, fma(_1607, cbSceneParam._m0[63u].y, _1603 * cbSceneParam._m0[63u].x)));
        float _1820 = fma(_1615, cbSceneParam._m0[60u].w, fma(_1611, cbSceneParam._m0[60u].z, fma(_1607, cbSceneParam._m0[60u].y, _1603 * cbSceneParam._m0[60u].x))) / _1819;
        float _1821 = fma(_1615, cbSceneParam._m0[61u].w, fma(_1611, cbSceneParam._m0[61u].z, fma(_1607, cbSceneParam._m0[61u].y, _1603 * cbSceneParam._m0[61u].x))) / _1819;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1820 >= cbSceneParam._m0[64u].x) && (_1821 >= cbSceneParam._m0[64u].y)) && (_1820 <= cbSceneParam._m0[64u].z)) && (_1821 <= cbSceneParam._m0[64u].w))
        {
            float _1959 = fma(_1615, cbSceneParam._m0[62u].w, fma(_1611, cbSceneParam._m0[62u].z, fma(_1607, cbSceneParam._m0[62u].y, _1603 * cbSceneParam._m0[62u].x))) / _1819;
            float _1963 = isnan(cbSceneParam._m0[41u].w) ? _1959 : (isnan(_1959) ? cbSceneParam._m0[41u].w : max(_1959, cbSceneParam._m0[41u].w));
            float _2006 = (cbSceneParam._m0[33u].x - sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618))) * cbSceneParam._m0[33u].y;
            float _3992 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
            float _2013 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1820, cbSceneParam._m0[33u].w + _1821), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1820, _1821 - cbSceneParam._m0[33u].z), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1820 - cbSceneParam._m0[33u].z, _1821 - cbSceneParam._m0[33u].w), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1820 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1821), _1963), 0.0)).x), vec4(0.25)));
            float _2017 = 1.0 - (_2013 * cbSceneParam._m0[34u].x);
            float _2018 = 1.0 - (_2013 * cbSceneParam._m0[34u].y);
            float _2019 = 1.0 - (_2013 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2018) ? _1766 : (isnan(_1766) ? _2018 : min(_1766, _2018));
            frontier_phi_36_35_ladder_1 = isnan(_2019) ? _1767 : (isnan(_1767) ? _2019 : min(_1767, _2019));
            frontier_phi_36_35_ladder_2 = isnan(_2017) ? _1765 : (isnan(_1765) ? _2017 : min(_1765, _2017));
        }
        else
        {
            frontier_phi_36_35_ladder = _1766;
            frontier_phi_36_35_ladder_1 = _1767;
            frontier_phi_36_35_ladder_2 = _1765;
        }
        _1831 = frontier_phi_36_35_ladder_2;
        _1833 = frontier_phi_36_35_ladder;
        _1835 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1831 = _1765;
        _1833 = _1766;
        _1835 = _1767;
    }
    uvec4 _1840 = floatBitsToUint(cbInstanceData._m0[_513 + 5u]);
    uint _1842 = _1840.x * 14u;
    uint _1843 = _1842 + 13u;
    float _1850 = _539 + (-1.0);
    float _1855 = (cbLight._m0[_1843].x * _1850) + 1.0;
    float _1856 = (cbLight._m0[_1843].y * _1850) + 1.0;
    float _1857 = (cbLight._m0[_1843].z * _1850) + 1.0;
    float _1858 = (cbLight._m0[_1843].w * _1850) + 1.0;
    uint _1859 = _1842 + 5u;
    float _1865 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
    uint _1869 = _1842 + 4u;
    float _1878 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
    uint _1882 = _1842 | 1u;
    float _1893 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_384, _385, _386));
    float _1896 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_384, _385, _386));
    float _4028 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _4039 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1901 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * 0.3183098733425140380859375;
    float _1903 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * 0.3183098733425140380859375;
    float _1910 = ((cbLight._m0[_1859].x * _1865) * _1903) + (((cbLight._m0[_1869].x * _1831) * _1878) * _1901);
    float _1911 = ((_1865 * cbLight._m0[_1859].y) * _1903) + (((cbLight._m0[_1869].y * _1833) * _1878) * _1901);
    float _1912 = ((_1865 * cbLight._m0[_1859].z) * _1903) + (((cbLight._m0[_1869].z * _1835) * _1878) * _1901);
    uvec4 _1916 = floatBitsToUint(cbLight._m0[_1842 + 12u]);
    bool _1918 = _1916.x == 0u;
    float _2020;
    float _2022;
    float _2024;
    if (_1918)
    {
        _2020 = _1910;
        _2022 = _1911;
        _2024 = _1912;
    }
    else
    {
        uint _2028 = _1842 + 6u;
        float _2044 = (dot(vec3(cbLight._m0[_1842 + 2u].xyz), vec3(_384, _385, _386)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _4050 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2047 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2020 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _1910;
        _2022 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _1911;
        _2024 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _1912;
    }
    bool _2027 = _1916.y == 0u;
    float _2082;
    float _2084;
    float _2086;
    if (_2027)
    {
        _2082 = _2020;
        _2084 = _2022;
        _2086 = _2024;
    }
    else
    {
        uint _2244 = _1842 + 7u;
        float _2260 = (dot(vec3(cbLight._m0[_1842 + 3u].xyz), vec3(_384, _385, _386)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4066 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2263 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2082 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2020;
        _2084 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2022;
        _2086 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2024;
    }
    uint _2089 = _1842 + 8u;
    float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1842].w)) * _387) * 0.949999988079071044921875);
    float _2103 = _2102 * _2102;
    float _2104 = cbLight._m0[_1842].x + _464;
    float _2105 = cbLight._m0[_1842].y + _465;
    float _2106 = cbLight._m0[_1842].z + _466;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2111 = _2110 * _2104;
    float _2112 = _2110 * _2105;
    float _2113 = _2110 * _2106;
    float _2114 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1842].xyz));
    float _4082 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _2118 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _2119 = dot(vec3(_384, _385, _386), vec3(_2111, _2112, _2113));
    float _4104 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _2123 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_2111, _2112, _2113));
    float _4115 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2127 = _2103 * _2103;
    float _2131 = ((_2122 * _2122) * (_2127 + (-1.0))) + 1.0;
    float _2142 = (exp2(log2(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2143 = 1.0 - _2103;
    float _2154 = (0.5 / (((_2118 * ((_2117 * _2143) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2143) + _2103) * _2117))) * _2117;
    float _4126 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2156 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2127 / ((_2131 * _2131) * 3.141590118408203125));
    uint _2170 = _1842 + 9u;
    float _2181 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1882].w)) * _387) * 0.949999988079071044921875);
    float _2182 = _2181 * _2181;
    float _2183 = cbLight._m0[_1882].x + _464;
    float _2184 = cbLight._m0[_1882].y + _465;
    float _2185 = cbLight._m0[_1882].z + _466;
    float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
    float _2190 = _2189 * _2183;
    float _2191 = _2189 * _2184;
    float _2192 = _2189 * _2185;
    float _2193 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1882].xyz));
    float _4137 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _2197 = dot(vec3(_384, _385, _386), vec3(_2190, _2191, _2192));
    float _4148 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _2201 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_2190, _2191, _2192));
    float _4159 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2205 = _2182 * _2182;
    float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
    float _2218 = (exp2(log2(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2219 = 1.0 - _2182;
    float _2229 = (0.5 / (((_2118 * ((_2196 * _2219) + _2182)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2219) + _2182) * _2196))) * _2196;
    float _4170 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
    float _2241 = (((_2218 * cbLight._m0[_2170].x) * _2231) * _1865) + ((((cbLight._m0[_2089].x * _1831) * _2142) * _2156) * _1878);
    float _2242 = (((_2218 * cbLight._m0[_2170].y) * _2231) * _1865) + ((((cbLight._m0[_2089].y * _1833) * _2142) * _2156) * _1878);
    float _2243 = (((_2218 * cbLight._m0[_2170].z) * _2231) * _1865) + ((((cbLight._m0[_2089].z * _1835) * _2142) * _2156) * _1878);
    float _2299;
    float _2301;
    float _2303;
    if (_1918)
    {
        _2299 = _2241;
        _2301 = _2242;
        _2303 = _2243;
    }
    else
    {
        uint _2305 = _1842 + 2u;
        uint _2309 = _1842 + 10u;
        float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _387) * 0.949999988079071044921875);
        float _2324 = _2323 * _2323;
        float _2325 = cbLight._m0[_2305].x + _464;
        float _2326 = cbLight._m0[_2305].y + _465;
        float _2327 = cbLight._m0[_2305].z + _466;
        float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
        float _2332 = _2331 * _2325;
        float _2333 = _2331 * _2326;
        float _2334 = _2331 * _2327;
        float _2335 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_2305].xyz));
        float _4181 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2339 = dot(vec3(_384, _385, _386), vec3(_2332, _2333, _2334));
        float _4192 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2343 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2332, _2333, _2334));
        float _4203 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2347 = _2324 * _2324;
        float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
        float _2360 = (exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2361 = 1.0 - _2324;
        float _2371 = (0.5 / (((_2118 * ((_2338 * _2361) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2361) + _2324) * _2338))) * _2338;
        float _4214 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2373 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
        float _2374 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2299 = (((_2360 * cbLight._m0[_2309].x) * _2373) * _2374) + _2241;
        _2301 = (((_2360 * cbLight._m0[_2309].y) * _2373) * _2374) + _2242;
        _2303 = (((_2360 * cbLight._m0[_2309].z) * _2373) * _2374) + _2243;
    }
    float _2405;
    float _2407;
    float _2409;
    if (_2027)
    {
        _2405 = _2299;
        _2407 = _2301;
        _2409 = _2303;
    }
    else
    {
        uint _2416 = _1842 + 3u;
        uint _2420 = _1842 + 11u;
        float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _387) * 0.949999988079071044921875);
        float _2435 = _2434 * _2434;
        float _2436 = cbLight._m0[_2416].x + _464;
        float _2437 = cbLight._m0[_2416].y + _465;
        float _2438 = cbLight._m0[_2416].z + _466;
        float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
        float _2443 = _2442 * _2436;
        float _2444 = _2442 * _2437;
        float _2445 = _2442 * _2438;
        float _2446 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_2416].xyz));
        float _4230 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2450 = dot(vec3(_384, _385, _386), vec3(_2443, _2444, _2445));
        float _4241 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2454 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2443, _2444, _2445));
        float _4252 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2458 = _2435 * _2435;
        float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
        float _2471 = (exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2472 = 1.0 - _2435;
        float _2482 = (0.5 / (((_2118 * ((_2449 * _2472) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2472) + _2435) * _2449))) * _2449;
        float _4263 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2484 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
        float _2485 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2405 = (((_2471 * cbLight._m0[_2420].x) * _2484) * _2485) + _2299;
        _2407 = (((_2471 * cbLight._m0[_2420].y) * _2484) * _2485) + _2301;
        _2409 = (((_2471 * cbLight._m0[_2420].z) * _2484) * _2485) + _2303;
    }
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    float _2560;
    if (_1840.y == 0u)
    {
        uvec4 _2506 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2507 = _2506.x;
        uint _2518 = uint((float(_2506.y) * floor(float(uint(cbSceneParam._m0[85u].y * _473) / _2507))) + floor(float(uint(cbSceneParam._m0[85u].x * _472) / _2507)));
        float _2528 = (log2(_1618 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2529 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        uint _2532 = uint(isnan(14.0) ? _2529 : (isnan(_2529) ? 14.0 : min(_2529, 14.0)));
        uvec4 _2537 = texelFetch(g_lightClusterGridBuffer, int(((_2532 << 2u) + (_2518 << 6u)) >> 2u));
        uint _2538 = _2537.x;
        uint _2539 = _2506.z;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        if (((((1u << ((_2539 >> 4u) & 15u)) + 4294967295u) & _2538) == 0u) || ((_2539 & 240u) == 0u))
        {
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
        }
        else
        {
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            uint _2767 = 0u;
            uint _2776;
            bool _2777;
            for (;;)
            {
                _2776 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                _2777 = _2776 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2777)
                {
                    frontier_phi_68_pred = _2766;
                    frontier_phi_68_pred_1 = _2765;
                    frontier_phi_68_pred_2 = _2764;
                    frontier_phi_68_pred_3 = _2762;
                    frontier_phi_68_pred_4 = _2761;
                    frontier_phi_68_pred_5 = _2763;
                }
                else
                {
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    uint _2891;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2776;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    for (;;)
                    {
                        uint _2895 = uint(findLSB(_2891)) + (_2767 << 5u);
                        uint _2892 = (_2891 + 4294967295u) & _2891;
                        uint _2897 = _2895 * 48u;
                        vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 3u)).x));
                        uint _2917 = (_2895 * 48u) + 4u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 3u)).x));
                        uint _2936 = (_2895 * 48u) + 8u;
                        vec3 _2947 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x));
                        float _2951 = _2911.x - _1616;
                        float _2952 = _2911.y - _1617;
                        float _2953 = _2911.z - _1618;
                        float _2954 = dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953));
                        float _2957 = inversesqrt(_2954);
                        float _2958 = _2957 * _2951;
                        float _2959 = _2957 * _2952;
                        float _2960 = _2957 * _2953;
                        float _2961 = dot(vec3(_494, _497, _500), vec3(_2958, _2959, _2960));
                        float _2966 = 1.0 - (_2954 * _2911.w);
                        float _4289 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2967 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _2968 = sqrt(_2954) * _2930.w;
                        float _2971 = 1.39999997615814208984375 / (_2968 + 1.39999997615814208984375);
                        float _2972 = _2971 * _2971;
                        float _2975 = ((1.0 - _2972) * _2961) + _2972;
                        float _2978 = _2968 * _2968;
                        float _2982 = ((isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))) * _2967) / ((_2978 * 0.699999988079071044921875) + 1.0);
                        float _2986 = (-0.0) - _1616;
                        float _2987 = (-0.0) - _1617;
                        float _2988 = (-0.0) - _1618;
                        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                        float _2993 = _2992 * _2986;
                        float _2994 = _2992 * _2987;
                        float _2995 = _2992 * _2988;
                        float _3002 = exp2(log2(1.0 / ((_2978 * 3.5) + 5.0)) * 0.25);
                        float _3003 = 1.0 - _555;
                        float _3010 = sqrt(1.0 - ((1.0 - (_3003 * _3003)) * (1.0 - (_3002 * _3002))));
                        float _3011 = _3010 * _3010;
                        float _3012 = _3011 * _3011;
                        float _3013 = _2993 + _2958;
                        float _3014 = _2994 + _2959;
                        float _3015 = _2995 + _2960;
                        float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
                        float _3023 = dot(vec3(_494, _497, _500), vec3(_2993, _2994, _2995));
                        float _4305 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3026 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _3027 = dot(vec3(_494, _497, _500), vec3(_3019 * _3013, _3019 * _3014, _3019 * _3015));
                        float _4316 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _3034 = ((_3030 * _3030) * (_3012 + (-1.0))) + 1.0;
                        float _3035 = _2971 * _3011;
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _2961) + _3036;
                        float _4327 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3040 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _3041 = 1.0 - _3011;
                        float _3051 = (0.5 / (((_3040 * ((_3026 * _3041) + _3011)) + 9.9999999392252902907785028219223e-09) + (((_3040 * _3041) + _3011) * _3026))) * _3040;
                        float _4338 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3062 = (((_3012 * 3.1415927410125732421875) * (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) / ((_3034 * _3034) * ((_2978 * 2.1991131305694580078125) + 3.141590118408203125))) * _2967;
                        _2820 = (_2982 * _2930.x) + _2888;
                        _2821 = (_2982 * _2930.y) + _2889;
                        _2822 = (_2982 * _2930.z) + _2890;
                        _2817 = (_3062 * _2947.x) + _2885;
                        _2818 = (_3062 * _2947.y) + _2886;
                        _2819 = (_3062 * _2947.z) + _2887;
                        if (_2892 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2892;
                        }
                    }
                    frontier_phi_68_pred = _2822;
                    frontier_phi_68_pred_1 = _2821;
                    frontier_phi_68_pred_2 = _2820;
                    frontier_phi_68_pred_3 = _2818;
                    frontier_phi_68_pred_4 = _2817;
                    frontier_phi_68_pred_5 = _2819;
                }
                _2628 = frontier_phi_68_pred;
                _2626 = frontier_phi_68_pred_1;
                _2624 = frontier_phi_68_pred_2;
                _2620 = frontier_phi_68_pred_3;
                _2618 = frontier_phi_68_pred_4;
                _2622 = frontier_phi_68_pred_5;
                uint _2768 = _2767 + 1u;
                if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2761 = _2618;
                    _2762 = _2620;
                    _2763 = _2622;
                    _2764 = _2624;
                    _2765 = _2626;
                    _2766 = _2628;
                    _2767 = _2768;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
        }
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.z;
        uint _2634 = (_2632 >> 8u) & 15u;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        if (((4294967295u << _2634) & _2538) == 0u)
        {
            _2729 = _2617;
            _2731 = _2619;
            _2733 = _2621;
            _2735 = _2623;
            _2737 = _2625;
            _2739 = _2627;
        }
        else
        {
            float _2754 = inversesqrt(dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618)));
            float _2755 = _2754 * _1616;
            float _2756 = _2754 * _1617;
            float _2757 = _2754 * _1618;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2634 < ((_2632 >> 12u) & 15u))
            {
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2868 = _2617;
                float _2869 = _2619;
                float _2870 = _2621;
                float _2871 = _2623;
                float _2872 = _2625;
                float _2873 = _2627;
                uint _2874 = _2634;
                uint _2883;
                bool _2884;
                for (;;)
                {
                    _2883 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2874 << 2u)) >> 2u)).x;
                    _2884 = _2883 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2884)
                    {
                        frontier_phi_74_pred = _2870;
                        frontier_phi_74_pred_1 = _2869;
                        frontier_phi_74_pred_2 = _2868;
                        frontier_phi_74_pred_3 = _2873;
                        frontier_phi_74_pred_4 = _2872;
                        frontier_phi_74_pred_5 = _2871;
                    }
                    else
                    {
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3080 = _2868;
                        float _3081 = _2869;
                        float _3082 = _2870;
                        float _3083 = _2871;
                        float _3084 = _2872;
                        float _3085 = _2873;
                        uint _3086 = _2883;
                        uint _3087;
                        vec4 _3112;
                        float _3113;
                        vec4 _3128;
                        vec3 _3140;
                        vec4 _3156;
                        vec4 _3172;
                        float _3219;
                        bool _3220;
                        for (;;)
                        {
                            uint _3097 = ((_2874 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3086));
                            _3087 = (_3086 + 4294967295u) & _3086;
                            uint _3099 = _3097 * 40u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            _3113 = _3112.w;
                            uint _3115 = (_3097 * 40u) + 4u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3097 * 40u) + 8u;
                            _3140 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x));
                            uint _3143 = (_3097 * 40u) + 16u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3159 = (_3097 * 40u) + 20u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3175 = (_3097 * 40u) + 24u;
                            vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3194 = (_3097 * 40u) + 28u;
                            vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            _3219 = fma(_1618, _3207.z, fma(_1617, _3207.y, _3207.x * _1616)) + _3207.w;
                            _3220 = !((fma(_1618, _3188.z, fma(_1617, _3188.y, _3188.x * _1616)) + _3188.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3220)
                            {
                                float _3247 = _3112.x - _1616;
                                float _3248 = _3112.y - _1617;
                                float _3249 = _3112.z - _1618;
                                float _3250 = dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249));
                                float _3253 = inversesqrt(_3250);
                                float _3254 = _3253 * _3247;
                                float _3255 = _3253 * _3248;
                                float _3256 = _3253 * _3249;
                                float _3260 = 1.0 - (_3250 / (_3113 * _3113));
                                float _4349 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3261 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3265 = sqrt(_3250) * _3128.w;
                                float _3267 = 1.39999997615814208984375 / (_3265 + 1.39999997615814208984375);
                                float _3268 = _3267 * _3267;
                                float _3271 = ((1.0 - _3268) * dot(vec3(_3254, _3255, _3256), vec3(_494, _497, _500))) + _3268;
                                float _3274 = _3265 * _3265;
                                float _3278 = (fma(_1618, _3156.z, fma(_1617, _3156.y, _3156.x * _1616)) + _3156.w) / _3219;
                                float _3279 = (fma(_1618, _3172.z, fma(_1617, _3172.y, _3172.x * _1616)) + _3172.w) / _3219;
                                float _3283 = 1.0 - dot(vec2(_3278, _3279), vec2(_3278, _3279));
                                float _4365 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3284 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3285 = _3284 * (((isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))) * _3261) / ((_3274 * 0.699999988079071044921875) + 1.0));
                                float _3297 = exp2(log2(1.0 / ((_3274 * 3.5) + 5.0)) * 0.25);
                                float _3298 = 1.0 - _555;
                                float _3305 = sqrt(1.0 - ((1.0 - (_3298 * _3298)) * (1.0 - (_3297 * _3297))));
                                float _3306 = _3305 * _3305;
                                float _3307 = _3306 * _3306;
                                float _3308 = _3254 - _2755;
                                float _3309 = _3255 - _2756;
                                float _3310 = _3256 - _2757;
                                float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                                float _3318 = dot(vec3(_494, _497, _500), vec3((-0.0) - _2755, (-0.0) - _2756, (-0.0) - _2757));
                                float _4376 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3321 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3322 = dot(vec3(_494, _497, _500), vec3(_3314 * _3308, _3314 * _3309, _3314 * _3310));
                                float _4387 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3325 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3329 = ((_3325 * _3325) * (_3307 + (-1.0))) + 1.0;
                                float _3330 = _3267 * _3306;
                                float _3331 = _3330 * _3330;
                                float _3337 = ((1.0 - _3331) * dot(vec3(_494, _497, _500), vec3(_3254, _3255, _3256))) + _3331;
                                float _4398 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3339 = 1.0 - _3306;
                                float _3349 = (0.5 / (((_3338 * ((_3321 * _3339) + _3306)) + 9.9999999392252902907785028219223e-09) + (((_3338 * _3339) + _3306) * _3321))) * _3338;
                                float _4409 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3359 = (_3284 * _3261) * (((_3307 * 3.1415927410125732421875) * (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) / ((_3329 * _3329) * ((_3274 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3359 * _3140.z;
                                frontier_phi_80_pred_1 = _3359 * _3140.y;
                                frontier_phi_80_pred_2 = _3359 * _3140.x;
                                frontier_phi_80_pred_3 = _3285 * _3128.z;
                                frontier_phi_80_pred_4 = _3285 * _3128.y;
                                frontier_phi_80_pred_5 = _3285 * _3128.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3365 = frontier_phi_80_pred;
                            _3364 = frontier_phi_80_pred_1;
                            _3363 = frontier_phi_80_pred_2;
                            _3368 = frontier_phi_80_pred_3;
                            _3367 = frontier_phi_80_pred_4;
                            _3366 = frontier_phi_80_pred_5;
                            _3070 = _3366 + _3083;
                            _3071 = _3367 + _3084;
                            _3072 = _3368 + _3085;
                            _3067 = _3363 + _3080;
                            _3068 = _3364 + _3081;
                            _3069 = _3365 + _3082;
                            if (_3087 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3087;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3069;
                        frontier_phi_74_pred_1 = _3068;
                        frontier_phi_74_pred_2 = _3067;
                        frontier_phi_74_pred_3 = _3072;
                        frontier_phi_74_pred_4 = _3071;
                        frontier_phi_74_pred_5 = _3070;
                    }
                    _2734 = frontier_phi_74_pred;
                    _2732 = frontier_phi_74_pred_1;
                    _2730 = frontier_phi_74_pred_2;
                    _2740 = frontier_phi_74_pred_3;
                    _2738 = frontier_phi_74_pred_4;
                    _2736 = frontier_phi_74_pred_5;
                    uint _2875 = _2874 + 1u;
                    if (_2875 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2868 = _2730;
                        _2869 = _2732;
                        _2870 = _2734;
                        _2871 = _2736;
                        _2872 = _2738;
                        _2873 = _2740;
                        _2874 = _2875;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2738;
                frontier_phi_62_63_ladder_1 = _2736;
                frontier_phi_62_63_ladder_2 = _2734;
                frontier_phi_62_63_ladder_3 = _2740;
                frontier_phi_62_63_ladder_4 = _2732;
                frontier_phi_62_63_ladder_5 = _2730;
            }
            else
            {
                frontier_phi_62_63_ladder = _2625;
                frontier_phi_62_63_ladder_1 = _2623;
                frontier_phi_62_63_ladder_2 = _2621;
                frontier_phi_62_63_ladder_3 = _2627;
                frontier_phi_62_63_ladder_4 = _2619;
                frontier_phi_62_63_ladder_5 = _2617;
            }
            _2729 = frontier_phi_62_63_ladder_5;
            _2731 = frontier_phi_62_63_ladder_4;
            _2733 = frontier_phi_62_63_ladder_2;
            _2735 = frontier_phi_62_63_ladder_1;
            _2737 = frontier_phi_62_63_ladder;
            _2739 = frontier_phi_62_63_ladder_3;
        }
        float _2744 = isnan(1.0) ? _539 : (isnan(_539) ? 1.0 : min(_539, 1.0));
        _2550 = (_2744 * _2735) + _2082;
        _2552 = (_2744 * _2737) + _2084;
        _2554 = (_2744 * _2739) + _2086;
        _2556 = ((_2729 * 0.039999999105930328369140625) * _2744) + _2405;
        _2558 = ((_2731 * 0.039999999105930328369140625) * _2744) + _2407;
        _2560 = ((_2733 * 0.039999999105930328369140625) * _2744) + _2409;
    }
    else
    {
        _2550 = _2082;
        _2552 = _2084;
        _2554 = _2086;
        _2556 = _2405;
        _2558 = _2407;
        _2560 = _2409;
    }
    float _4425 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4436 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _4447 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    uint _2580 = _513 + 6u;
    float _2588 = _472 / cbSceneParam._m0[86u].x;
    float _2589 = _473 / cbSceneParam._m0[86u].y;
    vec4 _2603 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2588, _2589, (log2((isnan(cbSceneParam._m0[77u].w) ? _406 : (isnan(_406) ? cbSceneParam._m0[77u].w : min(_406, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2605 = _2603.x;
    float _2606 = _2603.y;
    float _2607 = _2603.z;
    float _2608 = _2603.w;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    if (_406 > cbSceneParam._m0[78u].w)
    {
        float _2642 = isnan(_406) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _406 : min(cbSceneParam._m0[80u].w, _406));
        float _2643 = _2642 / _406;
        float _2654 = _2643 * _457;
        float _2655 = _458 * _2643;
        float _2656 = (-0.0) - _2655;
        float _2657 = _2643 * _459;
        float _2659 = (cbSceneParam._m0[77u].w * _2656) / _2642;
        float _2660 = _2659 + cbSceneParam._m0[79u].w;
        float _2661 = cbSceneParam._m0[79u].w - _2655;
        float _2667 = sqrt(((_2654 * _2654) + (_2655 * _2655)) + (_2657 * _2657));
        float _2670 = (1.0 - (cbSceneParam._m0[77u].w / _2642)) * _2667;
        float _2675 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2677 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2830;
        if (abs((_2656 - _2659) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2830 = ((((_2660 > 0.0) ? exp2(_2675 * _2660) : (2.0 - exp2(_2677 * _2660))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2670;
        }
        else
        {
            float _2790 = 1.0 / cbSceneParam._m0[80u].x;
            float _2791 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : max(_2660, _2661));
            float _2792 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : min(_2660, _2661));
            float _2801 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : min(_2791, 0.0));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            _2830 = ((abs(_2667 / _2656) * cbSceneParam._m0[80u].y) * ((((_2801 - _2802) * 2.0) - ((exp2(_2675 * (isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0)))) - exp2(_2675 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0))))) * _2790)) - ((exp2(_2677 * _2801) - exp2(_2677 * _2802)) * _2790))) + (_2670 * cbSceneParam._m0[80u].z);
        }
        vec4 _2832 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2588, _2589, 1.0), 0.0);
        float _2841 = exp2((_2830 * (-1.44269502162933349609375)) * (1.0 - _2832.w));
        float _2842 = log2(_2841);
        float _2858 = log2(_2608);
        _2679 = (exp2(_2858 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].x)) * _2832.x) / cbSceneParam._m0[78u].x)) + _2605;
        _2681 = (exp2(_2858 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].y)) * _2832.y) / cbSceneParam._m0[78u].y)) + _2606;
        _2683 = (exp2(_2858 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].z)) * _2832.z) / cbSceneParam._m0[78u].z)) + _2607;
        _2685 = _2841 * _2608;
    }
    else
    {
        _2679 = _2605;
        _2681 = _2606;
        _2683 = _2607;
        _2685 = _2608;
    }
    float _2697 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2698 = _2697 == 3.0;
    float _2699 = log2(_2685);
    float _2706 = exp2(_2699 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2550 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _539))) + ((_2556 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1346)) * cbPerFrame._m0[3u].x));
    float _2707 = exp2(_2699 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2552 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _539))) + ((_2558 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1346)) * cbPerFrame._m0[3u].x));
    float _2708 = exp2(_2699 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2554 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _539))) + ((_2560 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1346)) * cbPerFrame._m0[3u].x));
    float _2717 = (_2697 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2717 * (_2698 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2679)));
    SV_Target.y = _2717 * (_2698 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2681)));
    SV_Target.z = _2717 * (_2698 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2683)));
    SV_Target.w = cbInstanceData._m0[_2580].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2580].w;
}


