#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_15;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1476;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = cbMtdParam._m0[25u].x + TEXCOORD.y;
    vec4 _281 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (_267 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _288 = log2(0.0);
    float _290 = exp2(_288 * cbMtdParam._m0[24u].y);
    float _294 = _290 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _290);
    float _295 = _290 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _290);
    float _296 = _290 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _290);
    float _297 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _298 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _299 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _300 = isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0));
    float _302 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    float _303 = isnan(1.0) ? _299 : (isnan(_299) ? 1.0 : min(_299, 1.0));
    vec4 _316 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _267) + cbTextureTilingScale._m0[0u].w));
    float _320 = _316.z;
    float _321 = _316.w;
    float _322 = 1.0 - _321;
    float _331 = exp2(log2((1.0 - (_322 * _320)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _332 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _333 = isnan(1.0) ? _332 : (isnan(_332) ? 1.0 : min(_332, 1.0));
    float _342 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_322 * _322) * _320))) * cbMtdParam._m0[26u].y);
    float _343 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    vec4 _356 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _359 = _356.y;
    float _362 = (_359 * ((isnan(1.0) ? _343 : (isnan(_343) ? 1.0 : min(_343, 1.0))) - _321)) + _321;
    float _365 = (_356.x + (-0.02500000037252902984619140625)) * 8.0;
    float _369 = roundEven(5.0 - _365);
    float _370 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _371 = isnan(4.0) ? _370 : (isnan(_370) ? 4.0 : min(_370, 4.0));
    float _384 = floor(_371);
    vec4 _387 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _267) + cbTextureTilingScale._m0[10u].w, _384));
    float _208[6];
    float _209[6];
    float _210[6];
    _208[0u] = cbMtdParam._m0[12u].x;
    _209[0u] = cbMtdParam._m0[12u].y;
    _210[0u] = cbMtdParam._m0[12u].z;
    _208[1u] = cbMtdParam._m0[13u].x;
    _209[1u] = cbMtdParam._m0[13u].y;
    _210[1u] = cbMtdParam._m0[13u].z;
    _208[2u] = cbMtdParam._m0[14u].x;
    _209[2u] = cbMtdParam._m0[14u].y;
    _210[2u] = cbMtdParam._m0[14u].z;
    _208[3u] = cbMtdParam._m0[15u].x;
    _209[3u] = cbMtdParam._m0[15u].y;
    _210[3u] = cbMtdParam._m0[15u].z;
    _208[4u] = cbMtdParam._m0[16u].x;
    _209[4u] = cbMtdParam._m0[16u].y;
    _210[4u] = cbMtdParam._m0[16u].z;
    _208[5u] = cbMtdParam._m0[11u].x;
    _209[5u] = cbMtdParam._m0[11u].y;
    _210[5u] = cbMtdParam._m0[11u].z;
    float _453 = roundEven(_365);
    float _454 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    uint _456 = uint(int(isnan(5.0) ? _454 : (isnan(_454) ? 5.0 : min(_454, 5.0))));
    float _205[6];
    float _206[6];
    float _207[6];
    _205[0u] = 1.0;
    _206[0u] = 1.0;
    _207[0u] = 1.0;
    _205[1u] = cbMtdParam._m0[22u].x;
    _206[1u] = cbMtdParam._m0[22u].y;
    _207[1u] = cbMtdParam._m0[22u].z;
    _205[2u] = cbMtdParam._m0[21u].x;
    _206[2u] = cbMtdParam._m0[21u].y;
    _207[2u] = cbMtdParam._m0[21u].z;
    _205[3u] = cbMtdParam._m0[19u].x;
    _206[3u] = cbMtdParam._m0[19u].y;
    _207[3u] = cbMtdParam._m0[19u].z;
    _205[4u] = cbMtdParam._m0[18u].x;
    _206[4u] = cbMtdParam._m0[18u].y;
    _207[4u] = cbMtdParam._m0[18u].z;
    _205[5u] = cbMtdParam._m0[17u].x;
    _206[5u] = cbMtdParam._m0[17u].y;
    _207[5u] = cbMtdParam._m0[17u].z;
    float _543 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[29u].y * TEXCOORD.x) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[29u].z * TEXCOORD.y) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _544 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    uint _546 = uint(int(isnan(5.0) ? _544 : (isnan(_544) ? 5.0 : min(_544, 5.0))));
    float _204[6];
    _204[0u] = 1.0;
    _204[1u] = cbMtdParam._m0[22u].w;
    _204[2u] = cbMtdParam._m0[21u].w;
    _204[3u] = cbMtdParam._m0[19u].w;
    _204[4u] = cbMtdParam._m0[18u].w;
    _204[5u] = cbMtdParam._m0[17u].w;
    float _583 = ((((_208[_456] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[24u].z * (_205[_546] - _208[_456])) * _204[_456])) * _359) + cbMtdParam._m0[10u].x) * _387.x;
    float _584 = ((((_209[_456] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[24u].z * (_206[_546] - _209[_456])) * _204[_456])) * _359) + cbMtdParam._m0[10u].y) * _387.y;
    float _585 = ((((_210[_456] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[24u].z * (_207[_546] - _210[_456])) * _204[_456])) * _359) + cbMtdParam._m0[10u].z) * _387.z;
    vec4 _597 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _267) + cbTextureTilingScale._m0[1u].w));
    float _617 = (((cbMtdParam._m0[9u].x * _597.x) - _583) * _362) + _583;
    float _618 = (((cbMtdParam._m0[9u].y * _597.y) - _584) * _362) + _584;
    float _619 = (((cbMtdParam._m0[9u].z * _597.z) - _585) * _362) + _585;
    vec4 _631 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    float _651 = (((cbMtdParam._m0[20u].x * _631.x) - _617) * _333) + _617;
    float _652 = (((cbMtdParam._m0[20u].y * _631.y) - _618) * _333) + _618;
    float _653 = (((cbMtdParam._m0[20u].z * _631.z) - _619) * _333) + _619;
    vec4 _665 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    float _689 = (_281.x * 4.5) * ((((cbMtdParam._m0[23u].x * _665.x) - _651) * _300) + _651);
    float _691 = (_281.y * 4.5) * ((((cbMtdParam._m0[23u].y * _665.y) - _652) * _302) + _652);
    float _693 = (_281.z * 4.5) * ((((cbMtdParam._m0[23u].z * _665.z) - _653) * _303) + _653);
    float _199[5];
    float _200[5];
    _199[0u] = cbMtdParam._m0[26u].w;
    _200[0u] = cbMtdParam._m0[27u].x;
    _199[1u] = cbMtdParam._m0[27u].y;
    _200[1u] = cbMtdParam._m0[27u].z;
    _199[2u] = cbMtdParam._m0[27u].w;
    _200[2u] = cbMtdParam._m0[28u].x;
    _199[3u] = cbMtdParam._m0[28u].y;
    _200[3u] = cbMtdParam._m0[28u].z;
    _199[4u] = cbMtdParam._m0[28u].w;
    _200[4u] = cbMtdParam._m0[29u].x;
    float _721 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    uint _723 = uint(int(isnan(4.0) ? _721 : (isnan(_721) ? 4.0 : min(_721, 4.0))));
    float _735 = ((cbMtdParam._m0[30u].x - _200[_723]) * _362) + _200[_723];
    float _740 = ((cbMtdParam._m0[30u].z - _735) * _333) + _735;
    float _748 = ((cbMtdParam._m0[31u].x - _740) * _300) + _740;
    vec4 _763 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w, _384));
    float _765 = _763.x;
    float _766 = _763.y;
    float _768 = _763.z + _199[_723];
    vec4 _780 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _267) + cbTextureTilingScale._m0[6u].w));
    float _788 = (((cbMtdParam._m0[29u].w - _768) + _780.z) * _362) + _768;
    vec4 _801 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _267) + cbTextureTilingScale._m0[8u].w));
    float _809 = (((cbMtdParam._m0[30u].y - _788) + _801.z) * _333) + _788;
    float _815 = ((((_320 * 2.0) * _809) - _809) * cbMtdParam._m0[25u].y) + _809;
    vec4 _827 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w));
    float _835 = (((_827.z + cbMtdParam._m0[30u].w) - _815) * _303) + _815;
    float _848 = ((_780.x - _765) * _362) + _765;
    float _849 = ((_780.y - _766) * _362) + _766;
    float _854 = ((_801.x - _848) * _333) + _848;
    float _855 = ((_801.y - _849) * _333) + _849;
    float _864 = ((((_827.x - _854) * _300) + _854) * 2.0) + (-1.0);
    float _865 = ((((_827.y - _855) * _302) + _855) * 2.0) + (-1.0);
    float _866 = dot(vec2(_864, _865), vec2(_864, _865));
    float _3913 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _871 = sqrt(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))));
    float _874 = _864 + (cbMtdParam._m0[25u].z * ((_316.x * 2.0) + (-1.0)));
    float _875 = _865 + (cbMtdParam._m0[25u].z * ((_316.y * 2.0) + (-1.0)));
    float _878 = fma(_871, _245 * NORMAL.x, fma(_875, _252 * TANGENT.x, (_238 * _230) * _874));
    float _881 = fma(_871, _245 * NORMAL.y, fma(_875, _252 * TANGENT.y, (_238 * _231) * _874));
    float _884 = fma(_871, _245 * NORMAL.z, fma(_875, _252 * TANGENT.z, (_238 * _232) * _874));
    float _888 = inversesqrt(dot(vec3(_878, _881, _884), vec3(_878, _881, _884)));
    float _889 = _888 * _878;
    float _890 = _888 * _881;
    float _891 = _888 * _884;
    float _3924 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _892 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3946 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3957 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3968 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _896 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _912 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _962 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _952);
    float _963 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _952);
    float _964 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _952);
    float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
    float _969 = _962 * _968;
    float _970 = _963 * _968;
    float _971 = _964 * _968;
    float _977 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _978 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _980 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _982 = _980.w;
    float _1000 = fma(_891, cbSceneParam._m0[5u].z, fma(_890, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _889));
    float _1003 = fma(_891, cbSceneParam._m0[6u].z, fma(_890, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _889));
    float _1006 = fma(_891, cbSceneParam._m0[7u].z, fma(_890, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _889));
    vec4 _1008 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1019 = (((_1008.y - _892) + (_1008.w * _892)) * cbMtdParam._m0[3u].x) + _892;
    uint _1032 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1034 = (_1032 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1040 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_1034].x;
    float _1041 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * cbInstanceData._m0[_1034].y;
    float _1042 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * cbInstanceData._m0[_1034].z;
    float _3979 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    vec4 _1046 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1051 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1062 = (((_1051.x - _896) + (_1051.w * _896)) * cbMtdParam._m0[3u].x) + _896;
    float _1075 = (cbMtdParam._m0[3u].x * (((_1043 * _982) - _1043) + _1046.x)) + _1043;
    float _1076 = (cbMtdParam._m0[3u].x * (((_1044 * _982) - _1044) + _1046.y)) + _1044;
    float _1077 = (cbMtdParam._m0[3u].x * (((_1045 * _982) - _1045) + _1046.z)) + _1045;
    float _1078 = 1.0 - _1062;
    float _1079 = _1078 * _1075;
    float _1080 = _1078 * _1076;
    float _1081 = _1078 * _1077;
    float _1086 = (_1075 + (-0.039999999105930328369140625)) * _1062;
    float _1087 = (_1076 + (-0.039999999105930328369140625)) * _1062;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _1062;
    float _1089 = _1086 + 0.039999999105930328369140625;
    float _1091 = _1087 + 0.039999999105930328369140625;
    float _1092 = _1088 + 0.039999999105930328369140625;
    vec4 _1101 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _977, cbSceneParam._m0[86u].y * _978));
    float _1104 = _1101.x * TEXCOORD_5.w;
    float _1105 = dot(vec3(_889, _890, _891), vec3(_969, _970, _971));
    float _1108 = _1105 * 2.0;
    float _1112 = (_1108 * _889) - _969;
    float _1113 = (_1108 * _890) - _970;
    float _1114 = (_1108 * _891) - _971;
    float _1118 = abs(dot(vec3(_969, _970, _971), vec3(_889, _890, _891)));
    float _4012 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1120 = sqrt(_1019);
    float _1131 = exp2((_1120 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1120 * 3.0));
    float _1137 = (1.0 - _1131) * ((_1120 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1138 = _1131 * _1120;
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1475;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1200 = fma(_1174, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1166));
        float _1204 = fma(_1174, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1166));
        float _1208 = fma(_1174, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1166));
        float _1233 = _1166 + _889;
        float _1234 = _1170 + _890;
        float _1235 = _1174 + _891;
        float _1245 = fma(_1235, cbModelParam._m0[26u].z, fma(_1234, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1233)) - _1200;
        float _1246 = fma(_1235, cbModelParam._m0[27u].z, fma(_1234, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1233)) - _1204;
        float _1247 = fma(_1235, cbModelParam._m0[28u].z, fma(_1234, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1233)) - _1208;
        float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
        float _1264 = ((_1251 * _1245) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1200 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1251 * _1246) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1204 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1251 * _1247) / cbModelParam._m0[34u].z) + ((((((_1208 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        float _1303 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1269.x + (-0.5));
        float _1305 = _1303 * (_1269.y + (-0.5));
        float _1306 = _1303 * (_1269.z + (-0.5));
        float _1313 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1276.x + (-0.5));
        float _1315 = _1313 * (_1276.y + (-0.5));
        float _1316 = _1313 * (_1276.z + (-0.5));
        float _1323 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1283.x + (-0.5));
        float _1325 = _1323 * (_1283.y + (-0.5));
        float _1326 = _1323 * (_1283.z + (-0.5));
        float _1333 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1290.x + (-0.5));
        float _1335 = _1333 * (_1290.y + (-0.5));
        float _1336 = _1333 * (_1290.z + (-0.5));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = _1304 * 0.5;
        float _1341 = _1314 * 0.5;
        float _1342 = _1324 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1357 = (dot(vec3(_889, _890, _891), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1367 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4060 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1369 + 1.0))) + _1374) * _1337;
        float _1384 = _1305 * 0.5;
        float _1385 = _1315 * 0.5;
        float _1386 = _1325 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_889, _890, _891), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4093 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1411 + 1.0))) + _1416) * _1338;
        float _1426 = _1306 * 0.5;
        float _1427 = _1316 * 0.5;
        float _1428 = _1326 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_889, _890, _891), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4126 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1453 + 1.0))) + _1458) * _1339;
        _1475 = _1306;
        _1477 = _1305;
        _1478 = _1304;
        _1479 = _1316;
        _1480 = _1315;
        _1481 = _1314;
        _1482 = _1326;
        _1483 = _1325;
        _1484 = _1324;
        _1485 = _1339;
        _1486 = _1338;
        _1487 = _1337;
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1476;
        _1477 = _1476;
        _1478 = _1476;
        _1479 = _1476;
        _1480 = _1476;
        _1481 = _1476;
        _1482 = _1476;
        _1483 = _1476;
        _1484 = _1476;
        _1485 = _1476;
        _1486 = _1476;
        _1487 = _1476;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1513 = fma(_1174, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166));
        float _1517 = fma(_1174, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166));
        float _1521 = fma(_1174, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166));
        float _1544 = _1166 + _889;
        float _1545 = _1170 + _890;
        float _1546 = _1174 + _891;
        float _1556 = fma(_1546, cbModelParam._m0[30u].z, fma(_1545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1544)) - _1513;
        float _1557 = fma(_1546, cbModelParam._m0[31u].z, fma(_1545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1544)) - _1517;
        float _1558 = fma(_1546, cbModelParam._m0[32u].z, fma(_1545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1544)) - _1521;
        float _1562 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
        float _1575 = ((_1562 * _1556) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1513 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1576 = ((_1562 * _1557) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1517 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1577 = ((_1562 * _1558) / cbModelParam._m0[35u].z) + ((((((_1521 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        float _1612 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1579.x + (-0.5));
        float _1614 = _1612 * (_1579.y + (-0.5));
        float _1615 = _1612 * (_1579.z + (-0.5));
        float _1622 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1586.x + (-0.5));
        float _1624 = _1622 * (_1586.y + (-0.5));
        float _1625 = _1622 * (_1586.z + (-0.5));
        float _1632 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1593.x + (-0.5));
        float _1634 = _1632 * (_1593.y + (-0.5));
        float _1635 = _1632 * (_1593.z + (-0.5));
        float _1642 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1600.x + (-0.5));
        float _1644 = _1642 * (_1600.y + (-0.5));
        float _1645 = _1642 * (_1600.z + (-0.5));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = _1613 * 0.5;
        float _1650 = _1623 * 0.5;
        float _1651 = _1633 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_889, _890, _891), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4189 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1676 + 1.0))) + _1681) * _1646;
        float _1691 = _1614 * 0.5;
        float _1692 = _1624 * 0.5;
        float _1693 = _1634 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_889, _890, _891), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1647 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4222 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1718 + 1.0))) + _1723) * _1647;
        float _1733 = _1615 * 0.5;
        float _1734 = _1625 * 0.5;
        float _1735 = _1635 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_889, _890, _891), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4255 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1760 + 1.0))) + _1765) * _1648;
        _1782 = _1615;
        _1783 = _1614;
        _1784 = _1613;
        _1785 = _1625;
        _1786 = _1624;
        _1787 = _1623;
        _1788 = _1635;
        _1789 = _1634;
        _1790 = _1633;
        _1791 = _1648;
        _1792 = _1647;
        _1793 = _1646;
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1795 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
    }
    else
    {
        _1782 = _1476;
        _1783 = _1476;
        _1784 = _1476;
        _1785 = _1476;
        _1786 = _1476;
        _1787 = _1476;
        _1788 = _1476;
        _1789 = _1476;
        _1790 = _1476;
        _1791 = _1476;
        _1792 = _1476;
        _1793 = _1476;
        _1794 = 0.0;
        _1795 = 0.0;
        _1796 = 0.0;
    }
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1488)) + _1488;
    float _1807 = (cbModelParam._m0[1u].x * (_1795 - _1489)) + _1489;
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1490)) + _1490;
    float _1829 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1807, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1832 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1807, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1835 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1807, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1806));
    float _1850 = _1112 * 0.5;
    float _1851 = _1113 * 0.5;
    float _1852 = _1114 * 0.5;
    float _1853 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1856 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1783, _1786, _1789, _1792));
    float _1859 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1893;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1866 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1475, _1479, _1482, _1485));
        float _1870 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1477, _1480, _1483, _1486));
        float _1874 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1478, _1481, _1484, _1487));
        float _1881 = dot(vec4(cbModelParam._m0[39u]), vec4(_1850, _1851, _1852, 1.0));
        _1893 = dot(vec3(isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1881) ? 0.0 : (isnan(0.0) ? _1881 : max(0.0, _1881))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1893 = 1.0;
    }
    float _1904;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1895 = dot(vec4(cbModelParam._m0[40u]), vec4(_1850, _1851, _1852, 1.0));
        _1904 = dot(vec3(isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1895) ? 0.0 : (isnan(0.0) ? _1895 : max(0.0, _1895))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1904 = 1.0;
    }
    float _1908 = (_1904 * cbModelParam._m0[1u].x) + (_1893 * (1.0 - cbModelParam._m0[1u].x));
    float _1918 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1019);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1918 : min(cbModelParam._m0[25u].z, _1918));
    float _1999;
    float _2001;
    float _2003;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1966 = fma(_1174, cbModelParam._m0[13u].z, fma(_1170, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1166)) + cbModelParam._m0[13u].w;
        float _1970 = fma(_1174, cbModelParam._m0[14u].z, fma(_1170, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1166)) + cbModelParam._m0[14u].w;
        float _1974 = fma(_1174, cbModelParam._m0[15u].z, fma(_1170, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1166)) + cbModelParam._m0[15u].w;
        float _1977 = fma(_1114, cbModelParam._m0[13u].z, fma(_1113, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1112));
        float _1980 = fma(_1114, cbModelParam._m0[14u].z, fma(_1113, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1112));
        float _1983 = fma(_1114, cbModelParam._m0[15u].z, fma(_1113, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1112));
        float _2011;
        if (_1977 > 0.0)
        {
            _2011 = abs((1.0 - _1966) / _1977);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1966 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2011 = frontier_phi_14_12_ladder;
        }
        float _2234;
        if (_1980 > 0.0)
        {
            _2234 = abs((1.0 - _1970) / _1980);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1970 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2234 = frontier_phi_23_19_ladder;
        }
        float _2491;
        if (_1983 > 0.0)
        {
            _2491 = abs((1.0 - _1974) / _1983);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1974 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2491 = frontier_phi_35_30_ladder;
        }
        float _2493 = isnan(_2234) ? _2011 : (isnan(_2011) ? _2234 : min(_2011, _2234));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1977) + _1966;
        float _2499 = (_2494 * _1980) + _1970;
        float _2500 = (_2494 * _1983) + _1974;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2503 = (-1.0) - _2501;
        float _2505 = _2501 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2500 > _2505) || ((_2500 < _2503) || ((_2499 > _2505) || ((_2499 < _2503) || ((_2498 < _2503) || (_2498 > _2505))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2628 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2500, cbModelParam._m0[9u].z, fma(_2499, cbModelParam._m0[9u].y, _2498 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2500, cbModelParam._m0[10u].z, fma(_2499, cbModelParam._m0[10u].y, _2498 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2500, cbModelParam._m0[11u].z, fma(_2499, cbModelParam._m0[11u].y, _2498 * cbModelParam._m0[11u].x))), _1919);
            frontier_phi_13_35_ladder = _2628.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2628.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2628.x * cbModelParam._m0[1u].y;
        }
        _1999 = frontier_phi_13_35_ladder_2;
        _2001 = frontier_phi_13_35_ladder_1;
        _2003 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1987 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1112, _1113, _1114), _1919);
        _1999 = _1987.x * cbModelParam._m0[1u].y;
        _2001 = _1987.y * cbModelParam._m0[1u].y;
        _2003 = _1987.z * cbModelParam._m0[1u].y;
    }
    float _2007 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1019);
    float _2008 = isnan(_2007) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2007 : min(cbModelParam._m0[25u].w, _2007));
    float _2097;
    float _2099;
    float _2101;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2061 = fma(_1174, cbModelParam._m0[21u].z, fma(_1170, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1166)) + cbModelParam._m0[21u].w;
        float _2065 = fma(_1174, cbModelParam._m0[22u].z, fma(_1170, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1166)) + cbModelParam._m0[22u].w;
        float _2069 = fma(_1174, cbModelParam._m0[23u].z, fma(_1170, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1166)) + cbModelParam._m0[23u].w;
        float _2072 = fma(_1114, cbModelParam._m0[21u].z, fma(_1113, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1112));
        float _2075 = fma(_1114, cbModelParam._m0[22u].z, fma(_1113, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1112));
        float _2078 = fma(_1114, cbModelParam._m0[23u].z, fma(_1113, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1112));
        float _2239;
        if (_2072 > 0.0)
        {
            _2239 = abs((1.0 - _2061) / _2072);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2061 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2239 = frontier_phi_25_21_ladder;
        }
        float _2518;
        if (_2075 > 0.0)
        {
            _2518 = abs((1.0 - _2065) / _2075);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2065 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2518 = frontier_phi_37_32_ladder;
        }
        float _2731;
        if (_2078 > 0.0)
        {
            _2731 = abs((1.0 - _2069) / _2078);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2069 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2731 = frontier_phi_46_43_ladder;
        }
        float _2733 = isnan(_2518) ? _2239 : (isnan(_2239) ? _2518 : min(_2239, _2518));
        float _2734 = isnan(_2731) ? _2733 : (isnan(_2733) ? _2731 : min(_2733, _2731));
        float _2738 = (_2734 * _2072) + _2061;
        float _2739 = (_2734 * _2075) + _2065;
        float _2740 = (_2734 * _2078) + _2069;
        float _2741 = _2734 * 9.9999997473787516355514526367188e-05;
        float _2742 = (-1.0) - _2741;
        float _2744 = _2741 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2740 > _2744) || ((_2740 < _2742) || ((_2739 > _2744) || ((_2739 < _2742) || ((_2738 < _2742) || (_2738 > _2744))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2740, cbModelParam._m0[17u].z, fma(_2739, cbModelParam._m0[17u].y, _2738 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2740, cbModelParam._m0[18u].z, fma(_2739, cbModelParam._m0[18u].y, _2738 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2740, cbModelParam._m0[19u].z, fma(_2739, cbModelParam._m0[19u].y, _2738 * cbModelParam._m0[19u].x))), _2008);
            frontier_phi_22_46_ladder = _2939.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2939.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2939.x * cbModelParam._m0[1u].z;
        }
        _2097 = frontier_phi_22_46_ladder_2;
        _2099 = frontier_phi_22_46_ladder_1;
        _2101 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2081 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1112, _1113, _1114), _2008);
        _2097 = _2081.x * cbModelParam._m0[1u].z;
        _2099 = _2081.y * cbModelParam._m0[1u].z;
        _2101 = _2081.z * cbModelParam._m0[1u].z;
    }
    float _2114 = (((_1137 * _1089) + _1138) * _1104) * ((cbModelParam._m0[1u].w * (_2097 - _1999)) + _1999);
    float _2116 = (((_1137 * _1091) + _1138) * _1104) * ((cbModelParam._m0[1u].w * (_2099 - _2001)) + _2001);
    float _2118 = (((_1137 * _1092) + _1138) * _1104) * ((cbModelParam._m0[1u].w * (_2101 - _2003)) + _2003);
    float _2121 = fma(_2118, cbSceneParam._m0[89u].z, fma(_2116, cbSceneParam._m0[89u].y, _2114 * cbSceneParam._m0[89u].x));
    float _2124 = fma(_2118, cbSceneParam._m0[90u].z, fma(_2116, cbSceneParam._m0[90u].y, _2114 * cbSceneParam._m0[90u].x));
    float _2127 = fma(_2118, cbSceneParam._m0[91u].z, fma(_2116, cbSceneParam._m0[91u].y, _2114 * cbSceneParam._m0[91u].x));
    vec4 _2135 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_977, _978));
    float _2137 = _2135.w;
    float _2149 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2137);
    float _2150 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2137);
    float _2151 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2137);
    uvec4 _2155 = floatBitsToUint(cbInstanceData._m0[_1032 + 5u]);
    uint _2157 = _2155.x * 14u;
    uint _2158 = _2157 + 13u;
    float _2165 = _1104 + (-1.0);
    float _2170 = (cbLight._m0[_2158].x * _2165) + 1.0;
    float _2171 = (cbLight._m0[_2158].y * _2165) + 1.0;
    float _2172 = (cbLight._m0[_2158].z * _2165) + 1.0;
    float _2173 = (cbLight._m0[_2158].w * _2165) + 1.0;
    uint _2174 = _2157 + 5u;
    float _2180 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
    uint _2184 = _2157 + 4u;
    float _2193 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
    uint _2197 = _2157 | 1u;
    float _2208 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_889, _890, _891));
    float _2211 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_889, _890, _891));
    float _4391 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _4402 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2216 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * 0.3183098733425140380859375;
    float _2218 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 0.3183098733425140380859375;
    float _2225 = ((cbLight._m0[_2174].x * _2180) * _2218) + (((cbLight._m0[_2184].x * _2149) * _2193) * _2216);
    float _2226 = ((_2180 * cbLight._m0[_2174].y) * _2218) + (((cbLight._m0[_2184].y * _2150) * _2193) * _2216);
    float _2227 = ((_2180 * cbLight._m0[_2174].z) * _2218) + (((cbLight._m0[_2184].z * _2151) * _2193) * _2216);
    uvec4 _2231 = floatBitsToUint(cbLight._m0[_2157 + 12u]);
    bool _2233 = _2231.x == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2233)
    {
        _2244 = _2225;
        _2246 = _2226;
        _2248 = _2227;
    }
    else
    {
        uint _2252 = _2157 + 6u;
        float _2268 = (dot(vec3(cbLight._m0[_2157 + 2u].xyz), vec3(_889, _890, _891)) * 0.5) + 0.5;
        float _2269 = _2268 * _2268;
        float _4413 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2270 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2271 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2244 = (((cbLight._m0[_2252].x * 0.3183098733425140380859375) * _2270) * _2271) + _2225;
        _2246 = (((cbLight._m0[_2252].y * 0.3183098733425140380859375) * _2270) * _2271) + _2226;
        _2248 = (((cbLight._m0[_2252].z * 0.3183098733425140380859375) * _2270) * _2271) + _2227;
    }
    bool _2251 = _2231.y == 0u;
    float _2289;
    float _2291;
    float _2293;
    if (_2251)
    {
        _2289 = _2244;
        _2291 = _2246;
        _2293 = _2248;
    }
    else
    {
        uint _2462 = _2157 + 7u;
        float _2478 = (dot(vec3(cbLight._m0[_2157 + 3u].xyz), vec3(_889, _890, _891)) * 0.5) + 0.5;
        float _2479 = _2478 * _2478;
        float _4429 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2480 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2481 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2289 = (((cbLight._m0[_2462].x * 0.3183098733425140380859375) * _2480) * _2481) + _2244;
        _2291 = (((cbLight._m0[_2462].y * 0.3183098733425140380859375) * _2480) * _2481) + _2246;
        _2293 = (((cbLight._m0[_2462].z * 0.3183098733425140380859375) * _2480) * _2481) + _2248;
    }
    uint _2296 = _2157 + 8u;
    float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _1019) * 0.949999988079071044921875);
    float _2310 = _2309 * _2309;
    float _2311 = cbLight._m0[_2157].x + _969;
    float _2312 = cbLight._m0[_2157].y + _970;
    float _2313 = cbLight._m0[_2157].z + _971;
    float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
    float _2318 = _2317 * _2311;
    float _2319 = _2317 * _2312;
    float _2320 = _2317 * _2313;
    float _2321 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2157].xyz));
    float _4445 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _4456 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _2325 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2326 = dot(vec3(_889, _890, _891), vec3(_2318, _2319, _2320));
    float _4467 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2330 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2318, _2319, _2320));
    float _4478 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2334 = _2310 * _2310;
    float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
    float _2346 = exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0);
    float _2347 = 0.959999978542327880859375 - _1086;
    float _2349 = 0.959999978542327880859375 - _1087;
    float _2350 = 0.959999978542327880859375 - _1088;
    float _2357 = 1.0 - _2310;
    float _2368 = (0.5 / (((_2325 * ((_2324 * _2357) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2357) + _2310) * _2324))) * _2324;
    float _4489 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
    uint _2384 = _2157 + 9u;
    float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _1019) * 0.949999988079071044921875);
    float _2396 = _2395 * _2395;
    float _2397 = cbLight._m0[_2197].x + _969;
    float _2398 = cbLight._m0[_2197].y + _970;
    float _2399 = cbLight._m0[_2197].z + _971;
    float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
    float _2404 = _2403 * _2397;
    float _2405 = _2403 * _2398;
    float _2406 = _2403 * _2399;
    float _2407 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2197].xyz));
    float _4500 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _2411 = dot(vec3(_889, _890, _891), vec3(_2404, _2405, _2406));
    float _4511 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2404, _2405, _2406));
    float _4522 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2396 * _2396;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2430 = exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0);
    float _2437 = 1.0 - _2396;
    float _2447 = (0.5 / (((_2325 * ((_2410 * _2437) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2437) + _2396) * _2410))) * _2410;
    float _4533 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    float _2459 = (((((_2430 * _2347) + _1089) * cbLight._m0[_2384].x) * _2449) * _2180) + ((((cbLight._m0[_2296].x * _2149) * ((_2346 * _2347) + _1089)) * _2370) * _2193);
    float _2460 = (((((_2430 * _2349) + _1091) * cbLight._m0[_2384].y) * _2449) * _2180) + ((((cbLight._m0[_2296].y * _2150) * ((_2346 * _2349) + _1091)) * _2370) * _2193);
    float _2461 = (((((_2430 * _2350) + _1092) * cbLight._m0[_2384].z) * _2449) * _2180) + ((((cbLight._m0[_2296].z * _2151) * ((_2346 * _2350) + _1092)) * _2370) * _2193);
    float _2523;
    float _2525;
    float _2527;
    if (_2233)
    {
        _2523 = _2459;
        _2525 = _2460;
        _2527 = _2461;
    }
    else
    {
        uint _2529 = _2157 + 2u;
        uint _2533 = _2157 + 10u;
        float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2529].w)) * _1019) * 0.949999988079071044921875);
        float _2548 = _2547 * _2547;
        float _2549 = cbLight._m0[_2529].x + _969;
        float _2550 = cbLight._m0[_2529].y + _970;
        float _2551 = cbLight._m0[_2529].z + _971;
        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
        float _2556 = _2555 * _2549;
        float _2557 = _2555 * _2550;
        float _2558 = _2555 * _2551;
        float _2559 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2529].xyz));
        float _4544 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2563 = dot(vec3(_889, _890, _891), vec3(_2556, _2557, _2558));
        float _4555 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2567 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_2556, _2557, _2558));
        float _4566 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2571 = _2548 * _2548;
        float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
        float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0);
        float _2589 = 1.0 - _2548;
        float _2599 = (0.5 / (((_2325 * ((_2562 * _2589) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2589) + _2548) * _2562))) * _2562;
        float _4577 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2601 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
        float _2602 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2523 = (((((_2582 * _2347) + _1089) * cbLight._m0[_2533].x) * _2601) * _2602) + _2459;
        _2525 = (((((_2582 * _2349) + _1091) * cbLight._m0[_2533].y) * _2601) * _2602) + _2460;
        _2527 = (((((_2582 * _2350) + _1092) * cbLight._m0[_2533].z) * _2601) * _2602) + _2461;
    }
    float _2637;
    float _2639;
    float _2641;
    if (_2251)
    {
        _2637 = _2523;
        _2639 = _2525;
        _2641 = _2527;
    }
    else
    {
        uint _2648 = _2157 + 3u;
        uint _2652 = _2157 + 11u;
        float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2648].w)) * _1019) * 0.949999988079071044921875);
        float _2667 = _2666 * _2666;
        float _2668 = cbLight._m0[_2648].x + _969;
        float _2669 = cbLight._m0[_2648].y + _970;
        float _2670 = cbLight._m0[_2648].z + _971;
        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
        float _2675 = _2674 * _2668;
        float _2676 = _2674 * _2669;
        float _2677 = _2674 * _2670;
        float _2678 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2648].xyz));
        float _4593 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2682 = dot(vec3(_889, _890, _891), vec3(_2675, _2676, _2677));
        float _4604 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2686 = dot(vec3(cbLight._m0[_2648].xyz), vec3(_2675, _2676, _2677));
        float _4615 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2690 = _2667 * _2667;
        float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
        float _2701 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
        float _2708 = 1.0 - _2667;
        float _2718 = (0.5 / (((_2325 * ((_2681 * _2708) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2708) + _2667) * _2681))) * _2681;
        float _4626 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2720 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
        float _2721 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2637 = (((((_2701 * _2347) + _1089) * cbLight._m0[_2652].x) * _2720) * _2721) + _2523;
        _2639 = (((((_2701 * _2349) + _1091) * cbLight._m0[_2652].y) * _2720) * _2721) + _2525;
        _2641 = (((((_2701 * _2350) + _1092) * cbLight._m0[_2652].z) * _2720) * _2721) + _2527;
    }
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    if (_2155.y == 0u)
    {
        float _2796 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2797 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2796;
        float _2798 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2796;
        float _2799 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2796;
        uvec4 _2811 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2812 = _2811.x;
        uint _2823 = uint((float(_2811.y) * floor(float(uint(cbSceneParam._m0[85u].y * _978) / _2812))) + floor(float(uint(cbSceneParam._m0[85u].x * _977) / _2812)));
        float _2833 = (log2(_2799 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2834 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        uint _2837 = uint(isnan(14.0) ? _2834 : (isnan(_2834) ? 14.0 : min(_2834, 14.0)));
        uvec4 _2842 = texelFetch(g_lightClusterGridBuffer, int(((_2837 << 2u) + (_2823 << 6u)) >> 2u));
        uint _2843 = _2842.x;
        uint _2844 = _2811.z;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        if (((((1u << ((_2844 >> 4u) & 15u)) + 4294967295u) & _2843) == 0u) || ((_2844 & 240u) == 0u))
        {
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
        }
        else
        {
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            uint _3095 = 0u;
            uint _3104;
            bool _3105;
            for (;;)
            {
                _3104 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3095 << 2u)) >> 2u)).x;
                _3105 = _3104 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3105)
                {
                    frontier_phi_61_pred = _3089;
                    frontier_phi_61_pred_1 = _3094;
                    frontier_phi_61_pred_2 = _3093;
                    frontier_phi_61_pred_3 = _3092;
                    frontier_phi_61_pred_4 = _3091;
                    frontier_phi_61_pred_5 = _3090;
                }
                else
                {
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    uint _3219;
                    _3213 = _3089;
                    _3214 = _3090;
                    _3215 = _3091;
                    _3216 = _3092;
                    _3217 = _3093;
                    _3218 = _3094;
                    _3219 = _3104;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    for (;;)
                    {
                        uint _3223 = uint(findLSB(_3219)) + (_3095 << 5u);
                        uint _3220 = (_3219 + 4294967295u) & _3219;
                        uint _3225 = _3223 * 48u;
                        vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 3u)).x));
                        uint _3245 = (_3223 * 48u) + 4u;
                        vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 3u)).x));
                        uint _3264 = (_3223 * 48u) + 8u;
                        vec3 _3275 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3264)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 2u)).x));
                        float _3279 = _3239.x - _2797;
                        float _3280 = _3239.y - _2798;
                        float _3281 = _3239.z - _2799;
                        float _3282 = dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281));
                        float _3285 = inversesqrt(_3282);
                        float _3286 = _3285 * _3279;
                        float _3287 = _3285 * _3280;
                        float _3288 = _3285 * _3281;
                        float _3289 = dot(vec3(_1000, _1003, _1006), vec3(_3286, _3287, _3288));
                        float _3294 = 1.0 - (_3282 * _3239.w);
                        float _4652 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3295 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3296 = sqrt(_3282) * _3258.w;
                        float _3299 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                        float _3300 = _3299 * _3299;
                        float _3303 = ((1.0 - _3300) * _3289) + _3300;
                        float _3306 = _3296 * _3296;
                        float _3310 = ((isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0))) * _3295) / ((_3306 * 0.699999988079071044921875) + 1.0);
                        float _3314 = (-0.0) - _2797;
                        float _3315 = (-0.0) - _2798;
                        float _3316 = (-0.0) - _2799;
                        float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                        float _3321 = _3320 * _3314;
                        float _3322 = _3320 * _3315;
                        float _3323 = _3320 * _3316;
                        float _3331 = exp2(log2(1.0 / ((_3306 * 3.5) + 5.0)) * 0.25);
                        float _3332 = 1.0 - _1120;
                        float _3339 = sqrt(1.0 - ((1.0 - (_3332 * _3332)) * (1.0 - (_3331 * _3331))));
                        float _3340 = _3339 * _3339;
                        float _3341 = _3340 * _3340;
                        float _3342 = _3321 + _3286;
                        float _3343 = _3322 + _3287;
                        float _3344 = _3323 + _3288;
                        float _3348 = inversesqrt(dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344)));
                        float _3352 = dot(vec3(_1000, _1003, _1006), vec3(_3321, _3322, _3323));
                        float _4668 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3355 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3356 = dot(vec3(_1000, _1003, _1006), vec3(_3348 * _3342, _3348 * _3343, _3348 * _3344));
                        float _4679 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3359 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3363 = ((_3359 * _3359) * (_3341 + (-1.0))) + 1.0;
                        float _3364 = _3299 * _3340;
                        float _3365 = _3364 * _3364;
                        float _3368 = ((1.0 - _3365) * _3289) + _3365;
                        float _4690 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3369 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3370 = 1.0 - _3340;
                        float _3380 = (0.5 / (((_3369 * ((_3355 * _3370) + _3340)) + 9.9999999392252902907785028219223e-09) + (((_3369 * _3370) + _3340) * _3355))) * _3369;
                        float _4701 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3391 = (((_3341 * 3.1415927410125732421875) * (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) / ((_3363 * _3363) * ((_3306 * 2.1991131305694580078125) + 3.141590118408203125))) * _3295;
                        _3148 = (_3310 * _3258.x) + _3216;
                        _3149 = (_3310 * _3258.y) + _3217;
                        _3150 = (_3310 * _3258.z) + _3218;
                        _3145 = (_3391 * _3275.x) + _3213;
                        _3146 = (_3391 * _3275.y) + _3214;
                        _3147 = (_3391 * _3275.z) + _3215;
                        if (_3220 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3213 = _3145;
                            _3214 = _3146;
                            _3215 = _3147;
                            _3216 = _3148;
                            _3217 = _3149;
                            _3218 = _3150;
                            _3219 = _3220;
                        }
                    }
                    frontier_phi_61_pred = _3145;
                    frontier_phi_61_pred_1 = _3150;
                    frontier_phi_61_pred_2 = _3149;
                    frontier_phi_61_pred_3 = _3148;
                    frontier_phi_61_pred_4 = _3147;
                    frontier_phi_61_pred_5 = _3146;
                }
                _2945 = frontier_phi_61_pred;
                _2955 = frontier_phi_61_pred_1;
                _2953 = frontier_phi_61_pred_2;
                _2951 = frontier_phi_61_pred_3;
                _2949 = frontier_phi_61_pred_4;
                _2947 = frontier_phi_61_pred_5;
                uint _3096 = _3095 + 1u;
                if (_3096 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3089 = _2945;
                    _3090 = _2947;
                    _3091 = _2949;
                    _3092 = _2951;
                    _3093 = _2953;
                    _3094 = _2955;
                    _3095 = _3096;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
        }
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.z;
        uint _2961 = (_2959 >> 8u) & 15u;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        if (((4294967295u << _2961) & _2843) == 0u)
        {
            _3057 = _2944;
            _3059 = _2946;
            _3061 = _2948;
            _3063 = _2950;
            _3065 = _2952;
            _3067 = _2954;
        }
        else
        {
            float _3082 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
            float _3083 = _3082 * _2797;
            float _3084 = _3082 * _2798;
            float _3085 = _3082 * _2799;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2961 < ((_2959 >> 12u) & 15u))
            {
                float _3058;
                float _3060;
                float _3062;
                float _3064;
                float _3066;
                float _3068;
                float _3196 = _2944;
                float _3197 = _2946;
                float _3198 = _2948;
                float _3199 = _2950;
                float _3200 = _2952;
                float _3201 = _2954;
                uint _3202 = _2961;
                uint _3211;
                bool _3212;
                for (;;)
                {
                    _3211 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3202 << 2u)) >> 2u)).x;
                    _3212 = _3211 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3212)
                    {
                        frontier_phi_67_pred = _3199;
                        frontier_phi_67_pred_1 = _3200;
                        frontier_phi_67_pred_2 = _3201;
                        frontier_phi_67_pred_3 = _3198;
                        frontier_phi_67_pred_4 = _3197;
                        frontier_phi_67_pred_5 = _3196;
                    }
                    else
                    {
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3409 = _3196;
                        float _3410 = _3197;
                        float _3411 = _3198;
                        float _3412 = _3199;
                        float _3413 = _3200;
                        float _3414 = _3201;
                        uint _3415 = _3211;
                        uint _3416;
                        vec4 _3441;
                        float _3442;
                        vec4 _3457;
                        vec3 _3469;
                        vec4 _3484;
                        vec4 _3499;
                        float _3545;
                        bool _3546;
                        for (;;)
                        {
                            uint _3426 = ((_3202 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3415));
                            _3416 = (_3415 + 4294967295u) & _3415;
                            uint _3428 = _3426 * 40u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            _3442 = _3441.w;
                            uint _3444 = (_3426 * 40u) + 4u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3459 = (_3426 * 40u) + 8u;
                            _3469 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x));
                            uint _3471 = (_3426 * 40u) + 16u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3486 = (_3426 * 40u) + 20u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3501 = (_3426 * 40u) + 24u;
                            vec4 _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3520 = (_3426 * 40u) + 28u;
                            vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            _3545 = fma(_2799, _3533.z, fma(_2798, _3533.y, _3533.x * _2797)) + _3533.w;
                            _3546 = !((fma(_2799, _3514.z, fma(_2798, _3514.y, _3514.x * _2797)) + _3514.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3546)
                            {
                                float _3573 = _3441.x - _2797;
                                float _3574 = _3441.y - _2798;
                                float _3575 = _3441.z - _2799;
                                float _3576 = dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575));
                                float _3579 = inversesqrt(_3576);
                                float _3580 = _3579 * _3573;
                                float _3581 = _3579 * _3574;
                                float _3582 = _3579 * _3575;
                                float _3586 = 1.0 - (_3576 / (_3442 * _3442));
                                float _4712 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3591 = sqrt(_3576) * _3457.w;
                                float _3593 = 1.39999997615814208984375 / (_3591 + 1.39999997615814208984375);
                                float _3594 = _3593 * _3593;
                                float _3597 = ((1.0 - _3594) * dot(vec3(_3580, _3581, _3582), vec3(_1000, _1003, _1006))) + _3594;
                                float _3600 = _3591 * _3591;
                                float _3604 = (fma(_2799, _3484.z, fma(_2798, _3484.y, _3484.x * _2797)) + _3484.w) / _3545;
                                float _3605 = (fma(_2799, _3499.z, fma(_2798, _3499.y, _3499.x * _2797)) + _3499.w) / _3545;
                                float _3609 = 1.0 - dot(vec2(_3604, _3605), vec2(_3604, _3605));
                                float _4728 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3611 = _3610 * (((isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0))) * _3587) / ((_3600 * 0.699999988079071044921875) + 1.0));
                                float _3623 = exp2(log2(1.0 / ((_3600 * 3.5) + 5.0)) * 0.25);
                                float _3624 = 1.0 - _1120;
                                float _3631 = sqrt(1.0 - ((1.0 - (_3624 * _3624)) * (1.0 - (_3623 * _3623))));
                                float _3632 = _3631 * _3631;
                                float _3633 = _3632 * _3632;
                                float _3634 = _3580 - _3083;
                                float _3635 = _3581 - _3084;
                                float _3636 = _3582 - _3085;
                                float _3640 = inversesqrt(dot(vec3(_3634, _3635, _3636), vec3(_3634, _3635, _3636)));
                                float _3644 = dot(vec3(_1000, _1003, _1006), vec3((-0.0) - _3083, (-0.0) - _3084, (-0.0) - _3085));
                                float _4739 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3647 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3648 = dot(vec3(_1000, _1003, _1006), vec3(_3640 * _3634, _3640 * _3635, _3640 * _3636));
                                float _4750 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3651 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3655 = ((_3651 * _3651) * (_3633 + (-1.0))) + 1.0;
                                float _3656 = _3593 * _3632;
                                float _3657 = _3656 * _3656;
                                float _3663 = ((1.0 - _3657) * dot(vec3(_1000, _1003, _1006), vec3(_3580, _3581, _3582))) + _3657;
                                float _4761 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3664 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3665 = 1.0 - _3632;
                                float _3675 = (0.5 / (((_3664 * ((_3647 * _3665) + _3632)) + 9.9999999392252902907785028219223e-09) + (((_3664 * _3665) + _3632) * _3647))) * _3664;
                                float _4772 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3685 = (_3610 * _3587) * (((_3633 * 3.1415927410125732421875) * (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) / ((_3655 * _3655) * ((_3600 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3685 * _3469.x;
                                frontier_phi_73_pred_1 = _3685 * _3469.y;
                                frontier_phi_73_pred_2 = _3611 * _3457.z;
                                frontier_phi_73_pred_3 = _3611 * _3457.y;
                                frontier_phi_73_pred_4 = _3611 * _3457.x;
                                frontier_phi_73_pred_5 = _3685 * _3469.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3689 = frontier_phi_73_pred;
                            _3690 = frontier_phi_73_pred_1;
                            _3694 = frontier_phi_73_pred_2;
                            _3693 = frontier_phi_73_pred_3;
                            _3692 = frontier_phi_73_pred_4;
                            _3691 = frontier_phi_73_pred_5;
                            _3399 = _3692 + _3412;
                            _3400 = _3693 + _3413;
                            _3401 = _3694 + _3414;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            if (_3416 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3416;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3399;
                        frontier_phi_67_pred_1 = _3400;
                        frontier_phi_67_pred_2 = _3401;
                        frontier_phi_67_pred_3 = _3398;
                        frontier_phi_67_pred_4 = _3397;
                        frontier_phi_67_pred_5 = _3396;
                    }
                    _3064 = frontier_phi_67_pred;
                    _3066 = frontier_phi_67_pred_1;
                    _3068 = frontier_phi_67_pred_2;
                    _3062 = frontier_phi_67_pred_3;
                    _3060 = frontier_phi_67_pred_4;
                    _3058 = frontier_phi_67_pred_5;
                    uint _3203 = _3202 + 1u;
                    if (_3203 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3196 = _3058;
                        _3197 = _3060;
                        _3198 = _3062;
                        _3199 = _3064;
                        _3200 = _3066;
                        _3201 = _3068;
                        _3202 = _3203;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3066;
                frontier_phi_55_56_ladder_1 = _3068;
                frontier_phi_55_56_ladder_2 = _3064;
                frontier_phi_55_56_ladder_3 = _3062;
                frontier_phi_55_56_ladder_4 = _3060;
                frontier_phi_55_56_ladder_5 = _3058;
            }
            else
            {
                frontier_phi_55_56_ladder = _2952;
                frontier_phi_55_56_ladder_1 = _2954;
                frontier_phi_55_56_ladder_2 = _2950;
                frontier_phi_55_56_ladder_3 = _2948;
                frontier_phi_55_56_ladder_4 = _2946;
                frontier_phi_55_56_ladder_5 = _2944;
            }
            _3057 = frontier_phi_55_56_ladder_5;
            _3059 = frontier_phi_55_56_ladder_4;
            _3061 = frontier_phi_55_56_ladder_3;
            _3063 = frontier_phi_55_56_ladder_2;
            _3065 = frontier_phi_55_56_ladder;
            _3067 = frontier_phi_55_56_ladder_1;
        }
        float _3072 = isnan(1.0) ? _1104 : (isnan(_1104) ? 1.0 : min(_1104, 1.0));
        _2856 = (_3072 * _3063) + _2289;
        _2858 = (_3072 * _3065) + _2291;
        _2860 = (_3072 * _3067) + _2293;
        _2862 = ((_3057 * _1089) * _3072) + _2637;
        _2864 = ((_3059 * _1091) * _3072) + _2639;
        _2866 = ((_3061 * _1092) * _3072) + _2641;
    }
    else
    {
        _2856 = _2289;
        _2858 = _2291;
        _2860 = _2293;
        _2862 = _2637;
        _2864 = _2639;
        _2866 = _2641;
    }
    float _4788 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _4799 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _4810 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    uint _2886 = _1032 + 6u;
    float _2894 = _977 / cbSceneParam._m0[86u].x;
    float _2895 = _978 / cbSceneParam._m0[86u].y;
    vec4 _2909 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2894, _2895, (log2((isnan(cbSceneParam._m0[77u].w) ? _912 : (isnan(_912) ? cbSceneParam._m0[77u].w : min(_912, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2911 = _2909.x;
    float _2912 = _2909.y;
    float _2913 = _2909.z;
    float _2914 = _2909.w;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    if (_912 > cbSceneParam._m0[78u].w)
    {
        float _2969 = isnan(_912) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _912 : min(cbSceneParam._m0[80u].w, _912));
        float _2970 = _2969 / _912;
        float _2981 = _2970 * _962;
        float _2982 = _963 * _2970;
        float _2983 = (-0.0) - _2982;
        float _2985 = _2970 * _964;
        float _2987 = (cbSceneParam._m0[77u].w * _2983) / _2969;
        float _2988 = _2987 + cbSceneParam._m0[79u].w;
        float _2989 = cbSceneParam._m0[79u].w - _2982;
        float _2995 = sqrt(((_2981 * _2981) + (_2982 * _2982)) + (_2985 * _2985));
        float _2998 = (1.0 - (cbSceneParam._m0[77u].w / _2969)) * _2995;
        float _3003 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3005 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3158;
        if (abs((_2983 - _2987) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3158 = ((((_2988 > 0.0) ? exp2(_3003 * _2988) : (2.0 - exp2(_3005 * _2988))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2998;
        }
        else
        {
            float _3118 = 1.0 / cbSceneParam._m0[80u].x;
            float _3119 = isnan(_2989) ? _2988 : (isnan(_2988) ? _2989 : max(_2988, _2989));
            float _3120 = isnan(_2989) ? _2988 : (isnan(_2988) ? _2989 : min(_2988, _2989));
            float _3129 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : min(_3119, 0.0));
            float _3130 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : min(_3120, 0.0));
            _3158 = ((abs(_2995 / _2983) * cbSceneParam._m0[80u].y) * ((((_3129 - _3130) * 2.0) - ((exp2(_3003 * (isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0)))) - exp2(_3003 * (isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0))))) * _3118)) - ((exp2(_3005 * _3129) - exp2(_3005 * _3130)) * _3118))) + (_2998 * cbSceneParam._m0[80u].z);
        }
        vec4 _3160 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2894, _2895, 1.0), 0.0);
        float _3169 = exp2((_3158 * (-1.44269502162933349609375)) * (1.0 - _3160.w));
        float _3170 = log2(_3169);
        float _3186 = log2(_2914);
        _3007 = (exp2(_3186 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3170 * cbSceneParam._m0[78u].x)) * _3160.x) / cbSceneParam._m0[78u].x)) + _2911;
        _3009 = (exp2(_3186 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3170 * cbSceneParam._m0[78u].y)) * _3160.y) / cbSceneParam._m0[78u].y)) + _2912;
        _3011 = (exp2(_3186 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3170 * cbSceneParam._m0[78u].z)) * _3160.z) / cbSceneParam._m0[78u].z)) + _2913;
        _3013 = _3169 * _2914;
    }
    else
    {
        _3007 = _2911;
        _3009 = _2912;
        _3011 = _2913;
        _3013 = _2914;
    }
    float _3025 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3026 = _3025 == 3.0;
    float _3027 = log2(_3013);
    float _3034 = exp2(_3027 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2856 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1104))) + ((_2862 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1908)) * cbPerFrame._m0[3u].x));
    float _3035 = exp2(_3027 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2858 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1104))) + ((_2864 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1908)) * cbPerFrame._m0[3u].x));
    float _3036 = exp2(_3027 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2860 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1104))) + ((_2866 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1908)) * cbPerFrame._m0[3u].x));
    float _3045 = (_3025 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3045 * (_3026 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3007)));
    SV_Target.y = _3045 * (_3026 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3009)));
    SV_Target.z = _3045 * (_3026 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3011)));
    SV_Target.w = cbInstanceData._m0[_2886].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2886].w;
}


