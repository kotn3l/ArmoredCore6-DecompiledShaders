#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1284;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _265 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _272 = log2(0.0);
    float _274 = exp2(_272 * cbMtdParam._m0[24u].y);
    float _278 = _274 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _274);
    float _279 = _274 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _274);
    float _280 = _274 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _274);
    float _281 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _282 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _283 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _284 = isnan(1.0) ? _281 : (isnan(_281) ? 1.0 : min(_281, 1.0));
    float _286 = isnan(1.0) ? _282 : (isnan(_282) ? 1.0 : min(_282, 1.0));
    float _287 = isnan(1.0) ? _283 : (isnan(_283) ? 1.0 : min(_283, 1.0));
    vec4 _302 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _306 = _302.z;
    float _307 = _302.w;
    float _308 = 1.0 - _307;
    float _317 = exp2(log2((1.0 - (_308 * _306)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _318 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _319 = isnan(1.0) ? _318 : (isnan(_318) ? 1.0 : min(_318, 1.0));
    float _328 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_308 * _308) * _306))) * cbMtdParam._m0[26u].y);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    vec4 _342 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _348 = (_342.y * ((isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0))) - _307)) + _307;
    float _355 = roundEven(5.0 - ((_342.x + (-0.02500000037252902984619140625)) * 8.0));
    float _356 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _357 = isnan(4.0) ? _356 : (isnan(_356) ? 4.0 : min(_356, 4.0));
    float _370 = floor(_357);
    vec4 _373 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w, _370));
    float _383 = cbMtdParam._m0[10u].x * _373.x;
    float _384 = cbMtdParam._m0[10u].y * _373.y;
    float _385 = cbMtdParam._m0[10u].z * _373.z;
    vec4 _397 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _417 = (((cbMtdParam._m0[9u].x * _397.x) - _383) * _348) + _383;
    float _418 = (((cbMtdParam._m0[9u].y * _397.y) - _384) * _348) + _384;
    float _419 = (((cbMtdParam._m0[9u].z * _397.z) - _385) * _348) + _385;
    vec4 _432 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _452 = (((cbMtdParam._m0[20u].x * _432.x) - _417) * _319) + _417;
    float _453 = (((cbMtdParam._m0[20u].y * _432.y) - _418) * _319) + _418;
    float _454 = (((cbMtdParam._m0[20u].z * _432.z) - _419) * _319) + _419;
    vec4 _466 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _490 = (_265.x * 4.5) * ((((cbMtdParam._m0[23u].x * _466.x) - _452) * _284) + _452);
    float _492 = (_265.y * 4.5) * ((((cbMtdParam._m0[23u].y * _466.y) - _453) * _286) + _453);
    float _494 = (_265.z * 4.5) * ((((cbMtdParam._m0[23u].z * _466.z) - _454) * _287) + _454);
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[26u].w;
    _198[0u] = cbMtdParam._m0[27u].x;
    _197[1u] = cbMtdParam._m0[27u].y;
    _198[1u] = cbMtdParam._m0[27u].z;
    _197[2u] = cbMtdParam._m0[27u].w;
    _198[2u] = cbMtdParam._m0[28u].x;
    _197[3u] = cbMtdParam._m0[28u].y;
    _198[3u] = cbMtdParam._m0[28u].z;
    _197[4u] = cbMtdParam._m0[28u].w;
    _198[4u] = cbMtdParam._m0[29u].x;
    float _526 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    uint _528 = uint(int(isnan(4.0) ? _526 : (isnan(_526) ? 4.0 : min(_526, 4.0))));
    float _540 = ((cbMtdParam._m0[30u].x - _198[_528]) * _348) + _198[_528];
    float _545 = ((cbMtdParam._m0[30u].z - _540) * _319) + _540;
    float _553 = ((cbMtdParam._m0[31u].x - _545) * _284) + _545;
    vec4 _569 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w, _370));
    float _571 = _569.x;
    float _572 = _569.y;
    float _574 = _569.z + _197[_528];
    vec4 _587 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _595 = (((cbMtdParam._m0[29u].w - _574) + _587.z) * _348) + _574;
    vec4 _608 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _616 = (((cbMtdParam._m0[30u].y - _595) + _608.z) * _319) + _595;
    float _622 = ((((_306 * 2.0) * _616) - _616) * cbMtdParam._m0[25u].y) + _616;
    vec4 _634 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _642 = (((_634.z + cbMtdParam._m0[30u].w) - _622) * _287) + _622;
    float _655 = ((_587.x - _571) * _348) + _571;
    float _656 = ((_587.y - _572) * _348) + _572;
    float _661 = ((_608.x - _655) * _319) + _655;
    float _662 = ((_608.y - _656) * _319) + _656;
    float _671 = ((((_634.x - _661) * _284) + _661) * 2.0) + (-1.0);
    float _672 = ((((_634.y - _662) * _286) + _662) * 2.0) + (-1.0);
    float _673 = dot(vec2(_671, _672), vec2(_671, _672));
    float _3968 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _678 = sqrt(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))));
    float _681 = _671 + (cbMtdParam._m0[25u].z * ((_302.x * 2.0) + (-1.0)));
    float _682 = _672 + (cbMtdParam._m0[25u].z * ((_302.y * 2.0) + (-1.0)));
    float _685 = fma(_678, _233 * NORMAL.x, fma(_682, _240 * TANGENT.x, (_226 * _218) * _681));
    float _688 = fma(_678, _233 * NORMAL.y, fma(_682, _240 * TANGENT.y, (_226 * _219) * _681));
    float _691 = fma(_678, _233 * NORMAL.z, fma(_682, _240 * TANGENT.z, (_226 * _220) * _681));
    float _695 = inversesqrt(dot(vec3(_685, _688, _691), vec3(_685, _688, _691)));
    float _696 = _695 * _685;
    float _697 = _695 * _688;
    float _698 = _695 * _691;
    float _3979 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _699 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _4001 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4012 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4023 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _703 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _719 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _769 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _759);
    float _770 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _759);
    float _771 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _759);
    float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
    float _776 = _769 * _775;
    float _777 = _770 * _775;
    float _778 = _771 * _775;
    float _784 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _785 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _787 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _789 = _787.w;
    float _807 = fma(_698, cbSceneParam._m0[5u].z, fma(_697, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _696));
    float _810 = fma(_698, cbSceneParam._m0[6u].z, fma(_697, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _696));
    float _813 = fma(_698, cbSceneParam._m0[7u].z, fma(_697, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _696));
    vec4 _815 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _826 = (((_815.y - _699) + (_815.w * _699)) * cbMtdParam._m0[3u].x) + _699;
    uint _839 = uint(roundEven(NORMAL.w)) * 13u;
    uint _842 = (_839 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _848 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * cbInstanceData._m0[_842].x;
    float _849 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_842].y;
    float _850 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_842].z;
    float _4034 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    vec4 _854 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _859 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _870 = (((_859.x - _703) + (_859.w * _703)) * cbMtdParam._m0[3u].x) + _703;
    float _883 = (cbMtdParam._m0[3u].x * (((_851 * _789) - _851) + _854.x)) + _851;
    float _884 = (cbMtdParam._m0[3u].x * (((_852 * _789) - _852) + _854.y)) + _852;
    float _885 = (cbMtdParam._m0[3u].x * (((_853 * _789) - _853) + _854.z)) + _853;
    float _886 = 1.0 - _870;
    float _887 = _886 * _883;
    float _888 = _886 * _884;
    float _889 = _886 * _885;
    float _894 = (_883 + (-0.039999999105930328369140625)) * _870;
    float _895 = (_884 + (-0.039999999105930328369140625)) * _870;
    float _896 = (_885 + (-0.039999999105930328369140625)) * _870;
    float _897 = _894 + 0.039999999105930328369140625;
    float _899 = _895 + 0.039999999105930328369140625;
    float _900 = _896 + 0.039999999105930328369140625;
    vec4 _909 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _784, cbSceneParam._m0[86u].y * _785));
    float _912 = _909.x * TEXCOORD_5.w;
    float _913 = dot(vec3(_696, _697, _698), vec3(_776, _777, _778));
    float _916 = _913 * 2.0;
    float _920 = (_916 * _696) - _776;
    float _921 = (_916 * _697) - _777;
    float _922 = (_916 * _698) - _778;
    float _926 = abs(dot(vec3(_776, _777, _778), vec3(_696, _697, _698)));
    float _4067 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _928 = sqrt(_826);
    float _939 = exp2((_928 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_928 * 3.0));
    float _945 = (1.0 - _939) * ((_928 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _946 = _939 * _928;
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1283;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1008 = fma(_982, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974));
        float _1012 = fma(_982, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974));
        float _1016 = fma(_982, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974));
        float _1041 = _974 + _696;
        float _1042 = _978 + _697;
        float _1043 = _982 + _698;
        float _1053 = fma(_1043, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041)) - _1008;
        float _1054 = fma(_1043, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041)) - _1012;
        float _1055 = fma(_1043, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041)) - _1016;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1008 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1012 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[34u].z) + ((((((_1016 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1111 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1077.x + (-0.5));
        float _1113 = _1111 * (_1077.y + (-0.5));
        float _1114 = _1111 * (_1077.z + (-0.5));
        float _1121 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1084.x + (-0.5));
        float _1123 = _1121 * (_1084.y + (-0.5));
        float _1124 = _1121 * (_1084.z + (-0.5));
        float _1131 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1091.x + (-0.5));
        float _1133 = _1131 * (_1091.y + (-0.5));
        float _1134 = _1131 * (_1091.z + (-0.5));
        float _1141 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1098.x + (-0.5));
        float _1143 = _1141 * (_1098.y + (-0.5));
        float _1144 = _1141 * (_1098.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1165 = (dot(vec3(_696, _697, _698), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1175 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _4115 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1177 + 1.0))) + _1182) * _1145;
        float _1192 = _1113 * 0.5;
        float _1193 = _1123 * 0.5;
        float _1194 = _1133 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_696, _697, _698), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _4148 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1219 + 1.0))) + _1224) * _1146;
        float _1234 = _1114 * 0.5;
        float _1235 = _1124 * 0.5;
        float _1236 = _1134 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_696, _697, _698), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4181 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1261 + 1.0))) + _1266) * _1147;
        _1283 = _1114;
        _1285 = _1113;
        _1286 = _1112;
        _1287 = _1124;
        _1288 = _1123;
        _1289 = _1122;
        _1290 = _1134;
        _1291 = _1133;
        _1292 = _1132;
        _1293 = _1147;
        _1294 = _1146;
        _1295 = _1145;
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _1284;
        _1285 = _1284;
        _1286 = _1284;
        _1287 = _1284;
        _1288 = _1284;
        _1289 = _1284;
        _1290 = _1284;
        _1291 = _1284;
        _1292 = _1284;
        _1293 = _1284;
        _1294 = _1284;
        _1295 = _1284;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1321 = fma(_982, cbModelParam._m0[30u].z, fma(_978, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974));
        float _1325 = fma(_982, cbModelParam._m0[31u].z, fma(_978, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974));
        float _1329 = fma(_982, cbModelParam._m0[32u].z, fma(_978, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974));
        float _1352 = _974 + _696;
        float _1353 = _978 + _697;
        float _1354 = _982 + _698;
        float _1364 = fma(_1354, cbModelParam._m0[30u].z, fma(_1353, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1352)) - _1321;
        float _1365 = fma(_1354, cbModelParam._m0[31u].z, fma(_1353, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1352)) - _1325;
        float _1366 = fma(_1354, cbModelParam._m0[32u].z, fma(_1353, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1352)) - _1329;
        float _1370 = inversesqrt(dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366)));
        float _1383 = ((_1370 * _1364) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1321 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1384 = ((_1370 * _1365) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1325 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1370 * _1366) / cbModelParam._m0[35u].z) + ((((((_1329 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        float _1420 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1387.x + (-0.5));
        float _1422 = _1420 * (_1387.y + (-0.5));
        float _1423 = _1420 * (_1387.z + (-0.5));
        float _1430 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1394.x + (-0.5));
        float _1432 = _1430 * (_1394.y + (-0.5));
        float _1433 = _1430 * (_1394.z + (-0.5));
        float _1440 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1401.x + (-0.5));
        float _1442 = _1440 * (_1401.y + (-0.5));
        float _1443 = _1440 * (_1401.z + (-0.5));
        float _1450 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1408.x + (-0.5));
        float _1452 = _1450 * (_1408.y + (-0.5));
        float _1453 = _1450 * (_1408.z + (-0.5));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = _1421 * 0.5;
        float _1458 = _1431 * 0.5;
        float _1459 = _1441 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_696, _697, _698), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4244 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1484 + 1.0))) + _1489) * _1454;
        float _1499 = _1422 * 0.5;
        float _1500 = _1432 * 0.5;
        float _1501 = _1442 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_696, _697, _698), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4277 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1526 + 1.0))) + _1531) * _1455;
        float _1541 = _1423 * 0.5;
        float _1542 = _1433 * 0.5;
        float _1543 = _1443 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_696, _697, _698), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4310 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1568 + 1.0))) + _1573) * _1456;
        _1590 = _1423;
        _1591 = _1422;
        _1592 = _1421;
        _1593 = _1433;
        _1594 = _1432;
        _1595 = _1431;
        _1596 = _1443;
        _1597 = _1442;
        _1598 = _1441;
        _1599 = _1456;
        _1600 = _1455;
        _1601 = _1454;
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
    }
    else
    {
        _1590 = _1284;
        _1591 = _1284;
        _1592 = _1284;
        _1593 = _1284;
        _1594 = _1284;
        _1595 = _1284;
        _1596 = _1284;
        _1597 = _1284;
        _1598 = _1284;
        _1599 = _1284;
        _1600 = _1284;
        _1601 = _1284;
        _1602 = 0.0;
        _1603 = 0.0;
        _1604 = 0.0;
    }
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1296)) + _1296;
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1297)) + _1297;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1298)) + _1298;
    float _1637 = fma(_1616, cbSceneParam._m0[89u].z, fma(_1615, cbSceneParam._m0[89u].y, _1614 * cbSceneParam._m0[89u].x));
    float _1640 = fma(_1616, cbSceneParam._m0[90u].z, fma(_1615, cbSceneParam._m0[90u].y, _1614 * cbSceneParam._m0[90u].x));
    float _1643 = fma(_1616, cbSceneParam._m0[91u].z, fma(_1615, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1614));
    float _1658 = _920 * 0.5;
    float _1659 = _921 * 0.5;
    float _1660 = _922 * 0.5;
    float _1661 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1664 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1667 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1701;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1674 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1283, _1287, _1290, _1293));
        float _1678 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1682 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1689 = dot(vec4(cbModelParam._m0[39u]), vec4(_1658, _1659, _1660, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1689) ? 0.0 : (isnan(0.0) ? _1689 : max(0.0, _1689))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1712;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1703 = dot(vec4(cbModelParam._m0[40u]), vec4(_1658, _1659, _1660, 1.0));
        _1712 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1703) ? 0.0 : (isnan(0.0) ? _1703 : max(0.0, _1703))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1712 = 1.0;
    }
    float _1716 = (_1712 * cbModelParam._m0[1u].x) + (_1701 * (1.0 - cbModelParam._m0[1u].x));
    float _1726 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _826);
    float _1727 = isnan(_1726) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1726 : min(cbModelParam._m0[25u].z, _1726));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1776 = fma(_982, cbModelParam._m0[13u].z, fma(_978, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974)) + cbModelParam._m0[13u].w;
        float _1780 = fma(_982, cbModelParam._m0[14u].z, fma(_978, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974)) + cbModelParam._m0[14u].w;
        float _1784 = fma(_982, cbModelParam._m0[15u].z, fma(_978, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974)) + cbModelParam._m0[15u].w;
        float _1787 = fma(_922, cbModelParam._m0[13u].z, fma(_921, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920));
        float _1790 = fma(_922, cbModelParam._m0[14u].z, fma(_921, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920));
        float _1793 = fma(_922, cbModelParam._m0[15u].z, fma(_921, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920));
        float _1821;
        if (_1787 > 0.0)
        {
            _1821 = abs((1.0 - _1776) / _1787);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1776 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1821 = frontier_phi_14_12_ladder;
        }
        float _1997;
        if (_1790 > 0.0)
        {
            _1997 = abs((1.0 - _1780) / _1790);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1780 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1997 = frontier_phi_23_19_ladder;
        }
        float _2292;
        if (_1793 > 0.0)
        {
            _2292 = abs((1.0 - _1784) / _1793);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1784 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2292 = frontier_phi_35_30_ladder;
        }
        float _2294 = isnan(_1997) ? _1821 : (isnan(_1821) ? _1997 : min(_1821, _1997));
        float _2295 = isnan(_2292) ? _2294 : (isnan(_2294) ? _2292 : min(_2294, _2292));
        float _2299 = (_2295 * _1787) + _1776;
        float _2300 = (_2295 * _1790) + _1780;
        float _2301 = (_2295 * _1793) + _1784;
        float _2302 = _2295 * 9.9999997473787516355514526367188e-05;
        float _2304 = (-1.0) - _2302;
        float _2306 = _2302 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2301 > _2306) || ((_2301 < _2304) || ((_2300 > _2306) || ((_2300 < _2304) || ((_2299 < _2304) || (_2299 > _2306))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2446 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2301, cbModelParam._m0[9u].z, fma(_2300, cbModelParam._m0[9u].y, _2299 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2301, cbModelParam._m0[10u].z, fma(_2300, cbModelParam._m0[10u].y, _2299 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2301, cbModelParam._m0[11u].z, fma(_2300, cbModelParam._m0[11u].y, _2299 * cbModelParam._m0[11u].x))), _1727);
            frontier_phi_13_35_ladder = _2446.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2446.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2446.x * cbModelParam._m0[1u].y;
        }
        _1809 = frontier_phi_13_35_ladder_2;
        _1811 = frontier_phi_13_35_ladder_1;
        _1813 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1797 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_920, _921, _922), _1727);
        _1809 = _1797.x * cbModelParam._m0[1u].y;
        _1811 = _1797.y * cbModelParam._m0[1u].y;
        _1813 = _1797.z * cbModelParam._m0[1u].y;
    }
    float _1817 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _826);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1817 : min(cbModelParam._m0[25u].w, _1817));
    float _1911;
    float _1913;
    float _1915;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1875 = fma(_982, cbModelParam._m0[21u].z, fma(_978, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974)) + cbModelParam._m0[21u].w;
        float _1879 = fma(_982, cbModelParam._m0[22u].z, fma(_978, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974)) + cbModelParam._m0[22u].w;
        float _1883 = fma(_982, cbModelParam._m0[23u].z, fma(_978, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974)) + cbModelParam._m0[23u].w;
        float _1886 = fma(_922, cbModelParam._m0[21u].z, fma(_921, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920));
        float _1889 = fma(_922, cbModelParam._m0[22u].z, fma(_921, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920));
        float _1892 = fma(_922, cbModelParam._m0[23u].z, fma(_921, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920));
        float _2002;
        if (_1886 > 0.0)
        {
            _2002 = abs((1.0 - _1875) / _1886);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1875 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2002 = frontier_phi_25_21_ladder;
        }
        float _2319;
        if (_1889 > 0.0)
        {
            _2319 = abs((1.0 - _1879) / _1889);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1879 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2319 = frontier_phi_37_32_ladder;
        }
        float _2657;
        if (_1892 > 0.0)
        {
            _2657 = abs((1.0 - _1883) / _1892);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1883 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2657 = frontier_phi_47_44_ladder;
        }
        float _2659 = isnan(_2319) ? _2002 : (isnan(_2002) ? _2319 : min(_2002, _2319));
        float _2660 = isnan(_2657) ? _2659 : (isnan(_2659) ? _2657 : min(_2659, _2657));
        float _2664 = (_2660 * _1886) + _1875;
        float _2665 = (_2660 * _1889) + _1879;
        float _2666 = (_2660 * _1892) + _1883;
        float _2667 = _2660 * 9.9999997473787516355514526367188e-05;
        float _2668 = (-1.0) - _2667;
        float _2670 = _2667 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2666 > _2670) || ((_2666 < _2668) || ((_2665 > _2670) || ((_2665 < _2668) || ((_2664 < _2668) || (_2664 > _2670))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2788 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2666, cbModelParam._m0[17u].z, fma(_2665, cbModelParam._m0[17u].y, _2664 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2666, cbModelParam._m0[18u].z, fma(_2665, cbModelParam._m0[18u].y, _2664 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2666, cbModelParam._m0[19u].z, fma(_2665, cbModelParam._m0[19u].y, _2664 * cbModelParam._m0[19u].x))), _1818);
            frontier_phi_22_47_ladder = _2788.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2788.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2788.x * cbModelParam._m0[1u].z;
        }
        _1911 = frontier_phi_22_47_ladder_2;
        _1913 = frontier_phi_22_47_ladder_1;
        _1915 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_920, _921, _922), _1818);
        _1911 = _1895.x * cbModelParam._m0[1u].z;
        _1913 = _1895.y * cbModelParam._m0[1u].z;
        _1915 = _1895.z * cbModelParam._m0[1u].z;
    }
    float _1928 = (((_945 * _897) + _946) * _912) * ((cbModelParam._m0[1u].w * (_1911 - _1809)) + _1809);
    float _1930 = (((_945 * _899) + _946) * _912) * ((cbModelParam._m0[1u].w * (_1913 - _1811)) + _1811);
    float _1932 = (((_945 * _900) + _946) * _912) * ((cbModelParam._m0[1u].w * (_1915 - _1813)) + _1813);
    float _1935 = fma(_1932, cbSceneParam._m0[89u].z, fma(_1930, cbSceneParam._m0[89u].y, _1928 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1932, cbSceneParam._m0[90u].z, fma(_1930, cbSceneParam._m0[90u].y, _1928 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1932, cbSceneParam._m0[91u].z, fma(_1930, cbSceneParam._m0[91u].y, _1928 * cbSceneParam._m0[91u].x));
    float _1976 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1980 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1984 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1988 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1989 = _1976 / _1988;
    float _1990 = _1980 / _1988;
    float _1991 = _1984 / _1988;
    float _2138;
    float _2139;
    float _2140;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2018 = ((uint(_1991 > cbSceneParam._m0[59u].y) + uint(_1991 > cbSceneParam._m0[59u].x)) + uint(_1991 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2019 = _2018 + 43u;
        uint _2027 = _2018 + 44u;
        uint _2035 = _2018 + 45u;
        uint _2043 = _2018 + 46u;
        float _2054 = fma(_1988, cbSceneParam._m0[_2019].w, fma(_1984, cbSceneParam._m0[_2019].z, fma(_1980, cbSceneParam._m0[_2019].y, _1976 * cbSceneParam._m0[_2019].x)));
        float _2058 = fma(_1988, cbSceneParam._m0[_2027].w, fma(_1984, cbSceneParam._m0[_2027].z, fma(_1980, cbSceneParam._m0[_2027].y, _1976 * cbSceneParam._m0[_2027].x)));
        float _2066 = fma(_1988, cbSceneParam._m0[_2043].w, fma(_1984, cbSceneParam._m0[_2043].z, fma(_1980, cbSceneParam._m0[_2043].y, _1976 * cbSceneParam._m0[_2043].x)));
        float _2071 = cbSceneParam._m0[33u].z * _2066;
        float _2073 = cbSceneParam._m0[33u].w * _2066;
        float _2076 = fma(_1988, cbSceneParam._m0[_2035].w, fma(_1984, cbSceneParam._m0[_2035].z, fma(_1980, cbSceneParam._m0[_2035].y, _1976 * cbSceneParam._m0[_2035].x))) / _2066;
        float _2124 = (cbSceneParam._m0[33u].x - sqrt(((_1990 * _1990) + (_1989 * _1989)) + (_1991 * _1991))) * cbSceneParam._m0[33u].y;
        float _4436 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2131 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2071 + _2054) / _2066, (_2073 + _2058) / _2066), _2076), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2073 + _2054) / _2066, (_2058 - _2071) / _2066), _2076), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2054 - _2071) / _2066, (_2058 - _2073) / _2066), _2076), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2054 - _2073) / _2066, (_2071 + _2058) / _2066), _2076), 0.0)).x), vec4(0.25)));
        _2138 = 1.0 - (_2131 * cbSceneParam._m0[34u].x);
        _2139 = 1.0 - (_2131 * cbSceneParam._m0[34u].y);
        _2140 = 1.0 - (_2131 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2138 = 1.0;
        _2139 = 1.0;
        _2140 = 1.0;
    }
    float _2204;
    float _2206;
    float _2208;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2192 = fma(_1988, cbSceneParam._m0[63u].w, fma(_1984, cbSceneParam._m0[63u].z, fma(_1980, cbSceneParam._m0[63u].y, _1976 * cbSceneParam._m0[63u].x)));
        float _2193 = fma(_1988, cbSceneParam._m0[60u].w, fma(_1984, cbSceneParam._m0[60u].z, fma(_1980, cbSceneParam._m0[60u].y, _1976 * cbSceneParam._m0[60u].x))) / _2192;
        float _2194 = fma(_1988, cbSceneParam._m0[61u].w, fma(_1984, cbSceneParam._m0[61u].z, fma(_1980, cbSceneParam._m0[61u].y, _1976 * cbSceneParam._m0[61u].x))) / _2192;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2193 >= cbSceneParam._m0[64u].x) && (_2194 >= cbSceneParam._m0[64u].y)) && (_2193 <= cbSceneParam._m0[64u].z)) && (_2194 <= cbSceneParam._m0[64u].w))
        {
            float _2332 = fma(_1988, cbSceneParam._m0[62u].w, fma(_1984, cbSceneParam._m0[62u].z, fma(_1980, cbSceneParam._m0[62u].y, _1976 * cbSceneParam._m0[62u].x))) / _2192;
            float _2336 = isnan(cbSceneParam._m0[41u].w) ? _2332 : (isnan(_2332) ? cbSceneParam._m0[41u].w : max(_2332, cbSceneParam._m0[41u].w));
            float _2379 = (cbSceneParam._m0[33u].x - sqrt(((_1990 * _1990) + (_1989 * _1989)) + (_1991 * _1991))) * cbSceneParam._m0[33u].y;
            float _4452 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
            float _2386 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2193, cbSceneParam._m0[33u].w + _2194), _2336), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2193, _2194 - cbSceneParam._m0[33u].z), _2336), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2193 - cbSceneParam._m0[33u].z, _2194 - cbSceneParam._m0[33u].w), _2336), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2193 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2194), _2336), 0.0)).x), vec4(0.25)));
            float _2390 = 1.0 - (_2386 * cbSceneParam._m0[34u].x);
            float _2391 = 1.0 - (_2386 * cbSceneParam._m0[34u].y);
            float _2392 = 1.0 - (_2386 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2392) ? _2140 : (isnan(_2140) ? _2392 : min(_2140, _2392));
            frontier_phi_34_33_ladder_1 = isnan(_2391) ? _2139 : (isnan(_2139) ? _2391 : min(_2139, _2391));
            frontier_phi_34_33_ladder_2 = isnan(_2390) ? _2138 : (isnan(_2138) ? _2390 : min(_2138, _2390));
        }
        else
        {
            frontier_phi_34_33_ladder = _2140;
            frontier_phi_34_33_ladder_1 = _2139;
            frontier_phi_34_33_ladder_2 = _2138;
        }
        _2204 = frontier_phi_34_33_ladder_2;
        _2206 = frontier_phi_34_33_ladder_1;
        _2208 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2204 = _2138;
        _2206 = _2139;
        _2208 = _2140;
    }
    uvec4 _2213 = floatBitsToUint(cbInstanceData._m0[_839 + 5u]);
    uint _2215 = _2213.x * 14u;
    uint _2216 = _2215 + 13u;
    float _2223 = _912 + (-1.0);
    float _2228 = (cbLight._m0[_2216].x * _2223) + 1.0;
    float _2229 = (cbLight._m0[_2216].y * _2223) + 1.0;
    float _2230 = (cbLight._m0[_2216].z * _2223) + 1.0;
    float _2231 = (cbLight._m0[_2216].w * _2223) + 1.0;
    uint _2232 = _2215 + 5u;
    float _2238 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
    uint _2242 = _2215 + 4u;
    float _2251 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
    uint _2255 = _2215 | 1u;
    float _2266 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_696, _697, _698));
    float _2269 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_696, _697, _698));
    float _4488 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _4499 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2274 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * 0.3183098733425140380859375;
    float _2276 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * 0.3183098733425140380859375;
    float _2283 = ((cbLight._m0[_2232].x * _2238) * _2276) + (((cbLight._m0[_2242].x * _2204) * _2251) * _2274);
    float _2284 = ((_2238 * cbLight._m0[_2232].y) * _2276) + (((cbLight._m0[_2242].y * _2206) * _2251) * _2274);
    float _2285 = ((_2238 * cbLight._m0[_2232].z) * _2276) + (((cbLight._m0[_2242].z * _2208) * _2251) * _2274);
    uvec4 _2289 = floatBitsToUint(cbLight._m0[_2215 + 12u]);
    bool _2291 = _2289.x == 0u;
    float _2393;
    float _2395;
    float _2397;
    if (_2291)
    {
        _2393 = _2283;
        _2395 = _2284;
        _2397 = _2285;
    }
    else
    {
        uint _2401 = _2215 + 6u;
        float _2417 = (dot(vec3(cbLight._m0[_2215 + 2u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2418 = _2417 * _2417;
        float _4510 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2419 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2420 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2393 = (((cbLight._m0[_2401].x * 0.3183098733425140380859375) * _2419) * _2420) + _2283;
        _2395 = (((cbLight._m0[_2401].y * 0.3183098733425140380859375) * _2419) * _2420) + _2284;
        _2397 = (((cbLight._m0[_2401].z * 0.3183098733425140380859375) * _2419) * _2420) + _2285;
    }
    bool _2400 = _2289.y == 0u;
    float _2455;
    float _2457;
    float _2459;
    if (_2400)
    {
        _2455 = _2393;
        _2457 = _2395;
        _2459 = _2397;
    }
    else
    {
        uint _2628 = _2215 + 7u;
        float _2644 = (dot(vec3(cbLight._m0[_2215 + 3u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2645 = _2644 * _2644;
        float _4526 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2646 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2647 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2455 = (((cbLight._m0[_2628].x * 0.3183098733425140380859375) * _2646) * _2647) + _2393;
        _2457 = (((cbLight._m0[_2628].y * 0.3183098733425140380859375) * _2646) * _2647) + _2395;
        _2459 = (((cbLight._m0[_2628].z * 0.3183098733425140380859375) * _2646) * _2647) + _2397;
    }
    uint _2462 = _2215 + 8u;
    float _2475 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _826) * 0.949999988079071044921875);
    float _2476 = _2475 * _2475;
    float _2477 = cbLight._m0[_2215].x + _776;
    float _2478 = cbLight._m0[_2215].y + _777;
    float _2479 = cbLight._m0[_2215].z + _778;
    float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
    float _2484 = _2483 * _2477;
    float _2485 = _2483 * _2478;
    float _2486 = _2483 * _2479;
    float _2487 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2215].xyz));
    float _4542 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _4553 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _2491 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2492 = dot(vec3(_696, _697, _698), vec3(_2484, _2485, _2486));
    float _4564 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2495 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2496 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2484, _2485, _2486));
    float _4575 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2500 = _2476 * _2476;
    float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
    float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) * 5.0);
    float _2513 = 0.959999978542327880859375 - _894;
    float _2515 = 0.959999978542327880859375 - _895;
    float _2516 = 0.959999978542327880859375 - _896;
    float _2523 = 1.0 - _2476;
    float _2534 = (0.5 / (((_2491 * ((_2490 * _2523) + _2476)) + 9.9999999392252902907785028219223e-09) + (((_2491 * _2523) + _2476) * _2490))) * _2490;
    float _4586 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2536 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
    uint _2550 = _2215 + 9u;
    float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2255].w)) * _826) * 0.949999988079071044921875);
    float _2562 = _2561 * _2561;
    float _2563 = cbLight._m0[_2255].x + _776;
    float _2564 = cbLight._m0[_2255].y + _777;
    float _2565 = cbLight._m0[_2255].z + _778;
    float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
    float _2570 = _2569 * _2563;
    float _2571 = _2569 * _2564;
    float _2572 = _2569 * _2565;
    float _2573 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2255].xyz));
    float _4597 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2576 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2577 = dot(vec3(_696, _697, _698), vec3(_2570, _2571, _2572));
    float _4608 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2580 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2581 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_2570, _2571, _2572));
    float _4619 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2585 = _2562 * _2562;
    float _2589 = ((_2580 * _2580) * (_2585 + (-1.0))) + 1.0;
    float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0);
    float _2603 = 1.0 - _2562;
    float _2613 = (0.5 / (((_2491 * ((_2576 * _2603) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2491 * _2603) + _2562) * _2576))) * _2576;
    float _4630 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2615 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2585 / ((_2589 * _2589) * 3.141590118408203125));
    float _2625 = (((((_2596 * _2513) + _897) * cbLight._m0[_2550].x) * _2615) * _2238) + ((((cbLight._m0[_2462].x * _2204) * ((_2512 * _2513) + _897)) * _2536) * _2251);
    float _2626 = (((((_2596 * _2515) + _899) * cbLight._m0[_2550].y) * _2615) * _2238) + ((((cbLight._m0[_2462].y * _2206) * ((_2512 * _2515) + _899)) * _2536) * _2251);
    float _2627 = (((((_2596 * _2516) + _900) * cbLight._m0[_2550].z) * _2615) * _2238) + ((((cbLight._m0[_2462].z * _2208) * ((_2512 * _2516) + _900)) * _2536) * _2251);
    float _2683;
    float _2685;
    float _2687;
    if (_2291)
    {
        _2683 = _2625;
        _2685 = _2626;
        _2687 = _2627;
    }
    else
    {
        uint _2689 = _2215 + 2u;
        uint _2693 = _2215 + 10u;
        float _2707 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2689].w)) * _826) * 0.949999988079071044921875);
        float _2708 = _2707 * _2707;
        float _2709 = cbLight._m0[_2689].x + _776;
        float _2710 = cbLight._m0[_2689].y + _777;
        float _2711 = cbLight._m0[_2689].z + _778;
        float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
        float _2716 = _2715 * _2709;
        float _2717 = _2715 * _2710;
        float _2718 = _2715 * _2711;
        float _2719 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2689].xyz));
        float _4641 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2722 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2723 = dot(vec3(_696, _697, _698), vec3(_2716, _2717, _2718));
        float _4652 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2726 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2727 = dot(vec3(cbLight._m0[_2689].xyz), vec3(_2716, _2717, _2718));
        float _4663 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2731 = _2708 * _2708;
        float _2735 = ((_2726 * _2726) * (_2731 + (-1.0))) + 1.0;
        float _2742 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
        float _2749 = 1.0 - _2708;
        float _2759 = (0.5 / (((_2491 * ((_2722 * _2749) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2491 * _2749) + _2708) * _2722))) * _2722;
        float _4674 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2761 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2731 / ((_2735 * _2735) * 3.141590118408203125));
        float _2762 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2683 = (((((_2742 * _2513) + _897) * cbLight._m0[_2693].x) * _2761) * _2762) + _2625;
        _2685 = (((((_2742 * _2515) + _899) * cbLight._m0[_2693].y) * _2761) * _2762) + _2626;
        _2687 = (((((_2742 * _2516) + _900) * cbLight._m0[_2693].z) * _2761) * _2762) + _2627;
    }
    float _2793;
    float _2795;
    float _2797;
    if (_2400)
    {
        _2793 = _2683;
        _2795 = _2685;
        _2797 = _2687;
    }
    else
    {
        uint _2804 = _2215 + 3u;
        uint _2808 = _2215 + 11u;
        float _2822 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2804].w)) * _826) * 0.949999988079071044921875);
        float _2823 = _2822 * _2822;
        float _2824 = cbLight._m0[_2804].x + _776;
        float _2825 = cbLight._m0[_2804].y + _777;
        float _2826 = cbLight._m0[_2804].z + _778;
        float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
        float _2831 = _2830 * _2824;
        float _2832 = _2830 * _2825;
        float _2833 = _2830 * _2826;
        float _2834 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2804].xyz));
        float _4690 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2838 = dot(vec3(_696, _697, _698), vec3(_2831, _2832, _2833));
        float _4701 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2842 = dot(vec3(cbLight._m0[_2804].xyz), vec3(_2831, _2832, _2833));
        float _4712 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2846 = _2823 * _2823;
        float _2850 = ((_2841 * _2841) * (_2846 + (-1.0))) + 1.0;
        float _2857 = exp2(log2(1.0 - (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) * 5.0);
        float _2864 = 1.0 - _2823;
        float _2874 = (0.5 / (((_2491 * ((_2837 * _2864) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2491 * _2864) + _2823) * _2837))) * _2837;
        float _4723 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2876 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2846 / ((_2850 * _2850) * 3.141590118408203125));
        float _2877 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2793 = (((((_2857 * _2513) + _897) * cbLight._m0[_2808].x) * _2876) * _2877) + _2683;
        _2795 = (((((_2857 * _2515) + _899) * cbLight._m0[_2808].y) * _2876) * _2877) + _2685;
        _2797 = (((((_2857 * _2516) + _900) * cbLight._m0[_2808].z) * _2876) * _2877) + _2687;
    }
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    if (_2213.y == 0u)
    {
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.x;
        uint _2910 = uint((float(_2898.y) * floor(float(uint(cbSceneParam._m0[85u].y * _785) / _2899))) + floor(float(uint(cbSceneParam._m0[85u].x * _784) / _2899)));
        float _2920 = (log2(_1991 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2921 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        uint _2924 = uint(isnan(14.0) ? _2921 : (isnan(_2921) ? 14.0 : min(_2921, 14.0)));
        uvec4 _2929 = texelFetch(g_lightClusterGridBuffer, int(((_2924 << 2u) + (_2910 << 6u)) >> 2u));
        uint _2930 = _2929.x;
        uint _2931 = _2898.z;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((((1u << ((_2931 >> 4u) & 15u)) + 4294967295u) & _2930) == 0u) || ((_2931 & 240u) == 0u))
        {
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
        }
        else
        {
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3021;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            uint _3161 = 0u;
            uint _3170;
            bool _3171;
            for (;;)
            {
                _3170 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3161 << 2u)) >> 2u)).x;
                _3171 = _3170 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3171)
                {
                    frontier_phi_66_pred = _3160;
                    frontier_phi_66_pred_1 = _3159;
                    frontier_phi_66_pred_2 = _3158;
                    frontier_phi_66_pred_3 = _3157;
                    frontier_phi_66_pred_4 = _3156;
                    frontier_phi_66_pred_5 = _3155;
                }
                else
                {
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    uint _3285;
                    _3279 = _3155;
                    _3280 = _3156;
                    _3281 = _3157;
                    _3282 = _3158;
                    _3283 = _3159;
                    _3284 = _3160;
                    _3285 = _3170;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    for (;;)
                    {
                        uint _3289 = uint(findLSB(_3285)) + (_3161 << 5u);
                        uint _3286 = (_3285 + 4294967295u) & _3285;
                        uint _3291 = _3289 * 48u;
                        vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 3u)).x));
                        uint _3311 = (_3289 * 48u) + 4u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 3u)).x));
                        uint _3330 = (_3289 * 48u) + 8u;
                        vec3 _3341 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x));
                        float _3345 = _3305.x - _1989;
                        float _3346 = _3305.y - _1990;
                        float _3347 = _3305.z - _1991;
                        float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                        float _3351 = inversesqrt(_3348);
                        float _3352 = _3351 * _3345;
                        float _3353 = _3351 * _3346;
                        float _3354 = _3351 * _3347;
                        float _3355 = dot(vec3(_807, _810, _813), vec3(_3352, _3353, _3354));
                        float _3360 = 1.0 - (_3348 * _3305.w);
                        float _4749 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3361 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3362 = sqrt(_3348) * _3324.w;
                        float _3365 = 1.39999997615814208984375 / (_3362 + 1.39999997615814208984375);
                        float _3366 = _3365 * _3365;
                        float _3369 = ((1.0 - _3366) * _3355) + _3366;
                        float _3372 = _3362 * _3362;
                        float _3376 = ((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3361) / ((_3372 * 0.699999988079071044921875) + 1.0);
                        float _3380 = (-0.0) - _1989;
                        float _3381 = (-0.0) - _1990;
                        float _3382 = (-0.0) - _1991;
                        float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                        float _3387 = _3386 * _3380;
                        float _3388 = _3386 * _3381;
                        float _3389 = _3386 * _3382;
                        float _3396 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                        float _3397 = 1.0 - _928;
                        float _3404 = sqrt(1.0 - ((1.0 - (_3397 * _3397)) * (1.0 - (_3396 * _3396))));
                        float _3405 = _3404 * _3404;
                        float _3406 = _3405 * _3405;
                        float _3407 = _3387 + _3352;
                        float _3408 = _3388 + _3353;
                        float _3409 = _3389 + _3354;
                        float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                        float _3417 = dot(vec3(_807, _810, _813), vec3(_3387, _3388, _3389));
                        float _4765 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3420 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3421 = dot(vec3(_807, _810, _813), vec3(_3413 * _3407, _3413 * _3408, _3413 * _3409));
                        float _4776 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3428 = ((_3424 * _3424) * (_3406 + (-1.0))) + 1.0;
                        float _3429 = _3365 * _3405;
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3355) + _3430;
                        float _4787 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3434 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3435 = 1.0 - _3405;
                        float _3445 = (0.5 / (((_3434 * ((_3420 * _3435) + _3405)) + 9.9999999392252902907785028219223e-09) + (((_3434 * _3435) + _3405) * _3420))) * _3434;
                        float _4798 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3456 = (((_3406 * 3.1415927410125732421875) * (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) / ((_3428 * _3428) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125))) * _3361;
                        _3214 = (_3376 * _3324.x) + _3282;
                        _3215 = (_3376 * _3324.y) + _3283;
                        _3216 = (_3376 * _3324.z) + _3284;
                        _3211 = (_3456 * _3341.x) + _3279;
                        _3212 = (_3456 * _3341.y) + _3280;
                        _3213 = (_3456 * _3341.z) + _3281;
                        if (_3286 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3279 = _3211;
                            _3280 = _3212;
                            _3281 = _3213;
                            _3282 = _3214;
                            _3283 = _3215;
                            _3284 = _3216;
                            _3285 = _3286;
                        }
                    }
                    frontier_phi_66_pred = _3216;
                    frontier_phi_66_pred_1 = _3215;
                    frontier_phi_66_pred_2 = _3214;
                    frontier_phi_66_pred_3 = _3213;
                    frontier_phi_66_pred_4 = _3212;
                    frontier_phi_66_pred_5 = _3211;
                }
                _3021 = frontier_phi_66_pred;
                _3019 = frontier_phi_66_pred_1;
                _3017 = frontier_phi_66_pred_2;
                _3015 = frontier_phi_66_pred_3;
                _3013 = frontier_phi_66_pred_4;
                _3011 = frontier_phi_66_pred_5;
                uint _3162 = _3161 + 1u;
                if (_3162 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3155 = _3011;
                    _3156 = _3013;
                    _3157 = _3015;
                    _3158 = _3017;
                    _3159 = _3019;
                    _3160 = _3021;
                    _3161 = _3162;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
        }
        uvec4 _3024 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3025 = _3024.z;
        uint _3027 = (_3025 >> 8u) & 15u;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        if (((4294967295u << _3027) & _2930) == 0u)
        {
            _3123 = _3010;
            _3125 = _3012;
            _3127 = _3014;
            _3129 = _3016;
            _3131 = _3018;
            _3133 = _3020;
        }
        else
        {
            float _3148 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
            float _3149 = _3148 * _1989;
            float _3150 = _3148 * _1990;
            float _3151 = _3148 * _1991;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3027 < ((_3025 >> 12u) & 15u))
            {
                float _3124;
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3262 = _3010;
                float _3263 = _3012;
                float _3264 = _3014;
                float _3265 = _3016;
                float _3266 = _3018;
                float _3267 = _3020;
                uint _3268 = _3027;
                uint _3277;
                bool _3278;
                for (;;)
                {
                    _3277 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3268 << 2u)) >> 2u)).x;
                    _3278 = _3277 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3278)
                    {
                        frontier_phi_72_pred = _3267;
                        frontier_phi_72_pred_1 = _3266;
                        frontier_phi_72_pred_2 = _3265;
                        frontier_phi_72_pred_3 = _3264;
                        frontier_phi_72_pred_4 = _3263;
                        frontier_phi_72_pred_5 = _3262;
                    }
                    else
                    {
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3474 = _3262;
                        float _3475 = _3263;
                        float _3476 = _3264;
                        float _3477 = _3265;
                        float _3478 = _3266;
                        float _3479 = _3267;
                        uint _3480 = _3277;
                        uint _3481;
                        vec4 _3506;
                        float _3507;
                        vec4 _3522;
                        vec3 _3534;
                        vec4 _3550;
                        vec4 _3565;
                        float _3611;
                        bool _3612;
                        for (;;)
                        {
                            uint _3491 = ((_3268 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3480));
                            _3481 = (_3480 + 4294967295u) & _3480;
                            uint _3493 = _3491 * 40u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            _3507 = _3506.w;
                            uint _3509 = (_3491 * 40u) + 4u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3524 = (_3491 * 40u) + 8u;
                            _3534 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x));
                            uint _3537 = (_3491 * 40u) + 16u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3491 * 40u) + 20u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3567 = (_3491 * 40u) + 24u;
                            vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3586 = (_3491 * 40u) + 28u;
                            vec4 _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            _3611 = fma(_1991, _3599.z, fma(_1990, _3599.y, _3599.x * _1989)) + _3599.w;
                            _3612 = !((fma(_1991, _3580.z, fma(_1990, _3580.y, _3580.x * _1989)) + _3580.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3612)
                            {
                                float _3639 = _3506.x - _1989;
                                float _3640 = _3506.y - _1990;
                                float _3641 = _3506.z - _1991;
                                float _3642 = dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641));
                                float _3645 = inversesqrt(_3642);
                                float _3646 = _3645 * _3639;
                                float _3647 = _3645 * _3640;
                                float _3648 = _3645 * _3641;
                                float _3652 = 1.0 - (_3642 / (_3507 * _3507));
                                float _4809 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3657 = sqrt(_3642) * _3522.w;
                                float _3659 = 1.39999997615814208984375 / (_3657 + 1.39999997615814208984375);
                                float _3660 = _3659 * _3659;
                                float _3663 = ((1.0 - _3660) * dot(vec3(_3646, _3647, _3648), vec3(_807, _810, _813))) + _3660;
                                float _3666 = _3657 * _3657;
                                float _3670 = (fma(_1991, _3550.z, fma(_1990, _3550.y, _3550.x * _1989)) + _3550.w) / _3611;
                                float _3671 = (fma(_1991, _3565.z, fma(_1990, _3565.y, _3565.x * _1989)) + _3565.w) / _3611;
                                float _3675 = 1.0 - dot(vec2(_3670, _3671), vec2(_3670, _3671));
                                float _4825 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3676 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3677 = _3676 * (((isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0))) * _3653) / ((_3666 * 0.699999988079071044921875) + 1.0));
                                float _3689 = exp2(log2(1.0 / ((_3666 * 3.5) + 5.0)) * 0.25);
                                float _3690 = 1.0 - _928;
                                float _3697 = sqrt(1.0 - ((1.0 - (_3690 * _3690)) * (1.0 - (_3689 * _3689))));
                                float _3698 = _3697 * _3697;
                                float _3699 = _3698 * _3698;
                                float _3700 = _3646 - _3149;
                                float _3701 = _3647 - _3150;
                                float _3702 = _3648 - _3151;
                                float _3706 = inversesqrt(dot(vec3(_3700, _3701, _3702), vec3(_3700, _3701, _3702)));
                                float _3710 = dot(vec3(_807, _810, _813), vec3((-0.0) - _3149, (-0.0) - _3150, (-0.0) - _3151));
                                float _4836 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3713 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3714 = dot(vec3(_807, _810, _813), vec3(_3706 * _3700, _3706 * _3701, _3706 * _3702));
                                float _4847 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3717 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3721 = ((_3717 * _3717) * (_3699 + (-1.0))) + 1.0;
                                float _3722 = _3659 * _3698;
                                float _3723 = _3722 * _3722;
                                float _3729 = ((1.0 - _3723) * dot(vec3(_807, _810, _813), vec3(_3646, _3647, _3648))) + _3723;
                                float _4858 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3730 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3731 = 1.0 - _3698;
                                float _3741 = (0.5 / (((_3730 * ((_3713 * _3731) + _3698)) + 9.9999999392252902907785028219223e-09) + (((_3730 * _3731) + _3698) * _3713))) * _3730;
                                float _4869 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3751 = (_3676 * _3653) * (((_3699 * 3.1415927410125732421875) * (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) / ((_3721 * _3721) * ((_3666 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3677 * _3522.y;
                                frontier_phi_78_pred_1 = _3677 * _3522.x;
                                frontier_phi_78_pred_2 = _3751 * _3534.z;
                                frontier_phi_78_pred_3 = _3751 * _3534.y;
                                frontier_phi_78_pred_4 = _3751 * _3534.x;
                                frontier_phi_78_pred_5 = _3677 * _3522.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3759 = frontier_phi_78_pred;
                            _3758 = frontier_phi_78_pred_1;
                            _3757 = frontier_phi_78_pred_2;
                            _3756 = frontier_phi_78_pred_3;
                            _3755 = frontier_phi_78_pred_4;
                            _3760 = frontier_phi_78_pred_5;
                            _3464 = _3758 + _3477;
                            _3465 = _3759 + _3478;
                            _3466 = _3760 + _3479;
                            _3461 = _3755 + _3474;
                            _3462 = _3756 + _3475;
                            _3463 = _3757 + _3476;
                            if (_3481 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3481;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3466;
                        frontier_phi_72_pred_1 = _3465;
                        frontier_phi_72_pred_2 = _3464;
                        frontier_phi_72_pred_3 = _3463;
                        frontier_phi_72_pred_4 = _3462;
                        frontier_phi_72_pred_5 = _3461;
                    }
                    _3134 = frontier_phi_72_pred;
                    _3132 = frontier_phi_72_pred_1;
                    _3130 = frontier_phi_72_pred_2;
                    _3128 = frontier_phi_72_pred_3;
                    _3126 = frontier_phi_72_pred_4;
                    _3124 = frontier_phi_72_pred_5;
                    uint _3269 = _3268 + 1u;
                    if (_3269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3262 = _3124;
                        _3263 = _3126;
                        _3264 = _3128;
                        _3265 = _3130;
                        _3266 = _3132;
                        _3267 = _3134;
                        _3268 = _3269;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3134;
                frontier_phi_60_61_ladder_1 = _3132;
                frontier_phi_60_61_ladder_2 = _3128;
                frontier_phi_60_61_ladder_3 = _3126;
                frontier_phi_60_61_ladder_4 = _3124;
                frontier_phi_60_61_ladder_5 = _3130;
            }
            else
            {
                frontier_phi_60_61_ladder = _3020;
                frontier_phi_60_61_ladder_1 = _3018;
                frontier_phi_60_61_ladder_2 = _3014;
                frontier_phi_60_61_ladder_3 = _3012;
                frontier_phi_60_61_ladder_4 = _3010;
                frontier_phi_60_61_ladder_5 = _3016;
            }
            _3123 = frontier_phi_60_61_ladder_4;
            _3125 = frontier_phi_60_61_ladder_3;
            _3127 = frontier_phi_60_61_ladder_2;
            _3129 = frontier_phi_60_61_ladder_5;
            _3131 = frontier_phi_60_61_ladder_1;
            _3133 = frontier_phi_60_61_ladder;
        }
        float _3138 = isnan(1.0) ? _912 : (isnan(_912) ? 1.0 : min(_912, 1.0));
        _2943 = (_3138 * _3129) + _2455;
        _2945 = (_3138 * _3131) + _2457;
        _2947 = (_3138 * _3133) + _2459;
        _2949 = ((_3123 * _897) * _3138) + _2793;
        _2951 = ((_3125 * _899) * _3138) + _2795;
        _2953 = ((_3127 * _900) * _3138) + _2797;
    }
    else
    {
        _2943 = _2455;
        _2945 = _2457;
        _2947 = _2459;
        _2949 = _2793;
        _2951 = _2795;
        _2953 = _2797;
    }
    float _4885 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4896 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4907 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    uint _2973 = _839 + 6u;
    float _2981 = _784 / cbSceneParam._m0[86u].x;
    float _2982 = _785 / cbSceneParam._m0[86u].y;
    vec4 _2996 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, (log2((isnan(cbSceneParam._m0[77u].w) ? _719 : (isnan(_719) ? cbSceneParam._m0[77u].w : min(_719, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2998 = _2996.x;
    float _2999 = _2996.y;
    float _3000 = _2996.z;
    float _3001 = _2996.w;
    float _3073;
    float _3075;
    float _3077;
    float _3079;
    if (_719 > cbSceneParam._m0[78u].w)
    {
        float _3035 = isnan(_719) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _719 : min(cbSceneParam._m0[80u].w, _719));
        float _3036 = _3035 / _719;
        float _3047 = _3036 * _769;
        float _3048 = _770 * _3036;
        float _3049 = (-0.0) - _3048;
        float _3051 = _3036 * _771;
        float _3053 = (cbSceneParam._m0[77u].w * _3049) / _3035;
        float _3054 = _3053 + cbSceneParam._m0[79u].w;
        float _3055 = cbSceneParam._m0[79u].w - _3048;
        float _3061 = sqrt(((_3047 * _3047) + (_3048 * _3048)) + (_3051 * _3051));
        float _3064 = (1.0 - (cbSceneParam._m0[77u].w / _3035)) * _3061;
        float _3069 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3071 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3224;
        if (abs((_3049 - _3053) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3224 = ((((_3054 > 0.0) ? exp2(_3069 * _3054) : (2.0 - exp2(_3071 * _3054))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3064;
        }
        else
        {
            float _3184 = 1.0 / cbSceneParam._m0[80u].x;
            float _3185 = isnan(_3055) ? _3054 : (isnan(_3054) ? _3055 : max(_3054, _3055));
            float _3186 = isnan(_3055) ? _3054 : (isnan(_3054) ? _3055 : min(_3054, _3055));
            float _3195 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : min(_3185, 0.0));
            float _3196 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : min(_3186, 0.0));
            _3224 = ((abs(_3061 / _3049) * cbSceneParam._m0[80u].y) * ((((_3195 - _3196) * 2.0) - ((exp2(_3069 * (isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0)))) - exp2(_3069 * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))))) * _3184)) - ((exp2(_3071 * _3195) - exp2(_3071 * _3196)) * _3184))) + (_3064 * cbSceneParam._m0[80u].z);
        }
        vec4 _3226 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, 1.0), 0.0);
        float _3235 = exp2((_3224 * (-1.44269502162933349609375)) * (1.0 - _3226.w));
        float _3236 = log2(_3235);
        float _3252 = log2(_3001);
        _3073 = (exp2(_3252 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3236 * cbSceneParam._m0[78u].x)) * _3226.x) / cbSceneParam._m0[78u].x)) + _2998;
        _3075 = (exp2(_3252 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3236 * cbSceneParam._m0[78u].y)) * _3226.y) / cbSceneParam._m0[78u].y)) + _2999;
        _3077 = (exp2(_3252 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3236 * cbSceneParam._m0[78u].z)) * _3226.z) / cbSceneParam._m0[78u].z)) + _3000;
        _3079 = _3235 * _3001;
    }
    else
    {
        _3073 = _2998;
        _3075 = _2999;
        _3077 = _3000;
        _3079 = _3001;
    }
    float _3091 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3092 = _3091 == 3.0;
    float _3093 = log2(_3079);
    float _3100 = exp2(_3093 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2943 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _912))) + ((_2949 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1716)) * cbPerFrame._m0[3u].x));
    float _3101 = exp2(_3093 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2945 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _912))) + ((_2951 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1716)) * cbPerFrame._m0[3u].x));
    float _3102 = exp2(_3093 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2947 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _912))) + ((_2953 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1716)) * cbPerFrame._m0[3u].x));
    float _3111 = (_3091 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3111 * (_3092 ? _3100 : (_3100 + (cbSceneParam._m0[72u].w * _3073)));
    SV_Target.y = _3111 * (_3092 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3075)));
    SV_Target.z = _3111 * (_3092 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3077)));
    SV_Target.w = cbInstanceData._m0[_2973].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2973].w;
}


