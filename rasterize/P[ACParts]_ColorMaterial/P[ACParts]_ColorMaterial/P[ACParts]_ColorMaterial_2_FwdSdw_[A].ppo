#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_15;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1521;
float _4181;
float _4182;
float _4183;
float _4184;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = cbMtdParam._m0[25u].x + TEXCOORD.y;
    vec4 _285 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (_271 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _292 = log2(0.0);
    float _294 = exp2(_292 * cbMtdParam._m0[24u].y);
    float _298 = _294 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _294);
    float _299 = _294 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _294);
    float _300 = _294 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _294);
    float _301 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _302 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _303 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _304 = isnan(1.0) ? _301 : (isnan(_301) ? 1.0 : min(_301, 1.0));
    float _306 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    float _307 = isnan(1.0) ? _303 : (isnan(_303) ? 1.0 : min(_303, 1.0));
    vec4 _320 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _271) + cbTextureTilingScale._m0[0u].w));
    float _324 = _320.z;
    float _325 = _320.w;
    float _326 = 1.0 - _325;
    float _335 = exp2(log2((1.0 - (_326 * _324)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _336 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _337 = isnan(1.0) ? _336 : (isnan(_336) ? 1.0 : min(_336, 1.0));
    float _346 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_326 * _326) * _324))) * cbMtdParam._m0[26u].y);
    float _347 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    vec4 _360 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _363 = _360.y;
    float _366 = (_363 * ((isnan(1.0) ? _347 : (isnan(_347) ? 1.0 : min(_347, 1.0))) - _325)) + _325;
    float _369 = (_360.x + (-0.02500000037252902984619140625)) * 8.0;
    float _373 = roundEven(5.0 - _369);
    float _374 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _375 = isnan(4.0) ? _374 : (isnan(_374) ? 4.0 : min(_374, 4.0));
    float _388 = floor(_375);
    vec4 _391 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _271) + cbTextureTilingScale._m0[10u].w, _388));
    float _212[6];
    float _213[6];
    float _214[6];
    _212[0u] = cbMtdParam._m0[12u].x;
    _213[0u] = cbMtdParam._m0[12u].y;
    _214[0u] = cbMtdParam._m0[12u].z;
    _212[1u] = cbMtdParam._m0[13u].x;
    _213[1u] = cbMtdParam._m0[13u].y;
    _214[1u] = cbMtdParam._m0[13u].z;
    _212[2u] = cbMtdParam._m0[14u].x;
    _213[2u] = cbMtdParam._m0[14u].y;
    _214[2u] = cbMtdParam._m0[14u].z;
    _212[3u] = cbMtdParam._m0[15u].x;
    _213[3u] = cbMtdParam._m0[15u].y;
    _214[3u] = cbMtdParam._m0[15u].z;
    _212[4u] = cbMtdParam._m0[16u].x;
    _213[4u] = cbMtdParam._m0[16u].y;
    _214[4u] = cbMtdParam._m0[16u].z;
    _212[5u] = cbMtdParam._m0[11u].x;
    _213[5u] = cbMtdParam._m0[11u].y;
    _214[5u] = cbMtdParam._m0[11u].z;
    float _457 = roundEven(_369);
    float _458 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    uint _460 = uint(int(isnan(5.0) ? _458 : (isnan(_458) ? 5.0 : min(_458, 5.0))));
    float _209[6];
    float _210[6];
    float _211[6];
    _209[0u] = 1.0;
    _210[0u] = 1.0;
    _211[0u] = 1.0;
    _209[1u] = cbMtdParam._m0[22u].x;
    _210[1u] = cbMtdParam._m0[22u].y;
    _211[1u] = cbMtdParam._m0[22u].z;
    _209[2u] = cbMtdParam._m0[21u].x;
    _210[2u] = cbMtdParam._m0[21u].y;
    _211[2u] = cbMtdParam._m0[21u].z;
    _209[3u] = cbMtdParam._m0[19u].x;
    _210[3u] = cbMtdParam._m0[19u].y;
    _211[3u] = cbMtdParam._m0[19u].z;
    _209[4u] = cbMtdParam._m0[18u].x;
    _210[4u] = cbMtdParam._m0[18u].y;
    _211[4u] = cbMtdParam._m0[18u].z;
    _209[5u] = cbMtdParam._m0[17u].x;
    _210[5u] = cbMtdParam._m0[17u].y;
    _211[5u] = cbMtdParam._m0[17u].z;
    float _547 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[29u].y * TEXCOORD.x) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[29u].z * TEXCOORD.y) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _548 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    uint _550 = uint(int(isnan(5.0) ? _548 : (isnan(_548) ? 5.0 : min(_548, 5.0))));
    float _208[6];
    _208[0u] = 1.0;
    _208[1u] = cbMtdParam._m0[22u].w;
    _208[2u] = cbMtdParam._m0[21u].w;
    _208[3u] = cbMtdParam._m0[19u].w;
    _208[4u] = cbMtdParam._m0[18u].w;
    _208[5u] = cbMtdParam._m0[17u].w;
    float _587 = ((((_212[_460] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[24u].z * (_209[_550] - _212[_460])) * _208[_460])) * _363) + cbMtdParam._m0[10u].x) * _391.x;
    float _588 = ((((_213[_460] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[24u].z * (_210[_550] - _213[_460])) * _208[_460])) * _363) + cbMtdParam._m0[10u].y) * _391.y;
    float _589 = ((((_214[_460] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[24u].z * (_211[_550] - _214[_460])) * _208[_460])) * _363) + cbMtdParam._m0[10u].z) * _391.z;
    vec4 _601 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _271) + cbTextureTilingScale._m0[1u].w));
    float _621 = (((cbMtdParam._m0[9u].x * _601.x) - _587) * _366) + _587;
    float _622 = (((cbMtdParam._m0[9u].y * _601.y) - _588) * _366) + _588;
    float _623 = (((cbMtdParam._m0[9u].z * _601.z) - _589) * _366) + _589;
    vec4 _635 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    float _655 = (((cbMtdParam._m0[20u].x * _635.x) - _621) * _337) + _621;
    float _656 = (((cbMtdParam._m0[20u].y * _635.y) - _622) * _337) + _622;
    float _657 = (((cbMtdParam._m0[20u].z * _635.z) - _623) * _337) + _623;
    vec4 _669 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    float _693 = (_285.x * 4.5) * ((((cbMtdParam._m0[23u].x * _669.x) - _655) * _304) + _655);
    float _695 = (_285.y * 4.5) * ((((cbMtdParam._m0[23u].y * _669.y) - _656) * _306) + _656);
    float _697 = (_285.z * 4.5) * ((((cbMtdParam._m0[23u].z * _669.z) - _657) * _307) + _657);
    float _203[5];
    float _204[5];
    _203[0u] = cbMtdParam._m0[26u].w;
    _204[0u] = cbMtdParam._m0[27u].x;
    _203[1u] = cbMtdParam._m0[27u].y;
    _204[1u] = cbMtdParam._m0[27u].z;
    _203[2u] = cbMtdParam._m0[27u].w;
    _204[2u] = cbMtdParam._m0[28u].x;
    _203[3u] = cbMtdParam._m0[28u].y;
    _204[3u] = cbMtdParam._m0[28u].z;
    _203[4u] = cbMtdParam._m0[28u].w;
    _204[4u] = cbMtdParam._m0[29u].x;
    float _725 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    uint _727 = uint(int(isnan(4.0) ? _725 : (isnan(_725) ? 4.0 : min(_725, 4.0))));
    float _739 = ((cbMtdParam._m0[30u].x - _204[_727]) * _366) + _204[_727];
    float _744 = ((cbMtdParam._m0[30u].z - _739) * _337) + _739;
    float _752 = ((cbMtdParam._m0[31u].x - _744) * _304) + _744;
    vec4 _767 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w, _388));
    float _769 = _767.x;
    float _770 = _767.y;
    float _772 = _767.z + _203[_727];
    vec4 _784 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _271) + cbTextureTilingScale._m0[6u].w));
    float _792 = (((cbMtdParam._m0[29u].w - _772) + _784.z) * _366) + _772;
    vec4 _805 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _271) + cbTextureTilingScale._m0[8u].w));
    float _813 = (((cbMtdParam._m0[30u].y - _792) + _805.z) * _337) + _792;
    float _819 = ((((_324 * 2.0) * _813) - _813) * cbMtdParam._m0[25u].y) + _813;
    vec4 _831 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w));
    float _839 = (((_831.z + cbMtdParam._m0[30u].w) - _819) * _307) + _819;
    float _852 = ((_784.x - _769) * _366) + _769;
    float _853 = ((_784.y - _770) * _366) + _770;
    float _858 = ((_805.x - _852) * _337) + _852;
    float _859 = ((_805.y - _853) * _337) + _853;
    float _868 = ((((_831.x - _858) * _304) + _858) * 2.0) + (-1.0);
    float _869 = ((((_831.y - _859) * _306) + _859) * 2.0) + (-1.0);
    float _870 = dot(vec2(_868, _869), vec2(_868, _869));
    float _4283 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _875 = sqrt(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))));
    float _878 = _868 + (cbMtdParam._m0[25u].z * ((_320.x * 2.0) + (-1.0)));
    float _879 = _869 + (cbMtdParam._m0[25u].z * ((_320.y * 2.0) + (-1.0)));
    float _882 = fma(_875, _249 * NORMAL.x, fma(_879, _256 * TANGENT.x, (_242 * _234) * _878));
    float _885 = fma(_875, _249 * NORMAL.y, fma(_879, _256 * TANGENT.y, (_242 * _235) * _878));
    float _888 = fma(_875, _249 * NORMAL.z, fma(_879, _256 * TANGENT.z, (_242 * _236) * _878));
    float _892 = inversesqrt(dot(vec3(_882, _885, _888), vec3(_882, _885, _888)));
    float _893 = _892 * _882;
    float _894 = _892 * _885;
    float _895 = _892 * _888;
    float _4294 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _896 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _4305 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4316 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4327 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4338 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _900 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _916 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _966 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _956);
    float _967 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _956);
    float _968 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _956);
    float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
    float _973 = _966 * _972;
    float _974 = _967 * _972;
    float _975 = _968 * _972;
    vec4 _980 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _982 = _980.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1201 = sqrt(((_966 * _966) + (_967 * _967)) + (_968 * _968));
        float _1207 = (cbMatDynParam._m0[5u].x * _1201) + cbMatDynParam._m0[5u].y;
        float _4349 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1212 = (cbMatDynParam._m0[5u].z * _1201) + cbMatDynParam._m0[5u].w;
        float _4360 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) - _1208)) + _1208) < ((_982 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _993 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _994 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _996 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _998 = _996.w;
    float _1016 = fma(_895, cbSceneParam._m0[5u].z, fma(_894, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _893));
    float _1019 = fma(_895, cbSceneParam._m0[6u].z, fma(_894, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _893));
    float _1022 = fma(_895, cbSceneParam._m0[7u].z, fma(_894, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _893));
    vec4 _1024 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1035 = (((_1024.y - _896) + (_1024.w * _896)) * cbMtdParam._m0[3u].x) + _896;
    uint _1048 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1049 = _1048 + 9u;
    uint _1050 = _1049 + uint(cbMatDynParam._m0[0u].w);
    float _1056 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * cbInstanceData._m0[_1050].x;
    float _1057 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * cbInstanceData._m0[_1050].y;
    float _1058 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * cbInstanceData._m0[_1050].z;
    float _4371 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1059 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _4382 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1060 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _4393 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    vec4 _1062 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1067 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1078 = (((_1067.x - _900) + (_1067.w * _900)) * cbMtdParam._m0[3u].x) + _900;
    float _1091 = (cbMtdParam._m0[3u].x * (((_1059 * _998) - _1059) + _1062.x)) + _1059;
    float _1092 = (cbMtdParam._m0[3u].x * (((_1060 * _998) - _1060) + _1062.y)) + _1060;
    float _1093 = (cbMtdParam._m0[3u].x * (((_1061 * _998) - _1061) + _1062.z)) + _1061;
    float _1094 = 1.0 - _1078;
    float _1095 = _1094 * _1091;
    float _1096 = _1094 * _1092;
    float _1097 = _1094 * _1093;
    float _1102 = (_1091 + (-0.039999999105930328369140625)) * _1078;
    float _1103 = (_1092 + (-0.039999999105930328369140625)) * _1078;
    float _1104 = (_1093 + (-0.039999999105930328369140625)) * _1078;
    float _1105 = _1102 + 0.039999999105930328369140625;
    float _1107 = _1103 + 0.039999999105930328369140625;
    float _1108 = _1104 + 0.039999999105930328369140625;
    vec4 _1117 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _993, cbSceneParam._m0[86u].y * _994));
    float _1120 = _1117.x * TEXCOORD_5.w;
    float _1121 = dot(vec3(_893, _894, _895), vec3(_973, _974, _975));
    float _1124 = _1121 * 2.0;
    float _1128 = (_1124 * _893) - _973;
    float _1129 = (_1124 * _894) - _974;
    float _1130 = (_1124 * _895) - _975;
    float _1134 = abs(dot(vec3(_973, _974, _975), vec3(_893, _894, _895)));
    float _4404 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _1136 = sqrt(_1035);
    float _1147 = exp2((_1136 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1136 * 3.0));
    float _1153 = (1.0 - _1147) * ((_1136 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1154 = _1147 * _1136;
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1520;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1245 = fma(_1190, cbModelParam._m0[26u].z, fma(_1186, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1182));
        float _1249 = fma(_1190, cbModelParam._m0[27u].z, fma(_1186, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1182));
        float _1253 = fma(_1190, cbModelParam._m0[28u].z, fma(_1186, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1182));
        float _1278 = _1182 + _893;
        float _1279 = _1186 + _894;
        float _1280 = _1190 + _895;
        float _1290 = fma(_1280, cbModelParam._m0[26u].z, fma(_1279, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1278)) - _1245;
        float _1291 = fma(_1280, cbModelParam._m0[27u].z, fma(_1279, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1278)) - _1249;
        float _1292 = fma(_1280, cbModelParam._m0[28u].z, fma(_1279, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1278)) - _1253;
        float _1296 = inversesqrt(dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292)));
        float _1309 = ((_1296 * _1290) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1245 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1296 * _1291) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1249 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1296 * _1292) / cbModelParam._m0[34u].z) + ((((((_1253 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        float _1348 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1314.x + (-0.5));
        float _1350 = _1348 * (_1314.y + (-0.5));
        float _1351 = _1348 * (_1314.z + (-0.5));
        float _1358 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1321.x + (-0.5));
        float _1360 = _1358 * (_1321.y + (-0.5));
        float _1361 = _1358 * (_1321.z + (-0.5));
        float _1368 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1328.x + (-0.5));
        float _1370 = _1368 * (_1328.y + (-0.5));
        float _1371 = _1368 * (_1328.z + (-0.5));
        float _1378 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1335.x + (-0.5));
        float _1380 = _1378 * (_1335.y + (-0.5));
        float _1381 = _1378 * (_1335.z + (-0.5));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = _1349 * 0.5;
        float _1386 = _1359 * 0.5;
        float _1387 = _1369 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1402 = (dot(vec3(_893, _894, _895), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1412 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4452 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1414 + 1.0))) + _1419) * _1382;
        float _1429 = _1350 * 0.5;
        float _1430 = _1360 * 0.5;
        float _1431 = _1370 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_893, _894, _895), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4463 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4474 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4485 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_1456 + 1.0))) + _1461) * _1383;
        float _1471 = _1351 * 0.5;
        float _1472 = _1361 * 0.5;
        float _1473 = _1371 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_893, _894, _895), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4496 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4507 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4518 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_1498 + 1.0))) + _1503) * _1384;
        _1520 = _1351;
        _1522 = _1350;
        _1523 = _1349;
        _1524 = _1361;
        _1525 = _1360;
        _1526 = _1359;
        _1527 = _1371;
        _1528 = _1370;
        _1529 = _1369;
        _1530 = _1384;
        _1531 = _1383;
        _1532 = _1382;
        _1533 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1534 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1535 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
    }
    else
    {
        _1520 = _1521;
        _1522 = _1521;
        _1523 = _1521;
        _1524 = _1521;
        _1525 = _1521;
        _1526 = _1521;
        _1527 = _1521;
        _1528 = _1521;
        _1529 = _1521;
        _1530 = _1521;
        _1531 = _1521;
        _1532 = _1521;
        _1533 = 0.0;
        _1534 = 0.0;
        _1535 = 0.0;
    }
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1561 = fma(_1190, cbModelParam._m0[30u].z, fma(_1186, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1182));
        float _1565 = fma(_1190, cbModelParam._m0[31u].z, fma(_1186, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1182));
        float _1569 = fma(_1190, cbModelParam._m0[32u].z, fma(_1186, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1182));
        float _1592 = _1182 + _893;
        float _1593 = _1186 + _894;
        float _1594 = _1190 + _895;
        float _1604 = fma(_1594, cbModelParam._m0[30u].z, fma(_1593, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1592)) - _1561;
        float _1605 = fma(_1594, cbModelParam._m0[31u].z, fma(_1593, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1592)) - _1565;
        float _1606 = fma(_1594, cbModelParam._m0[32u].z, fma(_1593, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1592)) - _1569;
        float _1610 = inversesqrt(dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606)));
        float _1623 = ((_1610 * _1604) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1561 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1624 = ((_1610 * _1605) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1565 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1625 = ((_1610 * _1606) / cbModelParam._m0[35u].z) + ((((((_1569 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        float _1660 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1661 = _1660 * (_1627.x + (-0.5));
        float _1662 = _1660 * (_1627.y + (-0.5));
        float _1663 = _1660 * (_1627.z + (-0.5));
        float _1670 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1634.x + (-0.5));
        float _1672 = _1670 * (_1634.y + (-0.5));
        float _1673 = _1670 * (_1634.z + (-0.5));
        float _1680 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1681 = _1680 * (_1641.x + (-0.5));
        float _1682 = _1680 * (_1641.y + (-0.5));
        float _1683 = _1680 * (_1641.z + (-0.5));
        float _1690 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1691 = _1690 * (_1648.x + (-0.5));
        float _1692 = _1690 * (_1648.y + (-0.5));
        float _1693 = _1690 * (_1648.z + (-0.5));
        float _1694 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1695 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1696 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1697 = _1661 * 0.5;
        float _1698 = _1671 * 0.5;
        float _1699 = _1681 * 0.5;
        float _1700 = dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699));
        float _1705 = (_1700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1700);
        float _1713 = (dot(vec3(_893, _894, _895), vec3(_1705 * _1697, _1705 * _1698, _1705 * _1699)) + 1.0) * 0.5;
        float _4559 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1722 = sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699)) / (_1694 + 9.9999997473787516355514526367188e-06);
        float _4570 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _1724 = _1723 * 2.0;
        float _1728 = (1.0 - _1723) / (_1723 + 1.0);
        float _4581 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _1738 = ((((1.0 - _1729) * (_1724 + 2.0)) * exp2(log2(isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_1724 + 1.0))) + _1729) * _1694;
        float _1739 = _1662 * 0.5;
        float _1740 = _1672 * 0.5;
        float _1741 = _1682 * 0.5;
        float _1742 = dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741));
        float _1747 = (_1742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1742);
        float _1755 = (dot(vec3(_893, _894, _895), vec3(_1747 * _1739, _1747 * _1740, _1747 * _1741)) + 1.0) * 0.5;
        float _4592 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1764 = sqrt(((_1740 * _1740) + (_1739 * _1739)) + (_1741 * _1741)) / (_1695 + 9.9999997473787516355514526367188e-06);
        float _4603 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _1766 = _1765 * 2.0;
        float _1770 = (1.0 - _1765) / (_1765 + 1.0);
        float _4614 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _1780 = ((((1.0 - _1771) * (_1766 + 2.0)) * exp2(log2(isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_1766 + 1.0))) + _1771) * _1695;
        float _1781 = _1663 * 0.5;
        float _1782 = _1673 * 0.5;
        float _1783 = _1683 * 0.5;
        float _1784 = dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783));
        float _1789 = (_1784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1784);
        float _1797 = (dot(vec3(_893, _894, _895), vec3(_1789 * _1781, _1789 * _1782, _1789 * _1783)) + 1.0) * 0.5;
        float _4625 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1806 = sqrt(((_1782 * _1782) + (_1781 * _1781)) + (_1783 * _1783)) / (_1696 + 9.9999997473787516355514526367188e-06);
        float _4636 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _1808 = _1807 * 2.0;
        float _1812 = (1.0 - _1807) / (_1807 + 1.0);
        float _4647 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _1822 = ((((1.0 - _1813) * (_1808 + 2.0)) * exp2(log2(isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_1808 + 1.0))) + _1813) * _1696;
        _1830 = _1663;
        _1831 = _1662;
        _1832 = _1661;
        _1833 = _1673;
        _1834 = _1672;
        _1835 = _1671;
        _1836 = _1683;
        _1837 = _1682;
        _1838 = _1681;
        _1839 = _1696;
        _1840 = _1695;
        _1841 = _1694;
        _1842 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)));
        _1843 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)));
        _1844 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)));
    }
    else
    {
        _1830 = _1521;
        _1831 = _1521;
        _1832 = _1521;
        _1833 = _1521;
        _1834 = _1521;
        _1835 = _1521;
        _1836 = _1521;
        _1837 = _1521;
        _1838 = _1521;
        _1839 = _1521;
        _1840 = _1521;
        _1841 = _1521;
        _1842 = 0.0;
        _1843 = 0.0;
        _1844 = 0.0;
    }
    float _1854 = (cbModelParam._m0[1u].x * (_1842 - _1533)) + _1533;
    float _1855 = (cbModelParam._m0[1u].x * (_1843 - _1534)) + _1534;
    float _1856 = (cbModelParam._m0[1u].x * (_1844 - _1535)) + _1535;
    float _1877 = fma(_1856, cbSceneParam._m0[89u].z, fma(_1855, cbSceneParam._m0[89u].y, _1854 * cbSceneParam._m0[89u].x));
    float _1880 = fma(_1856, cbSceneParam._m0[90u].z, fma(_1855, cbSceneParam._m0[90u].y, _1854 * cbSceneParam._m0[90u].x));
    float _1883 = fma(_1856, cbSceneParam._m0[91u].z, fma(_1855, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1854));
    float _1898 = _1128 * 0.5;
    float _1899 = _1129 * 0.5;
    float _1900 = _1130 * 0.5;
    float _1901 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1832, _1835, _1838, _1841));
    float _1904 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1831, _1834, _1837, _1840));
    float _1907 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1830, _1833, _1836, _1839));
    float _1941;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1914 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1520, _1524, _1527, _1530));
        float _1918 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1522, _1525, _1528, _1531));
        float _1922 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1523, _1526, _1529, _1532));
        float _1929 = dot(vec4(cbModelParam._m0[39u]), vec4(_1898, _1899, _1900, 1.0));
        _1941 = dot(vec3(isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1929) ? 0.0 : (isnan(0.0) ? _1929 : max(0.0, _1929))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1941 = 1.0;
    }
    float _1952;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1943 = dot(vec4(cbModelParam._m0[40u]), vec4(_1898, _1899, _1900, 1.0));
        _1952 = dot(vec3(isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)), isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1943) ? 0.0 : (isnan(0.0) ? _1943 : max(0.0, _1943))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1952 = 1.0;
    }
    float _1956 = (_1952 * cbModelParam._m0[1u].x) + (_1941 * (1.0 - cbModelParam._m0[1u].x));
    float _1966 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1035);
    float _1967 = isnan(_1966) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1966 : min(cbModelParam._m0[25u].z, _1966));
    float _2047;
    float _2049;
    float _2051;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2014 = fma(_1190, cbModelParam._m0[13u].z, fma(_1186, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1182)) + cbModelParam._m0[13u].w;
        float _2018 = fma(_1190, cbModelParam._m0[14u].z, fma(_1186, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1182)) + cbModelParam._m0[14u].w;
        float _2022 = fma(_1190, cbModelParam._m0[15u].z, fma(_1186, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1182)) + cbModelParam._m0[15u].w;
        float _2025 = fma(_1130, cbModelParam._m0[13u].z, fma(_1129, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1128));
        float _2028 = fma(_1130, cbModelParam._m0[14u].z, fma(_1129, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1128));
        float _2031 = fma(_1130, cbModelParam._m0[15u].z, fma(_1129, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1128));
        float _2059;
        if (_2025 > 0.0)
        {
            _2059 = abs((1.0 - _2014) / _2025);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2014 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2059 = frontier_phi_17_15_ladder;
        }
        float _2230;
        if (_2028 > 0.0)
        {
            _2230 = abs((1.0 - _2018) / _2028);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2018 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2230 = frontier_phi_26_22_ladder;
        }
        float _2525;
        if (_2031 > 0.0)
        {
            _2525 = abs((1.0 - _2022) / _2031);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2022 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2525 = frontier_phi_38_33_ladder;
        }
        float _2527 = isnan(_2230) ? _2059 : (isnan(_2059) ? _2230 : min(_2059, _2230));
        float _2528 = isnan(_2525) ? _2527 : (isnan(_2527) ? _2525 : min(_2527, _2525));
        float _2532 = (_2528 * _2025) + _2014;
        float _2533 = (_2528 * _2028) + _2018;
        float _2534 = (_2528 * _2031) + _2022;
        float _2535 = _2528 * 9.9999997473787516355514526367188e-05;
        float _2537 = (-1.0) - _2535;
        float _2539 = _2535 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2534 > _2539) || ((_2534 < _2537) || ((_2533 > _2539) || ((_2533 < _2537) || ((_2532 < _2537) || (_2532 > _2539))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2679 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2534, cbModelParam._m0[9u].z, fma(_2533, cbModelParam._m0[9u].y, _2532 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2534, cbModelParam._m0[10u].z, fma(_2533, cbModelParam._m0[10u].y, _2532 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2534, cbModelParam._m0[11u].z, fma(_2533, cbModelParam._m0[11u].y, _2532 * cbModelParam._m0[11u].x))), _1967);
            frontier_phi_16_38_ladder = _2679.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2679.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2679.x * cbModelParam._m0[1u].y;
        }
        _2047 = frontier_phi_16_38_ladder_2;
        _2049 = frontier_phi_16_38_ladder_1;
        _2051 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2035 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1128, _1129, _1130), _1967);
        _2047 = _2035.x * cbModelParam._m0[1u].y;
        _2049 = _2035.y * cbModelParam._m0[1u].y;
        _2051 = _2035.z * cbModelParam._m0[1u].y;
    }
    float _2055 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1035);
    float _2056 = isnan(_2055) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2055 : min(cbModelParam._m0[25u].w, _2055));
    float _2145;
    float _2147;
    float _2149;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2109 = fma(_1190, cbModelParam._m0[21u].z, fma(_1186, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1182)) + cbModelParam._m0[21u].w;
        float _2113 = fma(_1190, cbModelParam._m0[22u].z, fma(_1186, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1182)) + cbModelParam._m0[22u].w;
        float _2117 = fma(_1190, cbModelParam._m0[23u].z, fma(_1186, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1182)) + cbModelParam._m0[23u].w;
        float _2120 = fma(_1130, cbModelParam._m0[21u].z, fma(_1129, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1128));
        float _2123 = fma(_1130, cbModelParam._m0[22u].z, fma(_1129, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1128));
        float _2126 = fma(_1130, cbModelParam._m0[23u].z, fma(_1129, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1128));
        float _2235;
        if (_2120 > 0.0)
        {
            _2235 = abs((1.0 - _2109) / _2120);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2120 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2109 + 1.0) / _2120);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2235 = frontier_phi_28_24_ladder;
        }
        float _2552;
        if (_2123 > 0.0)
        {
            _2552 = abs((1.0 - _2113) / _2123);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2123 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2113 + 1.0) / _2123);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2552 = frontier_phi_40_35_ladder;
        }
        float _2890;
        if (_2126 > 0.0)
        {
            _2890 = abs((1.0 - _2117) / _2126);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2117 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2890 = frontier_phi_50_47_ladder;
        }
        float _2892 = isnan(_2552) ? _2235 : (isnan(_2235) ? _2552 : min(_2235, _2552));
        float _2893 = isnan(_2890) ? _2892 : (isnan(_2892) ? _2890 : min(_2892, _2890));
        float _2897 = (_2893 * _2120) + _2109;
        float _2898 = (_2893 * _2123) + _2113;
        float _2899 = (_2893 * _2126) + _2117;
        float _2900 = _2893 * 9.9999997473787516355514526367188e-05;
        float _2901 = (-1.0) - _2900;
        float _2903 = _2900 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2899 > _2903) || ((_2899 < _2901) || ((_2898 > _2903) || ((_2898 < _2901) || ((_2897 < _2901) || (_2897 > _2903))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2899, cbModelParam._m0[17u].z, fma(_2898, cbModelParam._m0[17u].y, _2897 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2899, cbModelParam._m0[18u].z, fma(_2898, cbModelParam._m0[18u].y, _2897 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2899, cbModelParam._m0[19u].z, fma(_2898, cbModelParam._m0[19u].y, _2897 * cbModelParam._m0[19u].x))), _2056);
            frontier_phi_25_50_ladder = _3021.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3021.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3021.x * cbModelParam._m0[1u].z;
        }
        _2145 = frontier_phi_25_50_ladder_2;
        _2147 = frontier_phi_25_50_ladder_1;
        _2149 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2129 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1128, _1129, _1130), _2056);
        _2145 = _2129.x * cbModelParam._m0[1u].z;
        _2147 = _2129.y * cbModelParam._m0[1u].z;
        _2149 = _2129.z * cbModelParam._m0[1u].z;
    }
    float _2162 = (((_1153 * _1105) + _1154) * _1120) * ((cbModelParam._m0[1u].w * (_2145 - _2047)) + _2047);
    float _2164 = (((_1153 * _1107) + _1154) * _1120) * ((cbModelParam._m0[1u].w * (_2147 - _2049)) + _2049);
    float _2166 = (((_1153 * _1108) + _1154) * _1120) * ((cbModelParam._m0[1u].w * (_2149 - _2051)) + _2051);
    float _2169 = fma(_2166, cbSceneParam._m0[89u].z, fma(_2164, cbSceneParam._m0[89u].y, _2162 * cbSceneParam._m0[89u].x));
    float _2172 = fma(_2166, cbSceneParam._m0[90u].z, fma(_2164, cbSceneParam._m0[90u].y, _2162 * cbSceneParam._m0[90u].x));
    float _2175 = fma(_2166, cbSceneParam._m0[91u].z, fma(_2164, cbSceneParam._m0[91u].y, _2162 * cbSceneParam._m0[91u].x));
    float _2209 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2213 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2217 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2221 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2222 = _2209 / _2221;
    float _2223 = _2213 / _2221;
    float _2224 = _2217 / _2221;
    float _2371;
    float _2372;
    float _2373;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2251 = ((uint(_2224 > cbSceneParam._m0[59u].y) + uint(_2224 > cbSceneParam._m0[59u].x)) + uint(_2224 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2252 = _2251 + 43u;
        uint _2260 = _2251 + 44u;
        uint _2268 = _2251 + 45u;
        uint _2276 = _2251 + 46u;
        float _2287 = fma(_2221, cbSceneParam._m0[_2252].w, fma(_2217, cbSceneParam._m0[_2252].z, fma(_2213, cbSceneParam._m0[_2252].y, _2209 * cbSceneParam._m0[_2252].x)));
        float _2291 = fma(_2221, cbSceneParam._m0[_2260].w, fma(_2217, cbSceneParam._m0[_2260].z, fma(_2213, cbSceneParam._m0[_2260].y, _2209 * cbSceneParam._m0[_2260].x)));
        float _2299 = fma(_2221, cbSceneParam._m0[_2276].w, fma(_2217, cbSceneParam._m0[_2276].z, fma(_2213, cbSceneParam._m0[_2276].y, _2209 * cbSceneParam._m0[_2276].x)));
        float _2304 = cbSceneParam._m0[33u].z * _2299;
        float _2306 = cbSceneParam._m0[33u].w * _2299;
        float _2309 = fma(_2221, cbSceneParam._m0[_2268].w, fma(_2217, cbSceneParam._m0[_2268].z, fma(_2213, cbSceneParam._m0[_2268].y, _2209 * cbSceneParam._m0[_2268].x))) / _2299;
        float _2357 = (cbSceneParam._m0[33u].x - sqrt(((_2223 * _2223) + (_2222 * _2222)) + (_2224 * _2224))) * cbSceneParam._m0[33u].y;
        float _4773 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2364 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2304 + _2287) / _2299, (_2306 + _2291) / _2299), _2309), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2306 + _2287) / _2299, (_2291 - _2304) / _2299), _2309), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2287 - _2304) / _2299, (_2291 - _2306) / _2299), _2309), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2287 - _2306) / _2299, (_2304 + _2291) / _2299), _2309), 0.0)).x), vec4(0.25)));
        _2371 = 1.0 - (_2364 * cbSceneParam._m0[34u].x);
        _2372 = 1.0 - (_2364 * cbSceneParam._m0[34u].y);
        _2373 = 1.0 - (_2364 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2371 = 1.0;
        _2372 = 1.0;
        _2373 = 1.0;
    }
    float _2437;
    float _2439;
    float _2441;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2425 = fma(_2221, cbSceneParam._m0[63u].w, fma(_2217, cbSceneParam._m0[63u].z, fma(_2213, cbSceneParam._m0[63u].y, _2209 * cbSceneParam._m0[63u].x)));
        float _2426 = fma(_2221, cbSceneParam._m0[60u].w, fma(_2217, cbSceneParam._m0[60u].z, fma(_2213, cbSceneParam._m0[60u].y, _2209 * cbSceneParam._m0[60u].x))) / _2425;
        float _2427 = fma(_2221, cbSceneParam._m0[61u].w, fma(_2217, cbSceneParam._m0[61u].z, fma(_2213, cbSceneParam._m0[61u].y, _2209 * cbSceneParam._m0[61u].x))) / _2425;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2426 >= cbSceneParam._m0[64u].x) && (_2427 >= cbSceneParam._m0[64u].y)) && (_2426 <= cbSceneParam._m0[64u].z)) && (_2427 <= cbSceneParam._m0[64u].w))
        {
            float _2565 = fma(_2221, cbSceneParam._m0[62u].w, fma(_2217, cbSceneParam._m0[62u].z, fma(_2213, cbSceneParam._m0[62u].y, _2209 * cbSceneParam._m0[62u].x))) / _2425;
            float _2569 = isnan(cbSceneParam._m0[41u].w) ? _2565 : (isnan(_2565) ? cbSceneParam._m0[41u].w : max(_2565, cbSceneParam._m0[41u].w));
            float _2612 = (cbSceneParam._m0[33u].x - sqrt(((_2223 * _2223) + (_2222 * _2222)) + (_2224 * _2224))) * cbSceneParam._m0[33u].y;
            float _4789 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
            float _2619 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2426, cbSceneParam._m0[33u].w + _2427), _2569), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2426, _2427 - cbSceneParam._m0[33u].z), _2569), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2426 - cbSceneParam._m0[33u].z, _2427 - cbSceneParam._m0[33u].w), _2569), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2426 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2427), _2569), 0.0)).x), vec4(0.25)));
            float _2623 = 1.0 - (_2619 * cbSceneParam._m0[34u].x);
            float _2624 = 1.0 - (_2619 * cbSceneParam._m0[34u].y);
            float _2625 = 1.0 - (_2619 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2625) ? _2373 : (isnan(_2373) ? _2625 : min(_2373, _2625));
            frontier_phi_37_36_ladder_1 = isnan(_2624) ? _2372 : (isnan(_2372) ? _2624 : min(_2372, _2624));
            frontier_phi_37_36_ladder_2 = isnan(_2623) ? _2371 : (isnan(_2371) ? _2623 : min(_2371, _2623));
        }
        else
        {
            frontier_phi_37_36_ladder = _2373;
            frontier_phi_37_36_ladder_1 = _2372;
            frontier_phi_37_36_ladder_2 = _2371;
        }
        _2437 = frontier_phi_37_36_ladder_2;
        _2439 = frontier_phi_37_36_ladder_1;
        _2441 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2437 = _2371;
        _2439 = _2372;
        _2441 = _2373;
    }
    uvec4 _2446 = floatBitsToUint(cbInstanceData._m0[_1048 + 5u]);
    uint _2448 = _2446.x * 14u;
    uint _2449 = _2448 + 13u;
    float _2456 = _1120 + (-1.0);
    float _2461 = (cbLight._m0[_2449].x * _2456) + 1.0;
    float _2462 = (cbLight._m0[_2449].y * _2456) + 1.0;
    float _2463 = (cbLight._m0[_2449].z * _2456) + 1.0;
    float _2464 = (cbLight._m0[_2449].w * _2456) + 1.0;
    uint _2465 = _2448 + 5u;
    float _2471 = isnan(1.0) ? _2462 : (isnan(_2462) ? 1.0 : min(_2462, 1.0));
    uint _2475 = _2448 + 4u;
    float _2484 = isnan(1.0) ? _2461 : (isnan(_2461) ? 1.0 : min(_2461, 1.0));
    uint _2488 = _2448 | 1u;
    float _2499 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_893, _894, _895));
    float _2502 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_893, _894, _895));
    float _4825 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _4836 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2507 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * 0.3183098733425140380859375;
    float _2509 = (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * 0.3183098733425140380859375;
    float _2516 = ((cbLight._m0[_2465].x * _2471) * _2509) + (((cbLight._m0[_2475].x * _2437) * _2484) * _2507);
    float _2517 = ((_2471 * cbLight._m0[_2465].y) * _2509) + (((cbLight._m0[_2475].y * _2439) * _2484) * _2507);
    float _2518 = ((_2471 * cbLight._m0[_2465].z) * _2509) + (((cbLight._m0[_2475].z * _2441) * _2484) * _2507);
    uvec4 _2522 = floatBitsToUint(cbLight._m0[_2448 + 12u]);
    bool _2524 = _2522.x == 0u;
    float _2626;
    float _2628;
    float _2630;
    if (_2524)
    {
        _2626 = _2516;
        _2628 = _2517;
        _2630 = _2518;
    }
    else
    {
        uint _2634 = _2448 + 6u;
        float _2650 = (dot(vec3(cbLight._m0[_2448 + 2u].xyz), vec3(_893, _894, _895)) * 0.5) + 0.5;
        float _2651 = _2650 * _2650;
        float _4847 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2652 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
        float _2653 = isnan(1.0) ? _2463 : (isnan(_2463) ? 1.0 : min(_2463, 1.0));
        _2626 = (((cbLight._m0[_2634].x * 0.3183098733425140380859375) * _2652) * _2653) + _2516;
        _2628 = (((cbLight._m0[_2634].y * 0.3183098733425140380859375) * _2652) * _2653) + _2517;
        _2630 = (((cbLight._m0[_2634].z * 0.3183098733425140380859375) * _2652) * _2653) + _2518;
    }
    bool _2633 = _2522.y == 0u;
    float _2688;
    float _2690;
    float _2692;
    if (_2633)
    {
        _2688 = _2626;
        _2690 = _2628;
        _2692 = _2630;
    }
    else
    {
        uint _2861 = _2448 + 7u;
        float _2877 = (dot(vec3(cbLight._m0[_2448 + 3u].xyz), vec3(_893, _894, _895)) * 0.5) + 0.5;
        float _2878 = _2877 * _2877;
        float _4863 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2879 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2880 = isnan(1.0) ? _2464 : (isnan(_2464) ? 1.0 : min(_2464, 1.0));
        _2688 = (((cbLight._m0[_2861].x * 0.3183098733425140380859375) * _2879) * _2880) + _2626;
        _2690 = (((cbLight._m0[_2861].y * 0.3183098733425140380859375) * _2879) * _2880) + _2628;
        _2692 = (((cbLight._m0[_2861].z * 0.3183098733425140380859375) * _2879) * _2880) + _2630;
    }
    uint _2695 = _2448 + 8u;
    float _2708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2448].w)) * _1035) * 0.949999988079071044921875);
    float _2709 = _2708 * _2708;
    float _2710 = cbLight._m0[_2448].x + _973;
    float _2711 = cbLight._m0[_2448].y + _974;
    float _2712 = cbLight._m0[_2448].z + _975;
    float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
    float _2717 = _2716 * _2710;
    float _2718 = _2716 * _2711;
    float _2719 = _2716 * _2712;
    float _2720 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2448].xyz));
    float _4879 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2723 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
    float _4890 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _2724 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
    float _2725 = dot(vec3(_893, _894, _895), vec3(_2717, _2718, _2719));
    float _4901 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2728 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
    float _2729 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_2717, _2718, _2719));
    float _4912 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2733 = _2709 * _2709;
    float _2737 = ((_2728 * _2728) * (_2733 + (-1.0))) + 1.0;
    float _2745 = exp2(log2(1.0 - (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0)))) * 5.0);
    float _2746 = 0.959999978542327880859375 - _1102;
    float _2748 = 0.959999978542327880859375 - _1103;
    float _2749 = 0.959999978542327880859375 - _1104;
    float _2756 = 1.0 - _2709;
    float _2767 = (0.5 / (((_2724 * ((_2723 * _2756) + _2709)) + 9.9999999392252902907785028219223e-09) + (((_2724 * _2756) + _2709) * _2723))) * _2723;
    float _4923 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
    float _2769 = (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2733 / ((_2737 * _2737) * 3.141590118408203125));
    uint _2783 = _2448 + 9u;
    float _2794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2488].w)) * _1035) * 0.949999988079071044921875);
    float _2795 = _2794 * _2794;
    float _2796 = cbLight._m0[_2488].x + _973;
    float _2797 = cbLight._m0[_2488].y + _974;
    float _2798 = cbLight._m0[_2488].z + _975;
    float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
    float _2803 = _2802 * _2796;
    float _2804 = _2802 * _2797;
    float _2805 = _2802 * _2798;
    float _2806 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2488].xyz));
    float _4934 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
    float _2809 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
    float _2810 = dot(vec3(_893, _894, _895), vec3(_2803, _2804, _2805));
    float _4945 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
    float _2813 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
    float _2814 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_2803, _2804, _2805));
    float _4956 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
    float _2818 = _2795 * _2795;
    float _2822 = ((_2813 * _2813) * (_2818 + (-1.0))) + 1.0;
    float _2829 = exp2(log2(1.0 - (isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0)))) * 5.0);
    float _2836 = 1.0 - _2795;
    float _2846 = (0.5 / (((_2724 * ((_2809 * _2836) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2724 * _2836) + _2795) * _2809))) * _2809;
    float _4967 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
    float _2848 = (isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0))) * (_2818 / ((_2822 * _2822) * 3.141590118408203125));
    float _2858 = (((((_2829 * _2746) + _1105) * cbLight._m0[_2783].x) * _2848) * _2471) + ((((cbLight._m0[_2695].x * _2437) * ((_2745 * _2746) + _1105)) * _2769) * _2484);
    float _2859 = (((((_2829 * _2748) + _1107) * cbLight._m0[_2783].y) * _2848) * _2471) + ((((cbLight._m0[_2695].y * _2439) * ((_2745 * _2748) + _1107)) * _2769) * _2484);
    float _2860 = (((((_2829 * _2749) + _1108) * cbLight._m0[_2783].z) * _2848) * _2471) + ((((cbLight._m0[_2695].z * _2441) * ((_2745 * _2749) + _1108)) * _2769) * _2484);
    float _2916;
    float _2918;
    float _2920;
    if (_2524)
    {
        _2916 = _2858;
        _2918 = _2859;
        _2920 = _2860;
    }
    else
    {
        uint _2922 = _2448 + 2u;
        uint _2926 = _2448 + 10u;
        float _2940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2922].w)) * _1035) * 0.949999988079071044921875);
        float _2941 = _2940 * _2940;
        float _2942 = cbLight._m0[_2922].x + _973;
        float _2943 = cbLight._m0[_2922].y + _974;
        float _2944 = cbLight._m0[_2922].z + _975;
        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
        float _2949 = _2948 * _2942;
        float _2950 = _2948 * _2943;
        float _2951 = _2948 * _2944;
        float _2952 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2922].xyz));
        float _4978 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2955 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
        float _2956 = dot(vec3(_893, _894, _895), vec3(_2949, _2950, _2951));
        float _4989 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2959 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
        float _2960 = dot(vec3(cbLight._m0[_2922].xyz), vec3(_2949, _2950, _2951));
        float _5000 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2964 = _2941 * _2941;
        float _2968 = ((_2959 * _2959) * (_2964 + (-1.0))) + 1.0;
        float _2975 = exp2(log2(1.0 - (isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0)))) * 5.0);
        float _2982 = 1.0 - _2941;
        float _2992 = (0.5 / (((_2724 * ((_2955 * _2982) + _2941)) + 9.9999999392252902907785028219223e-09) + (((_2724 * _2982) + _2941) * _2955))) * _2955;
        float _5011 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        float _2994 = (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * (_2964 / ((_2968 * _2968) * 3.141590118408203125));
        float _2995 = isnan(1.0) ? _2463 : (isnan(_2463) ? 1.0 : min(_2463, 1.0));
        _2916 = (((((_2975 * _2746) + _1105) * cbLight._m0[_2926].x) * _2994) * _2995) + _2858;
        _2918 = (((((_2975 * _2748) + _1107) * cbLight._m0[_2926].y) * _2994) * _2995) + _2859;
        _2920 = (((((_2975 * _2749) + _1108) * cbLight._m0[_2926].z) * _2994) * _2995) + _2860;
    }
    float _3026;
    float _3028;
    float _3030;
    if (_2633)
    {
        _3026 = _2916;
        _3028 = _2918;
        _3030 = _2920;
    }
    else
    {
        uint _3037 = _2448 + 3u;
        uint _3041 = _2448 + 11u;
        float _3055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3037].w)) * _1035) * 0.949999988079071044921875);
        float _3056 = _3055 * _3055;
        float _3057 = cbLight._m0[_3037].x + _973;
        float _3058 = cbLight._m0[_3037].y + _974;
        float _3059 = cbLight._m0[_3037].z + _975;
        float _3063 = inversesqrt(dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059)));
        float _3064 = _3063 * _3057;
        float _3065 = _3063 * _3058;
        float _3066 = _3063 * _3059;
        float _3067 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_3037].xyz));
        float _5027 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
        float _3070 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
        float _3071 = dot(vec3(_893, _894, _895), vec3(_3064, _3065, _3066));
        float _5038 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
        float _3074 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
        float _3075 = dot(vec3(cbLight._m0[_3037].xyz), vec3(_3064, _3065, _3066));
        float _5049 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
        float _3079 = _3056 * _3056;
        float _3083 = ((_3074 * _3074) * (_3079 + (-1.0))) + 1.0;
        float _3090 = exp2(log2(1.0 - (isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0)))) * 5.0);
        float _3097 = 1.0 - _3056;
        float _3107 = (0.5 / (((_2724 * ((_3070 * _3097) + _3056)) + 9.9999999392252902907785028219223e-09) + (((_2724 * _3097) + _3056) * _3070))) * _3070;
        float _5060 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
        float _3109 = (isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0))) * (_3079 / ((_3083 * _3083) * 3.141590118408203125));
        float _3110 = isnan(1.0) ? _2464 : (isnan(_2464) ? 1.0 : min(_2464, 1.0));
        _3026 = (((((_3090 * _2746) + _1105) * cbLight._m0[_3041].x) * _3109) * _3110) + _2916;
        _3028 = (((((_3090 * _2748) + _1107) * cbLight._m0[_3041].y) * _3109) * _3110) + _2918;
        _3030 = (((((_3090 * _2749) + _1108) * cbLight._m0[_3041].z) * _3109) * _3110) + _2920;
    }
    float _3176;
    float _3178;
    float _3180;
    float _3182;
    float _3184;
    float _3186;
    if (_2446.y == 0u)
    {
        uvec4 _3131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3132 = _3131.x;
        uint _3143 = uint((float(_3131.y) * floor(float(uint(cbSceneParam._m0[85u].y * _994) / _3132))) + floor(float(uint(cbSceneParam._m0[85u].x * _993) / _3132)));
        float _3153 = (log2(_2224 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3154 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
        uint _3157 = uint(isnan(14.0) ? _3154 : (isnan(_3154) ? 14.0 : min(_3154, 14.0)));
        uvec4 _3162 = texelFetch(g_lightClusterGridBuffer, int(((_3157 << 2u) + (_3143 << 6u)) >> 2u));
        uint _3163 = _3162.x;
        uint _3164 = _3131.z;
        float _3243;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        float _3253;
        if (((((1u << ((_3164 >> 4u) & 15u)) + 4294967295u) & _3163) == 0u) || ((_3164 & 240u) == 0u))
        {
            _3243 = 0.0;
            _3245 = 0.0;
            _3247 = 0.0;
            _3249 = 0.0;
            _3251 = 0.0;
            _3253 = 0.0;
        }
        else
        {
            float _3244;
            float _3246;
            float _3248;
            float _3250;
            float _3252;
            float _3254;
            float _3396 = 0.0;
            float _3397 = 0.0;
            float _3398 = 0.0;
            float _3399 = 0.0;
            float _3400 = 0.0;
            float _3401 = 0.0;
            uint _3402 = 0u;
            uint _3411;
            bool _3412;
            for (;;)
            {
                _3411 = texelFetch(g_lightClassification, int((((_3157 << 5u) + (_3143 << 9u)) + (_3402 << 2u)) >> 2u)).x;
                _3412 = _3411 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3412)
                {
                    frontier_phi_71_pred = _3401;
                    frontier_phi_71_pred_1 = _3400;
                    frontier_phi_71_pred_2 = _3399;
                    frontier_phi_71_pred_3 = _3398;
                    frontier_phi_71_pred_4 = _3397;
                    frontier_phi_71_pred_5 = _3396;
                }
                else
                {
                    float _3541;
                    float _3542;
                    float _3543;
                    float _3544;
                    float _3545;
                    float _3546;
                    uint _3547;
                    _3541 = _3396;
                    _3542 = _3397;
                    _3543 = _3398;
                    _3544 = _3399;
                    _3545 = _3400;
                    _3546 = _3401;
                    _3547 = _3411;
                    float _3468;
                    float _3469;
                    float _3470;
                    float _3471;
                    float _3472;
                    float _3473;
                    for (;;)
                    {
                        uint _3551 = uint(findLSB(_3547)) + (_3402 << 5u);
                        uint _3548 = (_3547 + 4294967295u) & _3547;
                        uint _3553 = _3551 * 48u;
                        vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3553)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 3u)).x));
                        uint _3573 = (_3551 * 48u) + 4u;
                        vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3573)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 3u)).x));
                        uint _3592 = (_3551 * 48u) + 8u;
                        vec3 _3603 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3592)).x, texelFetch(g_PointLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3592 + 2u)).x));
                        float _3607 = _3567.x - _2222;
                        float _3608 = _3567.y - _2223;
                        float _3609 = _3567.z - _2224;
                        float _3610 = dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609));
                        float _3613 = inversesqrt(_3610);
                        float _3614 = _3613 * _3607;
                        float _3615 = _3613 * _3608;
                        float _3616 = _3613 * _3609;
                        float _3617 = dot(vec3(_1016, _1019, _1022), vec3(_3614, _3615, _3616));
                        float _3622 = 1.0 - (_3610 * _3567.w);
                        float _5086 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                        float _3623 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
                        float _3624 = sqrt(_3610) * _3586.w;
                        float _3627 = 1.39999997615814208984375 / (_3624 + 1.39999997615814208984375);
                        float _3628 = _3627 * _3627;
                        float _3631 = ((1.0 - _3628) * _3617) + _3628;
                        float _3634 = _3624 * _3624;
                        float _3638 = ((isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0))) * _3623) / ((_3634 * 0.699999988079071044921875) + 1.0);
                        float _3642 = (-0.0) - _2222;
                        float _3643 = (-0.0) - _2223;
                        float _3644 = (-0.0) - _2224;
                        float _3648 = inversesqrt(dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644)));
                        float _3649 = _3648 * _3642;
                        float _3650 = _3648 * _3643;
                        float _3651 = _3648 * _3644;
                        float _3658 = exp2(log2(1.0 / ((_3634 * 3.5) + 5.0)) * 0.25);
                        float _3659 = 1.0 - _1136;
                        float _3666 = sqrt(1.0 - ((1.0 - (_3659 * _3659)) * (1.0 - (_3658 * _3658))));
                        float _3667 = _3666 * _3666;
                        float _3668 = _3667 * _3667;
                        float _3669 = _3649 + _3614;
                        float _3670 = _3650 + _3615;
                        float _3671 = _3651 + _3616;
                        float _3675 = inversesqrt(dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671)));
                        float _3679 = dot(vec3(_1016, _1019, _1022), vec3(_3649, _3650, _3651));
                        float _5102 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                        float _3682 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
                        float _3683 = dot(vec3(_1016, _1019, _1022), vec3(_3675 * _3669, _3675 * _3670, _3675 * _3671));
                        float _5113 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                        float _3686 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
                        float _3690 = ((_3686 * _3686) * (_3668 + (-1.0))) + 1.0;
                        float _3691 = _3627 * _3667;
                        float _3692 = _3691 * _3691;
                        float _3695 = ((1.0 - _3692) * _3617) + _3692;
                        float _5124 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                        float _3696 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
                        float _3697 = 1.0 - _3667;
                        float _3707 = (0.5 / (((_3696 * ((_3682 * _3697) + _3667)) + 9.9999999392252902907785028219223e-09) + (((_3696 * _3697) + _3667) * _3682))) * _3696;
                        float _5135 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                        float _3718 = (((_3668 * 3.1415927410125732421875) * (isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0)))) / ((_3690 * _3690) * ((_3634 * 2.1991131305694580078125) + 3.141590118408203125))) * _3623;
                        _3471 = (_3638 * _3586.x) + _3544;
                        _3472 = (_3638 * _3586.y) + _3545;
                        _3473 = (_3638 * _3586.z) + _3546;
                        _3468 = (_3718 * _3603.x) + _3541;
                        _3469 = (_3718 * _3603.y) + _3542;
                        _3470 = (_3718 * _3603.z) + _3543;
                        if (_3548 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3541 = _3468;
                            _3542 = _3469;
                            _3543 = _3470;
                            _3544 = _3471;
                            _3545 = _3472;
                            _3546 = _3473;
                            _3547 = _3548;
                        }
                    }
                    frontier_phi_71_pred = _3473;
                    frontier_phi_71_pred_1 = _3472;
                    frontier_phi_71_pred_2 = _3471;
                    frontier_phi_71_pred_3 = _3470;
                    frontier_phi_71_pred_4 = _3469;
                    frontier_phi_71_pred_5 = _3468;
                }
                _3254 = frontier_phi_71_pred;
                _3252 = frontier_phi_71_pred_1;
                _3250 = frontier_phi_71_pred_2;
                _3248 = frontier_phi_71_pred_3;
                _3246 = frontier_phi_71_pred_4;
                _3244 = frontier_phi_71_pred_5;
                uint _3403 = _3402 + 1u;
                if (_3403 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3396 = _3244;
                    _3397 = _3246;
                    _3398 = _3248;
                    _3399 = _3250;
                    _3400 = _3252;
                    _3401 = _3254;
                    _3402 = _3403;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3243 = _3244;
            _3245 = _3246;
            _3247 = _3248;
            _3249 = _3250;
            _3251 = _3252;
            _3253 = _3254;
        }
        uvec4 _3257 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3258 = _3257.z;
        uint _3260 = (_3258 >> 8u) & 15u;
        float _3364;
        float _3366;
        float _3368;
        float _3370;
        float _3372;
        float _3374;
        if (((4294967295u << _3260) & _3163) == 0u)
        {
            _3364 = _3243;
            _3366 = _3245;
            _3368 = _3247;
            _3370 = _3249;
            _3372 = _3251;
            _3374 = _3253;
        }
        else
        {
            float _3389 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
            float _3390 = _3389 * _2222;
            float _3391 = _3389 * _2223;
            float _3392 = _3389 * _2224;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3260 < ((_3258 >> 12u) & 15u))
            {
                float _3365;
                float _3367;
                float _3369;
                float _3371;
                float _3373;
                float _3375;
                float _3524 = _3243;
                float _3525 = _3245;
                float _3526 = _3247;
                float _3527 = _3249;
                float _3528 = _3251;
                float _3529 = _3253;
                uint _3530 = _3260;
                uint _3539;
                bool _3540;
                for (;;)
                {
                    _3539 = texelFetch(g_lightClassification, int((((_3157 << 5u) + (_3143 << 9u)) + (_3530 << 2u)) >> 2u)).x;
                    _3540 = _3539 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3540)
                    {
                        frontier_phi_82_pred = _3529;
                        frontier_phi_82_pred_1 = _3528;
                        frontier_phi_82_pred_2 = _3527;
                        frontier_phi_82_pred_3 = _3526;
                        frontier_phi_82_pred_4 = _3525;
                        frontier_phi_82_pred_5 = _3524;
                    }
                    else
                    {
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _4025;
                        float _4026;
                        float _4027;
                        float _4028;
                        float _4029;
                        float _4030;
                        float _3745 = _3524;
                        float _3746 = _3525;
                        float _3747 = _3526;
                        float _3748 = _3527;
                        float _3749 = _3528;
                        float _3750 = _3529;
                        uint _3751 = _3539;
                        uint _3752;
                        vec4 _3777;
                        float _3778;
                        vec4 _3793;
                        vec3 _3805;
                        vec4 _3820;
                        vec4 _3835;
                        float _3881;
                        bool _3882;
                        for (;;)
                        {
                            uint _3762 = ((_3530 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3751));
                            _3752 = (_3751 + 4294967295u) & _3751;
                            uint _3764 = _3762 * 40u;
                            _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            _3778 = _3777.w;
                            uint _3780 = (_3762 * 40u) + 4u;
                            _3793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 3u)).x));
                            uint _3795 = (_3762 * 40u) + 8u;
                            _3805 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x));
                            uint _3807 = (_3762 * 40u) + 16u;
                            _3820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 3u)).x));
                            uint _3822 = (_3762 * 40u) + 20u;
                            _3835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 3u)).x));
                            uint _3837 = (_3762 * 40u) + 24u;
                            vec4 _3850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 3u)).x));
                            uint _3856 = (_3762 * 40u) + 28u;
                            vec4 _3869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 3u)).x));
                            _3881 = fma(_2224, _3869.z, fma(_2223, _3869.y, _3869.x * _2222)) + _3869.w;
                            _3882 = !((fma(_2224, _3850.z, fma(_2223, _3850.y, _3850.x * _2222)) + _3850.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3882)
                            {
                                float _3909 = _3777.x - _2222;
                                float _3910 = _3777.y - _2223;
                                float _3911 = _3777.z - _2224;
                                float _3912 = dot(vec3(_3909, _3910, _3911), vec3(_3909, _3910, _3911));
                                float _3915 = inversesqrt(_3912);
                                float _3916 = _3915 * _3909;
                                float _3917 = _3915 * _3910;
                                float _3918 = _3915 * _3911;
                                float _3922 = 1.0 - (_3912 / (_3778 * _3778));
                                float _5146 = isnan(0.0) ? _3922 : (isnan(_3922) ? 0.0 : max(_3922, 0.0));
                                float _3923 = isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0));
                                float _3927 = sqrt(_3912) * _3793.w;
                                float _3929 = 1.39999997615814208984375 / (_3927 + 1.39999997615814208984375);
                                float _3930 = _3929 * _3929;
                                float _3933 = ((1.0 - _3930) * dot(vec3(_3916, _3917, _3918), vec3(_1016, _1019, _1022))) + _3930;
                                float _3936 = _3927 * _3927;
                                float _3940 = (fma(_2224, _3820.z, fma(_2223, _3820.y, _3820.x * _2222)) + _3820.w) / _3881;
                                float _3941 = (fma(_2224, _3835.z, fma(_2223, _3835.y, _3835.x * _2222)) + _3835.w) / _3881;
                                float _3945 = 1.0 - dot(vec2(_3940, _3941), vec2(_3940, _3941));
                                float _5162 = isnan(0.0) ? _3945 : (isnan(_3945) ? 0.0 : max(_3945, 0.0));
                                float _3946 = isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0));
                                float _3947 = _3946 * (((isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0))) * _3923) / ((_3936 * 0.699999988079071044921875) + 1.0));
                                float _3959 = exp2(log2(1.0 / ((_3936 * 3.5) + 5.0)) * 0.25);
                                float _3960 = 1.0 - _1136;
                                float _3967 = sqrt(1.0 - ((1.0 - (_3960 * _3960)) * (1.0 - (_3959 * _3959))));
                                float _3968 = _3967 * _3967;
                                float _3969 = _3968 * _3968;
                                float _3970 = _3916 - _3390;
                                float _3971 = _3917 - _3391;
                                float _3972 = _3918 - _3392;
                                float _3976 = inversesqrt(dot(vec3(_3970, _3971, _3972), vec3(_3970, _3971, _3972)));
                                float _3980 = dot(vec3(_1016, _1019, _1022), vec3((-0.0) - _3390, (-0.0) - _3391, (-0.0) - _3392));
                                float _5173 = isnan(0.0) ? _3980 : (isnan(_3980) ? 0.0 : max(_3980, 0.0));
                                float _3983 = isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0));
                                float _3984 = dot(vec3(_1016, _1019, _1022), vec3(_3976 * _3970, _3976 * _3971, _3976 * _3972));
                                float _5184 = isnan(0.0) ? _3984 : (isnan(_3984) ? 0.0 : max(_3984, 0.0));
                                float _3987 = isnan(1.0) ? _5184 : (isnan(_5184) ? 1.0 : min(_5184, 1.0));
                                float _3991 = ((_3987 * _3987) * (_3969 + (-1.0))) + 1.0;
                                float _3992 = _3929 * _3968;
                                float _3993 = _3992 * _3992;
                                float _3999 = ((1.0 - _3993) * dot(vec3(_1016, _1019, _1022), vec3(_3916, _3917, _3918))) + _3993;
                                float _5195 = isnan(0.0) ? _3999 : (isnan(_3999) ? 0.0 : max(_3999, 0.0));
                                float _4000 = isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0));
                                float _4001 = 1.0 - _3968;
                                float _4011 = (0.5 / (((_4000 * ((_3983 * _4001) + _3968)) + 9.9999999392252902907785028219223e-09) + (((_4000 * _4001) + _3968) * _3983))) * _4000;
                                float _5206 = isnan(0.0) ? _4011 : (isnan(_4011) ? 0.0 : max(_4011, 0.0));
                                float _4021 = (_3946 * _3923) * (((_3969 * 3.1415927410125732421875) * (isnan(1.0) ? _5206 : (isnan(_5206) ? 1.0 : min(_5206, 1.0)))) / ((_3991 * _3991) * ((_3936 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3947 * _3793.z;
                                frontier_phi_88_pred_1 = _3947 * _3793.y;
                                frontier_phi_88_pred_2 = _3947 * _3793.x;
                                frontier_phi_88_pred_3 = _4021 * _3805.z;
                                frontier_phi_88_pred_4 = _4021 * _3805.y;
                                frontier_phi_88_pred_5 = _4021 * _3805.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4030 = frontier_phi_88_pred;
                            _4029 = frontier_phi_88_pred_1;
                            _4028 = frontier_phi_88_pred_2;
                            _4027 = frontier_phi_88_pred_3;
                            _4026 = frontier_phi_88_pred_4;
                            _4025 = frontier_phi_88_pred_5;
                            _3735 = _4028 + _3748;
                            _3736 = _4029 + _3749;
                            _3737 = _4030 + _3750;
                            _3732 = _4025 + _3745;
                            _3733 = _4026 + _3746;
                            _3734 = _4027 + _3747;
                            if (_3752 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3745 = _3732;
                                _3746 = _3733;
                                _3747 = _3734;
                                _3748 = _3735;
                                _3749 = _3736;
                                _3750 = _3737;
                                _3751 = _3752;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3737;
                        frontier_phi_82_pred_1 = _3736;
                        frontier_phi_82_pred_2 = _3735;
                        frontier_phi_82_pred_3 = _3734;
                        frontier_phi_82_pred_4 = _3733;
                        frontier_phi_82_pred_5 = _3732;
                    }
                    _3375 = frontier_phi_82_pred;
                    _3373 = frontier_phi_82_pred_1;
                    _3371 = frontier_phi_82_pred_2;
                    _3369 = frontier_phi_82_pred_3;
                    _3367 = frontier_phi_82_pred_4;
                    _3365 = frontier_phi_82_pred_5;
                    uint _3531 = _3530 + 1u;
                    if (_3531 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3524 = _3365;
                        _3525 = _3367;
                        _3526 = _3369;
                        _3527 = _3371;
                        _3528 = _3373;
                        _3529 = _3375;
                        _3530 = _3531;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3371;
                frontier_phi_63_64_ladder_1 = _3375;
                frontier_phi_63_64_ladder_2 = _3373;
                frontier_phi_63_64_ladder_3 = _3369;
                frontier_phi_63_64_ladder_4 = _3367;
                frontier_phi_63_64_ladder_5 = _3365;
            }
            else
            {
                frontier_phi_63_64_ladder = _3249;
                frontier_phi_63_64_ladder_1 = _3253;
                frontier_phi_63_64_ladder_2 = _3251;
                frontier_phi_63_64_ladder_3 = _3247;
                frontier_phi_63_64_ladder_4 = _3245;
                frontier_phi_63_64_ladder_5 = _3243;
            }
            _3364 = frontier_phi_63_64_ladder_5;
            _3366 = frontier_phi_63_64_ladder_4;
            _3368 = frontier_phi_63_64_ladder_3;
            _3370 = frontier_phi_63_64_ladder;
            _3372 = frontier_phi_63_64_ladder_2;
            _3374 = frontier_phi_63_64_ladder_1;
        }
        float _3379 = isnan(1.0) ? _1120 : (isnan(_1120) ? 1.0 : min(_1120, 1.0));
        _3176 = (_3379 * _3370) + _2688;
        _3178 = (_3379 * _3372) + _2690;
        _3180 = (_3379 * _3374) + _2692;
        _3182 = ((_3364 * _1105) * _3379) + _3026;
        _3184 = ((_3366 * _1107) * _3379) + _3028;
        _3186 = ((_3368 * _1108) * _3379) + _3030;
    }
    else
    {
        _3176 = _2688;
        _3178 = _2690;
        _3180 = _2692;
        _3182 = _3026;
        _3184 = _3028;
        _3186 = _3030;
    }
    float _5222 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _5233 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _5244 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _3203 = ((isnan(1.0) ? _5222 : (isnan(_5222) ? 1.0 : min(_5222, 1.0))) * (_3176 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1120))) + ((_3182 + ((isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0))) * _1956)) * cbPerFrame._m0[3u].x);
    float _3204 = ((isnan(1.0) ? _5233 : (isnan(_5233) ? 1.0 : min(_5233, 1.0))) * (_3178 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1120))) + ((_3184 + ((isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0))) * _1956)) * cbPerFrame._m0[3u].x);
    float _3205 = ((isnan(1.0) ? _5244 : (isnan(_5244) ? 1.0 : min(_5244, 1.0))) * (_3180 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1120))) + ((_3186 + ((isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0))) * _1956)) * cbPerFrame._m0[3u].x);
    uint _3206 = _1048 + 6u;
    float _3214 = _993 / cbSceneParam._m0[86u].x;
    float _3215 = _994 / cbSceneParam._m0[86u].y;
    vec4 _3229 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3214, _3215, (log2((isnan(cbSceneParam._m0[77u].w) ? _916 : (isnan(_916) ? cbSceneParam._m0[77u].w : min(_916, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3231 = _3229.x;
    float _3232 = _3229.y;
    float _3233 = _3229.z;
    float _3234 = _3229.w;
    float _3306;
    float _3308;
    float _3310;
    float _3312;
    if (_916 > cbSceneParam._m0[78u].w)
    {
        float _3268 = isnan(_916) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _916 : min(cbSceneParam._m0[80u].w, _916));
        float _3269 = _3268 / _916;
        float _3280 = _3269 * _966;
        float _3281 = _967 * _3269;
        float _3282 = (-0.0) - _3281;
        float _3284 = _3269 * _968;
        float _3286 = (cbSceneParam._m0[77u].w * _3282) / _3268;
        float _3287 = _3286 + cbSceneParam._m0[79u].w;
        float _3288 = cbSceneParam._m0[79u].w - _3281;
        float _3294 = sqrt(((_3280 * _3280) + (_3281 * _3281)) + (_3284 * _3284));
        float _3297 = (1.0 - (cbSceneParam._m0[77u].w / _3268)) * _3294;
        float _3302 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3304 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3481;
        if (abs((_3282 - _3286) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3481 = ((((_3287 > 0.0) ? exp2(_3302 * _3287) : (2.0 - exp2(_3304 * _3287))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3297;
        }
        else
        {
            float _3425 = 1.0 / cbSceneParam._m0[80u].x;
            float _3426 = isnan(_3288) ? _3287 : (isnan(_3287) ? _3288 : max(_3287, _3288));
            float _3427 = isnan(_3288) ? _3287 : (isnan(_3287) ? _3288 : min(_3287, _3288));
            float _3436 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : min(_3426, 0.0));
            float _3437 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : min(_3427, 0.0));
            _3481 = ((abs(_3294 / _3282) * cbSceneParam._m0[80u].y) * ((((_3436 - _3437) * 2.0) - ((exp2(_3302 * (isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0)))) - exp2(_3302 * (isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0))))) * _3425)) - ((exp2(_3304 * _3436) - exp2(_3304 * _3437)) * _3425))) + (_3297 * cbSceneParam._m0[80u].z);
        }
        vec4 _3483 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3214, _3215, 1.0), 0.0);
        float _3492 = exp2((_3481 * (-1.44269502162933349609375)) * (1.0 - _3483.w));
        float _3493 = log2(_3492);
        float _3509 = log2(_3234);
        _3306 = (exp2(_3509 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3493 * cbSceneParam._m0[78u].x)) * _3483.x) / cbSceneParam._m0[78u].x)) + _3231;
        _3308 = (exp2(_3509 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3493 * cbSceneParam._m0[78u].y)) * _3483.y) / cbSceneParam._m0[78u].y)) + _3232;
        _3310 = (exp2(_3509 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3493 * cbSceneParam._m0[78u].z)) * _3483.z) / cbSceneParam._m0[78u].z)) + _3233;
        _3312 = _3492 * _3234;
    }
    else
    {
        _3306 = _3231;
        _3308 = _3232;
        _3310 = _3233;
        _3312 = _3234;
    }
    bool _3519;
    vec4 _3322;
    vec4 _3344;
    float _3346;
    float _3350;
    float _3351;
    float _3352;
    float _3353;
    bool _3363;
    for (;;)
    {
        _3322 = cbMatDynParam._m0[0u];
        float _3324 = roundEven(_3322.y);
        bool _3325 = _3324 == 3.0;
        float _3326 = log2(_3312);
        float _3333 = exp2(_3326 * cbSceneParam._m0[78u].x) * _3203;
        float _3334 = exp2(_3326 * cbSceneParam._m0[78u].y) * _3204;
        float _3335 = exp2(_3326 * cbSceneParam._m0[78u].z) * _3205;
        float _3342 = _982 + (-0.5);
        _3344 = cbMtdParam._m0[1u];
        _3346 = _3344.y * _3342;
        float _3349 = (_3324 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3350 = _3349 * (_3325 ? _3333 : (_3333 + (cbSceneParam._m0[72u].w * _3306)));
        _3351 = _3349 * (_3325 ? _3334 : (_3334 + (cbSceneParam._m0[72u].w * _3308)));
        _3352 = _3349 * (_3325 ? _3335 : (_3335 + (cbSceneParam._m0[72u].w * _3310)));
        _3353 = _3342 * 0.999000012874603271484375;
        _3363 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3363)
        {
            if ((cbInstanceData._m0[_1048 + 7u].x + _3353) < 0.5)
            {
                _3519 = true;
                break;
            }
        }
        uint _3460 = _1049 + uint(_3322.w);
        if ((cbInstanceData._m0[_3460].w < 1.0) && ((cbInstanceData._m0[_3460].w + _3353) < 0.5))
        {
            _3519 = true;
            break;
        }
        if ((_3346 + 1.0) < _3344.x)
        {
            _3519 = true;
            break;
        }
        _3519 = false;
        break;
    }
    float _3723;
    if (_3519)
    {
        discard_state = true;
        _3723 = 0.0;
    }
    else
    {
        _3723 = cbInstanceData._m0[_3206].w;
    }
    SV_Target.x = _3350;
    SV_Target.y = _3351;
    SV_Target.z = _3352;
    SV_Target.w = _3723;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3206].w;
    discard_exit();
}


