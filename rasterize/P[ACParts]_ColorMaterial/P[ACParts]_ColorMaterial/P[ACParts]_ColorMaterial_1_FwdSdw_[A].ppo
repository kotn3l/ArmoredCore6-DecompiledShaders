#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1329;
float _3997;
float _3998;
float _3999;
float _4000;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _269 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _276 = log2(0.0);
    float _278 = exp2(_276 * cbMtdParam._m0[24u].y);
    float _282 = _278 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _278);
    float _283 = _278 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _278);
    float _284 = _278 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _278);
    float _285 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _286 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _287 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _288 = isnan(1.0) ? _285 : (isnan(_285) ? 1.0 : min(_285, 1.0));
    float _290 = isnan(1.0) ? _286 : (isnan(_286) ? 1.0 : min(_286, 1.0));
    float _291 = isnan(1.0) ? _287 : (isnan(_287) ? 1.0 : min(_287, 1.0));
    vec4 _306 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _310 = _306.z;
    float _311 = _306.w;
    float _312 = 1.0 - _311;
    float _321 = exp2(log2((1.0 - (_312 * _310)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _322 : (isnan(_322) ? 1.0 : min(_322, 1.0));
    float _332 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_312 * _312) * _310))) * cbMtdParam._m0[26u].y);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    vec4 _346 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _352 = (_346.y * ((isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0))) - _311)) + _311;
    float _359 = roundEven(5.0 - ((_346.x + (-0.02500000037252902984619140625)) * 8.0));
    float _360 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _361 = isnan(4.0) ? _360 : (isnan(_360) ? 4.0 : min(_360, 4.0));
    float _374 = floor(_361);
    vec4 _377 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w, _374));
    float _387 = cbMtdParam._m0[10u].x * _377.x;
    float _388 = cbMtdParam._m0[10u].y * _377.y;
    float _389 = cbMtdParam._m0[10u].z * _377.z;
    vec4 _401 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _421 = (((cbMtdParam._m0[9u].x * _401.x) - _387) * _352) + _387;
    float _422 = (((cbMtdParam._m0[9u].y * _401.y) - _388) * _352) + _388;
    float _423 = (((cbMtdParam._m0[9u].z * _401.z) - _389) * _352) + _389;
    vec4 _436 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _456 = (((cbMtdParam._m0[20u].x * _436.x) - _421) * _323) + _421;
    float _457 = (((cbMtdParam._m0[20u].y * _436.y) - _422) * _323) + _422;
    float _458 = (((cbMtdParam._m0[20u].z * _436.z) - _423) * _323) + _423;
    vec4 _470 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _494 = (_269.x * 4.5) * ((((cbMtdParam._m0[23u].x * _470.x) - _456) * _288) + _456);
    float _496 = (_269.y * 4.5) * ((((cbMtdParam._m0[23u].y * _470.y) - _457) * _290) + _457);
    float _498 = (_269.z * 4.5) * ((((cbMtdParam._m0[23u].z * _470.z) - _458) * _291) + _458);
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[26u].w;
    _202[0u] = cbMtdParam._m0[27u].x;
    _201[1u] = cbMtdParam._m0[27u].y;
    _202[1u] = cbMtdParam._m0[27u].z;
    _201[2u] = cbMtdParam._m0[27u].w;
    _202[2u] = cbMtdParam._m0[28u].x;
    _201[3u] = cbMtdParam._m0[28u].y;
    _202[3u] = cbMtdParam._m0[28u].z;
    _201[4u] = cbMtdParam._m0[28u].w;
    _202[4u] = cbMtdParam._m0[29u].x;
    float _530 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    uint _532 = uint(int(isnan(4.0) ? _530 : (isnan(_530) ? 4.0 : min(_530, 4.0))));
    float _544 = ((cbMtdParam._m0[30u].x - _202[_532]) * _352) + _202[_532];
    float _549 = ((cbMtdParam._m0[30u].z - _544) * _323) + _544;
    float _557 = ((cbMtdParam._m0[31u].x - _549) * _288) + _549;
    vec4 _573 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w, _374));
    float _575 = _573.x;
    float _576 = _573.y;
    float _578 = _573.z + _201[_532];
    vec4 _591 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _599 = (((cbMtdParam._m0[29u].w - _578) + _591.z) * _352) + _578;
    vec4 _612 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _620 = (((cbMtdParam._m0[30u].y - _599) + _612.z) * _323) + _599;
    float _626 = ((((_310 * 2.0) * _620) - _620) * cbMtdParam._m0[25u].y) + _620;
    vec4 _638 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _646 = (((_638.z + cbMtdParam._m0[30u].w) - _626) * _291) + _626;
    float _659 = ((_591.x - _575) * _352) + _575;
    float _660 = ((_591.y - _576) * _352) + _576;
    float _665 = ((_612.x - _659) * _323) + _659;
    float _666 = ((_612.y - _660) * _323) + _660;
    float _675 = ((((_638.x - _665) * _288) + _665) * 2.0) + (-1.0);
    float _676 = ((((_638.y - _666) * _290) + _666) * 2.0) + (-1.0);
    float _677 = dot(vec2(_675, _676), vec2(_675, _676));
    float _4079 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _682 = sqrt(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))));
    float _685 = _675 + (cbMtdParam._m0[25u].z * ((_306.x * 2.0) + (-1.0)));
    float _686 = _676 + (cbMtdParam._m0[25u].z * ((_306.y * 2.0) + (-1.0)));
    float _689 = fma(_682, _237 * NORMAL.x, fma(_686, _244 * TANGENT.x, (_230 * _222) * _685));
    float _692 = fma(_682, _237 * NORMAL.y, fma(_686, _244 * TANGENT.y, (_230 * _223) * _685));
    float _695 = fma(_682, _237 * NORMAL.z, fma(_686, _244 * TANGENT.z, (_230 * _224) * _685));
    float _699 = inversesqrt(dot(vec3(_689, _692, _695), vec3(_689, _692, _695)));
    float _700 = _699 * _689;
    float _701 = _699 * _692;
    float _702 = _699 * _695;
    float _4090 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _703 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4112 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _4123 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4134 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _707 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _723 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _773 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _763);
    float _774 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _763);
    float _775 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _763);
    float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
    float _780 = _773 * _779;
    float _781 = _774 * _779;
    float _782 = _775 * _779;
    vec4 _787 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _789 = _787.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1009 = sqrt(((_773 * _773) + (_774 * _774)) + (_775 * _775));
        float _1015 = (cbMatDynParam._m0[5u].x * _1009) + cbMatDynParam._m0[5u].y;
        float _4145 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1020 = (cbMatDynParam._m0[5u].z * _1009) + cbMatDynParam._m0[5u].w;
        float _4156 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) - _1016)) + _1016) < ((_789 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _800 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _801 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _803 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _805 = _803.w;
    float _823 = fma(_702, cbSceneParam._m0[5u].z, fma(_701, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _700));
    float _826 = fma(_702, cbSceneParam._m0[6u].z, fma(_701, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _700));
    float _829 = fma(_702, cbSceneParam._m0[7u].z, fma(_701, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _700));
    vec4 _831 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _842 = (((_831.y - _703) + (_831.w * _703)) * cbMtdParam._m0[3u].x) + _703;
    uint _855 = uint(roundEven(NORMAL.w)) * 13u;
    uint _857 = _855 + 9u;
    uint _858 = _857 + uint(cbMatDynParam._m0[0u].w);
    float _864 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * cbInstanceData._m0[_858].x;
    float _865 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * cbInstanceData._m0[_858].y;
    float _866 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_858].z;
    float _4167 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _4178 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    vec4 _870 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _875 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _886 = (((_875.x - _707) + (_875.w * _707)) * cbMtdParam._m0[3u].x) + _707;
    float _899 = (cbMtdParam._m0[3u].x * (((_867 * _805) - _867) + _870.x)) + _867;
    float _900 = (cbMtdParam._m0[3u].x * (((_868 * _805) - _868) + _870.y)) + _868;
    float _901 = (cbMtdParam._m0[3u].x * (((_869 * _805) - _869) + _870.z)) + _869;
    float _902 = 1.0 - _886;
    float _903 = _902 * _899;
    float _904 = _902 * _900;
    float _905 = _902 * _901;
    float _910 = (_899 + (-0.039999999105930328369140625)) * _886;
    float _911 = (_900 + (-0.039999999105930328369140625)) * _886;
    float _912 = (_901 + (-0.039999999105930328369140625)) * _886;
    float _913 = _910 + 0.039999999105930328369140625;
    float _915 = _911 + 0.039999999105930328369140625;
    float _916 = _912 + 0.039999999105930328369140625;
    vec4 _925 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _800, cbSceneParam._m0[86u].y * _801));
    float _928 = _925.x * TEXCOORD_5.w;
    float _929 = dot(vec3(_700, _701, _702), vec3(_780, _781, _782));
    float _932 = _929 * 2.0;
    float _936 = (_932 * _700) - _780;
    float _937 = (_932 * _701) - _781;
    float _938 = (_932 * _702) - _782;
    float _942 = abs(dot(vec3(_780, _781, _782), vec3(_700, _701, _702)));
    float _4200 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _944 = sqrt(_842);
    float _955 = exp2((_944 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_944 * 3.0));
    float _961 = (1.0 - _955) * ((_944 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _962 = _955 * _944;
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1328;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1053 = fma(_998, cbModelParam._m0[26u].z, fma(_994, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _990));
        float _1057 = fma(_998, cbModelParam._m0[27u].z, fma(_994, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _990));
        float _1061 = fma(_998, cbModelParam._m0[28u].z, fma(_994, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _990));
        float _1086 = _990 + _700;
        float _1087 = _994 + _701;
        float _1088 = _998 + _702;
        float _1098 = fma(_1088, cbModelParam._m0[26u].z, fma(_1087, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1086)) - _1053;
        float _1099 = fma(_1088, cbModelParam._m0[27u].z, fma(_1087, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1086)) - _1057;
        float _1100 = fma(_1088, cbModelParam._m0[28u].z, fma(_1087, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1086)) - _1061;
        float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
        float _1117 = ((_1104 * _1098) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1053 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1104 * _1099) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1057 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1104 * _1100) / cbModelParam._m0[34u].z) + ((((((_1061 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        float _1156 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1122.x + (-0.5));
        float _1158 = _1156 * (_1122.y + (-0.5));
        float _1159 = _1156 * (_1122.z + (-0.5));
        float _1166 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1129.x + (-0.5));
        float _1168 = _1166 * (_1129.y + (-0.5));
        float _1169 = _1166 * (_1129.z + (-0.5));
        float _1176 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1136.x + (-0.5));
        float _1178 = _1176 * (_1136.y + (-0.5));
        float _1179 = _1176 * (_1136.z + (-0.5));
        float _1186 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1143.x + (-0.5));
        float _1188 = _1186 * (_1143.y + (-0.5));
        float _1189 = _1186 * (_1143.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1210 = (dot(vec3(_700, _701, _702), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1220 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _4248 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1222 + 1.0))) + _1227) * _1190;
        float _1237 = _1158 * 0.5;
        float _1238 = _1168 * 0.5;
        float _1239 = _1178 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_700, _701, _702), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4281 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1264 + 1.0))) + _1269) * _1191;
        float _1279 = _1159 * 0.5;
        float _1280 = _1169 * 0.5;
        float _1281 = _1179 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_700, _701, _702), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4314 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1306 + 1.0))) + _1311) * _1192;
        _1328 = _1159;
        _1330 = _1158;
        _1331 = _1157;
        _1332 = _1169;
        _1333 = _1168;
        _1334 = _1167;
        _1335 = _1179;
        _1336 = _1178;
        _1337 = _1177;
        _1338 = _1192;
        _1339 = _1191;
        _1340 = _1190;
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
    }
    else
    {
        _1328 = _1329;
        _1330 = _1329;
        _1331 = _1329;
        _1332 = _1329;
        _1333 = _1329;
        _1334 = _1329;
        _1335 = _1329;
        _1336 = _1329;
        _1337 = _1329;
        _1338 = _1329;
        _1339 = _1329;
        _1340 = _1329;
        _1341 = 0.0;
        _1342 = 0.0;
        _1343 = 0.0;
    }
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1369 = fma(_998, cbModelParam._m0[30u].z, fma(_994, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _990));
        float _1373 = fma(_998, cbModelParam._m0[31u].z, fma(_994, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _990));
        float _1377 = fma(_998, cbModelParam._m0[32u].z, fma(_994, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _990));
        float _1400 = _990 + _700;
        float _1401 = _994 + _701;
        float _1402 = _998 + _702;
        float _1412 = fma(_1402, cbModelParam._m0[30u].z, fma(_1401, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1400)) - _1369;
        float _1413 = fma(_1402, cbModelParam._m0[31u].z, fma(_1401, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1400)) - _1373;
        float _1414 = fma(_1402, cbModelParam._m0[32u].z, fma(_1401, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1400)) - _1377;
        float _1418 = inversesqrt(dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414)));
        float _1431 = ((_1418 * _1412) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1369 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1418 * _1413) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1373 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1418 * _1414) / cbModelParam._m0[35u].z) + ((((((_1377 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1431, _1432, _1433), 0.0);
        float _1468 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1435.x + (-0.5));
        float _1470 = _1468 * (_1435.y + (-0.5));
        float _1471 = _1468 * (_1435.z + (-0.5));
        float _1478 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1442.x + (-0.5));
        float _1480 = _1478 * (_1442.y + (-0.5));
        float _1481 = _1478 * (_1442.z + (-0.5));
        float _1488 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1449.x + (-0.5));
        float _1490 = _1488 * (_1449.y + (-0.5));
        float _1491 = _1488 * (_1449.z + (-0.5));
        float _1498 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1456.x + (-0.5));
        float _1500 = _1498 * (_1456.y + (-0.5));
        float _1501 = _1498 * (_1456.z + (-0.5));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = _1469 * 0.5;
        float _1506 = _1479 * 0.5;
        float _1507 = _1489 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_700, _701, _702), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _4355 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4366 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4377 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_1532 + 1.0))) + _1537) * _1502;
        float _1547 = _1470 * 0.5;
        float _1548 = _1480 * 0.5;
        float _1549 = _1490 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_700, _701, _702), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _4388 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4399 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4410 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_1574 + 1.0))) + _1579) * _1503;
        float _1589 = _1471 * 0.5;
        float _1590 = _1481 * 0.5;
        float _1591 = _1491 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_700, _701, _702), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4421 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4432 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4443 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_1616 + 1.0))) + _1621) * _1504;
        _1638 = _1471;
        _1639 = _1470;
        _1640 = _1469;
        _1641 = _1481;
        _1642 = _1480;
        _1643 = _1479;
        _1644 = _1491;
        _1645 = _1490;
        _1646 = _1489;
        _1647 = _1504;
        _1648 = _1503;
        _1649 = _1502;
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
    }
    else
    {
        _1638 = _1329;
        _1639 = _1329;
        _1640 = _1329;
        _1641 = _1329;
        _1642 = _1329;
        _1643 = _1329;
        _1644 = _1329;
        _1645 = _1329;
        _1646 = _1329;
        _1647 = _1329;
        _1648 = _1329;
        _1649 = _1329;
        _1650 = 0.0;
        _1651 = 0.0;
        _1652 = 0.0;
    }
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1341)) + _1341;
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1342)) + _1342;
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1343)) + _1343;
    float _1685 = fma(_1664, cbSceneParam._m0[89u].z, fma(_1663, cbSceneParam._m0[89u].y, _1662 * cbSceneParam._m0[89u].x));
    float _1688 = fma(_1664, cbSceneParam._m0[90u].z, fma(_1663, cbSceneParam._m0[90u].y, _1662 * cbSceneParam._m0[90u].x));
    float _1691 = fma(_1664, cbSceneParam._m0[91u].z, fma(_1663, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1662));
    float _1706 = _936 * 0.5;
    float _1707 = _937 * 0.5;
    float _1708 = _938 * 0.5;
    float _1709 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1712 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1715 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1749;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1722 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1328, _1332, _1335, _1338));
        float _1726 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1330, _1333, _1336, _1339));
        float _1730 = dot(vec4(_1706, _1707, _1708, 1.0), vec4(_1331, _1334, _1337, _1340));
        float _1737 = dot(vec4(cbModelParam._m0[39u]), vec4(_1706, _1707, _1708, 1.0));
        _1749 = dot(vec3(isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1737) ? 0.0 : (isnan(0.0) ? _1737 : max(0.0, _1737))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1749 = 1.0;
    }
    float _1760;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1751 = dot(vec4(cbModelParam._m0[40u]), vec4(_1706, _1707, _1708, 1.0));
        _1760 = dot(vec3(isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1751) ? 0.0 : (isnan(0.0) ? _1751 : max(0.0, _1751))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1760 = 1.0;
    }
    float _1764 = (_1760 * cbModelParam._m0[1u].x) + (_1749 * (1.0 - cbModelParam._m0[1u].x));
    float _1774 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _842);
    float _1775 = isnan(_1774) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1774 : min(cbModelParam._m0[25u].z, _1774));
    float _1857;
    float _1859;
    float _1861;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1824 = fma(_998, cbModelParam._m0[13u].z, fma(_994, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _990)) + cbModelParam._m0[13u].w;
        float _1828 = fma(_998, cbModelParam._m0[14u].z, fma(_994, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _990)) + cbModelParam._m0[14u].w;
        float _1832 = fma(_998, cbModelParam._m0[15u].z, fma(_994, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _990)) + cbModelParam._m0[15u].w;
        float _1835 = fma(_938, cbModelParam._m0[13u].z, fma(_937, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _936));
        float _1838 = fma(_938, cbModelParam._m0[14u].z, fma(_937, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _936));
        float _1841 = fma(_938, cbModelParam._m0[15u].z, fma(_937, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _936));
        float _1869;
        if (_1835 > 0.0)
        {
            _1869 = abs((1.0 - _1824) / _1835);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1824 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1869 = frontier_phi_17_15_ladder;
        }
        float _2045;
        if (_1838 > 0.0)
        {
            _2045 = abs((1.0 - _1828) / _1838);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1828 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2045 = frontier_phi_26_22_ladder;
        }
        float _2340;
        if (_1841 > 0.0)
        {
            _2340 = abs((1.0 - _1832) / _1841);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1832 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2340 = frontier_phi_38_33_ladder;
        }
        float _2342 = isnan(_2045) ? _1869 : (isnan(_1869) ? _2045 : min(_1869, _2045));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1835) + _1824;
        float _2348 = (_2343 * _1838) + _1828;
        float _2349 = (_2343 * _1841) + _1832;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2352 = (-1.0) - _2350;
        float _2354 = _2350 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2349 > _2354) || ((_2349 < _2352) || ((_2348 > _2354) || ((_2348 < _2352) || ((_2347 < _2352) || (_2347 > _2354))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2349, cbModelParam._m0[9u].z, fma(_2348, cbModelParam._m0[9u].y, _2347 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2349, cbModelParam._m0[10u].z, fma(_2348, cbModelParam._m0[10u].y, _2347 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2349, cbModelParam._m0[11u].z, fma(_2348, cbModelParam._m0[11u].y, _2347 * cbModelParam._m0[11u].x))), _1775);
            frontier_phi_16_38_ladder = _2494.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2494.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2494.x * cbModelParam._m0[1u].y;
        }
        _1857 = frontier_phi_16_38_ladder_2;
        _1859 = frontier_phi_16_38_ladder_1;
        _1861 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_936, _937, _938), _1775);
        _1857 = _1845.x * cbModelParam._m0[1u].y;
        _1859 = _1845.y * cbModelParam._m0[1u].y;
        _1861 = _1845.z * cbModelParam._m0[1u].y;
    }
    float _1865 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _842);
    float _1866 = isnan(_1865) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1865 : min(cbModelParam._m0[25u].w, _1865));
    float _1959;
    float _1961;
    float _1963;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1923 = fma(_998, cbModelParam._m0[21u].z, fma(_994, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _990)) + cbModelParam._m0[21u].w;
        float _1927 = fma(_998, cbModelParam._m0[22u].z, fma(_994, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _990)) + cbModelParam._m0[22u].w;
        float _1931 = fma(_998, cbModelParam._m0[23u].z, fma(_994, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _990)) + cbModelParam._m0[23u].w;
        float _1934 = fma(_938, cbModelParam._m0[21u].z, fma(_937, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _936));
        float _1937 = fma(_938, cbModelParam._m0[22u].z, fma(_937, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _936));
        float _1940 = fma(_938, cbModelParam._m0[23u].z, fma(_937, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _936));
        float _2050;
        if (_1934 > 0.0)
        {
            _2050 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2050 = frontier_phi_28_24_ladder;
        }
        float _2367;
        if (_1937 > 0.0)
        {
            _2367 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2367 = frontier_phi_40_35_ladder;
        }
        float _2705;
        if (_1940 > 0.0)
        {
            _2705 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2705 = frontier_phi_50_47_ladder;
        }
        float _2707 = isnan(_2367) ? _2050 : (isnan(_2050) ? _2367 : min(_2050, _2367));
        float _2708 = isnan(_2705) ? _2707 : (isnan(_2707) ? _2705 : min(_2707, _2705));
        float _2712 = (_2708 * _1934) + _1923;
        float _2713 = (_2708 * _1937) + _1927;
        float _2714 = (_2708 * _1940) + _1931;
        float _2715 = _2708 * 9.9999997473787516355514526367188e-05;
        float _2716 = (-1.0) - _2715;
        float _2718 = _2715 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2714 > _2718) || ((_2714 < _2716) || ((_2713 > _2718) || ((_2713 < _2716) || ((_2712 < _2716) || (_2712 > _2718))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2836 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2714, cbModelParam._m0[17u].z, fma(_2713, cbModelParam._m0[17u].y, _2712 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2714, cbModelParam._m0[18u].z, fma(_2713, cbModelParam._m0[18u].y, _2712 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2714, cbModelParam._m0[19u].z, fma(_2713, cbModelParam._m0[19u].y, _2712 * cbModelParam._m0[19u].x))), _1866);
            frontier_phi_25_50_ladder = _2836.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2836.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2836.x * cbModelParam._m0[1u].z;
        }
        _1959 = frontier_phi_25_50_ladder_2;
        _1961 = frontier_phi_25_50_ladder_1;
        _1963 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_936, _937, _938), _1866);
        _1959 = _1943.x * cbModelParam._m0[1u].z;
        _1961 = _1943.y * cbModelParam._m0[1u].z;
        _1963 = _1943.z * cbModelParam._m0[1u].z;
    }
    float _1976 = (((_961 * _913) + _962) * _928) * ((cbModelParam._m0[1u].w * (_1959 - _1857)) + _1857);
    float _1978 = (((_961 * _915) + _962) * _928) * ((cbModelParam._m0[1u].w * (_1961 - _1859)) + _1859);
    float _1980 = (((_961 * _916) + _962) * _928) * ((cbModelParam._m0[1u].w * (_1963 - _1861)) + _1861);
    float _1983 = fma(_1980, cbSceneParam._m0[89u].z, fma(_1978, cbSceneParam._m0[89u].y, _1976 * cbSceneParam._m0[89u].x));
    float _1986 = fma(_1980, cbSceneParam._m0[90u].z, fma(_1978, cbSceneParam._m0[90u].y, _1976 * cbSceneParam._m0[90u].x));
    float _1989 = fma(_1980, cbSceneParam._m0[91u].z, fma(_1978, cbSceneParam._m0[91u].y, _1976 * cbSceneParam._m0[91u].x));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2028 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2037 = _2024 / _2036;
    float _2038 = _2028 / _2036;
    float _2039 = _2032 / _2036;
    float _2186;
    float _2187;
    float _2188;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2066 = ((uint(_2039 > cbSceneParam._m0[59u].y) + uint(_2039 > cbSceneParam._m0[59u].x)) + uint(_2039 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2067 = _2066 + 43u;
        uint _2075 = _2066 + 44u;
        uint _2083 = _2066 + 45u;
        uint _2091 = _2066 + 46u;
        float _2102 = fma(_2036, cbSceneParam._m0[_2067].w, fma(_2032, cbSceneParam._m0[_2067].z, fma(_2028, cbSceneParam._m0[_2067].y, _2024 * cbSceneParam._m0[_2067].x)));
        float _2106 = fma(_2036, cbSceneParam._m0[_2075].w, fma(_2032, cbSceneParam._m0[_2075].z, fma(_2028, cbSceneParam._m0[_2075].y, _2024 * cbSceneParam._m0[_2075].x)));
        float _2114 = fma(_2036, cbSceneParam._m0[_2091].w, fma(_2032, cbSceneParam._m0[_2091].z, fma(_2028, cbSceneParam._m0[_2091].y, _2024 * cbSceneParam._m0[_2091].x)));
        float _2119 = cbSceneParam._m0[33u].z * _2114;
        float _2121 = cbSceneParam._m0[33u].w * _2114;
        float _2124 = fma(_2036, cbSceneParam._m0[_2083].w, fma(_2032, cbSceneParam._m0[_2083].z, fma(_2028, cbSceneParam._m0[_2083].y, _2024 * cbSceneParam._m0[_2083].x))) / _2114;
        float _2172 = (cbSceneParam._m0[33u].x - sqrt(((_2038 * _2038) + (_2037 * _2037)) + (_2039 * _2039))) * cbSceneParam._m0[33u].y;
        float _4569 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2179 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 + _2102) / _2114, (_2121 + _2106) / _2114), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 + _2102) / _2114, (_2106 - _2119) / _2114), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 - _2119) / _2114, (_2106 - _2121) / _2114), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 - _2121) / _2114, (_2119 + _2106) / _2114), _2124), 0.0)).x), vec4(0.25)));
        _2186 = 1.0 - (_2179 * cbSceneParam._m0[34u].x);
        _2187 = 1.0 - (_2179 * cbSceneParam._m0[34u].y);
        _2188 = 1.0 - (_2179 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2186 = 1.0;
        _2187 = 1.0;
        _2188 = 1.0;
    }
    float _2252;
    float _2254;
    float _2256;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2240 = fma(_2036, cbSceneParam._m0[63u].w, fma(_2032, cbSceneParam._m0[63u].z, fma(_2028, cbSceneParam._m0[63u].y, _2024 * cbSceneParam._m0[63u].x)));
        float _2241 = fma(_2036, cbSceneParam._m0[60u].w, fma(_2032, cbSceneParam._m0[60u].z, fma(_2028, cbSceneParam._m0[60u].y, _2024 * cbSceneParam._m0[60u].x))) / _2240;
        float _2242 = fma(_2036, cbSceneParam._m0[61u].w, fma(_2032, cbSceneParam._m0[61u].z, fma(_2028, cbSceneParam._m0[61u].y, _2024 * cbSceneParam._m0[61u].x))) / _2240;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2241 >= cbSceneParam._m0[64u].x) && (_2242 >= cbSceneParam._m0[64u].y)) && (_2241 <= cbSceneParam._m0[64u].z)) && (_2242 <= cbSceneParam._m0[64u].w))
        {
            float _2380 = fma(_2036, cbSceneParam._m0[62u].w, fma(_2032, cbSceneParam._m0[62u].z, fma(_2028, cbSceneParam._m0[62u].y, _2024 * cbSceneParam._m0[62u].x))) / _2240;
            float _2384 = isnan(cbSceneParam._m0[41u].w) ? _2380 : (isnan(_2380) ? cbSceneParam._m0[41u].w : max(_2380, cbSceneParam._m0[41u].w));
            float _2427 = (cbSceneParam._m0[33u].x - sqrt(((_2038 * _2038) + (_2037 * _2037)) + (_2039 * _2039))) * cbSceneParam._m0[33u].y;
            float _4585 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
            float _2434 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2241, cbSceneParam._m0[33u].w + _2242), _2384), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2241, _2242 - cbSceneParam._m0[33u].z), _2384), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2241 - cbSceneParam._m0[33u].z, _2242 - cbSceneParam._m0[33u].w), _2384), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2241 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2242), _2384), 0.0)).x), vec4(0.25)));
            float _2438 = 1.0 - (_2434 * cbSceneParam._m0[34u].x);
            float _2439 = 1.0 - (_2434 * cbSceneParam._m0[34u].y);
            float _2440 = 1.0 - (_2434 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2440) ? _2188 : (isnan(_2188) ? _2440 : min(_2188, _2440));
            frontier_phi_37_36_ladder_1 = isnan(_2439) ? _2187 : (isnan(_2187) ? _2439 : min(_2187, _2439));
            frontier_phi_37_36_ladder_2 = isnan(_2438) ? _2186 : (isnan(_2186) ? _2438 : min(_2186, _2438));
        }
        else
        {
            frontier_phi_37_36_ladder = _2188;
            frontier_phi_37_36_ladder_1 = _2187;
            frontier_phi_37_36_ladder_2 = _2186;
        }
        _2252 = frontier_phi_37_36_ladder_2;
        _2254 = frontier_phi_37_36_ladder_1;
        _2256 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2252 = _2186;
        _2254 = _2187;
        _2256 = _2188;
    }
    uvec4 _2261 = floatBitsToUint(cbInstanceData._m0[_855 + 5u]);
    uint _2263 = _2261.x * 14u;
    uint _2264 = _2263 + 13u;
    float _2271 = _928 + (-1.0);
    float _2276 = (cbLight._m0[_2264].x * _2271) + 1.0;
    float _2277 = (cbLight._m0[_2264].y * _2271) + 1.0;
    float _2278 = (cbLight._m0[_2264].z * _2271) + 1.0;
    float _2279 = (cbLight._m0[_2264].w * _2271) + 1.0;
    uint _2280 = _2263 + 5u;
    float _2286 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
    uint _2290 = _2263 + 4u;
    float _2299 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
    uint _2303 = _2263 | 1u;
    float _2314 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_700, _701, _702));
    float _2317 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_700, _701, _702));
    float _4621 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _4632 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2322 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * 0.3183098733425140380859375;
    float _2324 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * 0.3183098733425140380859375;
    float _2331 = ((cbLight._m0[_2280].x * _2286) * _2324) + (((cbLight._m0[_2290].x * _2252) * _2299) * _2322);
    float _2332 = ((_2286 * cbLight._m0[_2280].y) * _2324) + (((cbLight._m0[_2290].y * _2254) * _2299) * _2322);
    float _2333 = ((_2286 * cbLight._m0[_2280].z) * _2324) + (((cbLight._m0[_2290].z * _2256) * _2299) * _2322);
    uvec4 _2337 = floatBitsToUint(cbLight._m0[_2263 + 12u]);
    bool _2339 = _2337.x == 0u;
    float _2441;
    float _2443;
    float _2445;
    if (_2339)
    {
        _2441 = _2331;
        _2443 = _2332;
        _2445 = _2333;
    }
    else
    {
        uint _2449 = _2263 + 6u;
        float _2465 = (dot(vec3(cbLight._m0[_2263 + 2u].xyz), vec3(_700, _701, _702)) * 0.5) + 0.5;
        float _2466 = _2465 * _2465;
        float _4643 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2467 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2468 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2441 = (((cbLight._m0[_2449].x * 0.3183098733425140380859375) * _2467) * _2468) + _2331;
        _2443 = (((cbLight._m0[_2449].y * 0.3183098733425140380859375) * _2467) * _2468) + _2332;
        _2445 = (((cbLight._m0[_2449].z * 0.3183098733425140380859375) * _2467) * _2468) + _2333;
    }
    bool _2448 = _2337.y == 0u;
    float _2503;
    float _2505;
    float _2507;
    if (_2448)
    {
        _2503 = _2441;
        _2505 = _2443;
        _2507 = _2445;
    }
    else
    {
        uint _2676 = _2263 + 7u;
        float _2692 = (dot(vec3(cbLight._m0[_2263 + 3u].xyz), vec3(_700, _701, _702)) * 0.5) + 0.5;
        float _2693 = _2692 * _2692;
        float _4659 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2694 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2695 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2503 = (((cbLight._m0[_2676].x * 0.3183098733425140380859375) * _2694) * _2695) + _2441;
        _2505 = (((cbLight._m0[_2676].y * 0.3183098733425140380859375) * _2694) * _2695) + _2443;
        _2507 = (((cbLight._m0[_2676].z * 0.3183098733425140380859375) * _2694) * _2695) + _2445;
    }
    uint _2510 = _2263 + 8u;
    float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _842) * 0.949999988079071044921875);
    float _2524 = _2523 * _2523;
    float _2525 = cbLight._m0[_2263].x + _780;
    float _2526 = cbLight._m0[_2263].y + _781;
    float _2527 = cbLight._m0[_2263].z + _782;
    float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
    float _2532 = _2531 * _2525;
    float _2533 = _2531 * _2526;
    float _2534 = _2531 * _2527;
    float _2535 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2263].xyz));
    float _4675 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
    float _4686 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _2539 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
    float _2540 = dot(vec3(_700, _701, _702), vec3(_2532, _2533, _2534));
    float _4697 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
    float _2544 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2532, _2533, _2534));
    float _4708 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2548 = _2524 * _2524;
    float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
    float _2560 = exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0);
    float _2561 = 0.959999978542327880859375 - _910;
    float _2563 = 0.959999978542327880859375 - _911;
    float _2564 = 0.959999978542327880859375 - _912;
    float _2571 = 1.0 - _2524;
    float _2582 = (0.5 / (((_2539 * ((_2538 * _2571) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2571) + _2524) * _2538))) * _2538;
    float _4719 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2584 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
    uint _2598 = _2263 + 9u;
    float _2609 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2303].w)) * _842) * 0.949999988079071044921875);
    float _2610 = _2609 * _2609;
    float _2611 = cbLight._m0[_2303].x + _780;
    float _2612 = cbLight._m0[_2303].y + _781;
    float _2613 = cbLight._m0[_2303].z + _782;
    float _2617 = inversesqrt(dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613)));
    float _2618 = _2617 * _2611;
    float _2619 = _2617 * _2612;
    float _2620 = _2617 * _2613;
    float _2621 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2303].xyz));
    float _4730 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2624 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _2625 = dot(vec3(_700, _701, _702), vec3(_2618, _2619, _2620));
    float _4741 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2628 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _2629 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_2618, _2619, _2620));
    float _4752 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2633 = _2610 * _2610;
    float _2637 = ((_2628 * _2628) * (_2633 + (-1.0))) + 1.0;
    float _2644 = exp2(log2(1.0 - (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) * 5.0);
    float _2651 = 1.0 - _2610;
    float _2661 = (0.5 / (((_2539 * ((_2624 * _2651) + _2610)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2651) + _2610) * _2624))) * _2624;
    float _4763 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2663 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2633 / ((_2637 * _2637) * 3.141590118408203125));
    float _2673 = (((((_2644 * _2561) + _913) * cbLight._m0[_2598].x) * _2663) * _2286) + ((((cbLight._m0[_2510].x * _2252) * ((_2560 * _2561) + _913)) * _2584) * _2299);
    float _2674 = (((((_2644 * _2563) + _915) * cbLight._m0[_2598].y) * _2663) * _2286) + ((((cbLight._m0[_2510].y * _2254) * ((_2560 * _2563) + _915)) * _2584) * _2299);
    float _2675 = (((((_2644 * _2564) + _916) * cbLight._m0[_2598].z) * _2663) * _2286) + ((((cbLight._m0[_2510].z * _2256) * ((_2560 * _2564) + _916)) * _2584) * _2299);
    float _2731;
    float _2733;
    float _2735;
    if (_2339)
    {
        _2731 = _2673;
        _2733 = _2674;
        _2735 = _2675;
    }
    else
    {
        uint _2737 = _2263 + 2u;
        uint _2741 = _2263 + 10u;
        float _2755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2737].w)) * _842) * 0.949999988079071044921875);
        float _2756 = _2755 * _2755;
        float _2757 = cbLight._m0[_2737].x + _780;
        float _2758 = cbLight._m0[_2737].y + _781;
        float _2759 = cbLight._m0[_2737].z + _782;
        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
        float _2764 = _2763 * _2757;
        float _2765 = _2763 * _2758;
        float _2766 = _2763 * _2759;
        float _2767 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2737].xyz));
        float _4774 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2771 = dot(vec3(_700, _701, _702), vec3(_2764, _2765, _2766));
        float _4785 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2775 = dot(vec3(cbLight._m0[_2737].xyz), vec3(_2764, _2765, _2766));
        float _4796 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2779 = _2756 * _2756;
        float _2783 = ((_2774 * _2774) * (_2779 + (-1.0))) + 1.0;
        float _2790 = exp2(log2(1.0 - (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) * 5.0);
        float _2797 = 1.0 - _2756;
        float _2807 = (0.5 / (((_2539 * ((_2770 * _2797) + _2756)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2797) + _2756) * _2770))) * _2770;
        float _4807 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2809 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2779 / ((_2783 * _2783) * 3.141590118408203125));
        float _2810 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2731 = (((((_2790 * _2561) + _913) * cbLight._m0[_2741].x) * _2809) * _2810) + _2673;
        _2733 = (((((_2790 * _2563) + _915) * cbLight._m0[_2741].y) * _2809) * _2810) + _2674;
        _2735 = (((((_2790 * _2564) + _916) * cbLight._m0[_2741].z) * _2809) * _2810) + _2675;
    }
    float _2841;
    float _2843;
    float _2845;
    if (_2448)
    {
        _2841 = _2731;
        _2843 = _2733;
        _2845 = _2735;
    }
    else
    {
        uint _2852 = _2263 + 3u;
        uint _2856 = _2263 + 11u;
        float _2870 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2852].w)) * _842) * 0.949999988079071044921875);
        float _2871 = _2870 * _2870;
        float _2872 = cbLight._m0[_2852].x + _780;
        float _2873 = cbLight._m0[_2852].y + _781;
        float _2874 = cbLight._m0[_2852].z + _782;
        float _2878 = inversesqrt(dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874)));
        float _2879 = _2878 * _2872;
        float _2880 = _2878 * _2873;
        float _2881 = _2878 * _2874;
        float _2882 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2852].xyz));
        float _4823 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2885 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2886 = dot(vec3(_700, _701, _702), vec3(_2879, _2880, _2881));
        float _4834 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2889 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2890 = dot(vec3(cbLight._m0[_2852].xyz), vec3(_2879, _2880, _2881));
        float _4845 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2894 = _2871 * _2871;
        float _2898 = ((_2889 * _2889) * (_2894 + (-1.0))) + 1.0;
        float _2905 = exp2(log2(1.0 - (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) * 5.0);
        float _2912 = 1.0 - _2871;
        float _2922 = (0.5 / (((_2539 * ((_2885 * _2912) + _2871)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2912) + _2871) * _2885))) * _2885;
        float _4856 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2924 = (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2894 / ((_2898 * _2898) * 3.141590118408203125));
        float _2925 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2841 = (((((_2905 * _2561) + _913) * cbLight._m0[_2856].x) * _2924) * _2925) + _2731;
        _2843 = (((((_2905 * _2563) + _915) * cbLight._m0[_2856].y) * _2924) * _2925) + _2733;
        _2845 = (((((_2905 * _2564) + _916) * cbLight._m0[_2856].z) * _2924) * _2925) + _2735;
    }
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    if (_2261.y == 0u)
    {
        uvec4 _2946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2947 = _2946.x;
        uint _2958 = uint((float(_2946.y) * floor(float(uint(cbSceneParam._m0[85u].y * _801) / _2947))) + floor(float(uint(cbSceneParam._m0[85u].x * _800) / _2947)));
        float _2968 = (log2(_2039 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2969 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        uint _2972 = uint(isnan(14.0) ? _2969 : (isnan(_2969) ? 14.0 : min(_2969, 14.0)));
        uvec4 _2977 = texelFetch(g_lightClusterGridBuffer, int(((_2972 << 2u) + (_2958 << 6u)) >> 2u));
        uint _2978 = _2977.x;
        uint _2979 = _2946.z;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        if (((((1u << ((_2979 >> 4u) & 15u)) + 4294967295u) & _2978) == 0u) || ((_2979 & 240u) == 0u))
        {
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
        }
        else
        {
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            uint _3217 = 0u;
            uint _3226;
            bool _3227;
            for (;;)
            {
                _3226 = texelFetch(g_lightClassification, int((((_2972 << 5u) + (_2958 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                _3227 = _3226 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3227)
                {
                    frontier_phi_71_pred = _3216;
                    frontier_phi_71_pred_1 = _3215;
                    frontier_phi_71_pred_2 = _3214;
                    frontier_phi_71_pred_3 = _3213;
                    frontier_phi_71_pred_4 = _3212;
                    frontier_phi_71_pred_5 = _3211;
                }
                else
                {
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    uint _3362;
                    _3356 = _3211;
                    _3357 = _3212;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3226;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    for (;;)
                    {
                        uint _3366 = uint(findLSB(_3362)) + (_3217 << 5u);
                        uint _3363 = (_3362 + 4294967295u) & _3362;
                        uint _3368 = _3366 * 48u;
                        vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 3u)).x));
                        uint _3388 = (_3366 * 48u) + 4u;
                        vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 3u)).x));
                        uint _3407 = (_3366 * 48u) + 8u;
                        vec3 _3418 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3407)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 2u)).x));
                        float _3422 = _3382.x - _2037;
                        float _3423 = _3382.y - _2038;
                        float _3424 = _3382.z - _2039;
                        float _3425 = dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424));
                        float _3428 = inversesqrt(_3425);
                        float _3429 = _3428 * _3422;
                        float _3430 = _3428 * _3423;
                        float _3431 = _3428 * _3424;
                        float _3432 = dot(vec3(_823, _826, _829), vec3(_3429, _3430, _3431));
                        float _3437 = 1.0 - (_3425 * _3382.w);
                        float _4882 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                        float _3439 = sqrt(_3425) * _3401.w;
                        float _3442 = 1.39999997615814208984375 / (_3439 + 1.39999997615814208984375);
                        float _3443 = _3442 * _3442;
                        float _3446 = ((1.0 - _3443) * _3432) + _3443;
                        float _3449 = _3439 * _3439;
                        float _3453 = ((isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0))) * _3438) / ((_3449 * 0.699999988079071044921875) + 1.0);
                        float _3457 = (-0.0) - _2037;
                        float _3458 = (-0.0) - _2038;
                        float _3459 = (-0.0) - _2039;
                        float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                        float _3464 = _3463 * _3457;
                        float _3465 = _3463 * _3458;
                        float _3466 = _3463 * _3459;
                        float _3473 = exp2(log2(1.0 / ((_3449 * 3.5) + 5.0)) * 0.25);
                        float _3474 = 1.0 - _944;
                        float _3481 = sqrt(1.0 - ((1.0 - (_3474 * _3474)) * (1.0 - (_3473 * _3473))));
                        float _3482 = _3481 * _3481;
                        float _3483 = _3482 * _3482;
                        float _3484 = _3464 + _3429;
                        float _3485 = _3465 + _3430;
                        float _3486 = _3466 + _3431;
                        float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                        float _3494 = dot(vec3(_823, _826, _829), vec3(_3464, _3465, _3466));
                        float _4898 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3497 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3498 = dot(vec3(_823, _826, _829), vec3(_3490 * _3484, _3490 * _3485, _3490 * _3486));
                        float _4909 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3501 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3505 = ((_3501 * _3501) * (_3483 + (-1.0))) + 1.0;
                        float _3506 = _3442 * _3482;
                        float _3507 = _3506 * _3506;
                        float _3510 = ((1.0 - _3507) * _3432) + _3507;
                        float _4920 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3511 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                        float _3512 = 1.0 - _3482;
                        float _3522 = (0.5 / (((_3511 * ((_3497 * _3512) + _3482)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3482) * _3497))) * _3511;
                        float _4931 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3533 = (((_3483 * 3.1415927410125732421875) * (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0)))) / ((_3505 * _3505) * ((_3449 * 2.1991131305694580078125) + 3.141590118408203125))) * _3438;
                        _3286 = (_3453 * _3401.x) + _3359;
                        _3287 = (_3453 * _3401.y) + _3360;
                        _3288 = (_3453 * _3401.z) + _3361;
                        _3283 = (_3533 * _3418.x) + _3356;
                        _3284 = (_3533 * _3418.y) + _3357;
                        _3285 = (_3533 * _3418.z) + _3358;
                        if (_3363 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3356 = _3283;
                            _3357 = _3284;
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3363;
                        }
                    }
                    frontier_phi_71_pred = _3288;
                    frontier_phi_71_pred_1 = _3287;
                    frontier_phi_71_pred_2 = _3286;
                    frontier_phi_71_pred_3 = _3285;
                    frontier_phi_71_pred_4 = _3284;
                    frontier_phi_71_pred_5 = _3283;
                }
                _3069 = frontier_phi_71_pred;
                _3067 = frontier_phi_71_pred_1;
                _3065 = frontier_phi_71_pred_2;
                _3063 = frontier_phi_71_pred_3;
                _3061 = frontier_phi_71_pred_4;
                _3059 = frontier_phi_71_pred_5;
                uint _3218 = _3217 + 1u;
                if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3211 = _3059;
                    _3212 = _3061;
                    _3213 = _3063;
                    _3214 = _3065;
                    _3215 = _3067;
                    _3216 = _3069;
                    _3217 = _3218;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
        }
        uvec4 _3072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3073 = _3072.z;
        uint _3075 = (_3073 >> 8u) & 15u;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((4294967295u << _3075) & _2978) == 0u)
        {
            _3179 = _3058;
            _3181 = _3060;
            _3183 = _3062;
            _3185 = _3064;
            _3187 = _3066;
            _3189 = _3068;
        }
        else
        {
            float _3204 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
            float _3205 = _3204 * _2037;
            float _3206 = _3204 * _2038;
            float _3207 = _3204 * _2039;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3075 < ((_3073 >> 12u) & 15u))
            {
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3339 = _3058;
                float _3340 = _3060;
                float _3341 = _3062;
                float _3342 = _3064;
                float _3343 = _3066;
                float _3344 = _3068;
                uint _3345 = _3075;
                uint _3354;
                bool _3355;
                for (;;)
                {
                    _3354 = texelFetch(g_lightClassification, int((((_2972 << 5u) + (_2958 << 9u)) + (_3345 << 2u)) >> 2u)).x;
                    _3355 = _3354 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3355)
                    {
                        frontier_phi_82_pred = _3344;
                        frontier_phi_82_pred_1 = _3343;
                        frontier_phi_82_pred_2 = _3342;
                        frontier_phi_82_pred_3 = _3341;
                        frontier_phi_82_pred_4 = _3340;
                        frontier_phi_82_pred_5 = _3339;
                    }
                    else
                    {
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3560 = _3339;
                        float _3561 = _3340;
                        float _3562 = _3341;
                        float _3563 = _3342;
                        float _3564 = _3343;
                        float _3565 = _3344;
                        uint _3566 = _3354;
                        uint _3567;
                        vec4 _3592;
                        float _3593;
                        vec4 _3608;
                        vec3 _3620;
                        vec4 _3636;
                        vec4 _3651;
                        float _3697;
                        bool _3698;
                        for (;;)
                        {
                            uint _3577 = ((_3345 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3566));
                            _3567 = (_3566 + 4294967295u) & _3566;
                            uint _3579 = _3577 * 40u;
                            _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            _3593 = _3592.w;
                            uint _3595 = (_3577 * 40u) + 4u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3577 * 40u) + 8u;
                            _3620 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x));
                            uint _3623 = (_3577 * 40u) + 16u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3638 = (_3577 * 40u) + 20u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3653 = (_3577 * 40u) + 24u;
                            vec4 _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3672 = (_3577 * 40u) + 28u;
                            vec4 _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            _3697 = fma(_2039, _3685.z, fma(_2038, _3685.y, _3685.x * _2037)) + _3685.w;
                            _3698 = !((fma(_2039, _3666.z, fma(_2038, _3666.y, _3666.x * _2037)) + _3666.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3698)
                            {
                                float _3725 = _3592.x - _2037;
                                float _3726 = _3592.y - _2038;
                                float _3727 = _3592.z - _2039;
                                float _3728 = dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727));
                                float _3731 = inversesqrt(_3728);
                                float _3732 = _3731 * _3725;
                                float _3733 = _3731 * _3726;
                                float _3734 = _3731 * _3727;
                                float _3738 = 1.0 - (_3728 / (_3593 * _3593));
                                float _4942 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                                float _3743 = sqrt(_3728) * _3608.w;
                                float _3745 = 1.39999997615814208984375 / (_3743 + 1.39999997615814208984375);
                                float _3746 = _3745 * _3745;
                                float _3749 = ((1.0 - _3746) * dot(vec3(_3732, _3733, _3734), vec3(_823, _826, _829))) + _3746;
                                float _3752 = _3743 * _3743;
                                float _3756 = (fma(_2039, _3636.z, fma(_2038, _3636.y, _3636.x * _2037)) + _3636.w) / _3697;
                                float _3757 = (fma(_2039, _3651.z, fma(_2038, _3651.y, _3651.x * _2037)) + _3651.w) / _3697;
                                float _3761 = 1.0 - dot(vec2(_3756, _3757), vec2(_3756, _3757));
                                float _4958 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3763 = _3762 * (((isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0))) * _3739) / ((_3752 * 0.699999988079071044921875) + 1.0));
                                float _3775 = exp2(log2(1.0 / ((_3752 * 3.5) + 5.0)) * 0.25);
                                float _3776 = 1.0 - _944;
                                float _3783 = sqrt(1.0 - ((1.0 - (_3776 * _3776)) * (1.0 - (_3775 * _3775))));
                                float _3784 = _3783 * _3783;
                                float _3785 = _3784 * _3784;
                                float _3786 = _3732 - _3205;
                                float _3787 = _3733 - _3206;
                                float _3788 = _3734 - _3207;
                                float _3792 = inversesqrt(dot(vec3(_3786, _3787, _3788), vec3(_3786, _3787, _3788)));
                                float _3796 = dot(vec3(_823, _826, _829), vec3((-0.0) - _3205, (-0.0) - _3206, (-0.0) - _3207));
                                float _4969 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3799 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3800 = dot(vec3(_823, _826, _829), vec3(_3792 * _3786, _3792 * _3787, _3792 * _3788));
                                float _4980 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3803 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3807 = ((_3803 * _3803) * (_3785 + (-1.0))) + 1.0;
                                float _3808 = _3745 * _3784;
                                float _3809 = _3808 * _3808;
                                float _3815 = ((1.0 - _3809) * dot(vec3(_823, _826, _829), vec3(_3732, _3733, _3734))) + _3809;
                                float _4991 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3816 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3817 = 1.0 - _3784;
                                float _3827 = (0.5 / (((_3816 * ((_3799 * _3817) + _3784)) + 9.9999999392252902907785028219223e-09) + (((_3816 * _3817) + _3784) * _3799))) * _3816;
                                float _5002 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3837 = (_3762 * _3739) * (((_3785 * 3.1415927410125732421875) * (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0)))) / ((_3807 * _3807) * ((_3752 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3763 * _3608.z;
                                frontier_phi_88_pred_1 = _3763 * _3608.y;
                                frontier_phi_88_pred_2 = _3763 * _3608.x;
                                frontier_phi_88_pred_3 = _3837 * _3620.z;
                                frontier_phi_88_pred_4 = _3837 * _3620.y;
                                frontier_phi_88_pred_5 = _3837 * _3620.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3846 = frontier_phi_88_pred;
                            _3845 = frontier_phi_88_pred_1;
                            _3844 = frontier_phi_88_pred_2;
                            _3843 = frontier_phi_88_pred_3;
                            _3842 = frontier_phi_88_pred_4;
                            _3841 = frontier_phi_88_pred_5;
                            _3550 = _3844 + _3563;
                            _3551 = _3845 + _3564;
                            _3552 = _3846 + _3565;
                            _3547 = _3841 + _3560;
                            _3548 = _3842 + _3561;
                            _3549 = _3843 + _3562;
                            if (_3567 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3567;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3552;
                        frontier_phi_82_pred_1 = _3551;
                        frontier_phi_82_pred_2 = _3550;
                        frontier_phi_82_pred_3 = _3549;
                        frontier_phi_82_pred_4 = _3548;
                        frontier_phi_82_pred_5 = _3547;
                    }
                    _3190 = frontier_phi_82_pred;
                    _3188 = frontier_phi_82_pred_1;
                    _3186 = frontier_phi_82_pred_2;
                    _3184 = frontier_phi_82_pred_3;
                    _3182 = frontier_phi_82_pred_4;
                    _3180 = frontier_phi_82_pred_5;
                    uint _3346 = _3345 + 1u;
                    if (_3346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3339 = _3180;
                        _3340 = _3182;
                        _3341 = _3184;
                        _3342 = _3186;
                        _3343 = _3188;
                        _3344 = _3190;
                        _3345 = _3346;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3186;
                frontier_phi_63_64_ladder_1 = _3190;
                frontier_phi_63_64_ladder_2 = _3188;
                frontier_phi_63_64_ladder_3 = _3184;
                frontier_phi_63_64_ladder_4 = _3182;
                frontier_phi_63_64_ladder_5 = _3180;
            }
            else
            {
                frontier_phi_63_64_ladder = _3064;
                frontier_phi_63_64_ladder_1 = _3068;
                frontier_phi_63_64_ladder_2 = _3066;
                frontier_phi_63_64_ladder_3 = _3062;
                frontier_phi_63_64_ladder_4 = _3060;
                frontier_phi_63_64_ladder_5 = _3058;
            }
            _3179 = frontier_phi_63_64_ladder_5;
            _3181 = frontier_phi_63_64_ladder_4;
            _3183 = frontier_phi_63_64_ladder_3;
            _3185 = frontier_phi_63_64_ladder;
            _3187 = frontier_phi_63_64_ladder_2;
            _3189 = frontier_phi_63_64_ladder_1;
        }
        float _3194 = isnan(1.0) ? _928 : (isnan(_928) ? 1.0 : min(_928, 1.0));
        _2991 = (_3194 * _3185) + _2503;
        _2993 = (_3194 * _3187) + _2505;
        _2995 = (_3194 * _3189) + _2507;
        _2997 = ((_3179 * _913) * _3194) + _2841;
        _2999 = ((_3181 * _915) * _3194) + _2843;
        _3001 = ((_3183 * _916) * _3194) + _2845;
    }
    else
    {
        _2991 = _2503;
        _2993 = _2505;
        _2995 = _2507;
        _2997 = _2841;
        _2999 = _2843;
        _3001 = _2845;
    }
    float _5018 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _5029 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _5040 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _3018 = ((isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0))) * (_2991 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _928))) + ((_2997 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1764)) * cbPerFrame._m0[3u].x);
    float _3019 = ((isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_2993 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _928))) + ((_2999 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1764)) * cbPerFrame._m0[3u].x);
    float _3020 = ((isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0))) * (_2995 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _928))) + ((_3001 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1764)) * cbPerFrame._m0[3u].x);
    uint _3021 = _855 + 6u;
    float _3029 = _800 / cbSceneParam._m0[86u].x;
    float _3030 = _801 / cbSceneParam._m0[86u].y;
    vec4 _3044 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, (log2((isnan(cbSceneParam._m0[77u].w) ? _723 : (isnan(_723) ? cbSceneParam._m0[77u].w : min(_723, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3046 = _3044.x;
    float _3047 = _3044.y;
    float _3048 = _3044.z;
    float _3049 = _3044.w;
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    if (_723 > cbSceneParam._m0[78u].w)
    {
        float _3083 = isnan(_723) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _723 : min(cbSceneParam._m0[80u].w, _723));
        float _3084 = _3083 / _723;
        float _3095 = _3084 * _773;
        float _3096 = _774 * _3084;
        float _3097 = (-0.0) - _3096;
        float _3099 = _3084 * _775;
        float _3101 = (cbSceneParam._m0[77u].w * _3097) / _3083;
        float _3102 = _3101 + cbSceneParam._m0[79u].w;
        float _3103 = cbSceneParam._m0[79u].w - _3096;
        float _3109 = sqrt(((_3095 * _3095) + (_3096 * _3096)) + (_3099 * _3099));
        float _3112 = (1.0 - (cbSceneParam._m0[77u].w / _3083)) * _3109;
        float _3117 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3119 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3296;
        if (abs((_3097 - _3101) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3296 = ((((_3102 > 0.0) ? exp2(_3117 * _3102) : (2.0 - exp2(_3119 * _3102))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3112;
        }
        else
        {
            float _3240 = 1.0 / cbSceneParam._m0[80u].x;
            float _3241 = isnan(_3103) ? _3102 : (isnan(_3102) ? _3103 : max(_3102, _3103));
            float _3242 = isnan(_3103) ? _3102 : (isnan(_3102) ? _3103 : min(_3102, _3103));
            float _3251 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : min(_3241, 0.0));
            float _3252 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : min(_3242, 0.0));
            _3296 = ((abs(_3109 / _3097) * cbSceneParam._m0[80u].y) * ((((_3251 - _3252) * 2.0) - ((exp2(_3117 * (isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0)))) - exp2(_3117 * (isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))))) * _3240)) - ((exp2(_3119 * _3251) - exp2(_3119 * _3252)) * _3240))) + (_3112 * cbSceneParam._m0[80u].z);
        }
        vec4 _3298 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, 1.0), 0.0);
        float _3307 = exp2((_3296 * (-1.44269502162933349609375)) * (1.0 - _3298.w));
        float _3308 = log2(_3307);
        float _3324 = log2(_3049);
        _3121 = (exp2(_3324 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].x)) * _3298.x) / cbSceneParam._m0[78u].x)) + _3046;
        _3123 = (exp2(_3324 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].y)) * _3298.y) / cbSceneParam._m0[78u].y)) + _3047;
        _3125 = (exp2(_3324 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].z)) * _3298.z) / cbSceneParam._m0[78u].z)) + _3048;
        _3127 = _3307 * _3049;
    }
    else
    {
        _3121 = _3046;
        _3123 = _3047;
        _3125 = _3048;
        _3127 = _3049;
    }
    bool _3334;
    vec4 _3137;
    vec4 _3159;
    float _3161;
    float _3165;
    float _3166;
    float _3167;
    float _3168;
    bool _3178;
    for (;;)
    {
        _3137 = cbMatDynParam._m0[0u];
        float _3139 = roundEven(_3137.y);
        bool _3140 = _3139 == 3.0;
        float _3141 = log2(_3127);
        float _3148 = exp2(_3141 * cbSceneParam._m0[78u].x) * _3018;
        float _3149 = exp2(_3141 * cbSceneParam._m0[78u].y) * _3019;
        float _3150 = exp2(_3141 * cbSceneParam._m0[78u].z) * _3020;
        float _3157 = _789 + (-0.5);
        _3159 = cbMtdParam._m0[1u];
        _3161 = _3159.y * _3157;
        float _3164 = (_3139 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3165 = _3164 * (_3140 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3121)));
        _3166 = _3164 * (_3140 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3123)));
        _3167 = _3164 * (_3140 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3125)));
        _3168 = _3157 * 0.999000012874603271484375;
        _3178 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3178)
        {
            if ((cbInstanceData._m0[_855 + 7u].x + _3168) < 0.5)
            {
                _3334 = true;
                break;
            }
        }
        uint _3275 = _857 + uint(_3137.w);
        if ((cbInstanceData._m0[_3275].w < 1.0) && ((cbInstanceData._m0[_3275].w + _3168) < 0.5))
        {
            _3334 = true;
            break;
        }
        if ((_3161 + 1.0) < _3159.x)
        {
            _3334 = true;
            break;
        }
        _3334 = false;
        break;
    }
    float _3538;
    if (_3334)
    {
        discard_state = true;
        _3538 = 0.0;
    }
    else
    {
        _3538 = cbInstanceData._m0[_3021].w;
    }
    SV_Target.x = _3165;
    SV_Target.y = _3166;
    SV_Target.z = _3167;
    SV_Target.w = _3538;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3021].w;
    discard_exit();
}


