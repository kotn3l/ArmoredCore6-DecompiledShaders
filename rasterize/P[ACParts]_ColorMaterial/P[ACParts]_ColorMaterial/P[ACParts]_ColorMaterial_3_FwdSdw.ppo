#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1286;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = cbMtdParam._m0[25u].x + TEXCOORD.y;
    vec4 _269 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (_255 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _276 = log2(0.0);
    float _278 = exp2(_276 * cbMtdParam._m0[24u].y);
    float _282 = _278 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _278);
    float _283 = _278 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _278);
    float _284 = _278 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _278);
    float _285 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _286 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _287 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _288 = isnan(1.0) ? _285 : (isnan(_285) ? 1.0 : min(_285, 1.0));
    float _290 = isnan(1.0) ? _286 : (isnan(_286) ? 1.0 : min(_286, 1.0));
    float _291 = isnan(1.0) ? _287 : (isnan(_287) ? 1.0 : min(_287, 1.0));
    vec4 _304 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _255) + cbTextureTilingScale._m0[0u].w));
    float _308 = _304.z;
    float _309 = _304.w;
    float _310 = 1.0 - _309;
    float _319 = exp2(log2((1.0 - (_310 * _308)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _320 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = isnan(1.0) ? _320 : (isnan(_320) ? 1.0 : min(_320, 1.0));
    float _330 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_310 * _310) * _308))) * cbMtdParam._m0[26u].y);
    float _331 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    vec4 _344 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _350 = (_344.y * ((isnan(1.0) ? _331 : (isnan(_331) ? 1.0 : min(_331, 1.0))) - _309)) + _309;
    float _357 = roundEven(5.0 - ((_344.x + (-0.02500000037252902984619140625)) * 8.0));
    float _358 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _359 = isnan(4.0) ? _358 : (isnan(_358) ? 4.0 : min(_358, 4.0));
    float _372 = floor(_359);
    vec4 _375 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _255) + cbTextureTilingScale._m0[10u].w, _372));
    float _385 = cbMtdParam._m0[10u].x * _375.x;
    float _386 = cbMtdParam._m0[10u].y * _375.y;
    float _387 = cbMtdParam._m0[10u].z * _375.z;
    vec4 _399 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _255) + cbTextureTilingScale._m0[1u].w));
    float _419 = (((cbMtdParam._m0[9u].x * _399.x) - _385) * _350) + _385;
    float _420 = (((cbMtdParam._m0[9u].y * _399.y) - _386) * _350) + _386;
    float _421 = (((cbMtdParam._m0[9u].z * _399.z) - _387) * _350) + _387;
    vec4 _434 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    float _454 = (((cbMtdParam._m0[20u].x * _434.x) - _419) * _321) + _419;
    float _455 = (((cbMtdParam._m0[20u].y * _434.y) - _420) * _321) + _420;
    float _456 = (((cbMtdParam._m0[20u].z * _434.z) - _421) * _321) + _421;
    vec4 _468 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    float _492 = (_269.x * 4.5) * ((((cbMtdParam._m0[23u].x * _468.x) - _454) * _288) + _454);
    float _494 = (_269.y * 4.5) * ((((cbMtdParam._m0[23u].y * _468.y) - _455) * _290) + _455);
    float _496 = (_269.z * 4.5) * ((((cbMtdParam._m0[23u].z * _468.z) - _456) * _291) + _456);
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[26u].w;
    _198[0u] = cbMtdParam._m0[27u].x;
    _197[1u] = cbMtdParam._m0[27u].y;
    _198[1u] = cbMtdParam._m0[27u].z;
    _197[2u] = cbMtdParam._m0[27u].w;
    _198[2u] = cbMtdParam._m0[28u].x;
    _197[3u] = cbMtdParam._m0[28u].y;
    _198[3u] = cbMtdParam._m0[28u].z;
    _197[4u] = cbMtdParam._m0[28u].w;
    _198[4u] = cbMtdParam._m0[29u].x;
    float _528 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    uint _530 = uint(int(isnan(4.0) ? _528 : (isnan(_528) ? 4.0 : min(_528, 4.0))));
    float _542 = ((cbMtdParam._m0[30u].x - _198[_530]) * _350) + _198[_530];
    float _547 = ((cbMtdParam._m0[30u].z - _542) * _321) + _542;
    float _555 = ((cbMtdParam._m0[31u].x - _547) * _288) + _547;
    vec4 _571 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w, _372));
    float _573 = _571.x;
    float _574 = _571.y;
    float _576 = _571.z + _197[_530];
    vec4 _589 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _255) + cbTextureTilingScale._m0[6u].w));
    float _597 = (((cbMtdParam._m0[29u].w - _576) + _589.z) * _350) + _576;
    vec4 _610 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _255) + cbTextureTilingScale._m0[8u].w));
    float _618 = (((cbMtdParam._m0[30u].y - _597) + _610.z) * _321) + _597;
    float _624 = ((((_308 * 2.0) * _618) - _618) * cbMtdParam._m0[25u].y) + _618;
    vec4 _636 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _255) + cbTextureTilingScale._m0[9u].w));
    float _644 = (((_636.z + cbMtdParam._m0[30u].w) - _624) * _291) + _624;
    float _657 = ((_589.x - _573) * _350) + _573;
    float _658 = ((_589.y - _574) * _350) + _574;
    float _663 = ((_610.x - _657) * _321) + _657;
    float _664 = ((_610.y - _658) * _321) + _658;
    float _673 = ((((_636.x - _663) * _288) + _663) * 2.0) + (-1.0);
    float _674 = ((((_636.y - _664) * _290) + _664) * 2.0) + (-1.0);
    float _675 = dot(vec2(_673, _674), vec2(_673, _674));
    float _3970 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _680 = sqrt(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))));
    float _683 = _673 + (cbMtdParam._m0[25u].z * ((_304.x * 2.0) + (-1.0)));
    float _684 = _674 + (cbMtdParam._m0[25u].z * ((_304.y * 2.0) + (-1.0)));
    float _687 = fma(_680, _233 * NORMAL.x, fma(_684, _240 * TANGENT.x, (_226 * _218) * _683));
    float _690 = fma(_680, _233 * NORMAL.y, fma(_684, _240 * TANGENT.y, (_226 * _219) * _683));
    float _693 = fma(_680, _233 * NORMAL.z, fma(_684, _240 * TANGENT.z, (_226 * _220) * _683));
    float _697 = inversesqrt(dot(vec3(_687, _690, _693), vec3(_687, _690, _693)));
    float _698 = _697 * _687;
    float _699 = _697 * _690;
    float _700 = _697 * _693;
    float _3981 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _701 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4003 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4014 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _4025 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _705 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _721 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _771 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _761);
    float _772 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _761);
    float _773 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _761);
    float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
    float _778 = _771 * _777;
    float _779 = _772 * _777;
    float _780 = _773 * _777;
    float _786 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _787 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _789 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _791 = _789.w;
    float _809 = fma(_700, cbSceneParam._m0[5u].z, fma(_699, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _698));
    float _812 = fma(_700, cbSceneParam._m0[6u].z, fma(_699, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _698));
    float _815 = fma(_700, cbSceneParam._m0[7u].z, fma(_699, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _698));
    vec4 _817 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _828 = (((_817.y - _701) + (_817.w * _701)) * cbMtdParam._m0[3u].x) + _701;
    uint _841 = uint(roundEven(NORMAL.w)) * 13u;
    uint _844 = (_841 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _850 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_844].x;
    float _851 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * cbInstanceData._m0[_844].y;
    float _852 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_844].z;
    float _4036 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _4058 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    vec4 _856 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _861 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _872 = (((_861.x - _705) + (_861.w * _705)) * cbMtdParam._m0[3u].x) + _705;
    float _885 = (cbMtdParam._m0[3u].x * (((_853 * _791) - _853) + _856.x)) + _853;
    float _886 = (cbMtdParam._m0[3u].x * (((_854 * _791) - _854) + _856.y)) + _854;
    float _887 = (cbMtdParam._m0[3u].x * (((_855 * _791) - _855) + _856.z)) + _855;
    float _888 = 1.0 - _872;
    float _889 = _888 * _885;
    float _890 = _888 * _886;
    float _891 = _888 * _887;
    float _896 = (_885 + (-0.039999999105930328369140625)) * _872;
    float _897 = (_886 + (-0.039999999105930328369140625)) * _872;
    float _898 = (_887 + (-0.039999999105930328369140625)) * _872;
    float _899 = _896 + 0.039999999105930328369140625;
    float _901 = _897 + 0.039999999105930328369140625;
    float _902 = _898 + 0.039999999105930328369140625;
    vec4 _911 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _786, cbSceneParam._m0[86u].y * _787));
    float _914 = _911.x * TEXCOORD_5.w;
    float _915 = dot(vec3(_698, _699, _700), vec3(_778, _779, _780));
    float _918 = _915 * 2.0;
    float _922 = (_918 * _698) - _778;
    float _923 = (_918 * _699) - _779;
    float _924 = (_918 * _700) - _780;
    float _928 = abs(dot(vec3(_778, _779, _780), vec3(_698, _699, _700)));
    float _4069 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _930 = sqrt(_828);
    float _941 = exp2((_930 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_930 * 3.0));
    float _947 = (1.0 - _941) * ((_930 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _948 = _941 * _930;
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1285;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1010 = fma(_984, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976));
        float _1014 = fma(_984, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976));
        float _1018 = fma(_984, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976));
        float _1043 = _976 + _698;
        float _1044 = _980 + _699;
        float _1045 = _984 + _700;
        float _1055 = fma(_1045, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043)) - _1010;
        float _1056 = fma(_1045, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043)) - _1014;
        float _1057 = fma(_1045, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043)) - _1018;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1010 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1014 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[34u].z) + ((((((_1018 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1113 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1079.x + (-0.5));
        float _1115 = _1113 * (_1079.y + (-0.5));
        float _1116 = _1113 * (_1079.z + (-0.5));
        float _1123 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1086.x + (-0.5));
        float _1125 = _1123 * (_1086.y + (-0.5));
        float _1126 = _1123 * (_1086.z + (-0.5));
        float _1133 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1093.x + (-0.5));
        float _1135 = _1133 * (_1093.y + (-0.5));
        float _1136 = _1133 * (_1093.z + (-0.5));
        float _1143 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1100.x + (-0.5));
        float _1145 = _1143 * (_1100.y + (-0.5));
        float _1146 = _1143 * (_1100.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1167 = (dot(vec3(_698, _699, _700), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1177 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _4117 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1179 + 1.0))) + _1184) * _1147;
        float _1194 = _1115 * 0.5;
        float _1195 = _1125 * 0.5;
        float _1196 = _1135 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_698, _699, _700), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _4150 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1221 + 1.0))) + _1226) * _1148;
        float _1236 = _1116 * 0.5;
        float _1237 = _1126 * 0.5;
        float _1238 = _1136 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_698, _699, _700), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4183 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1263 + 1.0))) + _1268) * _1149;
        _1285 = _1116;
        _1287 = _1115;
        _1288 = _1114;
        _1289 = _1126;
        _1290 = _1125;
        _1291 = _1124;
        _1292 = _1136;
        _1293 = _1135;
        _1294 = _1134;
        _1295 = _1149;
        _1296 = _1148;
        _1297 = _1147;
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
    }
    else
    {
        _1285 = _1286;
        _1287 = _1286;
        _1288 = _1286;
        _1289 = _1286;
        _1290 = _1286;
        _1291 = _1286;
        _1292 = _1286;
        _1293 = _1286;
        _1294 = _1286;
        _1295 = _1286;
        _1296 = _1286;
        _1297 = _1286;
        _1298 = 0.0;
        _1299 = 0.0;
        _1300 = 0.0;
    }
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1323 = fma(_984, cbModelParam._m0[30u].z, fma(_980, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976));
        float _1327 = fma(_984, cbModelParam._m0[31u].z, fma(_980, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976));
        float _1331 = fma(_984, cbModelParam._m0[32u].z, fma(_980, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976));
        float _1354 = _976 + _698;
        float _1355 = _980 + _699;
        float _1356 = _984 + _700;
        float _1366 = fma(_1356, cbModelParam._m0[30u].z, fma(_1355, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1354)) - _1323;
        float _1367 = fma(_1356, cbModelParam._m0[31u].z, fma(_1355, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1354)) - _1327;
        float _1368 = fma(_1356, cbModelParam._m0[32u].z, fma(_1355, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1354)) - _1331;
        float _1372 = inversesqrt(dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368)));
        float _1385 = ((_1372 * _1366) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1323 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1372 * _1367) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1327 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1372 * _1368) / cbModelParam._m0[35u].z) + ((((((_1331 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        float _1422 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1389.x + (-0.5));
        float _1424 = _1422 * (_1389.y + (-0.5));
        float _1425 = _1422 * (_1389.z + (-0.5));
        float _1432 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1396.x + (-0.5));
        float _1434 = _1432 * (_1396.y + (-0.5));
        float _1435 = _1432 * (_1396.z + (-0.5));
        float _1442 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1403.x + (-0.5));
        float _1444 = _1442 * (_1403.y + (-0.5));
        float _1445 = _1442 * (_1403.z + (-0.5));
        float _1452 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1410.x + (-0.5));
        float _1454 = _1452 * (_1410.y + (-0.5));
        float _1455 = _1452 * (_1410.z + (-0.5));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = _1423 * 0.5;
        float _1460 = _1433 * 0.5;
        float _1461 = _1443 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_698, _699, _700), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4246 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1486 + 1.0))) + _1491) * _1456;
        float _1501 = _1424 * 0.5;
        float _1502 = _1434 * 0.5;
        float _1503 = _1444 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_698, _699, _700), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4279 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1528 + 1.0))) + _1533) * _1457;
        float _1543 = _1425 * 0.5;
        float _1544 = _1435 * 0.5;
        float _1545 = _1445 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_698, _699, _700), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4312 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1570 + 1.0))) + _1575) * _1458;
        _1592 = _1425;
        _1593 = _1424;
        _1594 = _1423;
        _1595 = _1435;
        _1596 = _1434;
        _1597 = _1433;
        _1598 = _1445;
        _1599 = _1444;
        _1600 = _1443;
        _1601 = _1458;
        _1602 = _1457;
        _1603 = _1456;
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
    }
    else
    {
        _1592 = _1286;
        _1593 = _1286;
        _1594 = _1286;
        _1595 = _1286;
        _1596 = _1286;
        _1597 = _1286;
        _1598 = _1286;
        _1599 = _1286;
        _1600 = _1286;
        _1601 = _1286;
        _1602 = _1286;
        _1603 = _1286;
        _1604 = 0.0;
        _1605 = 0.0;
        _1606 = 0.0;
    }
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1298)) + _1298;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1299)) + _1299;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1300)) + _1300;
    float _1639 = fma(_1618, cbSceneParam._m0[89u].z, fma(_1617, cbSceneParam._m0[89u].y, _1616 * cbSceneParam._m0[89u].x));
    float _1642 = fma(_1618, cbSceneParam._m0[90u].z, fma(_1617, cbSceneParam._m0[90u].y, _1616 * cbSceneParam._m0[90u].x));
    float _1645 = fma(_1618, cbSceneParam._m0[91u].z, fma(_1617, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1616));
    float _1660 = _922 * 0.5;
    float _1661 = _923 * 0.5;
    float _1662 = _924 * 0.5;
    float _1663 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1666 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1669 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1703;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1676 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1285, _1289, _1292, _1295));
        float _1680 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1684 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1691 = dot(vec4(cbModelParam._m0[39u]), vec4(_1660, _1661, _1662, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1691) ? 0.0 : (isnan(0.0) ? _1691 : max(0.0, _1691))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1714;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1705 = dot(vec4(cbModelParam._m0[40u]), vec4(_1660, _1661, _1662, 1.0));
        _1714 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1714 = 1.0;
    }
    float _1718 = (_1714 * cbModelParam._m0[1u].x) + (_1703 * (1.0 - cbModelParam._m0[1u].x));
    float _1728 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _828);
    float _1729 = isnan(_1728) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1728 : min(cbModelParam._m0[25u].z, _1728));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1778 = fma(_984, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976)) + cbModelParam._m0[13u].w;
        float _1782 = fma(_984, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976)) + cbModelParam._m0[14u].w;
        float _1786 = fma(_984, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976)) + cbModelParam._m0[15u].w;
        float _1789 = fma(_924, cbModelParam._m0[13u].z, fma(_923, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _922));
        float _1792 = fma(_924, cbModelParam._m0[14u].z, fma(_923, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _922));
        float _1795 = fma(_924, cbModelParam._m0[15u].z, fma(_923, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _922));
        float _1823;
        if (_1789 > 0.0)
        {
            _1823 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1823 = frontier_phi_14_12_ladder;
        }
        float _1999;
        if (_1792 > 0.0)
        {
            _1999 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1999 = frontier_phi_23_19_ladder;
        }
        float _2294;
        if (_1795 > 0.0)
        {
            _2294 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2294 = frontier_phi_35_30_ladder;
        }
        float _2296 = isnan(_1999) ? _1823 : (isnan(_1823) ? _1999 : min(_1823, _1999));
        float _2297 = isnan(_2294) ? _2296 : (isnan(_2296) ? _2294 : min(_2296, _2294));
        float _2301 = (_2297 * _1789) + _1778;
        float _2302 = (_2297 * _1792) + _1782;
        float _2303 = (_2297 * _1795) + _1786;
        float _2304 = _2297 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2304;
        float _2308 = _2304 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 > _2308) || ((_2302 < _2306) || ((_2301 < _2306) || (_2301 > _2308))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2303, cbModelParam._m0[9u].z, fma(_2302, cbModelParam._m0[9u].y, _2301 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2303, cbModelParam._m0[10u].z, fma(_2302, cbModelParam._m0[10u].y, _2301 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2303, cbModelParam._m0[11u].z, fma(_2302, cbModelParam._m0[11u].y, _2301 * cbModelParam._m0[11u].x))), _1729);
            frontier_phi_13_35_ladder = _2448.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2448.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2448.x * cbModelParam._m0[1u].y;
        }
        _1811 = frontier_phi_13_35_ladder_2;
        _1813 = frontier_phi_13_35_ladder_1;
        _1815 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_922, _923, _924), _1729);
        _1811 = _1799.x * cbModelParam._m0[1u].y;
        _1813 = _1799.y * cbModelParam._m0[1u].y;
        _1815 = _1799.z * cbModelParam._m0[1u].y;
    }
    float _1819 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _828);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1819 : min(cbModelParam._m0[25u].w, _1819));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1877 = fma(_984, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976)) + cbModelParam._m0[21u].w;
        float _1881 = fma(_984, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976)) + cbModelParam._m0[22u].w;
        float _1885 = fma(_984, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976)) + cbModelParam._m0[23u].w;
        float _1888 = fma(_924, cbModelParam._m0[21u].z, fma(_923, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _922));
        float _1891 = fma(_924, cbModelParam._m0[22u].z, fma(_923, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _922));
        float _1894 = fma(_924, cbModelParam._m0[23u].z, fma(_923, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _922));
        float _2004;
        if (_1888 > 0.0)
        {
            _2004 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2004 = frontier_phi_25_21_ladder;
        }
        float _2321;
        if (_1891 > 0.0)
        {
            _2321 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2321 = frontier_phi_37_32_ladder;
        }
        float _2659;
        if (_1894 > 0.0)
        {
            _2659 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2659 = frontier_phi_47_44_ladder;
        }
        float _2661 = isnan(_2321) ? _2004 : (isnan(_2004) ? _2321 : min(_2004, _2321));
        float _2662 = isnan(_2659) ? _2661 : (isnan(_2661) ? _2659 : min(_2661, _2659));
        float _2666 = (_2662 * _1888) + _1877;
        float _2667 = (_2662 * _1891) + _1881;
        float _2668 = (_2662 * _1894) + _1885;
        float _2669 = _2662 * 9.9999997473787516355514526367188e-05;
        float _2670 = (-1.0) - _2669;
        float _2672 = _2669 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2668 > _2672) || ((_2668 < _2670) || ((_2667 > _2672) || ((_2667 < _2670) || ((_2666 < _2670) || (_2666 > _2672))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2668, cbModelParam._m0[17u].z, fma(_2667, cbModelParam._m0[17u].y, _2666 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2668, cbModelParam._m0[18u].z, fma(_2667, cbModelParam._m0[18u].y, _2666 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2668, cbModelParam._m0[19u].z, fma(_2667, cbModelParam._m0[19u].y, _2666 * cbModelParam._m0[19u].x))), _1820);
            frontier_phi_22_47_ladder = _2790.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2790.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2790.x * cbModelParam._m0[1u].z;
        }
        _1913 = frontier_phi_22_47_ladder_2;
        _1915 = frontier_phi_22_47_ladder_1;
        _1917 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_922, _923, _924), _1820);
        _1913 = _1897.x * cbModelParam._m0[1u].z;
        _1915 = _1897.y * cbModelParam._m0[1u].z;
        _1917 = _1897.z * cbModelParam._m0[1u].z;
    }
    float _1930 = (((_947 * _899) + _948) * _914) * ((cbModelParam._m0[1u].w * (_1913 - _1811)) + _1811);
    float _1932 = (((_947 * _901) + _948) * _914) * ((cbModelParam._m0[1u].w * (_1915 - _1813)) + _1813);
    float _1934 = (((_947 * _902) + _948) * _914) * ((cbModelParam._m0[1u].w * (_1917 - _1815)) + _1815);
    float _1937 = fma(_1934, cbSceneParam._m0[89u].z, fma(_1932, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1940 = fma(_1934, cbSceneParam._m0[90u].z, fma(_1932, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1943 = fma(_1934, cbSceneParam._m0[91u].z, fma(_1932, cbSceneParam._m0[91u].y, _1930 * cbSceneParam._m0[91u].x));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1991 = _1978 / _1990;
    float _1992 = _1982 / _1990;
    float _1993 = _1986 / _1990;
    float _2140;
    float _2141;
    float _2142;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2020 = ((uint(_1993 > cbSceneParam._m0[59u].y) + uint(_1993 > cbSceneParam._m0[59u].x)) + uint(_1993 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2021 = _2020 + 43u;
        uint _2029 = _2020 + 44u;
        uint _2037 = _2020 + 45u;
        uint _2045 = _2020 + 46u;
        float _2056 = fma(_1990, cbSceneParam._m0[_2021].w, fma(_1986, cbSceneParam._m0[_2021].z, fma(_1982, cbSceneParam._m0[_2021].y, _1978 * cbSceneParam._m0[_2021].x)));
        float _2060 = fma(_1990, cbSceneParam._m0[_2029].w, fma(_1986, cbSceneParam._m0[_2029].z, fma(_1982, cbSceneParam._m0[_2029].y, _1978 * cbSceneParam._m0[_2029].x)));
        float _2068 = fma(_1990, cbSceneParam._m0[_2045].w, fma(_1986, cbSceneParam._m0[_2045].z, fma(_1982, cbSceneParam._m0[_2045].y, _1978 * cbSceneParam._m0[_2045].x)));
        float _2073 = cbSceneParam._m0[33u].z * _2068;
        float _2075 = cbSceneParam._m0[33u].w * _2068;
        float _2078 = fma(_1990, cbSceneParam._m0[_2037].w, fma(_1986, cbSceneParam._m0[_2037].z, fma(_1982, cbSceneParam._m0[_2037].y, _1978 * cbSceneParam._m0[_2037].x))) / _2068;
        float _2126 = (cbSceneParam._m0[33u].x - sqrt(((_1992 * _1992) + (_1991 * _1991)) + (_1993 * _1993))) * cbSceneParam._m0[33u].y;
        float _4438 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2133 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2073 + _2056) / _2068, (_2075 + _2060) / _2068), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2075 + _2056) / _2068, (_2060 - _2073) / _2068), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 - _2073) / _2068, (_2060 - _2075) / _2068), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 - _2075) / _2068, (_2073 + _2060) / _2068), _2078), 0.0)).x), vec4(0.25)));
        _2140 = 1.0 - (_2133 * cbSceneParam._m0[34u].x);
        _2141 = 1.0 - (_2133 * cbSceneParam._m0[34u].y);
        _2142 = 1.0 - (_2133 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2140 = 1.0;
        _2141 = 1.0;
        _2142 = 1.0;
    }
    float _2206;
    float _2208;
    float _2210;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2194 = fma(_1990, cbSceneParam._m0[63u].w, fma(_1986, cbSceneParam._m0[63u].z, fma(_1982, cbSceneParam._m0[63u].y, _1978 * cbSceneParam._m0[63u].x)));
        float _2195 = fma(_1990, cbSceneParam._m0[60u].w, fma(_1986, cbSceneParam._m0[60u].z, fma(_1982, cbSceneParam._m0[60u].y, _1978 * cbSceneParam._m0[60u].x))) / _2194;
        float _2196 = fma(_1990, cbSceneParam._m0[61u].w, fma(_1986, cbSceneParam._m0[61u].z, fma(_1982, cbSceneParam._m0[61u].y, _1978 * cbSceneParam._m0[61u].x))) / _2194;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2195 >= cbSceneParam._m0[64u].x) && (_2196 >= cbSceneParam._m0[64u].y)) && (_2195 <= cbSceneParam._m0[64u].z)) && (_2196 <= cbSceneParam._m0[64u].w))
        {
            float _2334 = fma(_1990, cbSceneParam._m0[62u].w, fma(_1986, cbSceneParam._m0[62u].z, fma(_1982, cbSceneParam._m0[62u].y, _1978 * cbSceneParam._m0[62u].x))) / _2194;
            float _2338 = isnan(cbSceneParam._m0[41u].w) ? _2334 : (isnan(_2334) ? cbSceneParam._m0[41u].w : max(_2334, cbSceneParam._m0[41u].w));
            float _2381 = (cbSceneParam._m0[33u].x - sqrt(((_1992 * _1992) + (_1991 * _1991)) + (_1993 * _1993))) * cbSceneParam._m0[33u].y;
            float _4454 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
            float _2388 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2195, cbSceneParam._m0[33u].w + _2196), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2195, _2196 - cbSceneParam._m0[33u].z), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2195 - cbSceneParam._m0[33u].z, _2196 - cbSceneParam._m0[33u].w), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2195 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2196), _2338), 0.0)).x), vec4(0.25)));
            float _2392 = 1.0 - (_2388 * cbSceneParam._m0[34u].x);
            float _2393 = 1.0 - (_2388 * cbSceneParam._m0[34u].y);
            float _2394 = 1.0 - (_2388 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2394) ? _2142 : (isnan(_2142) ? _2394 : min(_2142, _2394));
            frontier_phi_34_33_ladder_1 = isnan(_2393) ? _2141 : (isnan(_2141) ? _2393 : min(_2141, _2393));
            frontier_phi_34_33_ladder_2 = isnan(_2392) ? _2140 : (isnan(_2140) ? _2392 : min(_2140, _2392));
        }
        else
        {
            frontier_phi_34_33_ladder = _2142;
            frontier_phi_34_33_ladder_1 = _2141;
            frontier_phi_34_33_ladder_2 = _2140;
        }
        _2206 = frontier_phi_34_33_ladder_2;
        _2208 = frontier_phi_34_33_ladder_1;
        _2210 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2206 = _2140;
        _2208 = _2141;
        _2210 = _2142;
    }
    uvec4 _2215 = floatBitsToUint(cbInstanceData._m0[_841 + 5u]);
    uint _2217 = _2215.x * 14u;
    uint _2218 = _2217 + 13u;
    float _2225 = _914 + (-1.0);
    float _2230 = (cbLight._m0[_2218].x * _2225) + 1.0;
    float _2231 = (cbLight._m0[_2218].y * _2225) + 1.0;
    float _2232 = (cbLight._m0[_2218].z * _2225) + 1.0;
    float _2233 = (cbLight._m0[_2218].w * _2225) + 1.0;
    uint _2234 = _2217 + 5u;
    float _2240 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
    uint _2244 = _2217 + 4u;
    float _2253 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2257 = _2217 | 1u;
    float _2268 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_698, _699, _700));
    float _2271 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_698, _699, _700));
    float _4490 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _4501 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2276 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2278 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * 0.3183098733425140380859375;
    float _2285 = ((cbLight._m0[_2234].x * _2240) * _2278) + (((cbLight._m0[_2244].x * _2206) * _2253) * _2276);
    float _2286 = ((_2240 * cbLight._m0[_2234].y) * _2278) + (((cbLight._m0[_2244].y * _2208) * _2253) * _2276);
    float _2287 = ((_2240 * cbLight._m0[_2234].z) * _2278) + (((cbLight._m0[_2244].z * _2210) * _2253) * _2276);
    uvec4 _2291 = floatBitsToUint(cbLight._m0[_2217 + 12u]);
    bool _2293 = _2291.x == 0u;
    float _2395;
    float _2397;
    float _2399;
    if (_2293)
    {
        _2395 = _2285;
        _2397 = _2286;
        _2399 = _2287;
    }
    else
    {
        uint _2403 = _2217 + 6u;
        float _2419 = (dot(vec3(cbLight._m0[_2217 + 2u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2420 = _2419 * _2419;
        float _4512 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2421 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2422 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2395 = (((cbLight._m0[_2403].x * 0.3183098733425140380859375) * _2421) * _2422) + _2285;
        _2397 = (((cbLight._m0[_2403].y * 0.3183098733425140380859375) * _2421) * _2422) + _2286;
        _2399 = (((cbLight._m0[_2403].z * 0.3183098733425140380859375) * _2421) * _2422) + _2287;
    }
    bool _2402 = _2291.y == 0u;
    float _2457;
    float _2459;
    float _2461;
    if (_2402)
    {
        _2457 = _2395;
        _2459 = _2397;
        _2461 = _2399;
    }
    else
    {
        uint _2630 = _2217 + 7u;
        float _2646 = (dot(vec3(cbLight._m0[_2217 + 3u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2647 = _2646 * _2646;
        float _4528 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2648 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2649 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2457 = (((cbLight._m0[_2630].x * 0.3183098733425140380859375) * _2648) * _2649) + _2395;
        _2459 = (((cbLight._m0[_2630].y * 0.3183098733425140380859375) * _2648) * _2649) + _2397;
        _2461 = (((cbLight._m0[_2630].z * 0.3183098733425140380859375) * _2648) * _2649) + _2399;
    }
    uint _2464 = _2217 + 8u;
    float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _828) * 0.949999988079071044921875);
    float _2478 = _2477 * _2477;
    float _2479 = cbLight._m0[_2217].x + _778;
    float _2480 = cbLight._m0[_2217].y + _779;
    float _2481 = cbLight._m0[_2217].z + _780;
    float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
    float _2486 = _2485 * _2479;
    float _2487 = _2485 * _2480;
    float _2488 = _2485 * _2481;
    float _2489 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2217].xyz));
    float _4544 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _4555 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _2493 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2494 = dot(vec3(_698, _699, _700), vec3(_2486, _2487, _2488));
    float _4566 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2498 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2486, _2487, _2488));
    float _4577 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2502 = _2478 * _2478;
    float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
    float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0);
    float _2515 = 0.959999978542327880859375 - _896;
    float _2517 = 0.959999978542327880859375 - _897;
    float _2518 = 0.959999978542327880859375 - _898;
    float _2525 = 1.0 - _2478;
    float _2536 = (0.5 / (((_2493 * ((_2492 * _2525) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2525) + _2478) * _2492))) * _2492;
    float _4588 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2538 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
    uint _2552 = _2217 + 9u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _828) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2257].x + _778;
    float _2566 = cbLight._m0[_2257].y + _779;
    float _2567 = cbLight._m0[_2257].z + _780;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2257].xyz));
    float _4599 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2579 = dot(vec3(_698, _699, _700), vec3(_2572, _2573, _2574));
    float _4610 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2583 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2572, _2573, _2574));
    float _4621 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2587 = _2564 * _2564;
    float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
    float _2598 = exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0);
    float _2605 = 1.0 - _2564;
    float _2615 = (0.5 / (((_2493 * ((_2578 * _2605) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2605) + _2564) * _2578))) * _2578;
    float _4632 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2617 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
    float _2627 = (((((_2598 * _2515) + _899) * cbLight._m0[_2552].x) * _2617) * _2240) + ((((cbLight._m0[_2464].x * _2206) * ((_2514 * _2515) + _899)) * _2538) * _2253);
    float _2628 = (((((_2598 * _2517) + _901) * cbLight._m0[_2552].y) * _2617) * _2240) + ((((cbLight._m0[_2464].y * _2208) * ((_2514 * _2517) + _901)) * _2538) * _2253);
    float _2629 = (((((_2598 * _2518) + _902) * cbLight._m0[_2552].z) * _2617) * _2240) + ((((cbLight._m0[_2464].z * _2210) * ((_2514 * _2518) + _902)) * _2538) * _2253);
    float _2685;
    float _2687;
    float _2689;
    if (_2293)
    {
        _2685 = _2627;
        _2687 = _2628;
        _2689 = _2629;
    }
    else
    {
        uint _2691 = _2217 + 2u;
        uint _2695 = _2217 + 10u;
        float _2709 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2691].w)) * _828) * 0.949999988079071044921875);
        float _2710 = _2709 * _2709;
        float _2711 = cbLight._m0[_2691].x + _778;
        float _2712 = cbLight._m0[_2691].y + _779;
        float _2713 = cbLight._m0[_2691].z + _780;
        float _2717 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
        float _2718 = _2717 * _2711;
        float _2719 = _2717 * _2712;
        float _2720 = _2717 * _2713;
        float _2721 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2691].xyz));
        float _4643 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2725 = dot(vec3(_698, _699, _700), vec3(_2718, _2719, _2720));
        float _4654 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2729 = dot(vec3(cbLight._m0[_2691].xyz), vec3(_2718, _2719, _2720));
        float _4665 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2733 = _2710 * _2710;
        float _2737 = ((_2728 * _2728) * (_2733 + (-1.0))) + 1.0;
        float _2744 = exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0);
        float _2751 = 1.0 - _2710;
        float _2761 = (0.5 / (((_2493 * ((_2724 * _2751) + _2710)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2751) + _2710) * _2724))) * _2724;
        float _4676 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2763 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2733 / ((_2737 * _2737) * 3.141590118408203125));
        float _2764 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2685 = (((((_2744 * _2515) + _899) * cbLight._m0[_2695].x) * _2763) * _2764) + _2627;
        _2687 = (((((_2744 * _2517) + _901) * cbLight._m0[_2695].y) * _2763) * _2764) + _2628;
        _2689 = (((((_2744 * _2518) + _902) * cbLight._m0[_2695].z) * _2763) * _2764) + _2629;
    }
    float _2795;
    float _2797;
    float _2799;
    if (_2402)
    {
        _2795 = _2685;
        _2797 = _2687;
        _2799 = _2689;
    }
    else
    {
        uint _2806 = _2217 + 3u;
        uint _2810 = _2217 + 11u;
        float _2824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2806].w)) * _828) * 0.949999988079071044921875);
        float _2825 = _2824 * _2824;
        float _2826 = cbLight._m0[_2806].x + _778;
        float _2827 = cbLight._m0[_2806].y + _779;
        float _2828 = cbLight._m0[_2806].z + _780;
        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
        float _2833 = _2832 * _2826;
        float _2834 = _2832 * _2827;
        float _2835 = _2832 * _2828;
        float _2836 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2806].xyz));
        float _4692 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2840 = dot(vec3(_698, _699, _700), vec3(_2833, _2834, _2835));
        float _4703 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2844 = dot(vec3(cbLight._m0[_2806].xyz), vec3(_2833, _2834, _2835));
        float _4714 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2848 = _2825 * _2825;
        float _2852 = ((_2843 * _2843) * (_2848 + (-1.0))) + 1.0;
        float _2859 = exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0);
        float _2866 = 1.0 - _2825;
        float _2876 = (0.5 / (((_2493 * ((_2839 * _2866) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2866) + _2825) * _2839))) * _2839;
        float _4725 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2878 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2848 / ((_2852 * _2852) * 3.141590118408203125));
        float _2879 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2795 = (((((_2859 * _2515) + _899) * cbLight._m0[_2810].x) * _2878) * _2879) + _2685;
        _2797 = (((((_2859 * _2517) + _901) * cbLight._m0[_2810].y) * _2878) * _2879) + _2687;
        _2799 = (((((_2859 * _2518) + _902) * cbLight._m0[_2810].z) * _2878) * _2879) + _2689;
    }
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    float _2955;
    if (_2215.y == 0u)
    {
        uvec4 _2900 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2901 = _2900.x;
        uint _2912 = uint((float(_2900.y) * floor(float(uint(cbSceneParam._m0[85u].y * _787) / _2901))) + floor(float(uint(cbSceneParam._m0[85u].x * _786) / _2901)));
        float _2922 = (log2(_1993 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2923 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        uint _2926 = uint(isnan(14.0) ? _2923 : (isnan(_2923) ? 14.0 : min(_2923, 14.0)));
        uvec4 _2931 = texelFetch(g_lightClusterGridBuffer, int(((_2926 << 2u) + (_2912 << 6u)) >> 2u));
        uint _2932 = _2931.x;
        uint _2933 = _2900.z;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        if (((((1u << ((_2933 >> 4u) & 15u)) + 4294967295u) & _2932) == 0u) || ((_2933 & 240u) == 0u))
        {
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
        }
        else
        {
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3021;
            float _3023;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            uint _3163 = 0u;
            uint _3172;
            bool _3173;
            for (;;)
            {
                _3172 = texelFetch(g_lightClassification, int((((_2926 << 5u) + (_2912 << 9u)) + (_3163 << 2u)) >> 2u)).x;
                _3173 = _3172 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3173)
                {
                    frontier_phi_66_pred = _3162;
                    frontier_phi_66_pred_1 = _3161;
                    frontier_phi_66_pred_2 = _3160;
                    frontier_phi_66_pred_3 = _3159;
                    frontier_phi_66_pred_4 = _3158;
                    frontier_phi_66_pred_5 = _3157;
                }
                else
                {
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    uint _3287;
                    _3281 = _3157;
                    _3282 = _3158;
                    _3283 = _3159;
                    _3284 = _3160;
                    _3285 = _3161;
                    _3286 = _3162;
                    _3287 = _3172;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    for (;;)
                    {
                        uint _3291 = uint(findLSB(_3287)) + (_3163 << 5u);
                        uint _3288 = (_3287 + 4294967295u) & _3287;
                        uint _3293 = _3291 * 48u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 3u)).x));
                        uint _3313 = (_3291 * 48u) + 4u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 3u)).x));
                        uint _3332 = (_3291 * 48u) + 8u;
                        vec3 _3343 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x));
                        float _3347 = _3307.x - _1991;
                        float _3348 = _3307.y - _1992;
                        float _3349 = _3307.z - _1993;
                        float _3350 = dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349));
                        float _3353 = inversesqrt(_3350);
                        float _3354 = _3353 * _3347;
                        float _3355 = _3353 * _3348;
                        float _3356 = _3353 * _3349;
                        float _3357 = dot(vec3(_809, _812, _815), vec3(_3354, _3355, _3356));
                        float _3362 = 1.0 - (_3350 * _3307.w);
                        float _4751 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3363 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3364 = sqrt(_3350) * _3326.w;
                        float _3367 = 1.39999997615814208984375 / (_3364 + 1.39999997615814208984375);
                        float _3368 = _3367 * _3367;
                        float _3371 = ((1.0 - _3368) * _3357) + _3368;
                        float _3374 = _3364 * _3364;
                        float _3378 = ((isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0))) * _3363) / ((_3374 * 0.699999988079071044921875) + 1.0);
                        float _3382 = (-0.0) - _1991;
                        float _3383 = (-0.0) - _1992;
                        float _3384 = (-0.0) - _1993;
                        float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                        float _3389 = _3388 * _3382;
                        float _3390 = _3388 * _3383;
                        float _3391 = _3388 * _3384;
                        float _3398 = exp2(log2(1.0 / ((_3374 * 3.5) + 5.0)) * 0.25);
                        float _3399 = 1.0 - _930;
                        float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                        float _3407 = _3406 * _3406;
                        float _3408 = _3407 * _3407;
                        float _3409 = _3389 + _3354;
                        float _3410 = _3390 + _3355;
                        float _3411 = _3391 + _3356;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3419 = dot(vec3(_809, _812, _815), vec3(_3389, _3390, _3391));
                        float _4767 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3423 = dot(vec3(_809, _812, _815), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                        float _4778 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3426 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                        float _3431 = _3367 * _3407;
                        float _3432 = _3431 * _3431;
                        float _3435 = ((1.0 - _3432) * _3357) + _3432;
                        float _4789 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3436 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3437 = 1.0 - _3407;
                        float _3447 = (0.5 / (((_3436 * ((_3422 * _3437) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3407) * _3422))) * _3436;
                        float _4800 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3458 = (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0)))) / ((_3430 * _3430) * ((_3374 * 2.1991131305694580078125) + 3.141590118408203125))) * _3363;
                        _3216 = (_3378 * _3326.x) + _3284;
                        _3217 = (_3378 * _3326.y) + _3285;
                        _3218 = (_3378 * _3326.z) + _3286;
                        _3213 = (_3458 * _3343.x) + _3281;
                        _3214 = (_3458 * _3343.y) + _3282;
                        _3215 = (_3458 * _3343.z) + _3283;
                        if (_3288 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3281 = _3213;
                            _3282 = _3214;
                            _3283 = _3215;
                            _3284 = _3216;
                            _3285 = _3217;
                            _3286 = _3218;
                            _3287 = _3288;
                        }
                    }
                    frontier_phi_66_pred = _3218;
                    frontier_phi_66_pred_1 = _3217;
                    frontier_phi_66_pred_2 = _3216;
                    frontier_phi_66_pred_3 = _3215;
                    frontier_phi_66_pred_4 = _3214;
                    frontier_phi_66_pred_5 = _3213;
                }
                _3023 = frontier_phi_66_pred;
                _3021 = frontier_phi_66_pred_1;
                _3019 = frontier_phi_66_pred_2;
                _3017 = frontier_phi_66_pred_3;
                _3015 = frontier_phi_66_pred_4;
                _3013 = frontier_phi_66_pred_5;
                uint _3164 = _3163 + 1u;
                if (_3164 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3157 = _3013;
                    _3158 = _3015;
                    _3159 = _3017;
                    _3160 = _3019;
                    _3161 = _3021;
                    _3162 = _3023;
                    _3163 = _3164;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
        }
        uvec4 _3026 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3027 = _3026.z;
        uint _3029 = (_3027 >> 8u) & 15u;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        if (((4294967295u << _3029) & _2932) == 0u)
        {
            _3125 = _3012;
            _3127 = _3014;
            _3129 = _3016;
            _3131 = _3018;
            _3133 = _3020;
            _3135 = _3022;
        }
        else
        {
            float _3150 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
            float _3151 = _3150 * _1991;
            float _3152 = _3150 * _1992;
            float _3153 = _3150 * _1993;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3029 < ((_3027 >> 12u) & 15u))
            {
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3264 = _3012;
                float _3265 = _3014;
                float _3266 = _3016;
                float _3267 = _3018;
                float _3268 = _3020;
                float _3269 = _3022;
                uint _3270 = _3029;
                uint _3279;
                bool _3280;
                for (;;)
                {
                    _3279 = texelFetch(g_lightClassification, int((((_2926 << 5u) + (_2912 << 9u)) + (_3270 << 2u)) >> 2u)).x;
                    _3280 = _3279 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3280)
                    {
                        frontier_phi_72_pred = _3269;
                        frontier_phi_72_pred_1 = _3268;
                        frontier_phi_72_pred_2 = _3267;
                        frontier_phi_72_pred_3 = _3266;
                        frontier_phi_72_pred_4 = _3265;
                        frontier_phi_72_pred_5 = _3264;
                    }
                    else
                    {
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3476 = _3264;
                        float _3477 = _3265;
                        float _3478 = _3266;
                        float _3479 = _3267;
                        float _3480 = _3268;
                        float _3481 = _3269;
                        uint _3482 = _3279;
                        uint _3483;
                        vec4 _3508;
                        float _3509;
                        vec4 _3524;
                        vec3 _3536;
                        vec4 _3552;
                        vec4 _3567;
                        float _3613;
                        bool _3614;
                        for (;;)
                        {
                            uint _3493 = ((_3270 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3482));
                            _3483 = (_3482 + 4294967295u) & _3482;
                            uint _3495 = _3493 * 40u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            _3509 = _3508.w;
                            uint _3511 = (_3493 * 40u) + 4u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3526 = (_3493 * 40u) + 8u;
                            _3536 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x));
                            uint _3539 = (_3493 * 40u) + 16u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3493 * 40u) + 20u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3493 * 40u) + 24u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3588 = (_3493 * 40u) + 28u;
                            vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            _3613 = fma(_1993, _3601.z, fma(_1992, _3601.y, _3601.x * _1991)) + _3601.w;
                            _3614 = !((fma(_1993, _3582.z, fma(_1992, _3582.y, _3582.x * _1991)) + _3582.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3614)
                            {
                                float _3641 = _3508.x - _1991;
                                float _3642 = _3508.y - _1992;
                                float _3643 = _3508.z - _1993;
                                float _3644 = dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643));
                                float _3647 = inversesqrt(_3644);
                                float _3648 = _3647 * _3641;
                                float _3649 = _3647 * _3642;
                                float _3650 = _3647 * _3643;
                                float _3654 = 1.0 - (_3644 / (_3509 * _3509));
                                float _4811 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3659 = sqrt(_3644) * _3524.w;
                                float _3661 = 1.39999997615814208984375 / (_3659 + 1.39999997615814208984375);
                                float _3662 = _3661 * _3661;
                                float _3665 = ((1.0 - _3662) * dot(vec3(_3648, _3649, _3650), vec3(_809, _812, _815))) + _3662;
                                float _3668 = _3659 * _3659;
                                float _3672 = (fma(_1993, _3552.z, fma(_1992, _3552.y, _3552.x * _1991)) + _3552.w) / _3613;
                                float _3673 = (fma(_1993, _3567.z, fma(_1992, _3567.y, _3567.x * _1991)) + _3567.w) / _3613;
                                float _3677 = 1.0 - dot(vec2(_3672, _3673), vec2(_3672, _3673));
                                float _4827 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3679 = _3678 * (((isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0))) * _3655) / ((_3668 * 0.699999988079071044921875) + 1.0));
                                float _3691 = exp2(log2(1.0 / ((_3668 * 3.5) + 5.0)) * 0.25);
                                float _3692 = 1.0 - _930;
                                float _3699 = sqrt(1.0 - ((1.0 - (_3692 * _3692)) * (1.0 - (_3691 * _3691))));
                                float _3700 = _3699 * _3699;
                                float _3701 = _3700 * _3700;
                                float _3702 = _3648 - _3151;
                                float _3703 = _3649 - _3152;
                                float _3704 = _3650 - _3153;
                                float _3708 = inversesqrt(dot(vec3(_3702, _3703, _3704), vec3(_3702, _3703, _3704)));
                                float _3712 = dot(vec3(_809, _812, _815), vec3((-0.0) - _3151, (-0.0) - _3152, (-0.0) - _3153));
                                float _4838 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3715 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3716 = dot(vec3(_809, _812, _815), vec3(_3708 * _3702, _3708 * _3703, _3708 * _3704));
                                float _4849 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3723 = ((_3719 * _3719) * (_3701 + (-1.0))) + 1.0;
                                float _3724 = _3661 * _3700;
                                float _3725 = _3724 * _3724;
                                float _3731 = ((1.0 - _3725) * dot(vec3(_809, _812, _815), vec3(_3648, _3649, _3650))) + _3725;
                                float _4860 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3733 = 1.0 - _3700;
                                float _3743 = (0.5 / (((_3732 * ((_3715 * _3733) + _3700)) + 9.9999999392252902907785028219223e-09) + (((_3732 * _3733) + _3700) * _3715))) * _3732;
                                float _4871 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3753 = (_3678 * _3655) * (((_3701 * 3.1415927410125732421875) * (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) / ((_3723 * _3723) * ((_3668 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3679 * _3524.y;
                                frontier_phi_78_pred_1 = _3679 * _3524.x;
                                frontier_phi_78_pred_2 = _3753 * _3536.z;
                                frontier_phi_78_pred_3 = _3753 * _3536.y;
                                frontier_phi_78_pred_4 = _3753 * _3536.x;
                                frontier_phi_78_pred_5 = _3679 * _3524.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3761 = frontier_phi_78_pred;
                            _3760 = frontier_phi_78_pred_1;
                            _3759 = frontier_phi_78_pred_2;
                            _3758 = frontier_phi_78_pred_3;
                            _3757 = frontier_phi_78_pred_4;
                            _3762 = frontier_phi_78_pred_5;
                            _3466 = _3760 + _3479;
                            _3467 = _3761 + _3480;
                            _3468 = _3762 + _3481;
                            _3463 = _3757 + _3476;
                            _3464 = _3758 + _3477;
                            _3465 = _3759 + _3478;
                            if (_3483 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3483;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3468;
                        frontier_phi_72_pred_1 = _3467;
                        frontier_phi_72_pred_2 = _3466;
                        frontier_phi_72_pred_3 = _3465;
                        frontier_phi_72_pred_4 = _3464;
                        frontier_phi_72_pred_5 = _3463;
                    }
                    _3136 = frontier_phi_72_pred;
                    _3134 = frontier_phi_72_pred_1;
                    _3132 = frontier_phi_72_pred_2;
                    _3130 = frontier_phi_72_pred_3;
                    _3128 = frontier_phi_72_pred_4;
                    _3126 = frontier_phi_72_pred_5;
                    uint _3271 = _3270 + 1u;
                    if (_3271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3264 = _3126;
                        _3265 = _3128;
                        _3266 = _3130;
                        _3267 = _3132;
                        _3268 = _3134;
                        _3269 = _3136;
                        _3270 = _3271;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3136;
                frontier_phi_60_61_ladder_1 = _3134;
                frontier_phi_60_61_ladder_2 = _3130;
                frontier_phi_60_61_ladder_3 = _3128;
                frontier_phi_60_61_ladder_4 = _3126;
                frontier_phi_60_61_ladder_5 = _3132;
            }
            else
            {
                frontier_phi_60_61_ladder = _3022;
                frontier_phi_60_61_ladder_1 = _3020;
                frontier_phi_60_61_ladder_2 = _3016;
                frontier_phi_60_61_ladder_3 = _3014;
                frontier_phi_60_61_ladder_4 = _3012;
                frontier_phi_60_61_ladder_5 = _3018;
            }
            _3125 = frontier_phi_60_61_ladder_4;
            _3127 = frontier_phi_60_61_ladder_3;
            _3129 = frontier_phi_60_61_ladder_2;
            _3131 = frontier_phi_60_61_ladder_5;
            _3133 = frontier_phi_60_61_ladder_1;
            _3135 = frontier_phi_60_61_ladder;
        }
        float _3140 = isnan(1.0) ? _914 : (isnan(_914) ? 1.0 : min(_914, 1.0));
        _2945 = (_3140 * _3131) + _2457;
        _2947 = (_3140 * _3133) + _2459;
        _2949 = (_3140 * _3135) + _2461;
        _2951 = ((_3125 * _899) * _3140) + _2795;
        _2953 = ((_3127 * _901) * _3140) + _2797;
        _2955 = ((_3129 * _902) * _3140) + _2799;
    }
    else
    {
        _2945 = _2457;
        _2947 = _2459;
        _2949 = _2461;
        _2951 = _2795;
        _2953 = _2797;
        _2955 = _2799;
    }
    float _4887 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4898 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4909 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    uint _2975 = _841 + 6u;
    float _2983 = _786 / cbSceneParam._m0[86u].x;
    float _2984 = _787 / cbSceneParam._m0[86u].y;
    vec4 _2998 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2983, _2984, (log2((isnan(cbSceneParam._m0[77u].w) ? _721 : (isnan(_721) ? cbSceneParam._m0[77u].w : min(_721, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3000 = _2998.x;
    float _3001 = _2998.y;
    float _3002 = _2998.z;
    float _3003 = _2998.w;
    float _3075;
    float _3077;
    float _3079;
    float _3081;
    if (_721 > cbSceneParam._m0[78u].w)
    {
        float _3037 = isnan(_721) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _721 : min(cbSceneParam._m0[80u].w, _721));
        float _3038 = _3037 / _721;
        float _3049 = _3038 * _771;
        float _3050 = _772 * _3038;
        float _3051 = (-0.0) - _3050;
        float _3053 = _3038 * _773;
        float _3055 = (cbSceneParam._m0[77u].w * _3051) / _3037;
        float _3056 = _3055 + cbSceneParam._m0[79u].w;
        float _3057 = cbSceneParam._m0[79u].w - _3050;
        float _3063 = sqrt(((_3049 * _3049) + (_3050 * _3050)) + (_3053 * _3053));
        float _3066 = (1.0 - (cbSceneParam._m0[77u].w / _3037)) * _3063;
        float _3071 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3073 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3226;
        if (abs((_3051 - _3055) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3226 = ((((_3056 > 0.0) ? exp2(_3071 * _3056) : (2.0 - exp2(_3073 * _3056))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3066;
        }
        else
        {
            float _3186 = 1.0 / cbSceneParam._m0[80u].x;
            float _3187 = isnan(_3057) ? _3056 : (isnan(_3056) ? _3057 : max(_3056, _3057));
            float _3188 = isnan(_3057) ? _3056 : (isnan(_3056) ? _3057 : min(_3056, _3057));
            float _3197 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : min(_3187, 0.0));
            float _3198 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : min(_3188, 0.0));
            _3226 = ((abs(_3063 / _3051) * cbSceneParam._m0[80u].y) * ((((_3197 - _3198) * 2.0) - ((exp2(_3071 * (isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0)))) - exp2(_3071 * (isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))))) * _3186)) - ((exp2(_3073 * _3197) - exp2(_3073 * _3198)) * _3186))) + (_3066 * cbSceneParam._m0[80u].z);
        }
        vec4 _3228 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2983, _2984, 1.0), 0.0);
        float _3237 = exp2((_3226 * (-1.44269502162933349609375)) * (1.0 - _3228.w));
        float _3238 = log2(_3237);
        float _3254 = log2(_3003);
        _3075 = (exp2(_3254 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].x)) * _3228.x) / cbSceneParam._m0[78u].x)) + _3000;
        _3077 = (exp2(_3254 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].y)) * _3228.y) / cbSceneParam._m0[78u].y)) + _3001;
        _3079 = (exp2(_3254 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].z)) * _3228.z) / cbSceneParam._m0[78u].z)) + _3002;
        _3081 = _3237 * _3003;
    }
    else
    {
        _3075 = _3000;
        _3077 = _3001;
        _3079 = _3002;
        _3081 = _3003;
    }
    float _3093 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3094 = _3093 == 3.0;
    float _3095 = log2(_3081);
    float _3102 = exp2(_3095 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2945 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _914))) + ((_2951 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1718)) * cbPerFrame._m0[3u].x));
    float _3103 = exp2(_3095 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2947 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _914))) + ((_2953 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1718)) * cbPerFrame._m0[3u].x));
    float _3104 = exp2(_3095 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2949 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _914))) + ((_2955 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1718)) * cbPerFrame._m0[3u].x));
    float _3113 = (_3093 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3113 * (_3094 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3075)));
    SV_Target.y = _3113 * (_3094 ? _3103 : (_3103 + (cbSceneParam._m0[72u].w * _3077)));
    SV_Target.z = _3113 * (_3094 ? _3104 : (_3104 + (cbSceneParam._m0[72u].w * _3079)));
    SV_Target.w = cbInstanceData._m0[_2975].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2975].w;
}


