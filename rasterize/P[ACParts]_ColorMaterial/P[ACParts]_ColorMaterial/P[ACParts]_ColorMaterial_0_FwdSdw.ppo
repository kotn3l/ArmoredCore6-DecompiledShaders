#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_15;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1476;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _279 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _286 = log2(0.0);
    float _288 = exp2(_286 * cbMtdParam._m0[24u].y);
    float _292 = _288 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _288);
    float _293 = _288 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _288);
    float _294 = _288 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _288);
    float _295 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _296 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _297 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _298 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    float _300 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    float _301 = isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0));
    vec4 _316 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _320 = _316.z;
    float _321 = _316.w;
    float _322 = 1.0 - _321;
    float _331 = exp2(log2((1.0 - (_322 * _320)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _332 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _333 = isnan(1.0) ? _332 : (isnan(_332) ? 1.0 : min(_332, 1.0));
    float _342 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_322 * _322) * _320))) * cbMtdParam._m0[26u].y);
    float _343 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    vec4 _356 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _359 = _356.y;
    float _362 = (_359 * ((isnan(1.0) ? _343 : (isnan(_343) ? 1.0 : min(_343, 1.0))) - _321)) + _321;
    float _365 = (_356.x + (-0.02500000037252902984619140625)) * 8.0;
    float _369 = roundEven(5.0 - _365);
    float _370 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _371 = isnan(4.0) ? _370 : (isnan(_370) ? 4.0 : min(_370, 4.0));
    float _384 = floor(_371);
    vec4 _387 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w, _384));
    float _210[6];
    float _211[6];
    float _212[6];
    _210[0u] = cbMtdParam._m0[12u].x;
    _211[0u] = cbMtdParam._m0[12u].y;
    _212[0u] = cbMtdParam._m0[12u].z;
    _210[1u] = cbMtdParam._m0[13u].x;
    _211[1u] = cbMtdParam._m0[13u].y;
    _212[1u] = cbMtdParam._m0[13u].z;
    _210[2u] = cbMtdParam._m0[14u].x;
    _211[2u] = cbMtdParam._m0[14u].y;
    _212[2u] = cbMtdParam._m0[14u].z;
    _210[3u] = cbMtdParam._m0[15u].x;
    _211[3u] = cbMtdParam._m0[15u].y;
    _212[3u] = cbMtdParam._m0[15u].z;
    _210[4u] = cbMtdParam._m0[16u].x;
    _211[4u] = cbMtdParam._m0[16u].y;
    _212[4u] = cbMtdParam._m0[16u].z;
    _210[5u] = cbMtdParam._m0[11u].x;
    _211[5u] = cbMtdParam._m0[11u].y;
    _212[5u] = cbMtdParam._m0[11u].z;
    float _453 = roundEven(_365);
    float _454 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    uint _456 = uint(int(isnan(5.0) ? _454 : (isnan(_454) ? 5.0 : min(_454, 5.0))));
    float _207[6];
    float _208[6];
    float _209[6];
    _207[0u] = 1.0;
    _208[0u] = 1.0;
    _209[0u] = 1.0;
    _207[1u] = cbMtdParam._m0[22u].x;
    _208[1u] = cbMtdParam._m0[22u].y;
    _209[1u] = cbMtdParam._m0[22u].z;
    _207[2u] = cbMtdParam._m0[21u].x;
    _208[2u] = cbMtdParam._m0[21u].y;
    _209[2u] = cbMtdParam._m0[21u].z;
    _207[3u] = cbMtdParam._m0[19u].x;
    _208[3u] = cbMtdParam._m0[19u].y;
    _209[3u] = cbMtdParam._m0[19u].z;
    _207[4u] = cbMtdParam._m0[18u].x;
    _208[4u] = cbMtdParam._m0[18u].y;
    _209[4u] = cbMtdParam._m0[18u].z;
    _207[5u] = cbMtdParam._m0[17u].x;
    _208[5u] = cbMtdParam._m0[17u].y;
    _209[5u] = cbMtdParam._m0[17u].z;
    float _543 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[29u].y * TEXCOORD.x) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[29u].z * TEXCOORD.y) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _544 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    uint _546 = uint(int(isnan(5.0) ? _544 : (isnan(_544) ? 5.0 : min(_544, 5.0))));
    float _206[6];
    _206[0u] = 1.0;
    _206[1u] = cbMtdParam._m0[22u].w;
    _206[2u] = cbMtdParam._m0[21u].w;
    _206[3u] = cbMtdParam._m0[19u].w;
    _206[4u] = cbMtdParam._m0[18u].w;
    _206[5u] = cbMtdParam._m0[17u].w;
    float _583 = ((((_210[_456] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[24u].z * (_207[_546] - _210[_456])) * _206[_456])) * _359) + cbMtdParam._m0[10u].x) * _387.x;
    float _584 = ((((_211[_456] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[24u].z * (_208[_546] - _211[_456])) * _206[_456])) * _359) + cbMtdParam._m0[10u].y) * _387.y;
    float _585 = ((((_212[_456] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[24u].z * (_209[_546] - _212[_456])) * _206[_456])) * _359) + cbMtdParam._m0[10u].z) * _387.z;
    vec4 _597 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _617 = (((cbMtdParam._m0[9u].x * _597.x) - _583) * _362) + _583;
    float _618 = (((cbMtdParam._m0[9u].y * _597.y) - _584) * _362) + _584;
    float _619 = (((cbMtdParam._m0[9u].z * _597.z) - _585) * _362) + _585;
    vec4 _631 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _651 = (((cbMtdParam._m0[20u].x * _631.x) - _617) * _333) + _617;
    float _652 = (((cbMtdParam._m0[20u].y * _631.y) - _618) * _333) + _618;
    float _653 = (((cbMtdParam._m0[20u].z * _631.z) - _619) * _333) + _619;
    vec4 _665 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _689 = (_279.x * 4.5) * ((((cbMtdParam._m0[23u].x * _665.x) - _651) * _298) + _651);
    float _691 = (_279.y * 4.5) * ((((cbMtdParam._m0[23u].y * _665.y) - _652) * _300) + _652);
    float _693 = (_279.z * 4.5) * ((((cbMtdParam._m0[23u].z * _665.z) - _653) * _301) + _653);
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[26u].w;
    _202[0u] = cbMtdParam._m0[27u].x;
    _201[1u] = cbMtdParam._m0[27u].y;
    _202[1u] = cbMtdParam._m0[27u].z;
    _201[2u] = cbMtdParam._m0[27u].w;
    _202[2u] = cbMtdParam._m0[28u].x;
    _201[3u] = cbMtdParam._m0[28u].y;
    _202[3u] = cbMtdParam._m0[28u].z;
    _201[4u] = cbMtdParam._m0[28u].w;
    _202[4u] = cbMtdParam._m0[29u].x;
    float _721 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    uint _723 = uint(int(isnan(4.0) ? _721 : (isnan(_721) ? 4.0 : min(_721, 4.0))));
    float _735 = ((cbMtdParam._m0[30u].x - _202[_723]) * _362) + _202[_723];
    float _740 = ((cbMtdParam._m0[30u].z - _735) * _333) + _735;
    float _748 = ((cbMtdParam._m0[31u].x - _740) * _298) + _740;
    vec4 _763 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w, _384));
    float _765 = _763.x;
    float _766 = _763.y;
    float _768 = _763.z + _201[_723];
    vec4 _780 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _788 = (((cbMtdParam._m0[29u].w - _768) + _780.z) * _362) + _768;
    vec4 _801 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _809 = (((cbMtdParam._m0[30u].y - _788) + _801.z) * _333) + _788;
    float _815 = ((((_320 * 2.0) * _809) - _809) * cbMtdParam._m0[25u].y) + _809;
    vec4 _827 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _835 = (((_827.z + cbMtdParam._m0[30u].w) - _815) * _301) + _815;
    float _848 = ((_780.x - _765) * _362) + _765;
    float _849 = ((_780.y - _766) * _362) + _766;
    float _854 = ((_801.x - _848) * _333) + _848;
    float _855 = ((_801.y - _849) * _333) + _849;
    float _864 = ((((_827.x - _854) * _298) + _854) * 2.0) + (-1.0);
    float _865 = ((((_827.y - _855) * _300) + _855) * 2.0) + (-1.0);
    float _866 = dot(vec2(_864, _865), vec2(_864, _865));
    float _4172 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _871 = sqrt(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))));
    float _874 = _864 + (cbMtdParam._m0[25u].z * ((_316.x * 2.0) + (-1.0)));
    float _875 = _865 + (cbMtdParam._m0[25u].z * ((_316.y * 2.0) + (-1.0)));
    float _878 = fma(_871, _247 * NORMAL.x, fma(_875, _254 * TANGENT.x, (_240 * _232) * _874));
    float _881 = fma(_871, _247 * NORMAL.y, fma(_875, _254 * TANGENT.y, (_240 * _233) * _874));
    float _884 = fma(_871, _247 * NORMAL.z, fma(_875, _254 * TANGENT.z, (_240 * _234) * _874));
    float _888 = inversesqrt(dot(vec3(_878, _881, _884), vec3(_878, _881, _884)));
    float _889 = _888 * _878;
    float _890 = _888 * _881;
    float _891 = _888 * _884;
    float _4183 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _892 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4205 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4216 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4227 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _896 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _912 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _962 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _952);
    float _963 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _952);
    float _964 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _952);
    float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
    float _969 = _962 * _968;
    float _970 = _963 * _968;
    float _971 = _964 * _968;
    float _977 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _978 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _980 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _982 = _980.w;
    float _1000 = fma(_891, cbSceneParam._m0[5u].z, fma(_890, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _889));
    float _1003 = fma(_891, cbSceneParam._m0[6u].z, fma(_890, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _889));
    float _1006 = fma(_891, cbSceneParam._m0[7u].z, fma(_890, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _889));
    vec4 _1008 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1019 = (((_1008.y - _892) + (_1008.w * _892)) * cbMtdParam._m0[3u].x) + _892;
    uint _1032 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1034 = (_1032 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1040 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * cbInstanceData._m0[_1034].x;
    float _1041 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * cbInstanceData._m0[_1034].y;
    float _1042 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * cbInstanceData._m0[_1034].z;
    float _4238 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    vec4 _1046 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1051 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1062 = (((_1051.x - _896) + (_1051.w * _896)) * cbMtdParam._m0[3u].x) + _896;
    float _1075 = (cbMtdParam._m0[3u].x * (((_1043 * _982) - _1043) + _1046.x)) + _1043;
    float _1076 = (cbMtdParam._m0[3u].x * (((_1044 * _982) - _1044) + _1046.y)) + _1044;
    float _1077 = (cbMtdParam._m0[3u].x * (((_1045 * _982) - _1045) + _1046.z)) + _1045;
    float _1078 = 1.0 - _1062;
    float _1079 = _1078 * _1075;
    float _1080 = _1078 * _1076;
    float _1081 = _1078 * _1077;
    float _1086 = (_1075 + (-0.039999999105930328369140625)) * _1062;
    float _1087 = (_1076 + (-0.039999999105930328369140625)) * _1062;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _1062;
    float _1089 = _1086 + 0.039999999105930328369140625;
    float _1091 = _1087 + 0.039999999105930328369140625;
    float _1092 = _1088 + 0.039999999105930328369140625;
    vec4 _1101 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _977, cbSceneParam._m0[86u].y * _978));
    float _1104 = _1101.x * TEXCOORD_5.w;
    float _1105 = dot(vec3(_889, _890, _891), vec3(_969, _970, _971));
    float _1108 = _1105 * 2.0;
    float _1112 = (_1108 * _889) - _969;
    float _1113 = (_1108 * _890) - _970;
    float _1114 = (_1108 * _891) - _971;
    float _1118 = abs(dot(vec3(_969, _970, _971), vec3(_889, _890, _891)));
    float _4271 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1120 = sqrt(_1019);
    float _1131 = exp2((_1120 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1120 * 3.0));
    float _1137 = (1.0 - _1131) * ((_1120 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1138 = _1131 * _1120;
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1475;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1200 = fma(_1174, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1166));
        float _1204 = fma(_1174, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1166));
        float _1208 = fma(_1174, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1166));
        float _1233 = _1166 + _889;
        float _1234 = _1170 + _890;
        float _1235 = _1174 + _891;
        float _1245 = fma(_1235, cbModelParam._m0[26u].z, fma(_1234, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1233)) - _1200;
        float _1246 = fma(_1235, cbModelParam._m0[27u].z, fma(_1234, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1233)) - _1204;
        float _1247 = fma(_1235, cbModelParam._m0[28u].z, fma(_1234, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1233)) - _1208;
        float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
        float _1264 = ((_1251 * _1245) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1200 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1251 * _1246) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1204 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1251 * _1247) / cbModelParam._m0[34u].z) + ((((((_1208 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        float _1303 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1269.x + (-0.5));
        float _1305 = _1303 * (_1269.y + (-0.5));
        float _1306 = _1303 * (_1269.z + (-0.5));
        float _1313 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1276.x + (-0.5));
        float _1315 = _1313 * (_1276.y + (-0.5));
        float _1316 = _1313 * (_1276.z + (-0.5));
        float _1323 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1283.x + (-0.5));
        float _1325 = _1323 * (_1283.y + (-0.5));
        float _1326 = _1323 * (_1283.z + (-0.5));
        float _1333 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1290.x + (-0.5));
        float _1335 = _1333 * (_1290.y + (-0.5));
        float _1336 = _1333 * (_1290.z + (-0.5));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = _1304 * 0.5;
        float _1341 = _1314 * 0.5;
        float _1342 = _1324 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1357 = (dot(vec3(_889, _890, _891), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1367 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4319 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1369 + 1.0))) + _1374) * _1337;
        float _1384 = _1305 * 0.5;
        float _1385 = _1315 * 0.5;
        float _1386 = _1325 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_889, _890, _891), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4352 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1411 + 1.0))) + _1416) * _1338;
        float _1426 = _1306 * 0.5;
        float _1427 = _1316 * 0.5;
        float _1428 = _1326 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_889, _890, _891), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4385 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1453 + 1.0))) + _1458) * _1339;
        _1475 = _1306;
        _1477 = _1305;
        _1478 = _1304;
        _1479 = _1316;
        _1480 = _1315;
        _1481 = _1314;
        _1482 = _1326;
        _1483 = _1325;
        _1484 = _1324;
        _1485 = _1339;
        _1486 = _1338;
        _1487 = _1337;
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1476;
        _1477 = _1476;
        _1478 = _1476;
        _1479 = _1476;
        _1480 = _1476;
        _1481 = _1476;
        _1482 = _1476;
        _1483 = _1476;
        _1484 = _1476;
        _1485 = _1476;
        _1486 = _1476;
        _1487 = _1476;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1513 = fma(_1174, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166));
        float _1517 = fma(_1174, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166));
        float _1521 = fma(_1174, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166));
        float _1544 = _1166 + _889;
        float _1545 = _1170 + _890;
        float _1546 = _1174 + _891;
        float _1556 = fma(_1546, cbModelParam._m0[30u].z, fma(_1545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1544)) - _1513;
        float _1557 = fma(_1546, cbModelParam._m0[31u].z, fma(_1545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1544)) - _1517;
        float _1558 = fma(_1546, cbModelParam._m0[32u].z, fma(_1545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1544)) - _1521;
        float _1562 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
        float _1575 = ((_1562 * _1556) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1513 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1576 = ((_1562 * _1557) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1517 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1577 = ((_1562 * _1558) / cbModelParam._m0[35u].z) + ((((((_1521 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        float _1612 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1579.x + (-0.5));
        float _1614 = _1612 * (_1579.y + (-0.5));
        float _1615 = _1612 * (_1579.z + (-0.5));
        float _1622 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1586.x + (-0.5));
        float _1624 = _1622 * (_1586.y + (-0.5));
        float _1625 = _1622 * (_1586.z + (-0.5));
        float _1632 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1593.x + (-0.5));
        float _1634 = _1632 * (_1593.y + (-0.5));
        float _1635 = _1632 * (_1593.z + (-0.5));
        float _1642 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1600.x + (-0.5));
        float _1644 = _1642 * (_1600.y + (-0.5));
        float _1645 = _1642 * (_1600.z + (-0.5));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = _1613 * 0.5;
        float _1650 = _1623 * 0.5;
        float _1651 = _1633 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_889, _890, _891), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4426 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4437 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4448 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_1676 + 1.0))) + _1681) * _1646;
        float _1691 = _1614 * 0.5;
        float _1692 = _1624 * 0.5;
        float _1693 = _1634 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_889, _890, _891), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4459 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1647 + 9.9999997473787516355514526367188e-06);
        float _4470 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4481 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_1718 + 1.0))) + _1723) * _1647;
        float _1733 = _1615 * 0.5;
        float _1734 = _1625 * 0.5;
        float _1735 = _1635 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_889, _890, _891), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4492 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4503 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4514 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_1760 + 1.0))) + _1765) * _1648;
        _1782 = _1615;
        _1783 = _1614;
        _1784 = _1613;
        _1785 = _1625;
        _1786 = _1624;
        _1787 = _1623;
        _1788 = _1635;
        _1789 = _1634;
        _1790 = _1633;
        _1791 = _1648;
        _1792 = _1647;
        _1793 = _1646;
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1795 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
    }
    else
    {
        _1782 = _1476;
        _1783 = _1476;
        _1784 = _1476;
        _1785 = _1476;
        _1786 = _1476;
        _1787 = _1476;
        _1788 = _1476;
        _1789 = _1476;
        _1790 = _1476;
        _1791 = _1476;
        _1792 = _1476;
        _1793 = _1476;
        _1794 = 0.0;
        _1795 = 0.0;
        _1796 = 0.0;
    }
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1488)) + _1488;
    float _1807 = (cbModelParam._m0[1u].x * (_1795 - _1489)) + _1489;
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1490)) + _1490;
    float _1829 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1807, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1832 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1807, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1835 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1807, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1806));
    float _1850 = _1112 * 0.5;
    float _1851 = _1113 * 0.5;
    float _1852 = _1114 * 0.5;
    float _1853 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1856 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1783, _1786, _1789, _1792));
    float _1859 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1893;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1866 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1475, _1479, _1482, _1485));
        float _1870 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1477, _1480, _1483, _1486));
        float _1874 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1478, _1481, _1484, _1487));
        float _1881 = dot(vec4(cbModelParam._m0[39u]), vec4(_1850, _1851, _1852, 1.0));
        _1893 = dot(vec3(isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1881) ? 0.0 : (isnan(0.0) ? _1881 : max(0.0, _1881))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1893 = 1.0;
    }
    float _1904;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1895 = dot(vec4(cbModelParam._m0[40u]), vec4(_1850, _1851, _1852, 1.0));
        _1904 = dot(vec3(isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1895) ? 0.0 : (isnan(0.0) ? _1895 : max(0.0, _1895))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1904 = 1.0;
    }
    float _1908 = (_1904 * cbModelParam._m0[1u].x) + (_1893 * (1.0 - cbModelParam._m0[1u].x));
    float _1918 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1019);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1918 : min(cbModelParam._m0[25u].z, _1918));
    float _1999;
    float _2001;
    float _2003;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1966 = fma(_1174, cbModelParam._m0[13u].z, fma(_1170, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1166)) + cbModelParam._m0[13u].w;
        float _1970 = fma(_1174, cbModelParam._m0[14u].z, fma(_1170, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1166)) + cbModelParam._m0[14u].w;
        float _1974 = fma(_1174, cbModelParam._m0[15u].z, fma(_1170, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1166)) + cbModelParam._m0[15u].w;
        float _1977 = fma(_1114, cbModelParam._m0[13u].z, fma(_1113, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1112));
        float _1980 = fma(_1114, cbModelParam._m0[14u].z, fma(_1113, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1112));
        float _1983 = fma(_1114, cbModelParam._m0[15u].z, fma(_1113, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1112));
        float _2011;
        if (_1977 > 0.0)
        {
            _2011 = abs((1.0 - _1966) / _1977);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1966 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2011 = frontier_phi_14_12_ladder;
        }
        float _2182;
        if (_1980 > 0.0)
        {
            _2182 = abs((1.0 - _1970) / _1980);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1970 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2182 = frontier_phi_23_19_ladder;
        }
        float _2477;
        if (_1983 > 0.0)
        {
            _2477 = abs((1.0 - _1974) / _1983);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1974 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2477 = frontier_phi_35_30_ladder;
        }
        float _2479 = isnan(_2182) ? _2011 : (isnan(_2011) ? _2182 : min(_2011, _2182));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1977) + _1966;
        float _2485 = (_2480 * _1980) + _1970;
        float _2486 = (_2480 * _1983) + _1974;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2489 = (-1.0) - _2487;
        float _2491 = _2487 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2486 > _2491) || ((_2486 < _2489) || ((_2485 > _2491) || ((_2485 < _2489) || ((_2484 < _2489) || (_2484 > _2491))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2631 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2486, cbModelParam._m0[9u].z, fma(_2485, cbModelParam._m0[9u].y, _2484 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2486, cbModelParam._m0[10u].z, fma(_2485, cbModelParam._m0[10u].y, _2484 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2486, cbModelParam._m0[11u].z, fma(_2485, cbModelParam._m0[11u].y, _2484 * cbModelParam._m0[11u].x))), _1919);
            frontier_phi_13_35_ladder = _2631.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2631.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2631.x * cbModelParam._m0[1u].y;
        }
        _1999 = frontier_phi_13_35_ladder_2;
        _2001 = frontier_phi_13_35_ladder_1;
        _2003 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1987 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1112, _1113, _1114), _1919);
        _1999 = _1987.x * cbModelParam._m0[1u].y;
        _2001 = _1987.y * cbModelParam._m0[1u].y;
        _2003 = _1987.z * cbModelParam._m0[1u].y;
    }
    float _2007 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1019);
    float _2008 = isnan(_2007) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2007 : min(cbModelParam._m0[25u].w, _2007));
    float _2097;
    float _2099;
    float _2101;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2061 = fma(_1174, cbModelParam._m0[21u].z, fma(_1170, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1166)) + cbModelParam._m0[21u].w;
        float _2065 = fma(_1174, cbModelParam._m0[22u].z, fma(_1170, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1166)) + cbModelParam._m0[22u].w;
        float _2069 = fma(_1174, cbModelParam._m0[23u].z, fma(_1170, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1166)) + cbModelParam._m0[23u].w;
        float _2072 = fma(_1114, cbModelParam._m0[21u].z, fma(_1113, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1112));
        float _2075 = fma(_1114, cbModelParam._m0[22u].z, fma(_1113, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1112));
        float _2078 = fma(_1114, cbModelParam._m0[23u].z, fma(_1113, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1112));
        float _2187;
        if (_2072 > 0.0)
        {
            _2187 = abs((1.0 - _2061) / _2072);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2061 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2187 = frontier_phi_25_21_ladder;
        }
        float _2504;
        if (_2075 > 0.0)
        {
            _2504 = abs((1.0 - _2065) / _2075);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2065 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2504 = frontier_phi_37_32_ladder;
        }
        float _2842;
        if (_2078 > 0.0)
        {
            _2842 = abs((1.0 - _2069) / _2078);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2069 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2842 = frontier_phi_47_44_ladder;
        }
        float _2844 = isnan(_2504) ? _2187 : (isnan(_2187) ? _2504 : min(_2187, _2504));
        float _2845 = isnan(_2842) ? _2844 : (isnan(_2844) ? _2842 : min(_2844, _2842));
        float _2849 = (_2845 * _2072) + _2061;
        float _2850 = (_2845 * _2075) + _2065;
        float _2851 = (_2845 * _2078) + _2069;
        float _2852 = _2845 * 9.9999997473787516355514526367188e-05;
        float _2853 = (-1.0) - _2852;
        float _2855 = _2852 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2851 > _2855) || ((_2851 < _2853) || ((_2850 > _2855) || ((_2850 < _2853) || ((_2849 < _2853) || (_2849 > _2855))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2851, cbModelParam._m0[17u].z, fma(_2850, cbModelParam._m0[17u].y, _2849 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2851, cbModelParam._m0[18u].z, fma(_2850, cbModelParam._m0[18u].y, _2849 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2851, cbModelParam._m0[19u].z, fma(_2850, cbModelParam._m0[19u].y, _2849 * cbModelParam._m0[19u].x))), _2008);
            frontier_phi_22_47_ladder = _2973.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2973.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2973.x * cbModelParam._m0[1u].z;
        }
        _2097 = frontier_phi_22_47_ladder_2;
        _2099 = frontier_phi_22_47_ladder_1;
        _2101 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2081 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1112, _1113, _1114), _2008);
        _2097 = _2081.x * cbModelParam._m0[1u].z;
        _2099 = _2081.y * cbModelParam._m0[1u].z;
        _2101 = _2081.z * cbModelParam._m0[1u].z;
    }
    float _2114 = (((_1137 * _1089) + _1138) * _1104) * ((cbModelParam._m0[1u].w * (_2097 - _1999)) + _1999);
    float _2116 = (((_1137 * _1091) + _1138) * _1104) * ((cbModelParam._m0[1u].w * (_2099 - _2001)) + _2001);
    float _2118 = (((_1137 * _1092) + _1138) * _1104) * ((cbModelParam._m0[1u].w * (_2101 - _2003)) + _2003);
    float _2121 = fma(_2118, cbSceneParam._m0[89u].z, fma(_2116, cbSceneParam._m0[89u].y, _2114 * cbSceneParam._m0[89u].x));
    float _2124 = fma(_2118, cbSceneParam._m0[90u].z, fma(_2116, cbSceneParam._m0[90u].y, _2114 * cbSceneParam._m0[90u].x));
    float _2127 = fma(_2118, cbSceneParam._m0[91u].z, fma(_2116, cbSceneParam._m0[91u].y, _2114 * cbSceneParam._m0[91u].x));
    float _2161 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2165 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2169 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2173 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2174 = _2161 / _2173;
    float _2175 = _2165 / _2173;
    float _2176 = _2169 / _2173;
    float _2323;
    float _2324;
    float _2325;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2203 = ((uint(_2176 > cbSceneParam._m0[59u].y) + uint(_2176 > cbSceneParam._m0[59u].x)) + uint(_2176 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2204 = _2203 + 43u;
        uint _2212 = _2203 + 44u;
        uint _2220 = _2203 + 45u;
        uint _2228 = _2203 + 46u;
        float _2239 = fma(_2173, cbSceneParam._m0[_2204].w, fma(_2169, cbSceneParam._m0[_2204].z, fma(_2165, cbSceneParam._m0[_2204].y, _2161 * cbSceneParam._m0[_2204].x)));
        float _2243 = fma(_2173, cbSceneParam._m0[_2212].w, fma(_2169, cbSceneParam._m0[_2212].z, fma(_2165, cbSceneParam._m0[_2212].y, _2161 * cbSceneParam._m0[_2212].x)));
        float _2251 = fma(_2173, cbSceneParam._m0[_2228].w, fma(_2169, cbSceneParam._m0[_2228].z, fma(_2165, cbSceneParam._m0[_2228].y, _2161 * cbSceneParam._m0[_2228].x)));
        float _2256 = cbSceneParam._m0[33u].z * _2251;
        float _2258 = cbSceneParam._m0[33u].w * _2251;
        float _2261 = fma(_2173, cbSceneParam._m0[_2220].w, fma(_2169, cbSceneParam._m0[_2220].z, fma(_2165, cbSceneParam._m0[_2220].y, _2161 * cbSceneParam._m0[_2220].x))) / _2251;
        float _2309 = (cbSceneParam._m0[33u].x - sqrt(((_2175 * _2175) + (_2174 * _2174)) + (_2176 * _2176))) * cbSceneParam._m0[33u].y;
        float _4640 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2316 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2256 + _2239) / _2251, (_2258 + _2243) / _2251), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2258 + _2239) / _2251, (_2243 - _2256) / _2251), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2239 - _2256) / _2251, (_2243 - _2258) / _2251), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2239 - _2258) / _2251, (_2256 + _2243) / _2251), _2261), 0.0)).x), vec4(0.25)));
        _2323 = 1.0 - (_2316 * cbSceneParam._m0[34u].x);
        _2324 = 1.0 - (_2316 * cbSceneParam._m0[34u].y);
        _2325 = 1.0 - (_2316 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2323 = 1.0;
        _2324 = 1.0;
        _2325 = 1.0;
    }
    float _2389;
    float _2391;
    float _2393;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2377 = fma(_2173, cbSceneParam._m0[63u].w, fma(_2169, cbSceneParam._m0[63u].z, fma(_2165, cbSceneParam._m0[63u].y, _2161 * cbSceneParam._m0[63u].x)));
        float _2378 = fma(_2173, cbSceneParam._m0[60u].w, fma(_2169, cbSceneParam._m0[60u].z, fma(_2165, cbSceneParam._m0[60u].y, _2161 * cbSceneParam._m0[60u].x))) / _2377;
        float _2379 = fma(_2173, cbSceneParam._m0[61u].w, fma(_2169, cbSceneParam._m0[61u].z, fma(_2165, cbSceneParam._m0[61u].y, _2161 * cbSceneParam._m0[61u].x))) / _2377;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2378 >= cbSceneParam._m0[64u].x) && (_2379 >= cbSceneParam._m0[64u].y)) && (_2378 <= cbSceneParam._m0[64u].z)) && (_2379 <= cbSceneParam._m0[64u].w))
        {
            float _2517 = fma(_2173, cbSceneParam._m0[62u].w, fma(_2169, cbSceneParam._m0[62u].z, fma(_2165, cbSceneParam._m0[62u].y, _2161 * cbSceneParam._m0[62u].x))) / _2377;
            float _2521 = isnan(cbSceneParam._m0[41u].w) ? _2517 : (isnan(_2517) ? cbSceneParam._m0[41u].w : max(_2517, cbSceneParam._m0[41u].w));
            float _2564 = (cbSceneParam._m0[33u].x - sqrt(((_2175 * _2175) + (_2174 * _2174)) + (_2176 * _2176))) * cbSceneParam._m0[33u].y;
            float _4656 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
            float _2571 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2378, cbSceneParam._m0[33u].w + _2379), _2521), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2378, _2379 - cbSceneParam._m0[33u].z), _2521), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2378 - cbSceneParam._m0[33u].z, _2379 - cbSceneParam._m0[33u].w), _2521), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2378 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2379), _2521), 0.0)).x), vec4(0.25)));
            float _2575 = 1.0 - (_2571 * cbSceneParam._m0[34u].x);
            float _2576 = 1.0 - (_2571 * cbSceneParam._m0[34u].y);
            float _2577 = 1.0 - (_2571 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2577) ? _2325 : (isnan(_2325) ? _2577 : min(_2325, _2577));
            frontier_phi_34_33_ladder_1 = isnan(_2576) ? _2324 : (isnan(_2324) ? _2576 : min(_2324, _2576));
            frontier_phi_34_33_ladder_2 = isnan(_2575) ? _2323 : (isnan(_2323) ? _2575 : min(_2323, _2575));
        }
        else
        {
            frontier_phi_34_33_ladder = _2325;
            frontier_phi_34_33_ladder_1 = _2324;
            frontier_phi_34_33_ladder_2 = _2323;
        }
        _2389 = frontier_phi_34_33_ladder_2;
        _2391 = frontier_phi_34_33_ladder_1;
        _2393 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2389 = _2323;
        _2391 = _2324;
        _2393 = _2325;
    }
    uvec4 _2398 = floatBitsToUint(cbInstanceData._m0[_1032 + 5u]);
    uint _2400 = _2398.x * 14u;
    uint _2401 = _2400 + 13u;
    float _2408 = _1104 + (-1.0);
    float _2413 = (cbLight._m0[_2401].x * _2408) + 1.0;
    float _2414 = (cbLight._m0[_2401].y * _2408) + 1.0;
    float _2415 = (cbLight._m0[_2401].z * _2408) + 1.0;
    float _2416 = (cbLight._m0[_2401].w * _2408) + 1.0;
    uint _2417 = _2400 + 5u;
    float _2423 = isnan(1.0) ? _2414 : (isnan(_2414) ? 1.0 : min(_2414, 1.0));
    uint _2427 = _2400 + 4u;
    float _2436 = isnan(1.0) ? _2413 : (isnan(_2413) ? 1.0 : min(_2413, 1.0));
    uint _2440 = _2400 | 1u;
    float _2451 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_889, _890, _891));
    float _2454 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_889, _890, _891));
    float _4692 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _4703 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2459 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * 0.3183098733425140380859375;
    float _2461 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * 0.3183098733425140380859375;
    float _2468 = ((cbLight._m0[_2417].x * _2423) * _2461) + (((cbLight._m0[_2427].x * _2389) * _2436) * _2459);
    float _2469 = ((_2423 * cbLight._m0[_2417].y) * _2461) + (((cbLight._m0[_2427].y * _2391) * _2436) * _2459);
    float _2470 = ((_2423 * cbLight._m0[_2417].z) * _2461) + (((cbLight._m0[_2427].z * _2393) * _2436) * _2459);
    uvec4 _2474 = floatBitsToUint(cbLight._m0[_2400 + 12u]);
    bool _2476 = _2474.x == 0u;
    float _2578;
    float _2580;
    float _2582;
    if (_2476)
    {
        _2578 = _2468;
        _2580 = _2469;
        _2582 = _2470;
    }
    else
    {
        uint _2586 = _2400 + 6u;
        float _2602 = (dot(vec3(cbLight._m0[_2400 + 2u].xyz), vec3(_889, _890, _891)) * 0.5) + 0.5;
        float _2603 = _2602 * _2602;
        float _4714 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2604 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2605 = isnan(1.0) ? _2415 : (isnan(_2415) ? 1.0 : min(_2415, 1.0));
        _2578 = (((cbLight._m0[_2586].x * 0.3183098733425140380859375) * _2604) * _2605) + _2468;
        _2580 = (((cbLight._m0[_2586].y * 0.3183098733425140380859375) * _2604) * _2605) + _2469;
        _2582 = (((cbLight._m0[_2586].z * 0.3183098733425140380859375) * _2604) * _2605) + _2470;
    }
    bool _2585 = _2474.y == 0u;
    float _2640;
    float _2642;
    float _2644;
    if (_2585)
    {
        _2640 = _2578;
        _2642 = _2580;
        _2644 = _2582;
    }
    else
    {
        uint _2813 = _2400 + 7u;
        float _2829 = (dot(vec3(cbLight._m0[_2400 + 3u].xyz), vec3(_889, _890, _891)) * 0.5) + 0.5;
        float _2830 = _2829 * _2829;
        float _4730 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2831 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2832 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
        _2640 = (((cbLight._m0[_2813].x * 0.3183098733425140380859375) * _2831) * _2832) + _2578;
        _2642 = (((cbLight._m0[_2813].y * 0.3183098733425140380859375) * _2831) * _2832) + _2580;
        _2644 = (((cbLight._m0[_2813].z * 0.3183098733425140380859375) * _2831) * _2832) + _2582;
    }
    uint _2647 = _2400 + 8u;
    float _2660 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _1019) * 0.949999988079071044921875);
    float _2661 = _2660 * _2660;
    float _2662 = cbLight._m0[_2400].x + _969;
    float _2663 = cbLight._m0[_2400].y + _970;
    float _2664 = cbLight._m0[_2400].z + _971;
    float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
    float _2669 = _2668 * _2662;
    float _2670 = _2668 * _2663;
    float _2671 = _2668 * _2664;
    float _2672 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2400].xyz));
    float _4746 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2675 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _4757 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _2676 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2677 = dot(vec3(_889, _890, _891), vec3(_2669, _2670, _2671));
    float _4768 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2680 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    float _2681 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2669, _2670, _2671));
    float _4779 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2685 = _2661 * _2661;
    float _2689 = ((_2680 * _2680) * (_2685 + (-1.0))) + 1.0;
    float _2697 = exp2(log2(1.0 - (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) * 5.0);
    float _2698 = 0.959999978542327880859375 - _1086;
    float _2700 = 0.959999978542327880859375 - _1087;
    float _2701 = 0.959999978542327880859375 - _1088;
    float _2708 = 1.0 - _2661;
    float _2719 = (0.5 / (((_2676 * ((_2675 * _2708) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2676 * _2708) + _2661) * _2675))) * _2675;
    float _4790 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2721 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2685 / ((_2689 * _2689) * 3.141590118408203125));
    uint _2735 = _2400 + 9u;
    float _2746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _1019) * 0.949999988079071044921875);
    float _2747 = _2746 * _2746;
    float _2748 = cbLight._m0[_2440].x + _969;
    float _2749 = cbLight._m0[_2440].y + _970;
    float _2750 = cbLight._m0[_2440].z + _971;
    float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
    float _2755 = _2754 * _2748;
    float _2756 = _2754 * _2749;
    float _2757 = _2754 * _2750;
    float _2758 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2440].xyz));
    float _4801 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2761 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
    float _2762 = dot(vec3(_889, _890, _891), vec3(_2755, _2756, _2757));
    float _4812 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2765 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
    float _2766 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2755, _2756, _2757));
    float _4823 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2770 = _2747 * _2747;
    float _2774 = ((_2765 * _2765) * (_2770 + (-1.0))) + 1.0;
    float _2781 = exp2(log2(1.0 - (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) * 5.0);
    float _2788 = 1.0 - _2747;
    float _2798 = (0.5 / (((_2676 * ((_2761 * _2788) + _2747)) + 9.9999999392252902907785028219223e-09) + (((_2676 * _2788) + _2747) * _2761))) * _2761;
    float _4834 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
    float _2800 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2770 / ((_2774 * _2774) * 3.141590118408203125));
    float _2810 = (((((_2781 * _2698) + _1089) * cbLight._m0[_2735].x) * _2800) * _2423) + ((((cbLight._m0[_2647].x * _2389) * ((_2697 * _2698) + _1089)) * _2721) * _2436);
    float _2811 = (((((_2781 * _2700) + _1091) * cbLight._m0[_2735].y) * _2800) * _2423) + ((((cbLight._m0[_2647].y * _2391) * ((_2697 * _2700) + _1091)) * _2721) * _2436);
    float _2812 = (((((_2781 * _2701) + _1092) * cbLight._m0[_2735].z) * _2800) * _2423) + ((((cbLight._m0[_2647].z * _2393) * ((_2697 * _2701) + _1092)) * _2721) * _2436);
    float _2868;
    float _2870;
    float _2872;
    if (_2476)
    {
        _2868 = _2810;
        _2870 = _2811;
        _2872 = _2812;
    }
    else
    {
        uint _2874 = _2400 + 2u;
        uint _2878 = _2400 + 10u;
        float _2892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2874].w)) * _1019) * 0.949999988079071044921875);
        float _2893 = _2892 * _2892;
        float _2894 = cbLight._m0[_2874].x + _969;
        float _2895 = cbLight._m0[_2874].y + _970;
        float _2896 = cbLight._m0[_2874].z + _971;
        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
        float _2901 = _2900 * _2894;
        float _2902 = _2900 * _2895;
        float _2903 = _2900 * _2896;
        float _2904 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2874].xyz));
        float _4845 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2907 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2908 = dot(vec3(_889, _890, _891), vec3(_2901, _2902, _2903));
        float _4856 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2911 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _2912 = dot(vec3(cbLight._m0[_2874].xyz), vec3(_2901, _2902, _2903));
        float _4867 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2916 = _2893 * _2893;
        float _2920 = ((_2911 * _2911) * (_2916 + (-1.0))) + 1.0;
        float _2927 = exp2(log2(1.0 - (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0)))) * 5.0);
        float _2934 = 1.0 - _2893;
        float _2944 = (0.5 / (((_2676 * ((_2907 * _2934) + _2893)) + 9.9999999392252902907785028219223e-09) + (((_2676 * _2934) + _2893) * _2907))) * _2907;
        float _4878 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2946 = (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2916 / ((_2920 * _2920) * 3.141590118408203125));
        float _2947 = isnan(1.0) ? _2415 : (isnan(_2415) ? 1.0 : min(_2415, 1.0));
        _2868 = (((((_2927 * _2698) + _1089) * cbLight._m0[_2878].x) * _2946) * _2947) + _2810;
        _2870 = (((((_2927 * _2700) + _1091) * cbLight._m0[_2878].y) * _2946) * _2947) + _2811;
        _2872 = (((((_2927 * _2701) + _1092) * cbLight._m0[_2878].z) * _2946) * _2947) + _2812;
    }
    float _2978;
    float _2980;
    float _2982;
    if (_2585)
    {
        _2978 = _2868;
        _2980 = _2870;
        _2982 = _2872;
    }
    else
    {
        uint _2989 = _2400 + 3u;
        uint _2993 = _2400 + 11u;
        float _3007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2989].w)) * _1019) * 0.949999988079071044921875);
        float _3008 = _3007 * _3007;
        float _3009 = cbLight._m0[_2989].x + _969;
        float _3010 = cbLight._m0[_2989].y + _970;
        float _3011 = cbLight._m0[_2989].z + _971;
        float _3015 = inversesqrt(dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011)));
        float _3016 = _3015 * _3009;
        float _3017 = _3015 * _3010;
        float _3018 = _3015 * _3011;
        float _3019 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2989].xyz));
        float _4894 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        float _3022 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
        float _3023 = dot(vec3(_889, _890, _891), vec3(_3016, _3017, _3018));
        float _4905 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        float _3026 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
        float _3027 = dot(vec3(cbLight._m0[_2989].xyz), vec3(_3016, _3017, _3018));
        float _4916 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        float _3031 = _3008 * _3008;
        float _3035 = ((_3026 * _3026) * (_3031 + (-1.0))) + 1.0;
        float _3042 = exp2(log2(1.0 - (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0)))) * 5.0);
        float _3049 = 1.0 - _3008;
        float _3059 = (0.5 / (((_2676 * ((_3022 * _3049) + _3008)) + 9.9999999392252902907785028219223e-09) + (((_2676 * _3049) + _3008) * _3022))) * _3022;
        float _4927 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
        float _3061 = (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_3031 / ((_3035 * _3035) * 3.141590118408203125));
        float _3062 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
        _2978 = (((((_3042 * _2698) + _1089) * cbLight._m0[_2993].x) * _3061) * _3062) + _2868;
        _2980 = (((((_3042 * _2700) + _1091) * cbLight._m0[_2993].y) * _3061) * _3062) + _2870;
        _2982 = (((((_3042 * _2701) + _1092) * cbLight._m0[_2993].z) * _3061) * _3062) + _2872;
    }
    float _3128;
    float _3130;
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    if (_2398.y == 0u)
    {
        uvec4 _3083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3084 = _3083.x;
        uint _3095 = uint((float(_3083.y) * floor(float(uint(cbSceneParam._m0[85u].y * _978) / _3084))) + floor(float(uint(cbSceneParam._m0[85u].x * _977) / _3084)));
        float _3105 = (log2(_2176 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3106 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
        uint _3109 = uint(isnan(14.0) ? _3106 : (isnan(_3106) ? 14.0 : min(_3106, 14.0)));
        uvec4 _3114 = texelFetch(g_lightClusterGridBuffer, int(((_3109 << 2u) + (_3095 << 6u)) >> 2u));
        uint _3115 = _3114.x;
        uint _3116 = _3083.z;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        if (((((1u << ((_3116 >> 4u) & 15u)) + 4294967295u) & _3115) == 0u) || ((_3116 & 240u) == 0u))
        {
            _3195 = 0.0;
            _3197 = 0.0;
            _3199 = 0.0;
            _3201 = 0.0;
            _3203 = 0.0;
            _3205 = 0.0;
        }
        else
        {
            float _3196;
            float _3198;
            float _3200;
            float _3202;
            float _3204;
            float _3206;
            float _3340 = 0.0;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            float _3344 = 0.0;
            float _3345 = 0.0;
            uint _3346 = 0u;
            uint _3355;
            bool _3356;
            for (;;)
            {
                _3355 = texelFetch(g_lightClassification, int((((_3109 << 5u) + (_3095 << 9u)) + (_3346 << 2u)) >> 2u)).x;
                _3356 = _3355 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3356)
                {
                    frontier_phi_66_pred = _3345;
                    frontier_phi_66_pred_1 = _3344;
                    frontier_phi_66_pred_2 = _3343;
                    frontier_phi_66_pred_3 = _3342;
                    frontier_phi_66_pred_4 = _3341;
                    frontier_phi_66_pred_5 = _3340;
                }
                else
                {
                    float _3464;
                    float _3465;
                    float _3466;
                    float _3467;
                    float _3468;
                    float _3469;
                    uint _3470;
                    _3464 = _3340;
                    _3465 = _3341;
                    _3466 = _3342;
                    _3467 = _3343;
                    _3468 = _3344;
                    _3469 = _3345;
                    _3470 = _3355;
                    float _3396;
                    float _3397;
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    for (;;)
                    {
                        uint _3474 = uint(findLSB(_3470)) + (_3346 << 5u);
                        uint _3471 = (_3470 + 4294967295u) & _3470;
                        uint _3476 = _3474 * 48u;
                        vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3476)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 3u)).x));
                        uint _3496 = (_3474 * 48u) + 4u;
                        vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3496)).x, texelFetch(g_PointLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3496 + 3u)).x));
                        uint _3515 = (_3474 * 48u) + 8u;
                        vec3 _3526 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3515)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 2u)).x));
                        float _3530 = _3490.x - _2174;
                        float _3531 = _3490.y - _2175;
                        float _3532 = _3490.z - _2176;
                        float _3533 = dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532));
                        float _3536 = inversesqrt(_3533);
                        float _3537 = _3536 * _3530;
                        float _3538 = _3536 * _3531;
                        float _3539 = _3536 * _3532;
                        float _3540 = dot(vec3(_1000, _1003, _1006), vec3(_3537, _3538, _3539));
                        float _3545 = 1.0 - (_3533 * _3490.w);
                        float _4953 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                        float _3546 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                        float _3547 = sqrt(_3533) * _3509.w;
                        float _3550 = 1.39999997615814208984375 / (_3547 + 1.39999997615814208984375);
                        float _3551 = _3550 * _3550;
                        float _3554 = ((1.0 - _3551) * _3540) + _3551;
                        float _3557 = _3547 * _3547;
                        float _3561 = ((isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0))) * _3546) / ((_3557 * 0.699999988079071044921875) + 1.0);
                        float _3565 = (-0.0) - _2174;
                        float _3566 = (-0.0) - _2175;
                        float _3567 = (-0.0) - _2176;
                        float _3571 = inversesqrt(dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567)));
                        float _3572 = _3571 * _3565;
                        float _3573 = _3571 * _3566;
                        float _3574 = _3571 * _3567;
                        float _3581 = exp2(log2(1.0 / ((_3557 * 3.5) + 5.0)) * 0.25);
                        float _3582 = 1.0 - _1120;
                        float _3589 = sqrt(1.0 - ((1.0 - (_3582 * _3582)) * (1.0 - (_3581 * _3581))));
                        float _3590 = _3589 * _3589;
                        float _3591 = _3590 * _3590;
                        float _3592 = _3572 + _3537;
                        float _3593 = _3573 + _3538;
                        float _3594 = _3574 + _3539;
                        float _3598 = inversesqrt(dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594)));
                        float _3602 = dot(vec3(_1000, _1003, _1006), vec3(_3572, _3573, _3574));
                        float _4969 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                        float _3605 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                        float _3606 = dot(vec3(_1000, _1003, _1006), vec3(_3598 * _3592, _3598 * _3593, _3598 * _3594));
                        float _4980 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3609 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                        float _3613 = ((_3609 * _3609) * (_3591 + (-1.0))) + 1.0;
                        float _3614 = _3550 * _3590;
                        float _3615 = _3614 * _3614;
                        float _3618 = ((1.0 - _3615) * _3540) + _3615;
                        float _4991 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                        float _3619 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                        float _3620 = 1.0 - _3590;
                        float _3630 = (0.5 / (((_3619 * ((_3605 * _3620) + _3590)) + 9.9999999392252902907785028219223e-09) + (((_3619 * _3620) + _3590) * _3605))) * _3619;
                        float _5002 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                        float _3641 = (((_3591 * 3.1415927410125732421875) * (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0)))) / ((_3613 * _3613) * ((_3557 * 2.1991131305694580078125) + 3.141590118408203125))) * _3546;
                        _3399 = (_3561 * _3509.x) + _3467;
                        _3400 = (_3561 * _3509.y) + _3468;
                        _3401 = (_3561 * _3509.z) + _3469;
                        _3396 = (_3641 * _3526.x) + _3464;
                        _3397 = (_3641 * _3526.y) + _3465;
                        _3398 = (_3641 * _3526.z) + _3466;
                        if (_3471 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3464 = _3396;
                            _3465 = _3397;
                            _3466 = _3398;
                            _3467 = _3399;
                            _3468 = _3400;
                            _3469 = _3401;
                            _3470 = _3471;
                        }
                    }
                    frontier_phi_66_pred = _3401;
                    frontier_phi_66_pred_1 = _3400;
                    frontier_phi_66_pred_2 = _3399;
                    frontier_phi_66_pred_3 = _3398;
                    frontier_phi_66_pred_4 = _3397;
                    frontier_phi_66_pred_5 = _3396;
                }
                _3206 = frontier_phi_66_pred;
                _3204 = frontier_phi_66_pred_1;
                _3202 = frontier_phi_66_pred_2;
                _3200 = frontier_phi_66_pred_3;
                _3198 = frontier_phi_66_pred_4;
                _3196 = frontier_phi_66_pred_5;
                uint _3347 = _3346 + 1u;
                if (_3347 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3340 = _3196;
                    _3341 = _3198;
                    _3342 = _3200;
                    _3343 = _3202;
                    _3344 = _3204;
                    _3345 = _3206;
                    _3346 = _3347;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3195 = _3196;
            _3197 = _3198;
            _3199 = _3200;
            _3201 = _3202;
            _3203 = _3204;
            _3205 = _3206;
        }
        uvec4 _3209 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3210 = _3209.z;
        uint _3212 = (_3210 >> 8u) & 15u;
        float _3308;
        float _3310;
        float _3312;
        float _3314;
        float _3316;
        float _3318;
        if (((4294967295u << _3212) & _3115) == 0u)
        {
            _3308 = _3195;
            _3310 = _3197;
            _3312 = _3199;
            _3314 = _3201;
            _3316 = _3203;
            _3318 = _3205;
        }
        else
        {
            float _3333 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
            float _3334 = _3333 * _2174;
            float _3335 = _3333 * _2175;
            float _3336 = _3333 * _2176;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3212 < ((_3210 >> 12u) & 15u))
            {
                float _3309;
                float _3311;
                float _3313;
                float _3315;
                float _3317;
                float _3319;
                float _3447 = _3195;
                float _3448 = _3197;
                float _3449 = _3199;
                float _3450 = _3201;
                float _3451 = _3203;
                float _3452 = _3205;
                uint _3453 = _3212;
                uint _3462;
                bool _3463;
                for (;;)
                {
                    _3462 = texelFetch(g_lightClassification, int((((_3109 << 5u) + (_3095 << 9u)) + (_3453 << 2u)) >> 2u)).x;
                    _3463 = _3462 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3463)
                    {
                        frontier_phi_72_pred = _3452;
                        frontier_phi_72_pred_1 = _3451;
                        frontier_phi_72_pred_2 = _3450;
                        frontier_phi_72_pred_3 = _3449;
                        frontier_phi_72_pred_4 = _3448;
                        frontier_phi_72_pred_5 = _3447;
                    }
                    else
                    {
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3939;
                        float _3940;
                        float _3941;
                        float _3942;
                        float _3943;
                        float _3944;
                        float _3659 = _3447;
                        float _3660 = _3448;
                        float _3661 = _3449;
                        float _3662 = _3450;
                        float _3663 = _3451;
                        float _3664 = _3452;
                        uint _3665 = _3462;
                        uint _3666;
                        vec4 _3691;
                        float _3692;
                        vec4 _3707;
                        vec3 _3719;
                        vec4 _3734;
                        vec4 _3749;
                        float _3795;
                        bool _3796;
                        for (;;)
                        {
                            uint _3676 = ((_3453 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3665));
                            _3666 = (_3665 + 4294967295u) & _3665;
                            uint _3678 = _3676 * 40u;
                            _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            _3692 = _3691.w;
                            uint _3694 = (_3676 * 40u) + 4u;
                            _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3709 = (_3676 * 40u) + 8u;
                            _3719 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x));
                            uint _3721 = (_3676 * 40u) + 16u;
                            _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            uint _3736 = (_3676 * 40u) + 20u;
                            _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            uint _3751 = (_3676 * 40u) + 24u;
                            vec4 _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            uint _3770 = (_3676 * 40u) + 28u;
                            vec4 _3783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 3u)).x));
                            _3795 = fma(_2176, _3783.z, fma(_2175, _3783.y, _3783.x * _2174)) + _3783.w;
                            _3796 = !((fma(_2176, _3764.z, fma(_2175, _3764.y, _3764.x * _2174)) + _3764.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3796)
                            {
                                float _3823 = _3691.x - _2174;
                                float _3824 = _3691.y - _2175;
                                float _3825 = _3691.z - _2176;
                                float _3826 = dot(vec3(_3823, _3824, _3825), vec3(_3823, _3824, _3825));
                                float _3829 = inversesqrt(_3826);
                                float _3830 = _3829 * _3823;
                                float _3831 = _3829 * _3824;
                                float _3832 = _3829 * _3825;
                                float _3836 = 1.0 - (_3826 / (_3692 * _3692));
                                float _5013 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3837 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
                                float _3841 = sqrt(_3826) * _3707.w;
                                float _3843 = 1.39999997615814208984375 / (_3841 + 1.39999997615814208984375);
                                float _3844 = _3843 * _3843;
                                float _3847 = ((1.0 - _3844) * dot(vec3(_3830, _3831, _3832), vec3(_1000, _1003, _1006))) + _3844;
                                float _3850 = _3841 * _3841;
                                float _3854 = (fma(_2176, _3734.z, fma(_2175, _3734.y, _3734.x * _2174)) + _3734.w) / _3795;
                                float _3855 = (fma(_2176, _3749.z, fma(_2175, _3749.y, _3749.x * _2174)) + _3749.w) / _3795;
                                float _3859 = 1.0 - dot(vec2(_3854, _3855), vec2(_3854, _3855));
                                float _5029 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3860 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                                float _3861 = _3860 * (((isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0))) * _3837) / ((_3850 * 0.699999988079071044921875) + 1.0));
                                float _3873 = exp2(log2(1.0 / ((_3850 * 3.5) + 5.0)) * 0.25);
                                float _3874 = 1.0 - _1120;
                                float _3881 = sqrt(1.0 - ((1.0 - (_3874 * _3874)) * (1.0 - (_3873 * _3873))));
                                float _3882 = _3881 * _3881;
                                float _3883 = _3882 * _3882;
                                float _3884 = _3830 - _3334;
                                float _3885 = _3831 - _3335;
                                float _3886 = _3832 - _3336;
                                float _3890 = inversesqrt(dot(vec3(_3884, _3885, _3886), vec3(_3884, _3885, _3886)));
                                float _3894 = dot(vec3(_1000, _1003, _1006), vec3((-0.0) - _3334, (-0.0) - _3335, (-0.0) - _3336));
                                float _5040 = isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0));
                                float _3897 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                                float _3898 = dot(vec3(_1000, _1003, _1006), vec3(_3890 * _3884, _3890 * _3885, _3890 * _3886));
                                float _5051 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3901 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                                float _3905 = ((_3901 * _3901) * (_3883 + (-1.0))) + 1.0;
                                float _3906 = _3843 * _3882;
                                float _3907 = _3906 * _3906;
                                float _3913 = ((1.0 - _3907) * dot(vec3(_1000, _1003, _1006), vec3(_3830, _3831, _3832))) + _3907;
                                float _5062 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3914 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                                float _3915 = 1.0 - _3882;
                                float _3925 = (0.5 / (((_3914 * ((_3897 * _3915) + _3882)) + 9.9999999392252902907785028219223e-09) + (((_3914 * _3915) + _3882) * _3897))) * _3914;
                                float _5073 = isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0));
                                float _3935 = (_3860 * _3837) * (((_3883 * 3.1415927410125732421875) * (isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0)))) / ((_3905 * _3905) * ((_3850 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3861 * _3707.y;
                                frontier_phi_78_pred_1 = _3861 * _3707.x;
                                frontier_phi_78_pred_2 = _3935 * _3719.z;
                                frontier_phi_78_pred_3 = _3935 * _3719.y;
                                frontier_phi_78_pred_4 = _3935 * _3719.x;
                                frontier_phi_78_pred_5 = _3861 * _3707.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3943 = frontier_phi_78_pred;
                            _3942 = frontier_phi_78_pred_1;
                            _3941 = frontier_phi_78_pred_2;
                            _3940 = frontier_phi_78_pred_3;
                            _3939 = frontier_phi_78_pred_4;
                            _3944 = frontier_phi_78_pred_5;
                            _3649 = _3942 + _3662;
                            _3650 = _3943 + _3663;
                            _3651 = _3944 + _3664;
                            _3646 = _3939 + _3659;
                            _3647 = _3940 + _3660;
                            _3648 = _3941 + _3661;
                            if (_3666 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3659 = _3646;
                                _3660 = _3647;
                                _3661 = _3648;
                                _3662 = _3649;
                                _3663 = _3650;
                                _3664 = _3651;
                                _3665 = _3666;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3651;
                        frontier_phi_72_pred_1 = _3650;
                        frontier_phi_72_pred_2 = _3649;
                        frontier_phi_72_pred_3 = _3648;
                        frontier_phi_72_pred_4 = _3647;
                        frontier_phi_72_pred_5 = _3646;
                    }
                    _3319 = frontier_phi_72_pred;
                    _3317 = frontier_phi_72_pred_1;
                    _3315 = frontier_phi_72_pred_2;
                    _3313 = frontier_phi_72_pred_3;
                    _3311 = frontier_phi_72_pred_4;
                    _3309 = frontier_phi_72_pred_5;
                    uint _3454 = _3453 + 1u;
                    if (_3454 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3447 = _3309;
                        _3448 = _3311;
                        _3449 = _3313;
                        _3450 = _3315;
                        _3451 = _3317;
                        _3452 = _3319;
                        _3453 = _3454;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3319;
                frontier_phi_60_61_ladder_1 = _3317;
                frontier_phi_60_61_ladder_2 = _3313;
                frontier_phi_60_61_ladder_3 = _3311;
                frontier_phi_60_61_ladder_4 = _3309;
                frontier_phi_60_61_ladder_5 = _3315;
            }
            else
            {
                frontier_phi_60_61_ladder = _3205;
                frontier_phi_60_61_ladder_1 = _3203;
                frontier_phi_60_61_ladder_2 = _3199;
                frontier_phi_60_61_ladder_3 = _3197;
                frontier_phi_60_61_ladder_4 = _3195;
                frontier_phi_60_61_ladder_5 = _3201;
            }
            _3308 = frontier_phi_60_61_ladder_4;
            _3310 = frontier_phi_60_61_ladder_3;
            _3312 = frontier_phi_60_61_ladder_2;
            _3314 = frontier_phi_60_61_ladder_5;
            _3316 = frontier_phi_60_61_ladder_1;
            _3318 = frontier_phi_60_61_ladder;
        }
        float _3323 = isnan(1.0) ? _1104 : (isnan(_1104) ? 1.0 : min(_1104, 1.0));
        _3128 = (_3323 * _3314) + _2640;
        _3130 = (_3323 * _3316) + _2642;
        _3132 = (_3323 * _3318) + _2644;
        _3134 = ((_3308 * _1089) * _3323) + _2978;
        _3136 = ((_3310 * _1091) * _3323) + _2980;
        _3138 = ((_3312 * _1092) * _3323) + _2982;
    }
    else
    {
        _3128 = _2640;
        _3130 = _2642;
        _3132 = _2644;
        _3134 = _2978;
        _3136 = _2980;
        _3138 = _2982;
    }
    float _5089 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _5100 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _5111 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    uint _3158 = _1032 + 6u;
    float _3166 = _977 / cbSceneParam._m0[86u].x;
    float _3167 = _978 / cbSceneParam._m0[86u].y;
    vec4 _3181 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3166, _3167, (log2((isnan(cbSceneParam._m0[77u].w) ? _912 : (isnan(_912) ? cbSceneParam._m0[77u].w : min(_912, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3183 = _3181.x;
    float _3184 = _3181.y;
    float _3185 = _3181.z;
    float _3186 = _3181.w;
    float _3258;
    float _3260;
    float _3262;
    float _3264;
    if (_912 > cbSceneParam._m0[78u].w)
    {
        float _3220 = isnan(_912) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _912 : min(cbSceneParam._m0[80u].w, _912));
        float _3221 = _3220 / _912;
        float _3232 = _3221 * _962;
        float _3233 = _963 * _3221;
        float _3234 = (-0.0) - _3233;
        float _3236 = _3221 * _964;
        float _3238 = (cbSceneParam._m0[77u].w * _3234) / _3220;
        float _3239 = _3238 + cbSceneParam._m0[79u].w;
        float _3240 = cbSceneParam._m0[79u].w - _3233;
        float _3246 = sqrt(((_3232 * _3232) + (_3233 * _3233)) + (_3236 * _3236));
        float _3249 = (1.0 - (cbSceneParam._m0[77u].w / _3220)) * _3246;
        float _3254 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3256 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3409;
        if (abs((_3234 - _3238) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3409 = ((((_3239 > 0.0) ? exp2(_3254 * _3239) : (2.0 - exp2(_3256 * _3239))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3249;
        }
        else
        {
            float _3369 = 1.0 / cbSceneParam._m0[80u].x;
            float _3370 = isnan(_3240) ? _3239 : (isnan(_3239) ? _3240 : max(_3239, _3240));
            float _3371 = isnan(_3240) ? _3239 : (isnan(_3239) ? _3240 : min(_3239, _3240));
            float _3380 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : min(_3370, 0.0));
            float _3381 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : min(_3371, 0.0));
            _3409 = ((abs(_3246 / _3234) * cbSceneParam._m0[80u].y) * ((((_3380 - _3381) * 2.0) - ((exp2(_3254 * (isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0)))) - exp2(_3254 * (isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0))))) * _3369)) - ((exp2(_3256 * _3380) - exp2(_3256 * _3381)) * _3369))) + (_3249 * cbSceneParam._m0[80u].z);
        }
        vec4 _3411 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3166, _3167, 1.0), 0.0);
        float _3420 = exp2((_3409 * (-1.44269502162933349609375)) * (1.0 - _3411.w));
        float _3421 = log2(_3420);
        float _3437 = log2(_3186);
        _3258 = (exp2(_3437 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3421 * cbSceneParam._m0[78u].x)) * _3411.x) / cbSceneParam._m0[78u].x)) + _3183;
        _3260 = (exp2(_3437 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3421 * cbSceneParam._m0[78u].y)) * _3411.y) / cbSceneParam._m0[78u].y)) + _3184;
        _3262 = (exp2(_3437 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3421 * cbSceneParam._m0[78u].z)) * _3411.z) / cbSceneParam._m0[78u].z)) + _3185;
        _3264 = _3420 * _3186;
    }
    else
    {
        _3258 = _3183;
        _3260 = _3184;
        _3262 = _3185;
        _3264 = _3186;
    }
    float _3276 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3277 = _3276 == 3.0;
    float _3278 = log2(_3264);
    float _3285 = exp2(_3278 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0))) * (_3128 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1104))) + ((_3134 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1908)) * cbPerFrame._m0[3u].x));
    float _3286 = exp2(_3278 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0))) * (_3130 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1104))) + ((_3136 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1908)) * cbPerFrame._m0[3u].x));
    float _3287 = exp2(_3278 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0))) * (_3132 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1104))) + ((_3138 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1908)) * cbPerFrame._m0[3u].x));
    float _3296 = (_3276 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3296 * (_3277 ? _3285 : (_3285 + (cbSceneParam._m0[72u].w * _3258)));
    SV_Target.y = _3296 * (_3277 ? _3286 : (_3286 + (cbSceneParam._m0[72u].w * _3260)));
    SV_Target.z = _3296 * (_3277 ? _3287 : (_3287 + (cbSceneParam._m0[72u].w * _3262)));
    SV_Target.w = cbInstanceData._m0[_3158].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3158].w;
}


