#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_15;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1478;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = cbMtdParam._m0[25u].x + TEXCOORD.y;
    vec4 _283 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (_269 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _290 = log2(0.0);
    float _292 = exp2(_290 * cbMtdParam._m0[24u].y);
    float _296 = _292 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _292);
    float _297 = _292 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _292);
    float _298 = _292 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _292);
    float _299 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _300 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _301 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _302 = isnan(1.0) ? _299 : (isnan(_299) ? 1.0 : min(_299, 1.0));
    float _304 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    float _305 = isnan(1.0) ? _301 : (isnan(_301) ? 1.0 : min(_301, 1.0));
    vec4 _318 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _269) + cbTextureTilingScale._m0[0u].w));
    float _322 = _318.z;
    float _323 = _318.w;
    float _324 = 1.0 - _323;
    float _333 = exp2(log2((1.0 - (_324 * _322)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _334 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _335 = isnan(1.0) ? _334 : (isnan(_334) ? 1.0 : min(_334, 1.0));
    float _344 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_324 * _324) * _322))) * cbMtdParam._m0[26u].y);
    float _345 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    vec4 _358 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _361 = _358.y;
    float _364 = (_361 * ((isnan(1.0) ? _345 : (isnan(_345) ? 1.0 : min(_345, 1.0))) - _323)) + _323;
    float _367 = (_358.x + (-0.02500000037252902984619140625)) * 8.0;
    float _371 = roundEven(5.0 - _367);
    float _372 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _373 = isnan(4.0) ? _372 : (isnan(_372) ? 4.0 : min(_372, 4.0));
    float _386 = floor(_373);
    vec4 _389 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _269) + cbTextureTilingScale._m0[10u].w, _386));
    float _210[6];
    float _211[6];
    float _212[6];
    _210[0u] = cbMtdParam._m0[12u].x;
    _211[0u] = cbMtdParam._m0[12u].y;
    _212[0u] = cbMtdParam._m0[12u].z;
    _210[1u] = cbMtdParam._m0[13u].x;
    _211[1u] = cbMtdParam._m0[13u].y;
    _212[1u] = cbMtdParam._m0[13u].z;
    _210[2u] = cbMtdParam._m0[14u].x;
    _211[2u] = cbMtdParam._m0[14u].y;
    _212[2u] = cbMtdParam._m0[14u].z;
    _210[3u] = cbMtdParam._m0[15u].x;
    _211[3u] = cbMtdParam._m0[15u].y;
    _212[3u] = cbMtdParam._m0[15u].z;
    _210[4u] = cbMtdParam._m0[16u].x;
    _211[4u] = cbMtdParam._m0[16u].y;
    _212[4u] = cbMtdParam._m0[16u].z;
    _210[5u] = cbMtdParam._m0[11u].x;
    _211[5u] = cbMtdParam._m0[11u].y;
    _212[5u] = cbMtdParam._m0[11u].z;
    float _455 = roundEven(_367);
    float _456 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    uint _458 = uint(int(isnan(5.0) ? _456 : (isnan(_456) ? 5.0 : min(_456, 5.0))));
    float _207[6];
    float _208[6];
    float _209[6];
    _207[0u] = 1.0;
    _208[0u] = 1.0;
    _209[0u] = 1.0;
    _207[1u] = cbMtdParam._m0[22u].x;
    _208[1u] = cbMtdParam._m0[22u].y;
    _209[1u] = cbMtdParam._m0[22u].z;
    _207[2u] = cbMtdParam._m0[21u].x;
    _208[2u] = cbMtdParam._m0[21u].y;
    _209[2u] = cbMtdParam._m0[21u].z;
    _207[3u] = cbMtdParam._m0[19u].x;
    _208[3u] = cbMtdParam._m0[19u].y;
    _209[3u] = cbMtdParam._m0[19u].z;
    _207[4u] = cbMtdParam._m0[18u].x;
    _208[4u] = cbMtdParam._m0[18u].y;
    _209[4u] = cbMtdParam._m0[18u].z;
    _207[5u] = cbMtdParam._m0[17u].x;
    _208[5u] = cbMtdParam._m0[17u].y;
    _209[5u] = cbMtdParam._m0[17u].z;
    float _545 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[29u].y * TEXCOORD.x) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[29u].z * TEXCOORD.y) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _546 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    uint _548 = uint(int(isnan(5.0) ? _546 : (isnan(_546) ? 5.0 : min(_546, 5.0))));
    float _206[6];
    _206[0u] = 1.0;
    _206[1u] = cbMtdParam._m0[22u].w;
    _206[2u] = cbMtdParam._m0[21u].w;
    _206[3u] = cbMtdParam._m0[19u].w;
    _206[4u] = cbMtdParam._m0[18u].w;
    _206[5u] = cbMtdParam._m0[17u].w;
    float _585 = ((((_210[_458] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[24u].z * (_207[_548] - _210[_458])) * _206[_458])) * _361) + cbMtdParam._m0[10u].x) * _389.x;
    float _586 = ((((_211[_458] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[24u].z * (_208[_548] - _211[_458])) * _206[_458])) * _361) + cbMtdParam._m0[10u].y) * _389.y;
    float _587 = ((((_212[_458] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[24u].z * (_209[_548] - _212[_458])) * _206[_458])) * _361) + cbMtdParam._m0[10u].z) * _389.z;
    vec4 _599 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _269) + cbTextureTilingScale._m0[1u].w));
    float _619 = (((cbMtdParam._m0[9u].x * _599.x) - _585) * _364) + _585;
    float _620 = (((cbMtdParam._m0[9u].y * _599.y) - _586) * _364) + _586;
    float _621 = (((cbMtdParam._m0[9u].z * _599.z) - _587) * _364) + _587;
    vec4 _633 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    float _653 = (((cbMtdParam._m0[20u].x * _633.x) - _619) * _335) + _619;
    float _654 = (((cbMtdParam._m0[20u].y * _633.y) - _620) * _335) + _620;
    float _655 = (((cbMtdParam._m0[20u].z * _633.z) - _621) * _335) + _621;
    vec4 _667 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    float _691 = (_283.x * 4.5) * ((((cbMtdParam._m0[23u].x * _667.x) - _653) * _302) + _653);
    float _693 = (_283.y * 4.5) * ((((cbMtdParam._m0[23u].y * _667.y) - _654) * _304) + _654);
    float _695 = (_283.z * 4.5) * ((((cbMtdParam._m0[23u].z * _667.z) - _655) * _305) + _655);
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[26u].w;
    _202[0u] = cbMtdParam._m0[27u].x;
    _201[1u] = cbMtdParam._m0[27u].y;
    _202[1u] = cbMtdParam._m0[27u].z;
    _201[2u] = cbMtdParam._m0[27u].w;
    _202[2u] = cbMtdParam._m0[28u].x;
    _201[3u] = cbMtdParam._m0[28u].y;
    _202[3u] = cbMtdParam._m0[28u].z;
    _201[4u] = cbMtdParam._m0[28u].w;
    _202[4u] = cbMtdParam._m0[29u].x;
    float _723 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    uint _725 = uint(int(isnan(4.0) ? _723 : (isnan(_723) ? 4.0 : min(_723, 4.0))));
    float _737 = ((cbMtdParam._m0[30u].x - _202[_725]) * _364) + _202[_725];
    float _742 = ((cbMtdParam._m0[30u].z - _737) * _335) + _737;
    float _750 = ((cbMtdParam._m0[31u].x - _742) * _302) + _742;
    vec4 _765 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w, _386));
    float _767 = _765.x;
    float _768 = _765.y;
    float _770 = _765.z + _201[_725];
    vec4 _782 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _269) + cbTextureTilingScale._m0[6u].w));
    float _790 = (((cbMtdParam._m0[29u].w - _770) + _782.z) * _364) + _770;
    vec4 _803 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _269) + cbTextureTilingScale._m0[8u].w));
    float _811 = (((cbMtdParam._m0[30u].y - _790) + _803.z) * _335) + _790;
    float _817 = ((((_322 * 2.0) * _811) - _811) * cbMtdParam._m0[25u].y) + _811;
    vec4 _829 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w));
    float _837 = (((_829.z + cbMtdParam._m0[30u].w) - _817) * _305) + _817;
    float _850 = ((_782.x - _767) * _364) + _767;
    float _851 = ((_782.y - _768) * _364) + _768;
    float _856 = ((_803.x - _850) * _335) + _850;
    float _857 = ((_803.y - _851) * _335) + _851;
    float _866 = ((((_829.x - _856) * _302) + _856) * 2.0) + (-1.0);
    float _867 = ((((_829.y - _857) * _304) + _857) * 2.0) + (-1.0);
    float _868 = dot(vec2(_866, _867), vec2(_866, _867));
    float _4174 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _873 = sqrt(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))));
    float _876 = _866 + (cbMtdParam._m0[25u].z * ((_318.x * 2.0) + (-1.0)));
    float _877 = _867 + (cbMtdParam._m0[25u].z * ((_318.y * 2.0) + (-1.0)));
    float _880 = fma(_873, _247 * NORMAL.x, fma(_877, _254 * TANGENT.x, (_240 * _232) * _876));
    float _883 = fma(_873, _247 * NORMAL.y, fma(_877, _254 * TANGENT.y, (_240 * _233) * _876));
    float _886 = fma(_873, _247 * NORMAL.z, fma(_877, _254 * TANGENT.z, (_240 * _234) * _876));
    float _890 = inversesqrt(dot(vec3(_880, _883, _886), vec3(_880, _883, _886)));
    float _891 = _890 * _880;
    float _892 = _890 * _883;
    float _893 = _890 * _886;
    float _4185 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _894 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _4196 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4207 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4218 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4229 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _898 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _914 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _964 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _954);
    float _965 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _954);
    float _966 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _954);
    float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
    float _971 = _964 * _970;
    float _972 = _965 * _970;
    float _973 = _966 * _970;
    float _979 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _980 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _982 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _984 = _982.w;
    float _1002 = fma(_893, cbSceneParam._m0[5u].z, fma(_892, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _891));
    float _1005 = fma(_893, cbSceneParam._m0[6u].z, fma(_892, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _891));
    float _1008 = fma(_893, cbSceneParam._m0[7u].z, fma(_892, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _891));
    vec4 _1010 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1021 = (((_1010.y - _894) + (_1010.w * _894)) * cbMtdParam._m0[3u].x) + _894;
    uint _1034 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1036 = (_1034 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1042 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * cbInstanceData._m0[_1036].x;
    float _1043 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * cbInstanceData._m0[_1036].y;
    float _1044 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * cbInstanceData._m0[_1036].z;
    float _4240 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _4251 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    vec4 _1048 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1053 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1064 = (((_1053.x - _898) + (_1053.w * _898)) * cbMtdParam._m0[3u].x) + _898;
    float _1077 = (cbMtdParam._m0[3u].x * (((_1045 * _984) - _1045) + _1048.x)) + _1045;
    float _1078 = (cbMtdParam._m0[3u].x * (((_1046 * _984) - _1046) + _1048.y)) + _1046;
    float _1079 = (cbMtdParam._m0[3u].x * (((_1047 * _984) - _1047) + _1048.z)) + _1047;
    float _1080 = 1.0 - _1064;
    float _1081 = _1080 * _1077;
    float _1082 = _1080 * _1078;
    float _1083 = _1080 * _1079;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _1064;
    float _1089 = (_1078 + (-0.039999999105930328369140625)) * _1064;
    float _1090 = (_1079 + (-0.039999999105930328369140625)) * _1064;
    float _1091 = _1088 + 0.039999999105930328369140625;
    float _1093 = _1089 + 0.039999999105930328369140625;
    float _1094 = _1090 + 0.039999999105930328369140625;
    vec4 _1103 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _979, cbSceneParam._m0[86u].y * _980));
    float _1106 = _1103.x * TEXCOORD_5.w;
    float _1107 = dot(vec3(_891, _892, _893), vec3(_971, _972, _973));
    float _1110 = _1107 * 2.0;
    float _1114 = (_1110 * _891) - _971;
    float _1115 = (_1110 * _892) - _972;
    float _1116 = (_1110 * _893) - _973;
    float _1120 = abs(dot(vec3(_971, _972, _973), vec3(_891, _892, _893)));
    float _4273 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1122 = sqrt(_1021);
    float _1133 = exp2((_1122 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1122 * 3.0));
    float _1139 = (1.0 - _1133) * ((_1122 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1140 = _1133 * _1122;
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1477;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1202 = fma(_1176, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168));
        float _1206 = fma(_1176, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168));
        float _1210 = fma(_1176, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168));
        float _1235 = _1168 + _891;
        float _1236 = _1172 + _892;
        float _1237 = _1176 + _893;
        float _1247 = fma(_1237, cbModelParam._m0[26u].z, fma(_1236, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1235)) - _1202;
        float _1248 = fma(_1237, cbModelParam._m0[27u].z, fma(_1236, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1235)) - _1206;
        float _1249 = fma(_1237, cbModelParam._m0[28u].z, fma(_1236, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1235)) - _1210;
        float _1253 = inversesqrt(dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249)));
        float _1266 = ((_1253 * _1247) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1202 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1253 * _1248) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1206 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1253 * _1249) / cbModelParam._m0[34u].z) + ((((((_1210 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        float _1305 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1271.x + (-0.5));
        float _1307 = _1305 * (_1271.y + (-0.5));
        float _1308 = _1305 * (_1271.z + (-0.5));
        float _1315 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1278.x + (-0.5));
        float _1317 = _1315 * (_1278.y + (-0.5));
        float _1318 = _1315 * (_1278.z + (-0.5));
        float _1325 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1285.x + (-0.5));
        float _1327 = _1325 * (_1285.y + (-0.5));
        float _1328 = _1325 * (_1285.z + (-0.5));
        float _1335 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1292.x + (-0.5));
        float _1337 = _1335 * (_1292.y + (-0.5));
        float _1338 = _1335 * (_1292.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1359 = (dot(vec3(_891, _892, _893), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1369 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4321 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1371 + 1.0))) + _1376) * _1339;
        float _1386 = _1307 * 0.5;
        float _1387 = _1317 * 0.5;
        float _1388 = _1327 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_891, _892, _893), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4354 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1413 + 1.0))) + _1418) * _1340;
        float _1428 = _1308 * 0.5;
        float _1429 = _1318 * 0.5;
        float _1430 = _1328 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_891, _892, _893), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4387 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1455 + 1.0))) + _1460) * _1341;
        _1477 = _1308;
        _1479 = _1307;
        _1480 = _1306;
        _1481 = _1318;
        _1482 = _1317;
        _1483 = _1316;
        _1484 = _1328;
        _1485 = _1327;
        _1486 = _1326;
        _1487 = _1341;
        _1488 = _1340;
        _1489 = _1339;
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1478;
        _1479 = _1478;
        _1480 = _1478;
        _1481 = _1478;
        _1482 = _1478;
        _1483 = _1478;
        _1484 = _1478;
        _1485 = _1478;
        _1486 = _1478;
        _1487 = _1478;
        _1488 = _1478;
        _1489 = _1478;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1515 = fma(_1176, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1168));
        float _1519 = fma(_1176, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1168));
        float _1523 = fma(_1176, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1168));
        float _1546 = _1168 + _891;
        float _1547 = _1172 + _892;
        float _1548 = _1176 + _893;
        float _1558 = fma(_1548, cbModelParam._m0[30u].z, fma(_1547, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1546)) - _1515;
        float _1559 = fma(_1548, cbModelParam._m0[31u].z, fma(_1547, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1546)) - _1519;
        float _1560 = fma(_1548, cbModelParam._m0[32u].z, fma(_1547, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1546)) - _1523;
        float _1564 = inversesqrt(dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560)));
        float _1577 = ((_1564 * _1558) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1515 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1578 = ((_1564 * _1559) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1519 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1579 = ((_1564 * _1560) / cbModelParam._m0[35u].z) + ((((((_1523 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        float _1614 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1581.x + (-0.5));
        float _1616 = _1614 * (_1581.y + (-0.5));
        float _1617 = _1614 * (_1581.z + (-0.5));
        float _1624 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1588.x + (-0.5));
        float _1626 = _1624 * (_1588.y + (-0.5));
        float _1627 = _1624 * (_1588.z + (-0.5));
        float _1634 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1595.x + (-0.5));
        float _1636 = _1634 * (_1595.y + (-0.5));
        float _1637 = _1634 * (_1595.z + (-0.5));
        float _1644 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1602.x + (-0.5));
        float _1646 = _1644 * (_1602.y + (-0.5));
        float _1647 = _1644 * (_1602.z + (-0.5));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = _1615 * 0.5;
        float _1652 = _1625 * 0.5;
        float _1653 = _1635 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_891, _892, _893), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4428 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4439 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4450 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_1678 + 1.0))) + _1683) * _1648;
        float _1693 = _1616 * 0.5;
        float _1694 = _1626 * 0.5;
        float _1695 = _1636 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_891, _892, _893), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4483 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1720 + 1.0))) + _1725) * _1649;
        float _1735 = _1617 * 0.5;
        float _1736 = _1627 * 0.5;
        float _1737 = _1637 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_891, _892, _893), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4516 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1762 + 1.0))) + _1767) * _1650;
        _1784 = _1617;
        _1785 = _1616;
        _1786 = _1615;
        _1787 = _1627;
        _1788 = _1626;
        _1789 = _1625;
        _1790 = _1637;
        _1791 = _1636;
        _1792 = _1635;
        _1793 = _1650;
        _1794 = _1649;
        _1795 = _1648;
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
    }
    else
    {
        _1784 = _1478;
        _1785 = _1478;
        _1786 = _1478;
        _1787 = _1478;
        _1788 = _1478;
        _1789 = _1478;
        _1790 = _1478;
        _1791 = _1478;
        _1792 = _1478;
        _1793 = _1478;
        _1794 = _1478;
        _1795 = _1478;
        _1796 = 0.0;
        _1797 = 0.0;
        _1798 = 0.0;
    }
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1490)) + _1490;
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1491)) + _1491;
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1492)) + _1492;
    float _1831 = fma(_1810, cbSceneParam._m0[89u].z, fma(_1809, cbSceneParam._m0[89u].y, _1808 * cbSceneParam._m0[89u].x));
    float _1834 = fma(_1810, cbSceneParam._m0[90u].z, fma(_1809, cbSceneParam._m0[90u].y, _1808 * cbSceneParam._m0[90u].x));
    float _1837 = fma(_1810, cbSceneParam._m0[91u].z, fma(_1809, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1808));
    float _1852 = _1114 * 0.5;
    float _1853 = _1115 * 0.5;
    float _1854 = _1116 * 0.5;
    float _1855 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1858 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1861 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1895;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1868 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1477, _1481, _1484, _1487));
        float _1872 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1479, _1482, _1485, _1488));
        float _1876 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1480, _1483, _1486, _1489));
        float _1883 = dot(vec4(cbModelParam._m0[39u]), vec4(_1852, _1853, _1854, 1.0));
        _1895 = dot(vec3(isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1883) ? 0.0 : (isnan(0.0) ? _1883 : max(0.0, _1883))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1895 = 1.0;
    }
    float _1906;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1897 = dot(vec4(cbModelParam._m0[40u]), vec4(_1852, _1853, _1854, 1.0));
        _1906 = dot(vec3(isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1897) ? 0.0 : (isnan(0.0) ? _1897 : max(0.0, _1897))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1906 = 1.0;
    }
    float _1910 = (_1906 * cbModelParam._m0[1u].x) + (_1895 * (1.0 - cbModelParam._m0[1u].x));
    float _1920 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1021);
    float _1921 = isnan(_1920) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1920 : min(cbModelParam._m0[25u].z, _1920));
    float _2001;
    float _2003;
    float _2005;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1968 = fma(_1176, cbModelParam._m0[13u].z, fma(_1172, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1168)) + cbModelParam._m0[13u].w;
        float _1972 = fma(_1176, cbModelParam._m0[14u].z, fma(_1172, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1168)) + cbModelParam._m0[14u].w;
        float _1976 = fma(_1176, cbModelParam._m0[15u].z, fma(_1172, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1168)) + cbModelParam._m0[15u].w;
        float _1979 = fma(_1116, cbModelParam._m0[13u].z, fma(_1115, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1114));
        float _1982 = fma(_1116, cbModelParam._m0[14u].z, fma(_1115, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1114));
        float _1985 = fma(_1116, cbModelParam._m0[15u].z, fma(_1115, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1114));
        float _2013;
        if (_1979 > 0.0)
        {
            _2013 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2013 = frontier_phi_14_12_ladder;
        }
        float _2184;
        if (_1982 > 0.0)
        {
            _2184 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2184 = frontier_phi_23_19_ladder;
        }
        float _2479;
        if (_1985 > 0.0)
        {
            _2479 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2479 = frontier_phi_35_30_ladder;
        }
        float _2481 = isnan(_2184) ? _2013 : (isnan(_2013) ? _2184 : min(_2013, _2184));
        float _2482 = isnan(_2479) ? _2481 : (isnan(_2481) ? _2479 : min(_2481, _2479));
        float _2486 = (_2482 * _1979) + _1968;
        float _2487 = (_2482 * _1982) + _1972;
        float _2488 = (_2482 * _1985) + _1976;
        float _2489 = _2482 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2489;
        float _2493 = _2489 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 > _2493) || ((_2487 < _2491) || ((_2486 < _2491) || (_2486 > _2493))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2633 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2488, cbModelParam._m0[9u].z, fma(_2487, cbModelParam._m0[9u].y, _2486 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2488, cbModelParam._m0[10u].z, fma(_2487, cbModelParam._m0[10u].y, _2486 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2488, cbModelParam._m0[11u].z, fma(_2487, cbModelParam._m0[11u].y, _2486 * cbModelParam._m0[11u].x))), _1921);
            frontier_phi_13_35_ladder = _2633.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2633.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2633.x * cbModelParam._m0[1u].y;
        }
        _2001 = frontier_phi_13_35_ladder_2;
        _2003 = frontier_phi_13_35_ladder_1;
        _2005 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1989 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1114, _1115, _1116), _1921);
        _2001 = _1989.x * cbModelParam._m0[1u].y;
        _2003 = _1989.y * cbModelParam._m0[1u].y;
        _2005 = _1989.z * cbModelParam._m0[1u].y;
    }
    float _2009 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1021);
    float _2010 = isnan(_2009) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2009 : min(cbModelParam._m0[25u].w, _2009));
    float _2099;
    float _2101;
    float _2103;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2063 = fma(_1176, cbModelParam._m0[21u].z, fma(_1172, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1168)) + cbModelParam._m0[21u].w;
        float _2067 = fma(_1176, cbModelParam._m0[22u].z, fma(_1172, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1168)) + cbModelParam._m0[22u].w;
        float _2071 = fma(_1176, cbModelParam._m0[23u].z, fma(_1172, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1168)) + cbModelParam._m0[23u].w;
        float _2074 = fma(_1116, cbModelParam._m0[21u].z, fma(_1115, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1114));
        float _2077 = fma(_1116, cbModelParam._m0[22u].z, fma(_1115, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1114));
        float _2080 = fma(_1116, cbModelParam._m0[23u].z, fma(_1115, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1114));
        float _2189;
        if (_2074 > 0.0)
        {
            _2189 = abs((1.0 - _2063) / _2074);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2063 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2189 = frontier_phi_25_21_ladder;
        }
        float _2506;
        if (_2077 > 0.0)
        {
            _2506 = abs((1.0 - _2067) / _2077);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2067 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2506 = frontier_phi_37_32_ladder;
        }
        float _2844;
        if (_2080 > 0.0)
        {
            _2844 = abs((1.0 - _2071) / _2080);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2071 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2844 = frontier_phi_47_44_ladder;
        }
        float _2846 = isnan(_2506) ? _2189 : (isnan(_2189) ? _2506 : min(_2189, _2506));
        float _2847 = isnan(_2844) ? _2846 : (isnan(_2846) ? _2844 : min(_2846, _2844));
        float _2851 = (_2847 * _2074) + _2063;
        float _2852 = (_2847 * _2077) + _2067;
        float _2853 = (_2847 * _2080) + _2071;
        float _2854 = _2847 * 9.9999997473787516355514526367188e-05;
        float _2855 = (-1.0) - _2854;
        float _2857 = _2854 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2853 > _2857) || ((_2853 < _2855) || ((_2852 > _2857) || ((_2852 < _2855) || ((_2851 < _2855) || (_2851 > _2857))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2975 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2853, cbModelParam._m0[17u].z, fma(_2852, cbModelParam._m0[17u].y, _2851 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2853, cbModelParam._m0[18u].z, fma(_2852, cbModelParam._m0[18u].y, _2851 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2853, cbModelParam._m0[19u].z, fma(_2852, cbModelParam._m0[19u].y, _2851 * cbModelParam._m0[19u].x))), _2010);
            frontier_phi_22_47_ladder = _2975.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2975.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2975.x * cbModelParam._m0[1u].z;
        }
        _2099 = frontier_phi_22_47_ladder_2;
        _2101 = frontier_phi_22_47_ladder_1;
        _2103 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2083 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1114, _1115, _1116), _2010);
        _2099 = _2083.x * cbModelParam._m0[1u].z;
        _2101 = _2083.y * cbModelParam._m0[1u].z;
        _2103 = _2083.z * cbModelParam._m0[1u].z;
    }
    float _2116 = (((_1139 * _1091) + _1140) * _1106) * ((cbModelParam._m0[1u].w * (_2099 - _2001)) + _2001);
    float _2118 = (((_1139 * _1093) + _1140) * _1106) * ((cbModelParam._m0[1u].w * (_2101 - _2003)) + _2003);
    float _2120 = (((_1139 * _1094) + _1140) * _1106) * ((cbModelParam._m0[1u].w * (_2103 - _2005)) + _2005);
    float _2123 = fma(_2120, cbSceneParam._m0[89u].z, fma(_2118, cbSceneParam._m0[89u].y, _2116 * cbSceneParam._m0[89u].x));
    float _2126 = fma(_2120, cbSceneParam._m0[90u].z, fma(_2118, cbSceneParam._m0[90u].y, _2116 * cbSceneParam._m0[90u].x));
    float _2129 = fma(_2120, cbSceneParam._m0[91u].z, fma(_2118, cbSceneParam._m0[91u].y, _2116 * cbSceneParam._m0[91u].x));
    float _2163 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2167 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2171 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2175 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2176 = _2163 / _2175;
    float _2177 = _2167 / _2175;
    float _2178 = _2171 / _2175;
    float _2325;
    float _2326;
    float _2327;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2205 = ((uint(_2178 > cbSceneParam._m0[59u].y) + uint(_2178 > cbSceneParam._m0[59u].x)) + uint(_2178 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2206 = _2205 + 43u;
        uint _2214 = _2205 + 44u;
        uint _2222 = _2205 + 45u;
        uint _2230 = _2205 + 46u;
        float _2241 = fma(_2175, cbSceneParam._m0[_2206].w, fma(_2171, cbSceneParam._m0[_2206].z, fma(_2167, cbSceneParam._m0[_2206].y, _2163 * cbSceneParam._m0[_2206].x)));
        float _2245 = fma(_2175, cbSceneParam._m0[_2214].w, fma(_2171, cbSceneParam._m0[_2214].z, fma(_2167, cbSceneParam._m0[_2214].y, _2163 * cbSceneParam._m0[_2214].x)));
        float _2253 = fma(_2175, cbSceneParam._m0[_2230].w, fma(_2171, cbSceneParam._m0[_2230].z, fma(_2167, cbSceneParam._m0[_2230].y, _2163 * cbSceneParam._m0[_2230].x)));
        float _2258 = cbSceneParam._m0[33u].z * _2253;
        float _2260 = cbSceneParam._m0[33u].w * _2253;
        float _2263 = fma(_2175, cbSceneParam._m0[_2222].w, fma(_2171, cbSceneParam._m0[_2222].z, fma(_2167, cbSceneParam._m0[_2222].y, _2163 * cbSceneParam._m0[_2222].x))) / _2253;
        float _2311 = (cbSceneParam._m0[33u].x - sqrt(((_2177 * _2177) + (_2176 * _2176)) + (_2178 * _2178))) * cbSceneParam._m0[33u].y;
        float _4642 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2318 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2258 + _2241) / _2253, (_2260 + _2245) / _2253), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2260 + _2241) / _2253, (_2245 - _2258) / _2253), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2241 - _2258) / _2253, (_2245 - _2260) / _2253), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2241 - _2260) / _2253, (_2258 + _2245) / _2253), _2263), 0.0)).x), vec4(0.25)));
        _2325 = 1.0 - (_2318 * cbSceneParam._m0[34u].x);
        _2326 = 1.0 - (_2318 * cbSceneParam._m0[34u].y);
        _2327 = 1.0 - (_2318 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2325 = 1.0;
        _2326 = 1.0;
        _2327 = 1.0;
    }
    float _2391;
    float _2393;
    float _2395;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2379 = fma(_2175, cbSceneParam._m0[63u].w, fma(_2171, cbSceneParam._m0[63u].z, fma(_2167, cbSceneParam._m0[63u].y, _2163 * cbSceneParam._m0[63u].x)));
        float _2380 = fma(_2175, cbSceneParam._m0[60u].w, fma(_2171, cbSceneParam._m0[60u].z, fma(_2167, cbSceneParam._m0[60u].y, _2163 * cbSceneParam._m0[60u].x))) / _2379;
        float _2381 = fma(_2175, cbSceneParam._m0[61u].w, fma(_2171, cbSceneParam._m0[61u].z, fma(_2167, cbSceneParam._m0[61u].y, _2163 * cbSceneParam._m0[61u].x))) / _2379;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2380 >= cbSceneParam._m0[64u].x) && (_2381 >= cbSceneParam._m0[64u].y)) && (_2380 <= cbSceneParam._m0[64u].z)) && (_2381 <= cbSceneParam._m0[64u].w))
        {
            float _2519 = fma(_2175, cbSceneParam._m0[62u].w, fma(_2171, cbSceneParam._m0[62u].z, fma(_2167, cbSceneParam._m0[62u].y, _2163 * cbSceneParam._m0[62u].x))) / _2379;
            float _2523 = isnan(cbSceneParam._m0[41u].w) ? _2519 : (isnan(_2519) ? cbSceneParam._m0[41u].w : max(_2519, cbSceneParam._m0[41u].w));
            float _2566 = (cbSceneParam._m0[33u].x - sqrt(((_2177 * _2177) + (_2176 * _2176)) + (_2178 * _2178))) * cbSceneParam._m0[33u].y;
            float _4658 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
            float _2573 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2380, cbSceneParam._m0[33u].w + _2381), _2523), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2380, _2381 - cbSceneParam._m0[33u].z), _2523), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2380 - cbSceneParam._m0[33u].z, _2381 - cbSceneParam._m0[33u].w), _2523), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2380 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2381), _2523), 0.0)).x), vec4(0.25)));
            float _2577 = 1.0 - (_2573 * cbSceneParam._m0[34u].x);
            float _2578 = 1.0 - (_2573 * cbSceneParam._m0[34u].y);
            float _2579 = 1.0 - (_2573 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2579) ? _2327 : (isnan(_2327) ? _2579 : min(_2327, _2579));
            frontier_phi_34_33_ladder_1 = isnan(_2578) ? _2326 : (isnan(_2326) ? _2578 : min(_2326, _2578));
            frontier_phi_34_33_ladder_2 = isnan(_2577) ? _2325 : (isnan(_2325) ? _2577 : min(_2325, _2577));
        }
        else
        {
            frontier_phi_34_33_ladder = _2327;
            frontier_phi_34_33_ladder_1 = _2326;
            frontier_phi_34_33_ladder_2 = _2325;
        }
        _2391 = frontier_phi_34_33_ladder_2;
        _2393 = frontier_phi_34_33_ladder_1;
        _2395 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2391 = _2325;
        _2393 = _2326;
        _2395 = _2327;
    }
    uvec4 _2400 = floatBitsToUint(cbInstanceData._m0[_1034 + 5u]);
    uint _2402 = _2400.x * 14u;
    uint _2403 = _2402 + 13u;
    float _2410 = _1106 + (-1.0);
    float _2415 = (cbLight._m0[_2403].x * _2410) + 1.0;
    float _2416 = (cbLight._m0[_2403].y * _2410) + 1.0;
    float _2417 = (cbLight._m0[_2403].z * _2410) + 1.0;
    float _2418 = (cbLight._m0[_2403].w * _2410) + 1.0;
    uint _2419 = _2402 + 5u;
    float _2425 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
    uint _2429 = _2402 + 4u;
    float _2438 = isnan(1.0) ? _2415 : (isnan(_2415) ? 1.0 : min(_2415, 1.0));
    uint _2442 = _2402 | 1u;
    float _2453 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_891, _892, _893));
    float _2456 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_891, _892, _893));
    float _4694 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _4705 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2461 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * 0.3183098733425140380859375;
    float _2463 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * 0.3183098733425140380859375;
    float _2470 = ((cbLight._m0[_2419].x * _2425) * _2463) + (((cbLight._m0[_2429].x * _2391) * _2438) * _2461);
    float _2471 = ((_2425 * cbLight._m0[_2419].y) * _2463) + (((cbLight._m0[_2429].y * _2393) * _2438) * _2461);
    float _2472 = ((_2425 * cbLight._m0[_2419].z) * _2463) + (((cbLight._m0[_2429].z * _2395) * _2438) * _2461);
    uvec4 _2476 = floatBitsToUint(cbLight._m0[_2402 + 12u]);
    bool _2478 = _2476.x == 0u;
    float _2580;
    float _2582;
    float _2584;
    if (_2478)
    {
        _2580 = _2470;
        _2582 = _2471;
        _2584 = _2472;
    }
    else
    {
        uint _2588 = _2402 + 6u;
        float _2604 = (dot(vec3(cbLight._m0[_2402 + 2u].xyz), vec3(_891, _892, _893)) * 0.5) + 0.5;
        float _2605 = _2604 * _2604;
        float _4716 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2606 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2607 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
        _2580 = (((cbLight._m0[_2588].x * 0.3183098733425140380859375) * _2606) * _2607) + _2470;
        _2582 = (((cbLight._m0[_2588].y * 0.3183098733425140380859375) * _2606) * _2607) + _2471;
        _2584 = (((cbLight._m0[_2588].z * 0.3183098733425140380859375) * _2606) * _2607) + _2472;
    }
    bool _2587 = _2476.y == 0u;
    float _2642;
    float _2644;
    float _2646;
    if (_2587)
    {
        _2642 = _2580;
        _2644 = _2582;
        _2646 = _2584;
    }
    else
    {
        uint _2815 = _2402 + 7u;
        float _2831 = (dot(vec3(cbLight._m0[_2402 + 3u].xyz), vec3(_891, _892, _893)) * 0.5) + 0.5;
        float _2832 = _2831 * _2831;
        float _4732 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2833 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2834 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
        _2642 = (((cbLight._m0[_2815].x * 0.3183098733425140380859375) * _2833) * _2834) + _2580;
        _2644 = (((cbLight._m0[_2815].y * 0.3183098733425140380859375) * _2833) * _2834) + _2582;
        _2646 = (((cbLight._m0[_2815].z * 0.3183098733425140380859375) * _2833) * _2834) + _2584;
    }
    uint _2649 = _2402 + 8u;
    float _2662 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _1021) * 0.949999988079071044921875);
    float _2663 = _2662 * _2662;
    float _2664 = cbLight._m0[_2402].x + _971;
    float _2665 = cbLight._m0[_2402].y + _972;
    float _2666 = cbLight._m0[_2402].z + _973;
    float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
    float _2671 = _2670 * _2664;
    float _2672 = _2670 * _2665;
    float _2673 = _2670 * _2666;
    float _2674 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2402].xyz));
    float _4748 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2677 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _4759 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _2678 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2679 = dot(vec3(_891, _892, _893), vec3(_2671, _2672, _2673));
    float _4770 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2682 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
    float _2683 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2671, _2672, _2673));
    float _4781 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2687 = _2663 * _2663;
    float _2691 = ((_2682 * _2682) * (_2687 + (-1.0))) + 1.0;
    float _2699 = exp2(log2(1.0 - (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) * 5.0);
    float _2700 = 0.959999978542327880859375 - _1088;
    float _2702 = 0.959999978542327880859375 - _1089;
    float _2703 = 0.959999978542327880859375 - _1090;
    float _2710 = 1.0 - _2663;
    float _2721 = (0.5 / (((_2678 * ((_2677 * _2710) + _2663)) + 9.9999999392252902907785028219223e-09) + (((_2678 * _2710) + _2663) * _2677))) * _2677;
    float _4792 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2723 = (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2687 / ((_2691 * _2691) * 3.141590118408203125));
    uint _2737 = _2402 + 9u;
    float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _1021) * 0.949999988079071044921875);
    float _2749 = _2748 * _2748;
    float _2750 = cbLight._m0[_2442].x + _971;
    float _2751 = cbLight._m0[_2442].y + _972;
    float _2752 = cbLight._m0[_2442].z + _973;
    float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
    float _2757 = _2756 * _2750;
    float _2758 = _2756 * _2751;
    float _2759 = _2756 * _2752;
    float _2760 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2442].xyz));
    float _4803 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2763 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
    float _2764 = dot(vec3(_891, _892, _893), vec3(_2757, _2758, _2759));
    float _4814 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2767 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
    float _2768 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2757, _2758, _2759));
    float _4825 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2772 = _2749 * _2749;
    float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
    float _2783 = exp2(log2(1.0 - (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) * 5.0);
    float _2790 = 1.0 - _2749;
    float _2800 = (0.5 / (((_2678 * ((_2763 * _2790) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2678 * _2790) + _2749) * _2763))) * _2763;
    float _4836 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
    float _2802 = (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
    float _2812 = (((((_2783 * _2700) + _1091) * cbLight._m0[_2737].x) * _2802) * _2425) + ((((cbLight._m0[_2649].x * _2391) * ((_2699 * _2700) + _1091)) * _2723) * _2438);
    float _2813 = (((((_2783 * _2702) + _1093) * cbLight._m0[_2737].y) * _2802) * _2425) + ((((cbLight._m0[_2649].y * _2393) * ((_2699 * _2702) + _1093)) * _2723) * _2438);
    float _2814 = (((((_2783 * _2703) + _1094) * cbLight._m0[_2737].z) * _2802) * _2425) + ((((cbLight._m0[_2649].z * _2395) * ((_2699 * _2703) + _1094)) * _2723) * _2438);
    float _2870;
    float _2872;
    float _2874;
    if (_2478)
    {
        _2870 = _2812;
        _2872 = _2813;
        _2874 = _2814;
    }
    else
    {
        uint _2876 = _2402 + 2u;
        uint _2880 = _2402 + 10u;
        float _2894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2876].w)) * _1021) * 0.949999988079071044921875);
        float _2895 = _2894 * _2894;
        float _2896 = cbLight._m0[_2876].x + _971;
        float _2897 = cbLight._m0[_2876].y + _972;
        float _2898 = cbLight._m0[_2876].z + _973;
        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
        float _2903 = _2902 * _2896;
        float _2904 = _2902 * _2897;
        float _2905 = _2902 * _2898;
        float _2906 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2876].xyz));
        float _4847 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
        float _2910 = dot(vec3(_891, _892, _893), vec3(_2903, _2904, _2905));
        float _4858 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
        float _2914 = dot(vec3(cbLight._m0[_2876].xyz), vec3(_2903, _2904, _2905));
        float _4869 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2918 = _2895 * _2895;
        float _2922 = ((_2913 * _2913) * (_2918 + (-1.0))) + 1.0;
        float _2929 = exp2(log2(1.0 - (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) * 5.0);
        float _2936 = 1.0 - _2895;
        float _2946 = (0.5 / (((_2678 * ((_2909 * _2936) + _2895)) + 9.9999999392252902907785028219223e-09) + (((_2678 * _2936) + _2895) * _2909))) * _2909;
        float _4880 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2948 = (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2918 / ((_2922 * _2922) * 3.141590118408203125));
        float _2949 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
        _2870 = (((((_2929 * _2700) + _1091) * cbLight._m0[_2880].x) * _2948) * _2949) + _2812;
        _2872 = (((((_2929 * _2702) + _1093) * cbLight._m0[_2880].y) * _2948) * _2949) + _2813;
        _2874 = (((((_2929 * _2703) + _1094) * cbLight._m0[_2880].z) * _2948) * _2949) + _2814;
    }
    float _2980;
    float _2982;
    float _2984;
    if (_2587)
    {
        _2980 = _2870;
        _2982 = _2872;
        _2984 = _2874;
    }
    else
    {
        uint _2991 = _2402 + 3u;
        uint _2995 = _2402 + 11u;
        float _3009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2991].w)) * _1021) * 0.949999988079071044921875);
        float _3010 = _3009 * _3009;
        float _3011 = cbLight._m0[_2991].x + _971;
        float _3012 = cbLight._m0[_2991].y + _972;
        float _3013 = cbLight._m0[_2991].z + _973;
        float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
        float _3018 = _3017 * _3011;
        float _3019 = _3017 * _3012;
        float _3020 = _3017 * _3013;
        float _3021 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2991].xyz));
        float _4896 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3024 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
        float _3025 = dot(vec3(_891, _892, _893), vec3(_3018, _3019, _3020));
        float _4907 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
        float _3028 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
        float _3029 = dot(vec3(cbLight._m0[_2991].xyz), vec3(_3018, _3019, _3020));
        float _4918 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3033 = _3010 * _3010;
        float _3037 = ((_3028 * _3028) * (_3033 + (-1.0))) + 1.0;
        float _3044 = exp2(log2(1.0 - (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0)))) * 5.0);
        float _3051 = 1.0 - _3010;
        float _3061 = (0.5 / (((_2678 * ((_3024 * _3051) + _3010)) + 9.9999999392252902907785028219223e-09) + (((_2678 * _3051) + _3010) * _3024))) * _3024;
        float _4929 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3063 = (isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_3033 / ((_3037 * _3037) * 3.141590118408203125));
        float _3064 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
        _2980 = (((((_3044 * _2700) + _1091) * cbLight._m0[_2995].x) * _3063) * _3064) + _2870;
        _2982 = (((((_3044 * _2702) + _1093) * cbLight._m0[_2995].y) * _3063) * _3064) + _2872;
        _2984 = (((((_3044 * _2703) + _1094) * cbLight._m0[_2995].z) * _3063) * _3064) + _2874;
    }
    float _3130;
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    float _3140;
    if (_2400.y == 0u)
    {
        uvec4 _3085 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3086 = _3085.x;
        uint _3097 = uint((float(_3085.y) * floor(float(uint(cbSceneParam._m0[85u].y * _980) / _3086))) + floor(float(uint(cbSceneParam._m0[85u].x * _979) / _3086)));
        float _3107 = (log2(_2178 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3108 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
        uint _3111 = uint(isnan(14.0) ? _3108 : (isnan(_3108) ? 14.0 : min(_3108, 14.0)));
        uvec4 _3116 = texelFetch(g_lightClusterGridBuffer, int(((_3111 << 2u) + (_3097 << 6u)) >> 2u));
        uint _3117 = _3116.x;
        uint _3118 = _3085.z;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        if (((((1u << ((_3118 >> 4u) & 15u)) + 4294967295u) & _3117) == 0u) || ((_3118 & 240u) == 0u))
        {
            _3197 = 0.0;
            _3199 = 0.0;
            _3201 = 0.0;
            _3203 = 0.0;
            _3205 = 0.0;
            _3207 = 0.0;
        }
        else
        {
            float _3198;
            float _3200;
            float _3202;
            float _3204;
            float _3206;
            float _3208;
            float _3342 = 0.0;
            float _3343 = 0.0;
            float _3344 = 0.0;
            float _3345 = 0.0;
            float _3346 = 0.0;
            float _3347 = 0.0;
            uint _3348 = 0u;
            uint _3357;
            bool _3358;
            for (;;)
            {
                _3357 = texelFetch(g_lightClassification, int((((_3111 << 5u) + (_3097 << 9u)) + (_3348 << 2u)) >> 2u)).x;
                _3358 = _3357 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3358)
                {
                    frontier_phi_66_pred = _3347;
                    frontier_phi_66_pred_1 = _3346;
                    frontier_phi_66_pred_2 = _3345;
                    frontier_phi_66_pred_3 = _3344;
                    frontier_phi_66_pred_4 = _3343;
                    frontier_phi_66_pred_5 = _3342;
                }
                else
                {
                    float _3466;
                    float _3467;
                    float _3468;
                    float _3469;
                    float _3470;
                    float _3471;
                    uint _3472;
                    _3466 = _3342;
                    _3467 = _3343;
                    _3468 = _3344;
                    _3469 = _3345;
                    _3470 = _3346;
                    _3471 = _3347;
                    _3472 = _3357;
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    for (;;)
                    {
                        uint _3476 = uint(findLSB(_3472)) + (_3348 << 5u);
                        uint _3473 = (_3472 + 4294967295u) & _3472;
                        uint _3478 = _3476 * 48u;
                        vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3478)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 3u)).x));
                        uint _3498 = (_3476 * 48u) + 4u;
                        vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3498)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 3u)).x));
                        uint _3517 = (_3476 * 48u) + 8u;
                        vec3 _3528 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3517)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 2u)).x));
                        float _3532 = _3492.x - _2176;
                        float _3533 = _3492.y - _2177;
                        float _3534 = _3492.z - _2178;
                        float _3535 = dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534));
                        float _3538 = inversesqrt(_3535);
                        float _3539 = _3538 * _3532;
                        float _3540 = _3538 * _3533;
                        float _3541 = _3538 * _3534;
                        float _3542 = dot(vec3(_1002, _1005, _1008), vec3(_3539, _3540, _3541));
                        float _3547 = 1.0 - (_3535 * _3492.w);
                        float _4955 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3548 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3549 = sqrt(_3535) * _3511.w;
                        float _3552 = 1.39999997615814208984375 / (_3549 + 1.39999997615814208984375);
                        float _3553 = _3552 * _3552;
                        float _3556 = ((1.0 - _3553) * _3542) + _3553;
                        float _3559 = _3549 * _3549;
                        float _3563 = ((isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0))) * _3548) / ((_3559 * 0.699999988079071044921875) + 1.0);
                        float _3567 = (-0.0) - _2176;
                        float _3568 = (-0.0) - _2177;
                        float _3569 = (-0.0) - _2178;
                        float _3573 = inversesqrt(dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569)));
                        float _3574 = _3573 * _3567;
                        float _3575 = _3573 * _3568;
                        float _3576 = _3573 * _3569;
                        float _3583 = exp2(log2(1.0 / ((_3559 * 3.5) + 5.0)) * 0.25);
                        float _3584 = 1.0 - _1122;
                        float _3591 = sqrt(1.0 - ((1.0 - (_3584 * _3584)) * (1.0 - (_3583 * _3583))));
                        float _3592 = _3591 * _3591;
                        float _3593 = _3592 * _3592;
                        float _3594 = _3574 + _3539;
                        float _3595 = _3575 + _3540;
                        float _3596 = _3576 + _3541;
                        float _3600 = inversesqrt(dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596)));
                        float _3604 = dot(vec3(_1002, _1005, _1008), vec3(_3574, _3575, _3576));
                        float _4971 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                        float _3607 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                        float _3608 = dot(vec3(_1002, _1005, _1008), vec3(_3600 * _3594, _3600 * _3595, _3600 * _3596));
                        float _4982 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                        float _3611 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                        float _3615 = ((_3611 * _3611) * (_3593 + (-1.0))) + 1.0;
                        float _3616 = _3552 * _3592;
                        float _3617 = _3616 * _3616;
                        float _3620 = ((1.0 - _3617) * _3542) + _3617;
                        float _4993 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3621 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                        float _3622 = 1.0 - _3592;
                        float _3632 = (0.5 / (((_3621 * ((_3607 * _3622) + _3592)) + 9.9999999392252902907785028219223e-09) + (((_3621 * _3622) + _3592) * _3607))) * _3621;
                        float _5004 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                        float _3643 = (((_3593 * 3.1415927410125732421875) * (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0)))) / ((_3615 * _3615) * ((_3559 * 2.1991131305694580078125) + 3.141590118408203125))) * _3548;
                        _3401 = (_3563 * _3511.x) + _3469;
                        _3402 = (_3563 * _3511.y) + _3470;
                        _3403 = (_3563 * _3511.z) + _3471;
                        _3398 = (_3643 * _3528.x) + _3466;
                        _3399 = (_3643 * _3528.y) + _3467;
                        _3400 = (_3643 * _3528.z) + _3468;
                        if (_3473 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3466 = _3398;
                            _3467 = _3399;
                            _3468 = _3400;
                            _3469 = _3401;
                            _3470 = _3402;
                            _3471 = _3403;
                            _3472 = _3473;
                        }
                    }
                    frontier_phi_66_pred = _3403;
                    frontier_phi_66_pred_1 = _3402;
                    frontier_phi_66_pred_2 = _3401;
                    frontier_phi_66_pred_3 = _3400;
                    frontier_phi_66_pred_4 = _3399;
                    frontier_phi_66_pred_5 = _3398;
                }
                _3208 = frontier_phi_66_pred;
                _3206 = frontier_phi_66_pred_1;
                _3204 = frontier_phi_66_pred_2;
                _3202 = frontier_phi_66_pred_3;
                _3200 = frontier_phi_66_pred_4;
                _3198 = frontier_phi_66_pred_5;
                uint _3349 = _3348 + 1u;
                if (_3349 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3342 = _3198;
                    _3343 = _3200;
                    _3344 = _3202;
                    _3345 = _3204;
                    _3346 = _3206;
                    _3347 = _3208;
                    _3348 = _3349;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3197 = _3198;
            _3199 = _3200;
            _3201 = _3202;
            _3203 = _3204;
            _3205 = _3206;
            _3207 = _3208;
        }
        uvec4 _3211 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3212 = _3211.z;
        uint _3214 = (_3212 >> 8u) & 15u;
        float _3310;
        float _3312;
        float _3314;
        float _3316;
        float _3318;
        float _3320;
        if (((4294967295u << _3214) & _3117) == 0u)
        {
            _3310 = _3197;
            _3312 = _3199;
            _3314 = _3201;
            _3316 = _3203;
            _3318 = _3205;
            _3320 = _3207;
        }
        else
        {
            float _3335 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
            float _3336 = _3335 * _2176;
            float _3337 = _3335 * _2177;
            float _3338 = _3335 * _2178;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3214 < ((_3212 >> 12u) & 15u))
            {
                float _3311;
                float _3313;
                float _3315;
                float _3317;
                float _3319;
                float _3321;
                float _3449 = _3197;
                float _3450 = _3199;
                float _3451 = _3201;
                float _3452 = _3203;
                float _3453 = _3205;
                float _3454 = _3207;
                uint _3455 = _3214;
                uint _3464;
                bool _3465;
                for (;;)
                {
                    _3464 = texelFetch(g_lightClassification, int((((_3111 << 5u) + (_3097 << 9u)) + (_3455 << 2u)) >> 2u)).x;
                    _3465 = _3464 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3465)
                    {
                        frontier_phi_72_pred = _3454;
                        frontier_phi_72_pred_1 = _3453;
                        frontier_phi_72_pred_2 = _3452;
                        frontier_phi_72_pred_3 = _3451;
                        frontier_phi_72_pred_4 = _3450;
                        frontier_phi_72_pred_5 = _3449;
                    }
                    else
                    {
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3941;
                        float _3942;
                        float _3943;
                        float _3944;
                        float _3945;
                        float _3946;
                        float _3661 = _3449;
                        float _3662 = _3450;
                        float _3663 = _3451;
                        float _3664 = _3452;
                        float _3665 = _3453;
                        float _3666 = _3454;
                        uint _3667 = _3464;
                        uint _3668;
                        vec4 _3693;
                        float _3694;
                        vec4 _3709;
                        vec3 _3721;
                        vec4 _3736;
                        vec4 _3751;
                        float _3797;
                        bool _3798;
                        for (;;)
                        {
                            uint _3678 = ((_3455 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3667));
                            _3668 = (_3667 + 4294967295u) & _3667;
                            uint _3680 = _3678 * 40u;
                            _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            _3694 = _3693.w;
                            uint _3696 = (_3678 * 40u) + 4u;
                            _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3711 = (_3678 * 40u) + 8u;
                            _3721 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x));
                            uint _3723 = (_3678 * 40u) + 16u;
                            _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            uint _3738 = (_3678 * 40u) + 20u;
                            _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            uint _3753 = (_3678 * 40u) + 24u;
                            vec4 _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            uint _3772 = (_3678 * 40u) + 28u;
                            vec4 _3785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 3u)).x));
                            _3797 = fma(_2178, _3785.z, fma(_2177, _3785.y, _3785.x * _2176)) + _3785.w;
                            _3798 = !((fma(_2178, _3766.z, fma(_2177, _3766.y, _3766.x * _2176)) + _3766.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3798)
                            {
                                float _3825 = _3693.x - _2176;
                                float _3826 = _3693.y - _2177;
                                float _3827 = _3693.z - _2178;
                                float _3828 = dot(vec3(_3825, _3826, _3827), vec3(_3825, _3826, _3827));
                                float _3831 = inversesqrt(_3828);
                                float _3832 = _3831 * _3825;
                                float _3833 = _3831 * _3826;
                                float _3834 = _3831 * _3827;
                                float _3838 = 1.0 - (_3828 / (_3694 * _3694));
                                float _5015 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3839 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3843 = sqrt(_3828) * _3709.w;
                                float _3845 = 1.39999997615814208984375 / (_3843 + 1.39999997615814208984375);
                                float _3846 = _3845 * _3845;
                                float _3849 = ((1.0 - _3846) * dot(vec3(_3832, _3833, _3834), vec3(_1002, _1005, _1008))) + _3846;
                                float _3852 = _3843 * _3843;
                                float _3856 = (fma(_2178, _3736.z, fma(_2177, _3736.y, _3736.x * _2176)) + _3736.w) / _3797;
                                float _3857 = (fma(_2178, _3751.z, fma(_2177, _3751.y, _3751.x * _2176)) + _3751.w) / _3797;
                                float _3861 = 1.0 - dot(vec2(_3856, _3857), vec2(_3856, _3857));
                                float _5031 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3862 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3863 = _3862 * (((isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0))) * _3839) / ((_3852 * 0.699999988079071044921875) + 1.0));
                                float _3875 = exp2(log2(1.0 / ((_3852 * 3.5) + 5.0)) * 0.25);
                                float _3876 = 1.0 - _1122;
                                float _3883 = sqrt(1.0 - ((1.0 - (_3876 * _3876)) * (1.0 - (_3875 * _3875))));
                                float _3884 = _3883 * _3883;
                                float _3885 = _3884 * _3884;
                                float _3886 = _3832 - _3336;
                                float _3887 = _3833 - _3337;
                                float _3888 = _3834 - _3338;
                                float _3892 = inversesqrt(dot(vec3(_3886, _3887, _3888), vec3(_3886, _3887, _3888)));
                                float _3896 = dot(vec3(_1002, _1005, _1008), vec3((-0.0) - _3336, (-0.0) - _3337, (-0.0) - _3338));
                                float _5042 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                                float _3899 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                                float _3900 = dot(vec3(_1002, _1005, _1008), vec3(_3892 * _3886, _3892 * _3887, _3892 * _3888));
                                float _5053 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3903 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
                                float _3907 = ((_3903 * _3903) * (_3885 + (-1.0))) + 1.0;
                                float _3908 = _3845 * _3884;
                                float _3909 = _3908 * _3908;
                                float _3915 = ((1.0 - _3909) * dot(vec3(_1002, _1005, _1008), vec3(_3832, _3833, _3834))) + _3909;
                                float _5064 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3916 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
                                float _3917 = 1.0 - _3884;
                                float _3927 = (0.5 / (((_3916 * ((_3899 * _3917) + _3884)) + 9.9999999392252902907785028219223e-09) + (((_3916 * _3917) + _3884) * _3899))) * _3916;
                                float _5075 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3937 = (_3862 * _3839) * (((_3885 * 3.1415927410125732421875) * (isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0)))) / ((_3907 * _3907) * ((_3852 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3863 * _3709.y;
                                frontier_phi_78_pred_1 = _3863 * _3709.x;
                                frontier_phi_78_pred_2 = _3937 * _3721.z;
                                frontier_phi_78_pred_3 = _3937 * _3721.y;
                                frontier_phi_78_pred_4 = _3937 * _3721.x;
                                frontier_phi_78_pred_5 = _3863 * _3709.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3945 = frontier_phi_78_pred;
                            _3944 = frontier_phi_78_pred_1;
                            _3943 = frontier_phi_78_pred_2;
                            _3942 = frontier_phi_78_pred_3;
                            _3941 = frontier_phi_78_pred_4;
                            _3946 = frontier_phi_78_pred_5;
                            _3651 = _3944 + _3664;
                            _3652 = _3945 + _3665;
                            _3653 = _3946 + _3666;
                            _3648 = _3941 + _3661;
                            _3649 = _3942 + _3662;
                            _3650 = _3943 + _3663;
                            if (_3668 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3661 = _3648;
                                _3662 = _3649;
                                _3663 = _3650;
                                _3664 = _3651;
                                _3665 = _3652;
                                _3666 = _3653;
                                _3667 = _3668;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3653;
                        frontier_phi_72_pred_1 = _3652;
                        frontier_phi_72_pred_2 = _3651;
                        frontier_phi_72_pred_3 = _3650;
                        frontier_phi_72_pred_4 = _3649;
                        frontier_phi_72_pred_5 = _3648;
                    }
                    _3321 = frontier_phi_72_pred;
                    _3319 = frontier_phi_72_pred_1;
                    _3317 = frontier_phi_72_pred_2;
                    _3315 = frontier_phi_72_pred_3;
                    _3313 = frontier_phi_72_pred_4;
                    _3311 = frontier_phi_72_pred_5;
                    uint _3456 = _3455 + 1u;
                    if (_3456 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3449 = _3311;
                        _3450 = _3313;
                        _3451 = _3315;
                        _3452 = _3317;
                        _3453 = _3319;
                        _3454 = _3321;
                        _3455 = _3456;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3321;
                frontier_phi_60_61_ladder_1 = _3319;
                frontier_phi_60_61_ladder_2 = _3315;
                frontier_phi_60_61_ladder_3 = _3313;
                frontier_phi_60_61_ladder_4 = _3311;
                frontier_phi_60_61_ladder_5 = _3317;
            }
            else
            {
                frontier_phi_60_61_ladder = _3207;
                frontier_phi_60_61_ladder_1 = _3205;
                frontier_phi_60_61_ladder_2 = _3201;
                frontier_phi_60_61_ladder_3 = _3199;
                frontier_phi_60_61_ladder_4 = _3197;
                frontier_phi_60_61_ladder_5 = _3203;
            }
            _3310 = frontier_phi_60_61_ladder_4;
            _3312 = frontier_phi_60_61_ladder_3;
            _3314 = frontier_phi_60_61_ladder_2;
            _3316 = frontier_phi_60_61_ladder_5;
            _3318 = frontier_phi_60_61_ladder_1;
            _3320 = frontier_phi_60_61_ladder;
        }
        float _3325 = isnan(1.0) ? _1106 : (isnan(_1106) ? 1.0 : min(_1106, 1.0));
        _3130 = (_3325 * _3316) + _2642;
        _3132 = (_3325 * _3318) + _2644;
        _3134 = (_3325 * _3320) + _2646;
        _3136 = ((_3310 * _1091) * _3325) + _2980;
        _3138 = ((_3312 * _1093) * _3325) + _2982;
        _3140 = ((_3314 * _1094) * _3325) + _2984;
    }
    else
    {
        _3130 = _2642;
        _3132 = _2644;
        _3134 = _2646;
        _3136 = _2980;
        _3138 = _2982;
        _3140 = _2984;
    }
    float _5091 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _5102 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _5113 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    uint _3160 = _1034 + 6u;
    float _3168 = _979 / cbSceneParam._m0[86u].x;
    float _3169 = _980 / cbSceneParam._m0[86u].y;
    vec4 _3183 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3168, _3169, (log2((isnan(cbSceneParam._m0[77u].w) ? _914 : (isnan(_914) ? cbSceneParam._m0[77u].w : min(_914, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3185 = _3183.x;
    float _3186 = _3183.y;
    float _3187 = _3183.z;
    float _3188 = _3183.w;
    float _3260;
    float _3262;
    float _3264;
    float _3266;
    if (_914 > cbSceneParam._m0[78u].w)
    {
        float _3222 = isnan(_914) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _914 : min(cbSceneParam._m0[80u].w, _914));
        float _3223 = _3222 / _914;
        float _3234 = _3223 * _964;
        float _3235 = _965 * _3223;
        float _3236 = (-0.0) - _3235;
        float _3238 = _3223 * _966;
        float _3240 = (cbSceneParam._m0[77u].w * _3236) / _3222;
        float _3241 = _3240 + cbSceneParam._m0[79u].w;
        float _3242 = cbSceneParam._m0[79u].w - _3235;
        float _3248 = sqrt(((_3234 * _3234) + (_3235 * _3235)) + (_3238 * _3238));
        float _3251 = (1.0 - (cbSceneParam._m0[77u].w / _3222)) * _3248;
        float _3256 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3258 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3411;
        if (abs((_3236 - _3240) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3411 = ((((_3241 > 0.0) ? exp2(_3256 * _3241) : (2.0 - exp2(_3258 * _3241))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3251;
        }
        else
        {
            float _3371 = 1.0 / cbSceneParam._m0[80u].x;
            float _3372 = isnan(_3242) ? _3241 : (isnan(_3241) ? _3242 : max(_3241, _3242));
            float _3373 = isnan(_3242) ? _3241 : (isnan(_3241) ? _3242 : min(_3241, _3242));
            float _3382 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : min(_3372, 0.0));
            float _3383 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : min(_3373, 0.0));
            _3411 = ((abs(_3248 / _3236) * cbSceneParam._m0[80u].y) * ((((_3382 - _3383) * 2.0) - ((exp2(_3256 * (isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0)))) - exp2(_3256 * (isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))))) * _3371)) - ((exp2(_3258 * _3382) - exp2(_3258 * _3383)) * _3371))) + (_3251 * cbSceneParam._m0[80u].z);
        }
        vec4 _3413 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3168, _3169, 1.0), 0.0);
        float _3422 = exp2((_3411 * (-1.44269502162933349609375)) * (1.0 - _3413.w));
        float _3423 = log2(_3422);
        float _3439 = log2(_3188);
        _3260 = (exp2(_3439 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3423 * cbSceneParam._m0[78u].x)) * _3413.x) / cbSceneParam._m0[78u].x)) + _3185;
        _3262 = (exp2(_3439 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3423 * cbSceneParam._m0[78u].y)) * _3413.y) / cbSceneParam._m0[78u].y)) + _3186;
        _3264 = (exp2(_3439 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3423 * cbSceneParam._m0[78u].z)) * _3413.z) / cbSceneParam._m0[78u].z)) + _3187;
        _3266 = _3422 * _3188;
    }
    else
    {
        _3260 = _3185;
        _3262 = _3186;
        _3264 = _3187;
        _3266 = _3188;
    }
    float _3278 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3279 = _3278 == 3.0;
    float _3280 = log2(_3266);
    float _3287 = exp2(_3280 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0))) * (_3130 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1106))) + ((_3136 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1910)) * cbPerFrame._m0[3u].x));
    float _3288 = exp2(_3280 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0))) * (_3132 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1106))) + ((_3138 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1910)) * cbPerFrame._m0[3u].x));
    float _3289 = exp2(_3280 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0))) * (_3134 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1106))) + ((_3140 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1910)) * cbPerFrame._m0[3u].x));
    float _3298 = (_3278 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3298 * (_3279 ? _3287 : (_3287 + (cbSceneParam._m0[72u].w * _3260)));
    SV_Target.y = _3298 * (_3279 ? _3288 : (_3288 + (cbSceneParam._m0[72u].w * _3262)));
    SV_Target.z = _3298 * (_3279 ? _3289 : (_3289 + (cbSceneParam._m0[72u].w * _3264)));
    SV_Target.w = cbInstanceData._m0[_3160].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3160].w;
}


