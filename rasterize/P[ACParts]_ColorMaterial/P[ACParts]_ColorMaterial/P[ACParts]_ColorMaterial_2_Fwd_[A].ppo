#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_15;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1517;
float _3894;
float _3895;
float _3896;
float _3897;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = cbMtdParam._m0[25u].x + TEXCOORD.y;
    vec4 _281 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (_267 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _288 = log2(0.0);
    float _290 = exp2(_288 * cbMtdParam._m0[24u].y);
    float _294 = _290 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _290);
    float _295 = _290 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _290);
    float _296 = _290 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _290);
    float _297 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _298 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _299 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _300 = isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0));
    float _302 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    float _303 = isnan(1.0) ? _299 : (isnan(_299) ? 1.0 : min(_299, 1.0));
    vec4 _316 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _267) + cbTextureTilingScale._m0[0u].w));
    float _320 = _316.z;
    float _321 = _316.w;
    float _322 = 1.0 - _321;
    float _331 = exp2(log2((1.0 - (_322 * _320)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _332 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _333 = isnan(1.0) ? _332 : (isnan(_332) ? 1.0 : min(_332, 1.0));
    float _342 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_322 * _322) * _320))) * cbMtdParam._m0[26u].y);
    float _343 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    vec4 _356 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _359 = _356.y;
    float _362 = (_359 * ((isnan(1.0) ? _343 : (isnan(_343) ? 1.0 : min(_343, 1.0))) - _321)) + _321;
    float _365 = (_356.x + (-0.02500000037252902984619140625)) * 8.0;
    float _369 = roundEven(5.0 - _365);
    float _370 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _371 = isnan(4.0) ? _370 : (isnan(_370) ? 4.0 : min(_370, 4.0));
    float _384 = floor(_371);
    vec4 _387 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _267) + cbTextureTilingScale._m0[10u].w, _384));
    float _208[6];
    float _209[6];
    float _210[6];
    _208[0u] = cbMtdParam._m0[12u].x;
    _209[0u] = cbMtdParam._m0[12u].y;
    _210[0u] = cbMtdParam._m0[12u].z;
    _208[1u] = cbMtdParam._m0[13u].x;
    _209[1u] = cbMtdParam._m0[13u].y;
    _210[1u] = cbMtdParam._m0[13u].z;
    _208[2u] = cbMtdParam._m0[14u].x;
    _209[2u] = cbMtdParam._m0[14u].y;
    _210[2u] = cbMtdParam._m0[14u].z;
    _208[3u] = cbMtdParam._m0[15u].x;
    _209[3u] = cbMtdParam._m0[15u].y;
    _210[3u] = cbMtdParam._m0[15u].z;
    _208[4u] = cbMtdParam._m0[16u].x;
    _209[4u] = cbMtdParam._m0[16u].y;
    _210[4u] = cbMtdParam._m0[16u].z;
    _208[5u] = cbMtdParam._m0[11u].x;
    _209[5u] = cbMtdParam._m0[11u].y;
    _210[5u] = cbMtdParam._m0[11u].z;
    float _453 = roundEven(_365);
    float _454 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    uint _456 = uint(int(isnan(5.0) ? _454 : (isnan(_454) ? 5.0 : min(_454, 5.0))));
    float _205[6];
    float _206[6];
    float _207[6];
    _205[0u] = 1.0;
    _206[0u] = 1.0;
    _207[0u] = 1.0;
    _205[1u] = cbMtdParam._m0[22u].x;
    _206[1u] = cbMtdParam._m0[22u].y;
    _207[1u] = cbMtdParam._m0[22u].z;
    _205[2u] = cbMtdParam._m0[21u].x;
    _206[2u] = cbMtdParam._m0[21u].y;
    _207[2u] = cbMtdParam._m0[21u].z;
    _205[3u] = cbMtdParam._m0[19u].x;
    _206[3u] = cbMtdParam._m0[19u].y;
    _207[3u] = cbMtdParam._m0[19u].z;
    _205[4u] = cbMtdParam._m0[18u].x;
    _206[4u] = cbMtdParam._m0[18u].y;
    _207[4u] = cbMtdParam._m0[18u].z;
    _205[5u] = cbMtdParam._m0[17u].x;
    _206[5u] = cbMtdParam._m0[17u].y;
    _207[5u] = cbMtdParam._m0[17u].z;
    float _543 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[29u].y * TEXCOORD.x) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[29u].z * TEXCOORD.y) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _544 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    uint _546 = uint(int(isnan(5.0) ? _544 : (isnan(_544) ? 5.0 : min(_544, 5.0))));
    float _204[6];
    _204[0u] = 1.0;
    _204[1u] = cbMtdParam._m0[22u].w;
    _204[2u] = cbMtdParam._m0[21u].w;
    _204[3u] = cbMtdParam._m0[19u].w;
    _204[4u] = cbMtdParam._m0[18u].w;
    _204[5u] = cbMtdParam._m0[17u].w;
    float _583 = ((((_208[_456] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[24u].z * (_205[_546] - _208[_456])) * _204[_456])) * _359) + cbMtdParam._m0[10u].x) * _387.x;
    float _584 = ((((_209[_456] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[24u].z * (_206[_546] - _209[_456])) * _204[_456])) * _359) + cbMtdParam._m0[10u].y) * _387.y;
    float _585 = ((((_210[_456] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[24u].z * (_207[_546] - _210[_456])) * _204[_456])) * _359) + cbMtdParam._m0[10u].z) * _387.z;
    vec4 _597 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _267) + cbTextureTilingScale._m0[1u].w));
    float _617 = (((cbMtdParam._m0[9u].x * _597.x) - _583) * _362) + _583;
    float _618 = (((cbMtdParam._m0[9u].y * _597.y) - _584) * _362) + _584;
    float _619 = (((cbMtdParam._m0[9u].z * _597.z) - _585) * _362) + _585;
    vec4 _631 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    float _651 = (((cbMtdParam._m0[20u].x * _631.x) - _617) * _333) + _617;
    float _652 = (((cbMtdParam._m0[20u].y * _631.y) - _618) * _333) + _618;
    float _653 = (((cbMtdParam._m0[20u].z * _631.z) - _619) * _333) + _619;
    vec4 _665 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    float _689 = (_281.x * 4.5) * ((((cbMtdParam._m0[23u].x * _665.x) - _651) * _300) + _651);
    float _691 = (_281.y * 4.5) * ((((cbMtdParam._m0[23u].y * _665.y) - _652) * _302) + _652);
    float _693 = (_281.z * 4.5) * ((((cbMtdParam._m0[23u].z * _665.z) - _653) * _303) + _653);
    float _199[5];
    float _200[5];
    _199[0u] = cbMtdParam._m0[26u].w;
    _200[0u] = cbMtdParam._m0[27u].x;
    _199[1u] = cbMtdParam._m0[27u].y;
    _200[1u] = cbMtdParam._m0[27u].z;
    _199[2u] = cbMtdParam._m0[27u].w;
    _200[2u] = cbMtdParam._m0[28u].x;
    _199[3u] = cbMtdParam._m0[28u].y;
    _200[3u] = cbMtdParam._m0[28u].z;
    _199[4u] = cbMtdParam._m0[28u].w;
    _200[4u] = cbMtdParam._m0[29u].x;
    float _721 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    uint _723 = uint(int(isnan(4.0) ? _721 : (isnan(_721) ? 4.0 : min(_721, 4.0))));
    float _735 = ((cbMtdParam._m0[30u].x - _200[_723]) * _362) + _200[_723];
    float _740 = ((cbMtdParam._m0[30u].z - _735) * _333) + _735;
    float _748 = ((cbMtdParam._m0[31u].x - _740) * _300) + _740;
    vec4 _763 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w, _384));
    float _765 = _763.x;
    float _766 = _763.y;
    float _768 = _763.z + _199[_723];
    vec4 _780 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _267) + cbTextureTilingScale._m0[6u].w));
    float _788 = (((cbMtdParam._m0[29u].w - _768) + _780.z) * _362) + _768;
    vec4 _801 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _267) + cbTextureTilingScale._m0[8u].w));
    float _809 = (((cbMtdParam._m0[30u].y - _788) + _801.z) * _333) + _788;
    float _815 = ((((_320 * 2.0) * _809) - _809) * cbMtdParam._m0[25u].y) + _809;
    vec4 _827 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w));
    float _835 = (((_827.z + cbMtdParam._m0[30u].w) - _815) * _303) + _815;
    float _848 = ((_780.x - _765) * _362) + _765;
    float _849 = ((_780.y - _766) * _362) + _766;
    float _854 = ((_801.x - _848) * _333) + _848;
    float _855 = ((_801.y - _849) * _333) + _849;
    float _864 = ((((_827.x - _854) * _300) + _854) * 2.0) + (-1.0);
    float _865 = ((((_827.y - _855) * _302) + _855) * 2.0) + (-1.0);
    float _866 = dot(vec2(_864, _865), vec2(_864, _865));
    float _3996 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _871 = sqrt(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))));
    float _874 = _864 + (cbMtdParam._m0[25u].z * ((_316.x * 2.0) + (-1.0)));
    float _875 = _865 + (cbMtdParam._m0[25u].z * ((_316.y * 2.0) + (-1.0)));
    float _878 = fma(_871, _245 * NORMAL.x, fma(_875, _252 * TANGENT.x, (_238 * _230) * _874));
    float _881 = fma(_871, _245 * NORMAL.y, fma(_875, _252 * TANGENT.y, (_238 * _231) * _874));
    float _884 = fma(_871, _245 * NORMAL.z, fma(_875, _252 * TANGENT.z, (_238 * _232) * _874));
    float _888 = inversesqrt(dot(vec3(_878, _881, _884), vec3(_878, _881, _884)));
    float _889 = _888 * _878;
    float _890 = _888 * _881;
    float _891 = _888 * _884;
    float _4007 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _892 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4029 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4040 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4051 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _896 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _912 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _962 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _952);
    float _963 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _952);
    float _964 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _952);
    float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
    float _969 = _962 * _968;
    float _970 = _963 * _968;
    float _971 = _964 * _968;
    vec4 _976 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _978 = _976.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1197 = sqrt(((_962 * _962) + (_963 * _963)) + (_964 * _964));
        float _1203 = (cbMatDynParam._m0[5u].x * _1197) + cbMatDynParam._m0[5u].y;
        float _4062 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1208 = (cbMatDynParam._m0[5u].z * _1197) + cbMatDynParam._m0[5u].w;
        float _4073 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) - _1204)) + _1204) < ((_978 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _989 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _990 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _992 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _994 = _992.w;
    float _1012 = fma(_891, cbSceneParam._m0[5u].z, fma(_890, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _889));
    float _1015 = fma(_891, cbSceneParam._m0[6u].z, fma(_890, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _889));
    float _1018 = fma(_891, cbSceneParam._m0[7u].z, fma(_890, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _889));
    vec4 _1020 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1031 = (((_1020.y - _892) + (_1020.w * _892)) * cbMtdParam._m0[3u].x) + _892;
    uint _1044 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1045 = _1044 + 9u;
    uint _1046 = _1045 + uint(cbMatDynParam._m0[0u].w);
    float _1052 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * cbInstanceData._m0[_1046].x;
    float _1053 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * cbInstanceData._m0[_1046].y;
    float _1054 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * cbInstanceData._m0[_1046].z;
    float _4084 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1057 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    vec4 _1058 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1063 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1074 = (((_1063.x - _896) + (_1063.w * _896)) * cbMtdParam._m0[3u].x) + _896;
    float _1087 = (cbMtdParam._m0[3u].x * (((_1055 * _994) - _1055) + _1058.x)) + _1055;
    float _1088 = (cbMtdParam._m0[3u].x * (((_1056 * _994) - _1056) + _1058.y)) + _1056;
    float _1089 = (cbMtdParam._m0[3u].x * (((_1057 * _994) - _1057) + _1058.z)) + _1057;
    float _1090 = 1.0 - _1074;
    float _1091 = _1090 * _1087;
    float _1092 = _1090 * _1088;
    float _1093 = _1090 * _1089;
    float _1098 = (_1087 + (-0.039999999105930328369140625)) * _1074;
    float _1099 = (_1088 + (-0.039999999105930328369140625)) * _1074;
    float _1100 = (_1089 + (-0.039999999105930328369140625)) * _1074;
    float _1101 = _1098 + 0.039999999105930328369140625;
    float _1103 = _1099 + 0.039999999105930328369140625;
    float _1104 = _1100 + 0.039999999105930328369140625;
    vec4 _1113 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _989, cbSceneParam._m0[86u].y * _990));
    float _1116 = _1113.x * TEXCOORD_5.w;
    float _1117 = dot(vec3(_889, _890, _891), vec3(_969, _970, _971));
    float _1120 = _1117 * 2.0;
    float _1124 = (_1120 * _889) - _969;
    float _1125 = (_1120 * _890) - _970;
    float _1126 = (_1120 * _891) - _971;
    float _1130 = abs(dot(vec3(_969, _970, _971), vec3(_889, _890, _891)));
    float _4117 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1132 = sqrt(_1031);
    float _1143 = exp2((_1132 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1132 * 3.0));
    float _1149 = (1.0 - _1143) * ((_1132 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1150 = _1143 * _1132;
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1516;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1241 = fma(_1186, cbModelParam._m0[26u].z, fma(_1182, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1178));
        float _1245 = fma(_1186, cbModelParam._m0[27u].z, fma(_1182, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1178));
        float _1249 = fma(_1186, cbModelParam._m0[28u].z, fma(_1182, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1178));
        float _1274 = _1178 + _889;
        float _1275 = _1182 + _890;
        float _1276 = _1186 + _891;
        float _1286 = fma(_1276, cbModelParam._m0[26u].z, fma(_1275, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1274)) - _1241;
        float _1287 = fma(_1276, cbModelParam._m0[27u].z, fma(_1275, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1274)) - _1245;
        float _1288 = fma(_1276, cbModelParam._m0[28u].z, fma(_1275, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1274)) - _1249;
        float _1292 = inversesqrt(dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288)));
        float _1305 = ((_1292 * _1286) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1241 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1292 * _1287) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1245 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1292 * _1288) / cbModelParam._m0[34u].z) + ((((((_1249 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        float _1344 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1310.x + (-0.5));
        float _1346 = _1344 * (_1310.y + (-0.5));
        float _1347 = _1344 * (_1310.z + (-0.5));
        float _1354 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1317.x + (-0.5));
        float _1356 = _1354 * (_1317.y + (-0.5));
        float _1357 = _1354 * (_1317.z + (-0.5));
        float _1364 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1324.x + (-0.5));
        float _1366 = _1364 * (_1324.y + (-0.5));
        float _1367 = _1364 * (_1324.z + (-0.5));
        float _1374 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1331.x + (-0.5));
        float _1376 = _1374 * (_1331.y + (-0.5));
        float _1377 = _1374 * (_1331.z + (-0.5));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = _1345 * 0.5;
        float _1382 = _1355 * 0.5;
        float _1383 = _1365 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1398 = (dot(vec3(_889, _890, _891), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1408 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4165 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1410 + 1.0))) + _1415) * _1378;
        float _1425 = _1346 * 0.5;
        float _1426 = _1356 * 0.5;
        float _1427 = _1366 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_889, _890, _891), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4198 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1452 + 1.0))) + _1457) * _1379;
        float _1467 = _1347 * 0.5;
        float _1468 = _1357 * 0.5;
        float _1469 = _1367 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_889, _890, _891), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4231 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1494 + 1.0))) + _1499) * _1380;
        _1516 = _1347;
        _1518 = _1346;
        _1519 = _1345;
        _1520 = _1357;
        _1521 = _1356;
        _1522 = _1355;
        _1523 = _1367;
        _1524 = _1366;
        _1525 = _1365;
        _1526 = _1380;
        _1527 = _1379;
        _1528 = _1378;
        _1529 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1530 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1531 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
    }
    else
    {
        _1516 = _1517;
        _1518 = _1517;
        _1519 = _1517;
        _1520 = _1517;
        _1521 = _1517;
        _1522 = _1517;
        _1523 = _1517;
        _1524 = _1517;
        _1525 = _1517;
        _1526 = _1517;
        _1527 = _1517;
        _1528 = _1517;
        _1529 = 0.0;
        _1530 = 0.0;
        _1531 = 0.0;
    }
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1557 = fma(_1186, cbModelParam._m0[30u].z, fma(_1182, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1178));
        float _1561 = fma(_1186, cbModelParam._m0[31u].z, fma(_1182, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1178));
        float _1565 = fma(_1186, cbModelParam._m0[32u].z, fma(_1182, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1178));
        float _1588 = _1178 + _889;
        float _1589 = _1182 + _890;
        float _1590 = _1186 + _891;
        float _1600 = fma(_1590, cbModelParam._m0[30u].z, fma(_1589, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1588)) - _1557;
        float _1601 = fma(_1590, cbModelParam._m0[31u].z, fma(_1589, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1588)) - _1561;
        float _1602 = fma(_1590, cbModelParam._m0[32u].z, fma(_1589, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1588)) - _1565;
        float _1606 = inversesqrt(dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602)));
        float _1619 = ((_1606 * _1600) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1557 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1620 = ((_1606 * _1601) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1561 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1621 = ((_1606 * _1602) / cbModelParam._m0[35u].z) + ((((((_1565 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        float _1656 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1623.x + (-0.5));
        float _1658 = _1656 * (_1623.y + (-0.5));
        float _1659 = _1656 * (_1623.z + (-0.5));
        float _1666 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1630.x + (-0.5));
        float _1668 = _1666 * (_1630.y + (-0.5));
        float _1669 = _1666 * (_1630.z + (-0.5));
        float _1676 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1637.x + (-0.5));
        float _1678 = _1676 * (_1637.y + (-0.5));
        float _1679 = _1676 * (_1637.z + (-0.5));
        float _1686 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1644.x + (-0.5));
        float _1688 = _1686 * (_1644.y + (-0.5));
        float _1689 = _1686 * (_1644.z + (-0.5));
        float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1691 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1692 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1693 = _1657 * 0.5;
        float _1694 = _1667 * 0.5;
        float _1695 = _1677 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_889, _890, _891), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1690 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4294 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1720 + 1.0))) + _1725) * _1690;
        float _1735 = _1658 * 0.5;
        float _1736 = _1668 * 0.5;
        float _1737 = _1678 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_889, _890, _891), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1691 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4327 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1762 + 1.0))) + _1767) * _1691;
        float _1777 = _1659 * 0.5;
        float _1778 = _1669 * 0.5;
        float _1779 = _1679 * 0.5;
        float _1780 = dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779));
        float _1785 = (_1780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1780);
        float _1793 = (dot(vec3(_889, _890, _891), vec3(_1785 * _1777, _1785 * _1778, _1785 * _1779)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779)) / (_1692 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1804 = _1803 * 2.0;
        float _1808 = (1.0 - _1803) / (_1803 + 1.0);
        float _4360 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1818 = ((((1.0 - _1809) * (_1804 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1804 + 1.0))) + _1809) * _1692;
        _1826 = _1659;
        _1827 = _1658;
        _1828 = _1657;
        _1829 = _1669;
        _1830 = _1668;
        _1831 = _1667;
        _1832 = _1679;
        _1833 = _1678;
        _1834 = _1677;
        _1835 = _1692;
        _1836 = _1691;
        _1837 = _1690;
        _1838 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
        _1839 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
        _1840 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
    }
    else
    {
        _1826 = _1517;
        _1827 = _1517;
        _1828 = _1517;
        _1829 = _1517;
        _1830 = _1517;
        _1831 = _1517;
        _1832 = _1517;
        _1833 = _1517;
        _1834 = _1517;
        _1835 = _1517;
        _1836 = _1517;
        _1837 = _1517;
        _1838 = 0.0;
        _1839 = 0.0;
        _1840 = 0.0;
    }
    float _1850 = (cbModelParam._m0[1u].x * (_1838 - _1529)) + _1529;
    float _1851 = (cbModelParam._m0[1u].x * (_1839 - _1530)) + _1530;
    float _1852 = (cbModelParam._m0[1u].x * (_1840 - _1531)) + _1531;
    float _1873 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1850));
    float _1894 = _1124 * 0.5;
    float _1895 = _1125 * 0.5;
    float _1896 = _1126 * 0.5;
    float _1897 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1828, _1831, _1834, _1837));
    float _1900 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1827, _1830, _1833, _1836));
    float _1903 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1826, _1829, _1832, _1835));
    float _1937;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1910 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1516, _1520, _1523, _1526));
        float _1914 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1518, _1521, _1524, _1527));
        float _1918 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1519, _1522, _1525, _1528));
        float _1925 = dot(vec4(cbModelParam._m0[39u]), vec4(_1894, _1895, _1896, 1.0));
        _1937 = dot(vec3(isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1925) ? 0.0 : (isnan(0.0) ? _1925 : max(0.0, _1925))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1937 = 1.0;
    }
    float _1948;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1939 = dot(vec4(cbModelParam._m0[40u]), vec4(_1894, _1895, _1896, 1.0));
        _1948 = dot(vec3(isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1939) ? 0.0 : (isnan(0.0) ? _1939 : max(0.0, _1939))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1948 = 1.0;
    }
    float _1952 = (_1948 * cbModelParam._m0[1u].x) + (_1937 * (1.0 - cbModelParam._m0[1u].x));
    float _1962 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1031);
    float _1963 = isnan(_1962) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1962 : min(cbModelParam._m0[25u].z, _1962));
    float _2043;
    float _2045;
    float _2047;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2010 = fma(_1186, cbModelParam._m0[13u].z, fma(_1182, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1178)) + cbModelParam._m0[13u].w;
        float _2014 = fma(_1186, cbModelParam._m0[14u].z, fma(_1182, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1178)) + cbModelParam._m0[14u].w;
        float _2018 = fma(_1186, cbModelParam._m0[15u].z, fma(_1182, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1178)) + cbModelParam._m0[15u].w;
        float _2021 = fma(_1126, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124));
        float _2024 = fma(_1126, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124));
        float _2027 = fma(_1126, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124));
        float _2055;
        if (_2021 > 0.0)
        {
            _2055 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2055 = frontier_phi_17_15_ladder;
        }
        float _2257;
        if (_2024 > 0.0)
        {
            _2257 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2257 = frontier_phi_26_22_ladder;
        }
        float _2511;
        if (_2027 > 0.0)
        {
            _2511 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2511 = frontier_phi_38_33_ladder;
        }
        float _2513 = isnan(_2257) ? _2055 : (isnan(_2055) ? _2257 : min(_2055, _2257));
        float _2514 = isnan(_2511) ? _2513 : (isnan(_2513) ? _2511 : min(_2513, _2511));
        float _2518 = (_2514 * _2021) + _2010;
        float _2519 = (_2514 * _2024) + _2014;
        float _2520 = (_2514 * _2027) + _2018;
        float _2521 = _2514 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2521;
        float _2525 = _2521 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 > _2525) || ((_2519 < _2523) || ((_2518 < _2523) || (_2518 > _2525))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2648 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2520, cbModelParam._m0[9u].z, fma(_2519, cbModelParam._m0[9u].y, _2518 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2520, cbModelParam._m0[10u].z, fma(_2519, cbModelParam._m0[10u].y, _2518 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2520, cbModelParam._m0[11u].z, fma(_2519, cbModelParam._m0[11u].y, _2518 * cbModelParam._m0[11u].x))), _1963);
            frontier_phi_16_38_ladder = _2648.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2648.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2648.x * cbModelParam._m0[1u].y;
        }
        _2043 = frontier_phi_16_38_ladder_2;
        _2045 = frontier_phi_16_38_ladder_1;
        _2047 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2031 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1124, _1125, _1126), _1963);
        _2043 = _2031.x * cbModelParam._m0[1u].y;
        _2045 = _2031.y * cbModelParam._m0[1u].y;
        _2047 = _2031.z * cbModelParam._m0[1u].y;
    }
    float _2051 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1031);
    float _2052 = isnan(_2051) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2051 : min(cbModelParam._m0[25u].w, _2051));
    float _2141;
    float _2143;
    float _2145;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2105 = fma(_1186, cbModelParam._m0[21u].z, fma(_1182, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1178)) + cbModelParam._m0[21u].w;
        float _2109 = fma(_1186, cbModelParam._m0[22u].z, fma(_1182, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1178)) + cbModelParam._m0[22u].w;
        float _2113 = fma(_1186, cbModelParam._m0[23u].z, fma(_1182, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1178)) + cbModelParam._m0[23u].w;
        float _2116 = fma(_1126, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124));
        float _2119 = fma(_1126, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124));
        float _2122 = fma(_1126, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124));
        float _2262;
        if (_2116 > 0.0)
        {
            _2262 = abs((1.0 - _2105) / _2116);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2105 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2262 = frontier_phi_28_24_ladder;
        }
        float _2538;
        if (_2119 > 0.0)
        {
            _2538 = abs((1.0 - _2109) / _2119);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2109 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2538 = frontier_phi_40_35_ladder;
        }
        float _2751;
        if (_2122 > 0.0)
        {
            _2751 = abs((1.0 - _2113) / _2122);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2113 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2751 = frontier_phi_49_46_ladder;
        }
        float _2753 = isnan(_2538) ? _2262 : (isnan(_2262) ? _2538 : min(_2262, _2538));
        float _2754 = isnan(_2751) ? _2753 : (isnan(_2753) ? _2751 : min(_2753, _2751));
        float _2758 = (_2754 * _2116) + _2105;
        float _2759 = (_2754 * _2119) + _2109;
        float _2760 = (_2754 * _2122) + _2113;
        float _2761 = _2754 * 9.9999997473787516355514526367188e-05;
        float _2762 = (-1.0) - _2761;
        float _2764 = _2761 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2760 > _2764) || ((_2760 < _2762) || ((_2759 > _2764) || ((_2759 < _2762) || ((_2758 < _2762) || (_2758 > _2764))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2959 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2760, cbModelParam._m0[17u].z, fma(_2759, cbModelParam._m0[17u].y, _2758 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2760, cbModelParam._m0[18u].z, fma(_2759, cbModelParam._m0[18u].y, _2758 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2760, cbModelParam._m0[19u].z, fma(_2759, cbModelParam._m0[19u].y, _2758 * cbModelParam._m0[19u].x))), _2052);
            frontier_phi_25_49_ladder = _2959.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2959.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2959.x * cbModelParam._m0[1u].z;
        }
        _2141 = frontier_phi_25_49_ladder_2;
        _2143 = frontier_phi_25_49_ladder_1;
        _2145 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2125 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1124, _1125, _1126), _2052);
        _2141 = _2125.x * cbModelParam._m0[1u].z;
        _2143 = _2125.y * cbModelParam._m0[1u].z;
        _2145 = _2125.z * cbModelParam._m0[1u].z;
    }
    float _2158 = (((_1149 * _1101) + _1150) * _1116) * ((cbModelParam._m0[1u].w * (_2141 - _2043)) + _2043);
    float _2160 = (((_1149 * _1103) + _1150) * _1116) * ((cbModelParam._m0[1u].w * (_2143 - _2045)) + _2045);
    float _2162 = (((_1149 * _1104) + _1150) * _1116) * ((cbModelParam._m0[1u].w * (_2145 - _2047)) + _2047);
    float _2165 = fma(_2162, cbSceneParam._m0[89u].z, fma(_2160, cbSceneParam._m0[89u].y, _2158 * cbSceneParam._m0[89u].x));
    float _2168 = fma(_2162, cbSceneParam._m0[90u].z, fma(_2160, cbSceneParam._m0[90u].y, _2158 * cbSceneParam._m0[90u].x));
    float _2171 = fma(_2162, cbSceneParam._m0[91u].z, fma(_2160, cbSceneParam._m0[91u].y, _2158 * cbSceneParam._m0[91u].x));
    uvec4 _2181 = floatBitsToUint(cbInstanceData._m0[_1044 + 5u]);
    uint _2183 = _2181.x * 14u;
    uint _2184 = _2183 + 13u;
    float _2191 = _1116 + (-1.0);
    float _2196 = (cbLight._m0[_2184].x * _2191) + 1.0;
    float _2197 = (cbLight._m0[_2184].y * _2191) + 1.0;
    float _2198 = (cbLight._m0[_2184].z * _2191) + 1.0;
    float _2199 = (cbLight._m0[_2184].w * _2191) + 1.0;
    uint _2200 = _2183 + 5u;
    float _2206 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
    uint _2210 = _2183 + 4u;
    float _2216 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
    uint _2220 = _2183 | 1u;
    float _2231 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_889, _890, _891));
    float _2234 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_889, _890, _891));
    float _4496 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _4507 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2239 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * 0.3183098733425140380859375;
    float _2241 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * 0.3183098733425140380859375;
    float _2248 = ((cbLight._m0[_2200].x * _2206) * _2241) + ((cbLight._m0[_2210].x * _2216) * _2239);
    float _2249 = ((_2206 * cbLight._m0[_2200].y) * _2241) + ((_2216 * cbLight._m0[_2210].y) * _2239);
    float _2250 = ((_2206 * cbLight._m0[_2200].z) * _2241) + ((_2216 * cbLight._m0[_2210].z) * _2239);
    uvec4 _2254 = floatBitsToUint(cbLight._m0[_2183 + 12u]);
    bool _2256 = _2254.x == 0u;
    float _2267;
    float _2269;
    float _2271;
    if (_2256)
    {
        _2267 = _2248;
        _2269 = _2249;
        _2271 = _2250;
    }
    else
    {
        uint _2275 = _2183 + 6u;
        float _2291 = (dot(vec3(cbLight._m0[_2183 + 2u].xyz), vec3(_889, _890, _891)) * 0.5) + 0.5;
        float _2292 = _2291 * _2291;
        float _4518 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2293 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2294 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
        _2267 = (((cbLight._m0[_2275].x * 0.3183098733425140380859375) * _2293) * _2294) + _2248;
        _2269 = (((cbLight._m0[_2275].y * 0.3183098733425140380859375) * _2293) * _2294) + _2249;
        _2271 = (((cbLight._m0[_2275].z * 0.3183098733425140380859375) * _2293) * _2294) + _2250;
    }
    bool _2274 = _2254.y == 0u;
    float _2312;
    float _2314;
    float _2316;
    if (_2274)
    {
        _2312 = _2267;
        _2314 = _2269;
        _2316 = _2271;
    }
    else
    {
        uint _2482 = _2183 + 7u;
        float _2498 = (dot(vec3(cbLight._m0[_2183 + 3u].xyz), vec3(_889, _890, _891)) * 0.5) + 0.5;
        float _2499 = _2498 * _2498;
        float _4534 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2500 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2501 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2312 = (((cbLight._m0[_2482].x * 0.3183098733425140380859375) * _2500) * _2501) + _2267;
        _2314 = (((cbLight._m0[_2482].y * 0.3183098733425140380859375) * _2500) * _2501) + _2269;
        _2316 = (((cbLight._m0[_2482].z * 0.3183098733425140380859375) * _2500) * _2501) + _2271;
    }
    uint _2319 = _2183 + 8u;
    float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _1031) * 0.949999988079071044921875);
    float _2333 = _2332 * _2332;
    float _2334 = cbLight._m0[_2183].x + _969;
    float _2335 = cbLight._m0[_2183].y + _970;
    float _2336 = cbLight._m0[_2183].z + _971;
    float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
    float _2341 = _2340 * _2334;
    float _2342 = _2340 * _2335;
    float _2343 = _2340 * _2336;
    float _2344 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2183].xyz));
    float _4550 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _4561 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2348 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2349 = dot(vec3(_889, _890, _891), vec3(_2341, _2342, _2343));
    float _4572 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _2353 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2341, _2342, _2343));
    float _4583 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2357 = _2333 * _2333;
    float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
    float _2369 = exp2(log2(1.0 - (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) * 5.0);
    float _2370 = 0.959999978542327880859375 - _1098;
    float _2372 = 0.959999978542327880859375 - _1099;
    float _2373 = 0.959999978542327880859375 - _1100;
    float _2380 = 1.0 - _2333;
    float _2391 = (0.5 / (((_2348 * ((_2347 * _2380) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2380) + _2333) * _2347))) * _2347;
    float _4594 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
    uint _2404 = _2183 + 9u;
    float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2220].w)) * _1031) * 0.949999988079071044921875);
    float _2416 = _2415 * _2415;
    float _2417 = cbLight._m0[_2220].x + _969;
    float _2418 = cbLight._m0[_2220].y + _970;
    float _2419 = cbLight._m0[_2220].z + _971;
    float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
    float _2424 = _2423 * _2417;
    float _2425 = _2423 * _2418;
    float _2426 = _2423 * _2419;
    float _2427 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2220].xyz));
    float _4605 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2430 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2431 = dot(vec3(_889, _890, _891), vec3(_2424, _2425, _2426));
    float _4616 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2434 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
    float _2435 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_2424, _2425, _2426));
    float _4627 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2439 = _2416 * _2416;
    float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
    float _2450 = exp2(log2(1.0 - (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) * 5.0);
    float _2457 = 1.0 - _2416;
    float _2467 = (0.5 / (((_2348 * ((_2430 * _2457) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2457) + _2416) * _2430))) * _2430;
    float _4638 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2469 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
    float _2479 = (((((_2450 * _2370) + _1101) * cbLight._m0[_2404].x) * _2469) * _2206) + (((((_2369 * _2370) + _1101) * cbLight._m0[_2319].x) * _2393) * _2216);
    float _2480 = (((((_2450 * _2372) + _1103) * cbLight._m0[_2404].y) * _2469) * _2206) + (((((_2369 * _2372) + _1103) * cbLight._m0[_2319].y) * _2393) * _2216);
    float _2481 = (((((_2450 * _2373) + _1104) * cbLight._m0[_2404].z) * _2469) * _2206) + (((((_2369 * _2373) + _1104) * cbLight._m0[_2319].z) * _2393) * _2216);
    float _2543;
    float _2545;
    float _2547;
    if (_2256)
    {
        _2543 = _2479;
        _2545 = _2480;
        _2547 = _2481;
    }
    else
    {
        uint _2549 = _2183 + 2u;
        uint _2553 = _2183 + 10u;
        float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2549].w)) * _1031) * 0.949999988079071044921875);
        float _2568 = _2567 * _2567;
        float _2569 = cbLight._m0[_2549].x + _969;
        float _2570 = cbLight._m0[_2549].y + _970;
        float _2571 = cbLight._m0[_2549].z + _971;
        float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
        float _2576 = _2575 * _2569;
        float _2577 = _2575 * _2570;
        float _2578 = _2575 * _2571;
        float _2579 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2549].xyz));
        float _4649 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2583 = dot(vec3(_889, _890, _891), vec3(_2576, _2577, _2578));
        float _4660 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2587 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_2576, _2577, _2578));
        float _4671 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2591 = _2568 * _2568;
        float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
        float _2602 = exp2(log2(1.0 - (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) * 5.0);
        float _2609 = 1.0 - _2568;
        float _2619 = (0.5 / (((_2348 * ((_2582 * _2609) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2609) + _2568) * _2582))) * _2582;
        float _4682 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2621 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
        float _2622 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
        _2543 = (((((_2602 * _2370) + _1101) * cbLight._m0[_2553].x) * _2621) * _2622) + _2479;
        _2545 = (((((_2602 * _2372) + _1103) * cbLight._m0[_2553].y) * _2621) * _2622) + _2480;
        _2547 = (((((_2602 * _2373) + _1104) * cbLight._m0[_2553].z) * _2621) * _2622) + _2481;
    }
    float _2657;
    float _2659;
    float _2661;
    if (_2274)
    {
        _2657 = _2543;
        _2659 = _2545;
        _2661 = _2547;
    }
    else
    {
        uint _2668 = _2183 + 3u;
        uint _2672 = _2183 + 11u;
        float _2686 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2668].w)) * _1031) * 0.949999988079071044921875);
        float _2687 = _2686 * _2686;
        float _2688 = cbLight._m0[_2668].x + _969;
        float _2689 = cbLight._m0[_2668].y + _970;
        float _2690 = cbLight._m0[_2668].z + _971;
        float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
        float _2695 = _2694 * _2688;
        float _2696 = _2694 * _2689;
        float _2697 = _2694 * _2690;
        float _2698 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2668].xyz));
        float _4698 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2701 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2702 = dot(vec3(_889, _890, _891), vec3(_2695, _2696, _2697));
        float _4709 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2706 = dot(vec3(cbLight._m0[_2668].xyz), vec3(_2695, _2696, _2697));
        float _4720 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2710 = _2687 * _2687;
        float _2714 = ((_2705 * _2705) * (_2710 + (-1.0))) + 1.0;
        float _2721 = exp2(log2(1.0 - (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) * 5.0);
        float _2728 = 1.0 - _2687;
        float _2738 = (0.5 / (((_2348 * ((_2701 * _2728) + _2687)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2728) + _2687) * _2701))) * _2701;
        float _4731 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2740 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2710 / ((_2714 * _2714) * 3.141590118408203125));
        float _2741 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2657 = (((((_2721 * _2370) + _1101) * cbLight._m0[_2672].x) * _2740) * _2741) + _2543;
        _2659 = (((((_2721 * _2372) + _1103) * cbLight._m0[_2672].y) * _2740) * _2741) + _2545;
        _2661 = (((((_2721 * _2373) + _1104) * cbLight._m0[_2672].z) * _2740) * _2741) + _2547;
    }
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    if (_2181.y == 0u)
    {
        float _2816 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2817 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2816;
        float _2818 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2816;
        float _2819 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2816;
        uvec4 _2831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2832 = _2831.x;
        uint _2843 = uint((float(_2831.y) * floor(float(uint(cbSceneParam._m0[85u].y * _990) / _2832))) + floor(float(uint(cbSceneParam._m0[85u].x * _989) / _2832)));
        float _2853 = (log2(_2819 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2854 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        uint _2857 = uint(isnan(14.0) ? _2854 : (isnan(_2854) ? 14.0 : min(_2854, 14.0)));
        uvec4 _2862 = texelFetch(g_lightClusterGridBuffer, int(((_2857 << 2u) + (_2843 << 6u)) >> 2u));
        uint _2863 = _2862.x;
        uint _2864 = _2831.z;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        if (((((1u << ((_2864 >> 4u) & 15u)) + 4294967295u) & _2863) == 0u) || ((_2864 & 240u) == 0u))
        {
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
        }
        else
        {
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            uint _3123 = 0u;
            uint _3132;
            bool _3133;
            for (;;)
            {
                _3132 = texelFetch(g_lightClassification, int((((_2857 << 5u) + (_2843 << 9u)) + (_3123 << 2u)) >> 2u)).x;
                _3133 = _3132 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3133)
                {
                    frontier_phi_66_pred = _3117;
                    frontier_phi_66_pred_1 = _3122;
                    frontier_phi_66_pred_2 = _3121;
                    frontier_phi_66_pred_3 = _3120;
                    frontier_phi_66_pred_4 = _3119;
                    frontier_phi_66_pred_5 = _3118;
                }
                else
                {
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    uint _3268;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3122;
                    _3268 = _3132;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    for (;;)
                    {
                        uint _3272 = uint(findLSB(_3268)) + (_3123 << 5u);
                        uint _3269 = (_3268 + 4294967295u) & _3268;
                        uint _3274 = _3272 * 48u;
                        vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3294 = (_3272 * 48u) + 4u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 3u)).x));
                        uint _3313 = (_3272 * 48u) + 8u;
                        vec3 _3324 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x));
                        float _3328 = _3288.x - _2817;
                        float _3329 = _3288.y - _2818;
                        float _3330 = _3288.z - _2819;
                        float _3331 = dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330));
                        float _3334 = inversesqrt(_3331);
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3338 = dot(vec3(_1012, _1015, _1018), vec3(_3335, _3336, _3337));
                        float _3343 = 1.0 - (_3331 * _3288.w);
                        float _4757 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3345 = sqrt(_3331) * _3307.w;
                        float _3348 = 1.39999997615814208984375 / (_3345 + 1.39999997615814208984375);
                        float _3349 = _3348 * _3348;
                        float _3352 = ((1.0 - _3349) * _3338) + _3349;
                        float _3355 = _3345 * _3345;
                        float _3359 = ((isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0))) * _3344) / ((_3355 * 0.699999988079071044921875) + 1.0);
                        float _3363 = (-0.0) - _2817;
                        float _3364 = (-0.0) - _2818;
                        float _3365 = (-0.0) - _2819;
                        float _3369 = inversesqrt(dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365)));
                        float _3370 = _3369 * _3363;
                        float _3371 = _3369 * _3364;
                        float _3372 = _3369 * _3365;
                        float _3380 = exp2(log2(1.0 / ((_3355 * 3.5) + 5.0)) * 0.25);
                        float _3381 = 1.0 - _1132;
                        float _3388 = sqrt(1.0 - ((1.0 - (_3381 * _3381)) * (1.0 - (_3380 * _3380))));
                        float _3389 = _3388 * _3388;
                        float _3390 = _3389 * _3389;
                        float _3391 = _3370 + _3335;
                        float _3392 = _3371 + _3336;
                        float _3393 = _3372 + _3337;
                        float _3397 = inversesqrt(dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393)));
                        float _3401 = dot(vec3(_1012, _1015, _1018), vec3(_3370, _3371, _3372));
                        float _4773 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3404 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3405 = dot(vec3(_1012, _1015, _1018), vec3(_3397 * _3391, _3397 * _3392, _3397 * _3393));
                        float _4784 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3408 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3412 = ((_3408 * _3408) * (_3390 + (-1.0))) + 1.0;
                        float _3413 = _3348 * _3389;
                        float _3414 = _3413 * _3413;
                        float _3417 = ((1.0 - _3414) * _3338) + _3414;
                        float _4795 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3418 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3419 = 1.0 - _3389;
                        float _3429 = (0.5 / (((_3418 * ((_3404 * _3419) + _3389)) + 9.9999999392252902907785028219223e-09) + (((_3418 * _3419) + _3389) * _3404))) * _3418;
                        float _4806 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3440 = (((_3390 * 3.1415927410125732421875) * (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) / ((_3412 * _3412) * ((_3355 * 2.1991131305694580078125) + 3.141590118408203125))) * _3344;
                        _3192 = (_3359 * _3307.x) + _3265;
                        _3193 = (_3359 * _3307.y) + _3266;
                        _3194 = (_3359 * _3307.z) + _3267;
                        _3189 = (_3440 * _3324.x) + _3262;
                        _3190 = (_3440 * _3324.y) + _3263;
                        _3191 = (_3440 * _3324.z) + _3264;
                        if (_3269 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3194;
                            _3268 = _3269;
                        }
                    }
                    frontier_phi_66_pred = _3189;
                    frontier_phi_66_pred_1 = _3194;
                    frontier_phi_66_pred_2 = _3193;
                    frontier_phi_66_pred_3 = _3192;
                    frontier_phi_66_pred_4 = _3191;
                    frontier_phi_66_pred_5 = _3190;
                }
                _2965 = frontier_phi_66_pred;
                _2975 = frontier_phi_66_pred_1;
                _2973 = frontier_phi_66_pred_2;
                _2971 = frontier_phi_66_pred_3;
                _2969 = frontier_phi_66_pred_4;
                _2967 = frontier_phi_66_pred_5;
                uint _3124 = _3123 + 1u;
                if (_3124 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3117 = _2965;
                    _3118 = _2967;
                    _3119 = _2969;
                    _3120 = _2971;
                    _3121 = _2973;
                    _3122 = _2975;
                    _3123 = _3124;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
        }
        uvec4 _2978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2979 = _2978.z;
        uint _2981 = (_2979 >> 8u) & 15u;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        if (((4294967295u << _2981) & _2863) == 0u)
        {
            _3085 = _2964;
            _3087 = _2966;
            _3089 = _2968;
            _3091 = _2970;
            _3093 = _2972;
            _3095 = _2974;
        }
        else
        {
            float _3110 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
            float _3111 = _3110 * _2817;
            float _3112 = _3110 * _2818;
            float _3113 = _3110 * _2819;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2981 < ((_2979 >> 12u) & 15u))
            {
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3094;
                float _3096;
                float _3245 = _2964;
                float _3246 = _2966;
                float _3247 = _2968;
                float _3248 = _2970;
                float _3249 = _2972;
                float _3250 = _2974;
                uint _3251 = _2981;
                uint _3260;
                bool _3261;
                for (;;)
                {
                    _3260 = texelFetch(g_lightClassification, int((((_2857 << 5u) + (_2843 << 9u)) + (_3251 << 2u)) >> 2u)).x;
                    _3261 = _3260 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3261)
                    {
                        frontier_phi_77_pred = _3250;
                        frontier_phi_77_pred_1 = _3249;
                        frontier_phi_77_pred_2 = _3248;
                        frontier_phi_77_pred_3 = _3247;
                        frontier_phi_77_pred_4 = _3246;
                        frontier_phi_77_pred_5 = _3245;
                    }
                    else
                    {
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3467 = _3245;
                        float _3468 = _3246;
                        float _3469 = _3247;
                        float _3470 = _3248;
                        float _3471 = _3249;
                        float _3472 = _3250;
                        uint _3473 = _3260;
                        uint _3474;
                        vec4 _3499;
                        float _3500;
                        vec4 _3515;
                        vec3 _3527;
                        vec4 _3542;
                        vec4 _3557;
                        float _3603;
                        bool _3604;
                        for (;;)
                        {
                            uint _3484 = ((_3251 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3473));
                            _3474 = (_3473 + 4294967295u) & _3473;
                            uint _3486 = _3484 * 40u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3500 = _3499.w;
                            uint _3502 = (_3484 * 40u) + 4u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3484 * 40u) + 8u;
                            _3527 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x));
                            uint _3529 = (_3484 * 40u) + 16u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3544 = (_3484 * 40u) + 20u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3484 * 40u) + 24u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3578 = (_3484 * 40u) + 28u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            _3603 = fma(_2819, _3591.z, fma(_2818, _3591.y, _3591.x * _2817)) + _3591.w;
                            _3604 = !((fma(_2819, _3572.z, fma(_2818, _3572.y, _3572.x * _2817)) + _3572.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3604)
                            {
                                float _3631 = _3499.x - _2817;
                                float _3632 = _3499.y - _2818;
                                float _3633 = _3499.z - _2819;
                                float _3634 = dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633));
                                float _3637 = inversesqrt(_3634);
                                float _3638 = _3637 * _3631;
                                float _3639 = _3637 * _3632;
                                float _3640 = _3637 * _3633;
                                float _3644 = 1.0 - (_3634 / (_3500 * _3500));
                                float _4817 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3649 = sqrt(_3634) * _3515.w;
                                float _3651 = 1.39999997615814208984375 / (_3649 + 1.39999997615814208984375);
                                float _3652 = _3651 * _3651;
                                float _3655 = ((1.0 - _3652) * dot(vec3(_3638, _3639, _3640), vec3(_1012, _1015, _1018))) + _3652;
                                float _3658 = _3649 * _3649;
                                float _3662 = (fma(_2819, _3542.z, fma(_2818, _3542.y, _3542.x * _2817)) + _3542.w) / _3603;
                                float _3663 = (fma(_2819, _3557.z, fma(_2818, _3557.y, _3557.x * _2817)) + _3557.w) / _3603;
                                float _3667 = 1.0 - dot(vec2(_3662, _3663), vec2(_3662, _3663));
                                float _4833 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3668 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3669 = _3668 * (((isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0))) * _3645) / ((_3658 * 0.699999988079071044921875) + 1.0));
                                float _3681 = exp2(log2(1.0 / ((_3658 * 3.5) + 5.0)) * 0.25);
                                float _3682 = 1.0 - _1132;
                                float _3689 = sqrt(1.0 - ((1.0 - (_3682 * _3682)) * (1.0 - (_3681 * _3681))));
                                float _3690 = _3689 * _3689;
                                float _3691 = _3690 * _3690;
                                float _3692 = _3638 - _3111;
                                float _3693 = _3639 - _3112;
                                float _3694 = _3640 - _3113;
                                float _3698 = inversesqrt(dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694)));
                                float _3702 = dot(vec3(_1012, _1015, _1018), vec3((-0.0) - _3111, (-0.0) - _3112, (-0.0) - _3113));
                                float _4844 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3705 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3706 = dot(vec3(_1012, _1015, _1018), vec3(_3698 * _3692, _3698 * _3693, _3698 * _3694));
                                float _4855 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3709 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3713 = ((_3709 * _3709) * (_3691 + (-1.0))) + 1.0;
                                float _3714 = _3651 * _3690;
                                float _3715 = _3714 * _3714;
                                float _3721 = ((1.0 - _3715) * dot(vec3(_1012, _1015, _1018), vec3(_3638, _3639, _3640))) + _3715;
                                float _4866 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3723 = 1.0 - _3690;
                                float _3733 = (0.5 / (((_3722 * ((_3705 * _3723) + _3690)) + 9.9999999392252902907785028219223e-09) + (((_3722 * _3723) + _3690) * _3705))) * _3722;
                                float _4877 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3743 = (_3668 * _3645) * (((_3691 * 3.1415927410125732421875) * (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) / ((_3713 * _3713) * ((_3658 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3669 * _3515.y;
                                frontier_phi_83_pred_1 = _3669 * _3515.x;
                                frontier_phi_83_pred_2 = _3743 * _3527.z;
                                frontier_phi_83_pred_3 = _3743 * _3527.y;
                                frontier_phi_83_pred_4 = _3743 * _3527.x;
                                frontier_phi_83_pred_5 = _3669 * _3515.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3751 = frontier_phi_83_pred;
                            _3750 = frontier_phi_83_pred_1;
                            _3749 = frontier_phi_83_pred_2;
                            _3748 = frontier_phi_83_pred_3;
                            _3747 = frontier_phi_83_pred_4;
                            _3752 = frontier_phi_83_pred_5;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            _3459 = _3752 + _3472;
                            _3454 = _3747 + _3467;
                            _3455 = _3748 + _3468;
                            _3456 = _3749 + _3469;
                            if (_3474 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3474;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3459;
                        frontier_phi_77_pred_1 = _3458;
                        frontier_phi_77_pred_2 = _3457;
                        frontier_phi_77_pred_3 = _3456;
                        frontier_phi_77_pred_4 = _3455;
                        frontier_phi_77_pred_5 = _3454;
                    }
                    _3096 = frontier_phi_77_pred;
                    _3094 = frontier_phi_77_pred_1;
                    _3092 = frontier_phi_77_pred_2;
                    _3090 = frontier_phi_77_pred_3;
                    _3088 = frontier_phi_77_pred_4;
                    _3086 = frontier_phi_77_pred_5;
                    uint _3252 = _3251 + 1u;
                    if (_3252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3245 = _3086;
                        _3246 = _3088;
                        _3247 = _3090;
                        _3248 = _3092;
                        _3249 = _3094;
                        _3250 = _3096;
                        _3251 = _3252;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3090;
                frontier_phi_58_59_ladder_1 = _3096;
                frontier_phi_58_59_ladder_2 = _3094;
                frontier_phi_58_59_ladder_3 = _3092;
                frontier_phi_58_59_ladder_4 = _3088;
                frontier_phi_58_59_ladder_5 = _3086;
            }
            else
            {
                frontier_phi_58_59_ladder = _2968;
                frontier_phi_58_59_ladder_1 = _2974;
                frontier_phi_58_59_ladder_2 = _2972;
                frontier_phi_58_59_ladder_3 = _2970;
                frontier_phi_58_59_ladder_4 = _2966;
                frontier_phi_58_59_ladder_5 = _2964;
            }
            _3085 = frontier_phi_58_59_ladder_5;
            _3087 = frontier_phi_58_59_ladder_4;
            _3089 = frontier_phi_58_59_ladder;
            _3091 = frontier_phi_58_59_ladder_3;
            _3093 = frontier_phi_58_59_ladder_2;
            _3095 = frontier_phi_58_59_ladder_1;
        }
        float _3100 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _2876 = (_3100 * _3091) + _2312;
        _2878 = (_3100 * _3093) + _2314;
        _2880 = (_3100 * _3095) + _2316;
        _2882 = ((_3085 * _1101) * _3100) + _2657;
        _2884 = ((_3087 * _1103) * _3100) + _2659;
        _2886 = ((_3089 * _1104) * _3100) + _2661;
    }
    else
    {
        _2876 = _2312;
        _2878 = _2314;
        _2880 = _2316;
        _2882 = _2657;
        _2884 = _2659;
        _2886 = _2661;
    }
    float _4893 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _4904 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _4915 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _2903 = ((isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2876 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1116))) + ((_2882 + ((isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0))) * _1952)) * cbPerFrame._m0[3u].x);
    float _2904 = ((isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2878 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1116))) + ((_2884 + ((isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0))) * _1952)) * cbPerFrame._m0[3u].x);
    float _2905 = ((isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2880 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1116))) + ((_2886 + ((isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0))) * _1952)) * cbPerFrame._m0[3u].x);
    uint _2906 = _1044 + 6u;
    float _2914 = _989 / cbSceneParam._m0[86u].x;
    float _2915 = _990 / cbSceneParam._m0[86u].y;
    vec4 _2929 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2914, _2915, (log2((isnan(cbSceneParam._m0[77u].w) ? _912 : (isnan(_912) ? cbSceneParam._m0[77u].w : min(_912, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2931 = _2929.x;
    float _2932 = _2929.y;
    float _2933 = _2929.z;
    float _2934 = _2929.w;
    float _3027;
    float _3029;
    float _3031;
    float _3033;
    if (_912 > cbSceneParam._m0[78u].w)
    {
        float _2989 = isnan(_912) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _912 : min(cbSceneParam._m0[80u].w, _912));
        float _2990 = _2989 / _912;
        float _3001 = _2990 * _962;
        float _3002 = _963 * _2990;
        float _3003 = (-0.0) - _3002;
        float _3005 = _2990 * _964;
        float _3007 = (cbSceneParam._m0[77u].w * _3003) / _2989;
        float _3008 = _3007 + cbSceneParam._m0[79u].w;
        float _3009 = cbSceneParam._m0[79u].w - _3002;
        float _3015 = sqrt(((_3001 * _3001) + (_3002 * _3002)) + (_3005 * _3005));
        float _3018 = (1.0 - (cbSceneParam._m0[77u].w / _2989)) * _3015;
        float _3023 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3025 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3202;
        if (abs((_3003 - _3007) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3202 = ((((_3008 > 0.0) ? exp2(_3023 * _3008) : (2.0 - exp2(_3025 * _3008))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3018;
        }
        else
        {
            float _3146 = 1.0 / cbSceneParam._m0[80u].x;
            float _3147 = isnan(_3009) ? _3008 : (isnan(_3008) ? _3009 : max(_3008, _3009));
            float _3148 = isnan(_3009) ? _3008 : (isnan(_3008) ? _3009 : min(_3008, _3009));
            float _3157 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : min(_3147, 0.0));
            float _3158 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : min(_3148, 0.0));
            _3202 = ((abs(_3015 / _3003) * cbSceneParam._m0[80u].y) * ((((_3157 - _3158) * 2.0) - ((exp2(_3023 * (isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0)))) - exp2(_3023 * (isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))))) * _3146)) - ((exp2(_3025 * _3157) - exp2(_3025 * _3158)) * _3146))) + (_3018 * cbSceneParam._m0[80u].z);
        }
        vec4 _3204 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2914, _2915, 1.0), 0.0);
        float _3213 = exp2((_3202 * (-1.44269502162933349609375)) * (1.0 - _3204.w));
        float _3214 = log2(_3213);
        float _3230 = log2(_2934);
        _3027 = (exp2(_3230 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].x)) * _3204.x) / cbSceneParam._m0[78u].x)) + _2931;
        _3029 = (exp2(_3230 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].y)) * _3204.y) / cbSceneParam._m0[78u].y)) + _2932;
        _3031 = (exp2(_3230 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].z)) * _3204.z) / cbSceneParam._m0[78u].z)) + _2933;
        _3033 = _3213 * _2934;
    }
    else
    {
        _3027 = _2931;
        _3029 = _2932;
        _3031 = _2933;
        _3033 = _2934;
    }
    bool _3240;
    vec4 _3043;
    vec4 _3065;
    float _3067;
    float _3071;
    float _3072;
    float _3073;
    float _3074;
    bool _3084;
    for (;;)
    {
        _3043 = cbMatDynParam._m0[0u];
        float _3045 = roundEven(_3043.y);
        bool _3046 = _3045 == 3.0;
        float _3047 = log2(_3033);
        float _3054 = exp2(_3047 * cbSceneParam._m0[78u].x) * _2903;
        float _3055 = exp2(_3047 * cbSceneParam._m0[78u].y) * _2904;
        float _3056 = exp2(_3047 * cbSceneParam._m0[78u].z) * _2905;
        float _3063 = _978 + (-0.5);
        _3065 = cbMtdParam._m0[1u];
        _3067 = _3065.y * _3063;
        float _3070 = (_3045 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3071 = _3070 * (_3046 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3027)));
        _3072 = _3070 * (_3046 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3029)));
        _3073 = _3070 * (_3046 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3031)));
        _3074 = _3063 * 0.999000012874603271484375;
        _3084 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3084)
        {
            if ((cbInstanceData._m0[_1044 + 7u].x + _3074) < 0.5)
            {
                _3240 = true;
                break;
            }
        }
        uint _3181 = _1045 + uint(_3043.w);
        if ((cbInstanceData._m0[_3181].w < 1.0) && ((cbInstanceData._m0[_3181].w + _3074) < 0.5))
        {
            _3240 = true;
            break;
        }
        if ((_3067 + 1.0) < _3065.x)
        {
            _3240 = true;
            break;
        }
        _3240 = false;
        break;
    }
    float _3445;
    if (_3240)
    {
        discard_state = true;
        _3445 = 0.0;
    }
    else
    {
        _3445 = cbInstanceData._m0[_2906].w;
    }
    SV_Target.x = _3071;
    SV_Target.y = _3072;
    SV_Target.z = _3073;
    SV_Target.w = _3445;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2906].w;
    discard_exit();
}


