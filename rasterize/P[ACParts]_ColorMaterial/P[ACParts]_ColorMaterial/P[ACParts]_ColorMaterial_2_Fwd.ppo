#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_15;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1474;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = cbMtdParam._m0[25u].x + TEXCOORD.y;
    vec4 _279 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (_265 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _286 = log2(0.0);
    float _288 = exp2(_286 * cbMtdParam._m0[24u].y);
    float _292 = _288 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _288);
    float _293 = _288 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _288);
    float _294 = _288 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _288);
    float _295 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _296 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _297 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _298 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    float _300 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    float _301 = isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0));
    vec4 _314 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _265) + cbTextureTilingScale._m0[0u].w));
    float _318 = _314.z;
    float _319 = _314.w;
    float _320 = 1.0 - _319;
    float _329 = exp2(log2((1.0 - (_320 * _318)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _330 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _331 = isnan(1.0) ? _330 : (isnan(_330) ? 1.0 : min(_330, 1.0));
    float _340 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_320 * _320) * _318))) * cbMtdParam._m0[26u].y);
    float _341 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    vec4 _354 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _357 = _354.y;
    float _360 = (_357 * ((isnan(1.0) ? _341 : (isnan(_341) ? 1.0 : min(_341, 1.0))) - _319)) + _319;
    float _363 = (_354.x + (-0.02500000037252902984619140625)) * 8.0;
    float _367 = roundEven(5.0 - _363);
    float _368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _369 = isnan(4.0) ? _368 : (isnan(_368) ? 4.0 : min(_368, 4.0));
    float _382 = floor(_369);
    vec4 _385 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _265) + cbTextureTilingScale._m0[10u].w, _382));
    float _206[6];
    float _207[6];
    float _208[6];
    _206[0u] = cbMtdParam._m0[12u].x;
    _207[0u] = cbMtdParam._m0[12u].y;
    _208[0u] = cbMtdParam._m0[12u].z;
    _206[1u] = cbMtdParam._m0[13u].x;
    _207[1u] = cbMtdParam._m0[13u].y;
    _208[1u] = cbMtdParam._m0[13u].z;
    _206[2u] = cbMtdParam._m0[14u].x;
    _207[2u] = cbMtdParam._m0[14u].y;
    _208[2u] = cbMtdParam._m0[14u].z;
    _206[3u] = cbMtdParam._m0[15u].x;
    _207[3u] = cbMtdParam._m0[15u].y;
    _208[3u] = cbMtdParam._m0[15u].z;
    _206[4u] = cbMtdParam._m0[16u].x;
    _207[4u] = cbMtdParam._m0[16u].y;
    _208[4u] = cbMtdParam._m0[16u].z;
    _206[5u] = cbMtdParam._m0[11u].x;
    _207[5u] = cbMtdParam._m0[11u].y;
    _208[5u] = cbMtdParam._m0[11u].z;
    float _451 = roundEven(_363);
    float _452 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    uint _454 = uint(int(isnan(5.0) ? _452 : (isnan(_452) ? 5.0 : min(_452, 5.0))));
    float _203[6];
    float _204[6];
    float _205[6];
    _203[0u] = 1.0;
    _204[0u] = 1.0;
    _205[0u] = 1.0;
    _203[1u] = cbMtdParam._m0[22u].x;
    _204[1u] = cbMtdParam._m0[22u].y;
    _205[1u] = cbMtdParam._m0[22u].z;
    _203[2u] = cbMtdParam._m0[21u].x;
    _204[2u] = cbMtdParam._m0[21u].y;
    _205[2u] = cbMtdParam._m0[21u].z;
    _203[3u] = cbMtdParam._m0[19u].x;
    _204[3u] = cbMtdParam._m0[19u].y;
    _205[3u] = cbMtdParam._m0[19u].z;
    _203[4u] = cbMtdParam._m0[18u].x;
    _204[4u] = cbMtdParam._m0[18u].y;
    _205[4u] = cbMtdParam._m0[18u].z;
    _203[5u] = cbMtdParam._m0[17u].x;
    _204[5u] = cbMtdParam._m0[17u].y;
    _205[5u] = cbMtdParam._m0[17u].z;
    float _541 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[29u].y * TEXCOORD.x) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[29u].z * TEXCOORD.y) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _542 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    uint _544 = uint(int(isnan(5.0) ? _542 : (isnan(_542) ? 5.0 : min(_542, 5.0))));
    float _202[6];
    _202[0u] = 1.0;
    _202[1u] = cbMtdParam._m0[22u].w;
    _202[2u] = cbMtdParam._m0[21u].w;
    _202[3u] = cbMtdParam._m0[19u].w;
    _202[4u] = cbMtdParam._m0[18u].w;
    _202[5u] = cbMtdParam._m0[17u].w;
    float _581 = ((((_206[_454] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[24u].z * (_203[_544] - _206[_454])) * _202[_454])) * _357) + cbMtdParam._m0[10u].x) * _385.x;
    float _582 = ((((_207[_454] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[24u].z * (_204[_544] - _207[_454])) * _202[_454])) * _357) + cbMtdParam._m0[10u].y) * _385.y;
    float _583 = ((((_208[_454] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[24u].z * (_205[_544] - _208[_454])) * _202[_454])) * _357) + cbMtdParam._m0[10u].z) * _385.z;
    vec4 _595 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _265) + cbTextureTilingScale._m0[1u].w));
    float _615 = (((cbMtdParam._m0[9u].x * _595.x) - _581) * _360) + _581;
    float _616 = (((cbMtdParam._m0[9u].y * _595.y) - _582) * _360) + _582;
    float _617 = (((cbMtdParam._m0[9u].z * _595.z) - _583) * _360) + _583;
    vec4 _629 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    float _649 = (((cbMtdParam._m0[20u].x * _629.x) - _615) * _331) + _615;
    float _650 = (((cbMtdParam._m0[20u].y * _629.y) - _616) * _331) + _616;
    float _651 = (((cbMtdParam._m0[20u].z * _629.z) - _617) * _331) + _617;
    vec4 _663 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    float _687 = (_279.x * 4.5) * ((((cbMtdParam._m0[23u].x * _663.x) - _649) * _298) + _649);
    float _689 = (_279.y * 4.5) * ((((cbMtdParam._m0[23u].y * _663.y) - _650) * _300) + _650);
    float _691 = (_279.z * 4.5) * ((((cbMtdParam._m0[23u].z * _663.z) - _651) * _301) + _651);
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[26u].w;
    _198[0u] = cbMtdParam._m0[27u].x;
    _197[1u] = cbMtdParam._m0[27u].y;
    _198[1u] = cbMtdParam._m0[27u].z;
    _197[2u] = cbMtdParam._m0[27u].w;
    _198[2u] = cbMtdParam._m0[28u].x;
    _197[3u] = cbMtdParam._m0[28u].y;
    _198[3u] = cbMtdParam._m0[28u].z;
    _197[4u] = cbMtdParam._m0[28u].w;
    _198[4u] = cbMtdParam._m0[29u].x;
    float _719 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    uint _721 = uint(int(isnan(4.0) ? _719 : (isnan(_719) ? 4.0 : min(_719, 4.0))));
    float _733 = ((cbMtdParam._m0[30u].x - _198[_721]) * _360) + _198[_721];
    float _738 = ((cbMtdParam._m0[30u].z - _733) * _331) + _733;
    float _746 = ((cbMtdParam._m0[31u].x - _738) * _298) + _738;
    vec4 _761 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w, _382));
    float _763 = _761.x;
    float _764 = _761.y;
    float _766 = _761.z + _197[_721];
    vec4 _778 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _265) + cbTextureTilingScale._m0[6u].w));
    float _786 = (((cbMtdParam._m0[29u].w - _766) + _778.z) * _360) + _766;
    vec4 _799 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _265) + cbTextureTilingScale._m0[8u].w));
    float _807 = (((cbMtdParam._m0[30u].y - _786) + _799.z) * _331) + _786;
    float _813 = ((((_318 * 2.0) * _807) - _807) * cbMtdParam._m0[25u].y) + _807;
    vec4 _825 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w));
    float _833 = (((_825.z + cbMtdParam._m0[30u].w) - _813) * _301) + _813;
    float _846 = ((_778.x - _763) * _360) + _763;
    float _847 = ((_778.y - _764) * _360) + _764;
    float _852 = ((_799.x - _846) * _331) + _846;
    float _853 = ((_799.y - _847) * _331) + _847;
    float _862 = ((((_825.x - _852) * _298) + _852) * 2.0) + (-1.0);
    float _863 = ((((_825.y - _853) * _300) + _853) * 2.0) + (-1.0);
    float _864 = dot(vec2(_862, _863), vec2(_862, _863));
    float _3887 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _869 = sqrt(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))));
    float _872 = _862 + (cbMtdParam._m0[25u].z * ((_314.x * 2.0) + (-1.0)));
    float _873 = _863 + (cbMtdParam._m0[25u].z * ((_314.y * 2.0) + (-1.0)));
    float _876 = fma(_869, _243 * NORMAL.x, fma(_873, _250 * TANGENT.x, (_236 * _228) * _872));
    float _879 = fma(_869, _243 * NORMAL.y, fma(_873, _250 * TANGENT.y, (_236 * _229) * _872));
    float _882 = fma(_869, _243 * NORMAL.z, fma(_873, _250 * TANGENT.z, (_236 * _230) * _872));
    float _886 = inversesqrt(dot(vec3(_876, _879, _882), vec3(_876, _879, _882)));
    float _887 = _886 * _876;
    float _888 = _886 * _879;
    float _889 = _886 * _882;
    float _3898 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _890 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3920 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3931 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3942 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _894 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _910 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _960 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _950);
    float _961 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _950);
    float _962 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _950);
    float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
    float _967 = _960 * _966;
    float _968 = _961 * _966;
    float _969 = _962 * _966;
    float _975 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _976 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _978 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _980 = _978.w;
    float _998 = fma(_889, cbSceneParam._m0[5u].z, fma(_888, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _887));
    float _1001 = fma(_889, cbSceneParam._m0[6u].z, fma(_888, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _887));
    float _1004 = fma(_889, cbSceneParam._m0[7u].z, fma(_888, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _887));
    vec4 _1006 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1017 = (((_1006.y - _890) + (_1006.w * _890)) * cbMtdParam._m0[3u].x) + _890;
    uint _1030 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1032 = (_1030 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1038 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * cbInstanceData._m0[_1032].x;
    float _1039 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * cbInstanceData._m0[_1032].y;
    float _1040 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * cbInstanceData._m0[_1032].z;
    float _3953 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1041 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1042 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    vec4 _1044 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1049 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1060 = (((_1049.x - _894) + (_1049.w * _894)) * cbMtdParam._m0[3u].x) + _894;
    float _1073 = (cbMtdParam._m0[3u].x * (((_1041 * _980) - _1041) + _1044.x)) + _1041;
    float _1074 = (cbMtdParam._m0[3u].x * (((_1042 * _980) - _1042) + _1044.y)) + _1042;
    float _1075 = (cbMtdParam._m0[3u].x * (((_1043 * _980) - _1043) + _1044.z)) + _1043;
    float _1076 = 1.0 - _1060;
    float _1077 = _1076 * _1073;
    float _1078 = _1076 * _1074;
    float _1079 = _1076 * _1075;
    float _1084 = (_1073 + (-0.039999999105930328369140625)) * _1060;
    float _1085 = (_1074 + (-0.039999999105930328369140625)) * _1060;
    float _1086 = (_1075 + (-0.039999999105930328369140625)) * _1060;
    float _1087 = _1084 + 0.039999999105930328369140625;
    float _1089 = _1085 + 0.039999999105930328369140625;
    float _1090 = _1086 + 0.039999999105930328369140625;
    vec4 _1099 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _975, cbSceneParam._m0[86u].y * _976));
    float _1102 = _1099.x * TEXCOORD_5.w;
    float _1103 = dot(vec3(_887, _888, _889), vec3(_967, _968, _969));
    float _1106 = _1103 * 2.0;
    float _1110 = (_1106 * _887) - _967;
    float _1111 = (_1106 * _888) - _968;
    float _1112 = (_1106 * _889) - _969;
    float _1116 = abs(dot(vec3(_967, _968, _969), vec3(_887, _888, _889)));
    float _3986 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1118 = sqrt(_1017);
    float _1129 = exp2((_1118 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1118 * 3.0));
    float _1135 = (1.0 - _1129) * ((_1118 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1136 = _1129 * _1118;
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1473;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1198 = fma(_1172, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1164));
        float _1202 = fma(_1172, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1164));
        float _1206 = fma(_1172, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1164));
        float _1231 = _1164 + _887;
        float _1232 = _1168 + _888;
        float _1233 = _1172 + _889;
        float _1243 = fma(_1233, cbModelParam._m0[26u].z, fma(_1232, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1231)) - _1198;
        float _1244 = fma(_1233, cbModelParam._m0[27u].z, fma(_1232, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1231)) - _1202;
        float _1245 = fma(_1233, cbModelParam._m0[28u].z, fma(_1232, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1231)) - _1206;
        float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
        float _1262 = ((_1249 * _1243) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1198 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1249 * _1244) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1202 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1249 * _1245) / cbModelParam._m0[34u].z) + ((((((_1206 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        float _1301 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1267.x + (-0.5));
        float _1303 = _1301 * (_1267.y + (-0.5));
        float _1304 = _1301 * (_1267.z + (-0.5));
        float _1311 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1274.x + (-0.5));
        float _1313 = _1311 * (_1274.y + (-0.5));
        float _1314 = _1311 * (_1274.z + (-0.5));
        float _1321 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1281.x + (-0.5));
        float _1323 = _1321 * (_1281.y + (-0.5));
        float _1324 = _1321 * (_1281.z + (-0.5));
        float _1331 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1288.x + (-0.5));
        float _1333 = _1331 * (_1288.y + (-0.5));
        float _1334 = _1331 * (_1288.z + (-0.5));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = _1302 * 0.5;
        float _1339 = _1312 * 0.5;
        float _1340 = _1322 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1355 = (dot(vec3(_887, _888, _889), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1365 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4034 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1367 + 1.0))) + _1372) * _1335;
        float _1382 = _1303 * 0.5;
        float _1383 = _1313 * 0.5;
        float _1384 = _1323 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_887, _888, _889), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4067 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1409 + 1.0))) + _1414) * _1336;
        float _1424 = _1304 * 0.5;
        float _1425 = _1314 * 0.5;
        float _1426 = _1324 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_887, _888, _889), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _4100 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1451 + 1.0))) + _1456) * _1337;
        _1473 = _1304;
        _1475 = _1303;
        _1476 = _1302;
        _1477 = _1314;
        _1478 = _1313;
        _1479 = _1312;
        _1480 = _1324;
        _1481 = _1323;
        _1482 = _1322;
        _1483 = _1337;
        _1484 = _1336;
        _1485 = _1335;
        _1486 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
    }
    else
    {
        _1473 = _1474;
        _1475 = _1474;
        _1476 = _1474;
        _1477 = _1474;
        _1478 = _1474;
        _1479 = _1474;
        _1480 = _1474;
        _1481 = _1474;
        _1482 = _1474;
        _1483 = _1474;
        _1484 = _1474;
        _1485 = _1474;
        _1486 = 0.0;
        _1487 = 0.0;
        _1488 = 0.0;
    }
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1511 = fma(_1172, cbModelParam._m0[30u].z, fma(_1168, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164));
        float _1515 = fma(_1172, cbModelParam._m0[31u].z, fma(_1168, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164));
        float _1519 = fma(_1172, cbModelParam._m0[32u].z, fma(_1168, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164));
        float _1542 = _1164 + _887;
        float _1543 = _1168 + _888;
        float _1544 = _1172 + _889;
        float _1554 = fma(_1544, cbModelParam._m0[30u].z, fma(_1543, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1542)) - _1511;
        float _1555 = fma(_1544, cbModelParam._m0[31u].z, fma(_1543, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1542)) - _1515;
        float _1556 = fma(_1544, cbModelParam._m0[32u].z, fma(_1543, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1542)) - _1519;
        float _1560 = inversesqrt(dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556)));
        float _1573 = ((_1560 * _1554) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1511 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1574 = ((_1560 * _1555) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1515 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1575 = ((_1560 * _1556) / cbModelParam._m0[35u].z) + ((((((_1519 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        float _1610 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1577.x + (-0.5));
        float _1612 = _1610 * (_1577.y + (-0.5));
        float _1613 = _1610 * (_1577.z + (-0.5));
        float _1620 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1584.x + (-0.5));
        float _1622 = _1620 * (_1584.y + (-0.5));
        float _1623 = _1620 * (_1584.z + (-0.5));
        float _1630 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1591.x + (-0.5));
        float _1632 = _1630 * (_1591.y + (-0.5));
        float _1633 = _1630 * (_1591.z + (-0.5));
        float _1640 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1598.x + (-0.5));
        float _1642 = _1640 * (_1598.y + (-0.5));
        float _1643 = _1640 * (_1598.z + (-0.5));
        float _1644 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1645 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = _1611 * 0.5;
        float _1648 = _1621 * 0.5;
        float _1649 = _1631 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_887, _888, _889), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1644 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4163 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1674 + 1.0))) + _1679) * _1644;
        float _1689 = _1612 * 0.5;
        float _1690 = _1622 * 0.5;
        float _1691 = _1632 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_887, _888, _889), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1645 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4196 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1716 + 1.0))) + _1721) * _1645;
        float _1731 = _1613 * 0.5;
        float _1732 = _1623 * 0.5;
        float _1733 = _1633 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_887, _888, _889), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4229 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1758 + 1.0))) + _1763) * _1646;
        _1780 = _1613;
        _1781 = _1612;
        _1782 = _1611;
        _1783 = _1623;
        _1784 = _1622;
        _1785 = _1621;
        _1786 = _1633;
        _1787 = _1632;
        _1788 = _1631;
        _1789 = _1646;
        _1790 = _1645;
        _1791 = _1644;
        _1792 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1793 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
    }
    else
    {
        _1780 = _1474;
        _1781 = _1474;
        _1782 = _1474;
        _1783 = _1474;
        _1784 = _1474;
        _1785 = _1474;
        _1786 = _1474;
        _1787 = _1474;
        _1788 = _1474;
        _1789 = _1474;
        _1790 = _1474;
        _1791 = _1474;
        _1792 = 0.0;
        _1793 = 0.0;
        _1794 = 0.0;
    }
    float _1804 = (cbModelParam._m0[1u].x * (_1792 - _1486)) + _1486;
    float _1805 = (cbModelParam._m0[1u].x * (_1793 - _1487)) + _1487;
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1488)) + _1488;
    float _1827 = fma(_1806, cbSceneParam._m0[89u].z, fma(_1805, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1830 = fma(_1806, cbSceneParam._m0[90u].z, fma(_1805, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1833 = fma(_1806, cbSceneParam._m0[91u].z, fma(_1805, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1804));
    float _1848 = _1110 * 0.5;
    float _1849 = _1111 * 0.5;
    float _1850 = _1112 * 0.5;
    float _1851 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1854 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1781, _1784, _1787, _1790));
    float _1857 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1780, _1783, _1786, _1789));
    float _1891;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1864 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1473, _1477, _1480, _1483));
        float _1868 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1475, _1478, _1481, _1484));
        float _1872 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1476, _1479, _1482, _1485));
        float _1879 = dot(vec4(cbModelParam._m0[39u]), vec4(_1848, _1849, _1850, 1.0));
        _1891 = dot(vec3(isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1879) ? 0.0 : (isnan(0.0) ? _1879 : max(0.0, _1879))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1891 = 1.0;
    }
    float _1902;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1893 = dot(vec4(cbModelParam._m0[40u]), vec4(_1848, _1849, _1850, 1.0));
        _1902 = dot(vec3(isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1893) ? 0.0 : (isnan(0.0) ? _1893 : max(0.0, _1893))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1902 = 1.0;
    }
    float _1906 = (_1902 * cbModelParam._m0[1u].x) + (_1891 * (1.0 - cbModelParam._m0[1u].x));
    float _1916 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1017);
    float _1917 = isnan(_1916) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1916 : min(cbModelParam._m0[25u].z, _1916));
    float _1997;
    float _1999;
    float _2001;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1964 = fma(_1172, cbModelParam._m0[13u].z, fma(_1168, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1164)) + cbModelParam._m0[13u].w;
        float _1968 = fma(_1172, cbModelParam._m0[14u].z, fma(_1168, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1164)) + cbModelParam._m0[14u].w;
        float _1972 = fma(_1172, cbModelParam._m0[15u].z, fma(_1168, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1164)) + cbModelParam._m0[15u].w;
        float _1975 = fma(_1112, cbModelParam._m0[13u].z, fma(_1111, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1110));
        float _1978 = fma(_1112, cbModelParam._m0[14u].z, fma(_1111, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1110));
        float _1981 = fma(_1112, cbModelParam._m0[15u].z, fma(_1111, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1110));
        float _2009;
        if (_1975 > 0.0)
        {
            _2009 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2009 = frontier_phi_14_12_ladder;
        }
        float _2211;
        if (_1978 > 0.0)
        {
            _2211 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2211 = frontier_phi_23_19_ladder;
        }
        float _2465;
        if (_1981 > 0.0)
        {
            _2465 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2465 = frontier_phi_35_30_ladder;
        }
        float _2467 = isnan(_2211) ? _2009 : (isnan(_2009) ? _2211 : min(_2009, _2211));
        float _2468 = isnan(_2465) ? _2467 : (isnan(_2467) ? _2465 : min(_2467, _2465));
        float _2472 = (_2468 * _1975) + _1964;
        float _2473 = (_2468 * _1978) + _1968;
        float _2474 = (_2468 * _1981) + _1972;
        float _2475 = _2468 * 9.9999997473787516355514526367188e-05;
        float _2477 = (-1.0) - _2475;
        float _2479 = _2475 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2474 > _2479) || ((_2474 < _2477) || ((_2473 > _2479) || ((_2473 < _2477) || ((_2472 < _2477) || (_2472 > _2479))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2474, cbModelParam._m0[9u].z, fma(_2473, cbModelParam._m0[9u].y, _2472 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2474, cbModelParam._m0[10u].z, fma(_2473, cbModelParam._m0[10u].y, _2472 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2474, cbModelParam._m0[11u].z, fma(_2473, cbModelParam._m0[11u].y, _2472 * cbModelParam._m0[11u].x))), _1917);
            frontier_phi_13_35_ladder = _2602.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2602.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2602.x * cbModelParam._m0[1u].y;
        }
        _1997 = frontier_phi_13_35_ladder_2;
        _1999 = frontier_phi_13_35_ladder_1;
        _2001 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1985 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1110, _1111, _1112), _1917);
        _1997 = _1985.x * cbModelParam._m0[1u].y;
        _1999 = _1985.y * cbModelParam._m0[1u].y;
        _2001 = _1985.z * cbModelParam._m0[1u].y;
    }
    float _2005 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1017);
    float _2006 = isnan(_2005) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2005 : min(cbModelParam._m0[25u].w, _2005));
    float _2095;
    float _2097;
    float _2099;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2059 = fma(_1172, cbModelParam._m0[21u].z, fma(_1168, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1164)) + cbModelParam._m0[21u].w;
        float _2063 = fma(_1172, cbModelParam._m0[22u].z, fma(_1168, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1164)) + cbModelParam._m0[22u].w;
        float _2067 = fma(_1172, cbModelParam._m0[23u].z, fma(_1168, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1164)) + cbModelParam._m0[23u].w;
        float _2070 = fma(_1112, cbModelParam._m0[21u].z, fma(_1111, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1110));
        float _2073 = fma(_1112, cbModelParam._m0[22u].z, fma(_1111, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1110));
        float _2076 = fma(_1112, cbModelParam._m0[23u].z, fma(_1111, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1110));
        float _2216;
        if (_2070 > 0.0)
        {
            _2216 = abs((1.0 - _2059) / _2070);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2059 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2216 = frontier_phi_25_21_ladder;
        }
        float _2492;
        if (_2073 > 0.0)
        {
            _2492 = abs((1.0 - _2063) / _2073);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2063 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2492 = frontier_phi_37_32_ladder;
        }
        float _2705;
        if (_2076 > 0.0)
        {
            _2705 = abs((1.0 - _2067) / _2076);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2067 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2705 = frontier_phi_46_43_ladder;
        }
        float _2707 = isnan(_2492) ? _2216 : (isnan(_2216) ? _2492 : min(_2216, _2492));
        float _2708 = isnan(_2705) ? _2707 : (isnan(_2707) ? _2705 : min(_2707, _2705));
        float _2712 = (_2708 * _2070) + _2059;
        float _2713 = (_2708 * _2073) + _2063;
        float _2714 = (_2708 * _2076) + _2067;
        float _2715 = _2708 * 9.9999997473787516355514526367188e-05;
        float _2716 = (-1.0) - _2715;
        float _2718 = _2715 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2714 > _2718) || ((_2714 < _2716) || ((_2713 > _2718) || ((_2713 < _2716) || ((_2712 < _2716) || (_2712 > _2718))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2714, cbModelParam._m0[17u].z, fma(_2713, cbModelParam._m0[17u].y, _2712 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2714, cbModelParam._m0[18u].z, fma(_2713, cbModelParam._m0[18u].y, _2712 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2714, cbModelParam._m0[19u].z, fma(_2713, cbModelParam._m0[19u].y, _2712 * cbModelParam._m0[19u].x))), _2006);
            frontier_phi_22_46_ladder = _2913.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2913.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2913.x * cbModelParam._m0[1u].z;
        }
        _2095 = frontier_phi_22_46_ladder_2;
        _2097 = frontier_phi_22_46_ladder_1;
        _2099 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2079 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1110, _1111, _1112), _2006);
        _2095 = _2079.x * cbModelParam._m0[1u].z;
        _2097 = _2079.y * cbModelParam._m0[1u].z;
        _2099 = _2079.z * cbModelParam._m0[1u].z;
    }
    float _2112 = (((_1135 * _1087) + _1136) * _1102) * ((cbModelParam._m0[1u].w * (_2095 - _1997)) + _1997);
    float _2114 = (((_1135 * _1089) + _1136) * _1102) * ((cbModelParam._m0[1u].w * (_2097 - _1999)) + _1999);
    float _2116 = (((_1135 * _1090) + _1136) * _1102) * ((cbModelParam._m0[1u].w * (_2099 - _2001)) + _2001);
    float _2119 = fma(_2116, cbSceneParam._m0[89u].z, fma(_2114, cbSceneParam._m0[89u].y, _2112 * cbSceneParam._m0[89u].x));
    float _2122 = fma(_2116, cbSceneParam._m0[90u].z, fma(_2114, cbSceneParam._m0[90u].y, _2112 * cbSceneParam._m0[90u].x));
    float _2125 = fma(_2116, cbSceneParam._m0[91u].z, fma(_2114, cbSceneParam._m0[91u].y, _2112 * cbSceneParam._m0[91u].x));
    uvec4 _2135 = floatBitsToUint(cbInstanceData._m0[_1030 + 5u]);
    uint _2137 = _2135.x * 14u;
    uint _2138 = _2137 + 13u;
    float _2145 = _1102 + (-1.0);
    float _2150 = (cbLight._m0[_2138].x * _2145) + 1.0;
    float _2151 = (cbLight._m0[_2138].y * _2145) + 1.0;
    float _2152 = (cbLight._m0[_2138].z * _2145) + 1.0;
    float _2153 = (cbLight._m0[_2138].w * _2145) + 1.0;
    uint _2154 = _2137 + 5u;
    float _2160 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
    uint _2164 = _2137 + 4u;
    float _2170 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
    uint _2174 = _2137 | 1u;
    float _2185 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_887, _888, _889));
    float _2188 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_887, _888, _889));
    float _4365 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _4376 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2193 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * 0.3183098733425140380859375;
    float _2195 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * 0.3183098733425140380859375;
    float _2202 = ((cbLight._m0[_2154].x * _2160) * _2195) + ((cbLight._m0[_2164].x * _2170) * _2193);
    float _2203 = ((_2160 * cbLight._m0[_2154].y) * _2195) + ((_2170 * cbLight._m0[_2164].y) * _2193);
    float _2204 = ((_2160 * cbLight._m0[_2154].z) * _2195) + ((_2170 * cbLight._m0[_2164].z) * _2193);
    uvec4 _2208 = floatBitsToUint(cbLight._m0[_2137 + 12u]);
    bool _2210 = _2208.x == 0u;
    float _2221;
    float _2223;
    float _2225;
    if (_2210)
    {
        _2221 = _2202;
        _2223 = _2203;
        _2225 = _2204;
    }
    else
    {
        uint _2229 = _2137 + 6u;
        float _2245 = (dot(vec3(cbLight._m0[_2137 + 2u].xyz), vec3(_887, _888, _889)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4387 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2248 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2221 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2202;
        _2223 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2203;
        _2225 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2204;
    }
    bool _2228 = _2208.y == 0u;
    float _2266;
    float _2268;
    float _2270;
    if (_2228)
    {
        _2266 = _2221;
        _2268 = _2223;
        _2270 = _2225;
    }
    else
    {
        uint _2436 = _2137 + 7u;
        float _2452 = (dot(vec3(cbLight._m0[_2137 + 3u].xyz), vec3(_887, _888, _889)) * 0.5) + 0.5;
        float _2453 = _2452 * _2452;
        float _4403 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2454 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2455 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2266 = (((cbLight._m0[_2436].x * 0.3183098733425140380859375) * _2454) * _2455) + _2221;
        _2268 = (((cbLight._m0[_2436].y * 0.3183098733425140380859375) * _2454) * _2455) + _2223;
        _2270 = (((cbLight._m0[_2436].z * 0.3183098733425140380859375) * _2454) * _2455) + _2225;
    }
    uint _2273 = _2137 + 8u;
    float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2137].w)) * _1017) * 0.949999988079071044921875);
    float _2287 = _2286 * _2286;
    float _2288 = cbLight._m0[_2137].x + _967;
    float _2289 = cbLight._m0[_2137].y + _968;
    float _2290 = cbLight._m0[_2137].z + _969;
    float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
    float _2295 = _2294 * _2288;
    float _2296 = _2294 * _2289;
    float _2297 = _2294 * _2290;
    float _2298 = dot(vec3(_887, _888, _889), vec3(cbLight._m0[_2137].xyz));
    float _4419 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _4430 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _2302 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2303 = dot(vec3(_887, _888, _889), vec3(_2295, _2296, _2297));
    float _4441 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2307 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_2295, _2296, _2297));
    float _4452 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2311 = _2287 * _2287;
    float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
    float _2323 = exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0);
    float _2324 = 0.959999978542327880859375 - _1084;
    float _2326 = 0.959999978542327880859375 - _1085;
    float _2327 = 0.959999978542327880859375 - _1086;
    float _2334 = 1.0 - _2287;
    float _2345 = (0.5 / (((_2302 * ((_2301 * _2334) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2334) + _2287) * _2301))) * _2301;
    float _4463 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2347 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
    uint _2358 = _2137 + 9u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _1017) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2174].x + _967;
    float _2372 = cbLight._m0[_2174].y + _968;
    float _2373 = cbLight._m0[_2174].z + _969;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_887, _888, _889), vec3(cbLight._m0[_2174].xyz));
    float _4474 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2385 = dot(vec3(_887, _888, _889), vec3(_2378, _2379, _2380));
    float _4485 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2378, _2379, _2380));
    float _4496 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2370 * _2370;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2404 = exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0);
    float _2411 = 1.0 - _2370;
    float _2421 = (0.5 / (((_2302 * ((_2384 * _2411) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2411) + _2370) * _2384))) * _2384;
    float _4507 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2423 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    float _2433 = (((((_2404 * _2324) + _1087) * cbLight._m0[_2358].x) * _2423) * _2160) + (((((_2323 * _2324) + _1087) * cbLight._m0[_2273].x) * _2347) * _2170);
    float _2434 = (((((_2404 * _2326) + _1089) * cbLight._m0[_2358].y) * _2423) * _2160) + (((((_2323 * _2326) + _1089) * cbLight._m0[_2273].y) * _2347) * _2170);
    float _2435 = (((((_2404 * _2327) + _1090) * cbLight._m0[_2358].z) * _2423) * _2160) + (((((_2323 * _2327) + _1090) * cbLight._m0[_2273].z) * _2347) * _2170);
    float _2497;
    float _2499;
    float _2501;
    if (_2210)
    {
        _2497 = _2433;
        _2499 = _2434;
        _2501 = _2435;
    }
    else
    {
        uint _2503 = _2137 + 2u;
        uint _2507 = _2137 + 10u;
        float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _1017) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2503].x + _967;
        float _2524 = cbLight._m0[_2503].y + _968;
        float _2525 = cbLight._m0[_2503].z + _969;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_887, _888, _889), vec3(cbLight._m0[_2503].xyz));
        float _4518 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2537 = dot(vec3(_887, _888, _889), vec3(_2530, _2531, _2532));
        float _4529 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2530, _2531, _2532));
        float _4540 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
        float _2563 = 1.0 - _2522;
        float _2573 = (0.5 / (((_2302 * ((_2536 * _2563) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2563) + _2522) * _2536))) * _2536;
        float _4551 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2497 = (((((_2556 * _2324) + _1087) * cbLight._m0[_2507].x) * _2575) * _2576) + _2433;
        _2499 = (((((_2556 * _2326) + _1089) * cbLight._m0[_2507].y) * _2575) * _2576) + _2434;
        _2501 = (((((_2556 * _2327) + _1090) * cbLight._m0[_2507].z) * _2575) * _2576) + _2435;
    }
    float _2611;
    float _2613;
    float _2615;
    if (_2228)
    {
        _2611 = _2497;
        _2613 = _2499;
        _2615 = _2501;
    }
    else
    {
        uint _2622 = _2137 + 3u;
        uint _2626 = _2137 + 11u;
        float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2622].w)) * _1017) * 0.949999988079071044921875);
        float _2641 = _2640 * _2640;
        float _2642 = cbLight._m0[_2622].x + _967;
        float _2643 = cbLight._m0[_2622].y + _968;
        float _2644 = cbLight._m0[_2622].z + _969;
        float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
        float _2649 = _2648 * _2642;
        float _2650 = _2648 * _2643;
        float _2651 = _2648 * _2644;
        float _2652 = dot(vec3(_887, _888, _889), vec3(cbLight._m0[_2622].xyz));
        float _4567 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2656 = dot(vec3(_887, _888, _889), vec3(_2649, _2650, _2651));
        float _4578 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2660 = dot(vec3(cbLight._m0[_2622].xyz), vec3(_2649, _2650, _2651));
        float _4589 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2664 = _2641 * _2641;
        float _2668 = ((_2659 * _2659) * (_2664 + (-1.0))) + 1.0;
        float _2675 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
        float _2682 = 1.0 - _2641;
        float _2692 = (0.5 / (((_2302 * ((_2655 * _2682) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2682) + _2641) * _2655))) * _2655;
        float _4600 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2694 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2664 / ((_2668 * _2668) * 3.141590118408203125));
        float _2695 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2611 = (((((_2675 * _2324) + _1087) * cbLight._m0[_2626].x) * _2694) * _2695) + _2497;
        _2613 = (((((_2675 * _2326) + _1089) * cbLight._m0[_2626].y) * _2694) * _2695) + _2499;
        _2615 = (((((_2675 * _2327) + _1090) * cbLight._m0[_2626].z) * _2694) * _2695) + _2501;
    }
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_2135.y == 0u)
    {
        float _2770 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2771 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2770;
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2770;
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2770;
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.x;
        uint _2797 = uint((float(_2785.y) * floor(float(uint(cbSceneParam._m0[85u].y * _976) / _2786))) + floor(float(uint(cbSceneParam._m0[85u].x * _975) / _2786)));
        float _2807 = (log2(_2773 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2808 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        uint _2811 = uint(isnan(14.0) ? _2808 : (isnan(_2808) ? 14.0 : min(_2808, 14.0)));
        uvec4 _2816 = texelFetch(g_lightClusterGridBuffer, int(((_2811 << 2u) + (_2797 << 6u)) >> 2u));
        uint _2817 = _2816.x;
        uint _2818 = _2785.z;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        if (((((1u << ((_2818 >> 4u) & 15u)) + 4294967295u) & _2817) == 0u) || ((_2818 & 240u) == 0u))
        {
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
        }
        else
        {
            float _2919;
            float _2921;
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            uint _3069 = 0u;
            uint _3078;
            bool _3079;
            for (;;)
            {
                _3078 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3069 << 2u)) >> 2u)).x;
                _3079 = _3078 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3079)
                {
                    frontier_phi_61_pred = _3063;
                    frontier_phi_61_pred_1 = _3068;
                    frontier_phi_61_pred_2 = _3067;
                    frontier_phi_61_pred_3 = _3066;
                    frontier_phi_61_pred_4 = _3065;
                    frontier_phi_61_pred_5 = _3064;
                }
                else
                {
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    uint _3193;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3078;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    for (;;)
                    {
                        uint _3197 = uint(findLSB(_3193)) + (_3069 << 5u);
                        uint _3194 = (_3193 + 4294967295u) & _3193;
                        uint _3199 = _3197 * 48u;
                        vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 3u)).x));
                        uint _3219 = (_3197 * 48u) + 4u;
                        vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3238 = (_3197 * 48u) + 8u;
                        vec3 _3249 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x));
                        float _3253 = _3213.x - _2771;
                        float _3254 = _3213.y - _2772;
                        float _3255 = _3213.z - _2773;
                        float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                        float _3259 = inversesqrt(_3256);
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3263 = dot(vec3(_998, _1001, _1004), vec3(_3260, _3261, _3262));
                        float _3268 = 1.0 - (_3256 * _3213.w);
                        float _4626 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3269 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3270 = sqrt(_3256) * _3232.w;
                        float _3273 = 1.39999997615814208984375 / (_3270 + 1.39999997615814208984375);
                        float _3274 = _3273 * _3273;
                        float _3277 = ((1.0 - _3274) * _3263) + _3274;
                        float _3280 = _3270 * _3270;
                        float _3284 = ((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3269) / ((_3280 * 0.699999988079071044921875) + 1.0);
                        float _3288 = (-0.0) - _2771;
                        float _3289 = (-0.0) - _2772;
                        float _3290 = (-0.0) - _2773;
                        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                        float _3295 = _3294 * _3288;
                        float _3296 = _3294 * _3289;
                        float _3297 = _3294 * _3290;
                        float _3305 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                        float _3306 = 1.0 - _1118;
                        float _3313 = sqrt(1.0 - ((1.0 - (_3306 * _3306)) * (1.0 - (_3305 * _3305))));
                        float _3314 = _3313 * _3313;
                        float _3315 = _3314 * _3314;
                        float _3316 = _3295 + _3260;
                        float _3317 = _3296 + _3261;
                        float _3318 = _3297 + _3262;
                        float _3322 = inversesqrt(dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318)));
                        float _3326 = dot(vec3(_998, _1001, _1004), vec3(_3295, _3296, _3297));
                        float _4642 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3330 = dot(vec3(_998, _1001, _1004), vec3(_3322 * _3316, _3322 * _3317, _3322 * _3318));
                        float _4653 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3333 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3337 = ((_3333 * _3333) * (_3315 + (-1.0))) + 1.0;
                        float _3338 = _3273 * _3314;
                        float _3339 = _3338 * _3338;
                        float _3342 = ((1.0 - _3339) * _3263) + _3339;
                        float _4664 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3343 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                        float _3344 = 1.0 - _3314;
                        float _3354 = (0.5 / (((_3343 * ((_3329 * _3344) + _3314)) + 9.9999999392252902907785028219223e-09) + (((_3343 * _3344) + _3314) * _3329))) * _3343;
                        float _4675 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3365 = (((_3315 * 3.1415927410125732421875) * (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) / ((_3337 * _3337) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125))) * _3269;
                        _3122 = (_3284 * _3232.x) + _3190;
                        _3123 = (_3284 * _3232.y) + _3191;
                        _3124 = (_3284 * _3232.z) + _3192;
                        _3119 = (_3365 * _3249.x) + _3187;
                        _3120 = (_3365 * _3249.y) + _3188;
                        _3121 = (_3365 * _3249.z) + _3189;
                        if (_3194 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3194;
                        }
                    }
                    frontier_phi_61_pred = _3119;
                    frontier_phi_61_pred_1 = _3124;
                    frontier_phi_61_pred_2 = _3123;
                    frontier_phi_61_pred_3 = _3122;
                    frontier_phi_61_pred_4 = _3121;
                    frontier_phi_61_pred_5 = _3120;
                }
                _2919 = frontier_phi_61_pred;
                _2929 = frontier_phi_61_pred_1;
                _2927 = frontier_phi_61_pred_2;
                _2925 = frontier_phi_61_pred_3;
                _2923 = frontier_phi_61_pred_4;
                _2921 = frontier_phi_61_pred_5;
                uint _3070 = _3069 + 1u;
                if (_3070 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3063 = _2919;
                    _3064 = _2921;
                    _3065 = _2923;
                    _3066 = _2925;
                    _3067 = _2927;
                    _3068 = _2929;
                    _3069 = _3070;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
        }
        uvec4 _2932 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2933 = _2932.z;
        uint _2935 = (_2933 >> 8u) & 15u;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        if (((4294967295u << _2935) & _2817) == 0u)
        {
            _3031 = _2918;
            _3033 = _2920;
            _3035 = _2922;
            _3037 = _2924;
            _3039 = _2926;
            _3041 = _2928;
        }
        else
        {
            float _3056 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
            float _3057 = _3056 * _2771;
            float _3058 = _3056 * _2772;
            float _3059 = _3056 * _2773;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2935 < ((_2933 >> 12u) & 15u))
            {
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3170 = _2918;
                float _3171 = _2920;
                float _3172 = _2922;
                float _3173 = _2924;
                float _3174 = _2926;
                float _3175 = _2928;
                uint _3176 = _2935;
                uint _3185;
                bool _3186;
                for (;;)
                {
                    _3185 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3176 << 2u)) >> 2u)).x;
                    _3186 = _3185 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3186)
                    {
                        frontier_phi_67_pred = _3173;
                        frontier_phi_67_pred_1 = _3174;
                        frontier_phi_67_pred_2 = _3175;
                        frontier_phi_67_pred_3 = _3172;
                        frontier_phi_67_pred_4 = _3171;
                        frontier_phi_67_pred_5 = _3170;
                    }
                    else
                    {
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3383 = _3170;
                        float _3384 = _3171;
                        float _3385 = _3172;
                        float _3386 = _3173;
                        float _3387 = _3174;
                        float _3388 = _3175;
                        uint _3389 = _3185;
                        uint _3390;
                        vec4 _3415;
                        float _3416;
                        vec4 _3431;
                        vec3 _3443;
                        vec4 _3458;
                        vec4 _3473;
                        float _3519;
                        bool _3520;
                        for (;;)
                        {
                            uint _3400 = ((_3176 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3389));
                            _3390 = (_3389 + 4294967295u) & _3389;
                            uint _3402 = _3400 * 40u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            _3416 = _3415.w;
                            uint _3418 = (_3400 * 40u) + 4u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3400 * 40u) + 8u;
                            _3443 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x));
                            uint _3445 = (_3400 * 40u) + 16u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3460 = (_3400 * 40u) + 20u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3400 * 40u) + 24u;
                            vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3494 = (_3400 * 40u) + 28u;
                            vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3519 = fma(_2773, _3507.z, fma(_2772, _3507.y, _3507.x * _2771)) + _3507.w;
                            _3520 = !((fma(_2773, _3488.z, fma(_2772, _3488.y, _3488.x * _2771)) + _3488.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3520)
                            {
                                float _3547 = _3415.x - _2771;
                                float _3548 = _3415.y - _2772;
                                float _3549 = _3415.z - _2773;
                                float _3550 = dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549));
                                float _3553 = inversesqrt(_3550);
                                float _3554 = _3553 * _3547;
                                float _3555 = _3553 * _3548;
                                float _3556 = _3553 * _3549;
                                float _3560 = 1.0 - (_3550 / (_3416 * _3416));
                                float _4686 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3565 = sqrt(_3550) * _3431.w;
                                float _3567 = 1.39999997615814208984375 / (_3565 + 1.39999997615814208984375);
                                float _3568 = _3567 * _3567;
                                float _3571 = ((1.0 - _3568) * dot(vec3(_3554, _3555, _3556), vec3(_998, _1001, _1004))) + _3568;
                                float _3574 = _3565 * _3565;
                                float _3578 = (fma(_2773, _3458.z, fma(_2772, _3458.y, _3458.x * _2771)) + _3458.w) / _3519;
                                float _3579 = (fma(_2773, _3473.z, fma(_2772, _3473.y, _3473.x * _2771)) + _3473.w) / _3519;
                                float _3583 = 1.0 - dot(vec2(_3578, _3579), vec2(_3578, _3579));
                                float _4702 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3585 = _3584 * (((isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0))) * _3561) / ((_3574 * 0.699999988079071044921875) + 1.0));
                                float _3597 = exp2(log2(1.0 / ((_3574 * 3.5) + 5.0)) * 0.25);
                                float _3598 = 1.0 - _1118;
                                float _3605 = sqrt(1.0 - ((1.0 - (_3598 * _3598)) * (1.0 - (_3597 * _3597))));
                                float _3606 = _3605 * _3605;
                                float _3607 = _3606 * _3606;
                                float _3608 = _3554 - _3057;
                                float _3609 = _3555 - _3058;
                                float _3610 = _3556 - _3059;
                                float _3614 = inversesqrt(dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610)));
                                float _3618 = dot(vec3(_998, _1001, _1004), vec3((-0.0) - _3057, (-0.0) - _3058, (-0.0) - _3059));
                                float _4713 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3622 = dot(vec3(_998, _1001, _1004), vec3(_3614 * _3608, _3614 * _3609, _3614 * _3610));
                                float _4724 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3629 = ((_3625 * _3625) * (_3607 + (-1.0))) + 1.0;
                                float _3630 = _3567 * _3606;
                                float _3631 = _3630 * _3630;
                                float _3637 = ((1.0 - _3631) * dot(vec3(_998, _1001, _1004), vec3(_3554, _3555, _3556))) + _3631;
                                float _4735 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3639 = 1.0 - _3606;
                                float _3649 = (0.5 / (((_3638 * ((_3621 * _3639) + _3606)) + 9.9999999392252902907785028219223e-09) + (((_3638 * _3639) + _3606) * _3621))) * _3638;
                                float _4746 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3659 = (_3584 * _3561) * (((_3607 * 3.1415927410125732421875) * (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) / ((_3629 * _3629) * ((_3574 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3659 * _3443.x;
                                frontier_phi_73_pred_1 = _3659 * _3443.y;
                                frontier_phi_73_pred_2 = _3585 * _3431.z;
                                frontier_phi_73_pred_3 = _3585 * _3431.y;
                                frontier_phi_73_pred_4 = _3585 * _3431.x;
                                frontier_phi_73_pred_5 = _3659 * _3443.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3663 = frontier_phi_73_pred;
                            _3664 = frontier_phi_73_pred_1;
                            _3668 = frontier_phi_73_pred_2;
                            _3667 = frontier_phi_73_pred_3;
                            _3666 = frontier_phi_73_pred_4;
                            _3665 = frontier_phi_73_pred_5;
                            _3373 = _3666 + _3386;
                            _3374 = _3667 + _3387;
                            _3375 = _3668 + _3388;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            _3372 = _3665 + _3385;
                            if (_3390 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3390;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3373;
                        frontier_phi_67_pred_1 = _3374;
                        frontier_phi_67_pred_2 = _3375;
                        frontier_phi_67_pred_3 = _3372;
                        frontier_phi_67_pred_4 = _3371;
                        frontier_phi_67_pred_5 = _3370;
                    }
                    _3038 = frontier_phi_67_pred;
                    _3040 = frontier_phi_67_pred_1;
                    _3042 = frontier_phi_67_pred_2;
                    _3036 = frontier_phi_67_pred_3;
                    _3034 = frontier_phi_67_pred_4;
                    _3032 = frontier_phi_67_pred_5;
                    uint _3177 = _3176 + 1u;
                    if (_3177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3170 = _3032;
                        _3171 = _3034;
                        _3172 = _3036;
                        _3173 = _3038;
                        _3174 = _3040;
                        _3175 = _3042;
                        _3176 = _3177;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3040;
                frontier_phi_55_56_ladder_1 = _3042;
                frontier_phi_55_56_ladder_2 = _3038;
                frontier_phi_55_56_ladder_3 = _3036;
                frontier_phi_55_56_ladder_4 = _3034;
                frontier_phi_55_56_ladder_5 = _3032;
            }
            else
            {
                frontier_phi_55_56_ladder = _2926;
                frontier_phi_55_56_ladder_1 = _2928;
                frontier_phi_55_56_ladder_2 = _2924;
                frontier_phi_55_56_ladder_3 = _2922;
                frontier_phi_55_56_ladder_4 = _2920;
                frontier_phi_55_56_ladder_5 = _2918;
            }
            _3031 = frontier_phi_55_56_ladder_5;
            _3033 = frontier_phi_55_56_ladder_4;
            _3035 = frontier_phi_55_56_ladder_3;
            _3037 = frontier_phi_55_56_ladder_2;
            _3039 = frontier_phi_55_56_ladder;
            _3041 = frontier_phi_55_56_ladder_1;
        }
        float _3046 = isnan(1.0) ? _1102 : (isnan(_1102) ? 1.0 : min(_1102, 1.0));
        _2830 = (_3046 * _3037) + _2266;
        _2832 = (_3046 * _3039) + _2268;
        _2834 = (_3046 * _3041) + _2270;
        _2836 = ((_3031 * _1087) * _3046) + _2611;
        _2838 = ((_3033 * _1089) * _3046) + _2613;
        _2840 = ((_3035 * _1090) * _3046) + _2615;
    }
    else
    {
        _2830 = _2266;
        _2832 = _2268;
        _2834 = _2270;
        _2836 = _2611;
        _2838 = _2613;
        _2840 = _2615;
    }
    float _4762 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _4773 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _4784 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    uint _2860 = _1030 + 6u;
    float _2868 = _975 / cbSceneParam._m0[86u].x;
    float _2869 = _976 / cbSceneParam._m0[86u].y;
    vec4 _2883 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, (log2((isnan(cbSceneParam._m0[77u].w) ? _910 : (isnan(_910) ? cbSceneParam._m0[77u].w : min(_910, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2885 = _2883.x;
    float _2886 = _2883.y;
    float _2887 = _2883.z;
    float _2888 = _2883.w;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    if (_910 > cbSceneParam._m0[78u].w)
    {
        float _2943 = isnan(_910) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _910 : min(cbSceneParam._m0[80u].w, _910));
        float _2944 = _2943 / _910;
        float _2955 = _2944 * _960;
        float _2956 = _961 * _2944;
        float _2957 = (-0.0) - _2956;
        float _2959 = _2944 * _962;
        float _2961 = (cbSceneParam._m0[77u].w * _2957) / _2943;
        float _2962 = _2961 + cbSceneParam._m0[79u].w;
        float _2963 = cbSceneParam._m0[79u].w - _2956;
        float _2969 = sqrt(((_2955 * _2955) + (_2956 * _2956)) + (_2959 * _2959));
        float _2972 = (1.0 - (cbSceneParam._m0[77u].w / _2943)) * _2969;
        float _2977 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2979 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3132;
        if (abs((_2957 - _2961) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3132 = ((((_2962 > 0.0) ? exp2(_2977 * _2962) : (2.0 - exp2(_2979 * _2962))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2972;
        }
        else
        {
            float _3092 = 1.0 / cbSceneParam._m0[80u].x;
            float _3093 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : max(_2962, _2963));
            float _3094 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : min(_2962, _2963));
            float _3103 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : min(_3093, 0.0));
            float _3104 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : min(_3094, 0.0));
            _3132 = ((abs(_2969 / _2957) * cbSceneParam._m0[80u].y) * ((((_3103 - _3104) * 2.0) - ((exp2(_2977 * (isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0)))) - exp2(_2977 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))))) * _3092)) - ((exp2(_2979 * _3103) - exp2(_2979 * _3104)) * _3092))) + (_2972 * cbSceneParam._m0[80u].z);
        }
        vec4 _3134 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, 1.0), 0.0);
        float _3143 = exp2((_3132 * (-1.44269502162933349609375)) * (1.0 - _3134.w));
        float _3144 = log2(_3143);
        float _3160 = log2(_2888);
        _2981 = (exp2(_3160 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].x)) * _3134.x) / cbSceneParam._m0[78u].x)) + _2885;
        _2983 = (exp2(_3160 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].y)) * _3134.y) / cbSceneParam._m0[78u].y)) + _2886;
        _2985 = (exp2(_3160 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].z)) * _3134.z) / cbSceneParam._m0[78u].z)) + _2887;
        _2987 = _3143 * _2888;
    }
    else
    {
        _2981 = _2885;
        _2983 = _2886;
        _2985 = _2887;
        _2987 = _2888;
    }
    float _2999 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3000 = _2999 == 3.0;
    float _3001 = log2(_2987);
    float _3008 = exp2(_3001 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2830 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1102))) + ((_2836 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1906)) * cbPerFrame._m0[3u].x));
    float _3009 = exp2(_3001 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2832 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1102))) + ((_2838 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1906)) * cbPerFrame._m0[3u].x));
    float _3010 = exp2(_3001 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2834 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1102))) + ((_2840 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1906)) * cbPerFrame._m0[3u].x));
    float _3019 = (_2999 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3019 * (_3000 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2981)));
    SV_Target.y = _3019 * (_3000 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2983)));
    SV_Target.z = _3019 * (_3000 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2985)));
    SV_Target.w = cbInstanceData._m0[_2860].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2860].w;
}


