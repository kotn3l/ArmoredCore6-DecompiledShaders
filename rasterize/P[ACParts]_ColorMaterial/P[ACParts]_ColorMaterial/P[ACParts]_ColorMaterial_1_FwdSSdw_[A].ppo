#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1327;
float _3736;
float _3737;
float _3738;
float _3739;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _267 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _274 = log2(0.0);
    float _276 = exp2(_274 * cbMtdParam._m0[24u].y);
    float _280 = _276 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _276);
    float _281 = _276 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _276);
    float _282 = _276 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _276);
    float _283 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _284 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _285 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _286 = isnan(1.0) ? _283 : (isnan(_283) ? 1.0 : min(_283, 1.0));
    float _288 = isnan(1.0) ? _284 : (isnan(_284) ? 1.0 : min(_284, 1.0));
    float _289 = isnan(1.0) ? _285 : (isnan(_285) ? 1.0 : min(_285, 1.0));
    vec4 _304 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _308 = _304.z;
    float _309 = _304.w;
    float _310 = 1.0 - _309;
    float _319 = exp2(log2((1.0 - (_310 * _308)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _320 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = isnan(1.0) ? _320 : (isnan(_320) ? 1.0 : min(_320, 1.0));
    float _330 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_310 * _310) * _308))) * cbMtdParam._m0[26u].y);
    float _331 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    vec4 _344 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _350 = (_344.y * ((isnan(1.0) ? _331 : (isnan(_331) ? 1.0 : min(_331, 1.0))) - _309)) + _309;
    float _357 = roundEven(5.0 - ((_344.x + (-0.02500000037252902984619140625)) * 8.0));
    float _358 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _359 = isnan(4.0) ? _358 : (isnan(_358) ? 4.0 : min(_358, 4.0));
    float _372 = floor(_359);
    vec4 _375 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w, _372));
    float _385 = cbMtdParam._m0[10u].x * _375.x;
    float _386 = cbMtdParam._m0[10u].y * _375.y;
    float _387 = cbMtdParam._m0[10u].z * _375.z;
    vec4 _399 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _419 = (((cbMtdParam._m0[9u].x * _399.x) - _385) * _350) + _385;
    float _420 = (((cbMtdParam._m0[9u].y * _399.y) - _386) * _350) + _386;
    float _421 = (((cbMtdParam._m0[9u].z * _399.z) - _387) * _350) + _387;
    vec4 _434 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _454 = (((cbMtdParam._m0[20u].x * _434.x) - _419) * _321) + _419;
    float _455 = (((cbMtdParam._m0[20u].y * _434.y) - _420) * _321) + _420;
    float _456 = (((cbMtdParam._m0[20u].z * _434.z) - _421) * _321) + _421;
    vec4 _468 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _492 = (_267.x * 4.5) * ((((cbMtdParam._m0[23u].x * _468.x) - _454) * _286) + _454);
    float _494 = (_267.y * 4.5) * ((((cbMtdParam._m0[23u].y * _468.y) - _455) * _288) + _455);
    float _496 = (_267.z * 4.5) * ((((cbMtdParam._m0[23u].z * _468.z) - _456) * _289) + _456);
    float _199[5];
    float _200[5];
    _199[0u] = cbMtdParam._m0[26u].w;
    _200[0u] = cbMtdParam._m0[27u].x;
    _199[1u] = cbMtdParam._m0[27u].y;
    _200[1u] = cbMtdParam._m0[27u].z;
    _199[2u] = cbMtdParam._m0[27u].w;
    _200[2u] = cbMtdParam._m0[28u].x;
    _199[3u] = cbMtdParam._m0[28u].y;
    _200[3u] = cbMtdParam._m0[28u].z;
    _199[4u] = cbMtdParam._m0[28u].w;
    _200[4u] = cbMtdParam._m0[29u].x;
    float _528 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    uint _530 = uint(int(isnan(4.0) ? _528 : (isnan(_528) ? 4.0 : min(_528, 4.0))));
    float _542 = ((cbMtdParam._m0[30u].x - _200[_530]) * _350) + _200[_530];
    float _547 = ((cbMtdParam._m0[30u].z - _542) * _321) + _542;
    float _555 = ((cbMtdParam._m0[31u].x - _547) * _286) + _547;
    vec4 _571 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w, _372));
    float _573 = _571.x;
    float _574 = _571.y;
    float _576 = _571.z + _199[_530];
    vec4 _589 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _597 = (((cbMtdParam._m0[29u].w - _576) + _589.z) * _350) + _576;
    vec4 _610 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _618 = (((cbMtdParam._m0[30u].y - _597) + _610.z) * _321) + _597;
    float _624 = ((((_308 * 2.0) * _618) - _618) * cbMtdParam._m0[25u].y) + _618;
    vec4 _636 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _644 = (((_636.z + cbMtdParam._m0[30u].w) - _624) * _289) + _624;
    float _657 = ((_589.x - _573) * _350) + _573;
    float _658 = ((_589.y - _574) * _350) + _574;
    float _663 = ((_610.x - _657) * _321) + _657;
    float _664 = ((_610.y - _658) * _321) + _658;
    float _673 = ((((_636.x - _663) * _286) + _663) * 2.0) + (-1.0);
    float _674 = ((((_636.y - _664) * _288) + _664) * 2.0) + (-1.0);
    float _675 = dot(vec2(_673, _674), vec2(_673, _674));
    float _3818 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _680 = sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))));
    float _683 = _673 + (cbMtdParam._m0[25u].z * ((_304.x * 2.0) + (-1.0)));
    float _684 = _674 + (cbMtdParam._m0[25u].z * ((_304.y * 2.0) + (-1.0)));
    float _687 = fma(_680, _235 * NORMAL.x, fma(_684, _242 * TANGENT.x, (_228 * _220) * _683));
    float _690 = fma(_680, _235 * NORMAL.y, fma(_684, _242 * TANGENT.y, (_228 * _221) * _683));
    float _693 = fma(_680, _235 * NORMAL.z, fma(_684, _242 * TANGENT.z, (_228 * _222) * _683));
    float _697 = inversesqrt(dot(vec3(_687, _690, _693), vec3(_687, _690, _693)));
    float _698 = _697 * _687;
    float _699 = _697 * _690;
    float _700 = _697 * _693;
    float _3829 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _701 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3851 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3862 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3873 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _705 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _721 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _771 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _761);
    float _772 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _761);
    float _773 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _761);
    float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
    float _778 = _771 * _777;
    float _779 = _772 * _777;
    float _780 = _773 * _777;
    vec4 _785 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _787 = _785.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1007 = sqrt(((_771 * _771) + (_772 * _772)) + (_773 * _773));
        float _1013 = (cbMatDynParam._m0[5u].x * _1007) + cbMatDynParam._m0[5u].y;
        float _3884 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1018 = (cbMatDynParam._m0[5u].z * _1007) + cbMatDynParam._m0[5u].w;
        float _3895 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) - _1014)) + _1014) < ((_787 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _798 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _799 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _801 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _803 = _801.w;
    float _821 = fma(_700, cbSceneParam._m0[5u].z, fma(_699, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _698));
    float _824 = fma(_700, cbSceneParam._m0[6u].z, fma(_699, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _698));
    float _827 = fma(_700, cbSceneParam._m0[7u].z, fma(_699, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _698));
    vec4 _829 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _840 = (((_829.y - _701) + (_829.w * _701)) * cbMtdParam._m0[3u].x) + _701;
    uint _853 = uint(roundEven(NORMAL.w)) * 13u;
    uint _855 = _853 + 9u;
    uint _856 = _855 + uint(cbMatDynParam._m0[0u].w);
    float _862 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) * cbInstanceData._m0[_856].x;
    float _863 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * cbInstanceData._m0[_856].y;
    float _864 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_856].z;
    float _3906 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    vec4 _868 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _873 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _884 = (((_873.x - _705) + (_873.w * _705)) * cbMtdParam._m0[3u].x) + _705;
    float _897 = (cbMtdParam._m0[3u].x * (((_865 * _803) - _865) + _868.x)) + _865;
    float _898 = (cbMtdParam._m0[3u].x * (((_866 * _803) - _866) + _868.y)) + _866;
    float _899 = (cbMtdParam._m0[3u].x * (((_867 * _803) - _867) + _868.z)) + _867;
    float _900 = 1.0 - _884;
    float _901 = _900 * _897;
    float _902 = _900 * _898;
    float _903 = _900 * _899;
    float _908 = (_897 + (-0.039999999105930328369140625)) * _884;
    float _909 = (_898 + (-0.039999999105930328369140625)) * _884;
    float _910 = (_899 + (-0.039999999105930328369140625)) * _884;
    float _911 = _908 + 0.039999999105930328369140625;
    float _913 = _909 + 0.039999999105930328369140625;
    float _914 = _910 + 0.039999999105930328369140625;
    vec4 _923 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _798, cbSceneParam._m0[86u].y * _799));
    float _926 = _923.x * TEXCOORD_5.w;
    float _927 = dot(vec3(_698, _699, _700), vec3(_778, _779, _780));
    float _930 = _927 * 2.0;
    float _934 = (_930 * _698) - _778;
    float _935 = (_930 * _699) - _779;
    float _936 = (_930 * _700) - _780;
    float _940 = abs(dot(vec3(_778, _779, _780), vec3(_698, _699, _700)));
    float _3939 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _942 = sqrt(_840);
    float _953 = exp2((_942 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_942 * 3.0));
    float _959 = (1.0 - _953) * ((_942 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _960 = _953 * _942;
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1326;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1051 = fma(_996, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _988));
        float _1055 = fma(_996, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _988));
        float _1059 = fma(_996, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _988));
        float _1084 = _988 + _698;
        float _1085 = _992 + _699;
        float _1086 = _996 + _700;
        float _1096 = fma(_1086, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1084)) - _1051;
        float _1097 = fma(_1086, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1084)) - _1055;
        float _1098 = fma(_1086, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1084)) - _1059;
        float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
        float _1115 = ((_1102 * _1096) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1051 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1102 * _1097) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1055 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1102 * _1098) / cbModelParam._m0[34u].z) + ((((((_1059 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        float _1154 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1120.x + (-0.5));
        float _1156 = _1154 * (_1120.y + (-0.5));
        float _1157 = _1154 * (_1120.z + (-0.5));
        float _1164 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1127.x + (-0.5));
        float _1166 = _1164 * (_1127.y + (-0.5));
        float _1167 = _1164 * (_1127.z + (-0.5));
        float _1174 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1134.x + (-0.5));
        float _1176 = _1174 * (_1134.y + (-0.5));
        float _1177 = _1174 * (_1134.z + (-0.5));
        float _1184 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1141.x + (-0.5));
        float _1186 = _1184 * (_1141.y + (-0.5));
        float _1187 = _1184 * (_1141.z + (-0.5));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = _1155 * 0.5;
        float _1192 = _1165 * 0.5;
        float _1193 = _1175 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1208 = (dot(vec3(_698, _699, _700), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1218 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3987 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1220 + 1.0))) + _1225) * _1188;
        float _1235 = _1156 * 0.5;
        float _1236 = _1166 * 0.5;
        float _1237 = _1176 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_698, _699, _700), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4020 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1262 + 1.0))) + _1267) * _1189;
        float _1277 = _1157 * 0.5;
        float _1278 = _1167 * 0.5;
        float _1279 = _1177 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_698, _699, _700), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4053 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1304 + 1.0))) + _1309) * _1190;
        _1326 = _1157;
        _1328 = _1156;
        _1329 = _1155;
        _1330 = _1167;
        _1331 = _1166;
        _1332 = _1165;
        _1333 = _1177;
        _1334 = _1176;
        _1335 = _1175;
        _1336 = _1190;
        _1337 = _1189;
        _1338 = _1188;
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1327;
        _1328 = _1327;
        _1329 = _1327;
        _1330 = _1327;
        _1331 = _1327;
        _1332 = _1327;
        _1333 = _1327;
        _1334 = _1327;
        _1335 = _1327;
        _1336 = _1327;
        _1337 = _1327;
        _1338 = _1327;
        _1339 = 0.0;
        _1340 = 0.0;
        _1341 = 0.0;
    }
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1367 = fma(_996, cbModelParam._m0[30u].z, fma(_992, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _988));
        float _1371 = fma(_996, cbModelParam._m0[31u].z, fma(_992, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _988));
        float _1375 = fma(_996, cbModelParam._m0[32u].z, fma(_992, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _988));
        float _1398 = _988 + _698;
        float _1399 = _992 + _699;
        float _1400 = _996 + _700;
        float _1410 = fma(_1400, cbModelParam._m0[30u].z, fma(_1399, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1398)) - _1367;
        float _1411 = fma(_1400, cbModelParam._m0[31u].z, fma(_1399, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1398)) - _1371;
        float _1412 = fma(_1400, cbModelParam._m0[32u].z, fma(_1399, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1398)) - _1375;
        float _1416 = inversesqrt(dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412)));
        float _1429 = ((_1416 * _1410) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1367 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1416 * _1411) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1371 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1416 * _1412) / cbModelParam._m0[35u].z) + ((((((_1375 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        float _1466 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1433.x + (-0.5));
        float _1468 = _1466 * (_1433.y + (-0.5));
        float _1469 = _1466 * (_1433.z + (-0.5));
        float _1476 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1440.x + (-0.5));
        float _1478 = _1476 * (_1440.y + (-0.5));
        float _1479 = _1476 * (_1440.z + (-0.5));
        float _1486 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1447.x + (-0.5));
        float _1488 = _1486 * (_1447.y + (-0.5));
        float _1489 = _1486 * (_1447.z + (-0.5));
        float _1496 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1454.x + (-0.5));
        float _1498 = _1496 * (_1454.y + (-0.5));
        float _1499 = _1496 * (_1454.z + (-0.5));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = _1467 * 0.5;
        float _1504 = _1477 * 0.5;
        float _1505 = _1487 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_698, _699, _700), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4116 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1530 + 1.0))) + _1535) * _1500;
        float _1545 = _1468 * 0.5;
        float _1546 = _1478 * 0.5;
        float _1547 = _1488 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_698, _699, _700), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4149 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1572 + 1.0))) + _1577) * _1501;
        float _1587 = _1469 * 0.5;
        float _1588 = _1479 * 0.5;
        float _1589 = _1489 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_698, _699, _700), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4182 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1614 + 1.0))) + _1619) * _1502;
        _1636 = _1469;
        _1637 = _1468;
        _1638 = _1467;
        _1639 = _1479;
        _1640 = _1478;
        _1641 = _1477;
        _1642 = _1489;
        _1643 = _1488;
        _1644 = _1487;
        _1645 = _1502;
        _1646 = _1501;
        _1647 = _1500;
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
    }
    else
    {
        _1636 = _1327;
        _1637 = _1327;
        _1638 = _1327;
        _1639 = _1327;
        _1640 = _1327;
        _1641 = _1327;
        _1642 = _1327;
        _1643 = _1327;
        _1644 = _1327;
        _1645 = _1327;
        _1646 = _1327;
        _1647 = _1327;
        _1648 = 0.0;
        _1649 = 0.0;
        _1650 = 0.0;
    }
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1339)) + _1339;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1340)) + _1340;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1341)) + _1341;
    float _1683 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1686 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1689 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1660));
    float _1704 = _934 * 0.5;
    float _1705 = _935 * 0.5;
    float _1706 = _936 * 0.5;
    float _1707 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1710 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1713 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1747;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1720 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1326, _1330, _1333, _1336));
        float _1724 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1728 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1329, _1332, _1335, _1338));
        float _1735 = dot(vec4(cbModelParam._m0[39u]), vec4(_1704, _1705, _1706, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1735) ? 0.0 : (isnan(0.0) ? _1735 : max(0.0, _1735))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1758;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1749 = dot(vec4(cbModelParam._m0[40u]), vec4(_1704, _1705, _1706, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1762 = (_1758 * cbModelParam._m0[1u].x) + (_1747 * (1.0 - cbModelParam._m0[1u].x));
    float _1772 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _840);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1772 : min(cbModelParam._m0[25u].z, _1772));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1822 = fma(_996, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988)) + cbModelParam._m0[13u].w;
        float _1826 = fma(_996, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988)) + cbModelParam._m0[14u].w;
        float _1830 = fma(_996, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988)) + cbModelParam._m0[15u].w;
        float _1833 = fma(_936, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934));
        float _1836 = fma(_936, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934));
        float _1839 = fma(_936, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934));
        float _1867;
        if (_1833 > 0.0)
        {
            _1867 = abs((1.0 - _1822) / _1833);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1822 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1867 = frontier_phi_17_15_ladder;
        }
        float _2095;
        if (_1836 > 0.0)
        {
            _2095 = abs((1.0 - _1826) / _1836);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1826 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2095 = frontier_phi_26_22_ladder;
        }
        float _2352;
        if (_1839 > 0.0)
        {
            _2352 = abs((1.0 - _1830) / _1839);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1830 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2352 = frontier_phi_38_33_ladder;
        }
        float _2354 = isnan(_2095) ? _1867 : (isnan(_1867) ? _2095 : min(_1867, _2095));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1833) + _1822;
        float _2360 = (_2355 * _1836) + _1826;
        float _2361 = (_2355 * _1839) + _1830;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2362;
        float _2366 = _2362 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 > _2366) || ((_2360 < _2364) || ((_2359 < _2364) || (_2359 > _2366))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2489 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2361, cbModelParam._m0[9u].z, fma(_2360, cbModelParam._m0[9u].y, _2359 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2361, cbModelParam._m0[10u].z, fma(_2360, cbModelParam._m0[10u].y, _2359 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2361, cbModelParam._m0[11u].z, fma(_2360, cbModelParam._m0[11u].y, _2359 * cbModelParam._m0[11u].x))), _1773);
            frontier_phi_16_38_ladder = _2489.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2489.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2489.x * cbModelParam._m0[1u].y;
        }
        _1855 = frontier_phi_16_38_ladder_2;
        _1857 = frontier_phi_16_38_ladder_1;
        _1859 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1843 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_934, _935, _936), _1773);
        _1855 = _1843.x * cbModelParam._m0[1u].y;
        _1857 = _1843.y * cbModelParam._m0[1u].y;
        _1859 = _1843.z * cbModelParam._m0[1u].y;
    }
    float _1863 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _840);
    float _1864 = isnan(_1863) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1863 : min(cbModelParam._m0[25u].w, _1863));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1921 = fma(_996, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988)) + cbModelParam._m0[21u].w;
        float _1925 = fma(_996, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988)) + cbModelParam._m0[22u].w;
        float _1929 = fma(_996, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988)) + cbModelParam._m0[23u].w;
        float _1932 = fma(_936, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934));
        float _1935 = fma(_936, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934));
        float _1938 = fma(_936, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934));
        float _2100;
        if (_1932 > 0.0)
        {
            _2100 = abs((1.0 - _1921) / _1932);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1921 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2100 = frontier_phi_28_24_ladder;
        }
        float _2379;
        if (_1935 > 0.0)
        {
            _2379 = abs((1.0 - _1925) / _1935);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1925 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2379 = frontier_phi_40_35_ladder;
        }
        float _2592;
        if (_1938 > 0.0)
        {
            _2592 = abs((1.0 - _1929) / _1938);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1929 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2592 = frontier_phi_49_46_ladder;
        }
        float _2594 = isnan(_2379) ? _2100 : (isnan(_2100) ? _2379 : min(_2100, _2379));
        float _2595 = isnan(_2592) ? _2594 : (isnan(_2594) ? _2592 : min(_2594, _2592));
        float _2599 = (_2595 * _1932) + _1921;
        float _2600 = (_2595 * _1935) + _1925;
        float _2601 = (_2595 * _1938) + _1929;
        float _2602 = _2595 * 9.9999997473787516355514526367188e-05;
        float _2603 = (-1.0) - _2602;
        float _2605 = _2602 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2601 > _2605) || ((_2601 < _2603) || ((_2600 > _2605) || ((_2600 < _2603) || ((_2599 < _2603) || (_2599 > _2605))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2601, cbModelParam._m0[17u].z, fma(_2600, cbModelParam._m0[17u].y, _2599 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2601, cbModelParam._m0[18u].z, fma(_2600, cbModelParam._m0[18u].y, _2599 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2601, cbModelParam._m0[19u].z, fma(_2600, cbModelParam._m0[19u].y, _2599 * cbModelParam._m0[19u].x))), _1864);
            frontier_phi_25_49_ladder = _2800.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2800.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2800.x * cbModelParam._m0[1u].z;
        }
        _1957 = frontier_phi_25_49_ladder_2;
        _1959 = frontier_phi_25_49_ladder_1;
        _1961 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_934, _935, _936), _1864);
        _1957 = _1941.x * cbModelParam._m0[1u].z;
        _1959 = _1941.y * cbModelParam._m0[1u].z;
        _1961 = _1941.z * cbModelParam._m0[1u].z;
    }
    float _1974 = (((_959 * _911) + _960) * _926) * ((cbModelParam._m0[1u].w * (_1957 - _1855)) + _1855);
    float _1976 = (((_959 * _913) + _960) * _926) * ((cbModelParam._m0[1u].w * (_1959 - _1857)) + _1857);
    float _1978 = (((_959 * _914) + _960) * _926) * ((cbModelParam._m0[1u].w * (_1961 - _1859)) + _1859);
    float _1981 = fma(_1978, cbSceneParam._m0[89u].z, fma(_1976, cbSceneParam._m0[89u].y, _1974 * cbSceneParam._m0[89u].x));
    float _1984 = fma(_1978, cbSceneParam._m0[90u].z, fma(_1976, cbSceneParam._m0[90u].y, _1974 * cbSceneParam._m0[90u].x));
    float _1987 = fma(_1978, cbSceneParam._m0[91u].z, fma(_1976, cbSceneParam._m0[91u].y, _1974 * cbSceneParam._m0[91u].x));
    vec4 _1995 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_798, _799));
    float _1997 = _1995.w;
    float _2009 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1997);
    float _2010 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1997);
    float _2011 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1997);
    uvec4 _2015 = floatBitsToUint(cbInstanceData._m0[_853 + 5u]);
    uint _2017 = _2015.x * 14u;
    uint _2018 = _2017 + 13u;
    float _2025 = _926 + (-1.0);
    float _2030 = (cbLight._m0[_2018].x * _2025) + 1.0;
    float _2031 = (cbLight._m0[_2018].y * _2025) + 1.0;
    float _2032 = (cbLight._m0[_2018].z * _2025) + 1.0;
    float _2033 = (cbLight._m0[_2018].w * _2025) + 1.0;
    uint _2034 = _2017 + 5u;
    float _2040 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2044 = _2017 + 4u;
    float _2053 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
    uint _2057 = _2017 | 1u;
    float _2068 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_698, _699, _700));
    float _2071 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_698, _699, _700));
    float _4318 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _4329 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2076 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * 0.3183098733425140380859375;
    float _2078 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * 0.3183098733425140380859375;
    float _2085 = ((cbLight._m0[_2034].x * _2040) * _2078) + (((cbLight._m0[_2044].x * _2009) * _2053) * _2076);
    float _2086 = ((_2040 * cbLight._m0[_2034].y) * _2078) + (((cbLight._m0[_2044].y * _2010) * _2053) * _2076);
    float _2087 = ((_2040 * cbLight._m0[_2034].z) * _2078) + (((cbLight._m0[_2044].z * _2011) * _2053) * _2076);
    uvec4 _2092 = floatBitsToUint(cbLight._m0[_2017 + 12u]);
    bool _2094 = _2092.x == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2094)
    {
        _2105 = _2085;
        _2107 = _2086;
        _2109 = _2087;
    }
    else
    {
        uint _2113 = _2017 + 6u;
        float _2129 = (dot(vec3(cbLight._m0[_2017 + 2u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2130 = _2129 * _2129;
        float _4340 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2131 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2132 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2105 = (((cbLight._m0[_2113].x * 0.3183098733425140380859375) * _2131) * _2132) + _2085;
        _2107 = (((cbLight._m0[_2113].y * 0.3183098733425140380859375) * _2131) * _2132) + _2086;
        _2109 = (((cbLight._m0[_2113].z * 0.3183098733425140380859375) * _2131) * _2132) + _2087;
    }
    bool _2112 = _2092.y == 0u;
    float _2150;
    float _2152;
    float _2154;
    if (_2112)
    {
        _2150 = _2105;
        _2152 = _2107;
        _2154 = _2109;
    }
    else
    {
        uint _2323 = _2017 + 7u;
        float _2339 = (dot(vec3(cbLight._m0[_2017 + 3u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2340 = _2339 * _2339;
        float _4356 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2341 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2342 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2150 = (((cbLight._m0[_2323].x * 0.3183098733425140380859375) * _2341) * _2342) + _2105;
        _2152 = (((cbLight._m0[_2323].y * 0.3183098733425140380859375) * _2341) * _2342) + _2107;
        _2154 = (((cbLight._m0[_2323].z * 0.3183098733425140380859375) * _2341) * _2342) + _2109;
    }
    uint _2157 = _2017 + 8u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _840) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_2017].x + _778;
    float _2173 = cbLight._m0[_2017].y + _779;
    float _2174 = cbLight._m0[_2017].z + _780;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2017].xyz));
    float _4372 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _4383 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _2186 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _2187 = dot(vec3(_698, _699, _700), vec3(_2179, _2180, _2181));
    float _4394 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2191 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2179, _2180, _2181));
    float _4405 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2195 = _2171 * _2171;
    float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
    float _2207 = exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0);
    float _2208 = 0.959999978542327880859375 - _908;
    float _2210 = 0.959999978542327880859375 - _909;
    float _2211 = 0.959999978542327880859375 - _910;
    float _2218 = 1.0 - _2171;
    float _2229 = (0.5 / (((_2186 * ((_2185 * _2218) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2218) + _2171) * _2185))) * _2185;
    float _4416 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
    uint _2245 = _2017 + 9u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _840) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_2057].x + _778;
    float _2259 = cbLight._m0[_2057].y + _779;
    float _2260 = cbLight._m0[_2057].z + _780;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2057].xyz));
    float _4427 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2272 = dot(vec3(_698, _699, _700), vec3(_2265, _2266, _2267));
    float _4438 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2276 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2265, _2266, _2267));
    float _4449 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2280 = _2257 * _2257;
    float _2284 = ((_2275 * _2275) * (_2280 + (-1.0))) + 1.0;
    float _2291 = exp2(log2(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * 5.0);
    float _2298 = 1.0 - _2257;
    float _2308 = (0.5 / (((_2186 * ((_2271 * _2298) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2298) + _2257) * _2271))) * _2271;
    float _4460 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2310 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2280 / ((_2284 * _2284) * 3.141590118408203125));
    float _2320 = (((((_2291 * _2208) + _911) * cbLight._m0[_2245].x) * _2310) * _2040) + ((((cbLight._m0[_2157].x * _2009) * ((_2207 * _2208) + _911)) * _2231) * _2053);
    float _2321 = (((((_2291 * _2210) + _913) * cbLight._m0[_2245].y) * _2310) * _2040) + ((((cbLight._m0[_2157].y * _2010) * ((_2207 * _2210) + _913)) * _2231) * _2053);
    float _2322 = (((((_2291 * _2211) + _914) * cbLight._m0[_2245].z) * _2310) * _2040) + ((((cbLight._m0[_2157].z * _2011) * ((_2207 * _2211) + _914)) * _2231) * _2053);
    float _2384;
    float _2386;
    float _2388;
    if (_2094)
    {
        _2384 = _2320;
        _2386 = _2321;
        _2388 = _2322;
    }
    else
    {
        uint _2390 = _2017 + 2u;
        uint _2394 = _2017 + 10u;
        float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2390].w)) * _840) * 0.949999988079071044921875);
        float _2409 = _2408 * _2408;
        float _2410 = cbLight._m0[_2390].x + _778;
        float _2411 = cbLight._m0[_2390].y + _779;
        float _2412 = cbLight._m0[_2390].z + _780;
        float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
        float _2417 = _2416 * _2410;
        float _2418 = _2416 * _2411;
        float _2419 = _2416 * _2412;
        float _2420 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2390].xyz));
        float _4471 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2424 = dot(vec3(_698, _699, _700), vec3(_2417, _2418, _2419));
        float _4482 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2428 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_2417, _2418, _2419));
        float _4493 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2432 = _2409 * _2409;
        float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
        float _2443 = exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0);
        float _2450 = 1.0 - _2409;
        float _2460 = (0.5 / (((_2186 * ((_2423 * _2450) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2450) + _2409) * _2423))) * _2423;
        float _4504 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2462 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
        float _2463 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2384 = (((((_2443 * _2208) + _911) * cbLight._m0[_2394].x) * _2462) * _2463) + _2320;
        _2386 = (((((_2443 * _2210) + _913) * cbLight._m0[_2394].y) * _2462) * _2463) + _2321;
        _2388 = (((((_2443 * _2211) + _914) * cbLight._m0[_2394].z) * _2462) * _2463) + _2322;
    }
    float _2498;
    float _2500;
    float _2502;
    if (_2112)
    {
        _2498 = _2384;
        _2500 = _2386;
        _2502 = _2388;
    }
    else
    {
        uint _2509 = _2017 + 3u;
        uint _2513 = _2017 + 11u;
        float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2509].w)) * _840) * 0.949999988079071044921875);
        float _2528 = _2527 * _2527;
        float _2529 = cbLight._m0[_2509].x + _778;
        float _2530 = cbLight._m0[_2509].y + _779;
        float _2531 = cbLight._m0[_2509].z + _780;
        float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
        float _2536 = _2535 * _2529;
        float _2537 = _2535 * _2530;
        float _2538 = _2535 * _2531;
        float _2539 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2509].xyz));
        float _4520 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2543 = dot(vec3(_698, _699, _700), vec3(_2536, _2537, _2538));
        float _4531 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2547 = dot(vec3(cbLight._m0[_2509].xyz), vec3(_2536, _2537, _2538));
        float _4542 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2551 = _2528 * _2528;
        float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
        float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0);
        float _2569 = 1.0 - _2528;
        float _2579 = (0.5 / (((_2186 * ((_2542 * _2569) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2569) + _2528) * _2542))) * _2542;
        float _4553 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2498 = (((((_2562 * _2208) + _911) * cbLight._m0[_2513].x) * _2581) * _2582) + _2384;
        _2500 = (((((_2562 * _2210) + _913) * cbLight._m0[_2513].y) * _2581) * _2582) + _2386;
        _2502 = (((((_2562 * _2211) + _914) * cbLight._m0[_2513].z) * _2581) * _2582) + _2388;
    }
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    if (_2015.y == 0u)
    {
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2657;
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2657;
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2657;
        uvec4 _2672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2673 = _2672.x;
        uint _2684 = uint((float(_2672.y) * floor(float(uint(cbSceneParam._m0[85u].y * _799) / _2673))) + floor(float(uint(cbSceneParam._m0[85u].x * _798) / _2673)));
        float _2694 = (log2(_2660 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2695 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        uint _2698 = uint(isnan(14.0) ? _2695 : (isnan(_2695) ? 14.0 : min(_2695, 14.0)));
        uvec4 _2703 = texelFetch(g_lightClusterGridBuffer, int(((_2698 << 2u) + (_2684 << 6u)) >> 2u));
        uint _2704 = _2703.x;
        uint _2705 = _2672.z;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        if (((((1u << ((_2705 >> 4u) & 15u)) + 4294967295u) & _2704) == 0u) || ((_2705 & 240u) == 0u))
        {
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
        }
        else
        {
            float _2806;
            float _2808;
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            uint _2964 = 0u;
            uint _2973;
            bool _2974;
            for (;;)
            {
                _2973 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                _2974 = _2973 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2974)
                {
                    frontier_phi_66_pred = _2958;
                    frontier_phi_66_pred_1 = _2963;
                    frontier_phi_66_pred_2 = _2962;
                    frontier_phi_66_pred_3 = _2961;
                    frontier_phi_66_pred_4 = _2960;
                    frontier_phi_66_pred_5 = _2959;
                }
                else
                {
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    uint _3109;
                    _3103 = _2958;
                    _3104 = _2959;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2962;
                    _3108 = _2963;
                    _3109 = _2973;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    for (;;)
                    {
                        uint _3113 = uint(findLSB(_3109)) + (_2964 << 5u);
                        uint _3110 = (_3109 + 4294967295u) & _3109;
                        uint _3115 = _3113 * 48u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 3u)).x));
                        uint _3135 = (_3113 * 48u) + 4u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        uint _3154 = (_3113 * 48u) + 8u;
                        vec3 _3165 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x));
                        float _3169 = _3129.x - _2658;
                        float _3170 = _3129.y - _2659;
                        float _3171 = _3129.z - _2660;
                        float _3172 = dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171));
                        float _3175 = inversesqrt(_3172);
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3179 = dot(vec3(_821, _824, _827), vec3(_3176, _3177, _3178));
                        float _3184 = 1.0 - (_3172 * _3129.w);
                        float _4579 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                        float _3186 = sqrt(_3172) * _3148.w;
                        float _3189 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3179) + _3190;
                        float _3196 = _3186 * _3186;
                        float _3200 = ((isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))) * _3185) / ((_3196 * 0.699999988079071044921875) + 1.0);
                        float _3204 = (-0.0) - _2658;
                        float _3205 = (-0.0) - _2659;
                        float _3206 = (-0.0) - _2660;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3211 = _3210 * _3204;
                        float _3212 = _3210 * _3205;
                        float _3213 = _3210 * _3206;
                        float _3221 = exp2(log2(1.0 / ((_3196 * 3.5) + 5.0)) * 0.25);
                        float _3222 = 1.0 - _942;
                        float _3229 = sqrt(1.0 - ((1.0 - (_3222 * _3222)) * (1.0 - (_3221 * _3221))));
                        float _3230 = _3229 * _3229;
                        float _3231 = _3230 * _3230;
                        float _3232 = _3211 + _3176;
                        float _3233 = _3212 + _3177;
                        float _3234 = _3213 + _3178;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3242 = dot(vec3(_821, _824, _827), vec3(_3211, _3212, _3213));
                        float _4595 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3245 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3246 = dot(vec3(_821, _824, _827), vec3(_3238 * _3232, _3238 * _3233, _3238 * _3234));
                        float _4606 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3249 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3253 = ((_3249 * _3249) * (_3231 + (-1.0))) + 1.0;
                        float _3254 = _3189 * _3230;
                        float _3255 = _3254 * _3254;
                        float _3258 = ((1.0 - _3255) * _3179) + _3255;
                        float _4617 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3260 = 1.0 - _3230;
                        float _3270 = (0.5 / (((_3259 * ((_3245 * _3260) + _3230)) + 9.9999999392252902907785028219223e-09) + (((_3259 * _3260) + _3230) * _3245))) * _3259;
                        float _4628 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3281 = (((_3231 * 3.1415927410125732421875) * (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) / ((_3253 * _3253) * ((_3196 * 2.1991131305694580078125) + 3.141590118408203125))) * _3185;
                        _3033 = (_3200 * _3148.x) + _3106;
                        _3034 = (_3200 * _3148.y) + _3107;
                        _3035 = (_3200 * _3148.z) + _3108;
                        _3030 = (_3281 * _3165.x) + _3103;
                        _3031 = (_3281 * _3165.y) + _3104;
                        _3032 = (_3281 * _3165.z) + _3105;
                        if (_3110 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3103 = _3030;
                            _3104 = _3031;
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3110;
                        }
                    }
                    frontier_phi_66_pred = _3030;
                    frontier_phi_66_pred_1 = _3035;
                    frontier_phi_66_pred_2 = _3034;
                    frontier_phi_66_pred_3 = _3033;
                    frontier_phi_66_pred_4 = _3032;
                    frontier_phi_66_pred_5 = _3031;
                }
                _2806 = frontier_phi_66_pred;
                _2816 = frontier_phi_66_pred_1;
                _2814 = frontier_phi_66_pred_2;
                _2812 = frontier_phi_66_pred_3;
                _2810 = frontier_phi_66_pred_4;
                _2808 = frontier_phi_66_pred_5;
                uint _2965 = _2964 + 1u;
                if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2958 = _2806;
                    _2959 = _2808;
                    _2960 = _2810;
                    _2961 = _2812;
                    _2962 = _2814;
                    _2963 = _2816;
                    _2964 = _2965;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
        }
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.z;
        uint _2822 = (_2820 >> 8u) & 15u;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((4294967295u << _2822) & _2704) == 0u)
        {
            _2926 = _2805;
            _2928 = _2807;
            _2930 = _2809;
            _2932 = _2811;
            _2934 = _2813;
            _2936 = _2815;
        }
        else
        {
            float _2951 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
            float _2952 = _2951 * _2658;
            float _2953 = _2951 * _2659;
            float _2954 = _2951 * _2660;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2822 < ((_2820 >> 12u) & 15u))
            {
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _3086 = _2805;
                float _3087 = _2807;
                float _3088 = _2809;
                float _3089 = _2811;
                float _3090 = _2813;
                float _3091 = _2815;
                uint _3092 = _2822;
                uint _3101;
                bool _3102;
                for (;;)
                {
                    _3101 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                    _3102 = _3101 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3102)
                    {
                        frontier_phi_77_pred = _3091;
                        frontier_phi_77_pred_1 = _3090;
                        frontier_phi_77_pred_2 = _3089;
                        frontier_phi_77_pred_3 = _3088;
                        frontier_phi_77_pred_4 = _3087;
                        frontier_phi_77_pred_5 = _3086;
                    }
                    else
                    {
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3308 = _3086;
                        float _3309 = _3087;
                        float _3310 = _3088;
                        float _3311 = _3089;
                        float _3312 = _3090;
                        float _3313 = _3091;
                        uint _3314 = _3101;
                        uint _3315;
                        vec4 _3340;
                        float _3341;
                        vec4 _3356;
                        vec3 _3368;
                        vec4 _3384;
                        vec4 _3399;
                        float _3445;
                        bool _3446;
                        for (;;)
                        {
                            uint _3325 = ((_3092 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3314));
                            _3315 = (_3314 + 4294967295u) & _3314;
                            uint _3327 = _3325 * 40u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            _3341 = _3340.w;
                            uint _3343 = (_3325 * 40u) + 4u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3358 = (_3325 * 40u) + 8u;
                            _3368 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x));
                            uint _3371 = (_3325 * 40u) + 16u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3386 = (_3325 * 40u) + 20u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3401 = (_3325 * 40u) + 24u;
                            vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3420 = (_3325 * 40u) + 28u;
                            vec4 _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            _3445 = fma(_2660, _3433.z, fma(_2659, _3433.y, _3433.x * _2658)) + _3433.w;
                            _3446 = !((fma(_2660, _3414.z, fma(_2659, _3414.y, _3414.x * _2658)) + _3414.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3446)
                            {
                                float _3473 = _3340.x - _2658;
                                float _3474 = _3340.y - _2659;
                                float _3475 = _3340.z - _2660;
                                float _3476 = dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475));
                                float _3479 = inversesqrt(_3476);
                                float _3480 = _3479 * _3473;
                                float _3481 = _3479 * _3474;
                                float _3482 = _3479 * _3475;
                                float _3486 = 1.0 - (_3476 / (_3341 * _3341));
                                float _4639 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3491 = sqrt(_3476) * _3356.w;
                                float _3493 = 1.39999997615814208984375 / (_3491 + 1.39999997615814208984375);
                                float _3494 = _3493 * _3493;
                                float _3497 = ((1.0 - _3494) * dot(vec3(_3480, _3481, _3482), vec3(_821, _824, _827))) + _3494;
                                float _3500 = _3491 * _3491;
                                float _3504 = (fma(_2660, _3384.z, fma(_2659, _3384.y, _3384.x * _2658)) + _3384.w) / _3445;
                                float _3505 = (fma(_2660, _3399.z, fma(_2659, _3399.y, _3399.x * _2658)) + _3399.w) / _3445;
                                float _3509 = 1.0 - dot(vec2(_3504, _3505), vec2(_3504, _3505));
                                float _4655 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3511 = _3510 * (((isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0))) * _3487) / ((_3500 * 0.699999988079071044921875) + 1.0));
                                float _3523 = exp2(log2(1.0 / ((_3500 * 3.5) + 5.0)) * 0.25);
                                float _3524 = 1.0 - _942;
                                float _3531 = sqrt(1.0 - ((1.0 - (_3524 * _3524)) * (1.0 - (_3523 * _3523))));
                                float _3532 = _3531 * _3531;
                                float _3533 = _3532 * _3532;
                                float _3534 = _3480 - _2952;
                                float _3535 = _3481 - _2953;
                                float _3536 = _3482 - _2954;
                                float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                                float _3544 = dot(vec3(_821, _824, _827), vec3((-0.0) - _2952, (-0.0) - _2953, (-0.0) - _2954));
                                float _4666 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3547 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3548 = dot(vec3(_821, _824, _827), vec3(_3540 * _3534, _3540 * _3535, _3540 * _3536));
                                float _4677 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3551 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3555 = ((_3551 * _3551) * (_3533 + (-1.0))) + 1.0;
                                float _3556 = _3493 * _3532;
                                float _3557 = _3556 * _3556;
                                float _3563 = ((1.0 - _3557) * dot(vec3(_821, _824, _827), vec3(_3480, _3481, _3482))) + _3557;
                                float _4688 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3565 = 1.0 - _3532;
                                float _3575 = (0.5 / (((_3564 * ((_3547 * _3565) + _3532)) + 9.9999999392252902907785028219223e-09) + (((_3564 * _3565) + _3532) * _3547))) * _3564;
                                float _4699 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3585 = (_3510 * _3487) * (((_3533 * 3.1415927410125732421875) * (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) / ((_3555 * _3555) * ((_3500 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3511 * _3356.y;
                                frontier_phi_83_pred_1 = _3511 * _3356.x;
                                frontier_phi_83_pred_2 = _3585 * _3368.z;
                                frontier_phi_83_pred_3 = _3585 * _3368.y;
                                frontier_phi_83_pred_4 = _3585 * _3368.x;
                                frontier_phi_83_pred_5 = _3511 * _3356.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3593 = frontier_phi_83_pred;
                            _3592 = frontier_phi_83_pred_1;
                            _3591 = frontier_phi_83_pred_2;
                            _3590 = frontier_phi_83_pred_3;
                            _3589 = frontier_phi_83_pred_4;
                            _3594 = frontier_phi_83_pred_5;
                            _3298 = _3592 + _3311;
                            _3299 = _3593 + _3312;
                            _3300 = _3594 + _3313;
                            _3295 = _3589 + _3308;
                            _3296 = _3590 + _3309;
                            _3297 = _3591 + _3310;
                            if (_3315 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3315;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3300;
                        frontier_phi_77_pred_1 = _3299;
                        frontier_phi_77_pred_2 = _3298;
                        frontier_phi_77_pred_3 = _3297;
                        frontier_phi_77_pred_4 = _3296;
                        frontier_phi_77_pred_5 = _3295;
                    }
                    _2937 = frontier_phi_77_pred;
                    _2935 = frontier_phi_77_pred_1;
                    _2933 = frontier_phi_77_pred_2;
                    _2931 = frontier_phi_77_pred_3;
                    _2929 = frontier_phi_77_pred_4;
                    _2927 = frontier_phi_77_pred_5;
                    uint _3093 = _3092 + 1u;
                    if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3086 = _2927;
                        _3087 = _2929;
                        _3088 = _2931;
                        _3089 = _2933;
                        _3090 = _2935;
                        _3091 = _2937;
                        _3092 = _3093;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2931;
                frontier_phi_58_59_ladder_1 = _2937;
                frontier_phi_58_59_ladder_2 = _2935;
                frontier_phi_58_59_ladder_3 = _2933;
                frontier_phi_58_59_ladder_4 = _2929;
                frontier_phi_58_59_ladder_5 = _2927;
            }
            else
            {
                frontier_phi_58_59_ladder = _2809;
                frontier_phi_58_59_ladder_1 = _2815;
                frontier_phi_58_59_ladder_2 = _2813;
                frontier_phi_58_59_ladder_3 = _2811;
                frontier_phi_58_59_ladder_4 = _2807;
                frontier_phi_58_59_ladder_5 = _2805;
            }
            _2926 = frontier_phi_58_59_ladder_5;
            _2928 = frontier_phi_58_59_ladder_4;
            _2930 = frontier_phi_58_59_ladder;
            _2932 = frontier_phi_58_59_ladder_3;
            _2934 = frontier_phi_58_59_ladder_2;
            _2936 = frontier_phi_58_59_ladder_1;
        }
        float _2941 = isnan(1.0) ? _926 : (isnan(_926) ? 1.0 : min(_926, 1.0));
        _2717 = (_2941 * _2932) + _2150;
        _2719 = (_2941 * _2934) + _2152;
        _2721 = (_2941 * _2936) + _2154;
        _2723 = ((_2926 * _911) * _2941) + _2498;
        _2725 = ((_2928 * _913) * _2941) + _2500;
        _2727 = ((_2930 * _914) * _2941) + _2502;
    }
    else
    {
        _2717 = _2150;
        _2719 = _2152;
        _2721 = _2154;
        _2723 = _2498;
        _2725 = _2500;
        _2727 = _2502;
    }
    float _4715 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4726 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4737 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _2744 = ((isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2717 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _926))) + ((_2723 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    float _2745 = ((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2719 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _926))) + ((_2725 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    float _2746 = ((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2721 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _926))) + ((_2727 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    uint _2747 = _853 + 6u;
    float _2755 = _798 / cbSceneParam._m0[86u].x;
    float _2756 = _799 / cbSceneParam._m0[86u].y;
    vec4 _2770 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, (log2((isnan(cbSceneParam._m0[77u].w) ? _721 : (isnan(_721) ? cbSceneParam._m0[77u].w : min(_721, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2772 = _2770.x;
    float _2773 = _2770.y;
    float _2774 = _2770.z;
    float _2775 = _2770.w;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_721 > cbSceneParam._m0[78u].w)
    {
        float _2830 = isnan(_721) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _721 : min(cbSceneParam._m0[80u].w, _721));
        float _2831 = _2830 / _721;
        float _2842 = _2831 * _771;
        float _2843 = _772 * _2831;
        float _2844 = (-0.0) - _2843;
        float _2846 = _2831 * _773;
        float _2848 = (cbSceneParam._m0[77u].w * _2844) / _2830;
        float _2849 = _2848 + cbSceneParam._m0[79u].w;
        float _2850 = cbSceneParam._m0[79u].w - _2843;
        float _2856 = sqrt(((_2842 * _2842) + (_2843 * _2843)) + (_2846 * _2846));
        float _2859 = (1.0 - (cbSceneParam._m0[77u].w / _2830)) * _2856;
        float _2864 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2866 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3043;
        if (abs((_2844 - _2848) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3043 = ((((_2849 > 0.0) ? exp2(_2864 * _2849) : (2.0 - exp2(_2866 * _2849))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2859;
        }
        else
        {
            float _2987 = 1.0 / cbSceneParam._m0[80u].x;
            float _2988 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : max(_2849, _2850));
            float _2989 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : min(_2849, _2850));
            float _2998 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : min(_2988, 0.0));
            float _2999 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : min(_2989, 0.0));
            _3043 = ((abs(_2856 / _2844) * cbSceneParam._m0[80u].y) * ((((_2998 - _2999) * 2.0) - ((exp2(_2864 * (isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0)))) - exp2(_2864 * (isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))))) * _2987)) - ((exp2(_2866 * _2998) - exp2(_2866 * _2999)) * _2987))) + (_2859 * cbSceneParam._m0[80u].z);
        }
        vec4 _3045 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, 1.0), 0.0);
        float _3054 = exp2((_3043 * (-1.44269502162933349609375)) * (1.0 - _3045.w));
        float _3055 = log2(_3054);
        float _3071 = log2(_2775);
        _2868 = (exp2(_3071 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].x)) * _3045.x) / cbSceneParam._m0[78u].x)) + _2772;
        _2870 = (exp2(_3071 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].y)) * _3045.y) / cbSceneParam._m0[78u].y)) + _2773;
        _2872 = (exp2(_3071 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].z)) * _3045.z) / cbSceneParam._m0[78u].z)) + _2774;
        _2874 = _3054 * _2775;
    }
    else
    {
        _2868 = _2772;
        _2870 = _2773;
        _2872 = _2774;
        _2874 = _2775;
    }
    bool _3081;
    vec4 _2884;
    vec4 _2906;
    float _2908;
    float _2912;
    float _2913;
    float _2914;
    float _2915;
    bool _2925;
    for (;;)
    {
        _2884 = cbMatDynParam._m0[0u];
        float _2886 = roundEven(_2884.y);
        bool _2887 = _2886 == 3.0;
        float _2888 = log2(_2874);
        float _2895 = exp2(_2888 * cbSceneParam._m0[78u].x) * _2744;
        float _2896 = exp2(_2888 * cbSceneParam._m0[78u].y) * _2745;
        float _2897 = exp2(_2888 * cbSceneParam._m0[78u].z) * _2746;
        float _2904 = _787 + (-0.5);
        _2906 = cbMtdParam._m0[1u];
        _2908 = _2906.y * _2904;
        float _2911 = (_2886 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2912 = _2911 * (_2887 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2868)));
        _2913 = _2911 * (_2887 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2870)));
        _2914 = _2911 * (_2887 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2872)));
        _2915 = _2904 * 0.999000012874603271484375;
        _2925 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2925)
        {
            if ((cbInstanceData._m0[_853 + 7u].x + _2915) < 0.5)
            {
                _3081 = true;
                break;
            }
        }
        uint _3022 = _855 + uint(_2884.w);
        if ((cbInstanceData._m0[_3022].w < 1.0) && ((cbInstanceData._m0[_3022].w + _2915) < 0.5))
        {
            _3081 = true;
            break;
        }
        if ((_2908 + 1.0) < _2906.x)
        {
            _3081 = true;
            break;
        }
        _3081 = false;
        break;
    }
    float _3286;
    if (_3081)
    {
        discard_state = true;
        _3286 = 0.0;
    }
    else
    {
        _3286 = cbInstanceData._m0[_2747].w;
    }
    SV_Target.x = _2912;
    SV_Target.y = _2913;
    SV_Target.z = _2914;
    SV_Target.w = _3286;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2747].w;
    discard_exit();
}


