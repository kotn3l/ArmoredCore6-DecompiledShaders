#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_15;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1517;
float _3918;
float _3919;
float _3920;
float _3921;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _279 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _286 = log2(0.0);
    float _288 = exp2(_286 * cbMtdParam._m0[24u].y);
    float _292 = _288 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _288);
    float _293 = _288 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _288);
    float _294 = _288 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _288);
    float _295 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _296 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _297 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _298 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    float _300 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    float _301 = isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0));
    vec4 _316 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _320 = _316.z;
    float _321 = _316.w;
    float _322 = 1.0 - _321;
    float _331 = exp2(log2((1.0 - (_322 * _320)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _332 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _333 = isnan(1.0) ? _332 : (isnan(_332) ? 1.0 : min(_332, 1.0));
    float _342 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_322 * _322) * _320))) * cbMtdParam._m0[26u].y);
    float _343 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    vec4 _356 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _359 = _356.y;
    float _362 = (_359 * ((isnan(1.0) ? _343 : (isnan(_343) ? 1.0 : min(_343, 1.0))) - _321)) + _321;
    float _365 = (_356.x + (-0.02500000037252902984619140625)) * 8.0;
    float _369 = roundEven(5.0 - _365);
    float _370 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _371 = isnan(4.0) ? _370 : (isnan(_370) ? 4.0 : min(_370, 4.0));
    float _384 = floor(_371);
    vec4 _387 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w, _384));
    float _210[6];
    float _211[6];
    float _212[6];
    _210[0u] = cbMtdParam._m0[12u].x;
    _211[0u] = cbMtdParam._m0[12u].y;
    _212[0u] = cbMtdParam._m0[12u].z;
    _210[1u] = cbMtdParam._m0[13u].x;
    _211[1u] = cbMtdParam._m0[13u].y;
    _212[1u] = cbMtdParam._m0[13u].z;
    _210[2u] = cbMtdParam._m0[14u].x;
    _211[2u] = cbMtdParam._m0[14u].y;
    _212[2u] = cbMtdParam._m0[14u].z;
    _210[3u] = cbMtdParam._m0[15u].x;
    _211[3u] = cbMtdParam._m0[15u].y;
    _212[3u] = cbMtdParam._m0[15u].z;
    _210[4u] = cbMtdParam._m0[16u].x;
    _211[4u] = cbMtdParam._m0[16u].y;
    _212[4u] = cbMtdParam._m0[16u].z;
    _210[5u] = cbMtdParam._m0[11u].x;
    _211[5u] = cbMtdParam._m0[11u].y;
    _212[5u] = cbMtdParam._m0[11u].z;
    float _453 = roundEven(_365);
    float _454 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    uint _456 = uint(int(isnan(5.0) ? _454 : (isnan(_454) ? 5.0 : min(_454, 5.0))));
    float _207[6];
    float _208[6];
    float _209[6];
    _207[0u] = 1.0;
    _208[0u] = 1.0;
    _209[0u] = 1.0;
    _207[1u] = cbMtdParam._m0[22u].x;
    _208[1u] = cbMtdParam._m0[22u].y;
    _209[1u] = cbMtdParam._m0[22u].z;
    _207[2u] = cbMtdParam._m0[21u].x;
    _208[2u] = cbMtdParam._m0[21u].y;
    _209[2u] = cbMtdParam._m0[21u].z;
    _207[3u] = cbMtdParam._m0[19u].x;
    _208[3u] = cbMtdParam._m0[19u].y;
    _209[3u] = cbMtdParam._m0[19u].z;
    _207[4u] = cbMtdParam._m0[18u].x;
    _208[4u] = cbMtdParam._m0[18u].y;
    _209[4u] = cbMtdParam._m0[18u].z;
    _207[5u] = cbMtdParam._m0[17u].x;
    _208[5u] = cbMtdParam._m0[17u].y;
    _209[5u] = cbMtdParam._m0[17u].z;
    float _543 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[29u].y * TEXCOORD.x) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[29u].z * TEXCOORD.y) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _544 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    uint _546 = uint(int(isnan(5.0) ? _544 : (isnan(_544) ? 5.0 : min(_544, 5.0))));
    float _206[6];
    _206[0u] = 1.0;
    _206[1u] = cbMtdParam._m0[22u].w;
    _206[2u] = cbMtdParam._m0[21u].w;
    _206[3u] = cbMtdParam._m0[19u].w;
    _206[4u] = cbMtdParam._m0[18u].w;
    _206[5u] = cbMtdParam._m0[17u].w;
    float _583 = ((((_210[_456] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[24u].z * (_207[_546] - _210[_456])) * _206[_456])) * _359) + cbMtdParam._m0[10u].x) * _387.x;
    float _584 = ((((_211[_456] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[24u].z * (_208[_546] - _211[_456])) * _206[_456])) * _359) + cbMtdParam._m0[10u].y) * _387.y;
    float _585 = ((((_212[_456] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[24u].z * (_209[_546] - _212[_456])) * _206[_456])) * _359) + cbMtdParam._m0[10u].z) * _387.z;
    vec4 _597 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _617 = (((cbMtdParam._m0[9u].x * _597.x) - _583) * _362) + _583;
    float _618 = (((cbMtdParam._m0[9u].y * _597.y) - _584) * _362) + _584;
    float _619 = (((cbMtdParam._m0[9u].z * _597.z) - _585) * _362) + _585;
    vec4 _631 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _651 = (((cbMtdParam._m0[20u].x * _631.x) - _617) * _333) + _617;
    float _652 = (((cbMtdParam._m0[20u].y * _631.y) - _618) * _333) + _618;
    float _653 = (((cbMtdParam._m0[20u].z * _631.z) - _619) * _333) + _619;
    vec4 _665 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _689 = (_279.x * 4.5) * ((((cbMtdParam._m0[23u].x * _665.x) - _651) * _298) + _651);
    float _691 = (_279.y * 4.5) * ((((cbMtdParam._m0[23u].y * _665.y) - _652) * _300) + _652);
    float _693 = (_279.z * 4.5) * ((((cbMtdParam._m0[23u].z * _665.z) - _653) * _301) + _653);
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[26u].w;
    _202[0u] = cbMtdParam._m0[27u].x;
    _201[1u] = cbMtdParam._m0[27u].y;
    _202[1u] = cbMtdParam._m0[27u].z;
    _201[2u] = cbMtdParam._m0[27u].w;
    _202[2u] = cbMtdParam._m0[28u].x;
    _201[3u] = cbMtdParam._m0[28u].y;
    _202[3u] = cbMtdParam._m0[28u].z;
    _201[4u] = cbMtdParam._m0[28u].w;
    _202[4u] = cbMtdParam._m0[29u].x;
    float _721 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    uint _723 = uint(int(isnan(4.0) ? _721 : (isnan(_721) ? 4.0 : min(_721, 4.0))));
    float _735 = ((cbMtdParam._m0[30u].x - _202[_723]) * _362) + _202[_723];
    float _740 = ((cbMtdParam._m0[30u].z - _735) * _333) + _735;
    float _748 = ((cbMtdParam._m0[31u].x - _740) * _298) + _740;
    vec4 _763 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w, _384));
    float _765 = _763.x;
    float _766 = _763.y;
    float _768 = _763.z + _201[_723];
    vec4 _780 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _788 = (((cbMtdParam._m0[29u].w - _768) + _780.z) * _362) + _768;
    vec4 _801 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _809 = (((cbMtdParam._m0[30u].y - _788) + _801.z) * _333) + _788;
    float _815 = ((((_320 * 2.0) * _809) - _809) * cbMtdParam._m0[25u].y) + _809;
    vec4 _827 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _835 = (((_827.z + cbMtdParam._m0[30u].w) - _815) * _301) + _815;
    float _848 = ((_780.x - _765) * _362) + _765;
    float _849 = ((_780.y - _766) * _362) + _766;
    float _854 = ((_801.x - _848) * _333) + _848;
    float _855 = ((_801.y - _849) * _333) + _849;
    float _864 = ((((_827.x - _854) * _298) + _854) * 2.0) + (-1.0);
    float _865 = ((((_827.y - _855) * _300) + _855) * 2.0) + (-1.0);
    float _866 = dot(vec2(_864, _865), vec2(_864, _865));
    float _4020 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _871 = sqrt(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))));
    float _874 = _864 + (cbMtdParam._m0[25u].z * ((_316.x * 2.0) + (-1.0)));
    float _875 = _865 + (cbMtdParam._m0[25u].z * ((_316.y * 2.0) + (-1.0)));
    float _878 = fma(_871, _247 * NORMAL.x, fma(_875, _254 * TANGENT.x, (_240 * _232) * _874));
    float _881 = fma(_871, _247 * NORMAL.y, fma(_875, _254 * TANGENT.y, (_240 * _233) * _874));
    float _884 = fma(_871, _247 * NORMAL.z, fma(_875, _254 * TANGENT.z, (_240 * _234) * _874));
    float _888 = inversesqrt(dot(vec3(_878, _881, _884), vec3(_878, _881, _884)));
    float _889 = _888 * _878;
    float _890 = _888 * _881;
    float _891 = _888 * _884;
    float _4031 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _892 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4053 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4064 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4075 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _896 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _912 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _962 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _952);
    float _963 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _952);
    float _964 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _952);
    float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
    float _969 = _962 * _968;
    float _970 = _963 * _968;
    float _971 = _964 * _968;
    vec4 _976 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _978 = _976.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1197 = sqrt(((_962 * _962) + (_963 * _963)) + (_964 * _964));
        float _1203 = (cbMatDynParam._m0[5u].x * _1197) + cbMatDynParam._m0[5u].y;
        float _4086 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1208 = (cbMatDynParam._m0[5u].z * _1197) + cbMatDynParam._m0[5u].w;
        float _4097 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) - _1204)) + _1204) < ((_978 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _989 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _990 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _992 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _994 = _992.w;
    float _1012 = fma(_891, cbSceneParam._m0[5u].z, fma(_890, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _889));
    float _1015 = fma(_891, cbSceneParam._m0[6u].z, fma(_890, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _889));
    float _1018 = fma(_891, cbSceneParam._m0[7u].z, fma(_890, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _889));
    vec4 _1020 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1031 = (((_1020.y - _892) + (_1020.w * _892)) * cbMtdParam._m0[3u].x) + _892;
    uint _1044 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1045 = _1044 + 9u;
    uint _1046 = _1045 + uint(cbMatDynParam._m0[0u].w);
    float _1052 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * cbInstanceData._m0[_1046].x;
    float _1053 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * cbInstanceData._m0[_1046].y;
    float _1054 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * cbInstanceData._m0[_1046].z;
    float _4108 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1057 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    vec4 _1058 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1063 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1074 = (((_1063.x - _896) + (_1063.w * _896)) * cbMtdParam._m0[3u].x) + _896;
    float _1087 = (cbMtdParam._m0[3u].x * (((_1055 * _994) - _1055) + _1058.x)) + _1055;
    float _1088 = (cbMtdParam._m0[3u].x * (((_1056 * _994) - _1056) + _1058.y)) + _1056;
    float _1089 = (cbMtdParam._m0[3u].x * (((_1057 * _994) - _1057) + _1058.z)) + _1057;
    float _1090 = 1.0 - _1074;
    float _1091 = _1090 * _1087;
    float _1092 = _1090 * _1088;
    float _1093 = _1090 * _1089;
    float _1098 = (_1087 + (-0.039999999105930328369140625)) * _1074;
    float _1099 = (_1088 + (-0.039999999105930328369140625)) * _1074;
    float _1100 = (_1089 + (-0.039999999105930328369140625)) * _1074;
    float _1101 = _1098 + 0.039999999105930328369140625;
    float _1103 = _1099 + 0.039999999105930328369140625;
    float _1104 = _1100 + 0.039999999105930328369140625;
    vec4 _1113 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _989, cbSceneParam._m0[86u].y * _990));
    float _1116 = _1113.x * TEXCOORD_5.w;
    float _1117 = dot(vec3(_889, _890, _891), vec3(_969, _970, _971));
    float _1120 = _1117 * 2.0;
    float _1124 = (_1120 * _889) - _969;
    float _1125 = (_1120 * _890) - _970;
    float _1126 = (_1120 * _891) - _971;
    float _1130 = abs(dot(vec3(_969, _970, _971), vec3(_889, _890, _891)));
    float _4141 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1132 = sqrt(_1031);
    float _1143 = exp2((_1132 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1132 * 3.0));
    float _1149 = (1.0 - _1143) * ((_1132 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1150 = _1143 * _1132;
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1516;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1241 = fma(_1186, cbModelParam._m0[26u].z, fma(_1182, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1178));
        float _1245 = fma(_1186, cbModelParam._m0[27u].z, fma(_1182, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1178));
        float _1249 = fma(_1186, cbModelParam._m0[28u].z, fma(_1182, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1178));
        float _1274 = _1178 + _889;
        float _1275 = _1182 + _890;
        float _1276 = _1186 + _891;
        float _1286 = fma(_1276, cbModelParam._m0[26u].z, fma(_1275, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1274)) - _1241;
        float _1287 = fma(_1276, cbModelParam._m0[27u].z, fma(_1275, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1274)) - _1245;
        float _1288 = fma(_1276, cbModelParam._m0[28u].z, fma(_1275, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1274)) - _1249;
        float _1292 = inversesqrt(dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288)));
        float _1305 = ((_1292 * _1286) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1241 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1292 * _1287) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1245 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1292 * _1288) / cbModelParam._m0[34u].z) + ((((((_1249 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        float _1344 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1310.x + (-0.5));
        float _1346 = _1344 * (_1310.y + (-0.5));
        float _1347 = _1344 * (_1310.z + (-0.5));
        float _1354 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1317.x + (-0.5));
        float _1356 = _1354 * (_1317.y + (-0.5));
        float _1357 = _1354 * (_1317.z + (-0.5));
        float _1364 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1324.x + (-0.5));
        float _1366 = _1364 * (_1324.y + (-0.5));
        float _1367 = _1364 * (_1324.z + (-0.5));
        float _1374 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1331.x + (-0.5));
        float _1376 = _1374 * (_1331.y + (-0.5));
        float _1377 = _1374 * (_1331.z + (-0.5));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = _1345 * 0.5;
        float _1382 = _1355 * 0.5;
        float _1383 = _1365 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1398 = (dot(vec3(_889, _890, _891), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1408 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4189 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1410 + 1.0))) + _1415) * _1378;
        float _1425 = _1346 * 0.5;
        float _1426 = _1356 * 0.5;
        float _1427 = _1366 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_889, _890, _891), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4222 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1452 + 1.0))) + _1457) * _1379;
        float _1467 = _1347 * 0.5;
        float _1468 = _1357 * 0.5;
        float _1469 = _1367 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_889, _890, _891), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4255 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1494 + 1.0))) + _1499) * _1380;
        _1516 = _1347;
        _1518 = _1346;
        _1519 = _1345;
        _1520 = _1357;
        _1521 = _1356;
        _1522 = _1355;
        _1523 = _1367;
        _1524 = _1366;
        _1525 = _1365;
        _1526 = _1380;
        _1527 = _1379;
        _1528 = _1378;
        _1529 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1530 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1531 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
    }
    else
    {
        _1516 = _1517;
        _1518 = _1517;
        _1519 = _1517;
        _1520 = _1517;
        _1521 = _1517;
        _1522 = _1517;
        _1523 = _1517;
        _1524 = _1517;
        _1525 = _1517;
        _1526 = _1517;
        _1527 = _1517;
        _1528 = _1517;
        _1529 = 0.0;
        _1530 = 0.0;
        _1531 = 0.0;
    }
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1557 = fma(_1186, cbModelParam._m0[30u].z, fma(_1182, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1178));
        float _1561 = fma(_1186, cbModelParam._m0[31u].z, fma(_1182, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1178));
        float _1565 = fma(_1186, cbModelParam._m0[32u].z, fma(_1182, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1178));
        float _1588 = _1178 + _889;
        float _1589 = _1182 + _890;
        float _1590 = _1186 + _891;
        float _1600 = fma(_1590, cbModelParam._m0[30u].z, fma(_1589, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1588)) - _1557;
        float _1601 = fma(_1590, cbModelParam._m0[31u].z, fma(_1589, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1588)) - _1561;
        float _1602 = fma(_1590, cbModelParam._m0[32u].z, fma(_1589, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1588)) - _1565;
        float _1606 = inversesqrt(dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602)));
        float _1619 = ((_1606 * _1600) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1557 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1620 = ((_1606 * _1601) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1561 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1621 = ((_1606 * _1602) / cbModelParam._m0[35u].z) + ((((((_1565 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        float _1656 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1623.x + (-0.5));
        float _1658 = _1656 * (_1623.y + (-0.5));
        float _1659 = _1656 * (_1623.z + (-0.5));
        float _1666 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1630.x + (-0.5));
        float _1668 = _1666 * (_1630.y + (-0.5));
        float _1669 = _1666 * (_1630.z + (-0.5));
        float _1676 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1637.x + (-0.5));
        float _1678 = _1676 * (_1637.y + (-0.5));
        float _1679 = _1676 * (_1637.z + (-0.5));
        float _1686 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1644.x + (-0.5));
        float _1688 = _1686 * (_1644.y + (-0.5));
        float _1689 = _1686 * (_1644.z + (-0.5));
        float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1691 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1692 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1693 = _1657 * 0.5;
        float _1694 = _1667 * 0.5;
        float _1695 = _1677 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_889, _890, _891), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1690 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4318 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1720 + 1.0))) + _1725) * _1690;
        float _1735 = _1658 * 0.5;
        float _1736 = _1668 * 0.5;
        float _1737 = _1678 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_889, _890, _891), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1691 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4351 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1762 + 1.0))) + _1767) * _1691;
        float _1777 = _1659 * 0.5;
        float _1778 = _1669 * 0.5;
        float _1779 = _1679 * 0.5;
        float _1780 = dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779));
        float _1785 = (_1780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1780);
        float _1793 = (dot(vec3(_889, _890, _891), vec3(_1785 * _1777, _1785 * _1778, _1785 * _1779)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779)) / (_1692 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1804 = _1803 * 2.0;
        float _1808 = (1.0 - _1803) / (_1803 + 1.0);
        float _4384 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1818 = ((((1.0 - _1809) * (_1804 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1804 + 1.0))) + _1809) * _1692;
        _1826 = _1659;
        _1827 = _1658;
        _1828 = _1657;
        _1829 = _1669;
        _1830 = _1668;
        _1831 = _1667;
        _1832 = _1679;
        _1833 = _1678;
        _1834 = _1677;
        _1835 = _1692;
        _1836 = _1691;
        _1837 = _1690;
        _1838 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
        _1839 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
        _1840 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
    }
    else
    {
        _1826 = _1517;
        _1827 = _1517;
        _1828 = _1517;
        _1829 = _1517;
        _1830 = _1517;
        _1831 = _1517;
        _1832 = _1517;
        _1833 = _1517;
        _1834 = _1517;
        _1835 = _1517;
        _1836 = _1517;
        _1837 = _1517;
        _1838 = 0.0;
        _1839 = 0.0;
        _1840 = 0.0;
    }
    float _1850 = (cbModelParam._m0[1u].x * (_1838 - _1529)) + _1529;
    float _1851 = (cbModelParam._m0[1u].x * (_1839 - _1530)) + _1530;
    float _1852 = (cbModelParam._m0[1u].x * (_1840 - _1531)) + _1531;
    float _1873 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1850));
    float _1894 = _1124 * 0.5;
    float _1895 = _1125 * 0.5;
    float _1896 = _1126 * 0.5;
    float _1897 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1828, _1831, _1834, _1837));
    float _1900 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1827, _1830, _1833, _1836));
    float _1903 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1826, _1829, _1832, _1835));
    float _1937;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1910 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1516, _1520, _1523, _1526));
        float _1914 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1518, _1521, _1524, _1527));
        float _1918 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1519, _1522, _1525, _1528));
        float _1925 = dot(vec4(cbModelParam._m0[39u]), vec4(_1894, _1895, _1896, 1.0));
        _1937 = dot(vec3(isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1925) ? 0.0 : (isnan(0.0) ? _1925 : max(0.0, _1925))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1937 = 1.0;
    }
    float _1948;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1939 = dot(vec4(cbModelParam._m0[40u]), vec4(_1894, _1895, _1896, 1.0));
        _1948 = dot(vec3(isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1939) ? 0.0 : (isnan(0.0) ? _1939 : max(0.0, _1939))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1948 = 1.0;
    }
    float _1952 = (_1948 * cbModelParam._m0[1u].x) + (_1937 * (1.0 - cbModelParam._m0[1u].x));
    float _1962 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1031);
    float _1963 = isnan(_1962) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1962 : min(cbModelParam._m0[25u].z, _1962));
    float _2043;
    float _2045;
    float _2047;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2010 = fma(_1186, cbModelParam._m0[13u].z, fma(_1182, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1178)) + cbModelParam._m0[13u].w;
        float _2014 = fma(_1186, cbModelParam._m0[14u].z, fma(_1182, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1178)) + cbModelParam._m0[14u].w;
        float _2018 = fma(_1186, cbModelParam._m0[15u].z, fma(_1182, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1178)) + cbModelParam._m0[15u].w;
        float _2021 = fma(_1126, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124));
        float _2024 = fma(_1126, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124));
        float _2027 = fma(_1126, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124));
        float _2055;
        if (_2021 > 0.0)
        {
            _2055 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2055 = frontier_phi_17_15_ladder;
        }
        float _2278;
        if (_2024 > 0.0)
        {
            _2278 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2278 = frontier_phi_26_22_ladder;
        }
        float _2535;
        if (_2027 > 0.0)
        {
            _2535 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2535 = frontier_phi_38_33_ladder;
        }
        float _2537 = isnan(_2278) ? _2055 : (isnan(_2055) ? _2278 : min(_2055, _2278));
        float _2538 = isnan(_2535) ? _2537 : (isnan(_2537) ? _2535 : min(_2537, _2535));
        float _2542 = (_2538 * _2021) + _2010;
        float _2543 = (_2538 * _2024) + _2014;
        float _2544 = (_2538 * _2027) + _2018;
        float _2545 = _2538 * 9.9999997473787516355514526367188e-05;
        float _2547 = (-1.0) - _2545;
        float _2549 = _2545 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2544 > _2549) || ((_2544 < _2547) || ((_2543 > _2549) || ((_2543 < _2547) || ((_2542 < _2547) || (_2542 > _2549))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2672 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2544, cbModelParam._m0[9u].z, fma(_2543, cbModelParam._m0[9u].y, _2542 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2544, cbModelParam._m0[10u].z, fma(_2543, cbModelParam._m0[10u].y, _2542 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2544, cbModelParam._m0[11u].z, fma(_2543, cbModelParam._m0[11u].y, _2542 * cbModelParam._m0[11u].x))), _1963);
            frontier_phi_16_38_ladder = _2672.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2672.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2672.x * cbModelParam._m0[1u].y;
        }
        _2043 = frontier_phi_16_38_ladder_2;
        _2045 = frontier_phi_16_38_ladder_1;
        _2047 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2031 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1124, _1125, _1126), _1963);
        _2043 = _2031.x * cbModelParam._m0[1u].y;
        _2045 = _2031.y * cbModelParam._m0[1u].y;
        _2047 = _2031.z * cbModelParam._m0[1u].y;
    }
    float _2051 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1031);
    float _2052 = isnan(_2051) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2051 : min(cbModelParam._m0[25u].w, _2051));
    float _2141;
    float _2143;
    float _2145;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2105 = fma(_1186, cbModelParam._m0[21u].z, fma(_1182, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1178)) + cbModelParam._m0[21u].w;
        float _2109 = fma(_1186, cbModelParam._m0[22u].z, fma(_1182, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1178)) + cbModelParam._m0[22u].w;
        float _2113 = fma(_1186, cbModelParam._m0[23u].z, fma(_1182, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1178)) + cbModelParam._m0[23u].w;
        float _2116 = fma(_1126, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124));
        float _2119 = fma(_1126, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124));
        float _2122 = fma(_1126, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124));
        float _2283;
        if (_2116 > 0.0)
        {
            _2283 = abs((1.0 - _2105) / _2116);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2105 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2283 = frontier_phi_28_24_ladder;
        }
        float _2562;
        if (_2119 > 0.0)
        {
            _2562 = abs((1.0 - _2109) / _2119);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2109 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2562 = frontier_phi_40_35_ladder;
        }
        float _2775;
        if (_2122 > 0.0)
        {
            _2775 = abs((1.0 - _2113) / _2122);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2113 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2775 = frontier_phi_49_46_ladder;
        }
        float _2777 = isnan(_2562) ? _2283 : (isnan(_2283) ? _2562 : min(_2283, _2562));
        float _2778 = isnan(_2775) ? _2777 : (isnan(_2777) ? _2775 : min(_2777, _2775));
        float _2782 = (_2778 * _2116) + _2105;
        float _2783 = (_2778 * _2119) + _2109;
        float _2784 = (_2778 * _2122) + _2113;
        float _2785 = _2778 * 9.9999997473787516355514526367188e-05;
        float _2786 = (-1.0) - _2785;
        float _2788 = _2785 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2784 > _2788) || ((_2784 < _2786) || ((_2783 > _2788) || ((_2783 < _2786) || ((_2782 < _2786) || (_2782 > _2788))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2983 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2784, cbModelParam._m0[17u].z, fma(_2783, cbModelParam._m0[17u].y, _2782 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2784, cbModelParam._m0[18u].z, fma(_2783, cbModelParam._m0[18u].y, _2782 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2784, cbModelParam._m0[19u].z, fma(_2783, cbModelParam._m0[19u].y, _2782 * cbModelParam._m0[19u].x))), _2052);
            frontier_phi_25_49_ladder = _2983.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2983.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2983.x * cbModelParam._m0[1u].z;
        }
        _2141 = frontier_phi_25_49_ladder_2;
        _2143 = frontier_phi_25_49_ladder_1;
        _2145 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2125 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1124, _1125, _1126), _2052);
        _2141 = _2125.x * cbModelParam._m0[1u].z;
        _2143 = _2125.y * cbModelParam._m0[1u].z;
        _2145 = _2125.z * cbModelParam._m0[1u].z;
    }
    float _2158 = (((_1149 * _1101) + _1150) * _1116) * ((cbModelParam._m0[1u].w * (_2141 - _2043)) + _2043);
    float _2160 = (((_1149 * _1103) + _1150) * _1116) * ((cbModelParam._m0[1u].w * (_2143 - _2045)) + _2045);
    float _2162 = (((_1149 * _1104) + _1150) * _1116) * ((cbModelParam._m0[1u].w * (_2145 - _2047)) + _2047);
    float _2165 = fma(_2162, cbSceneParam._m0[89u].z, fma(_2160, cbSceneParam._m0[89u].y, _2158 * cbSceneParam._m0[89u].x));
    float _2168 = fma(_2162, cbSceneParam._m0[90u].z, fma(_2160, cbSceneParam._m0[90u].y, _2158 * cbSceneParam._m0[90u].x));
    float _2171 = fma(_2162, cbSceneParam._m0[91u].z, fma(_2160, cbSceneParam._m0[91u].y, _2158 * cbSceneParam._m0[91u].x));
    vec4 _2179 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_989, _990));
    float _2181 = _2179.w;
    float _2193 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2181);
    float _2194 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2181);
    float _2195 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2181);
    uvec4 _2199 = floatBitsToUint(cbInstanceData._m0[_1044 + 5u]);
    uint _2201 = _2199.x * 14u;
    uint _2202 = _2201 + 13u;
    float _2209 = _1116 + (-1.0);
    float _2214 = (cbLight._m0[_2202].x * _2209) + 1.0;
    float _2215 = (cbLight._m0[_2202].y * _2209) + 1.0;
    float _2216 = (cbLight._m0[_2202].z * _2209) + 1.0;
    float _2217 = (cbLight._m0[_2202].w * _2209) + 1.0;
    uint _2218 = _2201 + 5u;
    float _2224 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
    uint _2228 = _2201 + 4u;
    float _2237 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
    uint _2241 = _2201 | 1u;
    float _2252 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_889, _890, _891));
    float _2255 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_889, _890, _891));
    float _4520 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _4531 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2260 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * 0.3183098733425140380859375;
    float _2262 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * 0.3183098733425140380859375;
    float _2269 = ((cbLight._m0[_2218].x * _2224) * _2262) + (((cbLight._m0[_2228].x * _2193) * _2237) * _2260);
    float _2270 = ((_2224 * cbLight._m0[_2218].y) * _2262) + (((cbLight._m0[_2228].y * _2194) * _2237) * _2260);
    float _2271 = ((_2224 * cbLight._m0[_2218].z) * _2262) + (((cbLight._m0[_2228].z * _2195) * _2237) * _2260);
    uvec4 _2275 = floatBitsToUint(cbLight._m0[_2201 + 12u]);
    bool _2277 = _2275.x == 0u;
    float _2288;
    float _2290;
    float _2292;
    if (_2277)
    {
        _2288 = _2269;
        _2290 = _2270;
        _2292 = _2271;
    }
    else
    {
        uint _2296 = _2201 + 6u;
        float _2312 = (dot(vec3(cbLight._m0[_2201 + 2u].xyz), vec3(_889, _890, _891)) * 0.5) + 0.5;
        float _2313 = _2312 * _2312;
        float _4542 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2314 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2315 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2288 = (((cbLight._m0[_2296].x * 0.3183098733425140380859375) * _2314) * _2315) + _2269;
        _2290 = (((cbLight._m0[_2296].y * 0.3183098733425140380859375) * _2314) * _2315) + _2270;
        _2292 = (((cbLight._m0[_2296].z * 0.3183098733425140380859375) * _2314) * _2315) + _2271;
    }
    bool _2295 = _2275.y == 0u;
    float _2333;
    float _2335;
    float _2337;
    if (_2295)
    {
        _2333 = _2288;
        _2335 = _2290;
        _2337 = _2292;
    }
    else
    {
        uint _2506 = _2201 + 7u;
        float _2522 = (dot(vec3(cbLight._m0[_2201 + 3u].xyz), vec3(_889, _890, _891)) * 0.5) + 0.5;
        float _2523 = _2522 * _2522;
        float _4558 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2524 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2525 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2333 = (((cbLight._m0[_2506].x * 0.3183098733425140380859375) * _2524) * _2525) + _2288;
        _2335 = (((cbLight._m0[_2506].y * 0.3183098733425140380859375) * _2524) * _2525) + _2290;
        _2337 = (((cbLight._m0[_2506].z * 0.3183098733425140380859375) * _2524) * _2525) + _2292;
    }
    uint _2340 = _2201 + 8u;
    float _2353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _1031) * 0.949999988079071044921875);
    float _2354 = _2353 * _2353;
    float _2355 = cbLight._m0[_2201].x + _969;
    float _2356 = cbLight._m0[_2201].y + _970;
    float _2357 = cbLight._m0[_2201].z + _971;
    float _2361 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
    float _2362 = _2361 * _2355;
    float _2363 = _2361 * _2356;
    float _2364 = _2361 * _2357;
    float _2365 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2201].xyz));
    float _4574 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _4585 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2369 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2370 = dot(vec3(_889, _890, _891), vec3(_2362, _2363, _2364));
    float _4596 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2374 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2362, _2363, _2364));
    float _4607 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2378 = _2354 * _2354;
    float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
    float _2390 = exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0);
    float _2391 = 0.959999978542327880859375 - _1098;
    float _2393 = 0.959999978542327880859375 - _1099;
    float _2394 = 0.959999978542327880859375 - _1100;
    float _2401 = 1.0 - _2354;
    float _2412 = (0.5 / (((_2369 * ((_2368 * _2401) + _2354)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2401) + _2354) * _2368))) * _2368;
    float _4618 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2414 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
    uint _2428 = _2201 + 9u;
    float _2439 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _1031) * 0.949999988079071044921875);
    float _2440 = _2439 * _2439;
    float _2441 = cbLight._m0[_2241].x + _969;
    float _2442 = cbLight._m0[_2241].y + _970;
    float _2443 = cbLight._m0[_2241].z + _971;
    float _2447 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
    float _2448 = _2447 * _2441;
    float _2449 = _2447 * _2442;
    float _2450 = _2447 * _2443;
    float _2451 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2241].xyz));
    float _4629 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2454 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2455 = dot(vec3(_889, _890, _891), vec3(_2448, _2449, _2450));
    float _4640 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2459 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2448, _2449, _2450));
    float _4651 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2463 = _2440 * _2440;
    float _2467 = ((_2458 * _2458) * (_2463 + (-1.0))) + 1.0;
    float _2474 = exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0);
    float _2481 = 1.0 - _2440;
    float _2491 = (0.5 / (((_2369 * ((_2454 * _2481) + _2440)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2481) + _2440) * _2454))) * _2454;
    float _4662 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2493 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2463 / ((_2467 * _2467) * 3.141590118408203125));
    float _2503 = (((((_2474 * _2391) + _1101) * cbLight._m0[_2428].x) * _2493) * _2224) + ((((cbLight._m0[_2340].x * _2193) * ((_2390 * _2391) + _1101)) * _2414) * _2237);
    float _2504 = (((((_2474 * _2393) + _1103) * cbLight._m0[_2428].y) * _2493) * _2224) + ((((cbLight._m0[_2340].y * _2194) * ((_2390 * _2393) + _1103)) * _2414) * _2237);
    float _2505 = (((((_2474 * _2394) + _1104) * cbLight._m0[_2428].z) * _2493) * _2224) + ((((cbLight._m0[_2340].z * _2195) * ((_2390 * _2394) + _1104)) * _2414) * _2237);
    float _2567;
    float _2569;
    float _2571;
    if (_2277)
    {
        _2567 = _2503;
        _2569 = _2504;
        _2571 = _2505;
    }
    else
    {
        uint _2573 = _2201 + 2u;
        uint _2577 = _2201 + 10u;
        float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2573].w)) * _1031) * 0.949999988079071044921875);
        float _2592 = _2591 * _2591;
        float _2593 = cbLight._m0[_2573].x + _969;
        float _2594 = cbLight._m0[_2573].y + _970;
        float _2595 = cbLight._m0[_2573].z + _971;
        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
        float _2600 = _2599 * _2593;
        float _2601 = _2599 * _2594;
        float _2602 = _2599 * _2595;
        float _2603 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2573].xyz));
        float _4673 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2607 = dot(vec3(_889, _890, _891), vec3(_2600, _2601, _2602));
        float _4684 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2611 = dot(vec3(cbLight._m0[_2573].xyz), vec3(_2600, _2601, _2602));
        float _4695 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2615 = _2592 * _2592;
        float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
        float _2626 = exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0);
        float _2633 = 1.0 - _2592;
        float _2643 = (0.5 / (((_2369 * ((_2606 * _2633) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2633) + _2592) * _2606))) * _2606;
        float _4706 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2645 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
        float _2646 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2567 = (((((_2626 * _2391) + _1101) * cbLight._m0[_2577].x) * _2645) * _2646) + _2503;
        _2569 = (((((_2626 * _2393) + _1103) * cbLight._m0[_2577].y) * _2645) * _2646) + _2504;
        _2571 = (((((_2626 * _2394) + _1104) * cbLight._m0[_2577].z) * _2645) * _2646) + _2505;
    }
    float _2681;
    float _2683;
    float _2685;
    if (_2295)
    {
        _2681 = _2567;
        _2683 = _2569;
        _2685 = _2571;
    }
    else
    {
        uint _2692 = _2201 + 3u;
        uint _2696 = _2201 + 11u;
        float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2692].w)) * _1031) * 0.949999988079071044921875);
        float _2711 = _2710 * _2710;
        float _2712 = cbLight._m0[_2692].x + _969;
        float _2713 = cbLight._m0[_2692].y + _970;
        float _2714 = cbLight._m0[_2692].z + _971;
        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
        float _2719 = _2718 * _2712;
        float _2720 = _2718 * _2713;
        float _2721 = _2718 * _2714;
        float _2722 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2692].xyz));
        float _4722 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2726 = dot(vec3(_889, _890, _891), vec3(_2719, _2720, _2721));
        float _4733 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2730 = dot(vec3(cbLight._m0[_2692].xyz), vec3(_2719, _2720, _2721));
        float _4744 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2734 = _2711 * _2711;
        float _2738 = ((_2729 * _2729) * (_2734 + (-1.0))) + 1.0;
        float _2745 = exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0);
        float _2752 = 1.0 - _2711;
        float _2762 = (0.5 / (((_2369 * ((_2725 * _2752) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2369 * _2752) + _2711) * _2725))) * _2725;
        float _4755 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2764 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2734 / ((_2738 * _2738) * 3.141590118408203125));
        float _2765 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2681 = (((((_2745 * _2391) + _1101) * cbLight._m0[_2696].x) * _2764) * _2765) + _2567;
        _2683 = (((((_2745 * _2393) + _1103) * cbLight._m0[_2696].y) * _2764) * _2765) + _2569;
        _2685 = (((((_2745 * _2394) + _1104) * cbLight._m0[_2696].z) * _2764) * _2765) + _2571;
    }
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    if (_2199.y == 0u)
    {
        float _2840 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2841 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2840;
        float _2842 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2840;
        float _2843 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2840;
        uvec4 _2855 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2856 = _2855.x;
        uint _2867 = uint((float(_2855.y) * floor(float(uint(cbSceneParam._m0[85u].y * _990) / _2856))) + floor(float(uint(cbSceneParam._m0[85u].x * _989) / _2856)));
        float _2877 = (log2(_2843 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2878 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        uint _2881 = uint(isnan(14.0) ? _2878 : (isnan(_2878) ? 14.0 : min(_2878, 14.0)));
        uvec4 _2886 = texelFetch(g_lightClusterGridBuffer, int(((_2881 << 2u) + (_2867 << 6u)) >> 2u));
        uint _2887 = _2886.x;
        uint _2888 = _2855.z;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        if (((((1u << ((_2888 >> 4u) & 15u)) + 4294967295u) & _2887) == 0u) || ((_2888 & 240u) == 0u))
        {
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
        }
        else
        {
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _2999;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            uint _3147 = 0u;
            uint _3156;
            bool _3157;
            for (;;)
            {
                _3156 = texelFetch(g_lightClassification, int((((_2881 << 5u) + (_2867 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                _3157 = _3156 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3157)
                {
                    frontier_phi_66_pred = _3141;
                    frontier_phi_66_pred_1 = _3146;
                    frontier_phi_66_pred_2 = _3145;
                    frontier_phi_66_pred_3 = _3144;
                    frontier_phi_66_pred_4 = _3143;
                    frontier_phi_66_pred_5 = _3142;
                }
                else
                {
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    uint _3292;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3145;
                    _3291 = _3146;
                    _3292 = _3156;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    for (;;)
                    {
                        uint _3296 = uint(findLSB(_3292)) + (_3147 << 5u);
                        uint _3293 = (_3292 + 4294967295u) & _3292;
                        uint _3298 = _3296 * 48u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3298)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 3u)).x));
                        uint _3318 = (_3296 * 48u) + 4u;
                        vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 3u)).x));
                        uint _3337 = (_3296 * 48u) + 8u;
                        vec3 _3348 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3337)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 2u)).x));
                        float _3352 = _3312.x - _2841;
                        float _3353 = _3312.y - _2842;
                        float _3354 = _3312.z - _2843;
                        float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                        float _3358 = inversesqrt(_3355);
                        float _3359 = _3358 * _3352;
                        float _3360 = _3358 * _3353;
                        float _3361 = _3358 * _3354;
                        float _3362 = dot(vec3(_1012, _1015, _1018), vec3(_3359, _3360, _3361));
                        float _3367 = 1.0 - (_3355 * _3312.w);
                        float _4781 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3368 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3369 = sqrt(_3355) * _3331.w;
                        float _3372 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                        float _3373 = _3372 * _3372;
                        float _3376 = ((1.0 - _3373) * _3362) + _3373;
                        float _3379 = _3369 * _3369;
                        float _3383 = ((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3368) / ((_3379 * 0.699999988079071044921875) + 1.0);
                        float _3387 = (-0.0) - _2841;
                        float _3388 = (-0.0) - _2842;
                        float _3389 = (-0.0) - _2843;
                        float _3393 = inversesqrt(dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389)));
                        float _3394 = _3393 * _3387;
                        float _3395 = _3393 * _3388;
                        float _3396 = _3393 * _3389;
                        float _3404 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                        float _3405 = 1.0 - _1132;
                        float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                        float _3413 = _3412 * _3412;
                        float _3414 = _3413 * _3413;
                        float _3415 = _3394 + _3359;
                        float _3416 = _3395 + _3360;
                        float _3417 = _3396 + _3361;
                        float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                        float _3425 = dot(vec3(_1012, _1015, _1018), vec3(_3394, _3395, _3396));
                        float _4797 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3429 = dot(vec3(_1012, _1015, _1018), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                        float _4808 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3432 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                        float _3437 = _3372 * _3413;
                        float _3438 = _3437 * _3437;
                        float _3441 = ((1.0 - _3438) * _3362) + _3438;
                        float _4819 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3442 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3443 = 1.0 - _3413;
                        float _3453 = (0.5 / (((_3442 * ((_3428 * _3443) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3413) * _3428))) * _3442;
                        float _4830 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3464 = (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) / ((_3436 * _3436) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125))) * _3368;
                        _3216 = (_3383 * _3331.x) + _3289;
                        _3217 = (_3383 * _3331.y) + _3290;
                        _3218 = (_3383 * _3331.z) + _3291;
                        _3213 = (_3464 * _3348.x) + _3286;
                        _3214 = (_3464 * _3348.y) + _3287;
                        _3215 = (_3464 * _3348.z) + _3288;
                        if (_3293 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3217;
                            _3291 = _3218;
                            _3292 = _3293;
                        }
                    }
                    frontier_phi_66_pred = _3213;
                    frontier_phi_66_pred_1 = _3218;
                    frontier_phi_66_pred_2 = _3217;
                    frontier_phi_66_pred_3 = _3216;
                    frontier_phi_66_pred_4 = _3215;
                    frontier_phi_66_pred_5 = _3214;
                }
                _2989 = frontier_phi_66_pred;
                _2999 = frontier_phi_66_pred_1;
                _2997 = frontier_phi_66_pred_2;
                _2995 = frontier_phi_66_pred_3;
                _2993 = frontier_phi_66_pred_4;
                _2991 = frontier_phi_66_pred_5;
                uint _3148 = _3147 + 1u;
                if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3141 = _2989;
                    _3142 = _2991;
                    _3143 = _2993;
                    _3144 = _2995;
                    _3145 = _2997;
                    _3146 = _2999;
                    _3147 = _3148;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
        }
        uvec4 _3002 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3003 = _3002.z;
        uint _3005 = (_3003 >> 8u) & 15u;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        if (((4294967295u << _3005) & _2887) == 0u)
        {
            _3109 = _2988;
            _3111 = _2990;
            _3113 = _2992;
            _3115 = _2994;
            _3117 = _2996;
            _3119 = _2998;
        }
        else
        {
            float _3134 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
            float _3135 = _3134 * _2841;
            float _3136 = _3134 * _2842;
            float _3137 = _3134 * _2843;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3005 < ((_3003 >> 12u) & 15u))
            {
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3269 = _2988;
                float _3270 = _2990;
                float _3271 = _2992;
                float _3272 = _2994;
                float _3273 = _2996;
                float _3274 = _2998;
                uint _3275 = _3005;
                uint _3284;
                bool _3285;
                for (;;)
                {
                    _3284 = texelFetch(g_lightClassification, int((((_2881 << 5u) + (_2867 << 9u)) + (_3275 << 2u)) >> 2u)).x;
                    _3285 = _3284 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3285)
                    {
                        frontier_phi_77_pred = _3274;
                        frontier_phi_77_pred_1 = _3273;
                        frontier_phi_77_pred_2 = _3272;
                        frontier_phi_77_pred_3 = _3271;
                        frontier_phi_77_pred_4 = _3270;
                        frontier_phi_77_pred_5 = _3269;
                    }
                    else
                    {
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3491 = _3269;
                        float _3492 = _3270;
                        float _3493 = _3271;
                        float _3494 = _3272;
                        float _3495 = _3273;
                        float _3496 = _3274;
                        uint _3497 = _3284;
                        uint _3498;
                        vec4 _3523;
                        float _3524;
                        vec4 _3539;
                        vec3 _3551;
                        vec4 _3566;
                        vec4 _3581;
                        float _3627;
                        bool _3628;
                        for (;;)
                        {
                            uint _3508 = ((_3275 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3497));
                            _3498 = (_3497 + 4294967295u) & _3497;
                            uint _3510 = _3508 * 40u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            _3524 = _3523.w;
                            uint _3526 = (_3508 * 40u) + 4u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3508 * 40u) + 8u;
                            _3551 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x));
                            uint _3553 = (_3508 * 40u) + 16u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3568 = (_3508 * 40u) + 20u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3508 * 40u) + 24u;
                            vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3602 = (_3508 * 40u) + 28u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            _3627 = fma(_2843, _3615.z, fma(_2842, _3615.y, _3615.x * _2841)) + _3615.w;
                            _3628 = !((fma(_2843, _3596.z, fma(_2842, _3596.y, _3596.x * _2841)) + _3596.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3628)
                            {
                                float _3655 = _3523.x - _2841;
                                float _3656 = _3523.y - _2842;
                                float _3657 = _3523.z - _2843;
                                float _3658 = dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657));
                                float _3661 = inversesqrt(_3658);
                                float _3662 = _3661 * _3655;
                                float _3663 = _3661 * _3656;
                                float _3664 = _3661 * _3657;
                                float _3668 = 1.0 - (_3658 / (_3524 * _3524));
                                float _4841 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3673 = sqrt(_3658) * _3539.w;
                                float _3675 = 1.39999997615814208984375 / (_3673 + 1.39999997615814208984375);
                                float _3676 = _3675 * _3675;
                                float _3679 = ((1.0 - _3676) * dot(vec3(_3662, _3663, _3664), vec3(_1012, _1015, _1018))) + _3676;
                                float _3682 = _3673 * _3673;
                                float _3686 = (fma(_2843, _3566.z, fma(_2842, _3566.y, _3566.x * _2841)) + _3566.w) / _3627;
                                float _3687 = (fma(_2843, _3581.z, fma(_2842, _3581.y, _3581.x * _2841)) + _3581.w) / _3627;
                                float _3691 = 1.0 - dot(vec2(_3686, _3687), vec2(_3686, _3687));
                                float _4857 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3693 = _3692 * (((isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0))) * _3669) / ((_3682 * 0.699999988079071044921875) + 1.0));
                                float _3705 = exp2(log2(1.0 / ((_3682 * 3.5) + 5.0)) * 0.25);
                                float _3706 = 1.0 - _1132;
                                float _3713 = sqrt(1.0 - ((1.0 - (_3706 * _3706)) * (1.0 - (_3705 * _3705))));
                                float _3714 = _3713 * _3713;
                                float _3715 = _3714 * _3714;
                                float _3716 = _3662 - _3135;
                                float _3717 = _3663 - _3136;
                                float _3718 = _3664 - _3137;
                                float _3722 = inversesqrt(dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718)));
                                float _3726 = dot(vec3(_1012, _1015, _1018), vec3((-0.0) - _3135, (-0.0) - _3136, (-0.0) - _3137));
                                float _4868 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3730 = dot(vec3(_1012, _1015, _1018), vec3(_3722 * _3716, _3722 * _3717, _3722 * _3718));
                                float _4879 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3733 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3737 = ((_3733 * _3733) * (_3715 + (-1.0))) + 1.0;
                                float _3738 = _3675 * _3714;
                                float _3739 = _3738 * _3738;
                                float _3745 = ((1.0 - _3739) * dot(vec3(_1012, _1015, _1018), vec3(_3662, _3663, _3664))) + _3739;
                                float _4890 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3747 = 1.0 - _3714;
                                float _3757 = (0.5 / (((_3746 * ((_3729 * _3747) + _3714)) + 9.9999999392252902907785028219223e-09) + (((_3746 * _3747) + _3714) * _3729))) * _3746;
                                float _4901 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3767 = (_3692 * _3669) * (((_3715 * 3.1415927410125732421875) * (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) / ((_3737 * _3737) * ((_3682 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3693 * _3539.y;
                                frontier_phi_83_pred_1 = _3693 * _3539.x;
                                frontier_phi_83_pred_2 = _3767 * _3551.z;
                                frontier_phi_83_pred_3 = _3767 * _3551.y;
                                frontier_phi_83_pred_4 = _3767 * _3551.x;
                                frontier_phi_83_pred_5 = _3693 * _3539.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3775 = frontier_phi_83_pred;
                            _3774 = frontier_phi_83_pred_1;
                            _3773 = frontier_phi_83_pred_2;
                            _3772 = frontier_phi_83_pred_3;
                            _3771 = frontier_phi_83_pred_4;
                            _3776 = frontier_phi_83_pred_5;
                            _3481 = _3774 + _3494;
                            _3482 = _3775 + _3495;
                            _3483 = _3776 + _3496;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            if (_3498 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3498;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3483;
                        frontier_phi_77_pred_1 = _3482;
                        frontier_phi_77_pred_2 = _3481;
                        frontier_phi_77_pred_3 = _3480;
                        frontier_phi_77_pred_4 = _3479;
                        frontier_phi_77_pred_5 = _3478;
                    }
                    _3120 = frontier_phi_77_pred;
                    _3118 = frontier_phi_77_pred_1;
                    _3116 = frontier_phi_77_pred_2;
                    _3114 = frontier_phi_77_pred_3;
                    _3112 = frontier_phi_77_pred_4;
                    _3110 = frontier_phi_77_pred_5;
                    uint _3276 = _3275 + 1u;
                    if (_3276 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3269 = _3110;
                        _3270 = _3112;
                        _3271 = _3114;
                        _3272 = _3116;
                        _3273 = _3118;
                        _3274 = _3120;
                        _3275 = _3276;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3114;
                frontier_phi_58_59_ladder_1 = _3120;
                frontier_phi_58_59_ladder_2 = _3118;
                frontier_phi_58_59_ladder_3 = _3116;
                frontier_phi_58_59_ladder_4 = _3112;
                frontier_phi_58_59_ladder_5 = _3110;
            }
            else
            {
                frontier_phi_58_59_ladder = _2992;
                frontier_phi_58_59_ladder_1 = _2998;
                frontier_phi_58_59_ladder_2 = _2996;
                frontier_phi_58_59_ladder_3 = _2994;
                frontier_phi_58_59_ladder_4 = _2990;
                frontier_phi_58_59_ladder_5 = _2988;
            }
            _3109 = frontier_phi_58_59_ladder_5;
            _3111 = frontier_phi_58_59_ladder_4;
            _3113 = frontier_phi_58_59_ladder;
            _3115 = frontier_phi_58_59_ladder_3;
            _3117 = frontier_phi_58_59_ladder_2;
            _3119 = frontier_phi_58_59_ladder_1;
        }
        float _3124 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _2900 = (_3124 * _3115) + _2333;
        _2902 = (_3124 * _3117) + _2335;
        _2904 = (_3124 * _3119) + _2337;
        _2906 = ((_3109 * _1101) * _3124) + _2681;
        _2908 = ((_3111 * _1103) * _3124) + _2683;
        _2910 = ((_3113 * _1104) * _3124) + _2685;
    }
    else
    {
        _2900 = _2333;
        _2902 = _2335;
        _2904 = _2337;
        _2906 = _2681;
        _2908 = _2683;
        _2910 = _2685;
    }
    float _4917 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _4928 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _4939 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _2927 = ((isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2900 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1116))) + ((_2906 + ((isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0))) * _1952)) * cbPerFrame._m0[3u].x);
    float _2928 = ((isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2902 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1116))) + ((_2908 + ((isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0))) * _1952)) * cbPerFrame._m0[3u].x);
    float _2929 = ((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2904 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1116))) + ((_2910 + ((isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0))) * _1952)) * cbPerFrame._m0[3u].x);
    uint _2930 = _1044 + 6u;
    float _2938 = _989 / cbSceneParam._m0[86u].x;
    float _2939 = _990 / cbSceneParam._m0[86u].y;
    vec4 _2953 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2938, _2939, (log2((isnan(cbSceneParam._m0[77u].w) ? _912 : (isnan(_912) ? cbSceneParam._m0[77u].w : min(_912, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2955 = _2953.x;
    float _2956 = _2953.y;
    float _2957 = _2953.z;
    float _2958 = _2953.w;
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    if (_912 > cbSceneParam._m0[78u].w)
    {
        float _3013 = isnan(_912) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _912 : min(cbSceneParam._m0[80u].w, _912));
        float _3014 = _3013 / _912;
        float _3025 = _3014 * _962;
        float _3026 = _963 * _3014;
        float _3027 = (-0.0) - _3026;
        float _3029 = _3014 * _964;
        float _3031 = (cbSceneParam._m0[77u].w * _3027) / _3013;
        float _3032 = _3031 + cbSceneParam._m0[79u].w;
        float _3033 = cbSceneParam._m0[79u].w - _3026;
        float _3039 = sqrt(((_3025 * _3025) + (_3026 * _3026)) + (_3029 * _3029));
        float _3042 = (1.0 - (cbSceneParam._m0[77u].w / _3013)) * _3039;
        float _3047 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3049 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3226;
        if (abs((_3027 - _3031) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3226 = ((((_3032 > 0.0) ? exp2(_3047 * _3032) : (2.0 - exp2(_3049 * _3032))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3042;
        }
        else
        {
            float _3170 = 1.0 / cbSceneParam._m0[80u].x;
            float _3171 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : max(_3032, _3033));
            float _3172 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : min(_3032, _3033));
            float _3181 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : min(_3171, 0.0));
            float _3182 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : min(_3172, 0.0));
            _3226 = ((abs(_3039 / _3027) * cbSceneParam._m0[80u].y) * ((((_3181 - _3182) * 2.0) - ((exp2(_3047 * (isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0)))) - exp2(_3047 * (isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))))) * _3170)) - ((exp2(_3049 * _3181) - exp2(_3049 * _3182)) * _3170))) + (_3042 * cbSceneParam._m0[80u].z);
        }
        vec4 _3228 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2938, _2939, 1.0), 0.0);
        float _3237 = exp2((_3226 * (-1.44269502162933349609375)) * (1.0 - _3228.w));
        float _3238 = log2(_3237);
        float _3254 = log2(_2958);
        _3051 = (exp2(_3254 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].x)) * _3228.x) / cbSceneParam._m0[78u].x)) + _2955;
        _3053 = (exp2(_3254 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].y)) * _3228.y) / cbSceneParam._m0[78u].y)) + _2956;
        _3055 = (exp2(_3254 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].z)) * _3228.z) / cbSceneParam._m0[78u].z)) + _2957;
        _3057 = _3237 * _2958;
    }
    else
    {
        _3051 = _2955;
        _3053 = _2956;
        _3055 = _2957;
        _3057 = _2958;
    }
    bool _3264;
    vec4 _3067;
    vec4 _3089;
    float _3091;
    float _3095;
    float _3096;
    float _3097;
    float _3098;
    bool _3108;
    for (;;)
    {
        _3067 = cbMatDynParam._m0[0u];
        float _3069 = roundEven(_3067.y);
        bool _3070 = _3069 == 3.0;
        float _3071 = log2(_3057);
        float _3078 = exp2(_3071 * cbSceneParam._m0[78u].x) * _2927;
        float _3079 = exp2(_3071 * cbSceneParam._m0[78u].y) * _2928;
        float _3080 = exp2(_3071 * cbSceneParam._m0[78u].z) * _2929;
        float _3087 = _978 + (-0.5);
        _3089 = cbMtdParam._m0[1u];
        _3091 = _3089.y * _3087;
        float _3094 = (_3069 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3095 = _3094 * (_3070 ? _3078 : (_3078 + (cbSceneParam._m0[72u].w * _3051)));
        _3096 = _3094 * (_3070 ? _3079 : (_3079 + (cbSceneParam._m0[72u].w * _3053)));
        _3097 = _3094 * (_3070 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3055)));
        _3098 = _3087 * 0.999000012874603271484375;
        _3108 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3108)
        {
            if ((cbInstanceData._m0[_1044 + 7u].x + _3098) < 0.5)
            {
                _3264 = true;
                break;
            }
        }
        uint _3205 = _1045 + uint(_3067.w);
        if ((cbInstanceData._m0[_3205].w < 1.0) && ((cbInstanceData._m0[_3205].w + _3098) < 0.5))
        {
            _3264 = true;
            break;
        }
        if ((_3091 + 1.0) < _3089.x)
        {
            _3264 = true;
            break;
        }
        _3264 = false;
        break;
    }
    float _3469;
    if (_3264)
    {
        discard_state = true;
        _3469 = 0.0;
    }
    else
    {
        _3469 = cbInstanceData._m0[_2930].w;
    }
    SV_Target.x = _3095;
    SV_Target.y = _3096;
    SV_Target.z = _3097;
    SV_Target.w = _3469;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2930].w;
    discard_exit();
}


