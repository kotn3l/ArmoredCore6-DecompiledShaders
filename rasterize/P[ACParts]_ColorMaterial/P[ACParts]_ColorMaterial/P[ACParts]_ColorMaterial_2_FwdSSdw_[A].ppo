#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_15;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1519;
float _3920;
float _3921;
float _3922;
float _3923;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = cbMtdParam._m0[25u].x + TEXCOORD.y;
    vec4 _283 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (_269 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _290 = log2(0.0);
    float _292 = exp2(_290 * cbMtdParam._m0[24u].y);
    float _296 = _292 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _292);
    float _297 = _292 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _292);
    float _298 = _292 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _292);
    float _299 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _300 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _301 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _302 = isnan(1.0) ? _299 : (isnan(_299) ? 1.0 : min(_299, 1.0));
    float _304 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    float _305 = isnan(1.0) ? _301 : (isnan(_301) ? 1.0 : min(_301, 1.0));
    vec4 _318 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _269) + cbTextureTilingScale._m0[0u].w));
    float _322 = _318.z;
    float _323 = _318.w;
    float _324 = 1.0 - _323;
    float _333 = exp2(log2((1.0 - (_324 * _322)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _334 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _335 = isnan(1.0) ? _334 : (isnan(_334) ? 1.0 : min(_334, 1.0));
    float _344 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_324 * _324) * _322))) * cbMtdParam._m0[26u].y);
    float _345 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    vec4 _358 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _361 = _358.y;
    float _364 = (_361 * ((isnan(1.0) ? _345 : (isnan(_345) ? 1.0 : min(_345, 1.0))) - _323)) + _323;
    float _367 = (_358.x + (-0.02500000037252902984619140625)) * 8.0;
    float _371 = roundEven(5.0 - _367);
    float _372 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _373 = isnan(4.0) ? _372 : (isnan(_372) ? 4.0 : min(_372, 4.0));
    float _386 = floor(_373);
    vec4 _389 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _269) + cbTextureTilingScale._m0[10u].w, _386));
    float _210[6];
    float _211[6];
    float _212[6];
    _210[0u] = cbMtdParam._m0[12u].x;
    _211[0u] = cbMtdParam._m0[12u].y;
    _212[0u] = cbMtdParam._m0[12u].z;
    _210[1u] = cbMtdParam._m0[13u].x;
    _211[1u] = cbMtdParam._m0[13u].y;
    _212[1u] = cbMtdParam._m0[13u].z;
    _210[2u] = cbMtdParam._m0[14u].x;
    _211[2u] = cbMtdParam._m0[14u].y;
    _212[2u] = cbMtdParam._m0[14u].z;
    _210[3u] = cbMtdParam._m0[15u].x;
    _211[3u] = cbMtdParam._m0[15u].y;
    _212[3u] = cbMtdParam._m0[15u].z;
    _210[4u] = cbMtdParam._m0[16u].x;
    _211[4u] = cbMtdParam._m0[16u].y;
    _212[4u] = cbMtdParam._m0[16u].z;
    _210[5u] = cbMtdParam._m0[11u].x;
    _211[5u] = cbMtdParam._m0[11u].y;
    _212[5u] = cbMtdParam._m0[11u].z;
    float _455 = roundEven(_367);
    float _456 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    uint _458 = uint(int(isnan(5.0) ? _456 : (isnan(_456) ? 5.0 : min(_456, 5.0))));
    float _207[6];
    float _208[6];
    float _209[6];
    _207[0u] = 1.0;
    _208[0u] = 1.0;
    _209[0u] = 1.0;
    _207[1u] = cbMtdParam._m0[22u].x;
    _208[1u] = cbMtdParam._m0[22u].y;
    _209[1u] = cbMtdParam._m0[22u].z;
    _207[2u] = cbMtdParam._m0[21u].x;
    _208[2u] = cbMtdParam._m0[21u].y;
    _209[2u] = cbMtdParam._m0[21u].z;
    _207[3u] = cbMtdParam._m0[19u].x;
    _208[3u] = cbMtdParam._m0[19u].y;
    _209[3u] = cbMtdParam._m0[19u].z;
    _207[4u] = cbMtdParam._m0[18u].x;
    _208[4u] = cbMtdParam._m0[18u].y;
    _209[4u] = cbMtdParam._m0[18u].z;
    _207[5u] = cbMtdParam._m0[17u].x;
    _208[5u] = cbMtdParam._m0[17u].y;
    _209[5u] = cbMtdParam._m0[17u].z;
    float _545 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[29u].y * TEXCOORD.x) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((cbMtdParam._m0[29u].z * TEXCOORD.y) * cbMtdParam._m0[24u].w) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _546 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    uint _548 = uint(int(isnan(5.0) ? _546 : (isnan(_546) ? 5.0 : min(_546, 5.0))));
    float _206[6];
    _206[0u] = 1.0;
    _206[1u] = cbMtdParam._m0[22u].w;
    _206[2u] = cbMtdParam._m0[21u].w;
    _206[3u] = cbMtdParam._m0[19u].w;
    _206[4u] = cbMtdParam._m0[18u].w;
    _206[5u] = cbMtdParam._m0[17u].w;
    float _585 = ((((_210[_458] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[24u].z * (_207[_548] - _210[_458])) * _206[_458])) * _361) + cbMtdParam._m0[10u].x) * _389.x;
    float _586 = ((((_211[_458] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[24u].z * (_208[_548] - _211[_458])) * _206[_458])) * _361) + cbMtdParam._m0[10u].y) * _389.y;
    float _587 = ((((_212[_458] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[24u].z * (_209[_548] - _212[_458])) * _206[_458])) * _361) + cbMtdParam._m0[10u].z) * _389.z;
    vec4 _599 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _269) + cbTextureTilingScale._m0[1u].w));
    float _619 = (((cbMtdParam._m0[9u].x * _599.x) - _585) * _364) + _585;
    float _620 = (((cbMtdParam._m0[9u].y * _599.y) - _586) * _364) + _586;
    float _621 = (((cbMtdParam._m0[9u].z * _599.z) - _587) * _364) + _587;
    vec4 _633 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    float _653 = (((cbMtdParam._m0[20u].x * _633.x) - _619) * _335) + _619;
    float _654 = (((cbMtdParam._m0[20u].y * _633.y) - _620) * _335) + _620;
    float _655 = (((cbMtdParam._m0[20u].z * _633.z) - _621) * _335) + _621;
    vec4 _667 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    float _691 = (_283.x * 4.5) * ((((cbMtdParam._m0[23u].x * _667.x) - _653) * _302) + _653);
    float _693 = (_283.y * 4.5) * ((((cbMtdParam._m0[23u].y * _667.y) - _654) * _304) + _654);
    float _695 = (_283.z * 4.5) * ((((cbMtdParam._m0[23u].z * _667.z) - _655) * _305) + _655);
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[26u].w;
    _202[0u] = cbMtdParam._m0[27u].x;
    _201[1u] = cbMtdParam._m0[27u].y;
    _202[1u] = cbMtdParam._m0[27u].z;
    _201[2u] = cbMtdParam._m0[27u].w;
    _202[2u] = cbMtdParam._m0[28u].x;
    _201[3u] = cbMtdParam._m0[28u].y;
    _202[3u] = cbMtdParam._m0[28u].z;
    _201[4u] = cbMtdParam._m0[28u].w;
    _202[4u] = cbMtdParam._m0[29u].x;
    float _723 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    uint _725 = uint(int(isnan(4.0) ? _723 : (isnan(_723) ? 4.0 : min(_723, 4.0))));
    float _737 = ((cbMtdParam._m0[30u].x - _202[_725]) * _364) + _202[_725];
    float _742 = ((cbMtdParam._m0[30u].z - _737) * _335) + _737;
    float _750 = ((cbMtdParam._m0[31u].x - _742) * _302) + _742;
    vec4 _765 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w, _386));
    float _767 = _765.x;
    float _768 = _765.y;
    float _770 = _765.z + _201[_725];
    vec4 _782 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _269) + cbTextureTilingScale._m0[6u].w));
    float _790 = (((cbMtdParam._m0[29u].w - _770) + _782.z) * _364) + _770;
    vec4 _803 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _269) + cbTextureTilingScale._m0[8u].w));
    float _811 = (((cbMtdParam._m0[30u].y - _790) + _803.z) * _335) + _790;
    float _817 = ((((_322 * 2.0) * _811) - _811) * cbMtdParam._m0[25u].y) + _811;
    vec4 _829 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w));
    float _837 = (((_829.z + cbMtdParam._m0[30u].w) - _817) * _305) + _817;
    float _850 = ((_782.x - _767) * _364) + _767;
    float _851 = ((_782.y - _768) * _364) + _768;
    float _856 = ((_803.x - _850) * _335) + _850;
    float _857 = ((_803.y - _851) * _335) + _851;
    float _866 = ((((_829.x - _856) * _302) + _856) * 2.0) + (-1.0);
    float _867 = ((((_829.y - _857) * _304) + _857) * 2.0) + (-1.0);
    float _868 = dot(vec2(_866, _867), vec2(_866, _867));
    float _4022 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _873 = sqrt(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))));
    float _876 = _866 + (cbMtdParam._m0[25u].z * ((_318.x * 2.0) + (-1.0)));
    float _877 = _867 + (cbMtdParam._m0[25u].z * ((_318.y * 2.0) + (-1.0)));
    float _880 = fma(_873, _247 * NORMAL.x, fma(_877, _254 * TANGENT.x, (_240 * _232) * _876));
    float _883 = fma(_873, _247 * NORMAL.y, fma(_877, _254 * TANGENT.y, (_240 * _233) * _876));
    float _886 = fma(_873, _247 * NORMAL.z, fma(_877, _254 * TANGENT.z, (_240 * _234) * _876));
    float _890 = inversesqrt(dot(vec3(_880, _883, _886), vec3(_880, _883, _886)));
    float _891 = _890 * _880;
    float _892 = _890 * _883;
    float _893 = _890 * _886;
    float _4033 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _894 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4055 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4066 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4077 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _898 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _914 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _964 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _954);
    float _965 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _954);
    float _966 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _954);
    float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
    float _971 = _964 * _970;
    float _972 = _965 * _970;
    float _973 = _966 * _970;
    vec4 _978 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _980 = _978.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1199 = sqrt(((_964 * _964) + (_965 * _965)) + (_966 * _966));
        float _1205 = (cbMatDynParam._m0[5u].x * _1199) + cbMatDynParam._m0[5u].y;
        float _4088 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1210 = (cbMatDynParam._m0[5u].z * _1199) + cbMatDynParam._m0[5u].w;
        float _4099 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) - _1206)) + _1206) < ((_980 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _991 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _992 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _994 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _996 = _994.w;
    float _1014 = fma(_893, cbSceneParam._m0[5u].z, fma(_892, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _891));
    float _1017 = fma(_893, cbSceneParam._m0[6u].z, fma(_892, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _891));
    float _1020 = fma(_893, cbSceneParam._m0[7u].z, fma(_892, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _891));
    vec4 _1022 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1033 = (((_1022.y - _894) + (_1022.w * _894)) * cbMtdParam._m0[3u].x) + _894;
    uint _1046 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1047 = _1046 + 9u;
    uint _1048 = _1047 + uint(cbMatDynParam._m0[0u].w);
    float _1054 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * cbInstanceData._m0[_1048].x;
    float _1055 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * cbInstanceData._m0[_1048].y;
    float _1056 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * cbInstanceData._m0[_1048].z;
    float _4110 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1057 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1058 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1059 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    vec4 _1060 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1065 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1076 = (((_1065.x - _898) + (_1065.w * _898)) * cbMtdParam._m0[3u].x) + _898;
    float _1089 = (cbMtdParam._m0[3u].x * (((_1057 * _996) - _1057) + _1060.x)) + _1057;
    float _1090 = (cbMtdParam._m0[3u].x * (((_1058 * _996) - _1058) + _1060.y)) + _1058;
    float _1091 = (cbMtdParam._m0[3u].x * (((_1059 * _996) - _1059) + _1060.z)) + _1059;
    float _1092 = 1.0 - _1076;
    float _1093 = _1092 * _1089;
    float _1094 = _1092 * _1090;
    float _1095 = _1092 * _1091;
    float _1100 = (_1089 + (-0.039999999105930328369140625)) * _1076;
    float _1101 = (_1090 + (-0.039999999105930328369140625)) * _1076;
    float _1102 = (_1091 + (-0.039999999105930328369140625)) * _1076;
    float _1103 = _1100 + 0.039999999105930328369140625;
    float _1105 = _1101 + 0.039999999105930328369140625;
    float _1106 = _1102 + 0.039999999105930328369140625;
    vec4 _1115 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _991, cbSceneParam._m0[86u].y * _992));
    float _1118 = _1115.x * TEXCOORD_5.w;
    float _1119 = dot(vec3(_891, _892, _893), vec3(_971, _972, _973));
    float _1122 = _1119 * 2.0;
    float _1126 = (_1122 * _891) - _971;
    float _1127 = (_1122 * _892) - _972;
    float _1128 = (_1122 * _893) - _973;
    float _1132 = abs(dot(vec3(_971, _972, _973), vec3(_891, _892, _893)));
    float _4143 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _1134 = sqrt(_1033);
    float _1145 = exp2((_1134 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1134 * 3.0));
    float _1151 = (1.0 - _1145) * ((_1134 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1152 = _1145 * _1134;
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1184 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1188 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1518;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1243 = fma(_1188, cbModelParam._m0[26u].z, fma(_1184, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1180));
        float _1247 = fma(_1188, cbModelParam._m0[27u].z, fma(_1184, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1180));
        float _1251 = fma(_1188, cbModelParam._m0[28u].z, fma(_1184, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1180));
        float _1276 = _1180 + _891;
        float _1277 = _1184 + _892;
        float _1278 = _1188 + _893;
        float _1288 = fma(_1278, cbModelParam._m0[26u].z, fma(_1277, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1276)) - _1243;
        float _1289 = fma(_1278, cbModelParam._m0[27u].z, fma(_1277, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1276)) - _1247;
        float _1290 = fma(_1278, cbModelParam._m0[28u].z, fma(_1277, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1276)) - _1251;
        float _1294 = inversesqrt(dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290)));
        float _1307 = ((_1294 * _1288) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1243 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1294 * _1289) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1247 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1294 * _1290) / cbModelParam._m0[34u].z) + ((((((_1251 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        float _1346 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1312.x + (-0.5));
        float _1348 = _1346 * (_1312.y + (-0.5));
        float _1349 = _1346 * (_1312.z + (-0.5));
        float _1356 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1319.x + (-0.5));
        float _1358 = _1356 * (_1319.y + (-0.5));
        float _1359 = _1356 * (_1319.z + (-0.5));
        float _1366 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1326.x + (-0.5));
        float _1368 = _1366 * (_1326.y + (-0.5));
        float _1369 = _1366 * (_1326.z + (-0.5));
        float _1376 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1333.x + (-0.5));
        float _1378 = _1376 * (_1333.y + (-0.5));
        float _1379 = _1376 * (_1333.z + (-0.5));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = _1347 * 0.5;
        float _1384 = _1357 * 0.5;
        float _1385 = _1367 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1400 = (dot(vec3(_891, _892, _893), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1410 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4191 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1412 + 1.0))) + _1417) * _1380;
        float _1427 = _1348 * 0.5;
        float _1428 = _1358 * 0.5;
        float _1429 = _1368 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_891, _892, _893), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4224 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1454 + 1.0))) + _1459) * _1381;
        float _1469 = _1349 * 0.5;
        float _1470 = _1359 * 0.5;
        float _1471 = _1369 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_891, _892, _893), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4257 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1496 + 1.0))) + _1501) * _1382;
        _1518 = _1349;
        _1520 = _1348;
        _1521 = _1347;
        _1522 = _1359;
        _1523 = _1358;
        _1524 = _1357;
        _1525 = _1369;
        _1526 = _1368;
        _1527 = _1367;
        _1528 = _1382;
        _1529 = _1381;
        _1530 = _1380;
        _1531 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1532 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1533 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
    }
    else
    {
        _1518 = _1519;
        _1520 = _1519;
        _1521 = _1519;
        _1522 = _1519;
        _1523 = _1519;
        _1524 = _1519;
        _1525 = _1519;
        _1526 = _1519;
        _1527 = _1519;
        _1528 = _1519;
        _1529 = _1519;
        _1530 = _1519;
        _1531 = 0.0;
        _1532 = 0.0;
        _1533 = 0.0;
    }
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1559 = fma(_1188, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1180));
        float _1563 = fma(_1188, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1180));
        float _1567 = fma(_1188, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1180));
        float _1590 = _1180 + _891;
        float _1591 = _1184 + _892;
        float _1592 = _1188 + _893;
        float _1602 = fma(_1592, cbModelParam._m0[30u].z, fma(_1591, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1590)) - _1559;
        float _1603 = fma(_1592, cbModelParam._m0[31u].z, fma(_1591, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1590)) - _1563;
        float _1604 = fma(_1592, cbModelParam._m0[32u].z, fma(_1591, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1590)) - _1567;
        float _1608 = inversesqrt(dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604)));
        float _1621 = ((_1608 * _1602) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1559 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1622 = ((_1608 * _1603) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1563 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1623 = ((_1608 * _1604) / cbModelParam._m0[35u].z) + ((((((_1567 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1621, _1622, _1623), 0.0);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1621, _1622, _1623), 0.0);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1621, _1622, _1623), 0.0);
        vec4 _1646 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1621, _1622, _1623), 0.0);
        float _1658 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1659 = _1658 * (_1625.x + (-0.5));
        float _1660 = _1658 * (_1625.y + (-0.5));
        float _1661 = _1658 * (_1625.z + (-0.5));
        float _1668 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1632.x + (-0.5));
        float _1670 = _1668 * (_1632.y + (-0.5));
        float _1671 = _1668 * (_1632.z + (-0.5));
        float _1678 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1639.x + (-0.5));
        float _1680 = _1678 * (_1639.y + (-0.5));
        float _1681 = _1678 * (_1639.z + (-0.5));
        float _1688 = exp2((_1646.w + (-0.5)) * 20.0) * 2.0;
        float _1689 = _1688 * (_1646.x + (-0.5));
        float _1690 = _1688 * (_1646.y + (-0.5));
        float _1691 = _1688 * (_1646.z + (-0.5));
        float _1692 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1693 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1694 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1695 = _1659 * 0.5;
        float _1696 = _1669 * 0.5;
        float _1697 = _1679 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_891, _892, _893), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1692 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4320 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1722 + 1.0))) + _1727) * _1692;
        float _1737 = _1660 * 0.5;
        float _1738 = _1670 * 0.5;
        float _1739 = _1680 * 0.5;
        float _1740 = dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739));
        float _1745 = (_1740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1740);
        float _1753 = (dot(vec3(_891, _892, _893), vec3(_1745 * _1737, _1745 * _1738, _1745 * _1739)) + 1.0) * 0.5;
        float _4331 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1762 = sqrt(((_1738 * _1738) + (_1737 * _1737)) + (_1739 * _1739)) / (_1693 + 9.9999997473787516355514526367188e-06);
        float _4342 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1764 = _1763 * 2.0;
        float _1768 = (1.0 - _1763) / (_1763 + 1.0);
        float _4353 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1778 = ((((1.0 - _1769) * (_1764 + 2.0)) * exp2(log2(isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_1764 + 1.0))) + _1769) * _1693;
        float _1779 = _1661 * 0.5;
        float _1780 = _1671 * 0.5;
        float _1781 = _1681 * 0.5;
        float _1782 = dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781));
        float _1787 = (_1782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1782);
        float _1795 = (dot(vec3(_891, _892, _893), vec3(_1787 * _1779, _1787 * _1780, _1787 * _1781)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1804 = sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781)) / (_1694 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1806 = _1805 * 2.0;
        float _1810 = (1.0 - _1805) / (_1805 + 1.0);
        float _4386 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1820 = ((((1.0 - _1811) * (_1806 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1806 + 1.0))) + _1811) * _1694;
        _1828 = _1661;
        _1829 = _1660;
        _1830 = _1659;
        _1831 = _1671;
        _1832 = _1670;
        _1833 = _1669;
        _1834 = _1681;
        _1835 = _1680;
        _1836 = _1679;
        _1837 = _1694;
        _1838 = _1693;
        _1839 = _1692;
        _1840 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
        _1841 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)));
        _1842 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)));
    }
    else
    {
        _1828 = _1519;
        _1829 = _1519;
        _1830 = _1519;
        _1831 = _1519;
        _1832 = _1519;
        _1833 = _1519;
        _1834 = _1519;
        _1835 = _1519;
        _1836 = _1519;
        _1837 = _1519;
        _1838 = _1519;
        _1839 = _1519;
        _1840 = 0.0;
        _1841 = 0.0;
        _1842 = 0.0;
    }
    float _1852 = (cbModelParam._m0[1u].x * (_1840 - _1531)) + _1531;
    float _1853 = (cbModelParam._m0[1u].x * (_1841 - _1532)) + _1532;
    float _1854 = (cbModelParam._m0[1u].x * (_1842 - _1533)) + _1533;
    float _1875 = fma(_1854, cbSceneParam._m0[89u].z, fma(_1853, cbSceneParam._m0[89u].y, _1852 * cbSceneParam._m0[89u].x));
    float _1878 = fma(_1854, cbSceneParam._m0[90u].z, fma(_1853, cbSceneParam._m0[90u].y, _1852 * cbSceneParam._m0[90u].x));
    float _1881 = fma(_1854, cbSceneParam._m0[91u].z, fma(_1853, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1852));
    float _1896 = _1126 * 0.5;
    float _1897 = _1127 * 0.5;
    float _1898 = _1128 * 0.5;
    float _1899 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1830, _1833, _1836, _1839));
    float _1902 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1829, _1832, _1835, _1838));
    float _1905 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1828, _1831, _1834, _1837));
    float _1939;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1912 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1518, _1522, _1525, _1528));
        float _1916 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1520, _1523, _1526, _1529));
        float _1920 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1521, _1524, _1527, _1530));
        float _1927 = dot(vec4(cbModelParam._m0[39u]), vec4(_1896, _1897, _1898, 1.0));
        _1939 = dot(vec3(isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1927) ? 0.0 : (isnan(0.0) ? _1927 : max(0.0, _1927))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1939 = 1.0;
    }
    float _1950;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1941 = dot(vec4(cbModelParam._m0[40u]), vec4(_1896, _1897, _1898, 1.0));
        _1950 = dot(vec3(isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1941) ? 0.0 : (isnan(0.0) ? _1941 : max(0.0, _1941))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1950 = 1.0;
    }
    float _1954 = (_1950 * cbModelParam._m0[1u].x) + (_1939 * (1.0 - cbModelParam._m0[1u].x));
    float _1964 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1033);
    float _1965 = isnan(_1964) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1964 : min(cbModelParam._m0[25u].z, _1964));
    float _2045;
    float _2047;
    float _2049;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2012 = fma(_1188, cbModelParam._m0[13u].z, fma(_1184, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1180)) + cbModelParam._m0[13u].w;
        float _2016 = fma(_1188, cbModelParam._m0[14u].z, fma(_1184, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1180)) + cbModelParam._m0[14u].w;
        float _2020 = fma(_1188, cbModelParam._m0[15u].z, fma(_1184, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1180)) + cbModelParam._m0[15u].w;
        float _2023 = fma(_1128, cbModelParam._m0[13u].z, fma(_1127, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1126));
        float _2026 = fma(_1128, cbModelParam._m0[14u].z, fma(_1127, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1126));
        float _2029 = fma(_1128, cbModelParam._m0[15u].z, fma(_1127, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1126));
        float _2057;
        if (_2023 > 0.0)
        {
            _2057 = abs((1.0 - _2012) / _2023);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2012 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2057 = frontier_phi_17_15_ladder;
        }
        float _2280;
        if (_2026 > 0.0)
        {
            _2280 = abs((1.0 - _2016) / _2026);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2016 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2280 = frontier_phi_26_22_ladder;
        }
        float _2537;
        if (_2029 > 0.0)
        {
            _2537 = abs((1.0 - _2020) / _2029);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2020 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2537 = frontier_phi_38_33_ladder;
        }
        float _2539 = isnan(_2280) ? _2057 : (isnan(_2057) ? _2280 : min(_2057, _2280));
        float _2540 = isnan(_2537) ? _2539 : (isnan(_2539) ? _2537 : min(_2539, _2537));
        float _2544 = (_2540 * _2023) + _2012;
        float _2545 = (_2540 * _2026) + _2016;
        float _2546 = (_2540 * _2029) + _2020;
        float _2547 = _2540 * 9.9999997473787516355514526367188e-05;
        float _2549 = (-1.0) - _2547;
        float _2551 = _2547 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2546 > _2551) || ((_2546 < _2549) || ((_2545 > _2551) || ((_2545 < _2549) || ((_2544 < _2549) || (_2544 > _2551))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2546, cbModelParam._m0[9u].z, fma(_2545, cbModelParam._m0[9u].y, _2544 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2546, cbModelParam._m0[10u].z, fma(_2545, cbModelParam._m0[10u].y, _2544 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2546, cbModelParam._m0[11u].z, fma(_2545, cbModelParam._m0[11u].y, _2544 * cbModelParam._m0[11u].x))), _1965);
            frontier_phi_16_38_ladder = _2674.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2674.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2674.x * cbModelParam._m0[1u].y;
        }
        _2045 = frontier_phi_16_38_ladder_2;
        _2047 = frontier_phi_16_38_ladder_1;
        _2049 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2033 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1126, _1127, _1128), _1965);
        _2045 = _2033.x * cbModelParam._m0[1u].y;
        _2047 = _2033.y * cbModelParam._m0[1u].y;
        _2049 = _2033.z * cbModelParam._m0[1u].y;
    }
    float _2053 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1033);
    float _2054 = isnan(_2053) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2053 : min(cbModelParam._m0[25u].w, _2053));
    float _2143;
    float _2145;
    float _2147;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2107 = fma(_1188, cbModelParam._m0[21u].z, fma(_1184, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1180)) + cbModelParam._m0[21u].w;
        float _2111 = fma(_1188, cbModelParam._m0[22u].z, fma(_1184, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1180)) + cbModelParam._m0[22u].w;
        float _2115 = fma(_1188, cbModelParam._m0[23u].z, fma(_1184, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1180)) + cbModelParam._m0[23u].w;
        float _2118 = fma(_1128, cbModelParam._m0[21u].z, fma(_1127, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1126));
        float _2121 = fma(_1128, cbModelParam._m0[22u].z, fma(_1127, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1126));
        float _2124 = fma(_1128, cbModelParam._m0[23u].z, fma(_1127, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1126));
        float _2285;
        if (_2118 > 0.0)
        {
            _2285 = abs((1.0 - _2107) / _2118);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2107 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2285 = frontier_phi_28_24_ladder;
        }
        float _2564;
        if (_2121 > 0.0)
        {
            _2564 = abs((1.0 - _2111) / _2121);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2111 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2564 = frontier_phi_40_35_ladder;
        }
        float _2777;
        if (_2124 > 0.0)
        {
            _2777 = abs((1.0 - _2115) / _2124);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2115 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2777 = frontier_phi_49_46_ladder;
        }
        float _2779 = isnan(_2564) ? _2285 : (isnan(_2285) ? _2564 : min(_2285, _2564));
        float _2780 = isnan(_2777) ? _2779 : (isnan(_2779) ? _2777 : min(_2779, _2777));
        float _2784 = (_2780 * _2118) + _2107;
        float _2785 = (_2780 * _2121) + _2111;
        float _2786 = (_2780 * _2124) + _2115;
        float _2787 = _2780 * 9.9999997473787516355514526367188e-05;
        float _2788 = (-1.0) - _2787;
        float _2790 = _2787 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2786 > _2790) || ((_2786 < _2788) || ((_2785 > _2790) || ((_2785 < _2788) || ((_2784 < _2788) || (_2784 > _2790))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2985 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2786, cbModelParam._m0[17u].z, fma(_2785, cbModelParam._m0[17u].y, _2784 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2786, cbModelParam._m0[18u].z, fma(_2785, cbModelParam._m0[18u].y, _2784 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2786, cbModelParam._m0[19u].z, fma(_2785, cbModelParam._m0[19u].y, _2784 * cbModelParam._m0[19u].x))), _2054);
            frontier_phi_25_49_ladder = _2985.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2985.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2985.x * cbModelParam._m0[1u].z;
        }
        _2143 = frontier_phi_25_49_ladder_2;
        _2145 = frontier_phi_25_49_ladder_1;
        _2147 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2127 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1126, _1127, _1128), _2054);
        _2143 = _2127.x * cbModelParam._m0[1u].z;
        _2145 = _2127.y * cbModelParam._m0[1u].z;
        _2147 = _2127.z * cbModelParam._m0[1u].z;
    }
    float _2160 = (((_1151 * _1103) + _1152) * _1118) * ((cbModelParam._m0[1u].w * (_2143 - _2045)) + _2045);
    float _2162 = (((_1151 * _1105) + _1152) * _1118) * ((cbModelParam._m0[1u].w * (_2145 - _2047)) + _2047);
    float _2164 = (((_1151 * _1106) + _1152) * _1118) * ((cbModelParam._m0[1u].w * (_2147 - _2049)) + _2049);
    float _2167 = fma(_2164, cbSceneParam._m0[89u].z, fma(_2162, cbSceneParam._m0[89u].y, _2160 * cbSceneParam._m0[89u].x));
    float _2170 = fma(_2164, cbSceneParam._m0[90u].z, fma(_2162, cbSceneParam._m0[90u].y, _2160 * cbSceneParam._m0[90u].x));
    float _2173 = fma(_2164, cbSceneParam._m0[91u].z, fma(_2162, cbSceneParam._m0[91u].y, _2160 * cbSceneParam._m0[91u].x));
    vec4 _2181 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_991, _992));
    float _2183 = _2181.w;
    float _2195 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2183);
    float _2196 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2183);
    float _2197 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2183);
    uvec4 _2201 = floatBitsToUint(cbInstanceData._m0[_1046 + 5u]);
    uint _2203 = _2201.x * 14u;
    uint _2204 = _2203 + 13u;
    float _2211 = _1118 + (-1.0);
    float _2216 = (cbLight._m0[_2204].x * _2211) + 1.0;
    float _2217 = (cbLight._m0[_2204].y * _2211) + 1.0;
    float _2218 = (cbLight._m0[_2204].z * _2211) + 1.0;
    float _2219 = (cbLight._m0[_2204].w * _2211) + 1.0;
    uint _2220 = _2203 + 5u;
    float _2226 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
    uint _2230 = _2203 + 4u;
    float _2239 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
    uint _2243 = _2203 | 1u;
    float _2254 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_891, _892, _893));
    float _2257 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_891, _892, _893));
    float _4522 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _4533 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2262 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * 0.3183098733425140380859375;
    float _2264 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * 0.3183098733425140380859375;
    float _2271 = ((cbLight._m0[_2220].x * _2226) * _2264) + (((cbLight._m0[_2230].x * _2195) * _2239) * _2262);
    float _2272 = ((_2226 * cbLight._m0[_2220].y) * _2264) + (((cbLight._m0[_2230].y * _2196) * _2239) * _2262);
    float _2273 = ((_2226 * cbLight._m0[_2220].z) * _2264) + (((cbLight._m0[_2230].z * _2197) * _2239) * _2262);
    uvec4 _2277 = floatBitsToUint(cbLight._m0[_2203 + 12u]);
    bool _2279 = _2277.x == 0u;
    float _2290;
    float _2292;
    float _2294;
    if (_2279)
    {
        _2290 = _2271;
        _2292 = _2272;
        _2294 = _2273;
    }
    else
    {
        uint _2298 = _2203 + 6u;
        float _2314 = (dot(vec3(cbLight._m0[_2203 + 2u].xyz), vec3(_891, _892, _893)) * 0.5) + 0.5;
        float _2315 = _2314 * _2314;
        float _4544 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2316 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2317 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2290 = (((cbLight._m0[_2298].x * 0.3183098733425140380859375) * _2316) * _2317) + _2271;
        _2292 = (((cbLight._m0[_2298].y * 0.3183098733425140380859375) * _2316) * _2317) + _2272;
        _2294 = (((cbLight._m0[_2298].z * 0.3183098733425140380859375) * _2316) * _2317) + _2273;
    }
    bool _2297 = _2277.y == 0u;
    float _2335;
    float _2337;
    float _2339;
    if (_2297)
    {
        _2335 = _2290;
        _2337 = _2292;
        _2339 = _2294;
    }
    else
    {
        uint _2508 = _2203 + 7u;
        float _2524 = (dot(vec3(cbLight._m0[_2203 + 3u].xyz), vec3(_891, _892, _893)) * 0.5) + 0.5;
        float _2525 = _2524 * _2524;
        float _4560 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2526 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2527 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2335 = (((cbLight._m0[_2508].x * 0.3183098733425140380859375) * _2526) * _2527) + _2290;
        _2337 = (((cbLight._m0[_2508].y * 0.3183098733425140380859375) * _2526) * _2527) + _2292;
        _2339 = (((cbLight._m0[_2508].z * 0.3183098733425140380859375) * _2526) * _2527) + _2294;
    }
    uint _2342 = _2203 + 8u;
    float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _1033) * 0.949999988079071044921875);
    float _2356 = _2355 * _2355;
    float _2357 = cbLight._m0[_2203].x + _971;
    float _2358 = cbLight._m0[_2203].y + _972;
    float _2359 = cbLight._m0[_2203].z + _973;
    float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
    float _2364 = _2363 * _2357;
    float _2365 = _2363 * _2358;
    float _2366 = _2363 * _2359;
    float _2367 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2203].xyz));
    float _4576 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _4587 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _2371 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2372 = dot(vec3(_891, _892, _893), vec3(_2364, _2365, _2366));
    float _4598 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2376 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2364, _2365, _2366));
    float _4609 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2380 = _2356 * _2356;
    float _2384 = ((_2375 * _2375) * (_2380 + (-1.0))) + 1.0;
    float _2392 = exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0);
    float _2393 = 0.959999978542327880859375 - _1100;
    float _2395 = 0.959999978542327880859375 - _1101;
    float _2396 = 0.959999978542327880859375 - _1102;
    float _2403 = 1.0 - _2356;
    float _2414 = (0.5 / (((_2371 * ((_2370 * _2403) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2403) + _2356) * _2370))) * _2370;
    float _4620 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2416 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2380 / ((_2384 * _2384) * 3.141590118408203125));
    uint _2430 = _2203 + 9u;
    float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2243].w)) * _1033) * 0.949999988079071044921875);
    float _2442 = _2441 * _2441;
    float _2443 = cbLight._m0[_2243].x + _971;
    float _2444 = cbLight._m0[_2243].y + _972;
    float _2445 = cbLight._m0[_2243].z + _973;
    float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
    float _2450 = _2449 * _2443;
    float _2451 = _2449 * _2444;
    float _2452 = _2449 * _2445;
    float _2453 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2243].xyz));
    float _4631 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2456 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
    float _2457 = dot(vec3(_891, _892, _893), vec3(_2450, _2451, _2452));
    float _4642 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _2461 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_2450, _2451, _2452));
    float _4653 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2465 = _2442 * _2442;
    float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
    float _2476 = exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0);
    float _2483 = 1.0 - _2442;
    float _2493 = (0.5 / (((_2371 * ((_2456 * _2483) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2483) + _2442) * _2456))) * _2456;
    float _4664 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2495 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
    float _2505 = (((((_2476 * _2393) + _1103) * cbLight._m0[_2430].x) * _2495) * _2226) + ((((cbLight._m0[_2342].x * _2195) * ((_2392 * _2393) + _1103)) * _2416) * _2239);
    float _2506 = (((((_2476 * _2395) + _1105) * cbLight._m0[_2430].y) * _2495) * _2226) + ((((cbLight._m0[_2342].y * _2196) * ((_2392 * _2395) + _1105)) * _2416) * _2239);
    float _2507 = (((((_2476 * _2396) + _1106) * cbLight._m0[_2430].z) * _2495) * _2226) + ((((cbLight._m0[_2342].z * _2197) * ((_2392 * _2396) + _1106)) * _2416) * _2239);
    float _2569;
    float _2571;
    float _2573;
    if (_2279)
    {
        _2569 = _2505;
        _2571 = _2506;
        _2573 = _2507;
    }
    else
    {
        uint _2575 = _2203 + 2u;
        uint _2579 = _2203 + 10u;
        float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2575].w)) * _1033) * 0.949999988079071044921875);
        float _2594 = _2593 * _2593;
        float _2595 = cbLight._m0[_2575].x + _971;
        float _2596 = cbLight._m0[_2575].y + _972;
        float _2597 = cbLight._m0[_2575].z + _973;
        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
        float _2602 = _2601 * _2595;
        float _2603 = _2601 * _2596;
        float _2604 = _2601 * _2597;
        float _2605 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2575].xyz));
        float _4675 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2609 = dot(vec3(_891, _892, _893), vec3(_2602, _2603, _2604));
        float _4686 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2613 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_2602, _2603, _2604));
        float _4697 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2617 = _2594 * _2594;
        float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
        float _2628 = exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0);
        float _2635 = 1.0 - _2594;
        float _2645 = (0.5 / (((_2371 * ((_2608 * _2635) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2635) + _2594) * _2608))) * _2608;
        float _4708 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2569 = (((((_2628 * _2393) + _1103) * cbLight._m0[_2579].x) * _2647) * _2648) + _2505;
        _2571 = (((((_2628 * _2395) + _1105) * cbLight._m0[_2579].y) * _2647) * _2648) + _2506;
        _2573 = (((((_2628 * _2396) + _1106) * cbLight._m0[_2579].z) * _2647) * _2648) + _2507;
    }
    float _2683;
    float _2685;
    float _2687;
    if (_2297)
    {
        _2683 = _2569;
        _2685 = _2571;
        _2687 = _2573;
    }
    else
    {
        uint _2694 = _2203 + 3u;
        uint _2698 = _2203 + 11u;
        float _2712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2694].w)) * _1033) * 0.949999988079071044921875);
        float _2713 = _2712 * _2712;
        float _2714 = cbLight._m0[_2694].x + _971;
        float _2715 = cbLight._m0[_2694].y + _972;
        float _2716 = cbLight._m0[_2694].z + _973;
        float _2720 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
        float _2721 = _2720 * _2714;
        float _2722 = _2720 * _2715;
        float _2723 = _2720 * _2716;
        float _2724 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2694].xyz));
        float _4724 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2728 = dot(vec3(_891, _892, _893), vec3(_2721, _2722, _2723));
        float _4735 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2732 = dot(vec3(cbLight._m0[_2694].xyz), vec3(_2721, _2722, _2723));
        float _4746 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2736 = _2713 * _2713;
        float _2740 = ((_2731 * _2731) * (_2736 + (-1.0))) + 1.0;
        float _2747 = exp2(log2(1.0 - (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) * 5.0);
        float _2754 = 1.0 - _2713;
        float _2764 = (0.5 / (((_2371 * ((_2727 * _2754) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2371 * _2754) + _2713) * _2727))) * _2727;
        float _4757 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2766 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2736 / ((_2740 * _2740) * 3.141590118408203125));
        float _2767 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2683 = (((((_2747 * _2393) + _1103) * cbLight._m0[_2698].x) * _2766) * _2767) + _2569;
        _2685 = (((((_2747 * _2395) + _1105) * cbLight._m0[_2698].y) * _2766) * _2767) + _2571;
        _2687 = (((((_2747 * _2396) + _1106) * cbLight._m0[_2698].z) * _2766) * _2767) + _2573;
    }
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    float _2912;
    if (_2201.y == 0u)
    {
        float _2842 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2843 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2842;
        float _2844 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2842;
        float _2845 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2842;
        uvec4 _2857 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2858 = _2857.x;
        uint _2869 = uint((float(_2857.y) * floor(float(uint(cbSceneParam._m0[85u].y * _992) / _2858))) + floor(float(uint(cbSceneParam._m0[85u].x * _991) / _2858)));
        float _2879 = (log2(_2845 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2880 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        uint _2883 = uint(isnan(14.0) ? _2880 : (isnan(_2880) ? 14.0 : min(_2880, 14.0)));
        uvec4 _2888 = texelFetch(g_lightClusterGridBuffer, int(((_2883 << 2u) + (_2869 << 6u)) >> 2u));
        uint _2889 = _2888.x;
        uint _2890 = _2857.z;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        if (((((1u << ((_2890 >> 4u) & 15u)) + 4294967295u) & _2889) == 0u) || ((_2890 & 240u) == 0u))
        {
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
        }
        else
        {
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _2999;
            float _3001;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            uint _3149 = 0u;
            uint _3158;
            bool _3159;
            for (;;)
            {
                _3158 = texelFetch(g_lightClassification, int((((_2883 << 5u) + (_2869 << 9u)) + (_3149 << 2u)) >> 2u)).x;
                _3159 = _3158 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3159)
                {
                    frontier_phi_66_pred = _3143;
                    frontier_phi_66_pred_1 = _3148;
                    frontier_phi_66_pred_2 = _3147;
                    frontier_phi_66_pred_3 = _3146;
                    frontier_phi_66_pred_4 = _3145;
                    frontier_phi_66_pred_5 = _3144;
                }
                else
                {
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    uint _3294;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3145;
                    _3291 = _3146;
                    _3292 = _3147;
                    _3293 = _3148;
                    _3294 = _3158;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    for (;;)
                    {
                        uint _3298 = uint(findLSB(_3294)) + (_3149 << 5u);
                        uint _3295 = (_3294 + 4294967295u) & _3294;
                        uint _3300 = _3298 * 48u;
                        vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 3u)).x));
                        uint _3320 = (_3298 * 48u) + 4u;
                        vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3339 = (_3298 * 48u) + 8u;
                        vec3 _3350 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x));
                        float _3354 = _3314.x - _2843;
                        float _3355 = _3314.y - _2844;
                        float _3356 = _3314.z - _2845;
                        float _3357 = dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356));
                        float _3360 = inversesqrt(_3357);
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3364 = dot(vec3(_1014, _1017, _1020), vec3(_3361, _3362, _3363));
                        float _3369 = 1.0 - (_3357 * _3314.w);
                        float _4783 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3370 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3371 = sqrt(_3357) * _3333.w;
                        float _3374 = 1.39999997615814208984375 / (_3371 + 1.39999997615814208984375);
                        float _3375 = _3374 * _3374;
                        float _3378 = ((1.0 - _3375) * _3364) + _3375;
                        float _3381 = _3371 * _3371;
                        float _3385 = ((isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))) * _3370) / ((_3381 * 0.699999988079071044921875) + 1.0);
                        float _3389 = (-0.0) - _2843;
                        float _3390 = (-0.0) - _2844;
                        float _3391 = (-0.0) - _2845;
                        float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                        float _3396 = _3395 * _3389;
                        float _3397 = _3395 * _3390;
                        float _3398 = _3395 * _3391;
                        float _3406 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                        float _3407 = 1.0 - _1134;
                        float _3414 = sqrt(1.0 - ((1.0 - (_3407 * _3407)) * (1.0 - (_3406 * _3406))));
                        float _3415 = _3414 * _3414;
                        float _3416 = _3415 * _3415;
                        float _3417 = _3396 + _3361;
                        float _3418 = _3397 + _3362;
                        float _3419 = _3398 + _3363;
                        float _3423 = inversesqrt(dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419)));
                        float _3427 = dot(vec3(_1014, _1017, _1020), vec3(_3396, _3397, _3398));
                        float _4799 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3430 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3431 = dot(vec3(_1014, _1017, _1020), vec3(_3423 * _3417, _3423 * _3418, _3423 * _3419));
                        float _4810 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3434 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3438 = ((_3434 * _3434) * (_3416 + (-1.0))) + 1.0;
                        float _3439 = _3374 * _3415;
                        float _3440 = _3439 * _3439;
                        float _3443 = ((1.0 - _3440) * _3364) + _3440;
                        float _4821 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3444 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3445 = 1.0 - _3415;
                        float _3455 = (0.5 / (((_3444 * ((_3430 * _3445) + _3415)) + 9.9999999392252902907785028219223e-09) + (((_3444 * _3445) + _3415) * _3430))) * _3444;
                        float _4832 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3466 = (((_3416 * 3.1415927410125732421875) * (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) / ((_3438 * _3438) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125))) * _3370;
                        _3218 = (_3385 * _3333.x) + _3291;
                        _3219 = (_3385 * _3333.y) + _3292;
                        _3220 = (_3385 * _3333.z) + _3293;
                        _3215 = (_3466 * _3350.x) + _3288;
                        _3216 = (_3466 * _3350.y) + _3289;
                        _3217 = (_3466 * _3350.z) + _3290;
                        if (_3295 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3217;
                            _3291 = _3218;
                            _3292 = _3219;
                            _3293 = _3220;
                            _3294 = _3295;
                        }
                    }
                    frontier_phi_66_pred = _3215;
                    frontier_phi_66_pred_1 = _3220;
                    frontier_phi_66_pred_2 = _3219;
                    frontier_phi_66_pred_3 = _3218;
                    frontier_phi_66_pred_4 = _3217;
                    frontier_phi_66_pred_5 = _3216;
                }
                _2991 = frontier_phi_66_pred;
                _3001 = frontier_phi_66_pred_1;
                _2999 = frontier_phi_66_pred_2;
                _2997 = frontier_phi_66_pred_3;
                _2995 = frontier_phi_66_pred_4;
                _2993 = frontier_phi_66_pred_5;
                uint _3150 = _3149 + 1u;
                if (_3150 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3143 = _2991;
                    _3144 = _2993;
                    _3145 = _2995;
                    _3146 = _2997;
                    _3147 = _2999;
                    _3148 = _3001;
                    _3149 = _3150;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
        }
        uvec4 _3004 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3005 = _3004.z;
        uint _3007 = (_3005 >> 8u) & 15u;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        if (((4294967295u << _3007) & _2889) == 0u)
        {
            _3111 = _2990;
            _3113 = _2992;
            _3115 = _2994;
            _3117 = _2996;
            _3119 = _2998;
            _3121 = _3000;
        }
        else
        {
            float _3136 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
            float _3137 = _3136 * _2843;
            float _3138 = _3136 * _2844;
            float _3139 = _3136 * _2845;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3007 < ((_3005 >> 12u) & 15u))
            {
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3271 = _2990;
                float _3272 = _2992;
                float _3273 = _2994;
                float _3274 = _2996;
                float _3275 = _2998;
                float _3276 = _3000;
                uint _3277 = _3007;
                uint _3286;
                bool _3287;
                for (;;)
                {
                    _3286 = texelFetch(g_lightClassification, int((((_2883 << 5u) + (_2869 << 9u)) + (_3277 << 2u)) >> 2u)).x;
                    _3287 = _3286 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3287)
                    {
                        frontier_phi_77_pred = _3276;
                        frontier_phi_77_pred_1 = _3275;
                        frontier_phi_77_pred_2 = _3274;
                        frontier_phi_77_pred_3 = _3273;
                        frontier_phi_77_pred_4 = _3272;
                        frontier_phi_77_pred_5 = _3271;
                    }
                    else
                    {
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3493 = _3271;
                        float _3494 = _3272;
                        float _3495 = _3273;
                        float _3496 = _3274;
                        float _3497 = _3275;
                        float _3498 = _3276;
                        uint _3499 = _3286;
                        uint _3500;
                        vec4 _3525;
                        float _3526;
                        vec4 _3541;
                        vec3 _3553;
                        vec4 _3568;
                        vec4 _3583;
                        float _3629;
                        bool _3630;
                        for (;;)
                        {
                            uint _3510 = ((_3277 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3499));
                            _3500 = (_3499 + 4294967295u) & _3499;
                            uint _3512 = _3510 * 40u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            _3526 = _3525.w;
                            uint _3528 = (_3510 * 40u) + 4u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3543 = (_3510 * 40u) + 8u;
                            _3553 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x));
                            uint _3555 = (_3510 * 40u) + 16u;
                            _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            uint _3570 = (_3510 * 40u) + 20u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3585 = (_3510 * 40u) + 24u;
                            vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3604 = (_3510 * 40u) + 28u;
                            vec4 _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            _3629 = fma(_2845, _3617.z, fma(_2844, _3617.y, _3617.x * _2843)) + _3617.w;
                            _3630 = !((fma(_2845, _3598.z, fma(_2844, _3598.y, _3598.x * _2843)) + _3598.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3630)
                            {
                                float _3657 = _3525.x - _2843;
                                float _3658 = _3525.y - _2844;
                                float _3659 = _3525.z - _2845;
                                float _3660 = dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659));
                                float _3663 = inversesqrt(_3660);
                                float _3664 = _3663 * _3657;
                                float _3665 = _3663 * _3658;
                                float _3666 = _3663 * _3659;
                                float _3670 = 1.0 - (_3660 / (_3526 * _3526));
                                float _4843 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3671 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3675 = sqrt(_3660) * _3541.w;
                                float _3677 = 1.39999997615814208984375 / (_3675 + 1.39999997615814208984375);
                                float _3678 = _3677 * _3677;
                                float _3681 = ((1.0 - _3678) * dot(vec3(_3664, _3665, _3666), vec3(_1014, _1017, _1020))) + _3678;
                                float _3684 = _3675 * _3675;
                                float _3688 = (fma(_2845, _3568.z, fma(_2844, _3568.y, _3568.x * _2843)) + _3568.w) / _3629;
                                float _3689 = (fma(_2845, _3583.z, fma(_2844, _3583.y, _3583.x * _2843)) + _3583.w) / _3629;
                                float _3693 = 1.0 - dot(vec2(_3688, _3689), vec2(_3688, _3689));
                                float _4859 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3695 = _3694 * (((isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0))) * _3671) / ((_3684 * 0.699999988079071044921875) + 1.0));
                                float _3707 = exp2(log2(1.0 / ((_3684 * 3.5) + 5.0)) * 0.25);
                                float _3708 = 1.0 - _1134;
                                float _3715 = sqrt(1.0 - ((1.0 - (_3708 * _3708)) * (1.0 - (_3707 * _3707))));
                                float _3716 = _3715 * _3715;
                                float _3717 = _3716 * _3716;
                                float _3718 = _3664 - _3137;
                                float _3719 = _3665 - _3138;
                                float _3720 = _3666 - _3139;
                                float _3724 = inversesqrt(dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720)));
                                float _3728 = dot(vec3(_1014, _1017, _1020), vec3((-0.0) - _3137, (-0.0) - _3138, (-0.0) - _3139));
                                float _4870 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3731 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3732 = dot(vec3(_1014, _1017, _1020), vec3(_3724 * _3718, _3724 * _3719, _3724 * _3720));
                                float _4881 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3735 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3739 = ((_3735 * _3735) * (_3717 + (-1.0))) + 1.0;
                                float _3740 = _3677 * _3716;
                                float _3741 = _3740 * _3740;
                                float _3747 = ((1.0 - _3741) * dot(vec3(_1014, _1017, _1020), vec3(_3664, _3665, _3666))) + _3741;
                                float _4892 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3748 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3749 = 1.0 - _3716;
                                float _3759 = (0.5 / (((_3748 * ((_3731 * _3749) + _3716)) + 9.9999999392252902907785028219223e-09) + (((_3748 * _3749) + _3716) * _3731))) * _3748;
                                float _4903 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3769 = (_3694 * _3671) * (((_3717 * 3.1415927410125732421875) * (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0)))) / ((_3739 * _3739) * ((_3684 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3695 * _3541.y;
                                frontier_phi_83_pred_1 = _3695 * _3541.x;
                                frontier_phi_83_pred_2 = _3769 * _3553.z;
                                frontier_phi_83_pred_3 = _3769 * _3553.y;
                                frontier_phi_83_pred_4 = _3769 * _3553.x;
                                frontier_phi_83_pred_5 = _3695 * _3541.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3777 = frontier_phi_83_pred;
                            _3776 = frontier_phi_83_pred_1;
                            _3775 = frontier_phi_83_pred_2;
                            _3774 = frontier_phi_83_pred_3;
                            _3773 = frontier_phi_83_pred_4;
                            _3778 = frontier_phi_83_pred_5;
                            _3483 = _3776 + _3496;
                            _3484 = _3777 + _3497;
                            _3485 = _3778 + _3498;
                            _3480 = _3773 + _3493;
                            _3481 = _3774 + _3494;
                            _3482 = _3775 + _3495;
                            if (_3500 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3500;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3485;
                        frontier_phi_77_pred_1 = _3484;
                        frontier_phi_77_pred_2 = _3483;
                        frontier_phi_77_pred_3 = _3482;
                        frontier_phi_77_pred_4 = _3481;
                        frontier_phi_77_pred_5 = _3480;
                    }
                    _3122 = frontier_phi_77_pred;
                    _3120 = frontier_phi_77_pred_1;
                    _3118 = frontier_phi_77_pred_2;
                    _3116 = frontier_phi_77_pred_3;
                    _3114 = frontier_phi_77_pred_4;
                    _3112 = frontier_phi_77_pred_5;
                    uint _3278 = _3277 + 1u;
                    if (_3278 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3271 = _3112;
                        _3272 = _3114;
                        _3273 = _3116;
                        _3274 = _3118;
                        _3275 = _3120;
                        _3276 = _3122;
                        _3277 = _3278;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3116;
                frontier_phi_58_59_ladder_1 = _3122;
                frontier_phi_58_59_ladder_2 = _3120;
                frontier_phi_58_59_ladder_3 = _3118;
                frontier_phi_58_59_ladder_4 = _3114;
                frontier_phi_58_59_ladder_5 = _3112;
            }
            else
            {
                frontier_phi_58_59_ladder = _2994;
                frontier_phi_58_59_ladder_1 = _3000;
                frontier_phi_58_59_ladder_2 = _2998;
                frontier_phi_58_59_ladder_3 = _2996;
                frontier_phi_58_59_ladder_4 = _2992;
                frontier_phi_58_59_ladder_5 = _2990;
            }
            _3111 = frontier_phi_58_59_ladder_5;
            _3113 = frontier_phi_58_59_ladder_4;
            _3115 = frontier_phi_58_59_ladder;
            _3117 = frontier_phi_58_59_ladder_3;
            _3119 = frontier_phi_58_59_ladder_2;
            _3121 = frontier_phi_58_59_ladder_1;
        }
        float _3126 = isnan(1.0) ? _1118 : (isnan(_1118) ? 1.0 : min(_1118, 1.0));
        _2902 = (_3126 * _3117) + _2335;
        _2904 = (_3126 * _3119) + _2337;
        _2906 = (_3126 * _3121) + _2339;
        _2908 = ((_3111 * _1103) * _3126) + _2683;
        _2910 = ((_3113 * _1105) * _3126) + _2685;
        _2912 = ((_3115 * _1106) * _3126) + _2687;
    }
    else
    {
        _2902 = _2335;
        _2904 = _2337;
        _2906 = _2339;
        _2908 = _2683;
        _2910 = _2685;
        _2912 = _2687;
    }
    float _4919 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _4930 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _4941 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _2929 = ((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2902 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1118))) + ((_2908 + ((isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0))) * _1954)) * cbPerFrame._m0[3u].x);
    float _2930 = ((isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2904 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1118))) + ((_2910 + ((isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0))) * _1954)) * cbPerFrame._m0[3u].x);
    float _2931 = ((isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2906 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1118))) + ((_2912 + ((isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0))) * _1954)) * cbPerFrame._m0[3u].x);
    uint _2932 = _1046 + 6u;
    float _2940 = _991 / cbSceneParam._m0[86u].x;
    float _2941 = _992 / cbSceneParam._m0[86u].y;
    vec4 _2955 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2940, _2941, (log2((isnan(cbSceneParam._m0[77u].w) ? _914 : (isnan(_914) ? cbSceneParam._m0[77u].w : min(_914, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2957 = _2955.x;
    float _2958 = _2955.y;
    float _2959 = _2955.z;
    float _2960 = _2955.w;
    float _3053;
    float _3055;
    float _3057;
    float _3059;
    if (_914 > cbSceneParam._m0[78u].w)
    {
        float _3015 = isnan(_914) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _914 : min(cbSceneParam._m0[80u].w, _914));
        float _3016 = _3015 / _914;
        float _3027 = _3016 * _964;
        float _3028 = _965 * _3016;
        float _3029 = (-0.0) - _3028;
        float _3031 = _3016 * _966;
        float _3033 = (cbSceneParam._m0[77u].w * _3029) / _3015;
        float _3034 = _3033 + cbSceneParam._m0[79u].w;
        float _3035 = cbSceneParam._m0[79u].w - _3028;
        float _3041 = sqrt(((_3027 * _3027) + (_3028 * _3028)) + (_3031 * _3031));
        float _3044 = (1.0 - (cbSceneParam._m0[77u].w / _3015)) * _3041;
        float _3049 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3051 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3228;
        if (abs((_3029 - _3033) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3228 = ((((_3034 > 0.0) ? exp2(_3049 * _3034) : (2.0 - exp2(_3051 * _3034))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3044;
        }
        else
        {
            float _3172 = 1.0 / cbSceneParam._m0[80u].x;
            float _3173 = isnan(_3035) ? _3034 : (isnan(_3034) ? _3035 : max(_3034, _3035));
            float _3174 = isnan(_3035) ? _3034 : (isnan(_3034) ? _3035 : min(_3034, _3035));
            float _3183 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : min(_3173, 0.0));
            float _3184 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : min(_3174, 0.0));
            _3228 = ((abs(_3041 / _3029) * cbSceneParam._m0[80u].y) * ((((_3183 - _3184) * 2.0) - ((exp2(_3049 * (isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0)))) - exp2(_3049 * (isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))))) * _3172)) - ((exp2(_3051 * _3183) - exp2(_3051 * _3184)) * _3172))) + (_3044 * cbSceneParam._m0[80u].z);
        }
        vec4 _3230 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2940, _2941, 1.0), 0.0);
        float _3239 = exp2((_3228 * (-1.44269502162933349609375)) * (1.0 - _3230.w));
        float _3240 = log2(_3239);
        float _3256 = log2(_2960);
        _3053 = (exp2(_3256 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].x)) * _3230.x) / cbSceneParam._m0[78u].x)) + _2957;
        _3055 = (exp2(_3256 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].y)) * _3230.y) / cbSceneParam._m0[78u].y)) + _2958;
        _3057 = (exp2(_3256 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].z)) * _3230.z) / cbSceneParam._m0[78u].z)) + _2959;
        _3059 = _3239 * _2960;
    }
    else
    {
        _3053 = _2957;
        _3055 = _2958;
        _3057 = _2959;
        _3059 = _2960;
    }
    bool _3266;
    vec4 _3069;
    vec4 _3091;
    float _3093;
    float _3097;
    float _3098;
    float _3099;
    float _3100;
    bool _3110;
    for (;;)
    {
        _3069 = cbMatDynParam._m0[0u];
        float _3071 = roundEven(_3069.y);
        bool _3072 = _3071 == 3.0;
        float _3073 = log2(_3059);
        float _3080 = exp2(_3073 * cbSceneParam._m0[78u].x) * _2929;
        float _3081 = exp2(_3073 * cbSceneParam._m0[78u].y) * _2930;
        float _3082 = exp2(_3073 * cbSceneParam._m0[78u].z) * _2931;
        float _3089 = _980 + (-0.5);
        _3091 = cbMtdParam._m0[1u];
        _3093 = _3091.y * _3089;
        float _3096 = (_3071 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3097 = _3096 * (_3072 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3053)));
        _3098 = _3096 * (_3072 ? _3081 : (_3081 + (cbSceneParam._m0[72u].w * _3055)));
        _3099 = _3096 * (_3072 ? _3082 : (_3082 + (cbSceneParam._m0[72u].w * _3057)));
        _3100 = _3089 * 0.999000012874603271484375;
        _3110 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3110)
        {
            if ((cbInstanceData._m0[_1046 + 7u].x + _3100) < 0.5)
            {
                _3266 = true;
                break;
            }
        }
        uint _3207 = _1047 + uint(_3069.w);
        if ((cbInstanceData._m0[_3207].w < 1.0) && ((cbInstanceData._m0[_3207].w + _3100) < 0.5))
        {
            _3266 = true;
            break;
        }
        if ((_3093 + 1.0) < _3091.x)
        {
            _3266 = true;
            break;
        }
        _3266 = false;
        break;
    }
    float _3471;
    if (_3266)
    {
        discard_state = true;
        _3471 = 0.0;
    }
    else
    {
        _3471 = cbInstanceData._m0[_2932].w;
    }
    SV_Target.x = _3097;
    SV_Target.y = _3098;
    SV_Target.z = _3099;
    SV_Target.w = _3471;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2932].w;
    discard_exit();
}


