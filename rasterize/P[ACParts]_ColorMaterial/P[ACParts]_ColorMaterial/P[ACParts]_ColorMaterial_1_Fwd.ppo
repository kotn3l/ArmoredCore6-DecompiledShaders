#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1280;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _261 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _268 = log2(0.0);
    float _270 = exp2(_268 * cbMtdParam._m0[24u].y);
    float _274 = _270 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _270);
    float _275 = _270 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _270);
    float _276 = _270 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _270);
    float _277 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _278 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _279 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _280 = isnan(1.0) ? _277 : (isnan(_277) ? 1.0 : min(_277, 1.0));
    float _282 = isnan(1.0) ? _278 : (isnan(_278) ? 1.0 : min(_278, 1.0));
    float _283 = isnan(1.0) ? _279 : (isnan(_279) ? 1.0 : min(_279, 1.0));
    vec4 _298 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _302 = _298.z;
    float _303 = _298.w;
    float _304 = 1.0 - _303;
    float _313 = exp2(log2((1.0 - (_304 * _302)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _314 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _315 = isnan(1.0) ? _314 : (isnan(_314) ? 1.0 : min(_314, 1.0));
    float _324 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_304 * _304) * _302))) * cbMtdParam._m0[26u].y);
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    vec4 _338 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _344 = (_338.y * ((isnan(1.0) ? _325 : (isnan(_325) ? 1.0 : min(_325, 1.0))) - _303)) + _303;
    float _351 = roundEven(5.0 - ((_338.x + (-0.02500000037252902984619140625)) * 8.0));
    float _352 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _353 = isnan(4.0) ? _352 : (isnan(_352) ? 4.0 : min(_352, 4.0));
    float _366 = floor(_353);
    vec4 _369 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w, _366));
    float _379 = cbMtdParam._m0[10u].x * _369.x;
    float _380 = cbMtdParam._m0[10u].y * _369.y;
    float _381 = cbMtdParam._m0[10u].z * _369.z;
    vec4 _393 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _413 = (((cbMtdParam._m0[9u].x * _393.x) - _379) * _344) + _379;
    float _414 = (((cbMtdParam._m0[9u].y * _393.y) - _380) * _344) + _380;
    float _415 = (((cbMtdParam._m0[9u].z * _393.z) - _381) * _344) + _381;
    vec4 _428 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _448 = (((cbMtdParam._m0[20u].x * _428.x) - _413) * _315) + _413;
    float _449 = (((cbMtdParam._m0[20u].y * _428.y) - _414) * _315) + _414;
    float _450 = (((cbMtdParam._m0[20u].z * _428.z) - _415) * _315) + _415;
    vec4 _462 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _486 = (_261.x * 4.5) * ((((cbMtdParam._m0[23u].x * _462.x) - _448) * _280) + _448);
    float _488 = (_261.y * 4.5) * ((((cbMtdParam._m0[23u].y * _462.y) - _449) * _282) + _449);
    float _490 = (_261.z * 4.5) * ((((cbMtdParam._m0[23u].z * _462.z) - _450) * _283) + _450);
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[26u].w;
    _194[0u] = cbMtdParam._m0[27u].x;
    _193[1u] = cbMtdParam._m0[27u].y;
    _194[1u] = cbMtdParam._m0[27u].z;
    _193[2u] = cbMtdParam._m0[27u].w;
    _194[2u] = cbMtdParam._m0[28u].x;
    _193[3u] = cbMtdParam._m0[28u].y;
    _194[3u] = cbMtdParam._m0[28u].z;
    _193[4u] = cbMtdParam._m0[28u].w;
    _194[4u] = cbMtdParam._m0[29u].x;
    float _522 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    uint _524 = uint(int(isnan(4.0) ? _522 : (isnan(_522) ? 4.0 : min(_522, 4.0))));
    float _536 = ((cbMtdParam._m0[30u].x - _194[_524]) * _344) + _194[_524];
    float _541 = ((cbMtdParam._m0[30u].z - _536) * _315) + _536;
    float _549 = ((cbMtdParam._m0[31u].x - _541) * _280) + _541;
    vec4 _565 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w, _366));
    float _567 = _565.x;
    float _568 = _565.y;
    float _570 = _565.z + _193[_524];
    vec4 _583 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _591 = (((cbMtdParam._m0[29u].w - _570) + _583.z) * _344) + _570;
    vec4 _604 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _612 = (((cbMtdParam._m0[30u].y - _591) + _604.z) * _315) + _591;
    float _618 = ((((_302 * 2.0) * _612) - _612) * cbMtdParam._m0[25u].y) + _612;
    vec4 _630 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _638 = (((_630.z + cbMtdParam._m0[30u].w) - _618) * _283) + _618;
    float _651 = ((_583.x - _567) * _344) + _567;
    float _652 = ((_583.y - _568) * _344) + _568;
    float _657 = ((_604.x - _651) * _315) + _651;
    float _658 = ((_604.y - _652) * _315) + _652;
    float _667 = ((((_630.x - _657) * _280) + _657) * 2.0) + (-1.0);
    float _668 = ((((_630.y - _658) * _282) + _658) * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _3681 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _674 = sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))));
    float _677 = _667 + (cbMtdParam._m0[25u].z * ((_298.x * 2.0) + (-1.0)));
    float _678 = _668 + (cbMtdParam._m0[25u].z * ((_298.y * 2.0) + (-1.0)));
    float _681 = fma(_674, _229 * NORMAL.x, fma(_678, _236 * TANGENT.x, (_222 * _214) * _677));
    float _684 = fma(_674, _229 * NORMAL.y, fma(_678, _236 * TANGENT.y, (_222 * _215) * _677));
    float _687 = fma(_674, _229 * NORMAL.z, fma(_678, _236 * TANGENT.z, (_222 * _216) * _677));
    float _691 = inversesqrt(dot(vec3(_681, _684, _687), vec3(_681, _684, _687)));
    float _692 = _691 * _681;
    float _693 = _691 * _684;
    float _694 = _691 * _687;
    float _3692 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _695 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3714 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3725 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3736 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _699 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _715 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _765 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _755);
    float _766 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _755);
    float _767 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _755);
    float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
    float _772 = _765 * _771;
    float _773 = _766 * _771;
    float _774 = _767 * _771;
    float _780 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _781 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _783 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _785 = _783.w;
    float _803 = fma(_694, cbSceneParam._m0[5u].z, fma(_693, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _692));
    float _806 = fma(_694, cbSceneParam._m0[6u].z, fma(_693, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _692));
    float _809 = fma(_694, cbSceneParam._m0[7u].z, fma(_693, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _692));
    vec4 _811 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _822 = (((_811.y - _695) + (_811.w * _695)) * cbMtdParam._m0[3u].x) + _695;
    uint _835 = uint(roundEven(NORMAL.w)) * 13u;
    uint _838 = (_835 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _844 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * cbInstanceData._m0[_838].x;
    float _845 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_838].y;
    float _846 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * cbInstanceData._m0[_838].z;
    float _3747 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    vec4 _850 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _855 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _866 = (((_855.x - _699) + (_855.w * _699)) * cbMtdParam._m0[3u].x) + _699;
    float _879 = (cbMtdParam._m0[3u].x * (((_847 * _785) - _847) + _850.x)) + _847;
    float _880 = (cbMtdParam._m0[3u].x * (((_848 * _785) - _848) + _850.y)) + _848;
    float _881 = (cbMtdParam._m0[3u].x * (((_849 * _785) - _849) + _850.z)) + _849;
    float _882 = 1.0 - _866;
    float _883 = _882 * _879;
    float _884 = _882 * _880;
    float _885 = _882 * _881;
    float _890 = (_879 + (-0.039999999105930328369140625)) * _866;
    float _891 = (_880 + (-0.039999999105930328369140625)) * _866;
    float _892 = (_881 + (-0.039999999105930328369140625)) * _866;
    float _893 = _890 + 0.039999999105930328369140625;
    float _895 = _891 + 0.039999999105930328369140625;
    float _896 = _892 + 0.039999999105930328369140625;
    vec4 _905 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _780, cbSceneParam._m0[86u].y * _781));
    float _908 = _905.x * TEXCOORD_5.w;
    float _909 = dot(vec3(_692, _693, _694), vec3(_772, _773, _774));
    float _912 = _909 * 2.0;
    float _916 = (_912 * _692) - _772;
    float _917 = (_912 * _693) - _773;
    float _918 = (_912 * _694) - _774;
    float _922 = abs(dot(vec3(_772, _773, _774), vec3(_692, _693, _694)));
    float _3780 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _924 = sqrt(_822);
    float _935 = exp2((_924 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_924 * 3.0));
    float _941 = (1.0 - _935) * ((_924 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _942 = _935 * _924;
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1279;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1004 = fma(_978, cbModelParam._m0[26u].z, fma(_974, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _970));
        float _1008 = fma(_978, cbModelParam._m0[27u].z, fma(_974, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _970));
        float _1012 = fma(_978, cbModelParam._m0[28u].z, fma(_974, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _970));
        float _1037 = _970 + _692;
        float _1038 = _974 + _693;
        float _1039 = _978 + _694;
        float _1049 = fma(_1039, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037)) - _1004;
        float _1050 = fma(_1039, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037)) - _1008;
        float _1051 = fma(_1039, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037)) - _1012;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1004 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1008 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[34u].z) + ((((((_1012 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1107 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1073.x + (-0.5));
        float _1109 = _1107 * (_1073.y + (-0.5));
        float _1110 = _1107 * (_1073.z + (-0.5));
        float _1117 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1080.x + (-0.5));
        float _1119 = _1117 * (_1080.y + (-0.5));
        float _1120 = _1117 * (_1080.z + (-0.5));
        float _1127 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1087.x + (-0.5));
        float _1129 = _1127 * (_1087.y + (-0.5));
        float _1130 = _1127 * (_1087.z + (-0.5));
        float _1137 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1094.x + (-0.5));
        float _1139 = _1137 * (_1094.y + (-0.5));
        float _1140 = _1137 * (_1094.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1161 = (dot(vec3(_692, _693, _694), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1171 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3828 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1173 + 1.0))) + _1178) * _1141;
        float _1188 = _1109 * 0.5;
        float _1189 = _1119 * 0.5;
        float _1190 = _1129 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_692, _693, _694), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3861 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1215 + 1.0))) + _1220) * _1142;
        float _1230 = _1110 * 0.5;
        float _1231 = _1120 * 0.5;
        float _1232 = _1130 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_692, _693, _694), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3894 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1257 + 1.0))) + _1262) * _1143;
        _1279 = _1110;
        _1281 = _1109;
        _1282 = _1108;
        _1283 = _1120;
        _1284 = _1119;
        _1285 = _1118;
        _1286 = _1130;
        _1287 = _1129;
        _1288 = _1128;
        _1289 = _1143;
        _1290 = _1142;
        _1291 = _1141;
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _1280;
        _1281 = _1280;
        _1282 = _1280;
        _1283 = _1280;
        _1284 = _1280;
        _1285 = _1280;
        _1286 = _1280;
        _1287 = _1280;
        _1288 = _1280;
        _1289 = _1280;
        _1290 = _1280;
        _1291 = _1280;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1317 = fma(_978, cbModelParam._m0[30u].z, fma(_974, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _970));
        float _1321 = fma(_978, cbModelParam._m0[31u].z, fma(_974, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _970));
        float _1325 = fma(_978, cbModelParam._m0[32u].z, fma(_974, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _970));
        float _1348 = _970 + _692;
        float _1349 = _974 + _693;
        float _1350 = _978 + _694;
        float _1360 = fma(_1350, cbModelParam._m0[30u].z, fma(_1349, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1348)) - _1317;
        float _1361 = fma(_1350, cbModelParam._m0[31u].z, fma(_1349, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1348)) - _1321;
        float _1362 = fma(_1350, cbModelParam._m0[32u].z, fma(_1349, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1348)) - _1325;
        float _1366 = inversesqrt(dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362)));
        float _1379 = ((_1366 * _1360) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1317 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1366 * _1361) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1321 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1366 * _1362) / cbModelParam._m0[35u].z) + ((((((_1325 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        float _1416 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1383.x + (-0.5));
        float _1418 = _1416 * (_1383.y + (-0.5));
        float _1419 = _1416 * (_1383.z + (-0.5));
        float _1426 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1390.x + (-0.5));
        float _1428 = _1426 * (_1390.y + (-0.5));
        float _1429 = _1426 * (_1390.z + (-0.5));
        float _1436 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1397.x + (-0.5));
        float _1438 = _1436 * (_1397.y + (-0.5));
        float _1439 = _1436 * (_1397.z + (-0.5));
        float _1446 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1404.x + (-0.5));
        float _1448 = _1446 * (_1404.y + (-0.5));
        float _1449 = _1446 * (_1404.z + (-0.5));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = _1417 * 0.5;
        float _1454 = _1427 * 0.5;
        float _1455 = _1437 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_692, _693, _694), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _3957 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1480 + 1.0))) + _1485) * _1450;
        float _1495 = _1418 * 0.5;
        float _1496 = _1428 * 0.5;
        float _1497 = _1438 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_692, _693, _694), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _3990 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1522 + 1.0))) + _1527) * _1451;
        float _1537 = _1419 * 0.5;
        float _1538 = _1429 * 0.5;
        float _1539 = _1439 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_692, _693, _694), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4023 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1564 + 1.0))) + _1569) * _1452;
        _1586 = _1419;
        _1587 = _1418;
        _1588 = _1417;
        _1589 = _1429;
        _1590 = _1428;
        _1591 = _1427;
        _1592 = _1439;
        _1593 = _1438;
        _1594 = _1437;
        _1595 = _1452;
        _1596 = _1451;
        _1597 = _1450;
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
    }
    else
    {
        _1586 = _1280;
        _1587 = _1280;
        _1588 = _1280;
        _1589 = _1280;
        _1590 = _1280;
        _1591 = _1280;
        _1592 = _1280;
        _1593 = _1280;
        _1594 = _1280;
        _1595 = _1280;
        _1596 = _1280;
        _1597 = _1280;
        _1598 = 0.0;
        _1599 = 0.0;
        _1600 = 0.0;
    }
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1292)) + _1292;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1293)) + _1293;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1294)) + _1294;
    float _1633 = fma(_1612, cbSceneParam._m0[89u].z, fma(_1611, cbSceneParam._m0[89u].y, _1610 * cbSceneParam._m0[89u].x));
    float _1636 = fma(_1612, cbSceneParam._m0[90u].z, fma(_1611, cbSceneParam._m0[90u].y, _1610 * cbSceneParam._m0[90u].x));
    float _1639 = fma(_1612, cbSceneParam._m0[91u].z, fma(_1611, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1610));
    float _1654 = _916 * 0.5;
    float _1655 = _917 * 0.5;
    float _1656 = _918 * 0.5;
    float _1657 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1660 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1663 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1697;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1670 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1279, _1283, _1286, _1289));
        float _1674 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1678 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1685 = dot(vec4(cbModelParam._m0[39u]), vec4(_1654, _1655, _1656, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1685) ? 0.0 : (isnan(0.0) ? _1685 : max(0.0, _1685))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1708;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1699 = dot(vec4(cbModelParam._m0[40u]), vec4(_1654, _1655, _1656, 1.0));
        _1708 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1699) ? 0.0 : (isnan(0.0) ? _1699 : max(0.0, _1699))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1708 = 1.0;
    }
    float _1712 = (_1708 * cbModelParam._m0[1u].x) + (_1697 * (1.0 - cbModelParam._m0[1u].x));
    float _1722 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1723 = isnan(_1722) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1722 : min(cbModelParam._m0[25u].z, _1722));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1772 = fma(_978, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _970)) + cbModelParam._m0[13u].w;
        float _1776 = fma(_978, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _970)) + cbModelParam._m0[14u].w;
        float _1780 = fma(_978, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _970)) + cbModelParam._m0[15u].w;
        float _1783 = fma(_918, cbModelParam._m0[13u].z, fma(_917, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916));
        float _1786 = fma(_918, cbModelParam._m0[14u].z, fma(_917, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916));
        float _1789 = fma(_918, cbModelParam._m0[15u].z, fma(_917, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916));
        float _1817;
        if (_1783 > 0.0)
        {
            _1817 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1817 = frontier_phi_14_12_ladder;
        }
        float _2024;
        if (_1786 > 0.0)
        {
            _2024 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2024 = frontier_phi_23_19_ladder;
        }
        float _2278;
        if (_1789 > 0.0)
        {
            _2278 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2278 = frontier_phi_35_30_ladder;
        }
        float _2280 = isnan(_2024) ? _1817 : (isnan(_1817) ? _2024 : min(_1817, _2024));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1783) + _1772;
        float _2286 = (_2281 * _1786) + _1776;
        float _2287 = (_2281 * _1789) + _1780;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2290 = (-1.0) - _2288;
        float _2292 = _2288 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2287 > _2292) || ((_2287 < _2290) || ((_2286 > _2292) || ((_2286 < _2290) || ((_2285 < _2290) || (_2285 > _2292))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2287, cbModelParam._m0[9u].z, fma(_2286, cbModelParam._m0[9u].y, _2285 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2287, cbModelParam._m0[10u].z, fma(_2286, cbModelParam._m0[10u].y, _2285 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2287, cbModelParam._m0[11u].z, fma(_2286, cbModelParam._m0[11u].y, _2285 * cbModelParam._m0[11u].x))), _1723);
            frontier_phi_13_35_ladder = _2415.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2415.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2415.x * cbModelParam._m0[1u].y;
        }
        _1805 = frontier_phi_13_35_ladder_2;
        _1807 = frontier_phi_13_35_ladder_1;
        _1809 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_916, _917, _918), _1723);
        _1805 = _1793.x * cbModelParam._m0[1u].y;
        _1807 = _1793.y * cbModelParam._m0[1u].y;
        _1809 = _1793.z * cbModelParam._m0[1u].y;
    }
    float _1813 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1813 : min(cbModelParam._m0[25u].w, _1813));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1871 = fma(_978, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _970)) + cbModelParam._m0[21u].w;
        float _1875 = fma(_978, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _970)) + cbModelParam._m0[22u].w;
        float _1879 = fma(_978, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _970)) + cbModelParam._m0[23u].w;
        float _1882 = fma(_918, cbModelParam._m0[21u].z, fma(_917, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916));
        float _1885 = fma(_918, cbModelParam._m0[22u].z, fma(_917, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916));
        float _1888 = fma(_918, cbModelParam._m0[23u].z, fma(_917, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916));
        float _2029;
        if (_1882 > 0.0)
        {
            _2029 = abs((1.0 - _1871) / _1882);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1871 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2029 = frontier_phi_25_21_ladder;
        }
        float _2305;
        if (_1885 > 0.0)
        {
            _2305 = abs((1.0 - _1875) / _1885);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1875 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2305 = frontier_phi_37_32_ladder;
        }
        float _2518;
        if (_1888 > 0.0)
        {
            _2518 = abs((1.0 - _1879) / _1888);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1879 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2518 = frontier_phi_46_43_ladder;
        }
        float _2520 = isnan(_2305) ? _2029 : (isnan(_2029) ? _2305 : min(_2029, _2305));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _1882) + _1871;
        float _2526 = (_2521 * _1885) + _1875;
        float _2527 = (_2521 * _1888) + _1879;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2529 = (-1.0) - _2528;
        float _2531 = _2528 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2527 > _2531) || ((_2527 < _2529) || ((_2526 > _2531) || ((_2526 < _2529) || ((_2525 < _2529) || (_2525 > _2531))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2527, cbModelParam._m0[17u].z, fma(_2526, cbModelParam._m0[17u].y, _2525 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2527, cbModelParam._m0[18u].z, fma(_2526, cbModelParam._m0[18u].y, _2525 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2527, cbModelParam._m0[19u].z, fma(_2526, cbModelParam._m0[19u].y, _2525 * cbModelParam._m0[19u].x))), _1814);
            frontier_phi_22_46_ladder = _2726.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2726.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2726.x * cbModelParam._m0[1u].z;
        }
        _1907 = frontier_phi_22_46_ladder_2;
        _1909 = frontier_phi_22_46_ladder_1;
        _1911 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_916, _917, _918), _1814);
        _1907 = _1891.x * cbModelParam._m0[1u].z;
        _1909 = _1891.y * cbModelParam._m0[1u].z;
        _1911 = _1891.z * cbModelParam._m0[1u].z;
    }
    float _1924 = (((_941 * _893) + _942) * _908) * ((cbModelParam._m0[1u].w * (_1907 - _1805)) + _1805);
    float _1926 = (((_941 * _895) + _942) * _908) * ((cbModelParam._m0[1u].w * (_1909 - _1807)) + _1807);
    float _1928 = (((_941 * _896) + _942) * _908) * ((cbModelParam._m0[1u].w * (_1911 - _1809)) + _1809);
    float _1931 = fma(_1928, cbSceneParam._m0[89u].z, fma(_1926, cbSceneParam._m0[89u].y, _1924 * cbSceneParam._m0[89u].x));
    float _1934 = fma(_1928, cbSceneParam._m0[90u].z, fma(_1926, cbSceneParam._m0[90u].y, _1924 * cbSceneParam._m0[90u].x));
    float _1937 = fma(_1928, cbSceneParam._m0[91u].z, fma(_1926, cbSceneParam._m0[91u].y, _1924 * cbSceneParam._m0[91u].x));
    uvec4 _1947 = floatBitsToUint(cbInstanceData._m0[_835 + 5u]);
    uint _1949 = _1947.x * 14u;
    uint _1950 = _1949 + 13u;
    float _1957 = _908 + (-1.0);
    float _1962 = (cbLight._m0[_1950].x * _1957) + 1.0;
    float _1963 = (cbLight._m0[_1950].y * _1957) + 1.0;
    float _1964 = (cbLight._m0[_1950].z * _1957) + 1.0;
    float _1965 = (cbLight._m0[_1950].w * _1957) + 1.0;
    uint _1966 = _1949 + 5u;
    float _1972 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
    uint _1976 = _1949 + 4u;
    float _1982 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
    uint _1986 = _1949 | 1u;
    float _1997 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_692, _693, _694));
    float _2000 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_692, _693, _694));
    float _4159 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _4170 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2005 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 0.3183098733425140380859375;
    float _2007 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * 0.3183098733425140380859375;
    float _2014 = ((cbLight._m0[_1966].x * _1972) * _2007) + ((cbLight._m0[_1976].x * _1982) * _2005);
    float _2015 = ((_1972 * cbLight._m0[_1966].y) * _2007) + ((_1982 * cbLight._m0[_1976].y) * _2005);
    float _2016 = ((_1972 * cbLight._m0[_1966].z) * _2007) + ((_1982 * cbLight._m0[_1976].z) * _2005);
    uvec4 _2021 = floatBitsToUint(cbLight._m0[_1949 + 12u]);
    bool _2023 = _2021.x == 0u;
    float _2034;
    float _2036;
    float _2038;
    if (_2023)
    {
        _2034 = _2014;
        _2036 = _2015;
        _2038 = _2016;
    }
    else
    {
        uint _2042 = _1949 + 6u;
        float _2058 = (dot(vec3(cbLight._m0[_1949 + 2u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2059 = _2058 * _2058;
        float _4181 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2060 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2061 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2034 = (((cbLight._m0[_2042].x * 0.3183098733425140380859375) * _2060) * _2061) + _2014;
        _2036 = (((cbLight._m0[_2042].y * 0.3183098733425140380859375) * _2060) * _2061) + _2015;
        _2038 = (((cbLight._m0[_2042].z * 0.3183098733425140380859375) * _2060) * _2061) + _2016;
    }
    bool _2041 = _2021.y == 0u;
    float _2079;
    float _2081;
    float _2083;
    if (_2041)
    {
        _2079 = _2034;
        _2081 = _2036;
        _2083 = _2038;
    }
    else
    {
        uint _2249 = _1949 + 7u;
        float _2265 = (dot(vec3(cbLight._m0[_1949 + 3u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2266 = _2265 * _2265;
        float _4197 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2267 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2268 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2079 = (((cbLight._m0[_2249].x * 0.3183098733425140380859375) * _2267) * _2268) + _2034;
        _2081 = (((cbLight._m0[_2249].y * 0.3183098733425140380859375) * _2267) * _2268) + _2036;
        _2083 = (((cbLight._m0[_2249].z * 0.3183098733425140380859375) * _2267) * _2268) + _2038;
    }
    uint _2086 = _1949 + 8u;
    float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _822) * 0.949999988079071044921875);
    float _2100 = _2099 * _2099;
    float _2101 = cbLight._m0[_1949].x + _772;
    float _2102 = cbLight._m0[_1949].y + _773;
    float _2103 = cbLight._m0[_1949].z + _774;
    float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
    float _2108 = _2107 * _2101;
    float _2109 = _2107 * _2102;
    float _2110 = _2107 * _2103;
    float _2111 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_1949].xyz));
    float _4213 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _2115 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2116 = dot(vec3(_692, _693, _694), vec3(_2108, _2109, _2110));
    float _4235 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2119 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _2120 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_2108, _2109, _2110));
    float _4246 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2124 = _2100 * _2100;
    float _2128 = ((_2119 * _2119) * (_2124 + (-1.0))) + 1.0;
    float _2136 = exp2(log2(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * 5.0);
    float _2137 = 0.959999978542327880859375 - _890;
    float _2139 = 0.959999978542327880859375 - _891;
    float _2140 = 0.959999978542327880859375 - _892;
    float _2147 = 1.0 - _2100;
    float _2158 = (0.5 / (((_2115 * ((_2114 * _2147) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2147) + _2100) * _2114))) * _2114;
    float _4257 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2160 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2124 / ((_2128 * _2128) * 3.141590118408203125));
    uint _2171 = _1949 + 9u;
    float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _822) * 0.949999988079071044921875);
    float _2183 = _2182 * _2182;
    float _2184 = cbLight._m0[_1986].x + _772;
    float _2185 = cbLight._m0[_1986].y + _773;
    float _2186 = cbLight._m0[_1986].z + _774;
    float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
    float _2191 = _2190 * _2184;
    float _2192 = _2190 * _2185;
    float _2193 = _2190 * _2186;
    float _2194 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_1986].xyz));
    float _4268 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2198 = dot(vec3(_692, _693, _694), vec3(_2191, _2192, _2193));
    float _4279 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2202 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2191, _2192, _2193));
    float _4290 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2206 = _2183 * _2183;
    float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
    float _2217 = exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0);
    float _2224 = 1.0 - _2183;
    float _2234 = (0.5 / (((_2115 * ((_2197 * _2224) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2224) + _2183) * _2197))) * _2197;
    float _4301 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2236 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
    float _2246 = (((((_2217 * _2137) + _893) * cbLight._m0[_2171].x) * _2236) * _1972) + (((((_2136 * _2137) + _893) * cbLight._m0[_2086].x) * _2160) * _1982);
    float _2247 = (((((_2217 * _2139) + _895) * cbLight._m0[_2171].y) * _2236) * _1972) + (((((_2136 * _2139) + _895) * cbLight._m0[_2086].y) * _2160) * _1982);
    float _2248 = (((((_2217 * _2140) + _896) * cbLight._m0[_2171].z) * _2236) * _1972) + (((((_2136 * _2140) + _896) * cbLight._m0[_2086].z) * _2160) * _1982);
    float _2310;
    float _2312;
    float _2314;
    if (_2023)
    {
        _2310 = _2246;
        _2312 = _2247;
        _2314 = _2248;
    }
    else
    {
        uint _2316 = _1949 + 2u;
        uint _2320 = _1949 + 10u;
        float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2316].w)) * _822) * 0.949999988079071044921875);
        float _2335 = _2334 * _2334;
        float _2336 = cbLight._m0[_2316].x + _772;
        float _2337 = cbLight._m0[_2316].y + _773;
        float _2338 = cbLight._m0[_2316].z + _774;
        float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
        float _2343 = _2342 * _2336;
        float _2344 = _2342 * _2337;
        float _2345 = _2342 * _2338;
        float _2346 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2316].xyz));
        float _4312 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2350 = dot(vec3(_692, _693, _694), vec3(_2343, _2344, _2345));
        float _4323 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2354 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_2343, _2344, _2345));
        float _4334 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2358 = _2335 * _2335;
        float _2362 = ((_2353 * _2353) * (_2358 + (-1.0))) + 1.0;
        float _2369 = exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0);
        float _2376 = 1.0 - _2335;
        float _2386 = (0.5 / (((_2115 * ((_2349 * _2376) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2376) + _2335) * _2349))) * _2349;
        float _4345 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2388 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2358 / ((_2362 * _2362) * 3.141590118408203125));
        float _2389 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2310 = (((((_2369 * _2137) + _893) * cbLight._m0[_2320].x) * _2388) * _2389) + _2246;
        _2312 = (((((_2369 * _2139) + _895) * cbLight._m0[_2320].y) * _2388) * _2389) + _2247;
        _2314 = (((((_2369 * _2140) + _896) * cbLight._m0[_2320].z) * _2388) * _2389) + _2248;
    }
    float _2424;
    float _2426;
    float _2428;
    if (_2041)
    {
        _2424 = _2310;
        _2426 = _2312;
        _2428 = _2314;
    }
    else
    {
        uint _2435 = _1949 + 3u;
        uint _2439 = _1949 + 11u;
        float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2435].w)) * _822) * 0.949999988079071044921875);
        float _2454 = _2453 * _2453;
        float _2455 = cbLight._m0[_2435].x + _772;
        float _2456 = cbLight._m0[_2435].y + _773;
        float _2457 = cbLight._m0[_2435].z + _774;
        float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
        float _2462 = _2461 * _2455;
        float _2463 = _2461 * _2456;
        float _2464 = _2461 * _2457;
        float _2465 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2435].xyz));
        float _4361 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2469 = dot(vec3(_692, _693, _694), vec3(_2462, _2463, _2464));
        float _4372 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2473 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_2462, _2463, _2464));
        float _4383 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2477 = _2454 * _2454;
        float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
        float _2488 = exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0);
        float _2495 = 1.0 - _2454;
        float _2505 = (0.5 / (((_2115 * ((_2468 * _2495) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2495) + _2454) * _2468))) * _2468;
        float _4394 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2507 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
        float _2508 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2424 = (((((_2488 * _2137) + _893) * cbLight._m0[_2439].x) * _2507) * _2508) + _2310;
        _2426 = (((((_2488 * _2139) + _895) * cbLight._m0[_2439].y) * _2507) * _2508) + _2312;
        _2428 = (((((_2488 * _2140) + _896) * cbLight._m0[_2439].z) * _2507) * _2508) + _2314;
    }
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    if (_1947.y == 0u)
    {
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2583;
        float _2585 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2583;
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2583;
        uvec4 _2598 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2599 = _2598.x;
        uint _2610 = uint((float(_2598.y) * floor(float(uint(cbSceneParam._m0[85u].y * _781) / _2599))) + floor(float(uint(cbSceneParam._m0[85u].x * _780) / _2599)));
        float _2620 = (log2(_2586 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2621 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        uint _2624 = uint(isnan(14.0) ? _2621 : (isnan(_2621) ? 14.0 : min(_2621, 14.0)));
        uvec4 _2629 = texelFetch(g_lightClusterGridBuffer, int(((_2624 << 2u) + (_2610 << 6u)) >> 2u));
        uint _2630 = _2629.x;
        uint _2631 = _2598.z;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        if (((((1u << ((_2631 >> 4u) & 15u)) + 4294967295u) & _2630) == 0u) || ((_2631 & 240u) == 0u))
        {
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
        }
        else
        {
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            uint _2882 = 0u;
            uint _2891;
            bool _2892;
            for (;;)
            {
                _2891 = texelFetch(g_lightClassification, int((((_2624 << 5u) + (_2610 << 9u)) + (_2882 << 2u)) >> 2u)).x;
                _2892 = _2891 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2892)
                {
                    frontier_phi_61_pred = _2876;
                    frontier_phi_61_pred_1 = _2881;
                    frontier_phi_61_pred_2 = _2880;
                    frontier_phi_61_pred_3 = _2879;
                    frontier_phi_61_pred_4 = _2878;
                    frontier_phi_61_pred_5 = _2877;
                }
                else
                {
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    uint _3006;
                    _3000 = _2876;
                    _3001 = _2877;
                    _3002 = _2878;
                    _3003 = _2879;
                    _3004 = _2880;
                    _3005 = _2881;
                    _3006 = _2891;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    for (;;)
                    {
                        uint _3010 = uint(findLSB(_3006)) + (_2882 << 5u);
                        uint _3007 = (_3006 + 4294967295u) & _3006;
                        uint _3012 = _3010 * 48u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 3u)).x));
                        uint _3032 = (_3010 * 48u) + 4u;
                        vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 3u)).x));
                        uint _3051 = (_3010 * 48u) + 8u;
                        vec3 _3062 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x));
                        float _3066 = _3026.x - _2584;
                        float _3067 = _3026.y - _2585;
                        float _3068 = _3026.z - _2586;
                        float _3069 = dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068));
                        float _3072 = inversesqrt(_3069);
                        float _3073 = _3072 * _3066;
                        float _3074 = _3072 * _3067;
                        float _3075 = _3072 * _3068;
                        float _3076 = dot(vec3(_803, _806, _809), vec3(_3073, _3074, _3075));
                        float _3081 = 1.0 - (_3069 * _3026.w);
                        float _4420 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3082 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                        float _3083 = sqrt(_3069) * _3045.w;
                        float _3086 = 1.39999997615814208984375 / (_3083 + 1.39999997615814208984375);
                        float _3087 = _3086 * _3086;
                        float _3090 = ((1.0 - _3087) * _3076) + _3087;
                        float _3093 = _3083 * _3083;
                        float _3097 = ((isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))) * _3082) / ((_3093 * 0.699999988079071044921875) + 1.0);
                        float _3101 = (-0.0) - _2584;
                        float _3102 = (-0.0) - _2585;
                        float _3103 = (-0.0) - _2586;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3108 = _3107 * _3101;
                        float _3109 = _3107 * _3102;
                        float _3110 = _3107 * _3103;
                        float _3118 = exp2(log2(1.0 / ((_3093 * 3.5) + 5.0)) * 0.25);
                        float _3119 = 1.0 - _924;
                        float _3126 = sqrt(1.0 - ((1.0 - (_3119 * _3119)) * (1.0 - (_3118 * _3118))));
                        float _3127 = _3126 * _3126;
                        float _3128 = _3127 * _3127;
                        float _3129 = _3108 + _3073;
                        float _3130 = _3109 + _3074;
                        float _3131 = _3110 + _3075;
                        float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                        float _3139 = dot(vec3(_803, _806, _809), vec3(_3108, _3109, _3110));
                        float _4436 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3143 = dot(vec3(_803, _806, _809), vec3(_3135 * _3129, _3135 * _3130, _3135 * _3131));
                        float _4447 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3150 = ((_3146 * _3146) * (_3128 + (-1.0))) + 1.0;
                        float _3151 = _3086 * _3127;
                        float _3152 = _3151 * _3151;
                        float _3155 = ((1.0 - _3152) * _3076) + _3152;
                        float _4458 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3157 = 1.0 - _3127;
                        float _3167 = (0.5 / (((_3156 * ((_3142 * _3157) + _3127)) + 9.9999999392252902907785028219223e-09) + (((_3156 * _3157) + _3127) * _3142))) * _3156;
                        float _4469 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3178 = (((_3128 * 3.1415927410125732421875) * (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) / ((_3150 * _3150) * ((_3093 * 2.1991131305694580078125) + 3.141590118408203125))) * _3082;
                        _2935 = (_3097 * _3045.x) + _3003;
                        _2936 = (_3097 * _3045.y) + _3004;
                        _2937 = (_3097 * _3045.z) + _3005;
                        _2932 = (_3178 * _3062.x) + _3000;
                        _2933 = (_3178 * _3062.y) + _3001;
                        _2934 = (_3178 * _3062.z) + _3002;
                        if (_3007 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3000 = _2932;
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _2935;
                            _3004 = _2936;
                            _3005 = _2937;
                            _3006 = _3007;
                        }
                    }
                    frontier_phi_61_pred = _2932;
                    frontier_phi_61_pred_1 = _2937;
                    frontier_phi_61_pred_2 = _2936;
                    frontier_phi_61_pred_3 = _2935;
                    frontier_phi_61_pred_4 = _2934;
                    frontier_phi_61_pred_5 = _2933;
                }
                _2732 = frontier_phi_61_pred;
                _2742 = frontier_phi_61_pred_1;
                _2740 = frontier_phi_61_pred_2;
                _2738 = frontier_phi_61_pred_3;
                _2736 = frontier_phi_61_pred_4;
                _2734 = frontier_phi_61_pred_5;
                uint _2883 = _2882 + 1u;
                if (_2883 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2876 = _2732;
                    _2877 = _2734;
                    _2878 = _2736;
                    _2879 = _2738;
                    _2880 = _2740;
                    _2881 = _2742;
                    _2882 = _2883;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
        }
        uvec4 _2745 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2746 = _2745.z;
        uint _2748 = (_2746 >> 8u) & 15u;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        if (((4294967295u << _2748) & _2630) == 0u)
        {
            _2844 = _2731;
            _2846 = _2733;
            _2848 = _2735;
            _2850 = _2737;
            _2852 = _2739;
            _2854 = _2741;
        }
        else
        {
            float _2869 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
            float _2870 = _2869 * _2584;
            float _2871 = _2869 * _2585;
            float _2872 = _2869 * _2586;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2748 < ((_2746 >> 12u) & 15u))
            {
                float _2845;
                float _2847;
                float _2849;
                float _2851;
                float _2853;
                float _2855;
                float _2983 = _2731;
                float _2984 = _2733;
                float _2985 = _2735;
                float _2986 = _2737;
                float _2987 = _2739;
                float _2988 = _2741;
                uint _2989 = _2748;
                uint _2998;
                bool _2999;
                for (;;)
                {
                    _2998 = texelFetch(g_lightClassification, int((((_2624 << 5u) + (_2610 << 9u)) + (_2989 << 2u)) >> 2u)).x;
                    _2999 = _2998 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2999)
                    {
                        frontier_phi_67_pred = _2986;
                        frontier_phi_67_pred_1 = _2987;
                        frontier_phi_67_pred_2 = _2988;
                        frontier_phi_67_pred_3 = _2985;
                        frontier_phi_67_pred_4 = _2984;
                        frontier_phi_67_pred_5 = _2983;
                    }
                    else
                    {
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3196 = _2983;
                        float _3197 = _2984;
                        float _3198 = _2985;
                        float _3199 = _2986;
                        float _3200 = _2987;
                        float _3201 = _2988;
                        uint _3202 = _2998;
                        uint _3203;
                        vec4 _3228;
                        float _3229;
                        vec4 _3244;
                        vec3 _3256;
                        vec4 _3272;
                        vec4 _3287;
                        float _3333;
                        bool _3334;
                        for (;;)
                        {
                            uint _3213 = ((_2989 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3202));
                            _3203 = (_3202 + 4294967295u) & _3202;
                            uint _3215 = _3213 * 40u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            _3229 = _3228.w;
                            uint _3231 = (_3213 * 40u) + 4u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3246 = (_3213 * 40u) + 8u;
                            _3256 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x));
                            uint _3259 = (_3213 * 40u) + 16u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3274 = (_3213 * 40u) + 20u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3289 = (_3213 * 40u) + 24u;
                            vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3308 = (_3213 * 40u) + 28u;
                            vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            _3333 = fma(_2586, _3321.z, fma(_2585, _3321.y, _3321.x * _2584)) + _3321.w;
                            _3334 = !((fma(_2586, _3302.z, fma(_2585, _3302.y, _3302.x * _2584)) + _3302.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3334)
                            {
                                float _3361 = _3228.x - _2584;
                                float _3362 = _3228.y - _2585;
                                float _3363 = _3228.z - _2586;
                                float _3364 = dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363));
                                float _3367 = inversesqrt(_3364);
                                float _3368 = _3367 * _3361;
                                float _3369 = _3367 * _3362;
                                float _3370 = _3367 * _3363;
                                float _3374 = 1.0 - (_3364 / (_3229 * _3229));
                                float _4480 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3379 = sqrt(_3364) * _3244.w;
                                float _3381 = 1.39999997615814208984375 / (_3379 + 1.39999997615814208984375);
                                float _3382 = _3381 * _3381;
                                float _3385 = ((1.0 - _3382) * dot(vec3(_3368, _3369, _3370), vec3(_803, _806, _809))) + _3382;
                                float _3388 = _3379 * _3379;
                                float _3392 = (fma(_2586, _3272.z, fma(_2585, _3272.y, _3272.x * _2584)) + _3272.w) / _3333;
                                float _3393 = (fma(_2586, _3287.z, fma(_2585, _3287.y, _3287.x * _2584)) + _3287.w) / _3333;
                                float _3397 = 1.0 - dot(vec2(_3392, _3393), vec2(_3392, _3393));
                                float _4496 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3398 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3399 = _3398 * (((isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))) * _3375) / ((_3388 * 0.699999988079071044921875) + 1.0));
                                float _3411 = exp2(log2(1.0 / ((_3388 * 3.5) + 5.0)) * 0.25);
                                float _3412 = 1.0 - _924;
                                float _3419 = sqrt(1.0 - ((1.0 - (_3412 * _3412)) * (1.0 - (_3411 * _3411))));
                                float _3420 = _3419 * _3419;
                                float _3421 = _3420 * _3420;
                                float _3422 = _3368 - _2870;
                                float _3423 = _3369 - _2871;
                                float _3424 = _3370 - _2872;
                                float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                                float _3432 = dot(vec3(_803, _806, _809), vec3((-0.0) - _2870, (-0.0) - _2871, (-0.0) - _2872));
                                float _4507 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3436 = dot(vec3(_803, _806, _809), vec3(_3428 * _3422, _3428 * _3423, _3428 * _3424));
                                float _4518 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3439 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3443 = ((_3439 * _3439) * (_3421 + (-1.0))) + 1.0;
                                float _3444 = _3381 * _3420;
                                float _3445 = _3444 * _3444;
                                float _3451 = ((1.0 - _3445) * dot(vec3(_803, _806, _809), vec3(_3368, _3369, _3370))) + _3445;
                                float _4529 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3453 = 1.0 - _3420;
                                float _3463 = (0.5 / (((_3452 * ((_3435 * _3453) + _3420)) + 9.9999999392252902907785028219223e-09) + (((_3452 * _3453) + _3420) * _3435))) * _3452;
                                float _4540 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3473 = (_3398 * _3375) * (((_3421 * 3.1415927410125732421875) * (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) / ((_3443 * _3443) * ((_3388 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3473 * _3256.x;
                                frontier_phi_73_pred_1 = _3473 * _3256.y;
                                frontier_phi_73_pred_2 = _3399 * _3244.z;
                                frontier_phi_73_pred_3 = _3399 * _3244.y;
                                frontier_phi_73_pred_4 = _3399 * _3244.x;
                                frontier_phi_73_pred_5 = _3473 * _3256.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3477 = frontier_phi_73_pred;
                            _3478 = frontier_phi_73_pred_1;
                            _3482 = frontier_phi_73_pred_2;
                            _3481 = frontier_phi_73_pred_3;
                            _3480 = frontier_phi_73_pred_4;
                            _3479 = frontier_phi_73_pred_5;
                            _3186 = _3480 + _3199;
                            _3187 = _3481 + _3200;
                            _3188 = _3482 + _3201;
                            _3183 = _3477 + _3196;
                            _3184 = _3478 + _3197;
                            _3185 = _3479 + _3198;
                            if (_3203 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3203;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3186;
                        frontier_phi_67_pred_1 = _3187;
                        frontier_phi_67_pred_2 = _3188;
                        frontier_phi_67_pred_3 = _3185;
                        frontier_phi_67_pred_4 = _3184;
                        frontier_phi_67_pred_5 = _3183;
                    }
                    _2851 = frontier_phi_67_pred;
                    _2853 = frontier_phi_67_pred_1;
                    _2855 = frontier_phi_67_pred_2;
                    _2849 = frontier_phi_67_pred_3;
                    _2847 = frontier_phi_67_pred_4;
                    _2845 = frontier_phi_67_pred_5;
                    uint _2990 = _2989 + 1u;
                    if (_2990 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2983 = _2845;
                        _2984 = _2847;
                        _2985 = _2849;
                        _2986 = _2851;
                        _2987 = _2853;
                        _2988 = _2855;
                        _2989 = _2990;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2853;
                frontier_phi_55_56_ladder_1 = _2855;
                frontier_phi_55_56_ladder_2 = _2851;
                frontier_phi_55_56_ladder_3 = _2849;
                frontier_phi_55_56_ladder_4 = _2847;
                frontier_phi_55_56_ladder_5 = _2845;
            }
            else
            {
                frontier_phi_55_56_ladder = _2739;
                frontier_phi_55_56_ladder_1 = _2741;
                frontier_phi_55_56_ladder_2 = _2737;
                frontier_phi_55_56_ladder_3 = _2735;
                frontier_phi_55_56_ladder_4 = _2733;
                frontier_phi_55_56_ladder_5 = _2731;
            }
            _2844 = frontier_phi_55_56_ladder_5;
            _2846 = frontier_phi_55_56_ladder_4;
            _2848 = frontier_phi_55_56_ladder_3;
            _2850 = frontier_phi_55_56_ladder_2;
            _2852 = frontier_phi_55_56_ladder;
            _2854 = frontier_phi_55_56_ladder_1;
        }
        float _2859 = isnan(1.0) ? _908 : (isnan(_908) ? 1.0 : min(_908, 1.0));
        _2643 = (_2859 * _2850) + _2079;
        _2645 = (_2859 * _2852) + _2081;
        _2647 = (_2859 * _2854) + _2083;
        _2649 = ((_2844 * _893) * _2859) + _2424;
        _2651 = ((_2846 * _895) * _2859) + _2426;
        _2653 = ((_2848 * _896) * _2859) + _2428;
    }
    else
    {
        _2643 = _2079;
        _2645 = _2081;
        _2647 = _2083;
        _2649 = _2424;
        _2651 = _2426;
        _2653 = _2428;
    }
    float _4556 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4567 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4578 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    uint _2673 = _835 + 6u;
    float _2681 = _780 / cbSceneParam._m0[86u].x;
    float _2682 = _781 / cbSceneParam._m0[86u].y;
    vec4 _2696 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2681, _2682, (log2((isnan(cbSceneParam._m0[77u].w) ? _715 : (isnan(_715) ? cbSceneParam._m0[77u].w : min(_715, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2698 = _2696.x;
    float _2699 = _2696.y;
    float _2700 = _2696.z;
    float _2701 = _2696.w;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    if (_715 > cbSceneParam._m0[78u].w)
    {
        float _2756 = isnan(_715) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _715 : min(cbSceneParam._m0[80u].w, _715));
        float _2757 = _2756 / _715;
        float _2768 = _2757 * _765;
        float _2769 = _766 * _2757;
        float _2770 = (-0.0) - _2769;
        float _2772 = _2757 * _767;
        float _2774 = (cbSceneParam._m0[77u].w * _2770) / _2756;
        float _2775 = _2774 + cbSceneParam._m0[79u].w;
        float _2776 = cbSceneParam._m0[79u].w - _2769;
        float _2782 = sqrt(((_2768 * _2768) + (_2769 * _2769)) + (_2772 * _2772));
        float _2785 = (1.0 - (cbSceneParam._m0[77u].w / _2756)) * _2782;
        float _2790 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2792 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2945;
        if (abs((_2770 - _2774) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2945 = ((((_2775 > 0.0) ? exp2(_2790 * _2775) : (2.0 - exp2(_2792 * _2775))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2785;
        }
        else
        {
            float _2905 = 1.0 / cbSceneParam._m0[80u].x;
            float _2906 = isnan(_2776) ? _2775 : (isnan(_2775) ? _2776 : max(_2775, _2776));
            float _2907 = isnan(_2776) ? _2775 : (isnan(_2775) ? _2776 : min(_2775, _2776));
            float _2916 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : min(_2906, 0.0));
            float _2917 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : min(_2907, 0.0));
            _2945 = ((abs(_2782 / _2770) * cbSceneParam._m0[80u].y) * ((((_2916 - _2917) * 2.0) - ((exp2(_2790 * (isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0)))) - exp2(_2790 * (isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0))))) * _2905)) - ((exp2(_2792 * _2916) - exp2(_2792 * _2917)) * _2905))) + (_2785 * cbSceneParam._m0[80u].z);
        }
        vec4 _2947 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2681, _2682, 1.0), 0.0);
        float _2956 = exp2((_2945 * (-1.44269502162933349609375)) * (1.0 - _2947.w));
        float _2957 = log2(_2956);
        float _2973 = log2(_2701);
        _2794 = (exp2(_2973 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].x)) * _2947.x) / cbSceneParam._m0[78u].x)) + _2698;
        _2796 = (exp2(_2973 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].y)) * _2947.y) / cbSceneParam._m0[78u].y)) + _2699;
        _2798 = (exp2(_2973 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].z)) * _2947.z) / cbSceneParam._m0[78u].z)) + _2700;
        _2800 = _2956 * _2701;
    }
    else
    {
        _2794 = _2698;
        _2796 = _2699;
        _2798 = _2700;
        _2800 = _2701;
    }
    float _2812 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2813 = _2812 == 3.0;
    float _2814 = log2(_2800);
    float _2821 = exp2(_2814 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2643 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _908))) + ((_2649 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1712)) * cbPerFrame._m0[3u].x));
    float _2822 = exp2(_2814 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2645 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _908))) + ((_2651 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1712)) * cbPerFrame._m0[3u].x));
    float _2823 = exp2(_2814 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2647 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _908))) + ((_2653 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1712)) * cbPerFrame._m0[3u].x));
    float _2832 = (_2812 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2832 * (_2813 ? _2821 : (_2821 + (cbSceneParam._m0[72u].w * _2794)));
    SV_Target.y = _2832 * (_2813 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2796)));
    SV_Target.z = _2832 * (_2813 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2798)));
    SV_Target.w = cbInstanceData._m0[_2673].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2673].w;
}


