#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 10) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 11) uniform texture2DArray P_ACParts_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1327;
float _3712;
float _3713;
float _3714;
float _3715;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = cbMtdParam._m0[25u].x + TEXCOORD.y;
    vec4 _269 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (_255 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _276 = log2(0.0);
    float _278 = exp2(_276 * cbMtdParam._m0[24u].y);
    float _282 = _278 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.x) * _278);
    float _283 = _278 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.y) * _278);
    float _284 = _278 - ((cbMtdParam._m0[24u].x * TEXCOORD_5.z) * _278);
    float _285 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _286 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _287 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _288 = isnan(1.0) ? _285 : (isnan(_285) ? 1.0 : min(_285, 1.0));
    float _290 = isnan(1.0) ? _286 : (isnan(_286) ? 1.0 : min(_286, 1.0));
    float _291 = isnan(1.0) ? _287 : (isnan(_287) ? 1.0 : min(_287, 1.0));
    vec4 _304 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _255) + cbTextureTilingScale._m0[0u].w));
    float _308 = _304.z;
    float _309 = _304.w;
    float _310 = 1.0 - _309;
    float _319 = exp2(log2((1.0 - (_310 * _308)) * cbMtdParam._m0[25u].w) * cbMtdParam._m0[26u].x);
    float _320 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = isnan(1.0) ? _320 : (isnan(_320) ? 1.0 : min(_320, 1.0));
    float _330 = exp2(log2(cbMtdParam._m0[26u].z * (1.0 - ((_310 * _310) * _308))) * cbMtdParam._m0[26u].y);
    float _331 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    vec4 _344 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _350 = (_344.y * ((isnan(1.0) ? _331 : (isnan(_331) ? 1.0 : min(_331, 1.0))) - _309)) + _309;
    float _357 = roundEven(5.0 - ((_344.x + (-0.02500000037252902984619140625)) * 8.0));
    float _358 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _359 = isnan(4.0) ? _358 : (isnan(_358) ? 4.0 : min(_358, 4.0));
    float _372 = floor(_359);
    vec4 _375 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _255) + cbTextureTilingScale._m0[10u].w, _372));
    float _385 = cbMtdParam._m0[10u].x * _375.x;
    float _386 = cbMtdParam._m0[10u].y * _375.y;
    float _387 = cbMtdParam._m0[10u].z * _375.z;
    vec4 _399 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _255) + cbTextureTilingScale._m0[1u].w));
    float _419 = (((cbMtdParam._m0[9u].x * _399.x) - _385) * _350) + _385;
    float _420 = (((cbMtdParam._m0[9u].y * _399.y) - _386) * _350) + _386;
    float _421 = (((cbMtdParam._m0[9u].z * _399.z) - _387) * _350) + _387;
    vec4 _434 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    float _454 = (((cbMtdParam._m0[20u].x * _434.x) - _419) * _321) + _419;
    float _455 = (((cbMtdParam._m0[20u].y * _434.y) - _420) * _321) + _420;
    float _456 = (((cbMtdParam._m0[20u].z * _434.z) - _421) * _321) + _421;
    vec4 _468 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    float _492 = (_269.x * 4.5) * ((((cbMtdParam._m0[23u].x * _468.x) - _454) * _288) + _454);
    float _494 = (_269.y * 4.5) * ((((cbMtdParam._m0[23u].y * _468.y) - _455) * _290) + _455);
    float _496 = (_269.z * 4.5) * ((((cbMtdParam._m0[23u].z * _468.z) - _456) * _291) + _456);
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[26u].w;
    _198[0u] = cbMtdParam._m0[27u].x;
    _197[1u] = cbMtdParam._m0[27u].y;
    _198[1u] = cbMtdParam._m0[27u].z;
    _197[2u] = cbMtdParam._m0[27u].w;
    _198[2u] = cbMtdParam._m0[28u].x;
    _197[3u] = cbMtdParam._m0[28u].y;
    _198[3u] = cbMtdParam._m0[28u].z;
    _197[4u] = cbMtdParam._m0[28u].w;
    _198[4u] = cbMtdParam._m0[29u].x;
    float _528 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    uint _530 = uint(int(isnan(4.0) ? _528 : (isnan(_528) ? 4.0 : min(_528, 4.0))));
    float _542 = ((cbMtdParam._m0[30u].x - _198[_530]) * _350) + _198[_530];
    float _547 = ((cbMtdParam._m0[30u].z - _542) * _321) + _542;
    float _555 = ((cbMtdParam._m0[31u].x - _547) * _288) + _547;
    vec4 _571 = texture(sampler2DArray(P_ACParts_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w, _372));
    float _573 = _571.x;
    float _574 = _571.y;
    float _576 = _571.z + _197[_530];
    vec4 _589 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _255) + cbTextureTilingScale._m0[6u].w));
    float _597 = (((cbMtdParam._m0[29u].w - _576) + _589.z) * _350) + _576;
    vec4 _610 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _255) + cbTextureTilingScale._m0[8u].w));
    float _618 = (((cbMtdParam._m0[30u].y - _597) + _610.z) * _321) + _597;
    float _624 = ((((_308 * 2.0) * _618) - _618) * cbMtdParam._m0[25u].y) + _618;
    vec4 _636 = texture(sampler2D(P_ACParts_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _255) + cbTextureTilingScale._m0[9u].w));
    float _644 = (((_636.z + cbMtdParam._m0[30u].w) - _624) * _291) + _624;
    float _657 = ((_589.x - _573) * _350) + _573;
    float _658 = ((_589.y - _574) * _350) + _574;
    float _663 = ((_610.x - _657) * _321) + _657;
    float _664 = ((_610.y - _658) * _321) + _658;
    float _673 = ((((_636.x - _663) * _288) + _663) * 2.0) + (-1.0);
    float _674 = ((((_636.y - _664) * _290) + _664) * 2.0) + (-1.0);
    float _675 = dot(vec2(_673, _674), vec2(_673, _674));
    float _3794 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _680 = sqrt(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))));
    float _683 = _673 + (cbMtdParam._m0[25u].z * ((_304.x * 2.0) + (-1.0)));
    float _684 = _674 + (cbMtdParam._m0[25u].z * ((_304.y * 2.0) + (-1.0)));
    float _687 = fma(_680, _233 * NORMAL.x, fma(_684, _240 * TANGENT.x, (_226 * _218) * _683));
    float _690 = fma(_680, _233 * NORMAL.y, fma(_684, _240 * TANGENT.y, (_226 * _219) * _683));
    float _693 = fma(_680, _233 * NORMAL.z, fma(_684, _240 * TANGENT.z, (_226 * _220) * _683));
    float _697 = inversesqrt(dot(vec3(_687, _690, _693), vec3(_687, _690, _693)));
    float _698 = _697 * _687;
    float _699 = _697 * _690;
    float _700 = _697 * _693;
    float _3805 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _701 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3827 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3838 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3849 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _705 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _721 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _771 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _761);
    float _772 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _761);
    float _773 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _761);
    float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
    float _778 = _771 * _777;
    float _779 = _772 * _777;
    float _780 = _773 * _777;
    vec4 _785 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _787 = _785.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1007 = sqrt(((_771 * _771) + (_772 * _772)) + (_773 * _773));
        float _1013 = (cbMatDynParam._m0[5u].x * _1007) + cbMatDynParam._m0[5u].y;
        float _3860 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1018 = (cbMatDynParam._m0[5u].z * _1007) + cbMatDynParam._m0[5u].w;
        float _3871 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) - _1014)) + _1014) < ((_787 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _798 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _799 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _801 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _803 = _801.w;
    float _821 = fma(_700, cbSceneParam._m0[5u].z, fma(_699, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _698));
    float _824 = fma(_700, cbSceneParam._m0[6u].z, fma(_699, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _698));
    float _827 = fma(_700, cbSceneParam._m0[7u].z, fma(_699, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _698));
    vec4 _829 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _840 = (((_829.y - _701) + (_829.w * _701)) * cbMtdParam._m0[3u].x) + _701;
    uint _853 = uint(roundEven(NORMAL.w)) * 13u;
    uint _855 = _853 + 9u;
    uint _856 = _855 + uint(cbMatDynParam._m0[0u].w);
    float _862 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_856].x;
    float _863 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_856].y;
    float _864 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * cbInstanceData._m0[_856].z;
    float _3882 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    vec4 _868 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _873 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _884 = (((_873.x - _705) + (_873.w * _705)) * cbMtdParam._m0[3u].x) + _705;
    float _897 = (cbMtdParam._m0[3u].x * (((_865 * _803) - _865) + _868.x)) + _865;
    float _898 = (cbMtdParam._m0[3u].x * (((_866 * _803) - _866) + _868.y)) + _866;
    float _899 = (cbMtdParam._m0[3u].x * (((_867 * _803) - _867) + _868.z)) + _867;
    float _900 = 1.0 - _884;
    float _901 = _900 * _897;
    float _902 = _900 * _898;
    float _903 = _900 * _899;
    float _908 = (_897 + (-0.039999999105930328369140625)) * _884;
    float _909 = (_898 + (-0.039999999105930328369140625)) * _884;
    float _910 = (_899 + (-0.039999999105930328369140625)) * _884;
    float _911 = _908 + 0.039999999105930328369140625;
    float _913 = _909 + 0.039999999105930328369140625;
    float _914 = _910 + 0.039999999105930328369140625;
    vec4 _923 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _798, cbSceneParam._m0[86u].y * _799));
    float _926 = _923.x * TEXCOORD_5.w;
    float _927 = dot(vec3(_698, _699, _700), vec3(_778, _779, _780));
    float _930 = _927 * 2.0;
    float _934 = (_930 * _698) - _778;
    float _935 = (_930 * _699) - _779;
    float _936 = (_930 * _700) - _780;
    float _940 = abs(dot(vec3(_778, _779, _780), vec3(_698, _699, _700)));
    float _3915 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _942 = sqrt(_840);
    float _953 = exp2((_942 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_942 * 3.0));
    float _959 = (1.0 - _953) * ((_942 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _960 = _953 * _942;
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1326;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1051 = fma(_996, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _988));
        float _1055 = fma(_996, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _988));
        float _1059 = fma(_996, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _988));
        float _1084 = _988 + _698;
        float _1085 = _992 + _699;
        float _1086 = _996 + _700;
        float _1096 = fma(_1086, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1084)) - _1051;
        float _1097 = fma(_1086, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1084)) - _1055;
        float _1098 = fma(_1086, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1084)) - _1059;
        float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
        float _1115 = ((_1102 * _1096) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1051 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1102 * _1097) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1055 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1102 * _1098) / cbModelParam._m0[34u].z) + ((((((_1059 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        float _1154 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1120.x + (-0.5));
        float _1156 = _1154 * (_1120.y + (-0.5));
        float _1157 = _1154 * (_1120.z + (-0.5));
        float _1164 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1127.x + (-0.5));
        float _1166 = _1164 * (_1127.y + (-0.5));
        float _1167 = _1164 * (_1127.z + (-0.5));
        float _1174 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1134.x + (-0.5));
        float _1176 = _1174 * (_1134.y + (-0.5));
        float _1177 = _1174 * (_1134.z + (-0.5));
        float _1184 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1141.x + (-0.5));
        float _1186 = _1184 * (_1141.y + (-0.5));
        float _1187 = _1184 * (_1141.z + (-0.5));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = _1155 * 0.5;
        float _1192 = _1165 * 0.5;
        float _1193 = _1175 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1208 = (dot(vec3(_698, _699, _700), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1218 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3963 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1220 + 1.0))) + _1225) * _1188;
        float _1235 = _1156 * 0.5;
        float _1236 = _1166 * 0.5;
        float _1237 = _1176 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_698, _699, _700), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3996 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1262 + 1.0))) + _1267) * _1189;
        float _1277 = _1157 * 0.5;
        float _1278 = _1167 * 0.5;
        float _1279 = _1177 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_698, _699, _700), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4029 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1304 + 1.0))) + _1309) * _1190;
        _1326 = _1157;
        _1328 = _1156;
        _1329 = _1155;
        _1330 = _1167;
        _1331 = _1166;
        _1332 = _1165;
        _1333 = _1177;
        _1334 = _1176;
        _1335 = _1175;
        _1336 = _1190;
        _1337 = _1189;
        _1338 = _1188;
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1327;
        _1328 = _1327;
        _1329 = _1327;
        _1330 = _1327;
        _1331 = _1327;
        _1332 = _1327;
        _1333 = _1327;
        _1334 = _1327;
        _1335 = _1327;
        _1336 = _1327;
        _1337 = _1327;
        _1338 = _1327;
        _1339 = 0.0;
        _1340 = 0.0;
        _1341 = 0.0;
    }
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1367 = fma(_996, cbModelParam._m0[30u].z, fma(_992, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _988));
        float _1371 = fma(_996, cbModelParam._m0[31u].z, fma(_992, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _988));
        float _1375 = fma(_996, cbModelParam._m0[32u].z, fma(_992, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _988));
        float _1398 = _988 + _698;
        float _1399 = _992 + _699;
        float _1400 = _996 + _700;
        float _1410 = fma(_1400, cbModelParam._m0[30u].z, fma(_1399, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1398)) - _1367;
        float _1411 = fma(_1400, cbModelParam._m0[31u].z, fma(_1399, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1398)) - _1371;
        float _1412 = fma(_1400, cbModelParam._m0[32u].z, fma(_1399, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1398)) - _1375;
        float _1416 = inversesqrt(dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412)));
        float _1429 = ((_1416 * _1410) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1367 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1416 * _1411) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1371 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1416 * _1412) / cbModelParam._m0[35u].z) + ((((((_1375 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        float _1466 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1433.x + (-0.5));
        float _1468 = _1466 * (_1433.y + (-0.5));
        float _1469 = _1466 * (_1433.z + (-0.5));
        float _1476 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1440.x + (-0.5));
        float _1478 = _1476 * (_1440.y + (-0.5));
        float _1479 = _1476 * (_1440.z + (-0.5));
        float _1486 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1447.x + (-0.5));
        float _1488 = _1486 * (_1447.y + (-0.5));
        float _1489 = _1486 * (_1447.z + (-0.5));
        float _1496 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1454.x + (-0.5));
        float _1498 = _1496 * (_1454.y + (-0.5));
        float _1499 = _1496 * (_1454.z + (-0.5));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = _1467 * 0.5;
        float _1504 = _1477 * 0.5;
        float _1505 = _1487 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_698, _699, _700), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4092 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1530 + 1.0))) + _1535) * _1500;
        float _1545 = _1468 * 0.5;
        float _1546 = _1478 * 0.5;
        float _1547 = _1488 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_698, _699, _700), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4125 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1572 + 1.0))) + _1577) * _1501;
        float _1587 = _1469 * 0.5;
        float _1588 = _1479 * 0.5;
        float _1589 = _1489 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_698, _699, _700), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4158 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1614 + 1.0))) + _1619) * _1502;
        _1636 = _1469;
        _1637 = _1468;
        _1638 = _1467;
        _1639 = _1479;
        _1640 = _1478;
        _1641 = _1477;
        _1642 = _1489;
        _1643 = _1488;
        _1644 = _1487;
        _1645 = _1502;
        _1646 = _1501;
        _1647 = _1500;
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
    }
    else
    {
        _1636 = _1327;
        _1637 = _1327;
        _1638 = _1327;
        _1639 = _1327;
        _1640 = _1327;
        _1641 = _1327;
        _1642 = _1327;
        _1643 = _1327;
        _1644 = _1327;
        _1645 = _1327;
        _1646 = _1327;
        _1647 = _1327;
        _1648 = 0.0;
        _1649 = 0.0;
        _1650 = 0.0;
    }
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1339)) + _1339;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1340)) + _1340;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1341)) + _1341;
    float _1683 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1686 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1689 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1660));
    float _1704 = _934 * 0.5;
    float _1705 = _935 * 0.5;
    float _1706 = _936 * 0.5;
    float _1707 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1710 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1713 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1747;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1720 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1326, _1330, _1333, _1336));
        float _1724 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1728 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1329, _1332, _1335, _1338));
        float _1735 = dot(vec4(cbModelParam._m0[39u]), vec4(_1704, _1705, _1706, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1735) ? 0.0 : (isnan(0.0) ? _1735 : max(0.0, _1735))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1758;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1749 = dot(vec4(cbModelParam._m0[40u]), vec4(_1704, _1705, _1706, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1762 = (_1758 * cbModelParam._m0[1u].x) + (_1747 * (1.0 - cbModelParam._m0[1u].x));
    float _1772 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _840);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1772 : min(cbModelParam._m0[25u].z, _1772));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1822 = fma(_996, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988)) + cbModelParam._m0[13u].w;
        float _1826 = fma(_996, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988)) + cbModelParam._m0[14u].w;
        float _1830 = fma(_996, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988)) + cbModelParam._m0[15u].w;
        float _1833 = fma(_936, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934));
        float _1836 = fma(_936, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934));
        float _1839 = fma(_936, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934));
        float _1867;
        if (_1833 > 0.0)
        {
            _1867 = abs((1.0 - _1822) / _1833);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1822 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1867 = frontier_phi_17_15_ladder;
        }
        float _2074;
        if (_1836 > 0.0)
        {
            _2074 = abs((1.0 - _1826) / _1836);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1826 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2074 = frontier_phi_26_22_ladder;
        }
        float _2328;
        if (_1839 > 0.0)
        {
            _2328 = abs((1.0 - _1830) / _1839);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1830 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2328 = frontier_phi_38_33_ladder;
        }
        float _2330 = isnan(_2074) ? _1867 : (isnan(_1867) ? _2074 : min(_1867, _2074));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1833) + _1822;
        float _2336 = (_2331 * _1836) + _1826;
        float _2337 = (_2331 * _1839) + _1830;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2338;
        float _2342 = _2338 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 > _2342) || ((_2336 < _2340) || ((_2335 < _2340) || (_2335 > _2342))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2465 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2337, cbModelParam._m0[9u].z, fma(_2336, cbModelParam._m0[9u].y, _2335 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2337, cbModelParam._m0[10u].z, fma(_2336, cbModelParam._m0[10u].y, _2335 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2337, cbModelParam._m0[11u].z, fma(_2336, cbModelParam._m0[11u].y, _2335 * cbModelParam._m0[11u].x))), _1773);
            frontier_phi_16_38_ladder = _2465.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2465.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2465.x * cbModelParam._m0[1u].y;
        }
        _1855 = frontier_phi_16_38_ladder_2;
        _1857 = frontier_phi_16_38_ladder_1;
        _1859 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1843 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_934, _935, _936), _1773);
        _1855 = _1843.x * cbModelParam._m0[1u].y;
        _1857 = _1843.y * cbModelParam._m0[1u].y;
        _1859 = _1843.z * cbModelParam._m0[1u].y;
    }
    float _1863 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _840);
    float _1864 = isnan(_1863) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1863 : min(cbModelParam._m0[25u].w, _1863));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1921 = fma(_996, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988)) + cbModelParam._m0[21u].w;
        float _1925 = fma(_996, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988)) + cbModelParam._m0[22u].w;
        float _1929 = fma(_996, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988)) + cbModelParam._m0[23u].w;
        float _1932 = fma(_936, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934));
        float _1935 = fma(_936, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934));
        float _1938 = fma(_936, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934));
        float _2079;
        if (_1932 > 0.0)
        {
            _2079 = abs((1.0 - _1921) / _1932);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1921 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2079 = frontier_phi_28_24_ladder;
        }
        float _2355;
        if (_1935 > 0.0)
        {
            _2355 = abs((1.0 - _1925) / _1935);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1925 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2355 = frontier_phi_40_35_ladder;
        }
        float _2568;
        if (_1938 > 0.0)
        {
            _2568 = abs((1.0 - _1929) / _1938);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1929 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2568 = frontier_phi_49_46_ladder;
        }
        float _2570 = isnan(_2355) ? _2079 : (isnan(_2079) ? _2355 : min(_2079, _2355));
        float _2571 = isnan(_2568) ? _2570 : (isnan(_2570) ? _2568 : min(_2570, _2568));
        float _2575 = (_2571 * _1932) + _1921;
        float _2576 = (_2571 * _1935) + _1925;
        float _2577 = (_2571 * _1938) + _1929;
        float _2578 = _2571 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2578;
        float _2581 = _2578 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2577 > _2581) || ((_2577 < _2579) || ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 < _2579) || (_2575 > _2581))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2776 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2577, cbModelParam._m0[17u].z, fma(_2576, cbModelParam._m0[17u].y, _2575 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2577, cbModelParam._m0[18u].z, fma(_2576, cbModelParam._m0[18u].y, _2575 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2577, cbModelParam._m0[19u].z, fma(_2576, cbModelParam._m0[19u].y, _2575 * cbModelParam._m0[19u].x))), _1864);
            frontier_phi_25_49_ladder = _2776.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2776.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2776.x * cbModelParam._m0[1u].z;
        }
        _1957 = frontier_phi_25_49_ladder_2;
        _1959 = frontier_phi_25_49_ladder_1;
        _1961 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_934, _935, _936), _1864);
        _1957 = _1941.x * cbModelParam._m0[1u].z;
        _1959 = _1941.y * cbModelParam._m0[1u].z;
        _1961 = _1941.z * cbModelParam._m0[1u].z;
    }
    float _1974 = (((_959 * _911) + _960) * _926) * ((cbModelParam._m0[1u].w * (_1957 - _1855)) + _1855);
    float _1976 = (((_959 * _913) + _960) * _926) * ((cbModelParam._m0[1u].w * (_1959 - _1857)) + _1857);
    float _1978 = (((_959 * _914) + _960) * _926) * ((cbModelParam._m0[1u].w * (_1961 - _1859)) + _1859);
    float _1981 = fma(_1978, cbSceneParam._m0[89u].z, fma(_1976, cbSceneParam._m0[89u].y, _1974 * cbSceneParam._m0[89u].x));
    float _1984 = fma(_1978, cbSceneParam._m0[90u].z, fma(_1976, cbSceneParam._m0[90u].y, _1974 * cbSceneParam._m0[90u].x));
    float _1987 = fma(_1978, cbSceneParam._m0[91u].z, fma(_1976, cbSceneParam._m0[91u].y, _1974 * cbSceneParam._m0[91u].x));
    uvec4 _1997 = floatBitsToUint(cbInstanceData._m0[_853 + 5u]);
    uint _1999 = _1997.x * 14u;
    uint _2000 = _1999 + 13u;
    float _2007 = _926 + (-1.0);
    float _2012 = (cbLight._m0[_2000].x * _2007) + 1.0;
    float _2013 = (cbLight._m0[_2000].y * _2007) + 1.0;
    float _2014 = (cbLight._m0[_2000].z * _2007) + 1.0;
    float _2015 = (cbLight._m0[_2000].w * _2007) + 1.0;
    uint _2016 = _1999 + 5u;
    float _2022 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2026 = _1999 + 4u;
    float _2032 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
    uint _2036 = _1999 | 1u;
    float _2047 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_698, _699, _700));
    float _2050 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_698, _699, _700));
    float _4294 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _4305 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2055 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * 0.3183098733425140380859375;
    float _2057 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * 0.3183098733425140380859375;
    float _2064 = ((cbLight._m0[_2016].x * _2022) * _2057) + ((cbLight._m0[_2026].x * _2032) * _2055);
    float _2065 = ((_2022 * cbLight._m0[_2016].y) * _2057) + ((_2032 * cbLight._m0[_2026].y) * _2055);
    float _2066 = ((_2022 * cbLight._m0[_2016].z) * _2057) + ((_2032 * cbLight._m0[_2026].z) * _2055);
    uvec4 _2071 = floatBitsToUint(cbLight._m0[_1999 + 12u]);
    bool _2073 = _2071.x == 0u;
    float _2084;
    float _2086;
    float _2088;
    if (_2073)
    {
        _2084 = _2064;
        _2086 = _2065;
        _2088 = _2066;
    }
    else
    {
        uint _2092 = _1999 + 6u;
        float _2108 = (dot(vec3(cbLight._m0[_1999 + 2u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2109 = _2108 * _2108;
        float _4316 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2110 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2111 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2084 = (((cbLight._m0[_2092].x * 0.3183098733425140380859375) * _2110) * _2111) + _2064;
        _2086 = (((cbLight._m0[_2092].y * 0.3183098733425140380859375) * _2110) * _2111) + _2065;
        _2088 = (((cbLight._m0[_2092].z * 0.3183098733425140380859375) * _2110) * _2111) + _2066;
    }
    bool _2091 = _2071.y == 0u;
    float _2129;
    float _2131;
    float _2133;
    if (_2091)
    {
        _2129 = _2084;
        _2131 = _2086;
        _2133 = _2088;
    }
    else
    {
        uint _2299 = _1999 + 7u;
        float _2315 = (dot(vec3(cbLight._m0[_1999 + 3u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2316 = _2315 * _2315;
        float _4332 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2317 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2318 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2129 = (((cbLight._m0[_2299].x * 0.3183098733425140380859375) * _2317) * _2318) + _2084;
        _2131 = (((cbLight._m0[_2299].y * 0.3183098733425140380859375) * _2317) * _2318) + _2086;
        _2133 = (((cbLight._m0[_2299].z * 0.3183098733425140380859375) * _2317) * _2318) + _2088;
    }
    uint _2136 = _1999 + 8u;
    float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _840) * 0.949999988079071044921875);
    float _2150 = _2149 * _2149;
    float _2151 = cbLight._m0[_1999].x + _778;
    float _2152 = cbLight._m0[_1999].y + _779;
    float _2153 = cbLight._m0[_1999].z + _780;
    float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
    float _2158 = _2157 * _2151;
    float _2159 = _2157 * _2152;
    float _2160 = _2157 * _2153;
    float _2161 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_1999].xyz));
    float _4348 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _4359 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _2165 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2166 = dot(vec3(_698, _699, _700), vec3(_2158, _2159, _2160));
    float _4370 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2170 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2158, _2159, _2160));
    float _4381 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2174 = _2150 * _2150;
    float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
    float _2186 = exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0);
    float _2187 = 0.959999978542327880859375 - _908;
    float _2189 = 0.959999978542327880859375 - _909;
    float _2190 = 0.959999978542327880859375 - _910;
    float _2197 = 1.0 - _2150;
    float _2208 = (0.5 / (((_2165 * ((_2164 * _2197) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2197) + _2150) * _2164))) * _2164;
    float _4392 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
    uint _2221 = _1999 + 9u;
    float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _840) * 0.949999988079071044921875);
    float _2233 = _2232 * _2232;
    float _2234 = cbLight._m0[_2036].x + _778;
    float _2235 = cbLight._m0[_2036].y + _779;
    float _2236 = cbLight._m0[_2036].z + _780;
    float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
    float _2241 = _2240 * _2234;
    float _2242 = _2240 * _2235;
    float _2243 = _2240 * _2236;
    float _2244 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2036].xyz));
    float _4403 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2248 = dot(vec3(_698, _699, _700), vec3(_2241, _2242, _2243));
    float _4414 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2241, _2242, _2243));
    float _4425 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2233 * _2233;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2267 = exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0);
    float _2274 = 1.0 - _2233;
    float _2284 = (0.5 / (((_2165 * ((_2247 * _2274) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2274) + _2233) * _2247))) * _2247;
    float _4436 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2286 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    float _2296 = (((((_2267 * _2187) + _911) * cbLight._m0[_2221].x) * _2286) * _2022) + (((((_2186 * _2187) + _911) * cbLight._m0[_2136].x) * _2210) * _2032);
    float _2297 = (((((_2267 * _2189) + _913) * cbLight._m0[_2221].y) * _2286) * _2022) + (((((_2186 * _2189) + _913) * cbLight._m0[_2136].y) * _2210) * _2032);
    float _2298 = (((((_2267 * _2190) + _914) * cbLight._m0[_2221].z) * _2286) * _2022) + (((((_2186 * _2190) + _914) * cbLight._m0[_2136].z) * _2210) * _2032);
    float _2360;
    float _2362;
    float _2364;
    if (_2073)
    {
        _2360 = _2296;
        _2362 = _2297;
        _2364 = _2298;
    }
    else
    {
        uint _2366 = _1999 + 2u;
        uint _2370 = _1999 + 10u;
        float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _840) * 0.949999988079071044921875);
        float _2385 = _2384 * _2384;
        float _2386 = cbLight._m0[_2366].x + _778;
        float _2387 = cbLight._m0[_2366].y + _779;
        float _2388 = cbLight._m0[_2366].z + _780;
        float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
        float _2393 = _2392 * _2386;
        float _2394 = _2392 * _2387;
        float _2395 = _2392 * _2388;
        float _2396 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2366].xyz));
        float _4447 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2400 = dot(vec3(_698, _699, _700), vec3(_2393, _2394, _2395));
        float _4458 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2404 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2393, _2394, _2395));
        float _4469 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2408 = _2385 * _2385;
        float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
        float _2419 = exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0);
        float _2426 = 1.0 - _2385;
        float _2436 = (0.5 / (((_2165 * ((_2399 * _2426) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2426) + _2385) * _2399))) * _2399;
        float _4480 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2438 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
        float _2439 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2360 = (((((_2419 * _2187) + _911) * cbLight._m0[_2370].x) * _2438) * _2439) + _2296;
        _2362 = (((((_2419 * _2189) + _913) * cbLight._m0[_2370].y) * _2438) * _2439) + _2297;
        _2364 = (((((_2419 * _2190) + _914) * cbLight._m0[_2370].z) * _2438) * _2439) + _2298;
    }
    float _2474;
    float _2476;
    float _2478;
    if (_2091)
    {
        _2474 = _2360;
        _2476 = _2362;
        _2478 = _2364;
    }
    else
    {
        uint _2485 = _1999 + 3u;
        uint _2489 = _1999 + 11u;
        float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2485].w)) * _840) * 0.949999988079071044921875);
        float _2504 = _2503 * _2503;
        float _2505 = cbLight._m0[_2485].x + _778;
        float _2506 = cbLight._m0[_2485].y + _779;
        float _2507 = cbLight._m0[_2485].z + _780;
        float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
        float _2512 = _2511 * _2505;
        float _2513 = _2511 * _2506;
        float _2514 = _2511 * _2507;
        float _2515 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2485].xyz));
        float _4496 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2519 = dot(vec3(_698, _699, _700), vec3(_2512, _2513, _2514));
        float _4507 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2523 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_2512, _2513, _2514));
        float _4518 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2527 = _2504 * _2504;
        float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
        float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0);
        float _2545 = 1.0 - _2504;
        float _2555 = (0.5 / (((_2165 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2545) + _2504) * _2518))) * _2518;
        float _4529 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2557 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
        float _2558 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2474 = (((((_2538 * _2187) + _911) * cbLight._m0[_2489].x) * _2557) * _2558) + _2360;
        _2476 = (((((_2538 * _2189) + _913) * cbLight._m0[_2489].y) * _2557) * _2558) + _2362;
        _2478 = (((((_2538 * _2190) + _914) * cbLight._m0[_2489].z) * _2557) * _2558) + _2364;
    }
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    if (_1997.y == 0u)
    {
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2633;
        float _2635 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2633;
        float _2636 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2633;
        uvec4 _2648 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2649 = _2648.x;
        uint _2660 = uint((float(_2648.y) * floor(float(uint(cbSceneParam._m0[85u].y * _799) / _2649))) + floor(float(uint(cbSceneParam._m0[85u].x * _798) / _2649)));
        float _2670 = (log2(_2636 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2671 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        uint _2674 = uint(isnan(14.0) ? _2671 : (isnan(_2671) ? 14.0 : min(_2671, 14.0)));
        uvec4 _2679 = texelFetch(g_lightClusterGridBuffer, int(((_2674 << 2u) + (_2660 << 6u)) >> 2u));
        uint _2680 = _2679.x;
        uint _2681 = _2648.z;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        if (((((1u << ((_2681 >> 4u) & 15u)) + 4294967295u) & _2680) == 0u) || ((_2681 & 240u) == 0u))
        {
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
        }
        else
        {
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            uint _2940 = 0u;
            uint _2949;
            bool _2950;
            for (;;)
            {
                _2949 = texelFetch(g_lightClassification, int((((_2674 << 5u) + (_2660 << 9u)) + (_2940 << 2u)) >> 2u)).x;
                _2950 = _2949 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2950)
                {
                    frontier_phi_66_pred = _2934;
                    frontier_phi_66_pred_1 = _2939;
                    frontier_phi_66_pred_2 = _2938;
                    frontier_phi_66_pred_3 = _2937;
                    frontier_phi_66_pred_4 = _2936;
                    frontier_phi_66_pred_5 = _2935;
                }
                else
                {
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    uint _3085;
                    _3079 = _2934;
                    _3080 = _2935;
                    _3081 = _2936;
                    _3082 = _2937;
                    _3083 = _2938;
                    _3084 = _2939;
                    _3085 = _2949;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    for (;;)
                    {
                        uint _3089 = uint(findLSB(_3085)) + (_2940 << 5u);
                        uint _3086 = (_3085 + 4294967295u) & _3085;
                        uint _3091 = _3089 * 48u;
                        vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 3u)).x));
                        uint _3111 = (_3089 * 48u) + 4u;
                        vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3111)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 3u)).x));
                        uint _3130 = (_3089 * 48u) + 8u;
                        vec3 _3141 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3130)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 2u)).x));
                        float _3145 = _3105.x - _2634;
                        float _3146 = _3105.y - _2635;
                        float _3147 = _3105.z - _2636;
                        float _3148 = dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147));
                        float _3151 = inversesqrt(_3148);
                        float _3152 = _3151 * _3145;
                        float _3153 = _3151 * _3146;
                        float _3154 = _3151 * _3147;
                        float _3155 = dot(vec3(_821, _824, _827), vec3(_3152, _3153, _3154));
                        float _3160 = 1.0 - (_3148 * _3105.w);
                        float _4555 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3161 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3162 = sqrt(_3148) * _3124.w;
                        float _3165 = 1.39999997615814208984375 / (_3162 + 1.39999997615814208984375);
                        float _3166 = _3165 * _3165;
                        float _3169 = ((1.0 - _3166) * _3155) + _3166;
                        float _3172 = _3162 * _3162;
                        float _3176 = ((isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))) * _3161) / ((_3172 * 0.699999988079071044921875) + 1.0);
                        float _3180 = (-0.0) - _2634;
                        float _3181 = (-0.0) - _2635;
                        float _3182 = (-0.0) - _2636;
                        float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
                        float _3187 = _3186 * _3180;
                        float _3188 = _3186 * _3181;
                        float _3189 = _3186 * _3182;
                        float _3197 = exp2(log2(1.0 / ((_3172 * 3.5) + 5.0)) * 0.25);
                        float _3198 = 1.0 - _942;
                        float _3205 = sqrt(1.0 - ((1.0 - (_3198 * _3198)) * (1.0 - (_3197 * _3197))));
                        float _3206 = _3205 * _3205;
                        float _3207 = _3206 * _3206;
                        float _3208 = _3187 + _3152;
                        float _3209 = _3188 + _3153;
                        float _3210 = _3189 + _3154;
                        float _3214 = inversesqrt(dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210)));
                        float _3218 = dot(vec3(_821, _824, _827), vec3(_3187, _3188, _3189));
                        float _4571 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3221 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3222 = dot(vec3(_821, _824, _827), vec3(_3214 * _3208, _3214 * _3209, _3214 * _3210));
                        float _4582 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3225 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3229 = ((_3225 * _3225) * (_3207 + (-1.0))) + 1.0;
                        float _3230 = _3165 * _3206;
                        float _3231 = _3230 * _3230;
                        float _3234 = ((1.0 - _3231) * _3155) + _3231;
                        float _4593 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3235 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                        float _3236 = 1.0 - _3206;
                        float _3246 = (0.5 / (((_3235 * ((_3221 * _3236) + _3206)) + 9.9999999392252902907785028219223e-09) + (((_3235 * _3236) + _3206) * _3221))) * _3235;
                        float _4604 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3257 = (((_3207 * 3.1415927410125732421875) * (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) / ((_3229 * _3229) * ((_3172 * 2.1991131305694580078125) + 3.141590118408203125))) * _3161;
                        _3009 = (_3176 * _3124.x) + _3082;
                        _3010 = (_3176 * _3124.y) + _3083;
                        _3011 = (_3176 * _3124.z) + _3084;
                        _3006 = (_3257 * _3141.x) + _3079;
                        _3007 = (_3257 * _3141.y) + _3080;
                        _3008 = (_3257 * _3141.z) + _3081;
                        if (_3086 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3079 = _3006;
                            _3080 = _3007;
                            _3081 = _3008;
                            _3082 = _3009;
                            _3083 = _3010;
                            _3084 = _3011;
                            _3085 = _3086;
                        }
                    }
                    frontier_phi_66_pred = _3006;
                    frontier_phi_66_pred_1 = _3011;
                    frontier_phi_66_pred_2 = _3010;
                    frontier_phi_66_pred_3 = _3009;
                    frontier_phi_66_pred_4 = _3008;
                    frontier_phi_66_pred_5 = _3007;
                }
                _2782 = frontier_phi_66_pred;
                _2792 = frontier_phi_66_pred_1;
                _2790 = frontier_phi_66_pred_2;
                _2788 = frontier_phi_66_pred_3;
                _2786 = frontier_phi_66_pred_4;
                _2784 = frontier_phi_66_pred_5;
                uint _2941 = _2940 + 1u;
                if (_2941 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2934 = _2782;
                    _2935 = _2784;
                    _2936 = _2786;
                    _2937 = _2788;
                    _2938 = _2790;
                    _2939 = _2792;
                    _2940 = _2941;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
        }
        uvec4 _2795 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2796 = _2795.z;
        uint _2798 = (_2796 >> 8u) & 15u;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        if (((4294967295u << _2798) & _2680) == 0u)
        {
            _2902 = _2781;
            _2904 = _2783;
            _2906 = _2785;
            _2908 = _2787;
            _2910 = _2789;
            _2912 = _2791;
        }
        else
        {
            float _2927 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
            float _2928 = _2927 * _2634;
            float _2929 = _2927 * _2635;
            float _2930 = _2927 * _2636;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2798 < ((_2796 >> 12u) & 15u))
            {
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _3062 = _2781;
                float _3063 = _2783;
                float _3064 = _2785;
                float _3065 = _2787;
                float _3066 = _2789;
                float _3067 = _2791;
                uint _3068 = _2798;
                uint _3077;
                bool _3078;
                for (;;)
                {
                    _3077 = texelFetch(g_lightClassification, int((((_2674 << 5u) + (_2660 << 9u)) + (_3068 << 2u)) >> 2u)).x;
                    _3078 = _3077 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3078)
                    {
                        frontier_phi_77_pred = _3067;
                        frontier_phi_77_pred_1 = _3066;
                        frontier_phi_77_pred_2 = _3065;
                        frontier_phi_77_pred_3 = _3064;
                        frontier_phi_77_pred_4 = _3063;
                        frontier_phi_77_pred_5 = _3062;
                    }
                    else
                    {
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3284 = _3062;
                        float _3285 = _3063;
                        float _3286 = _3064;
                        float _3287 = _3065;
                        float _3288 = _3066;
                        float _3289 = _3067;
                        uint _3290 = _3077;
                        uint _3291;
                        vec4 _3316;
                        float _3317;
                        vec4 _3332;
                        vec3 _3344;
                        vec4 _3360;
                        vec4 _3375;
                        float _3421;
                        bool _3422;
                        for (;;)
                        {
                            uint _3301 = ((_3068 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3290));
                            _3291 = (_3290 + 4294967295u) & _3290;
                            uint _3303 = _3301 * 40u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            _3317 = _3316.w;
                            uint _3319 = (_3301 * 40u) + 4u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3334 = (_3301 * 40u) + 8u;
                            _3344 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x));
                            uint _3347 = (_3301 * 40u) + 16u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3301 * 40u) + 20u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3301 * 40u) + 24u;
                            vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3396 = (_3301 * 40u) + 28u;
                            vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            _3421 = fma(_2636, _3409.z, fma(_2635, _3409.y, _3409.x * _2634)) + _3409.w;
                            _3422 = !((fma(_2636, _3390.z, fma(_2635, _3390.y, _3390.x * _2634)) + _3390.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3422)
                            {
                                float _3449 = _3316.x - _2634;
                                float _3450 = _3316.y - _2635;
                                float _3451 = _3316.z - _2636;
                                float _3452 = dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451));
                                float _3455 = inversesqrt(_3452);
                                float _3456 = _3455 * _3449;
                                float _3457 = _3455 * _3450;
                                float _3458 = _3455 * _3451;
                                float _3462 = 1.0 - (_3452 / (_3317 * _3317));
                                float _4615 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3467 = sqrt(_3452) * _3332.w;
                                float _3469 = 1.39999997615814208984375 / (_3467 + 1.39999997615814208984375);
                                float _3470 = _3469 * _3469;
                                float _3473 = ((1.0 - _3470) * dot(vec3(_3456, _3457, _3458), vec3(_821, _824, _827))) + _3470;
                                float _3476 = _3467 * _3467;
                                float _3480 = (fma(_2636, _3360.z, fma(_2635, _3360.y, _3360.x * _2634)) + _3360.w) / _3421;
                                float _3481 = (fma(_2636, _3375.z, fma(_2635, _3375.y, _3375.x * _2634)) + _3375.w) / _3421;
                                float _3485 = 1.0 - dot(vec2(_3480, _3481), vec2(_3480, _3481));
                                float _4631 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3487 = _3486 * (((isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0))) * _3463) / ((_3476 * 0.699999988079071044921875) + 1.0));
                                float _3499 = exp2(log2(1.0 / ((_3476 * 3.5) + 5.0)) * 0.25);
                                float _3500 = 1.0 - _942;
                                float _3507 = sqrt(1.0 - ((1.0 - (_3500 * _3500)) * (1.0 - (_3499 * _3499))));
                                float _3508 = _3507 * _3507;
                                float _3509 = _3508 * _3508;
                                float _3510 = _3456 - _2928;
                                float _3511 = _3457 - _2929;
                                float _3512 = _3458 - _2930;
                                float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                                float _3520 = dot(vec3(_821, _824, _827), vec3((-0.0) - _2928, (-0.0) - _2929, (-0.0) - _2930));
                                float _4642 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3524 = dot(vec3(_821, _824, _827), vec3(_3516 * _3510, _3516 * _3511, _3516 * _3512));
                                float _4653 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3531 = ((_3527 * _3527) * (_3509 + (-1.0))) + 1.0;
                                float _3532 = _3469 * _3508;
                                float _3533 = _3532 * _3532;
                                float _3539 = ((1.0 - _3533) * dot(vec3(_821, _824, _827), vec3(_3456, _3457, _3458))) + _3533;
                                float _4664 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3541 = 1.0 - _3508;
                                float _3551 = (0.5 / (((_3540 * ((_3523 * _3541) + _3508)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3508) * _3523))) * _3540;
                                float _4675 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3561 = (_3486 * _3463) * (((_3509 * 3.1415927410125732421875) * (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) / ((_3531 * _3531) * ((_3476 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3487 * _3332.y;
                                frontier_phi_83_pred_1 = _3487 * _3332.x;
                                frontier_phi_83_pred_2 = _3561 * _3344.z;
                                frontier_phi_83_pred_3 = _3561 * _3344.y;
                                frontier_phi_83_pred_4 = _3561 * _3344.x;
                                frontier_phi_83_pred_5 = _3487 * _3332.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3569 = frontier_phi_83_pred;
                            _3568 = frontier_phi_83_pred_1;
                            _3567 = frontier_phi_83_pred_2;
                            _3566 = frontier_phi_83_pred_3;
                            _3565 = frontier_phi_83_pred_4;
                            _3570 = frontier_phi_83_pred_5;
                            _3274 = _3568 + _3287;
                            _3275 = _3569 + _3288;
                            _3276 = _3570 + _3289;
                            _3271 = _3565 + _3284;
                            _3272 = _3566 + _3285;
                            _3273 = _3567 + _3286;
                            if (_3291 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3291;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3276;
                        frontier_phi_77_pred_1 = _3275;
                        frontier_phi_77_pred_2 = _3274;
                        frontier_phi_77_pred_3 = _3273;
                        frontier_phi_77_pred_4 = _3272;
                        frontier_phi_77_pred_5 = _3271;
                    }
                    _2913 = frontier_phi_77_pred;
                    _2911 = frontier_phi_77_pred_1;
                    _2909 = frontier_phi_77_pred_2;
                    _2907 = frontier_phi_77_pred_3;
                    _2905 = frontier_phi_77_pred_4;
                    _2903 = frontier_phi_77_pred_5;
                    uint _3069 = _3068 + 1u;
                    if (_3069 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3062 = _2903;
                        _3063 = _2905;
                        _3064 = _2907;
                        _3065 = _2909;
                        _3066 = _2911;
                        _3067 = _2913;
                        _3068 = _3069;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2907;
                frontier_phi_58_59_ladder_1 = _2913;
                frontier_phi_58_59_ladder_2 = _2911;
                frontier_phi_58_59_ladder_3 = _2909;
                frontier_phi_58_59_ladder_4 = _2905;
                frontier_phi_58_59_ladder_5 = _2903;
            }
            else
            {
                frontier_phi_58_59_ladder = _2785;
                frontier_phi_58_59_ladder_1 = _2791;
                frontier_phi_58_59_ladder_2 = _2789;
                frontier_phi_58_59_ladder_3 = _2787;
                frontier_phi_58_59_ladder_4 = _2783;
                frontier_phi_58_59_ladder_5 = _2781;
            }
            _2902 = frontier_phi_58_59_ladder_5;
            _2904 = frontier_phi_58_59_ladder_4;
            _2906 = frontier_phi_58_59_ladder;
            _2908 = frontier_phi_58_59_ladder_3;
            _2910 = frontier_phi_58_59_ladder_2;
            _2912 = frontier_phi_58_59_ladder_1;
        }
        float _2917 = isnan(1.0) ? _926 : (isnan(_926) ? 1.0 : min(_926, 1.0));
        _2693 = (_2917 * _2908) + _2129;
        _2695 = (_2917 * _2910) + _2131;
        _2697 = (_2917 * _2912) + _2133;
        _2699 = ((_2902 * _911) * _2917) + _2474;
        _2701 = ((_2904 * _913) * _2917) + _2476;
        _2703 = ((_2906 * _914) * _2917) + _2478;
    }
    else
    {
        _2693 = _2129;
        _2695 = _2131;
        _2697 = _2133;
        _2699 = _2474;
        _2701 = _2476;
        _2703 = _2478;
    }
    float _4691 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4702 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4713 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _2720 = ((isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2693 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _926))) + ((_2699 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    float _2721 = ((isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2695 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _926))) + ((_2701 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    float _2722 = ((isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2697 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _926))) + ((_2703 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    uint _2723 = _853 + 6u;
    float _2731 = _798 / cbSceneParam._m0[86u].x;
    float _2732 = _799 / cbSceneParam._m0[86u].y;
    vec4 _2746 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2731, _2732, (log2((isnan(cbSceneParam._m0[77u].w) ? _721 : (isnan(_721) ? cbSceneParam._m0[77u].w : min(_721, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2748 = _2746.x;
    float _2749 = _2746.y;
    float _2750 = _2746.z;
    float _2751 = _2746.w;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_721 > cbSceneParam._m0[78u].w)
    {
        float _2806 = isnan(_721) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _721 : min(cbSceneParam._m0[80u].w, _721));
        float _2807 = _2806 / _721;
        float _2818 = _2807 * _771;
        float _2819 = _772 * _2807;
        float _2820 = (-0.0) - _2819;
        float _2822 = _2807 * _773;
        float _2824 = (cbSceneParam._m0[77u].w * _2820) / _2806;
        float _2825 = _2824 + cbSceneParam._m0[79u].w;
        float _2826 = cbSceneParam._m0[79u].w - _2819;
        float _2832 = sqrt(((_2818 * _2818) + (_2819 * _2819)) + (_2822 * _2822));
        float _2835 = (1.0 - (cbSceneParam._m0[77u].w / _2806)) * _2832;
        float _2840 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2842 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3019;
        if (abs((_2820 - _2824) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3019 = ((((_2825 > 0.0) ? exp2(_2840 * _2825) : (2.0 - exp2(_2842 * _2825))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2835;
        }
        else
        {
            float _2963 = 1.0 / cbSceneParam._m0[80u].x;
            float _2964 = isnan(_2826) ? _2825 : (isnan(_2825) ? _2826 : max(_2825, _2826));
            float _2965 = isnan(_2826) ? _2825 : (isnan(_2825) ? _2826 : min(_2825, _2826));
            float _2974 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : min(_2964, 0.0));
            float _2975 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : min(_2965, 0.0));
            _3019 = ((abs(_2832 / _2820) * cbSceneParam._m0[80u].y) * ((((_2974 - _2975) * 2.0) - ((exp2(_2840 * (isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0)))) - exp2(_2840 * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))))) * _2963)) - ((exp2(_2842 * _2974) - exp2(_2842 * _2975)) * _2963))) + (_2835 * cbSceneParam._m0[80u].z);
        }
        vec4 _3021 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2731, _2732, 1.0), 0.0);
        float _3030 = exp2((_3019 * (-1.44269502162933349609375)) * (1.0 - _3021.w));
        float _3031 = log2(_3030);
        float _3047 = log2(_2751);
        _2844 = (exp2(_3047 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].x)) * _3021.x) / cbSceneParam._m0[78u].x)) + _2748;
        _2846 = (exp2(_3047 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].y)) * _3021.y) / cbSceneParam._m0[78u].y)) + _2749;
        _2848 = (exp2(_3047 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].z)) * _3021.z) / cbSceneParam._m0[78u].z)) + _2750;
        _2850 = _3030 * _2751;
    }
    else
    {
        _2844 = _2748;
        _2846 = _2749;
        _2848 = _2750;
        _2850 = _2751;
    }
    bool _3057;
    vec4 _2860;
    vec4 _2882;
    float _2884;
    float _2888;
    float _2889;
    float _2890;
    float _2891;
    bool _2901;
    for (;;)
    {
        _2860 = cbMatDynParam._m0[0u];
        float _2862 = roundEven(_2860.y);
        bool _2863 = _2862 == 3.0;
        float _2864 = log2(_2850);
        float _2871 = exp2(_2864 * cbSceneParam._m0[78u].x) * _2720;
        float _2872 = exp2(_2864 * cbSceneParam._m0[78u].y) * _2721;
        float _2873 = exp2(_2864 * cbSceneParam._m0[78u].z) * _2722;
        float _2880 = _787 + (-0.5);
        _2882 = cbMtdParam._m0[1u];
        _2884 = _2882.y * _2880;
        float _2887 = (_2862 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2888 = _2887 * (_2863 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2844)));
        _2889 = _2887 * (_2863 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2846)));
        _2890 = _2887 * (_2863 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2848)));
        _2891 = _2880 * 0.999000012874603271484375;
        _2901 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2901)
        {
            if ((cbInstanceData._m0[_853 + 7u].x + _2891) < 0.5)
            {
                _3057 = true;
                break;
            }
        }
        uint _2998 = _855 + uint(_2860.w);
        if ((cbInstanceData._m0[_2998].w < 1.0) && ((cbInstanceData._m0[_2998].w + _2891) < 0.5))
        {
            _3057 = true;
            break;
        }
        if ((_2884 + 1.0) < _2882.x)
        {
            _3057 = true;
            break;
        }
        _3057 = false;
        break;
    }
    float _3262;
    if (_3057)
    {
        discard_state = true;
        _3262 = 0.0;
    }
    else
    {
        _3262 = cbInstanceData._m0[_2723].w;
    }
    SV_Target.x = _2888;
    SV_Target.y = _2889;
    SV_Target.z = _2890;
    SV_Target.w = _3262;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2723].w;
    discard_exit();
}


