#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1272;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _216 = _215 * _208;
    float _217 = _215 * _209;
    float _218 = _215 * _210;
    float _228 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _229 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _230 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _234 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _235 = _234 * _228;
    float _236 = _234 * _229;
    float _237 = _234 * _230;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    float _255 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _256 = _255 * TANGENT_2.x;
    float _257 = _255 * TANGENT_2.y;
    float _258 = _255 * TANGENT_2.z;
    float _263;
    float _264;
    float _265;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _263 = (-0.0) - _242;
        _264 = (-0.0) - _243;
        _265 = (-0.0) - _244;
    }
    else
    {
        _263 = _242;
        _264 = _243;
        _265 = _244;
    }
    vec4 _304 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _316 = 1.0 - ((1.0 - _304.x) * 1.39999997615814208984375);
    float _3603 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _317 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _324 = (_317 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    float _325 = (_317 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _326 = (_317 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _328 = 1.0 - ((1.0 - _304.y) * 1.39999997615814208984375);
    float _3614 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _329 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _336 = (_329 * (cbMtdParam._m0[13u].x - _324)) + _324;
    float _337 = (_329 * (cbMtdParam._m0[13u].y - _325)) + _325;
    float _338 = (_329 * (cbMtdParam._m0[13u].z - _326)) + _326;
    float _340 = 1.0 - ((1.0 - _304.z) * 1.39999997615814208984375);
    float _3625 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _341 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _369 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[18u].x;
    float _383 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.y - _369) + (cbMtdParam._m0[16u].z * TEXCOORD_5.y))) + 1.0;
    float _3636 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _385 = 1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)));
    float _386 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _387 = isnan(1.0) ? _386 : (isnan(_386) ? 1.0 : min(_386, 1.0));
    float _395 = ((cbMtdParam._m0[16u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5.x - _369) + (cbMtdParam._m0[16u].y * TEXCOORD_5.x))) + 1.0;
    float _3657 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _397 = 1.0 - (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)));
    float _398 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _399 = isnan(1.0) ? _398 : (isnan(_398) ? 1.0 : min(_398, 1.0));
    vec4 _417 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _419 = _417.x;
    float _420 = _417.y;
    float _421 = _417.z;
    float _422 = cbMtdParam._m0[12u].x * _399;
    float _424 = cbMtdParam._m0[12u].y * _399;
    float _426 = cbMtdParam._m0[12u].z * _399;
    float _446 = _397 + _385;
    float _447 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _448 = isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0));
    vec4 _466 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _471 = _466.w;
    float _472 = _466.x * cbMtdParam._m0[10u].x;
    float _473 = _466.y * cbMtdParam._m0[10u].y;
    float _474 = _466.z * cbMtdParam._m0[10u].z;
    float _494 = ((_472 - (_448 * _472)) + ((((((_419 * (cbMtdParam._m0[11u].x - _422)) * _387) + (_422 * _419)) * 4.55000019073486328125) * _448) * _472)) * ((_341 * (cbMtdParam._m0[14u].x - _336)) + _336);
    float _495 = ((((((((_420 * (cbMtdParam._m0[11u].y - _424)) * _387) + (_424 * _420)) * 4.55000019073486328125) * _448) * _473) + _473) - (_448 * _473)) * ((_341 * (cbMtdParam._m0[14u].y - _337)) + _337);
    float _496 = ((((((((_421 * (cbMtdParam._m0[11u].z - _426)) * _387) + (_426 * _421)) * 4.55000019073486328125) * _448) * _474) + _474) - (_448 * _474)) * ((_341 * (cbMtdParam._m0[14u].z - _338)) + _338);
    vec4 _510 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _514 = _510.z;
    float _518 = (_510.x * 2.0) + (-1.0);
    float _520 = (_510.y * 2.0) + (-1.0);
    float _521 = dot(vec2(_518, _520), vec2(_518, _520));
    float _3688 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _526 = sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))));
    float _529 = fma(_526, _263, fma(_520, _256, _518 * _235));
    float _532 = fma(_526, _264, fma(_520, _257, _518 * _236));
    float _535 = fma(_526, _265, fma(_520, _258, _518 * _237));
    float _539 = inversesqrt(dot(vec3(_529, _532, _535), vec3(_529, _532, _535)));
    float _540 = _539 * _529;
    float _541 = _539 * _532;
    float _542 = _539 * _535;
    vec4 _554 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _560 = (_554.x * 2.0) + (-1.0);
    float _561 = (_554.y * 2.0) + (-1.0);
    float _562 = dot(vec2(_560, _561), vec2(_560, _561));
    float _3699 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _567 = sqrt(1.0 - (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))));
    float _570 = fma(_567, _263, fma(_561, _256, _560 * _235));
    float _573 = fma(_567, _264, fma(_561, _257, _560 * _236));
    float _576 = fma(_567, _265, fma(_561, _258, _560 * _237));
    float _580 = inversesqrt(dot(vec3(_570, _573, _576), vec3(_570, _573, _576)));
    float _581 = _580 * _570;
    float _582 = _580 * _573;
    float _583 = _580 * _576;
    float _586 = fma(_583, _218, fma(_582, _217, _581 * _216));
    float _589 = fma(_583, _251, fma(_582, _250, _581 * _249));
    float _592 = fma(_583, _265, fma(_582, _264, _581 * _263));
    float _596 = inversesqrt(dot(vec3(_586, _589, _592), vec3(_586, _589, _592)));
    float _600 = fma(_542, _218, fma(_541, _217, _540 * _216));
    float _603 = fma(_542, _251, fma(_541, _250, _540 * _249));
    float _606 = fma(_542, _265, fma(_541, _264, _540 * _263));
    float _610 = inversesqrt(dot(vec3(_600, _603, _606), vec3(_600, _603, _606)));
    vec4 _626 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _632 = (_626.x * 2.0) + (-1.0);
    float _633 = (_626.y * 2.0) + (-1.0);
    float _634 = dot(vec2(_632, _633), vec2(_632, _633));
    float _3710 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _639 = sqrt(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))));
    vec4 _654 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _660 = (_654.x * 2.0) + (-1.0);
    float _661 = (_654.y * 2.0) + (-1.0);
    float _662 = dot(vec2(_660, _661), vec2(_660, _661));
    float _3721 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _667 = sqrt(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))));
    float _670 = fma(_667, _263, fma(_661, _256, _660 * _235));
    float _673 = fma(_667, _264, fma(_661, _257, _660 * _236));
    float _676 = fma(_667, _265, fma(_661, _258, _660 * _237));
    float _680 = inversesqrt(dot(vec3(_670, _673, _676), vec3(_670, _673, _676)));
    float _681 = _680 * _670;
    float _682 = _680 * _673;
    float _683 = _680 * _676;
    float _686 = fma(_683, _218, fma(_682, _217, _681 * _216));
    float _689 = fma(_683, _251, fma(_682, _250, _681 * _249));
    float _692 = fma(_683, _265, fma(_682, _264, _681 * _263));
    float _696 = inversesqrt(dot(vec3(_686, _689, _692), vec3(_686, _689, _692)));
    float _712 = ((((_610 * _600) * cbMtdParam._m0[17u].w) + (((_586 * _387) * _596) * cbMtdParam._m0[17u].y)) + _632) + (((_686 * _399) * _696) * cbMtdParam._m0[17u].z);
    float _715 = ((((_610 * _603) * cbMtdParam._m0[17u].w) + (((_589 * _387) * _596) * cbMtdParam._m0[17u].y)) + _633) + (((_689 * _399) * _696) * cbMtdParam._m0[17u].z);
    float _718 = fma(_639, _263, fma(_715, _249, _712 * _216));
    float _721 = fma(_639, _264, fma(_715, _250, _712 * _217));
    float _724 = fma(_639, _265, fma(_715, _251, _712 * _218));
    float _728 = inversesqrt(dot(vec3(_718, _721, _724), vec3(_718, _721, _724)));
    float _729 = _728 * _718;
    float _730 = _728 * _721;
    float _731 = _728 * _724;
    float _3732 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _732 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _3743 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _733 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _3754 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3765 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3776 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3787 = isnan(0.0) ? cbMtdParam._m0[18u].y : (isnan(cbMtdParam._m0[18u].y) ? 0.0 : max(cbMtdParam._m0[18u].y, 0.0));
    float _737 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _753 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _804 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _794);
    float _805 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _794);
    float _806 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _794);
    float _810 = inversesqrt(dot(vec3(_804, _805, _806), vec3(_804, _805, _806)));
    float _811 = _804 * _810;
    float _812 = _805 * _810;
    float _813 = _806 * _810;
    float _819 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _820 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _838 = fma(_731, cbSceneParam._m0[5u].z, fma(_730, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _729));
    float _841 = fma(_731, cbSceneParam._m0[6u].z, fma(_730, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _729));
    float _844 = fma(_731, cbSceneParam._m0[7u].z, fma(_730, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _729));
    uint _857 = uint(roundEven(NORMAL.w)) * 13u;
    uint _859 = (_857 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _865 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * cbInstanceData._m0[_859].x;
    float _866 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * cbInstanceData._m0[_859].y;
    float _867 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) * cbInstanceData._m0[_859].z;
    float _3798 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _871 = 1.0 - _737;
    float _872 = _868 * _871;
    float _873 = _869 * _871;
    float _874 = _870 * _871;
    float _879 = (_868 + (-0.039999999105930328369140625)) * _737;
    float _880 = (_869 + (-0.039999999105930328369140625)) * _737;
    float _881 = (_870 + (-0.039999999105930328369140625)) * _737;
    float _882 = _879 + 0.039999999105930328369140625;
    float _884 = _880 + 0.039999999105930328369140625;
    float _885 = _881 + 0.039999999105930328369140625;
    vec4 _894 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _819, cbSceneParam._m0[86u].y * _820));
    float _897 = _894.x * TEXCOORD_5.z;
    float _898 = dot(vec3(_729, _730, _731), vec3(_811, _812, _813));
    float _901 = _898 * 2.0;
    float _905 = (_901 * _729) - _811;
    float _906 = (_901 * _730) - _812;
    float _907 = (_901 * _731) - _813;
    float _911 = abs(dot(vec3(_811, _812, _813), vec3(_729, _730, _731)));
    float _3831 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _913 = sqrt(_733);
    float _926 = exp2((_913 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_913 * 3.0));
    float _932 = (1.0 - _926) * ((_913 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _933 = _926 * _913;
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1271;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _996 = fma(_969, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961));
        float _1000 = fma(_969, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961));
        float _1004 = fma(_969, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961));
        float _1029 = _961 + _729;
        float _1030 = _965 + _730;
        float _1031 = _969 + _731;
        float _1041 = fma(_1031, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029)) - _996;
        float _1042 = fma(_1031, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029)) - _1000;
        float _1043 = fma(_1031, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029)) - _1004;
        float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
        float _1060 = ((_1047 * _1041) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_996 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1047 * _1042) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1000 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1047 * _1043) / cbModelParam._m0[34u].z) + ((((((_1004 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        float _1099 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1065.x + (-0.5));
        float _1101 = _1099 * (_1065.y + (-0.5));
        float _1102 = _1099 * (_1065.z + (-0.5));
        float _1109 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1072.x + (-0.5));
        float _1111 = _1109 * (_1072.y + (-0.5));
        float _1112 = _1109 * (_1072.z + (-0.5));
        float _1119 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1079.x + (-0.5));
        float _1121 = _1119 * (_1079.y + (-0.5));
        float _1122 = _1119 * (_1079.z + (-0.5));
        float _1129 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1086.x + (-0.5));
        float _1131 = _1129 * (_1086.y + (-0.5));
        float _1132 = _1129 * (_1086.z + (-0.5));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = _1100 * 0.5;
        float _1137 = _1110 * 0.5;
        float _1138 = _1120 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1153 = (dot(vec3(_729, _730, _731), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1163 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3879 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1165 + 1.0))) + _1170) * _1133;
        float _1180 = _1101 * 0.5;
        float _1181 = _1111 * 0.5;
        float _1182 = _1121 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_729, _730, _731), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3912 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1207 + 1.0))) + _1212) * _1134;
        float _1222 = _1102 * 0.5;
        float _1223 = _1112 * 0.5;
        float _1224 = _1122 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_729, _730, _731), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3945 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1249 + 1.0))) + _1254) * _1135;
        _1271 = _1102;
        _1273 = _1101;
        _1274 = _1100;
        _1275 = _1112;
        _1276 = _1111;
        _1277 = _1110;
        _1278 = _1122;
        _1279 = _1121;
        _1280 = _1120;
        _1281 = _1135;
        _1282 = _1134;
        _1283 = _1133;
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
    }
    else
    {
        _1271 = _1272;
        _1273 = _1272;
        _1274 = _1272;
        _1275 = _1272;
        _1276 = _1272;
        _1277 = _1272;
        _1278 = _1272;
        _1279 = _1272;
        _1280 = _1272;
        _1281 = _1272;
        _1282 = _1272;
        _1283 = _1272;
        _1284 = 0.0;
        _1285 = 0.0;
        _1286 = 0.0;
    }
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1312 = fma(_969, cbModelParam._m0[30u].z, fma(_965, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961));
        float _1316 = fma(_969, cbModelParam._m0[31u].z, fma(_965, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961));
        float _1320 = fma(_969, cbModelParam._m0[32u].z, fma(_965, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961));
        float _1343 = _961 + _729;
        float _1344 = _965 + _730;
        float _1345 = _969 + _731;
        float _1355 = fma(_1345, cbModelParam._m0[30u].z, fma(_1344, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1343)) - _1312;
        float _1356 = fma(_1345, cbModelParam._m0[31u].z, fma(_1344, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1343)) - _1316;
        float _1357 = fma(_1345, cbModelParam._m0[32u].z, fma(_1344, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1343)) - _1320;
        float _1361 = inversesqrt(dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357)));
        float _1374 = ((_1361 * _1355) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1312 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1361 * _1356) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1316 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1361 * _1357) / cbModelParam._m0[35u].z) + ((((((_1320 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        float _1411 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1378.x + (-0.5));
        float _1413 = _1411 * (_1378.y + (-0.5));
        float _1414 = _1411 * (_1378.z + (-0.5));
        float _1421 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1385.x + (-0.5));
        float _1423 = _1421 * (_1385.y + (-0.5));
        float _1424 = _1421 * (_1385.z + (-0.5));
        float _1431 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1392.x + (-0.5));
        float _1433 = _1431 * (_1392.y + (-0.5));
        float _1434 = _1431 * (_1392.z + (-0.5));
        float _1441 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1399.x + (-0.5));
        float _1443 = _1441 * (_1399.y + (-0.5));
        float _1444 = _1441 * (_1399.z + (-0.5));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = _1412 * 0.5;
        float _1449 = _1422 * 0.5;
        float _1450 = _1432 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_729, _730, _731), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4008 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1475 + 1.0))) + _1480) * _1445;
        float _1490 = _1413 * 0.5;
        float _1491 = _1423 * 0.5;
        float _1492 = _1433 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_729, _730, _731), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4041 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1517 + 1.0))) + _1522) * _1446;
        float _1532 = _1414 * 0.5;
        float _1533 = _1424 * 0.5;
        float _1534 = _1434 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_729, _730, _731), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4074 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1559 + 1.0))) + _1564) * _1447;
        _1581 = _1414;
        _1582 = _1413;
        _1583 = _1412;
        _1584 = _1424;
        _1585 = _1423;
        _1586 = _1422;
        _1587 = _1434;
        _1588 = _1433;
        _1589 = _1432;
        _1590 = _1447;
        _1591 = _1446;
        _1592 = _1445;
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1272;
        _1582 = _1272;
        _1583 = _1272;
        _1584 = _1272;
        _1585 = _1272;
        _1586 = _1272;
        _1587 = _1272;
        _1588 = _1272;
        _1589 = _1272;
        _1590 = _1272;
        _1591 = _1272;
        _1592 = _1272;
        _1593 = 0.0;
        _1594 = 0.0;
        _1595 = 0.0;
    }
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1284)) + _1284;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1285)) + _1285;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1286)) + _1286;
    float _1628 = fma(_1607, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1605 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1607, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1605 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1607, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1605));
    float _1649 = _905 * 0.5;
    float _1650 = _906 * 0.5;
    float _1651 = _907 * 0.5;
    float _1652 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1655 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1658 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1692;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1665 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1271, _1275, _1278, _1281));
        float _1669 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1673 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1680 = dot(vec4(cbModelParam._m0[39u]), vec4(_1649, _1650, _1651, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1703;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1694 = dot(vec4(cbModelParam._m0[40u]), vec4(_1649, _1650, _1651, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1707 = (_1703 * cbModelParam._m0[1u].x) + (_1692 * (1.0 - cbModelParam._m0[1u].x));
    float _1717 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _733);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1717 : min(cbModelParam._m0[25u].z, _1717));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1765 = fma(_969, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961)) + cbModelParam._m0[13u].w;
        float _1769 = fma(_969, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961)) + cbModelParam._m0[14u].w;
        float _1773 = fma(_969, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961)) + cbModelParam._m0[15u].w;
        float _1776 = fma(_907, cbModelParam._m0[13u].z, fma(_906, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _905));
        float _1779 = fma(_907, cbModelParam._m0[14u].z, fma(_906, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _905));
        float _1782 = fma(_907, cbModelParam._m0[15u].z, fma(_906, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _905));
        float _1810;
        if (_1776 > 0.0)
        {
            _1810 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1810 = frontier_phi_16_14_ladder;
        }
        float _2014;
        if (_1779 > 0.0)
        {
            _2014 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2014 = frontier_phi_25_21_ladder;
        }
        float _2268;
        if (_1782 > 0.0)
        {
            _2268 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2268 = frontier_phi_37_32_ladder;
        }
        float _2270 = isnan(_2014) ? _1810 : (isnan(_1810) ? _2014 : min(_1810, _2014));
        float _2271 = isnan(_2268) ? _2270 : (isnan(_2270) ? _2268 : min(_2270, _2268));
        float _2275 = (_2271 * _1776) + _1765;
        float _2276 = (_2271 * _1779) + _1769;
        float _2277 = (_2271 * _1782) + _1773;
        float _2278 = _2271 * 9.9999997473787516355514526367188e-05;
        float _2280 = (-1.0) - _2278;
        float _2282 = _2278 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2277 > _2282) || ((_2277 < _2280) || ((_2276 > _2282) || ((_2276 < _2280) || ((_2275 < _2280) || (_2275 > _2282))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2405 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2277, cbModelParam._m0[9u].z, fma(_2276, cbModelParam._m0[9u].y, _2275 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2277, cbModelParam._m0[10u].z, fma(_2276, cbModelParam._m0[10u].y, _2275 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2277, cbModelParam._m0[11u].z, fma(_2276, cbModelParam._m0[11u].y, _2275 * cbModelParam._m0[11u].x))), _1718);
            frontier_phi_15_37_ladder = _2405.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2405.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2405.x * cbModelParam._m0[1u].y;
        }
        _1798 = frontier_phi_15_37_ladder_2;
        _1800 = frontier_phi_15_37_ladder_1;
        _1802 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1786 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_905, _906, _907), _1718);
        _1798 = _1786.x * cbModelParam._m0[1u].y;
        _1800 = _1786.y * cbModelParam._m0[1u].y;
        _1802 = _1786.z * cbModelParam._m0[1u].y;
    }
    float _1806 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _733);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1806 : min(cbModelParam._m0[25u].w, _1806));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1862 = fma(_969, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961)) + cbModelParam._m0[21u].w;
        float _1866 = fma(_969, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961)) + cbModelParam._m0[22u].w;
        float _1870 = fma(_969, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961)) + cbModelParam._m0[23u].w;
        float _1873 = fma(_907, cbModelParam._m0[21u].z, fma(_906, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _905));
        float _1876 = fma(_907, cbModelParam._m0[22u].z, fma(_906, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _905));
        float _1879 = fma(_907, cbModelParam._m0[23u].z, fma(_906, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _905));
        float _2019;
        if (_1873 > 0.0)
        {
            _2019 = abs((1.0 - _1862) / _1873);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1862 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2019 = frontier_phi_27_23_ladder;
        }
        float _2295;
        if (_1876 > 0.0)
        {
            _2295 = abs((1.0 - _1866) / _1876);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1866 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2295 = frontier_phi_39_34_ladder;
        }
        float _2508;
        if (_1879 > 0.0)
        {
            _2508 = abs((1.0 - _1870) / _1879);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1870 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2508 = frontier_phi_48_45_ladder;
        }
        float _2510 = isnan(_2295) ? _2019 : (isnan(_2019) ? _2295 : min(_2019, _2295));
        float _2511 = isnan(_2508) ? _2510 : (isnan(_2510) ? _2508 : min(_2510, _2508));
        float _2515 = (_2511 * _1873) + _1862;
        float _2516 = (_2511 * _1876) + _1866;
        float _2517 = (_2511 * _1879) + _1870;
        float _2518 = _2511 * 9.9999997473787516355514526367188e-05;
        float _2519 = (-1.0) - _2518;
        float _2521 = _2518 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2517 > _2521) || ((_2517 < _2519) || ((_2516 > _2521) || ((_2516 < _2519) || ((_2515 < _2519) || (_2515 > _2521))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2517, cbModelParam._m0[17u].z, fma(_2516, cbModelParam._m0[17u].y, _2515 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2517, cbModelParam._m0[18u].z, fma(_2516, cbModelParam._m0[18u].y, _2515 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2517, cbModelParam._m0[19u].z, fma(_2516, cbModelParam._m0[19u].y, _2515 * cbModelParam._m0[19u].x))), _1807);
            frontier_phi_24_48_ladder = _2717.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2717.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2717.x * cbModelParam._m0[1u].z;
        }
        _1898 = frontier_phi_24_48_ladder_2;
        _1900 = frontier_phi_24_48_ladder_1;
        _1902 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_905, _906, _907), _1807);
        _1898 = _1882.x * cbModelParam._m0[1u].z;
        _1900 = _1882.y * cbModelParam._m0[1u].z;
        _1902 = _1882.z * cbModelParam._m0[1u].z;
    }
    float _1915 = (((_932 * _882) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1898 - _1798)) + _1798);
    float _1917 = (((_932 * _884) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1900 - _1800)) + _1800);
    float _1919 = (((_932 * _885) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1902 - _1802)) + _1802);
    float _1922 = fma(_1919, cbSceneParam._m0[89u].z, fma(_1917, cbSceneParam._m0[89u].y, _1915 * cbSceneParam._m0[89u].x));
    float _1925 = fma(_1919, cbSceneParam._m0[90u].z, fma(_1917, cbSceneParam._m0[90u].y, _1915 * cbSceneParam._m0[90u].x));
    float _1928 = fma(_1919, cbSceneParam._m0[91u].z, fma(_1917, cbSceneParam._m0[91u].y, _1915 * cbSceneParam._m0[91u].x));
    uvec4 _1938 = floatBitsToUint(cbInstanceData._m0[_857 + 5u]);
    uint _1940 = _1938.x * 14u;
    uint _1941 = _1940 + 13u;
    float _1948 = _897 + (-1.0);
    float _1953 = (cbLight._m0[_1941].x * _1948) + 1.0;
    float _1954 = (cbLight._m0[_1941].y * _1948) + 1.0;
    float _1955 = (cbLight._m0[_1941].z * _1948) + 1.0;
    float _1956 = (cbLight._m0[_1941].w * _1948) + 1.0;
    uint _1957 = _1940 + 5u;
    float _1963 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
    uint _1967 = _1940 + 4u;
    float _1973 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
    uint _1977 = _1940 | 1u;
    float _1988 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_729, _730, _731));
    float _1991 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_729, _730, _731));
    float _4210 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _4221 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1996 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.3183098733425140380859375;
    float _1998 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _2005 = ((cbLight._m0[_1957].x * _1963) * _1998) + ((cbLight._m0[_1967].x * _1973) * _1996);
    float _2006 = ((_1963 * cbLight._m0[_1957].y) * _1998) + ((_1973 * cbLight._m0[_1967].y) * _1996);
    float _2007 = ((_1963 * cbLight._m0[_1957].z) * _1998) + ((_1973 * cbLight._m0[_1967].z) * _1996);
    uvec4 _2011 = floatBitsToUint(cbLight._m0[_1940 + 12u]);
    bool _2013 = _2011.x == 0u;
    float _2024;
    float _2026;
    float _2028;
    if (_2013)
    {
        _2024 = _2005;
        _2026 = _2006;
        _2028 = _2007;
    }
    else
    {
        uint _2032 = _1940 + 6u;
        float _2048 = (dot(vec3(cbLight._m0[_1940 + 2u].xyz), vec3(_729, _730, _731)) * 0.5) + 0.5;
        float _2049 = _2048 * _2048;
        float _4232 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2050 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2051 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2024 = (((cbLight._m0[_2032].x * 0.3183098733425140380859375) * _2050) * _2051) + _2005;
        _2026 = (((cbLight._m0[_2032].y * 0.3183098733425140380859375) * _2050) * _2051) + _2006;
        _2028 = (((cbLight._m0[_2032].z * 0.3183098733425140380859375) * _2050) * _2051) + _2007;
    }
    bool _2031 = _2011.y == 0u;
    float _2069;
    float _2071;
    float _2073;
    if (_2031)
    {
        _2069 = _2024;
        _2071 = _2026;
        _2073 = _2028;
    }
    else
    {
        uint _2239 = _1940 + 7u;
        float _2255 = (dot(vec3(cbLight._m0[_1940 + 3u].xyz), vec3(_729, _730, _731)) * 0.5) + 0.5;
        float _2256 = _2255 * _2255;
        float _4248 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2257 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2258 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2069 = (((cbLight._m0[_2239].x * 0.3183098733425140380859375) * _2257) * _2258) + _2024;
        _2071 = (((cbLight._m0[_2239].y * 0.3183098733425140380859375) * _2257) * _2258) + _2026;
        _2073 = (((cbLight._m0[_2239].z * 0.3183098733425140380859375) * _2257) * _2258) + _2028;
    }
    uint _2076 = _1940 + 8u;
    float _2089 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _733) * 0.949999988079071044921875);
    float _2090 = _2089 * _2089;
    float _2091 = cbLight._m0[_1940].x + _811;
    float _2092 = cbLight._m0[_1940].y + _812;
    float _2093 = cbLight._m0[_1940].z + _813;
    float _2097 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
    float _2098 = _2097 * _2091;
    float _2099 = _2097 * _2092;
    float _2100 = _2097 * _2093;
    float _2101 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_1940].xyz));
    float _4264 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _2105 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2106 = dot(vec3(_729, _730, _731), vec3(_2098, _2099, _2100));
    float _4286 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2110 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2098, _2099, _2100));
    float _4297 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2114 = _2090 * _2090;
    float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
    float _2126 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
    float _2127 = 0.959999978542327880859375 - _879;
    float _2129 = 0.959999978542327880859375 - _880;
    float _2130 = 0.959999978542327880859375 - _881;
    float _2137 = 1.0 - _2090;
    float _2148 = (0.5 / (((_2105 * ((_2104 * _2137) + _2090)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2137) + _2090) * _2104))) * _2104;
    float _4308 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2150 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
    uint _2161 = _1940 + 9u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _733) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_1977].x + _811;
    float _2175 = cbLight._m0[_1977].y + _812;
    float _2176 = cbLight._m0[_1977].z + _813;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_1977].xyz));
    float _4319 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2188 = dot(vec3(_729, _730, _731), vec3(_2181, _2182, _2183));
    float _4330 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2192 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2181, _2182, _2183));
    float _4341 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2196 = _2173 * _2173;
    float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
    float _2207 = exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0);
    float _2214 = 1.0 - _2173;
    float _2224 = (0.5 / (((_2105 * ((_2187 * _2214) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2214) + _2173) * _2187))) * _2187;
    float _4352 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2226 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
    float _2236 = (((((_2207 * _2127) + _882) * cbLight._m0[_2161].x) * _2226) * _1963) + (((((_2126 * _2127) + _882) * cbLight._m0[_2076].x) * _2150) * _1973);
    float _2237 = (((((_2207 * _2129) + _884) * cbLight._m0[_2161].y) * _2226) * _1963) + (((((_2126 * _2129) + _884) * cbLight._m0[_2076].y) * _2150) * _1973);
    float _2238 = (((((_2207 * _2130) + _885) * cbLight._m0[_2161].z) * _2226) * _1963) + (((((_2126 * _2130) + _885) * cbLight._m0[_2076].z) * _2150) * _1973);
    float _2300;
    float _2302;
    float _2304;
    if (_2013)
    {
        _2300 = _2236;
        _2302 = _2237;
        _2304 = _2238;
    }
    else
    {
        uint _2306 = _1940 + 2u;
        uint _2310 = _1940 + 10u;
        float _2324 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _733) * 0.949999988079071044921875);
        float _2325 = _2324 * _2324;
        float _2326 = cbLight._m0[_2306].x + _811;
        float _2327 = cbLight._m0[_2306].y + _812;
        float _2328 = cbLight._m0[_2306].z + _813;
        float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
        float _2333 = _2332 * _2326;
        float _2334 = _2332 * _2327;
        float _2335 = _2332 * _2328;
        float _2336 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2306].xyz));
        float _4363 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2340 = dot(vec3(_729, _730, _731), vec3(_2333, _2334, _2335));
        float _4374 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2343 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2344 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2333, _2334, _2335));
        float _4385 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2348 = _2325 * _2325;
        float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
        float _2359 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
        float _2366 = 1.0 - _2325;
        float _2376 = (0.5 / (((_2105 * ((_2339 * _2366) + _2325)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2366) + _2325) * _2339))) * _2339;
        float _4396 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2378 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
        float _2379 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
        _2300 = (((((_2359 * _2127) + _882) * cbLight._m0[_2310].x) * _2378) * _2379) + _2236;
        _2302 = (((((_2359 * _2129) + _884) * cbLight._m0[_2310].y) * _2378) * _2379) + _2237;
        _2304 = (((((_2359 * _2130) + _885) * cbLight._m0[_2310].z) * _2378) * _2379) + _2238;
    }
    float _2414;
    float _2416;
    float _2418;
    if (_2031)
    {
        _2414 = _2300;
        _2416 = _2302;
        _2418 = _2304;
    }
    else
    {
        uint _2425 = _1940 + 3u;
        uint _2429 = _1940 + 11u;
        float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2425].w)) * _733) * 0.949999988079071044921875);
        float _2444 = _2443 * _2443;
        float _2445 = cbLight._m0[_2425].x + _811;
        float _2446 = cbLight._m0[_2425].y + _812;
        float _2447 = cbLight._m0[_2425].z + _813;
        float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
        float _2452 = _2451 * _2445;
        float _2453 = _2451 * _2446;
        float _2454 = _2451 * _2447;
        float _2455 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2425].xyz));
        float _4412 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2458 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2459 = dot(vec3(_729, _730, _731), vec3(_2452, _2453, _2454));
        float _4423 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2463 = dot(vec3(cbLight._m0[_2425].xyz), vec3(_2452, _2453, _2454));
        float _4434 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2467 = _2444 * _2444;
        float _2471 = ((_2462 * _2462) * (_2467 + (-1.0))) + 1.0;
        float _2478 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
        float _2485 = 1.0 - _2444;
        float _2495 = (0.5 / (((_2105 * ((_2458 * _2485) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2485) + _2444) * _2458))) * _2458;
        float _4445 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2497 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2467 / ((_2471 * _2471) * 3.141590118408203125));
        float _2498 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2414 = (((((_2478 * _2127) + _882) * cbLight._m0[_2429].x) * _2497) * _2498) + _2300;
        _2416 = (((((_2478 * _2129) + _884) * cbLight._m0[_2429].y) * _2497) * _2498) + _2302;
        _2418 = (((((_2478 * _2130) + _885) * cbLight._m0[_2429].z) * _2497) * _2498) + _2304;
    }
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    if (_1938.y == 0u)
    {
        float _2573 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2574 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2573;
        float _2575 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2573;
        float _2576 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2573;
        uvec4 _2588 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2589 = _2588.x;
        uint _2600 = uint((float(_2588.y) * floor(float(uint(cbSceneParam._m0[85u].y * _820) / _2589))) + floor(float(uint(cbSceneParam._m0[85u].x * _819) / _2589)));
        float _2610 = (log2(_2576 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2611 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        uint _2614 = uint(isnan(14.0) ? _2611 : (isnan(_2611) ? 14.0 : min(_2611, 14.0)));
        uvec4 _2619 = texelFetch(g_lightClusterGridBuffer, int(((_2614 << 2u) + (_2600 << 6u)) >> 2u));
        uint _2620 = _2619.x;
        uint _2621 = _2588.z;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((((1u << ((_2621 >> 4u) & 15u)) + 4294967295u) & _2620) == 0u) || ((_2621 & 240u) == 0u))
        {
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
        }
        else
        {
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            uint _2872 = 0u;
            uint _2881;
            bool _2882;
            for (;;)
            {
                _2881 = texelFetch(g_lightClassification, int((((_2614 << 5u) + (_2600 << 9u)) + (_2872 << 2u)) >> 2u)).x;
                _2882 = _2881 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2882)
                {
                    frontier_phi_63_pred = _2871;
                    frontier_phi_63_pred_1 = _2870;
                    frontier_phi_63_pred_2 = _2869;
                    frontier_phi_63_pred_3 = _2868;
                    frontier_phi_63_pred_4 = _2867;
                    frontier_phi_63_pred_5 = _2866;
                }
                else
                {
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    uint _2996;
                    _2990 = _2866;
                    _2991 = _2867;
                    _2992 = _2868;
                    _2993 = _2869;
                    _2994 = _2870;
                    _2995 = _2871;
                    _2996 = _2881;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    for (;;)
                    {
                        uint _3000 = uint(findLSB(_2996)) + (_2872 << 5u);
                        uint _2997 = (_2996 + 4294967295u) & _2996;
                        uint _3002 = _3000 * 48u;
                        vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 3u)).x));
                        uint _3022 = (_3000 * 48u) + 4u;
                        vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 3u)).x));
                        uint _3041 = (_3000 * 48u) + 8u;
                        vec3 _3052 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x));
                        float _3056 = _3016.x - _2574;
                        float _3057 = _3016.y - _2575;
                        float _3058 = _3016.z - _2576;
                        float _3059 = dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058));
                        float _3062 = inversesqrt(_3059);
                        float _3063 = _3062 * _3056;
                        float _3064 = _3062 * _3057;
                        float _3065 = _3062 * _3058;
                        float _3066 = dot(vec3(_838, _841, _844), vec3(_3063, _3064, _3065));
                        float _3071 = 1.0 - (_3059 * _3016.w);
                        float _4471 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3072 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3073 = sqrt(_3059) * _3035.w;
                        float _3075 = 1.39999997615814208984375 / (_3073 + 1.39999997615814208984375);
                        float _3076 = _3075 * _3075;
                        float _3079 = ((1.0 - _3076) * _3066) + _3076;
                        float _3082 = _3073 * _3073;
                        float _3086 = ((isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))) * _3072) / ((_3082 * 0.699999988079071044921875) + 1.0);
                        float _3090 = (-0.0) - _2574;
                        float _3091 = (-0.0) - _2575;
                        float _3092 = (-0.0) - _2576;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3097 = _3096 * _3090;
                        float _3098 = _3096 * _3091;
                        float _3099 = _3096 * _3092;
                        float _3107 = exp2(log2(1.0 / ((_3082 * 3.5) + 5.0)) * 0.25);
                        float _3108 = 1.0 - _913;
                        float _3115 = sqrt(1.0 - ((1.0 - (_3108 * _3108)) * (1.0 - (_3107 * _3107))));
                        float _3116 = _3115 * _3115;
                        float _3117 = _3116 * _3116;
                        float _3118 = _3097 + _3063;
                        float _3119 = _3098 + _3064;
                        float _3120 = _3099 + _3065;
                        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                        float _3128 = dot(vec3(_838, _841, _844), vec3(_3097, _3098, _3099));
                        float _4487 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3131 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3132 = dot(vec3(_838, _841, _844), vec3(_3124 * _3118, _3124 * _3119, _3124 * _3120));
                        float _4498 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3139 = ((_3135 * _3135) * (_3117 + (-1.0))) + 1.0;
                        float _3140 = _3075 * _3116;
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3066) + _3141;
                        float _4509 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3145 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3146 = 1.0 - _3116;
                        float _3156 = (0.5 / (((_3145 * ((_3131 * _3146) + _3116)) + 9.9999999392252902907785028219223e-09) + (((_3145 * _3146) + _3116) * _3131))) * _3145;
                        float _4520 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3167 = (((_3117 * 3.1415927410125732421875) * (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) / ((_3139 * _3139) * ((_3082 * 2.1991131305694580078125) + 3.141590118408203125))) * _3072;
                        _2925 = (_3086 * _3035.x) + _2993;
                        _2926 = (_3086 * _3035.y) + _2994;
                        _2927 = (_3086 * _3035.z) + _2995;
                        _2922 = (_3167 * _3052.x) + _2990;
                        _2923 = (_3167 * _3052.y) + _2991;
                        _2924 = (_3167 * _3052.z) + _2992;
                        if (_2997 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2990 = _2922;
                            _2991 = _2923;
                            _2992 = _2924;
                            _2993 = _2925;
                            _2994 = _2926;
                            _2995 = _2927;
                            _2996 = _2997;
                        }
                    }
                    frontier_phi_63_pred = _2927;
                    frontier_phi_63_pred_1 = _2926;
                    frontier_phi_63_pred_2 = _2925;
                    frontier_phi_63_pred_3 = _2924;
                    frontier_phi_63_pred_4 = _2923;
                    frontier_phi_63_pred_5 = _2922;
                }
                _2733 = frontier_phi_63_pred;
                _2731 = frontier_phi_63_pred_1;
                _2729 = frontier_phi_63_pred_2;
                _2727 = frontier_phi_63_pred_3;
                _2725 = frontier_phi_63_pred_4;
                _2723 = frontier_phi_63_pred_5;
                uint _2873 = _2872 + 1u;
                if (_2873 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2866 = _2723;
                    _2867 = _2725;
                    _2868 = _2727;
                    _2869 = _2729;
                    _2870 = _2731;
                    _2871 = _2733;
                    _2872 = _2873;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
        }
        uvec4 _2736 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2737 = _2736.z;
        uint _2739 = (_2737 >> 8u) & 15u;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        if (((4294967295u << _2739) & _2620) == 0u)
        {
            _2834 = _2722;
            _2836 = _2724;
            _2838 = _2726;
            _2840 = _2728;
            _2842 = _2730;
            _2844 = _2732;
        }
        else
        {
            float _2859 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
            float _2860 = _2859 * _2574;
            float _2861 = _2859 * _2575;
            float _2862 = _2859 * _2576;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2739 < ((_2737 >> 12u) & 15u))
            {
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2845;
                float _2973 = _2722;
                float _2974 = _2724;
                float _2975 = _2726;
                float _2976 = _2728;
                float _2977 = _2730;
                float _2978 = _2732;
                uint _2979 = _2739;
                uint _2988;
                bool _2989;
                for (;;)
                {
                    _2988 = texelFetch(g_lightClassification, int((((_2614 << 5u) + (_2600 << 9u)) + (_2979 << 2u)) >> 2u)).x;
                    _2989 = _2988 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2989)
                    {
                        frontier_phi_69_pred = _2978;
                        frontier_phi_69_pred_1 = _2977;
                        frontier_phi_69_pred_2 = _2976;
                        frontier_phi_69_pred_3 = _2975;
                        frontier_phi_69_pred_4 = _2974;
                        frontier_phi_69_pred_5 = _2973;
                    }
                    else
                    {
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3185 = _2973;
                        float _3186 = _2974;
                        float _3187 = _2975;
                        float _3188 = _2976;
                        float _3189 = _2977;
                        float _3190 = _2978;
                        uint _3191 = _2988;
                        uint _3192;
                        vec4 _3217;
                        float _3218;
                        vec4 _3233;
                        vec3 _3245;
                        vec4 _3260;
                        vec4 _3276;
                        float _3323;
                        bool _3324;
                        for (;;)
                        {
                            uint _3202 = ((_2979 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3191));
                            _3192 = (_3191 + 4294967295u) & _3191;
                            uint _3204 = _3202 * 40u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            _3218 = _3217.w;
                            uint _3220 = (_3202 * 40u) + 4u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3235 = (_3202 * 40u) + 8u;
                            _3245 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x));
                            uint _3247 = (_3202 * 40u) + 16u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3263 = (_3202 * 40u) + 20u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3279 = (_3202 * 40u) + 24u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3298 = (_3202 * 40u) + 28u;
                            vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            _3323 = fma(_2576, _3311.z, fma(_2575, _3311.y, _3311.x * _2574)) + _3311.w;
                            _3324 = !((fma(_2576, _3292.z, fma(_2575, _3292.y, _3292.x * _2574)) + _3292.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3324)
                            {
                                float _3351 = _3217.x - _2574;
                                float _3352 = _3217.y - _2575;
                                float _3353 = _3217.z - _2576;
                                float _3354 = dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353));
                                float _3357 = inversesqrt(_3354);
                                float _3358 = _3357 * _3351;
                                float _3359 = _3357 * _3352;
                                float _3360 = _3357 * _3353;
                                float _3364 = 1.0 - (_3354 / (_3218 * _3218));
                                float _4531 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3369 = sqrt(_3354) * _3233.w;
                                float _3371 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                                float _3372 = _3371 * _3371;
                                float _3375 = ((1.0 - _3372) * dot(vec3(_3358, _3359, _3360), vec3(_838, _841, _844))) + _3372;
                                float _3378 = _3369 * _3369;
                                float _3382 = (fma(_2576, _3260.z, fma(_2575, _3260.y, _3260.x * _2574)) + _3260.w) / _3323;
                                float _3383 = (fma(_2576, _3276.z, fma(_2575, _3276.y, _3276.x * _2574)) + _3276.w) / _3323;
                                float _3387 = 1.0 - dot(vec2(_3382, _3383), vec2(_3382, _3383));
                                float _4547 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3389 = _3388 * (((isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0))) * _3365) / ((_3378 * 0.699999988079071044921875) + 1.0));
                                float _3401 = exp2(log2(1.0 / ((_3378 * 3.5) + 5.0)) * 0.25);
                                float _3402 = 1.0 - _913;
                                float _3409 = sqrt(1.0 - ((1.0 - (_3402 * _3402)) * (1.0 - (_3401 * _3401))));
                                float _3410 = _3409 * _3409;
                                float _3411 = _3410 * _3410;
                                float _3412 = _3358 - _2860;
                                float _3413 = _3359 - _2861;
                                float _3414 = _3360 - _2862;
                                float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                                float _3422 = dot(vec3(_838, _841, _844), vec3((-0.0) - _2860, (-0.0) - _2861, (-0.0) - _2862));
                                float _4558 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3425 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3426 = dot(vec3(_838, _841, _844), vec3(_3418 * _3412, _3418 * _3413, _3418 * _3414));
                                float _4569 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3429 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3433 = ((_3429 * _3429) * (_3411 + (-1.0))) + 1.0;
                                float _3434 = _3371 * _3410;
                                float _3435 = _3434 * _3434;
                                float _3441 = ((1.0 - _3435) * dot(vec3(_838, _841, _844), vec3(_3358, _3359, _3360))) + _3435;
                                float _4580 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3443 = 1.0 - _3410;
                                float _3453 = (0.5 / (((_3442 * ((_3425 * _3443) + _3410)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3410) * _3425))) * _3442;
                                float _4591 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3463 = (_3388 * _3365) * (((_3411 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3433 * _3433) * ((_3378 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3389 * _3233.z;
                                frontier_phi_75_pred_1 = _3389 * _3233.y;
                                frontier_phi_75_pred_2 = _3389 * _3233.x;
                                frontier_phi_75_pred_3 = _3463 * _3245.z;
                                frontier_phi_75_pred_4 = _3463 * _3245.y;
                                frontier_phi_75_pred_5 = _3463 * _3245.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3472 = frontier_phi_75_pred;
                            _3471 = frontier_phi_75_pred_1;
                            _3470 = frontier_phi_75_pred_2;
                            _3469 = frontier_phi_75_pred_3;
                            _3468 = frontier_phi_75_pred_4;
                            _3467 = frontier_phi_75_pred_5;
                            _3175 = _3470 + _3188;
                            _3176 = _3471 + _3189;
                            _3177 = _3472 + _3190;
                            _3172 = _3467 + _3185;
                            _3173 = _3468 + _3186;
                            _3174 = _3469 + _3187;
                            if (_3192 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3192;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3177;
                        frontier_phi_69_pred_1 = _3176;
                        frontier_phi_69_pred_2 = _3175;
                        frontier_phi_69_pred_3 = _3174;
                        frontier_phi_69_pred_4 = _3173;
                        frontier_phi_69_pred_5 = _3172;
                    }
                    _2845 = frontier_phi_69_pred;
                    _2843 = frontier_phi_69_pred_1;
                    _2841 = frontier_phi_69_pred_2;
                    _2839 = frontier_phi_69_pred_3;
                    _2837 = frontier_phi_69_pred_4;
                    _2835 = frontier_phi_69_pred_5;
                    uint _2980 = _2979 + 1u;
                    if (_2980 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2973 = _2835;
                        _2974 = _2837;
                        _2975 = _2839;
                        _2976 = _2841;
                        _2977 = _2843;
                        _2978 = _2845;
                        _2979 = _2980;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2845;
                frontier_phi_57_58_ladder_1 = _2843;
                frontier_phi_57_58_ladder_2 = _2841;
                frontier_phi_57_58_ladder_3 = _2839;
                frontier_phi_57_58_ladder_4 = _2837;
                frontier_phi_57_58_ladder_5 = _2835;
            }
            else
            {
                frontier_phi_57_58_ladder = _2732;
                frontier_phi_57_58_ladder_1 = _2730;
                frontier_phi_57_58_ladder_2 = _2728;
                frontier_phi_57_58_ladder_3 = _2726;
                frontier_phi_57_58_ladder_4 = _2724;
                frontier_phi_57_58_ladder_5 = _2722;
            }
            _2834 = frontier_phi_57_58_ladder_5;
            _2836 = frontier_phi_57_58_ladder_4;
            _2838 = frontier_phi_57_58_ladder_3;
            _2840 = frontier_phi_57_58_ladder_2;
            _2842 = frontier_phi_57_58_ladder_1;
            _2844 = frontier_phi_57_58_ladder;
        }
        float _2849 = isnan(1.0) ? _897 : (isnan(_897) ? 1.0 : min(_897, 1.0));
        _2632 = (_2849 * _2840) + _2069;
        _2634 = (_2849 * _2842) + _2071;
        _2636 = (_2849 * _2844) + _2073;
        _2638 = ((_2834 * _882) * _2849) + _2414;
        _2640 = ((_2836 * _884) * _2849) + _2416;
        _2642 = ((_2838 * _885) * _2849) + _2418;
    }
    else
    {
        _2632 = _2069;
        _2634 = _2071;
        _2636 = _2073;
        _2638 = _2414;
        _2640 = _2416;
        _2642 = _2418;
    }
    float _4607 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4618 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4629 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4640 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _2667 = cbInstanceData._m0[_857 + 6u].w * (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)));
    float _2672 = _819 / cbSceneParam._m0[86u].x;
    float _2673 = _820 / cbSceneParam._m0[86u].y;
    vec4 _2687 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2672, _2673, (log2((isnan(cbSceneParam._m0[77u].w) ? _753 : (isnan(_753) ? cbSceneParam._m0[77u].w : min(_753, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2689 = _2687.x;
    float _2690 = _2687.y;
    float _2691 = _2687.z;
    float _2692 = _2687.w;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    if (_753 > cbSceneParam._m0[78u].w)
    {
        float _2747 = isnan(_753) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _753 : min(cbSceneParam._m0[80u].w, _753));
        float _2748 = _2747 / _753;
        float _2759 = _2748 * _804;
        float _2760 = _805 * _2748;
        float _2761 = (-0.0) - _2760;
        float _2762 = _2748 * _806;
        float _2764 = (cbSceneParam._m0[77u].w * _2761) / _2747;
        float _2765 = _2764 + cbSceneParam._m0[79u].w;
        float _2766 = cbSceneParam._m0[79u].w - _2760;
        float _2772 = sqrt(((_2759 * _2759) + (_2760 * _2760)) + (_2762 * _2762));
        float _2775 = (1.0 - (cbSceneParam._m0[77u].w / _2747)) * _2772;
        float _2780 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2782 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2935;
        if (abs((_2761 - _2764) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2935 = ((((_2765 > 0.0) ? exp2(_2780 * _2765) : (2.0 - exp2(_2782 * _2765))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2775;
        }
        else
        {
            float _2895 = 1.0 / cbSceneParam._m0[80u].x;
            float _2896 = isnan(_2766) ? _2765 : (isnan(_2765) ? _2766 : max(_2765, _2766));
            float _2897 = isnan(_2766) ? _2765 : (isnan(_2765) ? _2766 : min(_2765, _2766));
            float _2906 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : min(_2896, 0.0));
            float _2907 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : min(_2897, 0.0));
            _2935 = ((abs(_2772 / _2761) * cbSceneParam._m0[80u].y) * ((((_2906 - _2907) * 2.0) - ((exp2(_2780 * (isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0)))) - exp2(_2780 * (isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0))))) * _2895)) - ((exp2(_2782 * _2906) - exp2(_2782 * _2907)) * _2895))) + (_2775 * cbSceneParam._m0[80u].z);
        }
        vec4 _2937 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2672, _2673, 1.0), 0.0);
        float _2946 = exp2((_2935 * (-1.44269502162933349609375)) * (1.0 - _2937.w));
        float _2947 = log2(_2946);
        float _2963 = log2(_2692);
        _2784 = (exp2(_2963 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].x)) * _2937.x) / cbSceneParam._m0[78u].x)) + _2689;
        _2786 = (exp2(_2963 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].y)) * _2937.y) / cbSceneParam._m0[78u].y)) + _2690;
        _2788 = (exp2(_2963 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].z)) * _2937.z) / cbSceneParam._m0[78u].z)) + _2691;
        _2790 = _2946 * _2692;
    }
    else
    {
        _2784 = _2689;
        _2786 = _2690;
        _2788 = _2691;
        _2790 = _2692;
    }
    float _2802 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2803 = _2802 == 3.0;
    float _2804 = log2(_2790);
    float _2811 = exp2(_2804 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2632 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _897))) + ((_2638 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1707)) * cbPerFrame._m0[3u].x));
    float _2812 = exp2(_2804 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2634 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _897))) + ((_2640 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1707)) * cbPerFrame._m0[3u].x));
    float _2813 = exp2(_2804 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2636 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _897))) + ((_2642 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1707)) * cbPerFrame._m0[3u].x));
    float _2822 = (_2802 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2822 * (_2803 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2784)));
    SV_Target.y = _2822 * (_2803 ? _2812 : (_2812 + (cbSceneParam._m0[72u].w * _2786)));
    SV_Target.z = _2822 * (_2803 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2788)));
    SV_Target.w = _2667;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2667;
}


