#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1274;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _218 = _217 * _210;
    float _219 = _217 * _211;
    float _220 = _217 * _212;
    float _230 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _231 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _232 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _236 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _237 = _236 * _230;
    float _238 = _236 * _231;
    float _239 = _236 * _232;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    float _257 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _258 = _257 * TANGENT_2.x;
    float _259 = _257 * TANGENT_2.y;
    float _260 = _257 * TANGENT_2.z;
    float _265;
    float _266;
    float _267;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _265 = (-0.0) - _244;
        _266 = (-0.0) - _245;
        _267 = (-0.0) - _246;
    }
    else
    {
        _265 = _244;
        _266 = _245;
        _267 = _246;
    }
    vec4 _306 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _318 = 1.0 - ((1.0 - _306.x) * 1.39999997615814208984375);
    float _3629 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _319 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _326 = (_319 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    float _327 = (_319 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _328 = (_319 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _330 = 1.0 - ((1.0 - _306.y) * 1.39999997615814208984375);
    float _3640 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _331 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _338 = (_331 * (cbMtdParam._m0[13u].x - _326)) + _326;
    float _339 = (_331 * (cbMtdParam._m0[13u].y - _327)) + _327;
    float _340 = (_331 * (cbMtdParam._m0[13u].z - _328)) + _328;
    float _342 = 1.0 - ((1.0 - _306.z) * 1.39999997615814208984375);
    float _3651 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _343 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _371 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[18u].x;
    float _385 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.y - _371) + (cbMtdParam._m0[16u].z * TEXCOORD_5.y))) + 1.0;
    float _3662 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _387 = 1.0 - (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)));
    float _388 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _389 = isnan(1.0) ? _388 : (isnan(_388) ? 1.0 : min(_388, 1.0));
    float _397 = ((cbMtdParam._m0[16u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5.x - _371) + (cbMtdParam._m0[16u].y * TEXCOORD_5.x))) + 1.0;
    float _3683 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _399 = 1.0 - (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)));
    float _400 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _401 = isnan(1.0) ? _400 : (isnan(_400) ? 1.0 : min(_400, 1.0));
    vec4 _419 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _421 = _419.x;
    float _422 = _419.y;
    float _423 = _419.z;
    float _424 = cbMtdParam._m0[12u].x * _401;
    float _426 = cbMtdParam._m0[12u].y * _401;
    float _428 = cbMtdParam._m0[12u].z * _401;
    float _448 = _399 + _387;
    float _449 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _450 = isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0));
    vec4 _468 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _473 = _468.w;
    float _474 = _468.x * cbMtdParam._m0[10u].x;
    float _475 = _468.y * cbMtdParam._m0[10u].y;
    float _476 = _468.z * cbMtdParam._m0[10u].z;
    float _496 = ((_474 - (_450 * _474)) + ((((((_421 * (cbMtdParam._m0[11u].x - _424)) * _389) + (_424 * _421)) * 4.55000019073486328125) * _450) * _474)) * ((_343 * (cbMtdParam._m0[14u].x - _338)) + _338);
    float _497 = ((((((((_422 * (cbMtdParam._m0[11u].y - _426)) * _389) + (_426 * _422)) * 4.55000019073486328125) * _450) * _475) + _475) - (_450 * _475)) * ((_343 * (cbMtdParam._m0[14u].y - _339)) + _339);
    float _498 = ((((((((_423 * (cbMtdParam._m0[11u].z - _428)) * _389) + (_428 * _423)) * 4.55000019073486328125) * _450) * _476) + _476) - (_450 * _476)) * ((_343 * (cbMtdParam._m0[14u].z - _340)) + _340);
    vec4 _512 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _516 = _512.z;
    float _520 = (_512.x * 2.0) + (-1.0);
    float _522 = (_512.y * 2.0) + (-1.0);
    float _523 = dot(vec2(_520, _522), vec2(_520, _522));
    float _3714 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _528 = sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))));
    float _531 = fma(_528, _265, fma(_522, _258, _520 * _237));
    float _534 = fma(_528, _266, fma(_522, _259, _520 * _238));
    float _537 = fma(_528, _267, fma(_522, _260, _520 * _239));
    float _541 = inversesqrt(dot(vec3(_531, _534, _537), vec3(_531, _534, _537)));
    float _542 = _541 * _531;
    float _543 = _541 * _534;
    float _544 = _541 * _537;
    vec4 _556 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _562 = (_556.x * 2.0) + (-1.0);
    float _563 = (_556.y * 2.0) + (-1.0);
    float _564 = dot(vec2(_562, _563), vec2(_562, _563));
    float _3725 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _569 = sqrt(1.0 - (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))));
    float _572 = fma(_569, _265, fma(_563, _258, _562 * _237));
    float _575 = fma(_569, _266, fma(_563, _259, _562 * _238));
    float _578 = fma(_569, _267, fma(_563, _260, _562 * _239));
    float _582 = inversesqrt(dot(vec3(_572, _575, _578), vec3(_572, _575, _578)));
    float _583 = _582 * _572;
    float _584 = _582 * _575;
    float _585 = _582 * _578;
    float _588 = fma(_585, _220, fma(_584, _219, _583 * _218));
    float _591 = fma(_585, _253, fma(_584, _252, _583 * _251));
    float _594 = fma(_585, _267, fma(_584, _266, _583 * _265));
    float _598 = inversesqrt(dot(vec3(_588, _591, _594), vec3(_588, _591, _594)));
    float _602 = fma(_544, _220, fma(_543, _219, _542 * _218));
    float _605 = fma(_544, _253, fma(_543, _252, _542 * _251));
    float _608 = fma(_544, _267, fma(_543, _266, _542 * _265));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    vec4 _628 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _634 = (_628.x * 2.0) + (-1.0);
    float _635 = (_628.y * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3736 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _641 = sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))));
    vec4 _656 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _662 = (_656.x * 2.0) + (-1.0);
    float _663 = (_656.y * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _3747 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _669 = sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))));
    float _672 = fma(_669, _265, fma(_663, _258, _662 * _237));
    float _675 = fma(_669, _266, fma(_663, _259, _662 * _238));
    float _678 = fma(_669, _267, fma(_663, _260, _662 * _239));
    float _682 = inversesqrt(dot(vec3(_672, _675, _678), vec3(_672, _675, _678)));
    float _683 = _682 * _672;
    float _684 = _682 * _675;
    float _685 = _682 * _678;
    float _688 = fma(_685, _220, fma(_684, _219, _683 * _218));
    float _691 = fma(_685, _253, fma(_684, _252, _683 * _251));
    float _694 = fma(_685, _267, fma(_684, _266, _683 * _265));
    float _698 = inversesqrt(dot(vec3(_688, _691, _694), vec3(_688, _691, _694)));
    float _714 = ((((_612 * _602) * cbMtdParam._m0[17u].w) + (((_588 * _389) * _598) * cbMtdParam._m0[17u].y)) + _634) + (((_688 * _401) * _698) * cbMtdParam._m0[17u].z);
    float _717 = ((((_612 * _605) * cbMtdParam._m0[17u].w) + (((_591 * _389) * _598) * cbMtdParam._m0[17u].y)) + _635) + (((_691 * _401) * _698) * cbMtdParam._m0[17u].z);
    float _720 = fma(_641, _265, fma(_717, _251, _714 * _218));
    float _723 = fma(_641, _266, fma(_717, _252, _714 * _219));
    float _726 = fma(_641, _267, fma(_717, _253, _714 * _220));
    float _730 = inversesqrt(dot(vec3(_720, _723, _726), vec3(_720, _723, _726)));
    float _731 = _730 * _720;
    float _732 = _730 * _723;
    float _733 = _730 * _726;
    float _3758 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _734 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _735 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3791 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3802 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3813 = isnan(0.0) ? cbMtdParam._m0[18u].y : (isnan(cbMtdParam._m0[18u].y) ? 0.0 : max(cbMtdParam._m0[18u].y, 0.0));
    float _739 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _755 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _806 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _796);
    float _807 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _796);
    float _808 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _796);
    float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
    float _813 = _806 * _812;
    float _814 = _807 * _812;
    float _815 = _808 * _812;
    float _821 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _822 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _840 = fma(_733, cbSceneParam._m0[5u].z, fma(_732, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _731));
    float _843 = fma(_733, cbSceneParam._m0[6u].z, fma(_732, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _731));
    float _846 = fma(_733, cbSceneParam._m0[7u].z, fma(_732, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _731));
    uint _859 = uint(roundEven(NORMAL.w)) * 13u;
    uint _861 = (_859 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _867 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_861].x;
    float _868 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_861].y;
    float _869 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_861].z;
    float _3824 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _873 = 1.0 - _739;
    float _874 = _870 * _873;
    float _875 = _871 * _873;
    float _876 = _872 * _873;
    float _881 = (_870 + (-0.039999999105930328369140625)) * _739;
    float _882 = (_871 + (-0.039999999105930328369140625)) * _739;
    float _883 = (_872 + (-0.039999999105930328369140625)) * _739;
    float _884 = _881 + 0.039999999105930328369140625;
    float _886 = _882 + 0.039999999105930328369140625;
    float _887 = _883 + 0.039999999105930328369140625;
    vec4 _896 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _821, cbSceneParam._m0[86u].y * _822));
    float _899 = _896.x * TEXCOORD_5.z;
    float _900 = dot(vec3(_731, _732, _733), vec3(_813, _814, _815));
    float _903 = _900 * 2.0;
    float _907 = (_903 * _731) - _813;
    float _908 = (_903 * _732) - _814;
    float _909 = (_903 * _733) - _815;
    float _913 = abs(dot(vec3(_813, _814, _815), vec3(_731, _732, _733)));
    float _3857 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _915 = sqrt(_735);
    float _928 = exp2((_915 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_915 * 3.0));
    float _934 = (1.0 - _928) * ((_915 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _935 = _928 * _915;
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1273;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _998 = fma(_971, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963));
        float _1002 = fma(_971, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963));
        float _1006 = fma(_971, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963));
        float _1031 = _963 + _731;
        float _1032 = _967 + _732;
        float _1033 = _971 + _733;
        float _1043 = fma(_1033, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031)) - _998;
        float _1044 = fma(_1033, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031)) - _1002;
        float _1045 = fma(_1033, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031)) - _1006;
        float _1049 = inversesqrt(dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045)));
        float _1062 = ((_1049 * _1043) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_998 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1049 * _1044) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1002 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1049 * _1045) / cbModelParam._m0[34u].z) + ((((((_1006 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        float _1101 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1067.x + (-0.5));
        float _1103 = _1101 * (_1067.y + (-0.5));
        float _1104 = _1101 * (_1067.z + (-0.5));
        float _1111 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1074.x + (-0.5));
        float _1113 = _1111 * (_1074.y + (-0.5));
        float _1114 = _1111 * (_1074.z + (-0.5));
        float _1121 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1081.x + (-0.5));
        float _1123 = _1121 * (_1081.y + (-0.5));
        float _1124 = _1121 * (_1081.z + (-0.5));
        float _1131 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1088.x + (-0.5));
        float _1133 = _1131 * (_1088.y + (-0.5));
        float _1134 = _1131 * (_1088.z + (-0.5));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = _1102 * 0.5;
        float _1139 = _1112 * 0.5;
        float _1140 = _1122 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1155 = (dot(vec3(_731, _732, _733), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1165 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3905 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1167 + 1.0))) + _1172) * _1135;
        float _1182 = _1103 * 0.5;
        float _1183 = _1113 * 0.5;
        float _1184 = _1123 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_731, _732, _733), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3938 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1209 + 1.0))) + _1214) * _1136;
        float _1224 = _1104 * 0.5;
        float _1225 = _1114 * 0.5;
        float _1226 = _1124 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_731, _732, _733), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3971 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1251 + 1.0))) + _1256) * _1137;
        _1273 = _1104;
        _1275 = _1103;
        _1276 = _1102;
        _1277 = _1114;
        _1278 = _1113;
        _1279 = _1112;
        _1280 = _1124;
        _1281 = _1123;
        _1282 = _1122;
        _1283 = _1137;
        _1284 = _1136;
        _1285 = _1135;
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
    }
    else
    {
        _1273 = _1274;
        _1275 = _1274;
        _1276 = _1274;
        _1277 = _1274;
        _1278 = _1274;
        _1279 = _1274;
        _1280 = _1274;
        _1281 = _1274;
        _1282 = _1274;
        _1283 = _1274;
        _1284 = _1274;
        _1285 = _1274;
        _1286 = 0.0;
        _1287 = 0.0;
        _1288 = 0.0;
    }
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1314 = fma(_971, cbModelParam._m0[30u].z, fma(_967, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963));
        float _1318 = fma(_971, cbModelParam._m0[31u].z, fma(_967, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963));
        float _1322 = fma(_971, cbModelParam._m0[32u].z, fma(_967, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963));
        float _1345 = _963 + _731;
        float _1346 = _967 + _732;
        float _1347 = _971 + _733;
        float _1357 = fma(_1347, cbModelParam._m0[30u].z, fma(_1346, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1345)) - _1314;
        float _1358 = fma(_1347, cbModelParam._m0[31u].z, fma(_1346, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1345)) - _1318;
        float _1359 = fma(_1347, cbModelParam._m0[32u].z, fma(_1346, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1345)) - _1322;
        float _1363 = inversesqrt(dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359)));
        float _1376 = ((_1363 * _1357) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1314 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1363 * _1358) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1318 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1378 = ((_1363 * _1359) / cbModelParam._m0[35u].z) + ((((((_1322 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        float _1413 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1380.x + (-0.5));
        float _1415 = _1413 * (_1380.y + (-0.5));
        float _1416 = _1413 * (_1380.z + (-0.5));
        float _1423 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1387.x + (-0.5));
        float _1425 = _1423 * (_1387.y + (-0.5));
        float _1426 = _1423 * (_1387.z + (-0.5));
        float _1433 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1394.x + (-0.5));
        float _1435 = _1433 * (_1394.y + (-0.5));
        float _1436 = _1433 * (_1394.z + (-0.5));
        float _1443 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1401.x + (-0.5));
        float _1445 = _1443 * (_1401.y + (-0.5));
        float _1446 = _1443 * (_1401.z + (-0.5));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = _1414 * 0.5;
        float _1451 = _1424 * 0.5;
        float _1452 = _1434 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_731, _732, _733), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4034 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1477 + 1.0))) + _1482) * _1447;
        float _1492 = _1415 * 0.5;
        float _1493 = _1425 * 0.5;
        float _1494 = _1435 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_731, _732, _733), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4067 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1519 + 1.0))) + _1524) * _1448;
        float _1534 = _1416 * 0.5;
        float _1535 = _1426 * 0.5;
        float _1536 = _1436 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_731, _732, _733), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4100 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1561 + 1.0))) + _1566) * _1449;
        _1583 = _1416;
        _1584 = _1415;
        _1585 = _1414;
        _1586 = _1426;
        _1587 = _1425;
        _1588 = _1424;
        _1589 = _1436;
        _1590 = _1435;
        _1591 = _1434;
        _1592 = _1449;
        _1593 = _1448;
        _1594 = _1447;
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
    }
    else
    {
        _1583 = _1274;
        _1584 = _1274;
        _1585 = _1274;
        _1586 = _1274;
        _1587 = _1274;
        _1588 = _1274;
        _1589 = _1274;
        _1590 = _1274;
        _1591 = _1274;
        _1592 = _1274;
        _1593 = _1274;
        _1594 = _1274;
        _1595 = 0.0;
        _1596 = 0.0;
        _1597 = 0.0;
    }
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1286)) + _1286;
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1287)) + _1287;
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1288)) + _1288;
    float _1630 = fma(_1609, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1607 * cbSceneParam._m0[89u].x));
    float _1633 = fma(_1609, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1607 * cbSceneParam._m0[90u].x));
    float _1636 = fma(_1609, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1607));
    float _1651 = _907 * 0.5;
    float _1652 = _908 * 0.5;
    float _1653 = _909 * 0.5;
    float _1654 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1657 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1660 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1694;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1667 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1273, _1277, _1280, _1283));
        float _1671 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1675 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1276, _1279, _1282, _1285));
        float _1682 = dot(vec4(cbModelParam._m0[39u]), vec4(_1651, _1652, _1653, 1.0));
        _1694 = dot(vec3(isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1694 = 1.0;
    }
    float _1705;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1696 = dot(vec4(cbModelParam._m0[40u]), vec4(_1651, _1652, _1653, 1.0));
        _1705 = dot(vec3(isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1696) ? 0.0 : (isnan(0.0) ? _1696 : max(0.0, _1696))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1705 = 1.0;
    }
    float _1709 = (_1705 * cbModelParam._m0[1u].x) + (_1694 * (1.0 - cbModelParam._m0[1u].x));
    float _1719 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _735);
    float _1720 = isnan(_1719) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1719 : min(cbModelParam._m0[25u].z, _1719));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1767 = fma(_971, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963)) + cbModelParam._m0[13u].w;
        float _1771 = fma(_971, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963)) + cbModelParam._m0[14u].w;
        float _1775 = fma(_971, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963)) + cbModelParam._m0[15u].w;
        float _1778 = fma(_909, cbModelParam._m0[13u].z, fma(_908, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907));
        float _1781 = fma(_909, cbModelParam._m0[14u].z, fma(_908, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907));
        float _1784 = fma(_909, cbModelParam._m0[15u].z, fma(_908, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907));
        float _1812;
        if (_1778 > 0.0)
        {
            _1812 = abs((1.0 - _1767) / _1778);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1767 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1812 = frontier_phi_16_14_ladder;
        }
        float _2037;
        if (_1781 > 0.0)
        {
            _2037 = abs((1.0 - _1771) / _1781);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1771 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2037 = frontier_phi_25_21_ladder;
        }
        float _2294;
        if (_1784 > 0.0)
        {
            _2294 = abs((1.0 - _1775) / _1784);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1775 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2294 = frontier_phi_37_32_ladder;
        }
        float _2296 = isnan(_2037) ? _1812 : (isnan(_1812) ? _2037 : min(_1812, _2037));
        float _2297 = isnan(_2294) ? _2296 : (isnan(_2296) ? _2294 : min(_2296, _2294));
        float _2301 = (_2297 * _1778) + _1767;
        float _2302 = (_2297 * _1781) + _1771;
        float _2303 = (_2297 * _1784) + _1775;
        float _2304 = _2297 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2304;
        float _2308 = _2304 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 > _2308) || ((_2302 < _2306) || ((_2301 < _2306) || (_2301 > _2308))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2303, cbModelParam._m0[9u].z, fma(_2302, cbModelParam._m0[9u].y, _2301 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2303, cbModelParam._m0[10u].z, fma(_2302, cbModelParam._m0[10u].y, _2301 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2303, cbModelParam._m0[11u].z, fma(_2302, cbModelParam._m0[11u].y, _2301 * cbModelParam._m0[11u].x))), _1720);
            frontier_phi_15_37_ladder = _2431.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2431.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2431.x * cbModelParam._m0[1u].y;
        }
        _1800 = frontier_phi_15_37_ladder_2;
        _1802 = frontier_phi_15_37_ladder_1;
        _1804 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1788 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_907, _908, _909), _1720);
        _1800 = _1788.x * cbModelParam._m0[1u].y;
        _1802 = _1788.y * cbModelParam._m0[1u].y;
        _1804 = _1788.z * cbModelParam._m0[1u].y;
    }
    float _1808 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _735);
    float _1809 = isnan(_1808) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1808 : min(cbModelParam._m0[25u].w, _1808));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1864 = fma(_971, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963)) + cbModelParam._m0[21u].w;
        float _1868 = fma(_971, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963)) + cbModelParam._m0[22u].w;
        float _1872 = fma(_971, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963)) + cbModelParam._m0[23u].w;
        float _1875 = fma(_909, cbModelParam._m0[21u].z, fma(_908, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907));
        float _1878 = fma(_909, cbModelParam._m0[22u].z, fma(_908, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907));
        float _1881 = fma(_909, cbModelParam._m0[23u].z, fma(_908, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907));
        float _2042;
        if (_1875 > 0.0)
        {
            _2042 = abs((1.0 - _1864) / _1875);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1864 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2042 = frontier_phi_27_23_ladder;
        }
        float _2321;
        if (_1878 > 0.0)
        {
            _2321 = abs((1.0 - _1868) / _1878);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1868 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2321 = frontier_phi_39_34_ladder;
        }
        float _2534;
        if (_1881 > 0.0)
        {
            _2534 = abs((1.0 - _1872) / _1881);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1872 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2534 = frontier_phi_48_45_ladder;
        }
        float _2536 = isnan(_2321) ? _2042 : (isnan(_2042) ? _2321 : min(_2042, _2321));
        float _2537 = isnan(_2534) ? _2536 : (isnan(_2536) ? _2534 : min(_2536, _2534));
        float _2541 = (_2537 * _1875) + _1864;
        float _2542 = (_2537 * _1878) + _1868;
        float _2543 = (_2537 * _1881) + _1872;
        float _2544 = _2537 * 9.9999997473787516355514526367188e-05;
        float _2545 = (-1.0) - _2544;
        float _2547 = _2544 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2543 > _2547) || ((_2543 < _2545) || ((_2542 > _2547) || ((_2542 < _2545) || ((_2541 < _2545) || (_2541 > _2547))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2543, cbModelParam._m0[17u].z, fma(_2542, cbModelParam._m0[17u].y, _2541 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2543, cbModelParam._m0[18u].z, fma(_2542, cbModelParam._m0[18u].y, _2541 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2543, cbModelParam._m0[19u].z, fma(_2542, cbModelParam._m0[19u].y, _2541 * cbModelParam._m0[19u].x))), _1809);
            frontier_phi_24_48_ladder = _2743.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2743.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2743.x * cbModelParam._m0[1u].z;
        }
        _1900 = frontier_phi_24_48_ladder_2;
        _1902 = frontier_phi_24_48_ladder_1;
        _1904 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_907, _908, _909), _1809);
        _1900 = _1884.x * cbModelParam._m0[1u].z;
        _1902 = _1884.y * cbModelParam._m0[1u].z;
        _1904 = _1884.z * cbModelParam._m0[1u].z;
    }
    float _1917 = (((_934 * _884) + _935) * _899) * ((cbModelParam._m0[1u].w * (_1900 - _1800)) + _1800);
    float _1919 = (((_934 * _886) + _935) * _899) * ((cbModelParam._m0[1u].w * (_1902 - _1802)) + _1802);
    float _1921 = (((_934 * _887) + _935) * _899) * ((cbModelParam._m0[1u].w * (_1904 - _1804)) + _1804);
    float _1924 = fma(_1921, cbSceneParam._m0[89u].z, fma(_1919, cbSceneParam._m0[89u].y, _1917 * cbSceneParam._m0[89u].x));
    float _1927 = fma(_1921, cbSceneParam._m0[90u].z, fma(_1919, cbSceneParam._m0[90u].y, _1917 * cbSceneParam._m0[90u].x));
    float _1930 = fma(_1921, cbSceneParam._m0[91u].z, fma(_1919, cbSceneParam._m0[91u].y, _1917 * cbSceneParam._m0[91u].x));
    vec4 _1938 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_821, _822));
    float _1940 = _1938.w;
    float _1952 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1940);
    float _1953 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1940);
    float _1954 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1940);
    uvec4 _1958 = floatBitsToUint(cbInstanceData._m0[_859 + 5u]);
    uint _1960 = _1958.x * 14u;
    uint _1961 = _1960 + 13u;
    float _1968 = _899 + (-1.0);
    float _1973 = (cbLight._m0[_1961].x * _1968) + 1.0;
    float _1974 = (cbLight._m0[_1961].y * _1968) + 1.0;
    float _1975 = (cbLight._m0[_1961].z * _1968) + 1.0;
    float _1976 = (cbLight._m0[_1961].w * _1968) + 1.0;
    uint _1977 = _1960 + 5u;
    float _1983 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
    uint _1987 = _1960 + 4u;
    float _1996 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
    uint _2000 = _1960 | 1u;
    float _2011 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_731, _732, _733));
    float _2014 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_731, _732, _733));
    float _4236 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _4247 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2019 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _2021 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.3183098733425140380859375;
    float _2028 = ((cbLight._m0[_1977].x * _1983) * _2021) + (((cbLight._m0[_1987].x * _1952) * _1996) * _2019);
    float _2029 = ((_1983 * cbLight._m0[_1977].y) * _2021) + (((cbLight._m0[_1987].y * _1953) * _1996) * _2019);
    float _2030 = ((_1983 * cbLight._m0[_1977].z) * _2021) + (((cbLight._m0[_1987].z * _1954) * _1996) * _2019);
    uvec4 _2034 = floatBitsToUint(cbLight._m0[_1960 + 12u]);
    bool _2036 = _2034.x == 0u;
    float _2047;
    float _2049;
    float _2051;
    if (_2036)
    {
        _2047 = _2028;
        _2049 = _2029;
        _2051 = _2030;
    }
    else
    {
        uint _2055 = _1960 + 6u;
        float _2071 = (dot(vec3(cbLight._m0[_1960 + 2u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2072 = _2071 * _2071;
        float _4258 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2073 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2074 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2047 = (((cbLight._m0[_2055].x * 0.3183098733425140380859375) * _2073) * _2074) + _2028;
        _2049 = (((cbLight._m0[_2055].y * 0.3183098733425140380859375) * _2073) * _2074) + _2029;
        _2051 = (((cbLight._m0[_2055].z * 0.3183098733425140380859375) * _2073) * _2074) + _2030;
    }
    bool _2054 = _2034.y == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_2054)
    {
        _2092 = _2047;
        _2094 = _2049;
        _2096 = _2051;
    }
    else
    {
        uint _2265 = _1960 + 7u;
        float _2281 = (dot(vec3(cbLight._m0[_1960 + 3u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2282 = _2281 * _2281;
        float _4274 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2283 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2284 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2092 = (((cbLight._m0[_2265].x * 0.3183098733425140380859375) * _2283) * _2284) + _2047;
        _2094 = (((cbLight._m0[_2265].y * 0.3183098733425140380859375) * _2283) * _2284) + _2049;
        _2096 = (((cbLight._m0[_2265].z * 0.3183098733425140380859375) * _2283) * _2284) + _2051;
    }
    uint _2099 = _1960 + 8u;
    float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _735) * 0.949999988079071044921875);
    float _2113 = _2112 * _2112;
    float _2114 = cbLight._m0[_1960].x + _813;
    float _2115 = cbLight._m0[_1960].y + _814;
    float _2116 = cbLight._m0[_1960].z + _815;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2121 = _2120 * _2114;
    float _2122 = _2120 * _2115;
    float _2123 = _2120 * _2116;
    float _2124 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_1960].xyz));
    float _4290 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _4301 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _2128 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2129 = dot(vec3(_731, _732, _733), vec3(_2121, _2122, _2123));
    float _4312 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2133 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_2121, _2122, _2123));
    float _4323 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2137 = _2113 * _2113;
    float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
    float _2149 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
    float _2150 = 0.959999978542327880859375 - _881;
    float _2152 = 0.959999978542327880859375 - _882;
    float _2153 = 0.959999978542327880859375 - _883;
    float _2160 = 1.0 - _2113;
    float _2171 = (0.5 / (((_2128 * ((_2127 * _2160) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2160) + _2113) * _2127))) * _2127;
    float _4334 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2173 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
    uint _2187 = _1960 + 9u;
    float _2198 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _735) * 0.949999988079071044921875);
    float _2199 = _2198 * _2198;
    float _2200 = cbLight._m0[_2000].x + _813;
    float _2201 = cbLight._m0[_2000].y + _814;
    float _2202 = cbLight._m0[_2000].z + _815;
    float _2206 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
    float _2207 = _2206 * _2200;
    float _2208 = _2206 * _2201;
    float _2209 = _2206 * _2202;
    float _2210 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2000].xyz));
    float _4345 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2214 = dot(vec3(_731, _732, _733), vec3(_2207, _2208, _2209));
    float _4356 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2218 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2207, _2208, _2209));
    float _4367 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2222 = _2199 * _2199;
    float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
    float _2233 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
    float _2240 = 1.0 - _2199;
    float _2250 = (0.5 / (((_2128 * ((_2213 * _2240) + _2199)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2240) + _2199) * _2213))) * _2213;
    float _4378 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2252 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
    float _2262 = (((((_2233 * _2150) + _884) * cbLight._m0[_2187].x) * _2252) * _1983) + ((((cbLight._m0[_2099].x * _1952) * ((_2149 * _2150) + _884)) * _2173) * _1996);
    float _2263 = (((((_2233 * _2152) + _886) * cbLight._m0[_2187].y) * _2252) * _1983) + ((((cbLight._m0[_2099].y * _1953) * ((_2149 * _2152) + _886)) * _2173) * _1996);
    float _2264 = (((((_2233 * _2153) + _887) * cbLight._m0[_2187].z) * _2252) * _1983) + ((((cbLight._m0[_2099].z * _1954) * ((_2149 * _2153) + _887)) * _2173) * _1996);
    float _2326;
    float _2328;
    float _2330;
    if (_2036)
    {
        _2326 = _2262;
        _2328 = _2263;
        _2330 = _2264;
    }
    else
    {
        uint _2332 = _1960 + 2u;
        uint _2336 = _1960 + 10u;
        float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _735) * 0.949999988079071044921875);
        float _2351 = _2350 * _2350;
        float _2352 = cbLight._m0[_2332].x + _813;
        float _2353 = cbLight._m0[_2332].y + _814;
        float _2354 = cbLight._m0[_2332].z + _815;
        float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
        float _2359 = _2358 * _2352;
        float _2360 = _2358 * _2353;
        float _2361 = _2358 * _2354;
        float _2362 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2332].xyz));
        float _4389 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2366 = dot(vec3(_731, _732, _733), vec3(_2359, _2360, _2361));
        float _4400 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2370 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2359, _2360, _2361));
        float _4411 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2374 = _2351 * _2351;
        float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
        float _2385 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
        float _2392 = 1.0 - _2351;
        float _2402 = (0.5 / (((_2128 * ((_2365 * _2392) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2392) + _2351) * _2365))) * _2365;
        float _4422 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2404 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
        float _2405 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2326 = (((((_2385 * _2150) + _884) * cbLight._m0[_2336].x) * _2404) * _2405) + _2262;
        _2328 = (((((_2385 * _2152) + _886) * cbLight._m0[_2336].y) * _2404) * _2405) + _2263;
        _2330 = (((((_2385 * _2153) + _887) * cbLight._m0[_2336].z) * _2404) * _2405) + _2264;
    }
    float _2440;
    float _2442;
    float _2444;
    if (_2054)
    {
        _2440 = _2326;
        _2442 = _2328;
        _2444 = _2330;
    }
    else
    {
        uint _2451 = _1960 + 3u;
        uint _2455 = _1960 + 11u;
        float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _735) * 0.949999988079071044921875);
        float _2470 = _2469 * _2469;
        float _2471 = cbLight._m0[_2451].x + _813;
        float _2472 = cbLight._m0[_2451].y + _814;
        float _2473 = cbLight._m0[_2451].z + _815;
        float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
        float _2478 = _2477 * _2471;
        float _2479 = _2477 * _2472;
        float _2480 = _2477 * _2473;
        float _2481 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2451].xyz));
        float _4438 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2485 = dot(vec3(_731, _732, _733), vec3(_2478, _2479, _2480));
        float _4449 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2489 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2478, _2479, _2480));
        float _4460 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2493 = _2470 * _2470;
        float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
        float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
        float _2511 = 1.0 - _2470;
        float _2521 = (0.5 / (((_2128 * ((_2484 * _2511) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2511) + _2470) * _2484))) * _2484;
        float _4471 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2523 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
        float _2524 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2440 = (((((_2504 * _2150) + _884) * cbLight._m0[_2455].x) * _2523) * _2524) + _2326;
        _2442 = (((((_2504 * _2152) + _886) * cbLight._m0[_2455].y) * _2523) * _2524) + _2328;
        _2444 = (((((_2504 * _2153) + _887) * cbLight._m0[_2455].z) * _2523) * _2524) + _2330;
    }
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    if (_1958.y == 0u)
    {
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2599;
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2599;
        float _2602 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2599;
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.x;
        uint _2626 = uint((float(_2614.y) * floor(float(uint(cbSceneParam._m0[85u].y * _822) / _2615))) + floor(float(uint(cbSceneParam._m0[85u].x * _821) / _2615)));
        float _2636 = (log2(_2602 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2637 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        uint _2640 = uint(isnan(14.0) ? _2637 : (isnan(_2637) ? 14.0 : min(_2637, 14.0)));
        uvec4 _2645 = texelFetch(g_lightClusterGridBuffer, int(((_2640 << 2u) + (_2626 << 6u)) >> 2u));
        uint _2646 = _2645.x;
        uint _2647 = _2614.z;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((((1u << ((_2647 >> 4u) & 15u)) + 4294967295u) & _2646) == 0u) || ((_2647 & 240u) == 0u))
        {
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
        }
        else
        {
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            uint _2898 = 0u;
            uint _2907;
            bool _2908;
            for (;;)
            {
                _2907 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_2898 << 2u)) >> 2u)).x;
                _2908 = _2907 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2908)
                {
                    frontier_phi_63_pred = _2897;
                    frontier_phi_63_pred_1 = _2896;
                    frontier_phi_63_pred_2 = _2895;
                    frontier_phi_63_pred_3 = _2894;
                    frontier_phi_63_pred_4 = _2893;
                    frontier_phi_63_pred_5 = _2892;
                }
                else
                {
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    uint _3022;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2894;
                    _3019 = _2895;
                    _3020 = _2896;
                    _3021 = _2897;
                    _3022 = _2907;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    for (;;)
                    {
                        uint _3026 = uint(findLSB(_3022)) + (_2898 << 5u);
                        uint _3023 = (_3022 + 4294967295u) & _3022;
                        uint _3028 = _3026 * 48u;
                        vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3028)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 3u)).x));
                        uint _3048 = (_3026 * 48u) + 4u;
                        vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 3u)).x));
                        uint _3067 = (_3026 * 48u) + 8u;
                        vec3 _3078 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x));
                        float _3082 = _3042.x - _2600;
                        float _3083 = _3042.y - _2601;
                        float _3084 = _3042.z - _2602;
                        float _3085 = dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084));
                        float _3088 = inversesqrt(_3085);
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3092 = dot(vec3(_840, _843, _846), vec3(_3089, _3090, _3091));
                        float _3097 = 1.0 - (_3085 * _3042.w);
                        float _4497 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3098 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3099 = sqrt(_3085) * _3061.w;
                        float _3101 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                        float _3102 = _3101 * _3101;
                        float _3105 = ((1.0 - _3102) * _3092) + _3102;
                        float _3108 = _3099 * _3099;
                        float _3112 = ((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3098) / ((_3108 * 0.699999988079071044921875) + 1.0);
                        float _3116 = (-0.0) - _2600;
                        float _3117 = (-0.0) - _2601;
                        float _3118 = (-0.0) - _2602;
                        float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                        float _3123 = _3122 * _3116;
                        float _3124 = _3122 * _3117;
                        float _3125 = _3122 * _3118;
                        float _3133 = exp2(log2(1.0 / ((_3108 * 3.5) + 5.0)) * 0.25);
                        float _3134 = 1.0 - _915;
                        float _3141 = sqrt(1.0 - ((1.0 - (_3134 * _3134)) * (1.0 - (_3133 * _3133))));
                        float _3142 = _3141 * _3141;
                        float _3143 = _3142 * _3142;
                        float _3144 = _3123 + _3089;
                        float _3145 = _3124 + _3090;
                        float _3146 = _3125 + _3091;
                        float _3150 = inversesqrt(dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146)));
                        float _3154 = dot(vec3(_840, _843, _846), vec3(_3123, _3124, _3125));
                        float _4513 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3157 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3158 = dot(vec3(_840, _843, _846), vec3(_3150 * _3144, _3150 * _3145, _3150 * _3146));
                        float _4524 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3161 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3165 = ((_3161 * _3161) * (_3143 + (-1.0))) + 1.0;
                        float _3166 = _3101 * _3142;
                        float _3167 = _3166 * _3166;
                        float _3170 = ((1.0 - _3167) * _3092) + _3167;
                        float _4535 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3171 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3172 = 1.0 - _3142;
                        float _3182 = (0.5 / (((_3171 * ((_3157 * _3172) + _3142)) + 9.9999999392252902907785028219223e-09) + (((_3171 * _3172) + _3142) * _3157))) * _3171;
                        float _4546 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3193 = (((_3143 * 3.1415927410125732421875) * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) / ((_3165 * _3165) * ((_3108 * 2.1991131305694580078125) + 3.141590118408203125))) * _3098;
                        _2951 = (_3112 * _3061.x) + _3019;
                        _2952 = (_3112 * _3061.y) + _3020;
                        _2953 = (_3112 * _3061.z) + _3021;
                        _2948 = (_3193 * _3078.x) + _3016;
                        _2949 = (_3193 * _3078.y) + _3017;
                        _2950 = (_3193 * _3078.z) + _3018;
                        if (_3023 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _2950;
                            _3019 = _2951;
                            _3020 = _2952;
                            _3021 = _2953;
                            _3022 = _3023;
                        }
                    }
                    frontier_phi_63_pred = _2953;
                    frontier_phi_63_pred_1 = _2952;
                    frontier_phi_63_pred_2 = _2951;
                    frontier_phi_63_pred_3 = _2950;
                    frontier_phi_63_pred_4 = _2949;
                    frontier_phi_63_pred_5 = _2948;
                }
                _2759 = frontier_phi_63_pred;
                _2757 = frontier_phi_63_pred_1;
                _2755 = frontier_phi_63_pred_2;
                _2753 = frontier_phi_63_pred_3;
                _2751 = frontier_phi_63_pred_4;
                _2749 = frontier_phi_63_pred_5;
                uint _2899 = _2898 + 1u;
                if (_2899 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2892 = _2749;
                    _2893 = _2751;
                    _2894 = _2753;
                    _2895 = _2755;
                    _2896 = _2757;
                    _2897 = _2759;
                    _2898 = _2899;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
        }
        uvec4 _2762 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2763 = _2762.z;
        uint _2765 = (_2763 >> 8u) & 15u;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        if (((4294967295u << _2765) & _2646) == 0u)
        {
            _2860 = _2748;
            _2862 = _2750;
            _2864 = _2752;
            _2866 = _2754;
            _2868 = _2756;
            _2870 = _2758;
        }
        else
        {
            float _2885 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
            float _2886 = _2885 * _2600;
            float _2887 = _2885 * _2601;
            float _2888 = _2885 * _2602;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2765 < ((_2763 >> 12u) & 15u))
            {
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2999 = _2748;
                float _3000 = _2750;
                float _3001 = _2752;
                float _3002 = _2754;
                float _3003 = _2756;
                float _3004 = _2758;
                uint _3005 = _2765;
                uint _3014;
                bool _3015;
                for (;;)
                {
                    _3014 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                    _3015 = _3014 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3015)
                    {
                        frontier_phi_69_pred = _3004;
                        frontier_phi_69_pred_1 = _3003;
                        frontier_phi_69_pred_2 = _3002;
                        frontier_phi_69_pred_3 = _3001;
                        frontier_phi_69_pred_4 = _3000;
                        frontier_phi_69_pred_5 = _2999;
                    }
                    else
                    {
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3211 = _2999;
                        float _3212 = _3000;
                        float _3213 = _3001;
                        float _3214 = _3002;
                        float _3215 = _3003;
                        float _3216 = _3004;
                        uint _3217 = _3014;
                        uint _3218;
                        vec4 _3243;
                        float _3244;
                        vec4 _3259;
                        vec3 _3271;
                        vec4 _3286;
                        vec4 _3302;
                        float _3349;
                        bool _3350;
                        for (;;)
                        {
                            uint _3228 = ((_3005 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3217));
                            _3218 = (_3217 + 4294967295u) & _3217;
                            uint _3230 = _3228 * 40u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            _3244 = _3243.w;
                            uint _3246 = (_3228 * 40u) + 4u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3261 = (_3228 * 40u) + 8u;
                            _3271 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x));
                            uint _3273 = (_3228 * 40u) + 16u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3289 = (_3228 * 40u) + 20u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3305 = (_3228 * 40u) + 24u;
                            vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3324 = (_3228 * 40u) + 28u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            _3349 = fma(_2602, _3337.z, fma(_2601, _3337.y, _3337.x * _2600)) + _3337.w;
                            _3350 = !((fma(_2602, _3318.z, fma(_2601, _3318.y, _3318.x * _2600)) + _3318.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3350)
                            {
                                float _3377 = _3243.x - _2600;
                                float _3378 = _3243.y - _2601;
                                float _3379 = _3243.z - _2602;
                                float _3380 = dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379));
                                float _3383 = inversesqrt(_3380);
                                float _3384 = _3383 * _3377;
                                float _3385 = _3383 * _3378;
                                float _3386 = _3383 * _3379;
                                float _3390 = 1.0 - (_3380 / (_3244 * _3244));
                                float _4557 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3395 = sqrt(_3380) * _3259.w;
                                float _3397 = 1.39999997615814208984375 / (_3395 + 1.39999997615814208984375);
                                float _3398 = _3397 * _3397;
                                float _3401 = ((1.0 - _3398) * dot(vec3(_3384, _3385, _3386), vec3(_840, _843, _846))) + _3398;
                                float _3404 = _3395 * _3395;
                                float _3408 = (fma(_2602, _3286.z, fma(_2601, _3286.y, _3286.x * _2600)) + _3286.w) / _3349;
                                float _3409 = (fma(_2602, _3302.z, fma(_2601, _3302.y, _3302.x * _2600)) + _3302.w) / _3349;
                                float _3413 = 1.0 - dot(vec2(_3408, _3409), vec2(_3408, _3409));
                                float _4573 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3414 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3415 = _3414 * (((isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0))) * _3391) / ((_3404 * 0.699999988079071044921875) + 1.0));
                                float _3427 = exp2(log2(1.0 / ((_3404 * 3.5) + 5.0)) * 0.25);
                                float _3428 = 1.0 - _915;
                                float _3435 = sqrt(1.0 - ((1.0 - (_3428 * _3428)) * (1.0 - (_3427 * _3427))));
                                float _3436 = _3435 * _3435;
                                float _3437 = _3436 * _3436;
                                float _3438 = _3384 - _2886;
                                float _3439 = _3385 - _2887;
                                float _3440 = _3386 - _2888;
                                float _3444 = inversesqrt(dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440)));
                                float _3448 = dot(vec3(_840, _843, _846), vec3((-0.0) - _2886, (-0.0) - _2887, (-0.0) - _2888));
                                float _4584 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3451 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3452 = dot(vec3(_840, _843, _846), vec3(_3444 * _3438, _3444 * _3439, _3444 * _3440));
                                float _4595 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3455 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3459 = ((_3455 * _3455) * (_3437 + (-1.0))) + 1.0;
                                float _3460 = _3397 * _3436;
                                float _3461 = _3460 * _3460;
                                float _3467 = ((1.0 - _3461) * dot(vec3(_840, _843, _846), vec3(_3384, _3385, _3386))) + _3461;
                                float _4606 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3469 = 1.0 - _3436;
                                float _3479 = (0.5 / (((_3468 * ((_3451 * _3469) + _3436)) + 9.9999999392252902907785028219223e-09) + (((_3468 * _3469) + _3436) * _3451))) * _3468;
                                float _4617 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3489 = (_3414 * _3391) * (((_3437 * 3.1415927410125732421875) * (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) / ((_3459 * _3459) * ((_3404 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3415 * _3259.z;
                                frontier_phi_75_pred_1 = _3415 * _3259.y;
                                frontier_phi_75_pred_2 = _3415 * _3259.x;
                                frontier_phi_75_pred_3 = _3489 * _3271.z;
                                frontier_phi_75_pred_4 = _3489 * _3271.y;
                                frontier_phi_75_pred_5 = _3489 * _3271.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3498 = frontier_phi_75_pred;
                            _3497 = frontier_phi_75_pred_1;
                            _3496 = frontier_phi_75_pred_2;
                            _3495 = frontier_phi_75_pred_3;
                            _3494 = frontier_phi_75_pred_4;
                            _3493 = frontier_phi_75_pred_5;
                            _3201 = _3496 + _3214;
                            _3202 = _3497 + _3215;
                            _3203 = _3498 + _3216;
                            _3198 = _3493 + _3211;
                            _3199 = _3494 + _3212;
                            _3200 = _3495 + _3213;
                            if (_3218 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3218;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3203;
                        frontier_phi_69_pred_1 = _3202;
                        frontier_phi_69_pred_2 = _3201;
                        frontier_phi_69_pred_3 = _3200;
                        frontier_phi_69_pred_4 = _3199;
                        frontier_phi_69_pred_5 = _3198;
                    }
                    _2871 = frontier_phi_69_pred;
                    _2869 = frontier_phi_69_pred_1;
                    _2867 = frontier_phi_69_pred_2;
                    _2865 = frontier_phi_69_pred_3;
                    _2863 = frontier_phi_69_pred_4;
                    _2861 = frontier_phi_69_pred_5;
                    uint _3006 = _3005 + 1u;
                    if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2999 = _2861;
                        _3000 = _2863;
                        _3001 = _2865;
                        _3002 = _2867;
                        _3003 = _2869;
                        _3004 = _2871;
                        _3005 = _3006;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2871;
                frontier_phi_57_58_ladder_1 = _2869;
                frontier_phi_57_58_ladder_2 = _2867;
                frontier_phi_57_58_ladder_3 = _2865;
                frontier_phi_57_58_ladder_4 = _2863;
                frontier_phi_57_58_ladder_5 = _2861;
            }
            else
            {
                frontier_phi_57_58_ladder = _2758;
                frontier_phi_57_58_ladder_1 = _2756;
                frontier_phi_57_58_ladder_2 = _2754;
                frontier_phi_57_58_ladder_3 = _2752;
                frontier_phi_57_58_ladder_4 = _2750;
                frontier_phi_57_58_ladder_5 = _2748;
            }
            _2860 = frontier_phi_57_58_ladder_5;
            _2862 = frontier_phi_57_58_ladder_4;
            _2864 = frontier_phi_57_58_ladder_3;
            _2866 = frontier_phi_57_58_ladder_2;
            _2868 = frontier_phi_57_58_ladder_1;
            _2870 = frontier_phi_57_58_ladder;
        }
        float _2875 = isnan(1.0) ? _899 : (isnan(_899) ? 1.0 : min(_899, 1.0));
        _2658 = (_2875 * _2866) + _2092;
        _2660 = (_2875 * _2868) + _2094;
        _2662 = (_2875 * _2870) + _2096;
        _2664 = ((_2860 * _884) * _2875) + _2440;
        _2666 = ((_2862 * _886) * _2875) + _2442;
        _2668 = ((_2864 * _887) * _2875) + _2444;
    }
    else
    {
        _2658 = _2092;
        _2660 = _2094;
        _2662 = _2096;
        _2664 = _2440;
        _2666 = _2442;
        _2668 = _2444;
    }
    float _4633 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4644 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4655 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4666 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _2693 = cbInstanceData._m0[_859 + 6u].w * (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)));
    float _2698 = _821 / cbSceneParam._m0[86u].x;
    float _2699 = _822 / cbSceneParam._m0[86u].y;
    vec4 _2713 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, (log2((isnan(cbSceneParam._m0[77u].w) ? _755 : (isnan(_755) ? cbSceneParam._m0[77u].w : min(_755, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2715 = _2713.x;
    float _2716 = _2713.y;
    float _2717 = _2713.z;
    float _2718 = _2713.w;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    if (_755 > cbSceneParam._m0[78u].w)
    {
        float _2773 = isnan(_755) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _755 : min(cbSceneParam._m0[80u].w, _755));
        float _2774 = _2773 / _755;
        float _2785 = _2774 * _806;
        float _2786 = _807 * _2774;
        float _2787 = (-0.0) - _2786;
        float _2788 = _2774 * _808;
        float _2790 = (cbSceneParam._m0[77u].w * _2787) / _2773;
        float _2791 = _2790 + cbSceneParam._m0[79u].w;
        float _2792 = cbSceneParam._m0[79u].w - _2786;
        float _2798 = sqrt(((_2785 * _2785) + (_2786 * _2786)) + (_2788 * _2788));
        float _2801 = (1.0 - (cbSceneParam._m0[77u].w / _2773)) * _2798;
        float _2806 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2808 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2961;
        if (abs((_2787 - _2790) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2961 = ((((_2791 > 0.0) ? exp2(_2806 * _2791) : (2.0 - exp2(_2808 * _2791))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2801;
        }
        else
        {
            float _2921 = 1.0 / cbSceneParam._m0[80u].x;
            float _2922 = isnan(_2792) ? _2791 : (isnan(_2791) ? _2792 : max(_2791, _2792));
            float _2923 = isnan(_2792) ? _2791 : (isnan(_2791) ? _2792 : min(_2791, _2792));
            float _2932 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : min(_2922, 0.0));
            float _2933 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : min(_2923, 0.0));
            _2961 = ((abs(_2798 / _2787) * cbSceneParam._m0[80u].y) * ((((_2932 - _2933) * 2.0) - ((exp2(_2806 * (isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0)))) - exp2(_2806 * (isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0))))) * _2921)) - ((exp2(_2808 * _2932) - exp2(_2808 * _2933)) * _2921))) + (_2801 * cbSceneParam._m0[80u].z);
        }
        vec4 _2963 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, 1.0), 0.0);
        float _2972 = exp2((_2961 * (-1.44269502162933349609375)) * (1.0 - _2963.w));
        float _2973 = log2(_2972);
        float _2989 = log2(_2718);
        _2810 = (exp2(_2989 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].x)) * _2963.x) / cbSceneParam._m0[78u].x)) + _2715;
        _2812 = (exp2(_2989 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].y)) * _2963.y) / cbSceneParam._m0[78u].y)) + _2716;
        _2814 = (exp2(_2989 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].z)) * _2963.z) / cbSceneParam._m0[78u].z)) + _2717;
        _2816 = _2972 * _2718;
    }
    else
    {
        _2810 = _2715;
        _2812 = _2716;
        _2814 = _2717;
        _2816 = _2718;
    }
    float _2828 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2829 = _2828 == 3.0;
    float _2830 = log2(_2816);
    float _2837 = exp2(_2830 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2658 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _899))) + ((_2664 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1709)) * cbPerFrame._m0[3u].x));
    float _2838 = exp2(_2830 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2660 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _899))) + ((_2666 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1709)) * cbPerFrame._m0[3u].x));
    float _2839 = exp2(_2830 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2662 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _899))) + ((_2668 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1709)) * cbPerFrame._m0[3u].x));
    float _2848 = (_2828 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2848 * (_2829 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2810)));
    SV_Target.y = _2848 * (_2829 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2812)));
    SV_Target.z = _2848 * (_2829 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2814)));
    SV_Target.w = _2693;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2693;
}


