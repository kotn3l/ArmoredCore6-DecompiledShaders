#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1276;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _220 = _219 * _212;
    float _221 = _219 * _213;
    float _222 = _219 * _214;
    float _232 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _233 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _234 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _238 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _239 = _238 * _232;
    float _240 = _238 * _233;
    float _241 = _238 * _234;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    float _259 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _260 = _259 * TANGENT_2.x;
    float _261 = _259 * TANGENT_2.y;
    float _262 = _259 * TANGENT_2.z;
    float _267;
    float _268;
    float _269;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _267 = (-0.0) - _246;
        _268 = (-0.0) - _247;
        _269 = (-0.0) - _248;
    }
    else
    {
        _267 = _246;
        _268 = _247;
        _269 = _248;
    }
    vec4 _308 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _320 = 1.0 - ((1.0 - _308.x) * 1.39999997615814208984375);
    float _3890 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _321 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _328 = (_321 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    float _329 = (_321 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _330 = (_321 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _332 = 1.0 - ((1.0 - _308.y) * 1.39999997615814208984375);
    float _3901 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _333 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _340 = (_333 * (cbMtdParam._m0[13u].x - _328)) + _328;
    float _341 = (_333 * (cbMtdParam._m0[13u].y - _329)) + _329;
    float _342 = (_333 * (cbMtdParam._m0[13u].z - _330)) + _330;
    float _344 = 1.0 - ((1.0 - _308.z) * 1.39999997615814208984375);
    float _3912 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _345 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _373 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[18u].x;
    float _387 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.y - _373) + (cbMtdParam._m0[16u].z * TEXCOORD_5.y))) + 1.0;
    float _3923 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _389 = 1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)));
    float _390 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _391 = isnan(1.0) ? _390 : (isnan(_390) ? 1.0 : min(_390, 1.0));
    float _399 = ((cbMtdParam._m0[16u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5.x - _373) + (cbMtdParam._m0[16u].y * TEXCOORD_5.x))) + 1.0;
    float _3944 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _401 = 1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)));
    float _402 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _403 = isnan(1.0) ? _402 : (isnan(_402) ? 1.0 : min(_402, 1.0));
    vec4 _421 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _423 = _421.x;
    float _424 = _421.y;
    float _425 = _421.z;
    float _426 = cbMtdParam._m0[12u].x * _403;
    float _428 = cbMtdParam._m0[12u].y * _403;
    float _430 = cbMtdParam._m0[12u].z * _403;
    float _450 = _401 + _389;
    float _451 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _452 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
    vec4 _470 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _475 = _470.w;
    float _476 = _470.x * cbMtdParam._m0[10u].x;
    float _477 = _470.y * cbMtdParam._m0[10u].y;
    float _478 = _470.z * cbMtdParam._m0[10u].z;
    float _498 = ((_476 - (_452 * _476)) + ((((((_423 * (cbMtdParam._m0[11u].x - _426)) * _391) + (_426 * _423)) * 4.55000019073486328125) * _452) * _476)) * ((_345 * (cbMtdParam._m0[14u].x - _340)) + _340);
    float _499 = ((((((((_424 * (cbMtdParam._m0[11u].y - _428)) * _391) + (_428 * _424)) * 4.55000019073486328125) * _452) * _477) + _477) - (_452 * _477)) * ((_345 * (cbMtdParam._m0[14u].y - _341)) + _341);
    float _500 = ((((((((_425 * (cbMtdParam._m0[11u].z - _430)) * _391) + (_430 * _425)) * 4.55000019073486328125) * _452) * _478) + _478) - (_452 * _478)) * ((_345 * (cbMtdParam._m0[14u].z - _342)) + _342);
    vec4 _514 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _518 = _514.z;
    float _522 = (_514.x * 2.0) + (-1.0);
    float _524 = (_514.y * 2.0) + (-1.0);
    float _525 = dot(vec2(_522, _524), vec2(_522, _524));
    float _3975 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _530 = sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))));
    float _533 = fma(_530, _267, fma(_524, _260, _522 * _239));
    float _536 = fma(_530, _268, fma(_524, _261, _522 * _240));
    float _539 = fma(_530, _269, fma(_524, _262, _522 * _241));
    float _543 = inversesqrt(dot(vec3(_533, _536, _539), vec3(_533, _536, _539)));
    float _544 = _543 * _533;
    float _545 = _543 * _536;
    float _546 = _543 * _539;
    vec4 _558 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _564 = (_558.x * 2.0) + (-1.0);
    float _565 = (_558.y * 2.0) + (-1.0);
    float _566 = dot(vec2(_564, _565), vec2(_564, _565));
    float _3986 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _571 = sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))));
    float _574 = fma(_571, _267, fma(_565, _260, _564 * _239));
    float _577 = fma(_571, _268, fma(_565, _261, _564 * _240));
    float _580 = fma(_571, _269, fma(_565, _262, _564 * _241));
    float _584 = inversesqrt(dot(vec3(_574, _577, _580), vec3(_574, _577, _580)));
    float _585 = _584 * _574;
    float _586 = _584 * _577;
    float _587 = _584 * _580;
    float _590 = fma(_587, _222, fma(_586, _221, _585 * _220));
    float _593 = fma(_587, _255, fma(_586, _254, _585 * _253));
    float _596 = fma(_587, _269, fma(_586, _268, _585 * _267));
    float _600 = inversesqrt(dot(vec3(_590, _593, _596), vec3(_590, _593, _596)));
    float _604 = fma(_546, _222, fma(_545, _221, _544 * _220));
    float _607 = fma(_546, _255, fma(_545, _254, _544 * _253));
    float _610 = fma(_546, _269, fma(_545, _268, _544 * _267));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    vec4 _630 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _636 = (_630.x * 2.0) + (-1.0);
    float _637 = (_630.y * 2.0) + (-1.0);
    float _638 = dot(vec2(_636, _637), vec2(_636, _637));
    float _3997 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _643 = sqrt(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))));
    vec4 _658 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _664 = (_658.x * 2.0) + (-1.0);
    float _665 = (_658.y * 2.0) + (-1.0);
    float _666 = dot(vec2(_664, _665), vec2(_664, _665));
    float _4008 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _671 = sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))));
    float _674 = fma(_671, _267, fma(_665, _260, _664 * _239));
    float _677 = fma(_671, _268, fma(_665, _261, _664 * _240));
    float _680 = fma(_671, _269, fma(_665, _262, _664 * _241));
    float _684 = inversesqrt(dot(vec3(_674, _677, _680), vec3(_674, _677, _680)));
    float _685 = _684 * _674;
    float _686 = _684 * _677;
    float _687 = _684 * _680;
    float _690 = fma(_687, _222, fma(_686, _221, _685 * _220));
    float _693 = fma(_687, _255, fma(_686, _254, _685 * _253));
    float _696 = fma(_687, _269, fma(_686, _268, _685 * _267));
    float _700 = inversesqrt(dot(vec3(_690, _693, _696), vec3(_690, _693, _696)));
    float _716 = ((((_614 * _604) * cbMtdParam._m0[17u].w) + (((_590 * _391) * _600) * cbMtdParam._m0[17u].y)) + _636) + (((_690 * _403) * _700) * cbMtdParam._m0[17u].z);
    float _719 = ((((_614 * _607) * cbMtdParam._m0[17u].w) + (((_593 * _391) * _600) * cbMtdParam._m0[17u].y)) + _637) + (((_693 * _403) * _700) * cbMtdParam._m0[17u].z);
    float _722 = fma(_643, _267, fma(_719, _253, _716 * _220));
    float _725 = fma(_643, _268, fma(_719, _254, _716 * _221));
    float _728 = fma(_643, _269, fma(_719, _255, _716 * _222));
    float _732 = inversesqrt(dot(vec3(_722, _725, _728), vec3(_722, _725, _728)));
    float _733 = _732 * _722;
    float _734 = _732 * _725;
    float _735 = _732 * _728;
    float _4019 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _736 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _737 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4052 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _4063 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _4074 = isnan(0.0) ? cbMtdParam._m0[18u].y : (isnan(cbMtdParam._m0[18u].y) ? 0.0 : max(cbMtdParam._m0[18u].y, 0.0));
    float _741 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _757 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _808 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _798);
    float _809 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _798);
    float _810 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _798);
    float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
    float _815 = _808 * _814;
    float _816 = _809 * _814;
    float _817 = _810 * _814;
    float _823 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _824 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _842 = fma(_735, cbSceneParam._m0[5u].z, fma(_734, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _733));
    float _845 = fma(_735, cbSceneParam._m0[6u].z, fma(_734, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _733));
    float _848 = fma(_735, cbSceneParam._m0[7u].z, fma(_734, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _733));
    uint _861 = uint(roundEven(NORMAL.w)) * 13u;
    uint _863 = (_861 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _869 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_863].x;
    float _870 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_863].y;
    float _871 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_863].z;
    float _4085 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _875 = 1.0 - _741;
    float _876 = _872 * _875;
    float _877 = _873 * _875;
    float _878 = _874 * _875;
    float _883 = (_872 + (-0.039999999105930328369140625)) * _741;
    float _884 = (_873 + (-0.039999999105930328369140625)) * _741;
    float _885 = (_874 + (-0.039999999105930328369140625)) * _741;
    float _886 = _883 + 0.039999999105930328369140625;
    float _888 = _884 + 0.039999999105930328369140625;
    float _889 = _885 + 0.039999999105930328369140625;
    vec4 _898 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _823, cbSceneParam._m0[86u].y * _824));
    float _901 = _898.x * TEXCOORD_5.z;
    float _902 = dot(vec3(_733, _734, _735), vec3(_815, _816, _817));
    float _905 = _902 * 2.0;
    float _909 = (_905 * _733) - _815;
    float _910 = (_905 * _734) - _816;
    float _911 = (_905 * _735) - _817;
    float _915 = abs(dot(vec3(_815, _816, _817), vec3(_733, _734, _735)));
    float _4118 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _917 = sqrt(_737);
    float _930 = exp2((_917 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_917 * 3.0));
    float _936 = (1.0 - _930) * ((_917 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _937 = _930 * _917;
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1275;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1000 = fma(_973, cbModelParam._m0[26u].z, fma(_969, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _965));
        float _1004 = fma(_973, cbModelParam._m0[27u].z, fma(_969, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _965));
        float _1008 = fma(_973, cbModelParam._m0[28u].z, fma(_969, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _965));
        float _1033 = _965 + _733;
        float _1034 = _969 + _734;
        float _1035 = _973 + _735;
        float _1045 = fma(_1035, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033)) - _1000;
        float _1046 = fma(_1035, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033)) - _1004;
        float _1047 = fma(_1035, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033)) - _1008;
        float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
        float _1064 = ((_1051 * _1045) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1000 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1051 * _1046) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1004 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1051 * _1047) / cbModelParam._m0[34u].z) + ((((((_1008 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        float _1103 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1069.x + (-0.5));
        float _1105 = _1103 * (_1069.y + (-0.5));
        float _1106 = _1103 * (_1069.z + (-0.5));
        float _1113 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1076.x + (-0.5));
        float _1115 = _1113 * (_1076.y + (-0.5));
        float _1116 = _1113 * (_1076.z + (-0.5));
        float _1123 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1083.x + (-0.5));
        float _1125 = _1123 * (_1083.y + (-0.5));
        float _1126 = _1123 * (_1083.z + (-0.5));
        float _1133 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1090.x + (-0.5));
        float _1135 = _1133 * (_1090.y + (-0.5));
        float _1136 = _1133 * (_1090.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1157 = (dot(vec3(_733, _734, _735), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1167 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _4166 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1169 + 1.0))) + _1174) * _1137;
        float _1184 = _1105 * 0.5;
        float _1185 = _1115 * 0.5;
        float _1186 = _1125 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_733, _734, _735), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4199 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1211 + 1.0))) + _1216) * _1138;
        float _1226 = _1106 * 0.5;
        float _1227 = _1116 * 0.5;
        float _1228 = _1126 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_733, _734, _735), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4232 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1253 + 1.0))) + _1258) * _1139;
        _1275 = _1106;
        _1277 = _1105;
        _1278 = _1104;
        _1279 = _1116;
        _1280 = _1115;
        _1281 = _1114;
        _1282 = _1126;
        _1283 = _1125;
        _1284 = _1124;
        _1285 = _1139;
        _1286 = _1138;
        _1287 = _1137;
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _1276;
        _1277 = _1276;
        _1278 = _1276;
        _1279 = _1276;
        _1280 = _1276;
        _1281 = _1276;
        _1282 = _1276;
        _1283 = _1276;
        _1284 = _1276;
        _1285 = _1276;
        _1286 = _1276;
        _1287 = _1276;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
    }
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1316 = fma(_973, cbModelParam._m0[30u].z, fma(_969, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965));
        float _1320 = fma(_973, cbModelParam._m0[31u].z, fma(_969, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965));
        float _1324 = fma(_973, cbModelParam._m0[32u].z, fma(_969, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965));
        float _1347 = _965 + _733;
        float _1348 = _969 + _734;
        float _1349 = _973 + _735;
        float _1359 = fma(_1349, cbModelParam._m0[30u].z, fma(_1348, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1347)) - _1316;
        float _1360 = fma(_1349, cbModelParam._m0[31u].z, fma(_1348, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1347)) - _1320;
        float _1361 = fma(_1349, cbModelParam._m0[32u].z, fma(_1348, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1347)) - _1324;
        float _1365 = inversesqrt(dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361)));
        float _1378 = ((_1365 * _1359) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1316 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1365 * _1360) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1320 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1365 * _1361) / cbModelParam._m0[35u].z) + ((((((_1324 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        float _1415 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1382.x + (-0.5));
        float _1417 = _1415 * (_1382.y + (-0.5));
        float _1418 = _1415 * (_1382.z + (-0.5));
        float _1425 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1389.x + (-0.5));
        float _1427 = _1425 * (_1389.y + (-0.5));
        float _1428 = _1425 * (_1389.z + (-0.5));
        float _1435 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1396.x + (-0.5));
        float _1437 = _1435 * (_1396.y + (-0.5));
        float _1438 = _1435 * (_1396.z + (-0.5));
        float _1445 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1403.x + (-0.5));
        float _1447 = _1445 * (_1403.y + (-0.5));
        float _1448 = _1445 * (_1403.z + (-0.5));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = _1416 * 0.5;
        float _1453 = _1426 * 0.5;
        float _1454 = _1436 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_733, _734, _735), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4295 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1479 + 1.0))) + _1484) * _1449;
        float _1494 = _1417 * 0.5;
        float _1495 = _1427 * 0.5;
        float _1496 = _1437 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_733, _734, _735), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4328 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1521 + 1.0))) + _1526) * _1450;
        float _1536 = _1418 * 0.5;
        float _1537 = _1428 * 0.5;
        float _1538 = _1438 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_733, _734, _735), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4361 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1563 + 1.0))) + _1568) * _1451;
        _1585 = _1418;
        _1586 = _1417;
        _1587 = _1416;
        _1588 = _1428;
        _1589 = _1427;
        _1590 = _1426;
        _1591 = _1438;
        _1592 = _1437;
        _1593 = _1436;
        _1594 = _1451;
        _1595 = _1450;
        _1596 = _1449;
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
    }
    else
    {
        _1585 = _1276;
        _1586 = _1276;
        _1587 = _1276;
        _1588 = _1276;
        _1589 = _1276;
        _1590 = _1276;
        _1591 = _1276;
        _1592 = _1276;
        _1593 = _1276;
        _1594 = _1276;
        _1595 = _1276;
        _1596 = _1276;
        _1597 = 0.0;
        _1598 = 0.0;
        _1599 = 0.0;
    }
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1288)) + _1288;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1289)) + _1289;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1290)) + _1290;
    float _1632 = fma(_1611, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1611, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1611, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1609));
    float _1653 = _909 * 0.5;
    float _1654 = _910 * 0.5;
    float _1655 = _911 * 0.5;
    float _1656 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1659 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1662 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1696;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1669 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1275, _1279, _1282, _1285));
        float _1673 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1677 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1684 = dot(vec4(cbModelParam._m0[39u]), vec4(_1653, _1654, _1655, 1.0));
        _1696 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1696 = 1.0;
    }
    float _1707;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1698 = dot(vec4(cbModelParam._m0[40u]), vec4(_1653, _1654, _1655, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1711 = (_1707 * cbModelParam._m0[1u].x) + (_1696 * (1.0 - cbModelParam._m0[1u].x));
    float _1721 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _737);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1721 : min(cbModelParam._m0[25u].z, _1721));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1769 = fma(_973, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965)) + cbModelParam._m0[13u].w;
        float _1773 = fma(_973, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965)) + cbModelParam._m0[14u].w;
        float _1777 = fma(_973, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965)) + cbModelParam._m0[15u].w;
        float _1780 = fma(_911, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909));
        float _1783 = fma(_911, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909));
        float _1786 = fma(_911, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909));
        float _1814;
        if (_1780 > 0.0)
        {
            _1814 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1814 = frontier_phi_16_14_ladder;
        }
        float _1987;
        if (_1783 > 0.0)
        {
            _1987 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1987 = frontier_phi_25_21_ladder;
        }
        float _2282;
        if (_1786 > 0.0)
        {
            _2282 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2282 = frontier_phi_37_32_ladder;
        }
        float _2284 = isnan(_1987) ? _1814 : (isnan(_1814) ? _1987 : min(_1814, _1987));
        float _2285 = isnan(_2282) ? _2284 : (isnan(_2284) ? _2282 : min(_2284, _2282));
        float _2289 = (_2285 * _1780) + _1769;
        float _2290 = (_2285 * _1783) + _1773;
        float _2291 = (_2285 * _1786) + _1777;
        float _2292 = _2285 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2292;
        float _2296 = _2292 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 > _2296) || ((_2290 < _2294) || ((_2289 < _2294) || (_2289 > _2296))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2291, cbModelParam._m0[9u].z, fma(_2290, cbModelParam._m0[9u].y, _2289 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2291, cbModelParam._m0[10u].z, fma(_2290, cbModelParam._m0[10u].y, _2289 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2291, cbModelParam._m0[11u].z, fma(_2290, cbModelParam._m0[11u].y, _2289 * cbModelParam._m0[11u].x))), _1722);
            frontier_phi_15_37_ladder = _2436.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2436.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2436.z * cbModelParam._m0[1u].y;
        }
        _1802 = frontier_phi_15_37_ladder_1;
        _1804 = frontier_phi_15_37_ladder;
        _1806 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_909, _910, _911), _1722);
        _1802 = _1790.x * cbModelParam._m0[1u].y;
        _1804 = _1790.y * cbModelParam._m0[1u].y;
        _1806 = _1790.z * cbModelParam._m0[1u].y;
    }
    float _1810 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _737);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1810 : min(cbModelParam._m0[25u].w, _1810));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1866 = fma(_973, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965)) + cbModelParam._m0[21u].w;
        float _1870 = fma(_973, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965)) + cbModelParam._m0[22u].w;
        float _1874 = fma(_973, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965)) + cbModelParam._m0[23u].w;
        float _1877 = fma(_911, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909));
        float _1880 = fma(_911, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909));
        float _1883 = fma(_911, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909));
        float _1992;
        if (_1877 > 0.0)
        {
            _1992 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1992 = frontier_phi_27_23_ladder;
        }
        float _2309;
        if (_1880 > 0.0)
        {
            _2309 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2309 = frontier_phi_39_34_ladder;
        }
        float _2647;
        if (_1883 > 0.0)
        {
            _2647 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2647 = frontier_phi_49_46_ladder;
        }
        float _2649 = isnan(_2309) ? _1992 : (isnan(_1992) ? _2309 : min(_1992, _2309));
        float _2650 = isnan(_2647) ? _2649 : (isnan(_2649) ? _2647 : min(_2649, _2647));
        float _2654 = (_2650 * _1877) + _1866;
        float _2655 = (_2650 * _1880) + _1870;
        float _2656 = (_2650 * _1883) + _1874;
        float _2657 = _2650 * 9.9999997473787516355514526367188e-05;
        float _2658 = (-1.0) - _2657;
        float _2660 = _2657 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2656 > _2660) || ((_2656 < _2658) || ((_2655 > _2660) || ((_2655 < _2658) || ((_2654 < _2658) || (_2654 > _2660))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2656, cbModelParam._m0[17u].z, fma(_2655, cbModelParam._m0[17u].y, _2654 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2656, cbModelParam._m0[18u].z, fma(_2655, cbModelParam._m0[18u].y, _2654 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2656, cbModelParam._m0[19u].z, fma(_2655, cbModelParam._m0[19u].y, _2654 * cbModelParam._m0[19u].x))), _1811);
            frontier_phi_24_49_ladder = _2778.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2778.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2778.x * cbModelParam._m0[1u].z;
        }
        _1902 = frontier_phi_24_49_ladder_2;
        _1904 = frontier_phi_24_49_ladder_1;
        _1906 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_909, _910, _911), _1811);
        _1902 = _1886.x * cbModelParam._m0[1u].z;
        _1904 = _1886.y * cbModelParam._m0[1u].z;
        _1906 = _1886.z * cbModelParam._m0[1u].z;
    }
    float _1919 = (((_936 * _886) + _937) * _901) * ((cbModelParam._m0[1u].w * (_1902 - _1802)) + _1802);
    float _1921 = (((_936 * _888) + _937) * _901) * ((cbModelParam._m0[1u].w * (_1904 - _1804)) + _1804);
    float _1923 = (((_936 * _889) + _937) * _901) * ((cbModelParam._m0[1u].w * (_1906 - _1806)) + _1806);
    float _1926 = fma(_1923, cbSceneParam._m0[89u].z, fma(_1921, cbSceneParam._m0[89u].y, _1919 * cbSceneParam._m0[89u].x));
    float _1929 = fma(_1923, cbSceneParam._m0[90u].z, fma(_1921, cbSceneParam._m0[90u].y, _1919 * cbSceneParam._m0[90u].x));
    float _1932 = fma(_1923, cbSceneParam._m0[91u].z, fma(_1921, cbSceneParam._m0[91u].y, _1919 * cbSceneParam._m0[91u].x));
    float _1966 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1970 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1979 = _1966 / _1978;
    float _1980 = _1970 / _1978;
    float _1981 = _1974 / _1978;
    float _2128;
    float _2129;
    float _2130;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2008 = ((uint(_1981 > cbSceneParam._m0[59u].y) + uint(_1981 > cbSceneParam._m0[59u].x)) + uint(_1981 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2009 = _2008 + 43u;
        uint _2017 = _2008 + 44u;
        uint _2025 = _2008 + 45u;
        uint _2033 = _2008 + 46u;
        float _2044 = fma(_1978, cbSceneParam._m0[_2009].w, fma(_1974, cbSceneParam._m0[_2009].z, fma(_1970, cbSceneParam._m0[_2009].y, _1966 * cbSceneParam._m0[_2009].x)));
        float _2048 = fma(_1978, cbSceneParam._m0[_2017].w, fma(_1974, cbSceneParam._m0[_2017].z, fma(_1970, cbSceneParam._m0[_2017].y, _1966 * cbSceneParam._m0[_2017].x)));
        float _2056 = fma(_1978, cbSceneParam._m0[_2033].w, fma(_1974, cbSceneParam._m0[_2033].z, fma(_1970, cbSceneParam._m0[_2033].y, _1966 * cbSceneParam._m0[_2033].x)));
        float _2061 = cbSceneParam._m0[33u].z * _2056;
        float _2063 = cbSceneParam._m0[33u].w * _2056;
        float _2066 = fma(_1978, cbSceneParam._m0[_2025].w, fma(_1974, cbSceneParam._m0[_2025].z, fma(_1970, cbSceneParam._m0[_2025].y, _1966 * cbSceneParam._m0[_2025].x))) / _2056;
        float _2114 = (cbSceneParam._m0[33u].x - sqrt(((_1980 * _1980) + (_1979 * _1979)) + (_1981 * _1981))) * cbSceneParam._m0[33u].y;
        float _4487 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2121 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2061 + _2044) / _2056, (_2063 + _2048) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2063 + _2044) / _2056, (_2048 - _2061) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 - _2061) / _2056, (_2048 - _2063) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 - _2063) / _2056, (_2061 + _2048) / _2056), _2066), 0.0)).x), vec4(0.25)));
        _2128 = 1.0 - (_2121 * cbSceneParam._m0[34u].x);
        _2129 = 1.0 - (_2121 * cbSceneParam._m0[34u].y);
        _2130 = 1.0 - (_2121 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2128 = 1.0;
        _2129 = 1.0;
        _2130 = 1.0;
    }
    float _2194;
    float _2196;
    float _2198;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2182 = fma(_1978, cbSceneParam._m0[63u].w, fma(_1974, cbSceneParam._m0[63u].z, fma(_1970, cbSceneParam._m0[63u].y, _1966 * cbSceneParam._m0[63u].x)));
        float _2183 = fma(_1978, cbSceneParam._m0[60u].w, fma(_1974, cbSceneParam._m0[60u].z, fma(_1970, cbSceneParam._m0[60u].y, _1966 * cbSceneParam._m0[60u].x))) / _2182;
        float _2184 = fma(_1978, cbSceneParam._m0[61u].w, fma(_1974, cbSceneParam._m0[61u].z, fma(_1970, cbSceneParam._m0[61u].y, _1966 * cbSceneParam._m0[61u].x))) / _2182;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2183 >= cbSceneParam._m0[64u].x) && (_2184 >= cbSceneParam._m0[64u].y)) && (_2183 <= cbSceneParam._m0[64u].z)) && (_2184 <= cbSceneParam._m0[64u].w))
        {
            float _2322 = fma(_1978, cbSceneParam._m0[62u].w, fma(_1974, cbSceneParam._m0[62u].z, fma(_1970, cbSceneParam._m0[62u].y, _1966 * cbSceneParam._m0[62u].x))) / _2182;
            float _2326 = isnan(cbSceneParam._m0[41u].w) ? _2322 : (isnan(_2322) ? cbSceneParam._m0[41u].w : max(_2322, cbSceneParam._m0[41u].w));
            float _2369 = (cbSceneParam._m0[33u].x - sqrt(((_1980 * _1980) + (_1979 * _1979)) + (_1981 * _1981))) * cbSceneParam._m0[33u].y;
            float _4503 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
            float _2376 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2183, cbSceneParam._m0[33u].w + _2184), _2326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2183, _2184 - cbSceneParam._m0[33u].z), _2326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2183 - cbSceneParam._m0[33u].z, _2184 - cbSceneParam._m0[33u].w), _2326), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2183 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2184), _2326), 0.0)).x), vec4(0.25)));
            float _2380 = 1.0 - (_2376 * cbSceneParam._m0[34u].x);
            float _2381 = 1.0 - (_2376 * cbSceneParam._m0[34u].y);
            float _2382 = 1.0 - (_2376 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2381) ? _2129 : (isnan(_2129) ? _2381 : min(_2129, _2381));
            frontier_phi_36_35_ladder_1 = isnan(_2382) ? _2130 : (isnan(_2130) ? _2382 : min(_2130, _2382));
            frontier_phi_36_35_ladder_2 = isnan(_2380) ? _2128 : (isnan(_2128) ? _2380 : min(_2128, _2380));
        }
        else
        {
            frontier_phi_36_35_ladder = _2129;
            frontier_phi_36_35_ladder_1 = _2130;
            frontier_phi_36_35_ladder_2 = _2128;
        }
        _2194 = frontier_phi_36_35_ladder_2;
        _2196 = frontier_phi_36_35_ladder;
        _2198 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2194 = _2128;
        _2196 = _2129;
        _2198 = _2130;
    }
    uvec4 _2203 = floatBitsToUint(cbInstanceData._m0[_861 + 5u]);
    uint _2205 = _2203.x * 14u;
    uint _2206 = _2205 + 13u;
    float _2213 = _901 + (-1.0);
    float _2218 = (cbLight._m0[_2206].x * _2213) + 1.0;
    float _2219 = (cbLight._m0[_2206].y * _2213) + 1.0;
    float _2220 = (cbLight._m0[_2206].z * _2213) + 1.0;
    float _2221 = (cbLight._m0[_2206].w * _2213) + 1.0;
    uint _2222 = _2205 + 5u;
    float _2228 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
    uint _2232 = _2205 + 4u;
    float _2241 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
    uint _2245 = _2205 | 1u;
    float _2256 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_733, _734, _735));
    float _2259 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_733, _734, _735));
    float _4539 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _4550 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2264 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2266 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * 0.3183098733425140380859375;
    float _2273 = ((cbLight._m0[_2222].x * _2228) * _2266) + (((cbLight._m0[_2232].x * _2194) * _2241) * _2264);
    float _2274 = ((_2228 * cbLight._m0[_2222].y) * _2266) + (((cbLight._m0[_2232].y * _2196) * _2241) * _2264);
    float _2275 = ((_2228 * cbLight._m0[_2222].z) * _2266) + (((cbLight._m0[_2232].z * _2198) * _2241) * _2264);
    uvec4 _2279 = floatBitsToUint(cbLight._m0[_2205 + 12u]);
    bool _2281 = _2279.x == 0u;
    float _2383;
    float _2385;
    float _2387;
    if (_2281)
    {
        _2383 = _2273;
        _2385 = _2274;
        _2387 = _2275;
    }
    else
    {
        uint _2391 = _2205 + 6u;
        float _2407 = (dot(vec3(cbLight._m0[_2205 + 2u].xyz), vec3(_733, _734, _735)) * 0.5) + 0.5;
        float _2408 = _2407 * _2407;
        float _4561 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2409 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2410 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2383 = (((cbLight._m0[_2391].x * 0.3183098733425140380859375) * _2409) * _2410) + _2273;
        _2385 = (((cbLight._m0[_2391].y * 0.3183098733425140380859375) * _2409) * _2410) + _2274;
        _2387 = (((cbLight._m0[_2391].z * 0.3183098733425140380859375) * _2409) * _2410) + _2275;
    }
    bool _2390 = _2279.y == 0u;
    float _2445;
    float _2447;
    float _2449;
    if (_2390)
    {
        _2445 = _2383;
        _2447 = _2385;
        _2449 = _2387;
    }
    else
    {
        uint _2618 = _2205 + 7u;
        float _2634 = (dot(vec3(cbLight._m0[_2205 + 3u].xyz), vec3(_733, _734, _735)) * 0.5) + 0.5;
        float _2635 = _2634 * _2634;
        float _4577 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2636 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2637 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2445 = (((cbLight._m0[_2618].x * 0.3183098733425140380859375) * _2636) * _2637) + _2383;
        _2447 = (((cbLight._m0[_2618].y * 0.3183098733425140380859375) * _2636) * _2637) + _2385;
        _2449 = (((cbLight._m0[_2618].z * 0.3183098733425140380859375) * _2636) * _2637) + _2387;
    }
    uint _2452 = _2205 + 8u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _737) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2205].x + _815;
    float _2468 = cbLight._m0[_2205].y + _816;
    float _2469 = cbLight._m0[_2205].z + _817;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2205].xyz));
    float _4593 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _4604 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _2481 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2482 = dot(vec3(_733, _734, _735), vec3(_2474, _2475, _2476));
    float _4615 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2486 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2474, _2475, _2476));
    float _4626 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2490 = _2466 * _2466;
    float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
    float _2502 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
    float _2503 = 0.959999978542327880859375 - _883;
    float _2505 = 0.959999978542327880859375 - _884;
    float _2506 = 0.959999978542327880859375 - _885;
    float _2513 = 1.0 - _2466;
    float _2524 = (0.5 / (((_2481 * ((_2480 * _2513) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2513) + _2466) * _2480))) * _2480;
    float _4637 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2526 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
    uint _2540 = _2205 + 9u;
    float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _737) * 0.949999988079071044921875);
    float _2552 = _2551 * _2551;
    float _2553 = cbLight._m0[_2245].x + _815;
    float _2554 = cbLight._m0[_2245].y + _816;
    float _2555 = cbLight._m0[_2245].z + _817;
    float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
    float _2560 = _2559 * _2553;
    float _2561 = _2559 * _2554;
    float _2562 = _2559 * _2555;
    float _2563 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2245].xyz));
    float _4648 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2567 = dot(vec3(_733, _734, _735), vec3(_2560, _2561, _2562));
    float _4659 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _2571 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2560, _2561, _2562));
    float _4670 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2575 = _2552 * _2552;
    float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
    float _2586 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
    float _2593 = 1.0 - _2552;
    float _2603 = (0.5 / (((_2481 * ((_2566 * _2593) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2593) + _2552) * _2566))) * _2566;
    float _4681 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2605 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
    float _2615 = (((((_2586 * _2503) + _886) * cbLight._m0[_2540].x) * _2605) * _2228) + ((((cbLight._m0[_2452].x * _2194) * ((_2502 * _2503) + _886)) * _2526) * _2241);
    float _2616 = (((((_2586 * _2505) + _888) * cbLight._m0[_2540].y) * _2605) * _2228) + ((((cbLight._m0[_2452].y * _2196) * ((_2502 * _2505) + _888)) * _2526) * _2241);
    float _2617 = (((((_2586 * _2506) + _889) * cbLight._m0[_2540].z) * _2605) * _2228) + ((((cbLight._m0[_2452].z * _2198) * ((_2502 * _2506) + _889)) * _2526) * _2241);
    float _2673;
    float _2675;
    float _2677;
    if (_2281)
    {
        _2673 = _2615;
        _2675 = _2616;
        _2677 = _2617;
    }
    else
    {
        uint _2679 = _2205 + 2u;
        uint _2683 = _2205 + 10u;
        float _2697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2679].w)) * _737) * 0.949999988079071044921875);
        float _2698 = _2697 * _2697;
        float _2699 = cbLight._m0[_2679].x + _815;
        float _2700 = cbLight._m0[_2679].y + _816;
        float _2701 = cbLight._m0[_2679].z + _817;
        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
        float _2706 = _2705 * _2699;
        float _2707 = _2705 * _2700;
        float _2708 = _2705 * _2701;
        float _2709 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2679].xyz));
        float _4692 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2713 = dot(vec3(_733, _734, _735), vec3(_2706, _2707, _2708));
        float _4703 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2717 = dot(vec3(cbLight._m0[_2679].xyz), vec3(_2706, _2707, _2708));
        float _4714 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2721 = _2698 * _2698;
        float _2725 = ((_2716 * _2716) * (_2721 + (-1.0))) + 1.0;
        float _2732 = exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0);
        float _2739 = 1.0 - _2698;
        float _2749 = (0.5 / (((_2481 * ((_2712 * _2739) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2739) + _2698) * _2712))) * _2712;
        float _4725 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2751 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2721 / ((_2725 * _2725) * 3.141590118408203125));
        float _2752 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2673 = (((((_2732 * _2503) + _886) * cbLight._m0[_2683].x) * _2751) * _2752) + _2615;
        _2675 = (((((_2732 * _2505) + _888) * cbLight._m0[_2683].y) * _2751) * _2752) + _2616;
        _2677 = (((((_2732 * _2506) + _889) * cbLight._m0[_2683].z) * _2751) * _2752) + _2617;
    }
    float _2783;
    float _2785;
    float _2787;
    if (_2390)
    {
        _2783 = _2673;
        _2785 = _2675;
        _2787 = _2677;
    }
    else
    {
        uint _2794 = _2205 + 3u;
        uint _2798 = _2205 + 11u;
        float _2812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2794].w)) * _737) * 0.949999988079071044921875);
        float _2813 = _2812 * _2812;
        float _2814 = cbLight._m0[_2794].x + _815;
        float _2815 = cbLight._m0[_2794].y + _816;
        float _2816 = cbLight._m0[_2794].z + _817;
        float _2820 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
        float _2821 = _2820 * _2814;
        float _2822 = _2820 * _2815;
        float _2823 = _2820 * _2816;
        float _2824 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2794].xyz));
        float _4741 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2827 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2828 = dot(vec3(_733, _734, _735), vec3(_2821, _2822, _2823));
        float _4752 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2831 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2832 = dot(vec3(cbLight._m0[_2794].xyz), vec3(_2821, _2822, _2823));
        float _4763 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2836 = _2813 * _2813;
        float _2840 = ((_2831 * _2831) * (_2836 + (-1.0))) + 1.0;
        float _2847 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
        float _2854 = 1.0 - _2813;
        float _2864 = (0.5 / (((_2481 * ((_2827 * _2854) + _2813)) + 9.9999999392252902907785028219223e-09) + (((_2481 * _2854) + _2813) * _2827))) * _2827;
        float _4774 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2866 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2836 / ((_2840 * _2840) * 3.141590118408203125));
        float _2867 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2783 = (((((_2847 * _2503) + _886) * cbLight._m0[_2798].x) * _2866) * _2867) + _2673;
        _2785 = (((((_2847 * _2505) + _888) * cbLight._m0[_2798].y) * _2866) * _2867) + _2675;
        _2787 = (((((_2847 * _2506) + _889) * cbLight._m0[_2798].z) * _2866) * _2867) + _2677;
    }
    float _2932;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    if (_2203.y == 0u)
    {
        uvec4 _2888 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2889 = _2888.x;
        uint _2900 = uint((float(_2888.y) * floor(float(uint(cbSceneParam._m0[85u].y * _824) / _2889))) + floor(float(uint(cbSceneParam._m0[85u].x * _823) / _2889)));
        float _2910 = (log2(_1981 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2911 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        uint _2914 = uint(isnan(14.0) ? _2911 : (isnan(_2911) ? 14.0 : min(_2911, 14.0)));
        uvec4 _2919 = texelFetch(g_lightClusterGridBuffer, int(((_2914 << 2u) + (_2900 << 6u)) >> 2u));
        uint _2920 = _2919.x;
        uint _2921 = _2888.z;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        if (((((1u << ((_2921 >> 4u) & 15u)) + 4294967295u) & _2920) == 0u) || ((_2921 & 240u) == 0u))
        {
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
        }
        else
        {
            float _3002;
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            uint _3151 = 0u;
            uint _3160;
            bool _3161;
            for (;;)
            {
                _3160 = texelFetch(g_lightClassification, int((((_2914 << 5u) + (_2900 << 9u)) + (_3151 << 2u)) >> 2u)).x;
                _3161 = _3160 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3161)
                {
                    frontier_phi_68_pred = _3150;
                    frontier_phi_68_pred_1 = _3149;
                    frontier_phi_68_pred_2 = _3148;
                    frontier_phi_68_pred_3 = _3146;
                    frontier_phi_68_pred_4 = _3145;
                    frontier_phi_68_pred_5 = _3147;
                }
                else
                {
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    uint _3275;
                    _3269 = _3145;
                    _3270 = _3146;
                    _3271 = _3147;
                    _3272 = _3148;
                    _3273 = _3149;
                    _3274 = _3150;
                    _3275 = _3160;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    for (;;)
                    {
                        uint _3279 = uint(findLSB(_3275)) + (_3151 << 5u);
                        uint _3276 = (_3275 + 4294967295u) & _3275;
                        uint _3281 = _3279 * 48u;
                        vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3281)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 3u)).x));
                        uint _3301 = (_3279 * 48u) + 4u;
                        vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3301)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 3u)).x));
                        uint _3320 = (_3279 * 48u) + 8u;
                        vec3 _3331 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x));
                        float _3335 = _3295.x - _1979;
                        float _3336 = _3295.y - _1980;
                        float _3337 = _3295.z - _1981;
                        float _3338 = dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337));
                        float _3341 = inversesqrt(_3338);
                        float _3342 = _3341 * _3335;
                        float _3343 = _3341 * _3336;
                        float _3344 = _3341 * _3337;
                        float _3345 = dot(vec3(_842, _845, _848), vec3(_3342, _3343, _3344));
                        float _3350 = 1.0 - (_3338 * _3295.w);
                        float _4800 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3351 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3352 = sqrt(_3338) * _3314.w;
                        float _3354 = 1.39999997615814208984375 / (_3352 + 1.39999997615814208984375);
                        float _3355 = _3354 * _3354;
                        float _3358 = ((1.0 - _3355) * _3345) + _3355;
                        float _3361 = _3352 * _3352;
                        float _3365 = ((isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0))) * _3351) / ((_3361 * 0.699999988079071044921875) + 1.0);
                        float _3369 = (-0.0) - _1979;
                        float _3370 = (-0.0) - _1980;
                        float _3371 = (-0.0) - _1981;
                        float _3375 = inversesqrt(dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371)));
                        float _3376 = _3375 * _3369;
                        float _3377 = _3375 * _3370;
                        float _3378 = _3375 * _3371;
                        float _3385 = exp2(log2(1.0 / ((_3361 * 3.5) + 5.0)) * 0.25);
                        float _3386 = 1.0 - _917;
                        float _3393 = sqrt(1.0 - ((1.0 - (_3386 * _3386)) * (1.0 - (_3385 * _3385))));
                        float _3394 = _3393 * _3393;
                        float _3395 = _3394 * _3394;
                        float _3396 = _3376 + _3342;
                        float _3397 = _3377 + _3343;
                        float _3398 = _3378 + _3344;
                        float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                        float _3406 = dot(vec3(_842, _845, _848), vec3(_3376, _3377, _3378));
                        float _4816 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3409 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3410 = dot(vec3(_842, _845, _848), vec3(_3402 * _3396, _3402 * _3397, _3402 * _3398));
                        float _4827 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3413 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3417 = ((_3413 * _3413) * (_3395 + (-1.0))) + 1.0;
                        float _3418 = _3354 * _3394;
                        float _3419 = _3418 * _3418;
                        float _3422 = ((1.0 - _3419) * _3345) + _3419;
                        float _4838 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3423 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3424 = 1.0 - _3394;
                        float _3434 = (0.5 / (((_3423 * ((_3409 * _3424) + _3394)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3394) * _3409))) * _3423;
                        float _4849 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3445 = (((_3395 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3417 * _3417) * ((_3361 * 2.1991131305694580078125) + 3.141590118408203125))) * _3351;
                        _3204 = (_3365 * _3314.x) + _3272;
                        _3205 = (_3365 * _3314.y) + _3273;
                        _3206 = (_3365 * _3314.z) + _3274;
                        _3201 = (_3445 * _3331.x) + _3269;
                        _3202 = (_3445 * _3331.y) + _3270;
                        _3203 = (_3445 * _3331.z) + _3271;
                        if (_3276 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3269 = _3201;
                            _3270 = _3202;
                            _3271 = _3203;
                            _3272 = _3204;
                            _3273 = _3205;
                            _3274 = _3206;
                            _3275 = _3276;
                        }
                    }
                    frontier_phi_68_pred = _3206;
                    frontier_phi_68_pred_1 = _3205;
                    frontier_phi_68_pred_2 = _3204;
                    frontier_phi_68_pred_3 = _3202;
                    frontier_phi_68_pred_4 = _3201;
                    frontier_phi_68_pred_5 = _3203;
                }
                _3012 = frontier_phi_68_pred;
                _3010 = frontier_phi_68_pred_1;
                _3008 = frontier_phi_68_pred_2;
                _3004 = frontier_phi_68_pred_3;
                _3002 = frontier_phi_68_pred_4;
                _3006 = frontier_phi_68_pred_5;
                uint _3152 = _3151 + 1u;
                if (_3152 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3145 = _3002;
                    _3146 = _3004;
                    _3147 = _3006;
                    _3148 = _3008;
                    _3149 = _3010;
                    _3150 = _3012;
                    _3151 = _3152;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
        }
        uvec4 _3015 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3016 = _3015.z;
        uint _3018 = (_3016 >> 8u) & 15u;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        if (((4294967295u << _3018) & _2920) == 0u)
        {
            _3113 = _3001;
            _3115 = _3003;
            _3117 = _3005;
            _3119 = _3007;
            _3121 = _3009;
            _3123 = _3011;
        }
        else
        {
            float _3138 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
            float _3139 = _3138 * _1979;
            float _3140 = _3138 * _1980;
            float _3141 = _3138 * _1981;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3018 < ((_3016 >> 12u) & 15u))
            {
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3124;
                float _3252 = _3001;
                float _3253 = _3003;
                float _3254 = _3005;
                float _3255 = _3007;
                float _3256 = _3009;
                float _3257 = _3011;
                uint _3258 = _3018;
                uint _3267;
                bool _3268;
                for (;;)
                {
                    _3267 = texelFetch(g_lightClassification, int((((_2914 << 5u) + (_2900 << 9u)) + (_3258 << 2u)) >> 2u)).x;
                    _3268 = _3267 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3268)
                    {
                        frontier_phi_74_pred = _3254;
                        frontier_phi_74_pred_1 = _3253;
                        frontier_phi_74_pred_2 = _3252;
                        frontier_phi_74_pred_3 = _3257;
                        frontier_phi_74_pred_4 = _3256;
                        frontier_phi_74_pred_5 = _3255;
                    }
                    else
                    {
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3463 = _3252;
                        float _3464 = _3253;
                        float _3465 = _3254;
                        float _3466 = _3255;
                        float _3467 = _3256;
                        float _3468 = _3257;
                        uint _3469 = _3267;
                        uint _3470;
                        vec4 _3495;
                        float _3496;
                        vec4 _3511;
                        vec3 _3523;
                        vec4 _3538;
                        vec4 _3554;
                        float _3601;
                        bool _3602;
                        for (;;)
                        {
                            uint _3480 = ((_3258 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3469));
                            _3470 = (_3469 + 4294967295u) & _3469;
                            uint _3482 = _3480 * 40u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            _3496 = _3495.w;
                            uint _3498 = (_3480 * 40u) + 4u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3513 = (_3480 * 40u) + 8u;
                            _3523 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x));
                            uint _3525 = (_3480 * 40u) + 16u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3541 = (_3480 * 40u) + 20u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3557 = (_3480 * 40u) + 24u;
                            vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3576 = (_3480 * 40u) + 28u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            _3601 = fma(_1981, _3589.z, fma(_1980, _3589.y, _3589.x * _1979)) + _3589.w;
                            _3602 = !((fma(_1981, _3570.z, fma(_1980, _3570.y, _3570.x * _1979)) + _3570.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3602)
                            {
                                float _3629 = _3495.x - _1979;
                                float _3630 = _3495.y - _1980;
                                float _3631 = _3495.z - _1981;
                                float _3632 = dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631));
                                float _3635 = inversesqrt(_3632);
                                float _3636 = _3635 * _3629;
                                float _3637 = _3635 * _3630;
                                float _3638 = _3635 * _3631;
                                float _3642 = 1.0 - (_3632 / (_3496 * _3496));
                                float _4860 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3647 = sqrt(_3632) * _3511.w;
                                float _3649 = 1.39999997615814208984375 / (_3647 + 1.39999997615814208984375);
                                float _3650 = _3649 * _3649;
                                float _3653 = ((1.0 - _3650) * dot(vec3(_3636, _3637, _3638), vec3(_842, _845, _848))) + _3650;
                                float _3656 = _3647 * _3647;
                                float _3660 = (fma(_1981, _3538.z, fma(_1980, _3538.y, _3538.x * _1979)) + _3538.w) / _3601;
                                float _3661 = (fma(_1981, _3554.z, fma(_1980, _3554.y, _3554.x * _1979)) + _3554.w) / _3601;
                                float _3665 = 1.0 - dot(vec2(_3660, _3661), vec2(_3660, _3661));
                                float _4876 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3667 = _3666 * (((isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0))) * _3643) / ((_3656 * 0.699999988079071044921875) + 1.0));
                                float _3679 = exp2(log2(1.0 / ((_3656 * 3.5) + 5.0)) * 0.25);
                                float _3680 = 1.0 - _917;
                                float _3687 = sqrt(1.0 - ((1.0 - (_3680 * _3680)) * (1.0 - (_3679 * _3679))));
                                float _3688 = _3687 * _3687;
                                float _3689 = _3688 * _3688;
                                float _3690 = _3636 - _3139;
                                float _3691 = _3637 - _3140;
                                float _3692 = _3638 - _3141;
                                float _3696 = inversesqrt(dot(vec3(_3690, _3691, _3692), vec3(_3690, _3691, _3692)));
                                float _3700 = dot(vec3(_842, _845, _848), vec3((-0.0) - _3139, (-0.0) - _3140, (-0.0) - _3141));
                                float _4887 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3703 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3704 = dot(vec3(_842, _845, _848), vec3(_3696 * _3690, _3696 * _3691, _3696 * _3692));
                                float _4898 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3707 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3711 = ((_3707 * _3707) * (_3689 + (-1.0))) + 1.0;
                                float _3712 = _3649 * _3688;
                                float _3713 = _3712 * _3712;
                                float _3719 = ((1.0 - _3713) * dot(vec3(_842, _845, _848), vec3(_3636, _3637, _3638))) + _3713;
                                float _4909 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3721 = 1.0 - _3688;
                                float _3731 = (0.5 / (((_3720 * ((_3703 * _3721) + _3688)) + 9.9999999392252902907785028219223e-09) + (((_3720 * _3721) + _3688) * _3703))) * _3720;
                                float _4920 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3741 = (_3666 * _3643) * (((_3689 * 3.1415927410125732421875) * (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) / ((_3711 * _3711) * ((_3656 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3741 * _3523.z;
                                frontier_phi_80_pred_1 = _3741 * _3523.y;
                                frontier_phi_80_pred_2 = _3741 * _3523.x;
                                frontier_phi_80_pred_3 = _3667 * _3511.z;
                                frontier_phi_80_pred_4 = _3667 * _3511.y;
                                frontier_phi_80_pred_5 = _3667 * _3511.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3747 = frontier_phi_80_pred;
                            _3746 = frontier_phi_80_pred_1;
                            _3745 = frontier_phi_80_pred_2;
                            _3750 = frontier_phi_80_pred_3;
                            _3749 = frontier_phi_80_pred_4;
                            _3748 = frontier_phi_80_pred_5;
                            _3453 = _3748 + _3466;
                            _3454 = _3749 + _3467;
                            _3455 = _3750 + _3468;
                            _3450 = _3745 + _3463;
                            _3451 = _3746 + _3464;
                            _3452 = _3747 + _3465;
                            if (_3470 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3470;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3452;
                        frontier_phi_74_pred_1 = _3451;
                        frontier_phi_74_pred_2 = _3450;
                        frontier_phi_74_pred_3 = _3455;
                        frontier_phi_74_pred_4 = _3454;
                        frontier_phi_74_pred_5 = _3453;
                    }
                    _3118 = frontier_phi_74_pred;
                    _3116 = frontier_phi_74_pred_1;
                    _3114 = frontier_phi_74_pred_2;
                    _3124 = frontier_phi_74_pred_3;
                    _3122 = frontier_phi_74_pred_4;
                    _3120 = frontier_phi_74_pred_5;
                    uint _3259 = _3258 + 1u;
                    if (_3259 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3252 = _3114;
                        _3253 = _3116;
                        _3254 = _3118;
                        _3255 = _3120;
                        _3256 = _3122;
                        _3257 = _3124;
                        _3258 = _3259;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3122;
                frontier_phi_62_63_ladder_1 = _3120;
                frontier_phi_62_63_ladder_2 = _3118;
                frontier_phi_62_63_ladder_3 = _3124;
                frontier_phi_62_63_ladder_4 = _3116;
                frontier_phi_62_63_ladder_5 = _3114;
            }
            else
            {
                frontier_phi_62_63_ladder = _3009;
                frontier_phi_62_63_ladder_1 = _3007;
                frontier_phi_62_63_ladder_2 = _3005;
                frontier_phi_62_63_ladder_3 = _3011;
                frontier_phi_62_63_ladder_4 = _3003;
                frontier_phi_62_63_ladder_5 = _3001;
            }
            _3113 = frontier_phi_62_63_ladder_5;
            _3115 = frontier_phi_62_63_ladder_4;
            _3117 = frontier_phi_62_63_ladder_2;
            _3119 = frontier_phi_62_63_ladder_1;
            _3121 = frontier_phi_62_63_ladder;
            _3123 = frontier_phi_62_63_ladder_3;
        }
        float _3128 = isnan(1.0) ? _901 : (isnan(_901) ? 1.0 : min(_901, 1.0));
        _2932 = (_3128 * _3119) + _2445;
        _2934 = (_3128 * _3121) + _2447;
        _2936 = (_3128 * _3123) + _2449;
        _2938 = ((_3113 * _886) * _3128) + _2783;
        _2940 = ((_3115 * _888) * _3128) + _2785;
        _2942 = ((_3117 * _889) * _3128) + _2787;
    }
    else
    {
        _2932 = _2445;
        _2934 = _2447;
        _2936 = _2449;
        _2938 = _2783;
        _2940 = _2785;
        _2942 = _2787;
    }
    float _4936 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4947 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4958 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4969 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _2967 = cbInstanceData._m0[_861 + 6u].w * (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0)));
    float _2972 = _823 / cbSceneParam._m0[86u].x;
    float _2973 = _824 / cbSceneParam._m0[86u].y;
    vec4 _2987 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2972, _2973, (log2((isnan(cbSceneParam._m0[77u].w) ? _757 : (isnan(_757) ? cbSceneParam._m0[77u].w : min(_757, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2989 = _2987.x;
    float _2990 = _2987.y;
    float _2991 = _2987.z;
    float _2992 = _2987.w;
    float _3063;
    float _3065;
    float _3067;
    float _3069;
    if (_757 > cbSceneParam._m0[78u].w)
    {
        float _3026 = isnan(_757) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _757 : min(cbSceneParam._m0[80u].w, _757));
        float _3027 = _3026 / _757;
        float _3038 = _3027 * _808;
        float _3039 = _809 * _3027;
        float _3040 = (-0.0) - _3039;
        float _3041 = _3027 * _810;
        float _3043 = (cbSceneParam._m0[77u].w * _3040) / _3026;
        float _3044 = _3043 + cbSceneParam._m0[79u].w;
        float _3045 = cbSceneParam._m0[79u].w - _3039;
        float _3051 = sqrt(((_3038 * _3038) + (_3039 * _3039)) + (_3041 * _3041));
        float _3054 = (1.0 - (cbSceneParam._m0[77u].w / _3026)) * _3051;
        float _3059 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3061 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3214;
        if (abs((_3040 - _3043) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3214 = ((((_3044 > 0.0) ? exp2(_3059 * _3044) : (2.0 - exp2(_3061 * _3044))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3054;
        }
        else
        {
            float _3174 = 1.0 / cbSceneParam._m0[80u].x;
            float _3175 = isnan(_3045) ? _3044 : (isnan(_3044) ? _3045 : max(_3044, _3045));
            float _3176 = isnan(_3045) ? _3044 : (isnan(_3044) ? _3045 : min(_3044, _3045));
            float _3185 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : min(_3175, 0.0));
            float _3186 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : min(_3176, 0.0));
            _3214 = ((abs(_3051 / _3040) * cbSceneParam._m0[80u].y) * ((((_3185 - _3186) * 2.0) - ((exp2(_3059 * (isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0)))) - exp2(_3059 * (isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))))) * _3174)) - ((exp2(_3061 * _3185) - exp2(_3061 * _3186)) * _3174))) + (_3054 * cbSceneParam._m0[80u].z);
        }
        vec4 _3216 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2972, _2973, 1.0), 0.0);
        float _3225 = exp2((_3214 * (-1.44269502162933349609375)) * (1.0 - _3216.w));
        float _3226 = log2(_3225);
        float _3242 = log2(_2992);
        _3063 = (exp2(_3242 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].x)) * _3216.x) / cbSceneParam._m0[78u].x)) + _2989;
        _3065 = (exp2(_3242 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].y)) * _3216.y) / cbSceneParam._m0[78u].y)) + _2990;
        _3067 = (exp2(_3242 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].z)) * _3216.z) / cbSceneParam._m0[78u].z)) + _2991;
        _3069 = _3225 * _2992;
    }
    else
    {
        _3063 = _2989;
        _3065 = _2990;
        _3067 = _2991;
        _3069 = _2992;
    }
    float _3081 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3082 = _3081 == 3.0;
    float _3083 = log2(_3069);
    float _3090 = exp2(_3083 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2932 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _901))) + ((_2938 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1711)) * cbPerFrame._m0[3u].x));
    float _3091 = exp2(_3083 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2934 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _901))) + ((_2940 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1711)) * cbPerFrame._m0[3u].x));
    float _3092 = exp2(_3083 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_2936 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _901))) + ((_2942 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1711)) * cbPerFrame._m0[3u].x));
    float _3101 = (_3081 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3101 * (_3082 ? _3090 : (_3090 + (cbSceneParam._m0[72u].w * _3063)));
    SV_Target.y = _3101 * (_3082 ? _3091 : (_3091 + (cbSceneParam._m0[72u].w * _3065)));
    SV_Target.z = _3101 * (_3082 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3067)));
    SV_Target.w = _2967;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2967;
}


