#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1321;
float _3989;
float _3990;
float _3991;
float _3992;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _224 = _223 * _216;
    float _225 = _223 * _217;
    float _226 = _223 * _218;
    float _236 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _237 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _238 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _242 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _243 = _242 * _236;
    float _244 = _242 * _237;
    float _245 = _242 * _238;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _263 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _264 = _263 * TANGENT_2.x;
    float _265 = _263 * TANGENT_2.y;
    float _266 = _263 * TANGENT_2.z;
    float _271;
    float _272;
    float _273;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _271 = (-0.0) - _250;
        _272 = (-0.0) - _251;
        _273 = (-0.0) - _252;
    }
    else
    {
        _271 = _250;
        _272 = _251;
        _273 = _252;
    }
    vec4 _312 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _324 = 1.0 - ((1.0 - _312.x) * 1.39999997615814208984375);
    float _4001 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _325 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _332 = (_325 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    float _333 = (_325 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _334 = (_325 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _336 = 1.0 - ((1.0 - _312.y) * 1.39999997615814208984375);
    float _4012 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _337 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _344 = (_337 * (cbMtdParam._m0[13u].x - _332)) + _332;
    float _345 = (_337 * (cbMtdParam._m0[13u].y - _333)) + _333;
    float _346 = (_337 * (cbMtdParam._m0[13u].z - _334)) + _334;
    float _348 = 1.0 - ((1.0 - _312.z) * 1.39999997615814208984375);
    float _4023 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _349 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _377 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[18u].x;
    float _391 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.y - _377) + (cbMtdParam._m0[16u].z * TEXCOORD_5.y))) + 1.0;
    float _4034 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _393 = 1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)));
    float _394 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _395 = isnan(1.0) ? _394 : (isnan(_394) ? 1.0 : min(_394, 1.0));
    float _403 = ((cbMtdParam._m0[16u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5.x - _377) + (cbMtdParam._m0[16u].y * TEXCOORD_5.x))) + 1.0;
    float _4055 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _405 = 1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)));
    float _406 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _407 = isnan(1.0) ? _406 : (isnan(_406) ? 1.0 : min(_406, 1.0));
    vec4 _425 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _427 = _425.x;
    float _428 = _425.y;
    float _429 = _425.z;
    float _430 = cbMtdParam._m0[12u].x * _407;
    float _432 = cbMtdParam._m0[12u].y * _407;
    float _434 = cbMtdParam._m0[12u].z * _407;
    float _454 = _405 + _393;
    float _455 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _456 = isnan(1.0) ? _455 : (isnan(_455) ? 1.0 : min(_455, 1.0));
    vec4 _474 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _479 = _474.w;
    float _480 = _474.x * cbMtdParam._m0[10u].x;
    float _481 = _474.y * cbMtdParam._m0[10u].y;
    float _482 = _474.z * cbMtdParam._m0[10u].z;
    float _502 = ((_480 - (_456 * _480)) + ((((((_427 * (cbMtdParam._m0[11u].x - _430)) * _395) + (_430 * _427)) * 4.55000019073486328125) * _456) * _480)) * ((_349 * (cbMtdParam._m0[14u].x - _344)) + _344);
    float _503 = ((((((((_428 * (cbMtdParam._m0[11u].y - _432)) * _395) + (_432 * _428)) * 4.55000019073486328125) * _456) * _481) + _481) - (_456 * _481)) * ((_349 * (cbMtdParam._m0[14u].y - _345)) + _345);
    float _504 = ((((((((_429 * (cbMtdParam._m0[11u].z - _434)) * _395) + (_434 * _429)) * 4.55000019073486328125) * _456) * _482) + _482) - (_456 * _482)) * ((_349 * (cbMtdParam._m0[14u].z - _346)) + _346);
    vec4 _518 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _522 = _518.z;
    float _526 = (_518.x * 2.0) + (-1.0);
    float _528 = (_518.y * 2.0) + (-1.0);
    float _529 = dot(vec2(_526, _528), vec2(_526, _528));
    float _4086 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _534 = sqrt(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))));
    float _537 = fma(_534, _271, fma(_528, _264, _526 * _243));
    float _540 = fma(_534, _272, fma(_528, _265, _526 * _244));
    float _543 = fma(_534, _273, fma(_528, _266, _526 * _245));
    float _547 = inversesqrt(dot(vec3(_537, _540, _543), vec3(_537, _540, _543)));
    float _548 = _547 * _537;
    float _549 = _547 * _540;
    float _550 = _547 * _543;
    vec4 _562 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _568 = (_562.x * 2.0) + (-1.0);
    float _569 = (_562.y * 2.0) + (-1.0);
    float _570 = dot(vec2(_568, _569), vec2(_568, _569));
    float _4097 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _575 = sqrt(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))));
    float _578 = fma(_575, _271, fma(_569, _264, _568 * _243));
    float _581 = fma(_575, _272, fma(_569, _265, _568 * _244));
    float _584 = fma(_575, _273, fma(_569, _266, _568 * _245));
    float _588 = inversesqrt(dot(vec3(_578, _581, _584), vec3(_578, _581, _584)));
    float _589 = _588 * _578;
    float _590 = _588 * _581;
    float _591 = _588 * _584;
    float _594 = fma(_591, _226, fma(_590, _225, _589 * _224));
    float _597 = fma(_591, _259, fma(_590, _258, _589 * _257));
    float _600 = fma(_591, _273, fma(_590, _272, _589 * _271));
    float _604 = inversesqrt(dot(vec3(_594, _597, _600), vec3(_594, _597, _600)));
    float _608 = fma(_550, _226, fma(_549, _225, _548 * _224));
    float _611 = fma(_550, _259, fma(_549, _258, _548 * _257));
    float _614 = fma(_550, _273, fma(_549, _272, _548 * _271));
    float _618 = inversesqrt(dot(vec3(_608, _611, _614), vec3(_608, _611, _614)));
    vec4 _634 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _640 = (_634.x * 2.0) + (-1.0);
    float _641 = (_634.y * 2.0) + (-1.0);
    float _642 = dot(vec2(_640, _641), vec2(_640, _641));
    float _4108 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _647 = sqrt(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))));
    vec4 _662 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _668 = (_662.x * 2.0) + (-1.0);
    float _669 = (_662.y * 2.0) + (-1.0);
    float _670 = dot(vec2(_668, _669), vec2(_668, _669));
    float _4119 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _675 = sqrt(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))));
    float _678 = fma(_675, _271, fma(_669, _264, _668 * _243));
    float _681 = fma(_675, _272, fma(_669, _265, _668 * _244));
    float _684 = fma(_675, _273, fma(_669, _266, _668 * _245));
    float _688 = inversesqrt(dot(vec3(_678, _681, _684), vec3(_678, _681, _684)));
    float _689 = _688 * _678;
    float _690 = _688 * _681;
    float _691 = _688 * _684;
    float _694 = fma(_691, _226, fma(_690, _225, _689 * _224));
    float _697 = fma(_691, _259, fma(_690, _258, _689 * _257));
    float _700 = fma(_691, _273, fma(_690, _272, _689 * _271));
    float _704 = inversesqrt(dot(vec3(_694, _697, _700), vec3(_694, _697, _700)));
    float _720 = ((((_618 * _608) * cbMtdParam._m0[17u].w) + (((_594 * _395) * _604) * cbMtdParam._m0[17u].y)) + _640) + (((_694 * _407) * _704) * cbMtdParam._m0[17u].z);
    float _723 = ((((_618 * _611) * cbMtdParam._m0[17u].w) + (((_597 * _395) * _604) * cbMtdParam._m0[17u].y)) + _641) + (((_697 * _407) * _704) * cbMtdParam._m0[17u].z);
    float _726 = fma(_647, _271, fma(_723, _257, _720 * _224));
    float _729 = fma(_647, _272, fma(_723, _258, _720 * _225));
    float _732 = fma(_647, _273, fma(_723, _259, _720 * _226));
    float _736 = inversesqrt(dot(vec3(_726, _729, _732), vec3(_726, _729, _732)));
    float _737 = _736 * _726;
    float _738 = _736 * _729;
    float _739 = _736 * _732;
    float _4130 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _740 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _741 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _4152 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _4163 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _4174 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _4185 = isnan(0.0) ? cbMtdParam._m0[18u].y : (isnan(cbMtdParam._m0[18u].y) ? 0.0 : max(cbMtdParam._m0[18u].y, 0.0));
    float _745 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _761 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _812 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _802);
    float _813 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _802);
    float _814 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _802);
    float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
    float _819 = _812 * _818;
    float _820 = _813 * _818;
    float _821 = _814 * _818;
    vec4 _826 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _828 = _826.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1000 = sqrt(((_812 * _812) + (_813 * _813)) + (_814 * _814));
        float _1006 = (cbMatDynParam._m0[5u].x * _1000) + cbMatDynParam._m0[5u].y;
        float _4196 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1011 = (cbMatDynParam._m0[5u].z * _1000) + cbMatDynParam._m0[5u].w;
        float _4207 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) - _1007)) + _1007) < ((_828 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _839 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _840 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _858 = fma(_739, cbSceneParam._m0[5u].z, fma(_738, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _737));
    float _861 = fma(_739, cbSceneParam._m0[6u].z, fma(_738, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _737));
    float _864 = fma(_739, cbSceneParam._m0[7u].z, fma(_738, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _737));
    uint _877 = uint(roundEven(NORMAL.w)) * 13u;
    uint _878 = _877 + 9u;
    uint _879 = _878 + uint(cbMatDynParam._m0[0u].w);
    float _885 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * cbInstanceData._m0[_879].x;
    float _886 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * cbInstanceData._m0[_879].y;
    float _887 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * cbInstanceData._m0[_879].z;
    float _4218 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _891 = 1.0 - _745;
    float _892 = _888 * _891;
    float _893 = _889 * _891;
    float _894 = _890 * _891;
    float _899 = (_888 + (-0.039999999105930328369140625)) * _745;
    float _900 = (_889 + (-0.039999999105930328369140625)) * _745;
    float _901 = (_890 + (-0.039999999105930328369140625)) * _745;
    float _902 = _899 + 0.039999999105930328369140625;
    float _904 = _900 + 0.039999999105930328369140625;
    float _905 = _901 + 0.039999999105930328369140625;
    vec4 _914 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _839, cbSceneParam._m0[86u].y * _840));
    float _917 = _914.x * TEXCOORD_5.z;
    float _918 = dot(vec3(_737, _738, _739), vec3(_819, _820, _821));
    float _921 = _918 * 2.0;
    float _925 = (_921 * _737) - _819;
    float _926 = (_921 * _738) - _820;
    float _927 = (_921 * _739) - _821;
    float _931 = abs(dot(vec3(_819, _820, _821), vec3(_737, _738, _739)));
    float _4251 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _933 = sqrt(_741);
    float _946 = exp2((_933 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_933 * 3.0));
    float _952 = (1.0 - _946) * ((_933 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _953 = _946 * _933;
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1320;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1045 = fma(_989, cbModelParam._m0[26u].z, fma(_985, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981));
        float _1049 = fma(_989, cbModelParam._m0[27u].z, fma(_985, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981));
        float _1053 = fma(_989, cbModelParam._m0[28u].z, fma(_985, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981));
        float _1078 = _981 + _737;
        float _1079 = _985 + _738;
        float _1080 = _989 + _739;
        float _1090 = fma(_1080, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1078)) - _1045;
        float _1091 = fma(_1080, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1078)) - _1049;
        float _1092 = fma(_1080, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1078)) - _1053;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1045 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1049 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[34u].z) + ((((((_1053 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1148 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1114.x + (-0.5));
        float _1150 = _1148 * (_1114.y + (-0.5));
        float _1151 = _1148 * (_1114.z + (-0.5));
        float _1158 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1121.x + (-0.5));
        float _1160 = _1158 * (_1121.y + (-0.5));
        float _1161 = _1158 * (_1121.z + (-0.5));
        float _1168 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1128.x + (-0.5));
        float _1170 = _1168 * (_1128.y + (-0.5));
        float _1171 = _1168 * (_1128.z + (-0.5));
        float _1178 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1135.x + (-0.5));
        float _1180 = _1178 * (_1135.y + (-0.5));
        float _1181 = _1178 * (_1135.z + (-0.5));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = _1149 * 0.5;
        float _1186 = _1159 * 0.5;
        float _1187 = _1169 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1202 = (dot(vec3(_737, _738, _739), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1212 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _4299 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1214 + 1.0))) + _1219) * _1182;
        float _1229 = _1150 * 0.5;
        float _1230 = _1160 * 0.5;
        float _1231 = _1170 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_737, _738, _739), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _4332 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1256 + 1.0))) + _1261) * _1183;
        float _1271 = _1151 * 0.5;
        float _1272 = _1161 * 0.5;
        float _1273 = _1171 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_737, _738, _739), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4365 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1298 + 1.0))) + _1303) * _1184;
        _1320 = _1151;
        _1322 = _1150;
        _1323 = _1149;
        _1324 = _1161;
        _1325 = _1160;
        _1326 = _1159;
        _1327 = _1171;
        _1328 = _1170;
        _1329 = _1169;
        _1330 = _1184;
        _1331 = _1183;
        _1332 = _1182;
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
    }
    else
    {
        _1320 = _1321;
        _1322 = _1321;
        _1323 = _1321;
        _1324 = _1321;
        _1325 = _1321;
        _1326 = _1321;
        _1327 = _1321;
        _1328 = _1321;
        _1329 = _1321;
        _1330 = _1321;
        _1331 = _1321;
        _1332 = _1321;
        _1333 = 0.0;
        _1334 = 0.0;
        _1335 = 0.0;
    }
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1364 = fma(_989, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _981));
        float _1368 = fma(_989, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _981));
        float _1372 = fma(_989, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _981));
        float _1395 = _981 + _737;
        float _1396 = _985 + _738;
        float _1397 = _989 + _739;
        float _1407 = fma(_1397, cbModelParam._m0[30u].z, fma(_1396, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1395)) - _1364;
        float _1408 = fma(_1397, cbModelParam._m0[31u].z, fma(_1396, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1395)) - _1368;
        float _1409 = fma(_1397, cbModelParam._m0[32u].z, fma(_1396, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1395)) - _1372;
        float _1413 = inversesqrt(dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409)));
        float _1426 = ((_1413 * _1407) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1364 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1427 = ((_1413 * _1408) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1368 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1413 * _1409) / cbModelParam._m0[35u].z) + ((((((_1372 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        float _1463 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1430.x + (-0.5));
        float _1465 = _1463 * (_1430.y + (-0.5));
        float _1466 = _1463 * (_1430.z + (-0.5));
        float _1473 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1437.x + (-0.5));
        float _1475 = _1473 * (_1437.y + (-0.5));
        float _1476 = _1473 * (_1437.z + (-0.5));
        float _1483 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1444.x + (-0.5));
        float _1485 = _1483 * (_1444.y + (-0.5));
        float _1486 = _1483 * (_1444.z + (-0.5));
        float _1493 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1451.x + (-0.5));
        float _1495 = _1493 * (_1451.y + (-0.5));
        float _1496 = _1493 * (_1451.z + (-0.5));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = _1464 * 0.5;
        float _1501 = _1474 * 0.5;
        float _1502 = _1484 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_737, _738, _739), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4428 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1527 + 1.0))) + _1532) * _1497;
        float _1542 = _1465 * 0.5;
        float _1543 = _1475 * 0.5;
        float _1544 = _1485 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_737, _738, _739), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4461 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1569 + 1.0))) + _1574) * _1498;
        float _1584 = _1466 * 0.5;
        float _1585 = _1476 * 0.5;
        float _1586 = _1486 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_737, _738, _739), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4472 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4483 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4494 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_1611 + 1.0))) + _1616) * _1499;
        _1633 = _1466;
        _1634 = _1465;
        _1635 = _1464;
        _1636 = _1476;
        _1637 = _1475;
        _1638 = _1474;
        _1639 = _1486;
        _1640 = _1485;
        _1641 = _1484;
        _1642 = _1499;
        _1643 = _1498;
        _1644 = _1497;
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
    }
    else
    {
        _1633 = _1321;
        _1634 = _1321;
        _1635 = _1321;
        _1636 = _1321;
        _1637 = _1321;
        _1638 = _1321;
        _1639 = _1321;
        _1640 = _1321;
        _1641 = _1321;
        _1642 = _1321;
        _1643 = _1321;
        _1644 = _1321;
        _1645 = 0.0;
        _1646 = 0.0;
        _1647 = 0.0;
    }
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1333)) + _1333;
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1334)) + _1334;
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1335)) + _1335;
    float _1680 = fma(_1659, cbSceneParam._m0[89u].z, fma(_1658, cbSceneParam._m0[89u].y, _1657 * cbSceneParam._m0[89u].x));
    float _1683 = fma(_1659, cbSceneParam._m0[90u].z, fma(_1658, cbSceneParam._m0[90u].y, _1657 * cbSceneParam._m0[90u].x));
    float _1686 = fma(_1659, cbSceneParam._m0[91u].z, fma(_1658, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1657));
    float _1701 = _925 * 0.5;
    float _1702 = _926 * 0.5;
    float _1703 = _927 * 0.5;
    float _1704 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1707 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1710 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1744;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1717 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1320, _1324, _1327, _1330));
        float _1721 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1322, _1325, _1328, _1331));
        float _1725 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1323, _1326, _1329, _1332));
        float _1732 = dot(vec4(cbModelParam._m0[39u]), vec4(_1701, _1702, _1703, 1.0));
        _1744 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1732) ? 0.0 : (isnan(0.0) ? _1732 : max(0.0, _1732))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1744 = 1.0;
    }
    float _1755;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1746 = dot(vec4(cbModelParam._m0[40u]), vec4(_1701, _1702, _1703, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1746) ? 0.0 : (isnan(0.0) ? _1746 : max(0.0, _1746))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1759 = (_1755 * cbModelParam._m0[1u].x) + (_1744 * (1.0 - cbModelParam._m0[1u].x));
    float _1769 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _741);
    float _1770 = isnan(_1769) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1769 : min(cbModelParam._m0[25u].z, _1769));
    float _1850;
    float _1852;
    float _1854;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1817 = fma(_989, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981)) + cbModelParam._m0[13u].w;
        float _1821 = fma(_989, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981)) + cbModelParam._m0[14u].w;
        float _1825 = fma(_989, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981)) + cbModelParam._m0[15u].w;
        float _1828 = fma(_927, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925));
        float _1831 = fma(_927, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925));
        float _1834 = fma(_927, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925));
        float _1862;
        if (_1828 > 0.0)
        {
            _1862 = abs((1.0 - _1817) / _1828);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1817 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1862 = frontier_phi_19_17_ladder;
        }
        float _2035;
        if (_1831 > 0.0)
        {
            _2035 = abs((1.0 - _1821) / _1831);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1821 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2035 = frontier_phi_28_24_ladder;
        }
        float _2330;
        if (_1834 > 0.0)
        {
            _2330 = abs((1.0 - _1825) / _1834);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1825 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2330 = frontier_phi_40_35_ladder;
        }
        float _2332 = isnan(_2035) ? _1862 : (isnan(_1862) ? _2035 : min(_1862, _2035));
        float _2333 = isnan(_2330) ? _2332 : (isnan(_2332) ? _2330 : min(_2332, _2330));
        float _2337 = (_2333 * _1828) + _1817;
        float _2338 = (_2333 * _1831) + _1821;
        float _2339 = (_2333 * _1834) + _1825;
        float _2340 = _2333 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2340;
        float _2344 = _2340 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 > _2344) || ((_2338 < _2342) || ((_2337 < _2342) || (_2337 > _2344))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2339, cbModelParam._m0[9u].z, fma(_2338, cbModelParam._m0[9u].y, _2337 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2339, cbModelParam._m0[10u].z, fma(_2338, cbModelParam._m0[10u].y, _2337 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2339, cbModelParam._m0[11u].z, fma(_2338, cbModelParam._m0[11u].y, _2337 * cbModelParam._m0[11u].x))), _1770);
            frontier_phi_18_40_ladder = _2484.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2484.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2484.x * cbModelParam._m0[1u].y;
        }
        _1850 = frontier_phi_18_40_ladder_2;
        _1852 = frontier_phi_18_40_ladder_1;
        _1854 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1838 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_925, _926, _927), _1770);
        _1850 = _1838.x * cbModelParam._m0[1u].y;
        _1852 = _1838.y * cbModelParam._m0[1u].y;
        _1854 = _1838.z * cbModelParam._m0[1u].y;
    }
    float _1858 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _741);
    float _1859 = isnan(_1858) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1858 : min(cbModelParam._m0[25u].w, _1858));
    float _1950;
    float _1952;
    float _1954;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1914 = fma(_989, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981)) + cbModelParam._m0[21u].w;
        float _1918 = fma(_989, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981)) + cbModelParam._m0[22u].w;
        float _1922 = fma(_989, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981)) + cbModelParam._m0[23u].w;
        float _1925 = fma(_927, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925));
        float _1928 = fma(_927, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925));
        float _1931 = fma(_927, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925));
        float _2040;
        if (_1925 > 0.0)
        {
            _2040 = abs((1.0 - _1914) / _1925);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1914 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2040 = frontier_phi_30_26_ladder;
        }
        float _2357;
        if (_1928 > 0.0)
        {
            _2357 = abs((1.0 - _1918) / _1928);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1918 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2357 = frontier_phi_42_37_ladder;
        }
        float _2695;
        if (_1931 > 0.0)
        {
            _2695 = abs((1.0 - _1922) / _1931);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1922 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2695 = frontier_phi_52_49_ladder;
        }
        float _2697 = isnan(_2357) ? _2040 : (isnan(_2040) ? _2357 : min(_2040, _2357));
        float _2698 = isnan(_2695) ? _2697 : (isnan(_2697) ? _2695 : min(_2697, _2695));
        float _2702 = (_2698 * _1925) + _1914;
        float _2703 = (_2698 * _1928) + _1918;
        float _2704 = (_2698 * _1931) + _1922;
        float _2705 = _2698 * 9.9999997473787516355514526367188e-05;
        float _2706 = (-1.0) - _2705;
        float _2708 = _2705 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2704 > _2708) || ((_2704 < _2706) || ((_2703 > _2708) || ((_2703 < _2706) || ((_2702 < _2706) || (_2702 > _2708))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2826 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2704, cbModelParam._m0[17u].z, fma(_2703, cbModelParam._m0[17u].y, _2702 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2704, cbModelParam._m0[18u].z, fma(_2703, cbModelParam._m0[18u].y, _2702 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2704, cbModelParam._m0[19u].z, fma(_2703, cbModelParam._m0[19u].y, _2702 * cbModelParam._m0[19u].x))), _1859);
            frontier_phi_27_52_ladder = _2826.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2826.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2826.x * cbModelParam._m0[1u].z;
        }
        _1950 = frontier_phi_27_52_ladder_2;
        _1952 = frontier_phi_27_52_ladder_1;
        _1954 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1934 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_925, _926, _927), _1859);
        _1950 = _1934.x * cbModelParam._m0[1u].z;
        _1952 = _1934.y * cbModelParam._m0[1u].z;
        _1954 = _1934.z * cbModelParam._m0[1u].z;
    }
    float _1967 = (((_952 * _902) + _953) * _917) * ((cbModelParam._m0[1u].w * (_1950 - _1850)) + _1850);
    float _1969 = (((_952 * _904) + _953) * _917) * ((cbModelParam._m0[1u].w * (_1952 - _1852)) + _1852);
    float _1971 = (((_952 * _905) + _953) * _917) * ((cbModelParam._m0[1u].w * (_1954 - _1854)) + _1854);
    float _1974 = fma(_1971, cbSceneParam._m0[89u].z, fma(_1969, cbSceneParam._m0[89u].y, _1967 * cbSceneParam._m0[89u].x));
    float _1977 = fma(_1971, cbSceneParam._m0[90u].z, fma(_1969, cbSceneParam._m0[90u].y, _1967 * cbSceneParam._m0[90u].x));
    float _1980 = fma(_1971, cbSceneParam._m0[91u].z, fma(_1969, cbSceneParam._m0[91u].y, _1967 * cbSceneParam._m0[91u].x));
    float _2014 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2018 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2022 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2027 = _2014 / _2026;
    float _2028 = _2018 / _2026;
    float _2029 = _2022 / _2026;
    float _2176;
    float _2177;
    float _2178;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2056 = ((uint(_2029 > cbSceneParam._m0[59u].y) + uint(_2029 > cbSceneParam._m0[59u].x)) + uint(_2029 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2057 = _2056 + 43u;
        uint _2065 = _2056 + 44u;
        uint _2073 = _2056 + 45u;
        uint _2081 = _2056 + 46u;
        float _2092 = fma(_2026, cbSceneParam._m0[_2057].w, fma(_2022, cbSceneParam._m0[_2057].z, fma(_2018, cbSceneParam._m0[_2057].y, _2014 * cbSceneParam._m0[_2057].x)));
        float _2096 = fma(_2026, cbSceneParam._m0[_2065].w, fma(_2022, cbSceneParam._m0[_2065].z, fma(_2018, cbSceneParam._m0[_2065].y, _2014 * cbSceneParam._m0[_2065].x)));
        float _2104 = fma(_2026, cbSceneParam._m0[_2081].w, fma(_2022, cbSceneParam._m0[_2081].z, fma(_2018, cbSceneParam._m0[_2081].y, _2014 * cbSceneParam._m0[_2081].x)));
        float _2109 = cbSceneParam._m0[33u].z * _2104;
        float _2111 = cbSceneParam._m0[33u].w * _2104;
        float _2114 = fma(_2026, cbSceneParam._m0[_2073].w, fma(_2022, cbSceneParam._m0[_2073].z, fma(_2018, cbSceneParam._m0[_2073].y, _2014 * cbSceneParam._m0[_2073].x))) / _2104;
        float _2162 = (cbSceneParam._m0[33u].x - sqrt(((_2028 * _2028) + (_2027 * _2027)) + (_2029 * _2029))) * cbSceneParam._m0[33u].y;
        float _4620 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2169 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2109 + _2092) / _2104, (_2111 + _2096) / _2104), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2111 + _2092) / _2104, (_2096 - _2109) / _2104), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2092 - _2109) / _2104, (_2096 - _2111) / _2104), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2092 - _2111) / _2104, (_2109 + _2096) / _2104), _2114), 0.0)).x), vec4(0.25)));
        _2176 = 1.0 - (_2169 * cbSceneParam._m0[34u].x);
        _2177 = 1.0 - (_2169 * cbSceneParam._m0[34u].y);
        _2178 = 1.0 - (_2169 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2176 = 1.0;
        _2177 = 1.0;
        _2178 = 1.0;
    }
    float _2242;
    float _2244;
    float _2246;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2230 = fma(_2026, cbSceneParam._m0[63u].w, fma(_2022, cbSceneParam._m0[63u].z, fma(_2018, cbSceneParam._m0[63u].y, _2014 * cbSceneParam._m0[63u].x)));
        float _2231 = fma(_2026, cbSceneParam._m0[60u].w, fma(_2022, cbSceneParam._m0[60u].z, fma(_2018, cbSceneParam._m0[60u].y, _2014 * cbSceneParam._m0[60u].x))) / _2230;
        float _2232 = fma(_2026, cbSceneParam._m0[61u].w, fma(_2022, cbSceneParam._m0[61u].z, fma(_2018, cbSceneParam._m0[61u].y, _2014 * cbSceneParam._m0[61u].x))) / _2230;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2231 >= cbSceneParam._m0[64u].x) && (_2232 >= cbSceneParam._m0[64u].y)) && (_2231 <= cbSceneParam._m0[64u].z)) && (_2232 <= cbSceneParam._m0[64u].w))
        {
            float _2370 = fma(_2026, cbSceneParam._m0[62u].w, fma(_2022, cbSceneParam._m0[62u].z, fma(_2018, cbSceneParam._m0[62u].y, _2014 * cbSceneParam._m0[62u].x))) / _2230;
            float _2374 = isnan(cbSceneParam._m0[41u].w) ? _2370 : (isnan(_2370) ? cbSceneParam._m0[41u].w : max(_2370, cbSceneParam._m0[41u].w));
            float _2417 = (cbSceneParam._m0[33u].x - sqrt(((_2028 * _2028) + (_2027 * _2027)) + (_2029 * _2029))) * cbSceneParam._m0[33u].y;
            float _4636 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
            float _2424 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2231, cbSceneParam._m0[33u].w + _2232), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2231, _2232 - cbSceneParam._m0[33u].z), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2231 - cbSceneParam._m0[33u].z, _2232 - cbSceneParam._m0[33u].w), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2231 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2232), _2374), 0.0)).x), vec4(0.25)));
            float _2428 = 1.0 - (_2424 * cbSceneParam._m0[34u].x);
            float _2429 = 1.0 - (_2424 * cbSceneParam._m0[34u].y);
            float _2430 = 1.0 - (_2424 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2429) ? _2177 : (isnan(_2177) ? _2429 : min(_2177, _2429));
            frontier_phi_39_38_ladder_1 = isnan(_2428) ? _2176 : (isnan(_2176) ? _2428 : min(_2176, _2428));
            frontier_phi_39_38_ladder_2 = isnan(_2430) ? _2178 : (isnan(_2178) ? _2430 : min(_2178, _2430));
        }
        else
        {
            frontier_phi_39_38_ladder = _2177;
            frontier_phi_39_38_ladder_1 = _2176;
            frontier_phi_39_38_ladder_2 = _2178;
        }
        _2242 = frontier_phi_39_38_ladder_1;
        _2244 = frontier_phi_39_38_ladder;
        _2246 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2242 = _2176;
        _2244 = _2177;
        _2246 = _2178;
    }
    uvec4 _2251 = floatBitsToUint(cbInstanceData._m0[_877 + 5u]);
    uint _2253 = _2251.x * 14u;
    uint _2254 = _2253 + 13u;
    float _2261 = _917 + (-1.0);
    float _2266 = (cbLight._m0[_2254].x * _2261) + 1.0;
    float _2267 = (cbLight._m0[_2254].y * _2261) + 1.0;
    float _2268 = (cbLight._m0[_2254].z * _2261) + 1.0;
    float _2269 = (cbLight._m0[_2254].w * _2261) + 1.0;
    uint _2270 = _2253 + 5u;
    float _2276 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
    uint _2280 = _2253 + 4u;
    float _2289 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
    uint _2293 = _2253 | 1u;
    float _2304 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_737, _738, _739));
    float _2307 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_737, _738, _739));
    float _4672 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _4683 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2312 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * 0.3183098733425140380859375;
    float _2314 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * 0.3183098733425140380859375;
    float _2321 = ((cbLight._m0[_2270].x * _2276) * _2314) + (((cbLight._m0[_2280].x * _2242) * _2289) * _2312);
    float _2322 = ((_2276 * cbLight._m0[_2270].y) * _2314) + (((cbLight._m0[_2280].y * _2244) * _2289) * _2312);
    float _2323 = ((_2276 * cbLight._m0[_2270].z) * _2314) + (((cbLight._m0[_2280].z * _2246) * _2289) * _2312);
    uvec4 _2327 = floatBitsToUint(cbLight._m0[_2253 + 12u]);
    bool _2329 = _2327.x == 0u;
    float _2431;
    float _2433;
    float _2435;
    if (_2329)
    {
        _2431 = _2321;
        _2433 = _2322;
        _2435 = _2323;
    }
    else
    {
        uint _2439 = _2253 + 6u;
        float _2455 = (dot(vec3(cbLight._m0[_2253 + 2u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2456 = _2455 * _2455;
        float _4694 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2457 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2458 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2431 = (((cbLight._m0[_2439].x * 0.3183098733425140380859375) * _2457) * _2458) + _2321;
        _2433 = (((cbLight._m0[_2439].y * 0.3183098733425140380859375) * _2457) * _2458) + _2322;
        _2435 = (((cbLight._m0[_2439].z * 0.3183098733425140380859375) * _2457) * _2458) + _2323;
    }
    bool _2438 = _2327.y == 0u;
    float _2493;
    float _2495;
    float _2497;
    if (_2438)
    {
        _2493 = _2431;
        _2495 = _2433;
        _2497 = _2435;
    }
    else
    {
        uint _2666 = _2253 + 7u;
        float _2682 = (dot(vec3(cbLight._m0[_2253 + 3u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2683 = _2682 * _2682;
        float _4710 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2684 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2685 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2493 = (((cbLight._m0[_2666].x * 0.3183098733425140380859375) * _2684) * _2685) + _2431;
        _2495 = (((cbLight._m0[_2666].y * 0.3183098733425140380859375) * _2684) * _2685) + _2433;
        _2497 = (((cbLight._m0[_2666].z * 0.3183098733425140380859375) * _2684) * _2685) + _2435;
    }
    uint _2500 = _2253 + 8u;
    float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _741) * 0.949999988079071044921875);
    float _2514 = _2513 * _2513;
    float _2515 = cbLight._m0[_2253].x + _819;
    float _2516 = cbLight._m0[_2253].y + _820;
    float _2517 = cbLight._m0[_2253].z + _821;
    float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
    float _2522 = _2521 * _2515;
    float _2523 = _2521 * _2516;
    float _2524 = _2521 * _2517;
    float _2525 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2253].xyz));
    float _4726 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _4737 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _2529 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2530 = dot(vec3(_737, _738, _739), vec3(_2522, _2523, _2524));
    float _4748 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2534 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2522, _2523, _2524));
    float _4759 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2538 = _2514 * _2514;
    float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
    float _2550 = exp2(log2(1.0 - (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) * 5.0);
    float _2551 = 0.959999978542327880859375 - _899;
    float _2553 = 0.959999978542327880859375 - _900;
    float _2554 = 0.959999978542327880859375 - _901;
    float _2561 = 1.0 - _2514;
    float _2572 = (0.5 / (((_2529 * ((_2528 * _2561) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2561) + _2514) * _2528))) * _2528;
    float _4770 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2574 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
    uint _2588 = _2253 + 9u;
    float _2599 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _741) * 0.949999988079071044921875);
    float _2600 = _2599 * _2599;
    float _2601 = cbLight._m0[_2293].x + _819;
    float _2602 = cbLight._m0[_2293].y + _820;
    float _2603 = cbLight._m0[_2293].z + _821;
    float _2607 = inversesqrt(dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603)));
    float _2608 = _2607 * _2601;
    float _2609 = _2607 * _2602;
    float _2610 = _2607 * _2603;
    float _2611 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2293].xyz));
    float _4781 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2614 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
    float _2615 = dot(vec3(_737, _738, _739), vec3(_2608, _2609, _2610));
    float _4792 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2618 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
    float _2619 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2608, _2609, _2610));
    float _4803 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2623 = _2600 * _2600;
    float _2627 = ((_2618 * _2618) * (_2623 + (-1.0))) + 1.0;
    float _2634 = exp2(log2(1.0 - (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) * 5.0);
    float _2641 = 1.0 - _2600;
    float _2651 = (0.5 / (((_2529 * ((_2614 * _2641) + _2600)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2641) + _2600) * _2614))) * _2614;
    float _4814 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2653 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2623 / ((_2627 * _2627) * 3.141590118408203125));
    float _2663 = (((((_2634 * _2551) + _902) * cbLight._m0[_2588].x) * _2653) * _2276) + ((((cbLight._m0[_2500].x * _2242) * ((_2550 * _2551) + _902)) * _2574) * _2289);
    float _2664 = (((((_2634 * _2553) + _904) * cbLight._m0[_2588].y) * _2653) * _2276) + ((((cbLight._m0[_2500].y * _2244) * ((_2550 * _2553) + _904)) * _2574) * _2289);
    float _2665 = (((((_2634 * _2554) + _905) * cbLight._m0[_2588].z) * _2653) * _2276) + ((((cbLight._m0[_2500].z * _2246) * ((_2550 * _2554) + _905)) * _2574) * _2289);
    float _2721;
    float _2723;
    float _2725;
    if (_2329)
    {
        _2721 = _2663;
        _2723 = _2664;
        _2725 = _2665;
    }
    else
    {
        uint _2727 = _2253 + 2u;
        uint _2731 = _2253 + 10u;
        float _2745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2727].w)) * _741) * 0.949999988079071044921875);
        float _2746 = _2745 * _2745;
        float _2747 = cbLight._m0[_2727].x + _819;
        float _2748 = cbLight._m0[_2727].y + _820;
        float _2749 = cbLight._m0[_2727].z + _821;
        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
        float _2754 = _2753 * _2747;
        float _2755 = _2753 * _2748;
        float _2756 = _2753 * _2749;
        float _2757 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2727].xyz));
        float _4825 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2761 = dot(vec3(_737, _738, _739), vec3(_2754, _2755, _2756));
        float _4836 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2765 = dot(vec3(cbLight._m0[_2727].xyz), vec3(_2754, _2755, _2756));
        float _4847 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2769 = _2746 * _2746;
        float _2773 = ((_2764 * _2764) * (_2769 + (-1.0))) + 1.0;
        float _2780 = exp2(log2(1.0 - (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) * 5.0);
        float _2787 = 1.0 - _2746;
        float _2797 = (0.5 / (((_2529 * ((_2760 * _2787) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2787) + _2746) * _2760))) * _2760;
        float _4858 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2799 = (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2769 / ((_2773 * _2773) * 3.141590118408203125));
        float _2800 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2721 = (((((_2780 * _2551) + _902) * cbLight._m0[_2731].x) * _2799) * _2800) + _2663;
        _2723 = (((((_2780 * _2553) + _904) * cbLight._m0[_2731].y) * _2799) * _2800) + _2664;
        _2725 = (((((_2780 * _2554) + _905) * cbLight._m0[_2731].z) * _2799) * _2800) + _2665;
    }
    float _2831;
    float _2833;
    float _2835;
    if (_2438)
    {
        _2831 = _2721;
        _2833 = _2723;
        _2835 = _2725;
    }
    else
    {
        uint _2842 = _2253 + 3u;
        uint _2846 = _2253 + 11u;
        float _2860 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2842].w)) * _741) * 0.949999988079071044921875);
        float _2861 = _2860 * _2860;
        float _2862 = cbLight._m0[_2842].x + _819;
        float _2863 = cbLight._m0[_2842].y + _820;
        float _2864 = cbLight._m0[_2842].z + _821;
        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
        float _2869 = _2868 * _2862;
        float _2870 = _2868 * _2863;
        float _2871 = _2868 * _2864;
        float _2872 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2842].xyz));
        float _4874 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2875 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
        float _2876 = dot(vec3(_737, _738, _739), vec3(_2869, _2870, _2871));
        float _4885 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2879 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
        float _2880 = dot(vec3(cbLight._m0[_2842].xyz), vec3(_2869, _2870, _2871));
        float _4896 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2884 = _2861 * _2861;
        float _2888 = ((_2879 * _2879) * (_2884 + (-1.0))) + 1.0;
        float _2895 = exp2(log2(1.0 - (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) * 5.0);
        float _2902 = 1.0 - _2861;
        float _2912 = (0.5 / (((_2529 * ((_2875 * _2902) + _2861)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2902) + _2861) * _2875))) * _2875;
        float _4907 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2914 = (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2884 / ((_2888 * _2888) * 3.141590118408203125));
        float _2915 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2831 = (((((_2895 * _2551) + _902) * cbLight._m0[_2846].x) * _2914) * _2915) + _2721;
        _2833 = (((((_2895 * _2553) + _904) * cbLight._m0[_2846].y) * _2914) * _2915) + _2723;
        _2835 = (((((_2895 * _2554) + _905) * cbLight._m0[_2846].z) * _2914) * _2915) + _2725;
    }
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    if (_2251.y == 0u)
    {
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.x;
        uint _2948 = uint((float(_2936.y) * floor(float(uint(cbSceneParam._m0[85u].y * _840) / _2937))) + floor(float(uint(cbSceneParam._m0[85u].x * _839) / _2937)));
        float _2958 = (log2(_2029 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2959 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        uint _2962 = uint(isnan(14.0) ? _2959 : (isnan(_2959) ? 14.0 : min(_2959, 14.0)));
        uvec4 _2967 = texelFetch(g_lightClusterGridBuffer, int(((_2962 << 2u) + (_2948 << 6u)) >> 2u));
        uint _2968 = _2967.x;
        uint _2969 = _2936.z;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((((1u << ((_2969 >> 4u) & 15u)) + 4294967295u) & _2968) == 0u) || ((_2969 & 240u) == 0u))
        {
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
        }
        else
        {
            float _3050;
            float _3052;
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            uint _3207 = 0u;
            uint _3216;
            bool _3217;
            for (;;)
            {
                _3216 = texelFetch(g_lightClassification, int((((_2962 << 5u) + (_2948 << 9u)) + (_3207 << 2u)) >> 2u)).x;
                _3217 = _3216 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3217)
                {
                    frontier_phi_73_pred = _3206;
                    frontier_phi_73_pred_1 = _3205;
                    frontier_phi_73_pred_2 = _3204;
                    frontier_phi_73_pred_3 = _3203;
                    frontier_phi_73_pred_4 = _3202;
                    frontier_phi_73_pred_5 = _3201;
                }
                else
                {
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    uint _3352;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3204;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3216;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    for (;;)
                    {
                        uint _3356 = uint(findLSB(_3352)) + (_3207 << 5u);
                        uint _3353 = (_3352 + 4294967295u) & _3352;
                        uint _3358 = _3356 * 48u;
                        vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 3u)).x));
                        uint _3378 = (_3356 * 48u) + 4u;
                        vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3378)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 3u)).x));
                        uint _3397 = (_3356 * 48u) + 8u;
                        vec3 _3408 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x));
                        float _3412 = _3372.x - _2027;
                        float _3413 = _3372.y - _2028;
                        float _3414 = _3372.z - _2029;
                        float _3415 = dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414));
                        float _3418 = inversesqrt(_3415);
                        float _3419 = _3418 * _3412;
                        float _3420 = _3418 * _3413;
                        float _3421 = _3418 * _3414;
                        float _3422 = dot(vec3(_858, _861, _864), vec3(_3419, _3420, _3421));
                        float _3427 = 1.0 - (_3415 * _3372.w);
                        float _4933 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3429 = sqrt(_3415) * _3391.w;
                        float _3431 = 1.39999997615814208984375 / (_3429 + 1.39999997615814208984375);
                        float _3432 = _3431 * _3431;
                        float _3435 = ((1.0 - _3432) * _3422) + _3432;
                        float _3438 = _3429 * _3429;
                        float _3442 = ((isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0))) * _3428) / ((_3438 * 0.699999988079071044921875) + 1.0);
                        float _3446 = (-0.0) - _2027;
                        float _3447 = (-0.0) - _2028;
                        float _3448 = (-0.0) - _2029;
                        float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                        float _3453 = _3452 * _3446;
                        float _3454 = _3452 * _3447;
                        float _3455 = _3452 * _3448;
                        float _3462 = exp2(log2(1.0 / ((_3438 * 3.5) + 5.0)) * 0.25);
                        float _3463 = 1.0 - _933;
                        float _3470 = sqrt(1.0 - ((1.0 - (_3463 * _3463)) * (1.0 - (_3462 * _3462))));
                        float _3471 = _3470 * _3470;
                        float _3472 = _3471 * _3471;
                        float _3473 = _3453 + _3419;
                        float _3474 = _3454 + _3420;
                        float _3475 = _3455 + _3421;
                        float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                        float _3483 = dot(vec3(_858, _861, _864), vec3(_3453, _3454, _3455));
                        float _4949 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3486 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                        float _3487 = dot(vec3(_858, _861, _864), vec3(_3479 * _3473, _3479 * _3474, _3479 * _3475));
                        float _4960 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3490 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                        float _3494 = ((_3490 * _3490) * (_3472 + (-1.0))) + 1.0;
                        float _3495 = _3431 * _3471;
                        float _3496 = _3495 * _3495;
                        float _3499 = ((1.0 - _3496) * _3422) + _3496;
                        float _4971 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3500 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                        float _3501 = 1.0 - _3471;
                        float _3511 = (0.5 / (((_3500 * ((_3486 * _3501) + _3471)) + 9.9999999392252902907785028219223e-09) + (((_3500 * _3501) + _3471) * _3486))) * _3500;
                        float _4982 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3522 = (((_3472 * 3.1415927410125732421875) * (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0)))) / ((_3494 * _3494) * ((_3438 * 2.1991131305694580078125) + 3.141590118408203125))) * _3428;
                        _3276 = (_3442 * _3391.x) + _3349;
                        _3277 = (_3442 * _3391.y) + _3350;
                        _3278 = (_3442 * _3391.z) + _3351;
                        _3273 = (_3522 * _3408.x) + _3346;
                        _3274 = (_3522 * _3408.y) + _3347;
                        _3275 = (_3522 * _3408.z) + _3348;
                        if (_3353 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3276;
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3353;
                        }
                    }
                    frontier_phi_73_pred = _3278;
                    frontier_phi_73_pred_1 = _3277;
                    frontier_phi_73_pred_2 = _3276;
                    frontier_phi_73_pred_3 = _3275;
                    frontier_phi_73_pred_4 = _3274;
                    frontier_phi_73_pred_5 = _3273;
                }
                _3060 = frontier_phi_73_pred;
                _3058 = frontier_phi_73_pred_1;
                _3056 = frontier_phi_73_pred_2;
                _3054 = frontier_phi_73_pred_3;
                _3052 = frontier_phi_73_pred_4;
                _3050 = frontier_phi_73_pred_5;
                uint _3208 = _3207 + 1u;
                if (_3208 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3201 = _3050;
                    _3202 = _3052;
                    _3203 = _3054;
                    _3204 = _3056;
                    _3205 = _3058;
                    _3206 = _3060;
                    _3207 = _3208;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
        }
        uvec4 _3063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3064 = _3063.z;
        uint _3066 = (_3064 >> 8u) & 15u;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        if (((4294967295u << _3066) & _2968) == 0u)
        {
            _3169 = _3049;
            _3171 = _3051;
            _3173 = _3053;
            _3175 = _3055;
            _3177 = _3057;
            _3179 = _3059;
        }
        else
        {
            float _3194 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
            float _3195 = _3194 * _2027;
            float _3196 = _3194 * _2028;
            float _3197 = _3194 * _2029;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3066 < ((_3064 >> 12u) & 15u))
            {
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3329 = _3049;
                float _3330 = _3051;
                float _3331 = _3053;
                float _3332 = _3055;
                float _3333 = _3057;
                float _3334 = _3059;
                uint _3335 = _3066;
                uint _3344;
                bool _3345;
                for (;;)
                {
                    _3344 = texelFetch(g_lightClassification, int((((_2962 << 5u) + (_2948 << 9u)) + (_3335 << 2u)) >> 2u)).x;
                    _3345 = _3344 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3345)
                    {
                        frontier_phi_84_pred = _3333;
                        frontier_phi_84_pred_1 = _3332;
                        frontier_phi_84_pred_2 = _3331;
                        frontier_phi_84_pred_3 = _3330;
                        frontier_phi_84_pred_4 = _3329;
                        frontier_phi_84_pred_5 = _3334;
                    }
                    else
                    {
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3549 = _3329;
                        float _3550 = _3330;
                        float _3551 = _3331;
                        float _3552 = _3332;
                        float _3553 = _3333;
                        float _3554 = _3334;
                        uint _3555 = _3344;
                        uint _3556;
                        vec4 _3581;
                        float _3582;
                        vec4 _3597;
                        vec3 _3609;
                        vec4 _3624;
                        vec4 _3640;
                        float _3687;
                        bool _3688;
                        for (;;)
                        {
                            uint _3566 = ((_3335 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3555));
                            _3556 = (_3555 + 4294967295u) & _3555;
                            uint _3568 = _3566 * 40u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            _3582 = _3581.w;
                            uint _3584 = (_3566 * 40u) + 4u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3566 * 40u) + 8u;
                            _3609 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x));
                            uint _3611 = (_3566 * 40u) + 16u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3627 = (_3566 * 40u) + 20u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3643 = (_3566 * 40u) + 24u;
                            vec4 _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3662 = (_3566 * 40u) + 28u;
                            vec4 _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            _3687 = fma(_2029, _3675.z, fma(_2028, _3675.y, _3675.x * _2027)) + _3675.w;
                            _3688 = !((fma(_2029, _3656.z, fma(_2028, _3656.y, _3656.x * _2027)) + _3656.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3688)
                            {
                                float _3715 = _3581.x - _2027;
                                float _3716 = _3581.y - _2028;
                                float _3717 = _3581.z - _2029;
                                float _3718 = dot(vec3(_3715, _3716, _3717), vec3(_3715, _3716, _3717));
                                float _3721 = inversesqrt(_3718);
                                float _3722 = _3721 * _3715;
                                float _3723 = _3721 * _3716;
                                float _3724 = _3721 * _3717;
                                float _3728 = 1.0 - (_3718 / (_3582 * _3582));
                                float _4993 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3733 = sqrt(_3718) * _3597.w;
                                float _3735 = 1.39999997615814208984375 / (_3733 + 1.39999997615814208984375);
                                float _3736 = _3735 * _3735;
                                float _3739 = ((1.0 - _3736) * dot(vec3(_3722, _3723, _3724), vec3(_858, _861, _864))) + _3736;
                                float _3742 = _3733 * _3733;
                                float _3746 = (fma(_2029, _3624.z, fma(_2028, _3624.y, _3624.x * _2027)) + _3624.w) / _3687;
                                float _3747 = (fma(_2029, _3640.z, fma(_2028, _3640.y, _3640.x * _2027)) + _3640.w) / _3687;
                                float _3751 = 1.0 - dot(vec2(_3746, _3747), vec2(_3746, _3747));
                                float _5009 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3752 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3753 = _3752 * (((isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0))) * _3729) / ((_3742 * 0.699999988079071044921875) + 1.0));
                                float _3765 = exp2(log2(1.0 / ((_3742 * 3.5) + 5.0)) * 0.25);
                                float _3766 = 1.0 - _933;
                                float _3773 = sqrt(1.0 - ((1.0 - (_3766 * _3766)) * (1.0 - (_3765 * _3765))));
                                float _3774 = _3773 * _3773;
                                float _3775 = _3774 * _3774;
                                float _3776 = _3722 - _3195;
                                float _3777 = _3723 - _3196;
                                float _3778 = _3724 - _3197;
                                float _3782 = inversesqrt(dot(vec3(_3776, _3777, _3778), vec3(_3776, _3777, _3778)));
                                float _3786 = dot(vec3(_858, _861, _864), vec3((-0.0) - _3195, (-0.0) - _3196, (-0.0) - _3197));
                                float _5020 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3789 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3790 = dot(vec3(_858, _861, _864), vec3(_3782 * _3776, _3782 * _3777, _3782 * _3778));
                                float _5031 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3793 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3797 = ((_3793 * _3793) * (_3775 + (-1.0))) + 1.0;
                                float _3798 = _3735 * _3774;
                                float _3799 = _3798 * _3798;
                                float _3805 = ((1.0 - _3799) * dot(vec3(_858, _861, _864), vec3(_3722, _3723, _3724))) + _3799;
                                float _5042 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3806 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                                float _3807 = 1.0 - _3774;
                                float _3817 = (0.5 / (((_3806 * ((_3789 * _3807) + _3774)) + 9.9999999392252902907785028219223e-09) + (((_3806 * _3807) + _3774) * _3789))) * _3806;
                                float _5053 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3827 = (_3752 * _3729) * (((_3775 * 3.1415927410125732421875) * (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0)))) / ((_3797 * _3797) * ((_3742 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3753 * _3597.y;
                                frontier_phi_90_pred_1 = _3753 * _3597.x;
                                frontier_phi_90_pred_2 = _3827 * _3609.z;
                                frontier_phi_90_pred_3 = _3827 * _3609.y;
                                frontier_phi_90_pred_4 = _3827 * _3609.x;
                                frontier_phi_90_pred_5 = _3753 * _3597.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3835 = frontier_phi_90_pred;
                            _3834 = frontier_phi_90_pred_1;
                            _3833 = frontier_phi_90_pred_2;
                            _3832 = frontier_phi_90_pred_3;
                            _3831 = frontier_phi_90_pred_4;
                            _3836 = frontier_phi_90_pred_5;
                            _3539 = _3834 + _3552;
                            _3540 = _3835 + _3553;
                            _3541 = _3836 + _3554;
                            _3536 = _3831 + _3549;
                            _3537 = _3832 + _3550;
                            _3538 = _3833 + _3551;
                            if (_3556 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3556;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3540;
                        frontier_phi_84_pred_1 = _3539;
                        frontier_phi_84_pred_2 = _3538;
                        frontier_phi_84_pred_3 = _3537;
                        frontier_phi_84_pred_4 = _3536;
                        frontier_phi_84_pred_5 = _3541;
                    }
                    _3178 = frontier_phi_84_pred;
                    _3176 = frontier_phi_84_pred_1;
                    _3174 = frontier_phi_84_pred_2;
                    _3172 = frontier_phi_84_pred_3;
                    _3170 = frontier_phi_84_pred_4;
                    _3180 = frontier_phi_84_pred_5;
                    uint _3336 = _3335 + 1u;
                    if (_3336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3329 = _3170;
                        _3330 = _3172;
                        _3331 = _3174;
                        _3332 = _3176;
                        _3333 = _3178;
                        _3334 = _3180;
                        _3335 = _3336;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3180;
                frontier_phi_65_66_ladder_1 = _3176;
                frontier_phi_65_66_ladder_2 = _3178;
                frontier_phi_65_66_ladder_3 = _3172;
                frontier_phi_65_66_ladder_4 = _3170;
                frontier_phi_65_66_ladder_5 = _3174;
            }
            else
            {
                frontier_phi_65_66_ladder = _3059;
                frontier_phi_65_66_ladder_1 = _3055;
                frontier_phi_65_66_ladder_2 = _3057;
                frontier_phi_65_66_ladder_3 = _3051;
                frontier_phi_65_66_ladder_4 = _3049;
                frontier_phi_65_66_ladder_5 = _3053;
            }
            _3169 = frontier_phi_65_66_ladder_4;
            _3171 = frontier_phi_65_66_ladder_3;
            _3173 = frontier_phi_65_66_ladder_5;
            _3175 = frontier_phi_65_66_ladder_1;
            _3177 = frontier_phi_65_66_ladder_2;
            _3179 = frontier_phi_65_66_ladder;
        }
        float _3184 = isnan(1.0) ? _917 : (isnan(_917) ? 1.0 : min(_917, 1.0));
        _2980 = (_3184 * _3175) + _2493;
        _2982 = (_3184 * _3177) + _2495;
        _2984 = (_3184 * _3179) + _2497;
        _2986 = ((_3169 * _902) * _3184) + _2831;
        _2988 = ((_3171 * _904) * _3184) + _2833;
        _2990 = ((_3173 * _905) * _3184) + _2835;
    }
    else
    {
        _2980 = _2493;
        _2982 = _2495;
        _2984 = _2497;
        _2986 = _2831;
        _2988 = _2833;
        _2990 = _2835;
    }
    float _5069 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _5080 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _5091 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _5102 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3008 = ((isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_2980 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _917))) + ((_2986 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1759)) * cbPerFrame._m0[3u].x);
    float _3009 = ((isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0))) * (_2982 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _917))) + ((_2988 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1759)) * cbPerFrame._m0[3u].x);
    float _3010 = ((isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0))) * (_2984 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _917))) + ((_2990 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1759)) * cbPerFrame._m0[3u].x);
    float _3015 = cbInstanceData._m0[_877 + 6u].w * (isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0)));
    float _3020 = _839 / cbSceneParam._m0[86u].x;
    float _3021 = _840 / cbSceneParam._m0[86u].y;
    vec4 _3035 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3020, _3021, (log2((isnan(cbSceneParam._m0[77u].w) ? _761 : (isnan(_761) ? cbSceneParam._m0[77u].w : min(_761, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3037 = _3035.x;
    float _3038 = _3035.y;
    float _3039 = _3035.z;
    float _3040 = _3035.w;
    float _3111;
    float _3113;
    float _3115;
    float _3117;
    if (_761 > cbSceneParam._m0[78u].w)
    {
        float _3074 = isnan(_761) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _761 : min(cbSceneParam._m0[80u].w, _761));
        float _3075 = _3074 / _761;
        float _3086 = _3075 * _812;
        float _3087 = _813 * _3075;
        float _3088 = (-0.0) - _3087;
        float _3089 = _3075 * _814;
        float _3091 = (cbSceneParam._m0[77u].w * _3088) / _3074;
        float _3092 = _3091 + cbSceneParam._m0[79u].w;
        float _3093 = cbSceneParam._m0[79u].w - _3087;
        float _3099 = sqrt(((_3086 * _3086) + (_3087 * _3087)) + (_3089 * _3089));
        float _3102 = (1.0 - (cbSceneParam._m0[77u].w / _3074)) * _3099;
        float _3107 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3109 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3286;
        if (abs((_3088 - _3091) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3286 = ((((_3092 > 0.0) ? exp2(_3107 * _3092) : (2.0 - exp2(_3109 * _3092))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3102;
        }
        else
        {
            float _3230 = 1.0 / cbSceneParam._m0[80u].x;
            float _3231 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : max(_3092, _3093));
            float _3232 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : min(_3092, _3093));
            float _3241 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : min(_3231, 0.0));
            float _3242 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : min(_3232, 0.0));
            _3286 = ((abs(_3099 / _3088) * cbSceneParam._m0[80u].y) * ((((_3241 - _3242) * 2.0) - ((exp2(_3107 * (isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0)))) - exp2(_3107 * (isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))))) * _3230)) - ((exp2(_3109 * _3241) - exp2(_3109 * _3242)) * _3230))) + (_3102 * cbSceneParam._m0[80u].z);
        }
        vec4 _3288 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3020, _3021, 1.0), 0.0);
        float _3297 = exp2((_3286 * (-1.44269502162933349609375)) * (1.0 - _3288.w));
        float _3298 = log2(_3297);
        float _3314 = log2(_3040);
        _3111 = (exp2(_3314 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3298 * cbSceneParam._m0[78u].x)) * _3288.x) / cbSceneParam._m0[78u].x)) + _3037;
        _3113 = (exp2(_3314 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3298 * cbSceneParam._m0[78u].y)) * _3288.y) / cbSceneParam._m0[78u].y)) + _3038;
        _3115 = (exp2(_3314 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3298 * cbSceneParam._m0[78u].z)) * _3288.z) / cbSceneParam._m0[78u].z)) + _3039;
        _3117 = _3297 * _3040;
    }
    else
    {
        _3111 = _3037;
        _3113 = _3038;
        _3115 = _3039;
        _3117 = _3040;
    }
    bool _3324;
    vec4 _3127;
    vec4 _3149;
    float _3151;
    float _3155;
    float _3156;
    float _3157;
    float _3158;
    bool _3168;
    for (;;)
    {
        _3127 = cbMatDynParam._m0[0u];
        float _3129 = roundEven(_3127.y);
        bool _3130 = _3129 == 3.0;
        float _3131 = log2(_3117);
        float _3138 = exp2(_3131 * cbSceneParam._m0[78u].x) * _3008;
        float _3139 = exp2(_3131 * cbSceneParam._m0[78u].y) * _3009;
        float _3140 = exp2(_3131 * cbSceneParam._m0[78u].z) * _3010;
        float _3147 = _828 + (-0.5);
        _3149 = cbMtdParam._m0[1u];
        _3151 = _3149.y * _3147;
        float _3154 = (_3129 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3155 = _3154 * (_3130 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3111)));
        _3156 = _3154 * (_3130 ? _3139 : (_3139 + (cbSceneParam._m0[72u].w * _3113)));
        _3157 = _3154 * (_3130 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3115)));
        _3158 = _3147 * 0.999000012874603271484375;
        _3168 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3168)
        {
            if ((cbInstanceData._m0[_877 + 7u].x + _3158) < 0.5)
            {
                _3324 = true;
                break;
            }
        }
        uint _3265 = _878 + uint(_3127.w);
        if ((cbInstanceData._m0[_3265].w < 1.0) && ((cbInstanceData._m0[_3265].w + _3158) < 0.5))
        {
            _3324 = true;
            break;
        }
        if ((_3151 + _479) < _3149.x)
        {
            _3324 = true;
            break;
        }
        _3324 = false;
        break;
    }
    float _3527;
    if (_3324)
    {
        discard_state = true;
        _3527 = 0.0;
    }
    else
    {
        _3527 = _3015;
    }
    SV_Target.x = _3155;
    SV_Target.y = _3156;
    SV_Target.z = _3157;
    SV_Target.w = _3527;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3015;
    discard_exit();
}


