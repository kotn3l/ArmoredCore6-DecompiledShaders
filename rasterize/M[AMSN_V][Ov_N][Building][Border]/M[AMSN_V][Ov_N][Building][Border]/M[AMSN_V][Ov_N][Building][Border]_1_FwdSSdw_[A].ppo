#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1319;
float _3728;
float _3729;
float _3730;
float _3731;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _222 = _221 * _214;
    float _223 = _221 * _215;
    float _224 = _221 * _216;
    float _234 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _235 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _236 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _240 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _241 = _240 * _234;
    float _242 = _240 * _235;
    float _243 = _240 * _236;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _261 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _262 = _261 * TANGENT_2.x;
    float _263 = _261 * TANGENT_2.y;
    float _264 = _261 * TANGENT_2.z;
    float _269;
    float _270;
    float _271;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _269 = (-0.0) - _248;
        _270 = (-0.0) - _249;
        _271 = (-0.0) - _250;
    }
    else
    {
        _269 = _248;
        _270 = _249;
        _271 = _250;
    }
    vec4 _310 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _322 = 1.0 - ((1.0 - _310.x) * 1.39999997615814208984375);
    float _3740 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _323 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _330 = (_323 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    float _331 = (_323 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _332 = (_323 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _334 = 1.0 - ((1.0 - _310.y) * 1.39999997615814208984375);
    float _3751 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _335 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _342 = (_335 * (cbMtdParam._m0[13u].x - _330)) + _330;
    float _343 = (_335 * (cbMtdParam._m0[13u].y - _331)) + _331;
    float _344 = (_335 * (cbMtdParam._m0[13u].z - _332)) + _332;
    float _346 = 1.0 - ((1.0 - _310.z) * 1.39999997615814208984375);
    float _3762 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _347 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _375 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w)).x * cbMtdParam._m0[18u].x;
    float _389 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5.y - _375) + (cbMtdParam._m0[16u].z * TEXCOORD_5.y))) + 1.0;
    float _3773 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _391 = 1.0 - (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)));
    float _392 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _393 = isnan(1.0) ? _392 : (isnan(_392) ? 1.0 : min(_392, 1.0));
    float _401 = ((cbMtdParam._m0[16u].w * (-1.39999997615814208984375)) * ((TEXCOORD_5.x - _375) + (cbMtdParam._m0[16u].y * TEXCOORD_5.x))) + 1.0;
    float _3794 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _403 = 1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)));
    float _404 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _405 = isnan(1.0) ? _404 : (isnan(_404) ? 1.0 : min(_404, 1.0));
    vec4 _423 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _425 = _423.x;
    float _426 = _423.y;
    float _427 = _423.z;
    float _428 = cbMtdParam._m0[12u].x * _405;
    float _430 = cbMtdParam._m0[12u].y * _405;
    float _432 = cbMtdParam._m0[12u].z * _405;
    float _452 = _403 + _391;
    float _453 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _454 = isnan(1.0) ? _453 : (isnan(_453) ? 1.0 : min(_453, 1.0));
    vec4 _472 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _477 = _472.w;
    float _478 = _472.x * cbMtdParam._m0[10u].x;
    float _479 = _472.y * cbMtdParam._m0[10u].y;
    float _480 = _472.z * cbMtdParam._m0[10u].z;
    float _500 = ((_478 - (_454 * _478)) + ((((((_425 * (cbMtdParam._m0[11u].x - _428)) * _393) + (_428 * _425)) * 4.55000019073486328125) * _454) * _478)) * ((_347 * (cbMtdParam._m0[14u].x - _342)) + _342);
    float _501 = ((((((((_426 * (cbMtdParam._m0[11u].y - _430)) * _393) + (_430 * _426)) * 4.55000019073486328125) * _454) * _479) + _479) - (_454 * _479)) * ((_347 * (cbMtdParam._m0[14u].y - _343)) + _343);
    float _502 = ((((((((_427 * (cbMtdParam._m0[11u].z - _432)) * _393) + (_432 * _427)) * 4.55000019073486328125) * _454) * _480) + _480) - (_454 * _480)) * ((_347 * (cbMtdParam._m0[14u].z - _344)) + _344);
    vec4 _516 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _520 = _516.z;
    float _524 = (_516.x * 2.0) + (-1.0);
    float _526 = (_516.y * 2.0) + (-1.0);
    float _527 = dot(vec2(_524, _526), vec2(_524, _526));
    float _3825 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))));
    float _535 = fma(_532, _269, fma(_526, _262, _524 * _241));
    float _538 = fma(_532, _270, fma(_526, _263, _524 * _242));
    float _541 = fma(_532, _271, fma(_526, _264, _524 * _243));
    float _545 = inversesqrt(dot(vec3(_535, _538, _541), vec3(_535, _538, _541)));
    float _546 = _545 * _535;
    float _547 = _545 * _538;
    float _548 = _545 * _541;
    vec4 _560 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _566 = (_560.x * 2.0) + (-1.0);
    float _567 = (_560.y * 2.0) + (-1.0);
    float _568 = dot(vec2(_566, _567), vec2(_566, _567));
    float _3836 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _573 = sqrt(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))));
    float _576 = fma(_573, _269, fma(_567, _262, _566 * _241));
    float _579 = fma(_573, _270, fma(_567, _263, _566 * _242));
    float _582 = fma(_573, _271, fma(_567, _264, _566 * _243));
    float _586 = inversesqrt(dot(vec3(_576, _579, _582), vec3(_576, _579, _582)));
    float _587 = _586 * _576;
    float _588 = _586 * _579;
    float _589 = _586 * _582;
    float _592 = fma(_589, _224, fma(_588, _223, _587 * _222));
    float _595 = fma(_589, _257, fma(_588, _256, _587 * _255));
    float _598 = fma(_589, _271, fma(_588, _270, _587 * _269));
    float _602 = inversesqrt(dot(vec3(_592, _595, _598), vec3(_592, _595, _598)));
    float _606 = fma(_548, _224, fma(_547, _223, _546 * _222));
    float _609 = fma(_548, _257, fma(_547, _256, _546 * _255));
    float _612 = fma(_548, _271, fma(_547, _270, _546 * _269));
    float _616 = inversesqrt(dot(vec3(_606, _609, _612), vec3(_606, _609, _612)));
    vec4 _632 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _638 = (_632.x * 2.0) + (-1.0);
    float _639 = (_632.y * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3847 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _645 = sqrt(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))));
    vec4 _660 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _666 = (_660.x * 2.0) + (-1.0);
    float _667 = (_660.y * 2.0) + (-1.0);
    float _668 = dot(vec2(_666, _667), vec2(_666, _667));
    float _3858 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _673 = sqrt(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))));
    float _676 = fma(_673, _269, fma(_667, _262, _666 * _241));
    float _679 = fma(_673, _270, fma(_667, _263, _666 * _242));
    float _682 = fma(_673, _271, fma(_667, _264, _666 * _243));
    float _686 = inversesqrt(dot(vec3(_676, _679, _682), vec3(_676, _679, _682)));
    float _687 = _686 * _676;
    float _688 = _686 * _679;
    float _689 = _686 * _682;
    float _692 = fma(_689, _224, fma(_688, _223, _687 * _222));
    float _695 = fma(_689, _257, fma(_688, _256, _687 * _255));
    float _698 = fma(_689, _271, fma(_688, _270, _687 * _269));
    float _702 = inversesqrt(dot(vec3(_692, _695, _698), vec3(_692, _695, _698)));
    float _718 = ((((_616 * _606) * cbMtdParam._m0[17u].w) + (((_592 * _393) * _602) * cbMtdParam._m0[17u].y)) + _638) + (((_692 * _405) * _702) * cbMtdParam._m0[17u].z);
    float _721 = ((((_616 * _609) * cbMtdParam._m0[17u].w) + (((_595 * _393) * _602) * cbMtdParam._m0[17u].y)) + _639) + (((_695 * _405) * _702) * cbMtdParam._m0[17u].z);
    float _724 = fma(_645, _269, fma(_721, _255, _718 * _222));
    float _727 = fma(_645, _270, fma(_721, _256, _718 * _223));
    float _730 = fma(_645, _271, fma(_721, _257, _718 * _224));
    float _734 = inversesqrt(dot(vec3(_724, _727, _730), vec3(_724, _727, _730)));
    float _735 = _734 * _724;
    float _736 = _734 * _727;
    float _737 = _734 * _730;
    float _3869 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _738 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _739 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3902 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3913 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3924 = isnan(0.0) ? cbMtdParam._m0[18u].y : (isnan(cbMtdParam._m0[18u].y) ? 0.0 : max(cbMtdParam._m0[18u].y, 0.0));
    float _743 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _759 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _810 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _800);
    float _811 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _800);
    float _812 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _800);
    float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
    float _817 = _810 * _816;
    float _818 = _811 * _816;
    float _819 = _812 * _816;
    vec4 _824 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _826 = _824.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _998 = sqrt(((_810 * _810) + (_811 * _811)) + (_812 * _812));
        float _1004 = (cbMatDynParam._m0[5u].x * _998) + cbMatDynParam._m0[5u].y;
        float _3935 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1009 = (cbMatDynParam._m0[5u].z * _998) + cbMatDynParam._m0[5u].w;
        float _3946 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) - _1005)) + _1005) < ((_826 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _837 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _838 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _856 = fma(_737, cbSceneParam._m0[5u].z, fma(_736, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _735));
    float _859 = fma(_737, cbSceneParam._m0[6u].z, fma(_736, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _735));
    float _862 = fma(_737, cbSceneParam._m0[7u].z, fma(_736, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _735));
    uint _875 = uint(roundEven(NORMAL.w)) * 13u;
    uint _876 = _875 + 9u;
    uint _877 = _876 + uint(cbMatDynParam._m0[0u].w);
    float _883 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_877].x;
    float _884 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_877].y;
    float _885 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_877].z;
    float _3957 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _889 = 1.0 - _743;
    float _890 = _886 * _889;
    float _891 = _887 * _889;
    float _892 = _888 * _889;
    float _897 = (_886 + (-0.039999999105930328369140625)) * _743;
    float _898 = (_887 + (-0.039999999105930328369140625)) * _743;
    float _899 = (_888 + (-0.039999999105930328369140625)) * _743;
    float _900 = _897 + 0.039999999105930328369140625;
    float _902 = _898 + 0.039999999105930328369140625;
    float _903 = _899 + 0.039999999105930328369140625;
    vec4 _912 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _837, cbSceneParam._m0[86u].y * _838));
    float _915 = _912.x * TEXCOORD_5.z;
    float _916 = dot(vec3(_735, _736, _737), vec3(_817, _818, _819));
    float _919 = _916 * 2.0;
    float _923 = (_919 * _735) - _817;
    float _924 = (_919 * _736) - _818;
    float _925 = (_919 * _737) - _819;
    float _929 = abs(dot(vec3(_817, _818, _819), vec3(_735, _736, _737)));
    float _3990 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _931 = sqrt(_739);
    float _944 = exp2((_931 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_931 * 3.0));
    float _950 = (1.0 - _944) * ((_931 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _951 = _944 * _931;
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1318;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = fma(_987, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979));
        float _1047 = fma(_987, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979));
        float _1051 = fma(_987, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979));
        float _1076 = _979 + _735;
        float _1077 = _983 + _736;
        float _1078 = _987 + _737;
        float _1088 = fma(_1078, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076)) - _1043;
        float _1089 = fma(_1078, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076)) - _1047;
        float _1090 = fma(_1078, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076)) - _1051;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1043 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1047 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[34u].z) + ((((((_1051 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1146 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1112.x + (-0.5));
        float _1148 = _1146 * (_1112.y + (-0.5));
        float _1149 = _1146 * (_1112.z + (-0.5));
        float _1156 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1119.x + (-0.5));
        float _1158 = _1156 * (_1119.y + (-0.5));
        float _1159 = _1156 * (_1119.z + (-0.5));
        float _1166 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1126.x + (-0.5));
        float _1168 = _1166 * (_1126.y + (-0.5));
        float _1169 = _1166 * (_1126.z + (-0.5));
        float _1176 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1133.x + (-0.5));
        float _1178 = _1176 * (_1133.y + (-0.5));
        float _1179 = _1176 * (_1133.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1200 = (dot(vec3(_735, _736, _737), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1210 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4038 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1212 + 1.0))) + _1217) * _1180;
        float _1227 = _1148 * 0.5;
        float _1228 = _1158 * 0.5;
        float _1229 = _1168 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_735, _736, _737), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4071 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1254 + 1.0))) + _1259) * _1181;
        float _1269 = _1149 * 0.5;
        float _1270 = _1159 * 0.5;
        float _1271 = _1169 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_735, _736, _737), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4104 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1296 + 1.0))) + _1301) * _1182;
        _1318 = _1149;
        _1320 = _1148;
        _1321 = _1147;
        _1322 = _1159;
        _1323 = _1158;
        _1324 = _1157;
        _1325 = _1169;
        _1326 = _1168;
        _1327 = _1167;
        _1328 = _1182;
        _1329 = _1181;
        _1330 = _1180;
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1319;
        _1320 = _1319;
        _1321 = _1319;
        _1322 = _1319;
        _1323 = _1319;
        _1324 = _1319;
        _1325 = _1319;
        _1326 = _1319;
        _1327 = _1319;
        _1328 = _1319;
        _1329 = _1319;
        _1330 = _1319;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1362 = fma(_987, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _979));
        float _1366 = fma(_987, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _979));
        float _1370 = fma(_987, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _979));
        float _1393 = _979 + _735;
        float _1394 = _983 + _736;
        float _1395 = _987 + _737;
        float _1405 = fma(_1395, cbModelParam._m0[30u].z, fma(_1394, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1393)) - _1362;
        float _1406 = fma(_1395, cbModelParam._m0[31u].z, fma(_1394, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1393)) - _1366;
        float _1407 = fma(_1395, cbModelParam._m0[32u].z, fma(_1394, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1393)) - _1370;
        float _1411 = inversesqrt(dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407)));
        float _1424 = ((_1411 * _1405) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1362 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1411 * _1406) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1366 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1426 = ((_1411 * _1407) / cbModelParam._m0[35u].z) + ((((((_1370 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        float _1461 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1428.x + (-0.5));
        float _1463 = _1461 * (_1428.y + (-0.5));
        float _1464 = _1461 * (_1428.z + (-0.5));
        float _1471 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1435.x + (-0.5));
        float _1473 = _1471 * (_1435.y + (-0.5));
        float _1474 = _1471 * (_1435.z + (-0.5));
        float _1481 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1442.x + (-0.5));
        float _1483 = _1481 * (_1442.y + (-0.5));
        float _1484 = _1481 * (_1442.z + (-0.5));
        float _1491 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1449.x + (-0.5));
        float _1493 = _1491 * (_1449.y + (-0.5));
        float _1494 = _1491 * (_1449.z + (-0.5));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = _1462 * 0.5;
        float _1499 = _1472 * 0.5;
        float _1500 = _1482 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_735, _736, _737), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4167 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1525 + 1.0))) + _1530) * _1495;
        float _1540 = _1463 * 0.5;
        float _1541 = _1473 * 0.5;
        float _1542 = _1483 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_735, _736, _737), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4200 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1567 + 1.0))) + _1572) * _1496;
        float _1582 = _1464 * 0.5;
        float _1583 = _1474 * 0.5;
        float _1584 = _1484 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_735, _736, _737), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4233 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1609 + 1.0))) + _1614) * _1497;
        _1631 = _1464;
        _1632 = _1463;
        _1633 = _1462;
        _1634 = _1474;
        _1635 = _1473;
        _1636 = _1472;
        _1637 = _1484;
        _1638 = _1483;
        _1639 = _1482;
        _1640 = _1497;
        _1641 = _1496;
        _1642 = _1495;
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
    }
    else
    {
        _1631 = _1319;
        _1632 = _1319;
        _1633 = _1319;
        _1634 = _1319;
        _1635 = _1319;
        _1636 = _1319;
        _1637 = _1319;
        _1638 = _1319;
        _1639 = _1319;
        _1640 = _1319;
        _1641 = _1319;
        _1642 = _1319;
        _1643 = 0.0;
        _1644 = 0.0;
        _1645 = 0.0;
    }
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1331)) + _1331;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1332)) + _1332;
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1333)) + _1333;
    float _1678 = fma(_1657, cbSceneParam._m0[89u].z, fma(_1656, cbSceneParam._m0[89u].y, _1655 * cbSceneParam._m0[89u].x));
    float _1681 = fma(_1657, cbSceneParam._m0[90u].z, fma(_1656, cbSceneParam._m0[90u].y, _1655 * cbSceneParam._m0[90u].x));
    float _1684 = fma(_1657, cbSceneParam._m0[91u].z, fma(_1656, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1655));
    float _1699 = _923 * 0.5;
    float _1700 = _924 * 0.5;
    float _1701 = _925 * 0.5;
    float _1702 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1705 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1708 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1742;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1715 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1318, _1322, _1325, _1328));
        float _1719 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1723 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1730 = dot(vec4(cbModelParam._m0[39u]), vec4(_1699, _1700, _1701, 1.0));
        _1742 = dot(vec3(isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1730) ? 0.0 : (isnan(0.0) ? _1730 : max(0.0, _1730))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1742 = 1.0;
    }
    float _1753;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1744 = dot(vec4(cbModelParam._m0[40u]), vec4(_1699, _1700, _1701, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1757 = (_1753 * cbModelParam._m0[1u].x) + (_1742 * (1.0 - cbModelParam._m0[1u].x));
    float _1767 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _739);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1767 : min(cbModelParam._m0[25u].z, _1767));
    float _1848;
    float _1850;
    float _1852;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1815 = fma(_987, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979)) + cbModelParam._m0[13u].w;
        float _1819 = fma(_987, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979)) + cbModelParam._m0[14u].w;
        float _1823 = fma(_987, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979)) + cbModelParam._m0[15u].w;
        float _1826 = fma(_925, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923));
        float _1829 = fma(_925, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923));
        float _1832 = fma(_925, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923));
        float _1860;
        if (_1826 > 0.0)
        {
            _1860 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1860 = frontier_phi_19_17_ladder;
        }
        float _2085;
        if (_1829 > 0.0)
        {
            _2085 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2085 = frontier_phi_28_24_ladder;
        }
        float _2342;
        if (_1832 > 0.0)
        {
            _2342 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2342 = frontier_phi_40_35_ladder;
        }
        float _2344 = isnan(_2085) ? _1860 : (isnan(_1860) ? _2085 : min(_1860, _2085));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1826) + _1815;
        float _2350 = (_2345 * _1829) + _1819;
        float _2351 = (_2345 * _1832) + _1823;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2354 = (-1.0) - _2352;
        float _2356 = _2352 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2351 > _2356) || ((_2351 < _2354) || ((_2350 > _2356) || ((_2350 < _2354) || ((_2349 < _2354) || (_2349 > _2356))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2351, cbModelParam._m0[9u].z, fma(_2350, cbModelParam._m0[9u].y, _2349 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2351, cbModelParam._m0[10u].z, fma(_2350, cbModelParam._m0[10u].y, _2349 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2351, cbModelParam._m0[11u].z, fma(_2350, cbModelParam._m0[11u].y, _2349 * cbModelParam._m0[11u].x))), _1768);
            frontier_phi_18_40_ladder = _2479.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2479.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2479.x * cbModelParam._m0[1u].y;
        }
        _1848 = frontier_phi_18_40_ladder_2;
        _1850 = frontier_phi_18_40_ladder_1;
        _1852 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_923, _924, _925), _1768);
        _1848 = _1836.x * cbModelParam._m0[1u].y;
        _1850 = _1836.y * cbModelParam._m0[1u].y;
        _1852 = _1836.z * cbModelParam._m0[1u].y;
    }
    float _1856 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _739);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1856 : min(cbModelParam._m0[25u].w, _1856));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1912 = fma(_987, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979)) + cbModelParam._m0[21u].w;
        float _1916 = fma(_987, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979)) + cbModelParam._m0[22u].w;
        float _1920 = fma(_987, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979)) + cbModelParam._m0[23u].w;
        float _1923 = fma(_925, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923));
        float _1926 = fma(_925, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923));
        float _1929 = fma(_925, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923));
        float _2090;
        if (_1923 > 0.0)
        {
            _2090 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2090 = frontier_phi_30_26_ladder;
        }
        float _2369;
        if (_1926 > 0.0)
        {
            _2369 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2369 = frontier_phi_42_37_ladder;
        }
        float _2582;
        if (_1929 > 0.0)
        {
            _2582 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2582 = frontier_phi_51_48_ladder;
        }
        float _2584 = isnan(_2369) ? _2090 : (isnan(_2090) ? _2369 : min(_2090, _2369));
        float _2585 = isnan(_2582) ? _2584 : (isnan(_2584) ? _2582 : min(_2584, _2582));
        float _2589 = (_2585 * _1923) + _1912;
        float _2590 = (_2585 * _1926) + _1916;
        float _2591 = (_2585 * _1929) + _1920;
        float _2592 = _2585 * 9.9999997473787516355514526367188e-05;
        float _2593 = (-1.0) - _2592;
        float _2595 = _2592 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2591 > _2595) || ((_2591 < _2593) || ((_2590 > _2595) || ((_2590 < _2593) || ((_2589 < _2593) || (_2589 > _2595))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2791 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2591, cbModelParam._m0[17u].z, fma(_2590, cbModelParam._m0[17u].y, _2589 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2591, cbModelParam._m0[18u].z, fma(_2590, cbModelParam._m0[18u].y, _2589 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2591, cbModelParam._m0[19u].z, fma(_2590, cbModelParam._m0[19u].y, _2589 * cbModelParam._m0[19u].x))), _1857);
            frontier_phi_27_51_ladder = _2791.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2791.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2791.x * cbModelParam._m0[1u].z;
        }
        _1948 = frontier_phi_27_51_ladder_2;
        _1950 = frontier_phi_27_51_ladder_1;
        _1952 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_923, _924, _925), _1857);
        _1948 = _1932.x * cbModelParam._m0[1u].z;
        _1950 = _1932.y * cbModelParam._m0[1u].z;
        _1952 = _1932.z * cbModelParam._m0[1u].z;
    }
    float _1965 = (((_950 * _900) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1948 - _1848)) + _1848);
    float _1967 = (((_950 * _902) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1950 - _1850)) + _1850);
    float _1969 = (((_950 * _903) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1952 - _1852)) + _1852);
    float _1972 = fma(_1969, cbSceneParam._m0[89u].z, fma(_1967, cbSceneParam._m0[89u].y, _1965 * cbSceneParam._m0[89u].x));
    float _1975 = fma(_1969, cbSceneParam._m0[90u].z, fma(_1967, cbSceneParam._m0[90u].y, _1965 * cbSceneParam._m0[90u].x));
    float _1978 = fma(_1969, cbSceneParam._m0[91u].z, fma(_1967, cbSceneParam._m0[91u].y, _1965 * cbSceneParam._m0[91u].x));
    vec4 _1986 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_837, _838));
    float _1988 = _1986.w;
    float _2000 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1988);
    float _2001 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1988);
    float _2002 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1988);
    uvec4 _2006 = floatBitsToUint(cbInstanceData._m0[_875 + 5u]);
    uint _2008 = _2006.x * 14u;
    uint _2009 = _2008 + 13u;
    float _2016 = _915 + (-1.0);
    float _2021 = (cbLight._m0[_2009].x * _2016) + 1.0;
    float _2022 = (cbLight._m0[_2009].y * _2016) + 1.0;
    float _2023 = (cbLight._m0[_2009].z * _2016) + 1.0;
    float _2024 = (cbLight._m0[_2009].w * _2016) + 1.0;
    uint _2025 = _2008 + 5u;
    float _2031 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
    uint _2035 = _2008 + 4u;
    float _2044 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
    uint _2048 = _2008 | 1u;
    float _2059 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_735, _736, _737));
    float _2062 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_735, _736, _737));
    float _4369 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _4380 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2067 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2069 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2076 = ((cbLight._m0[_2025].x * _2031) * _2069) + (((cbLight._m0[_2035].x * _2000) * _2044) * _2067);
    float _2077 = ((_2031 * cbLight._m0[_2025].y) * _2069) + (((cbLight._m0[_2035].y * _2001) * _2044) * _2067);
    float _2078 = ((_2031 * cbLight._m0[_2025].z) * _2069) + (((cbLight._m0[_2035].z * _2002) * _2044) * _2067);
    uvec4 _2082 = floatBitsToUint(cbLight._m0[_2008 + 12u]);
    bool _2084 = _2082.x == 0u;
    float _2095;
    float _2097;
    float _2099;
    if (_2084)
    {
        _2095 = _2076;
        _2097 = _2077;
        _2099 = _2078;
    }
    else
    {
        uint _2103 = _2008 + 6u;
        float _2119 = (dot(vec3(cbLight._m0[_2008 + 2u].xyz), vec3(_735, _736, _737)) * 0.5) + 0.5;
        float _2120 = _2119 * _2119;
        float _4391 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2121 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2122 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2095 = (((cbLight._m0[_2103].x * 0.3183098733425140380859375) * _2121) * _2122) + _2076;
        _2097 = (((cbLight._m0[_2103].y * 0.3183098733425140380859375) * _2121) * _2122) + _2077;
        _2099 = (((cbLight._m0[_2103].z * 0.3183098733425140380859375) * _2121) * _2122) + _2078;
    }
    bool _2102 = _2082.y == 0u;
    float _2140;
    float _2142;
    float _2144;
    if (_2102)
    {
        _2140 = _2095;
        _2142 = _2097;
        _2144 = _2099;
    }
    else
    {
        uint _2313 = _2008 + 7u;
        float _2329 = (dot(vec3(cbLight._m0[_2008 + 3u].xyz), vec3(_735, _736, _737)) * 0.5) + 0.5;
        float _2330 = _2329 * _2329;
        float _4407 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2331 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2332 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2140 = (((cbLight._m0[_2313].x * 0.3183098733425140380859375) * _2331) * _2332) + _2095;
        _2142 = (((cbLight._m0[_2313].y * 0.3183098733425140380859375) * _2331) * _2332) + _2097;
        _2144 = (((cbLight._m0[_2313].z * 0.3183098733425140380859375) * _2331) * _2332) + _2099;
    }
    uint _2147 = _2008 + 8u;
    float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2008].w)) * _739) * 0.949999988079071044921875);
    float _2161 = _2160 * _2160;
    float _2162 = cbLight._m0[_2008].x + _817;
    float _2163 = cbLight._m0[_2008].y + _818;
    float _2164 = cbLight._m0[_2008].z + _819;
    float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
    float _2169 = _2168 * _2162;
    float _2170 = _2168 * _2163;
    float _2171 = _2168 * _2164;
    float _2172 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2008].xyz));
    float _4423 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _4434 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _2176 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2177 = dot(vec3(_735, _736, _737), vec3(_2169, _2170, _2171));
    float _4445 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2181 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_2169, _2170, _2171));
    float _4456 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = _2161 * _2161;
    float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
    float _2197 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
    float _2198 = 0.959999978542327880859375 - _897;
    float _2200 = 0.959999978542327880859375 - _898;
    float _2201 = 0.959999978542327880859375 - _899;
    float _2208 = 1.0 - _2161;
    float _2219 = (0.5 / (((_2176 * ((_2175 * _2208) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2208) + _2161) * _2175))) * _2175;
    float _4467 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
    uint _2235 = _2008 + 9u;
    float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _739) * 0.949999988079071044921875);
    float _2247 = _2246 * _2246;
    float _2248 = cbLight._m0[_2048].x + _817;
    float _2249 = cbLight._m0[_2048].y + _818;
    float _2250 = cbLight._m0[_2048].z + _819;
    float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
    float _2255 = _2254 * _2248;
    float _2256 = _2254 * _2249;
    float _2257 = _2254 * _2250;
    float _2258 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2048].xyz));
    float _4478 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2262 = dot(vec3(_735, _736, _737), vec3(_2255, _2256, _2257));
    float _4489 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2266 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2255, _2256, _2257));
    float _4500 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2270 = _2247 * _2247;
    float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
    float _2281 = exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0);
    float _2288 = 1.0 - _2247;
    float _2298 = (0.5 / (((_2176 * ((_2261 * _2288) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2288) + _2247) * _2261))) * _2261;
    float _4511 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2300 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
    float _2310 = (((((_2281 * _2198) + _900) * cbLight._m0[_2235].x) * _2300) * _2031) + ((((cbLight._m0[_2147].x * _2000) * ((_2197 * _2198) + _900)) * _2221) * _2044);
    float _2311 = (((((_2281 * _2200) + _902) * cbLight._m0[_2235].y) * _2300) * _2031) + ((((cbLight._m0[_2147].y * _2001) * ((_2197 * _2200) + _902)) * _2221) * _2044);
    float _2312 = (((((_2281 * _2201) + _903) * cbLight._m0[_2235].z) * _2300) * _2031) + ((((cbLight._m0[_2147].z * _2002) * ((_2197 * _2201) + _903)) * _2221) * _2044);
    float _2374;
    float _2376;
    float _2378;
    if (_2084)
    {
        _2374 = _2310;
        _2376 = _2311;
        _2378 = _2312;
    }
    else
    {
        uint _2380 = _2008 + 2u;
        uint _2384 = _2008 + 10u;
        float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _739) * 0.949999988079071044921875);
        float _2399 = _2398 * _2398;
        float _2400 = cbLight._m0[_2380].x + _817;
        float _2401 = cbLight._m0[_2380].y + _818;
        float _2402 = cbLight._m0[_2380].z + _819;
        float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
        float _2407 = _2406 * _2400;
        float _2408 = _2406 * _2401;
        float _2409 = _2406 * _2402;
        float _2410 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2380].xyz));
        float _4522 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2414 = dot(vec3(_735, _736, _737), vec3(_2407, _2408, _2409));
        float _4533 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2418 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2407, _2408, _2409));
        float _4544 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2422 = _2399 * _2399;
        float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
        float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0);
        float _2440 = 1.0 - _2399;
        float _2450 = (0.5 / (((_2176 * ((_2413 * _2440) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2440) + _2399) * _2413))) * _2413;
        float _4555 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2452 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
        float _2453 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2374 = (((((_2433 * _2198) + _900) * cbLight._m0[_2384].x) * _2452) * _2453) + _2310;
        _2376 = (((((_2433 * _2200) + _902) * cbLight._m0[_2384].y) * _2452) * _2453) + _2311;
        _2378 = (((((_2433 * _2201) + _903) * cbLight._m0[_2384].z) * _2452) * _2453) + _2312;
    }
    float _2488;
    float _2490;
    float _2492;
    if (_2102)
    {
        _2488 = _2374;
        _2490 = _2376;
        _2492 = _2378;
    }
    else
    {
        uint _2499 = _2008 + 3u;
        uint _2503 = _2008 + 11u;
        float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2499].w)) * _739) * 0.949999988079071044921875);
        float _2518 = _2517 * _2517;
        float _2519 = cbLight._m0[_2499].x + _817;
        float _2520 = cbLight._m0[_2499].y + _818;
        float _2521 = cbLight._m0[_2499].z + _819;
        float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
        float _2526 = _2525 * _2519;
        float _2527 = _2525 * _2520;
        float _2528 = _2525 * _2521;
        float _2529 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2499].xyz));
        float _4571 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2533 = dot(vec3(_735, _736, _737), vec3(_2526, _2527, _2528));
        float _4582 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2537 = dot(vec3(cbLight._m0[_2499].xyz), vec3(_2526, _2527, _2528));
        float _4593 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2541 = _2518 * _2518;
        float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
        float _2552 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
        float _2559 = 1.0 - _2518;
        float _2569 = (0.5 / (((_2176 * ((_2532 * _2559) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2559) + _2518) * _2532))) * _2532;
        float _4604 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2571 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
        float _2572 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2488 = (((((_2552 * _2198) + _900) * cbLight._m0[_2503].x) * _2571) * _2572) + _2374;
        _2490 = (((((_2552 * _2200) + _902) * cbLight._m0[_2503].y) * _2571) * _2572) + _2376;
        _2492 = (((((_2552 * _2201) + _903) * cbLight._m0[_2503].z) * _2571) * _2572) + _2378;
    }
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    if (_2006.y == 0u)
    {
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2647;
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2647;
        float _2650 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2647;
        uvec4 _2662 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2663 = _2662.x;
        uint _2674 = uint((float(_2662.y) * floor(float(uint(cbSceneParam._m0[85u].y * _838) / _2663))) + floor(float(uint(cbSceneParam._m0[85u].x * _837) / _2663)));
        float _2684 = (log2(_2650 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2685 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        uint _2688 = uint(isnan(14.0) ? _2685 : (isnan(_2685) ? 14.0 : min(_2685, 14.0)));
        uvec4 _2693 = texelFetch(g_lightClusterGridBuffer, int(((_2688 << 2u) + (_2674 << 6u)) >> 2u));
        uint _2694 = _2693.x;
        uint _2695 = _2662.z;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        if (((((1u << ((_2695 >> 4u) & 15u)) + 4294967295u) & _2694) == 0u) || ((_2695 & 240u) == 0u))
        {
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
        }
        else
        {
            float _2797;
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            uint _2954 = 0u;
            uint _2963;
            bool _2964;
            for (;;)
            {
                _2963 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_2954 << 2u)) >> 2u)).x;
                _2964 = _2963 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2964)
                {
                    frontier_phi_68_pred = _2950;
                    frontier_phi_68_pred_1 = _2953;
                    frontier_phi_68_pred_2 = _2952;
                    frontier_phi_68_pred_3 = _2951;
                    frontier_phi_68_pred_4 = _2949;
                    frontier_phi_68_pred_5 = _2948;
                }
                else
                {
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    uint _3099;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2963;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    for (;;)
                    {
                        uint _3103 = uint(findLSB(_3099)) + (_2954 << 5u);
                        uint _3100 = (_3099 + 4294967295u) & _3099;
                        uint _3105 = _3103 * 48u;
                        vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 3u)).x));
                        uint _3125 = (_3103 * 48u) + 4u;
                        vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3125)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 3u)).x));
                        uint _3144 = (_3103 * 48u) + 8u;
                        vec3 _3155 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3144)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 2u)).x));
                        float _3159 = _3119.x - _2648;
                        float _3160 = _3119.y - _2649;
                        float _3161 = _3119.z - _2650;
                        float _3162 = dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161));
                        float _3165 = inversesqrt(_3162);
                        float _3166 = _3165 * _3159;
                        float _3167 = _3165 * _3160;
                        float _3168 = _3165 * _3161;
                        float _3169 = dot(vec3(_856, _859, _862), vec3(_3166, _3167, _3168));
                        float _3174 = 1.0 - (_3162 * _3119.w);
                        float _4630 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3175 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3176 = sqrt(_3162) * _3138.w;
                        float _3178 = 1.39999997615814208984375 / (_3176 + 1.39999997615814208984375);
                        float _3179 = _3178 * _3178;
                        float _3182 = ((1.0 - _3179) * _3169) + _3179;
                        float _3185 = _3176 * _3176;
                        float _3189 = ((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3175) / ((_3185 * 0.699999988079071044921875) + 1.0);
                        float _3193 = (-0.0) - _2648;
                        float _3194 = (-0.0) - _2649;
                        float _3195 = (-0.0) - _2650;
                        float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3210 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                        float _3211 = 1.0 - _931;
                        float _3218 = sqrt(1.0 - ((1.0 - (_3211 * _3211)) * (1.0 - (_3210 * _3210))));
                        float _3219 = _3218 * _3218;
                        float _3220 = _3219 * _3219;
                        float _3221 = _3200 + _3166;
                        float _3222 = _3201 + _3167;
                        float _3223 = _3202 + _3168;
                        float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                        float _3231 = dot(vec3(_856, _859, _862), vec3(_3200, _3201, _3202));
                        float _4646 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3234 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3235 = dot(vec3(_856, _859, _862), vec3(_3227 * _3221, _3227 * _3222, _3227 * _3223));
                        float _4657 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3238 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3242 = ((_3238 * _3238) * (_3220 + (-1.0))) + 1.0;
                        float _3243 = _3178 * _3219;
                        float _3244 = _3243 * _3243;
                        float _3247 = ((1.0 - _3244) * _3169) + _3244;
                        float _4668 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3249 = 1.0 - _3219;
                        float _3259 = (0.5 / (((_3248 * ((_3234 * _3249) + _3219)) + 9.9999999392252902907785028219223e-09) + (((_3248 * _3249) + _3219) * _3234))) * _3248;
                        float _4679 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3270 = (((_3220 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3242 * _3242) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125))) * _3175;
                        _3023 = (_3189 * _3138.x) + _3096;
                        _3024 = (_3189 * _3138.y) + _3097;
                        _3025 = (_3189 * _3138.z) + _3098;
                        _3020 = (_3270 * _3155.x) + _3093;
                        _3021 = (_3270 * _3155.y) + _3094;
                        _3022 = (_3270 * _3155.z) + _3095;
                        if (_3100 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3100;
                        }
                    }
                    frontier_phi_68_pred = _3022;
                    frontier_phi_68_pred_1 = _3025;
                    frontier_phi_68_pred_2 = _3024;
                    frontier_phi_68_pred_3 = _3023;
                    frontier_phi_68_pred_4 = _3021;
                    frontier_phi_68_pred_5 = _3020;
                }
                _2801 = frontier_phi_68_pred;
                _2807 = frontier_phi_68_pred_1;
                _2805 = frontier_phi_68_pred_2;
                _2803 = frontier_phi_68_pred_3;
                _2799 = frontier_phi_68_pred_4;
                _2797 = frontier_phi_68_pred_5;
                uint _2955 = _2954 + 1u;
                if (_2955 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2948 = _2797;
                    _2949 = _2799;
                    _2950 = _2801;
                    _2951 = _2803;
                    _2952 = _2805;
                    _2953 = _2807;
                    _2954 = _2955;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
        }
        uvec4 _2810 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2811 = _2810.z;
        uint _2813 = (_2811 >> 8u) & 15u;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        if (((4294967295u << _2813) & _2694) == 0u)
        {
            _2916 = _2796;
            _2918 = _2798;
            _2920 = _2800;
            _2922 = _2802;
            _2924 = _2804;
            _2926 = _2806;
        }
        else
        {
            float _2941 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
            float _2942 = _2941 * _2648;
            float _2943 = _2941 * _2649;
            float _2944 = _2941 * _2650;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2813 < ((_2811 >> 12u) & 15u))
            {
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _3076 = _2796;
                float _3077 = _2798;
                float _3078 = _2800;
                float _3079 = _2802;
                float _3080 = _2804;
                float _3081 = _2806;
                uint _3082 = _2813;
                uint _3091;
                bool _3092;
                for (;;)
                {
                    _3091 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_3082 << 2u)) >> 2u)).x;
                    _3092 = _3091 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3092)
                    {
                        frontier_phi_79_pred = _3081;
                        frontier_phi_79_pred_1 = _3080;
                        frontier_phi_79_pred_2 = _3079;
                        frontier_phi_79_pred_3 = _3078;
                        frontier_phi_79_pred_4 = _3077;
                        frontier_phi_79_pred_5 = _3076;
                    }
                    else
                    {
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3297 = _3076;
                        float _3298 = _3077;
                        float _3299 = _3078;
                        float _3300 = _3079;
                        float _3301 = _3080;
                        float _3302 = _3081;
                        uint _3303 = _3091;
                        uint _3304;
                        vec4 _3329;
                        float _3330;
                        vec4 _3345;
                        vec3 _3357;
                        vec4 _3372;
                        vec4 _3388;
                        float _3435;
                        bool _3436;
                        for (;;)
                        {
                            uint _3314 = ((_3082 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3303));
                            _3304 = (_3303 + 4294967295u) & _3303;
                            uint _3316 = _3314 * 40u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3330 = _3329.w;
                            uint _3332 = (_3314 * 40u) + 4u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3347 = (_3314 * 40u) + 8u;
                            _3357 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x));
                            uint _3359 = (_3314 * 40u) + 16u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3375 = (_3314 * 40u) + 20u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3391 = (_3314 * 40u) + 24u;
                            vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3410 = (_3314 * 40u) + 28u;
                            vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3435 = fma(_2650, _3423.z, fma(_2649, _3423.y, _3423.x * _2648)) + _3423.w;
                            _3436 = !((fma(_2650, _3404.z, fma(_2649, _3404.y, _3404.x * _2648)) + _3404.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3436)
                            {
                                float _3463 = _3329.x - _2648;
                                float _3464 = _3329.y - _2649;
                                float _3465 = _3329.z - _2650;
                                float _3466 = dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465));
                                float _3469 = inversesqrt(_3466);
                                float _3470 = _3469 * _3463;
                                float _3471 = _3469 * _3464;
                                float _3472 = _3469 * _3465;
                                float _3476 = 1.0 - (_3466 / (_3330 * _3330));
                                float _4690 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3481 = sqrt(_3466) * _3345.w;
                                float _3483 = 1.39999997615814208984375 / (_3481 + 1.39999997615814208984375);
                                float _3484 = _3483 * _3483;
                                float _3487 = ((1.0 - _3484) * dot(vec3(_3470, _3471, _3472), vec3(_856, _859, _862))) + _3484;
                                float _3490 = _3481 * _3481;
                                float _3494 = (fma(_2650, _3372.z, fma(_2649, _3372.y, _3372.x * _2648)) + _3372.w) / _3435;
                                float _3495 = (fma(_2650, _3388.z, fma(_2649, _3388.y, _3388.x * _2648)) + _3388.w) / _3435;
                                float _3499 = 1.0 - dot(vec2(_3494, _3495), vec2(_3494, _3495));
                                float _4706 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3501 = _3500 * (((isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0))) * _3477) / ((_3490 * 0.699999988079071044921875) + 1.0));
                                float _3513 = exp2(log2(1.0 / ((_3490 * 3.5) + 5.0)) * 0.25);
                                float _3514 = 1.0 - _931;
                                float _3521 = sqrt(1.0 - ((1.0 - (_3514 * _3514)) * (1.0 - (_3513 * _3513))));
                                float _3522 = _3521 * _3521;
                                float _3523 = _3522 * _3522;
                                float _3524 = _3470 - _2942;
                                float _3525 = _3471 - _2943;
                                float _3526 = _3472 - _2944;
                                float _3530 = inversesqrt(dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526)));
                                float _3534 = dot(vec3(_856, _859, _862), vec3((-0.0) - _2942, (-0.0) - _2943, (-0.0) - _2944));
                                float _4717 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3537 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3538 = dot(vec3(_856, _859, _862), vec3(_3530 * _3524, _3530 * _3525, _3530 * _3526));
                                float _4728 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3545 = ((_3541 * _3541) * (_3523 + (-1.0))) + 1.0;
                                float _3546 = _3483 * _3522;
                                float _3547 = _3546 * _3546;
                                float _3553 = ((1.0 - _3547) * dot(vec3(_856, _859, _862), vec3(_3470, _3471, _3472))) + _3547;
                                float _4739 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3555 = 1.0 - _3522;
                                float _3565 = (0.5 / (((_3554 * ((_3537 * _3555) + _3522)) + 9.9999999392252902907785028219223e-09) + (((_3554 * _3555) + _3522) * _3537))) * _3554;
                                float _4750 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3575 = (_3500 * _3477) * (((_3523 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3545 * _3545) * ((_3490 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3501 * _3345.z;
                                frontier_phi_85_pred_1 = _3501 * _3345.y;
                                frontier_phi_85_pred_2 = _3501 * _3345.x;
                                frontier_phi_85_pred_3 = _3575 * _3357.z;
                                frontier_phi_85_pred_4 = _3575 * _3357.y;
                                frontier_phi_85_pred_5 = _3575 * _3357.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3584 = frontier_phi_85_pred;
                            _3583 = frontier_phi_85_pred_1;
                            _3582 = frontier_phi_85_pred_2;
                            _3581 = frontier_phi_85_pred_3;
                            _3580 = frontier_phi_85_pred_4;
                            _3579 = frontier_phi_85_pred_5;
                            _3287 = _3582 + _3300;
                            _3288 = _3583 + _3301;
                            _3289 = _3584 + _3302;
                            _3284 = _3579 + _3297;
                            _3285 = _3580 + _3298;
                            _3286 = _3581 + _3299;
                            if (_3304 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3304;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3289;
                        frontier_phi_79_pred_1 = _3288;
                        frontier_phi_79_pred_2 = _3287;
                        frontier_phi_79_pred_3 = _3286;
                        frontier_phi_79_pred_4 = _3285;
                        frontier_phi_79_pred_5 = _3284;
                    }
                    _2927 = frontier_phi_79_pred;
                    _2925 = frontier_phi_79_pred_1;
                    _2923 = frontier_phi_79_pred_2;
                    _2921 = frontier_phi_79_pred_3;
                    _2919 = frontier_phi_79_pred_4;
                    _2917 = frontier_phi_79_pred_5;
                    uint _3083 = _3082 + 1u;
                    if (_3083 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3076 = _2917;
                        _3077 = _2919;
                        _3078 = _2921;
                        _3079 = _2923;
                        _3080 = _2925;
                        _3081 = _2927;
                        _3082 = _3083;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2923;
                frontier_phi_60_61_ladder_1 = _2927;
                frontier_phi_60_61_ladder_2 = _2925;
                frontier_phi_60_61_ladder_3 = _2921;
                frontier_phi_60_61_ladder_4 = _2919;
                frontier_phi_60_61_ladder_5 = _2917;
            }
            else
            {
                frontier_phi_60_61_ladder = _2802;
                frontier_phi_60_61_ladder_1 = _2806;
                frontier_phi_60_61_ladder_2 = _2804;
                frontier_phi_60_61_ladder_3 = _2800;
                frontier_phi_60_61_ladder_4 = _2798;
                frontier_phi_60_61_ladder_5 = _2796;
            }
            _2916 = frontier_phi_60_61_ladder_5;
            _2918 = frontier_phi_60_61_ladder_4;
            _2920 = frontier_phi_60_61_ladder_3;
            _2922 = frontier_phi_60_61_ladder;
            _2924 = frontier_phi_60_61_ladder_2;
            _2926 = frontier_phi_60_61_ladder_1;
        }
        float _2931 = isnan(1.0) ? _915 : (isnan(_915) ? 1.0 : min(_915, 1.0));
        _2706 = (_2931 * _2922) + _2140;
        _2708 = (_2931 * _2924) + _2142;
        _2710 = (_2931 * _2926) + _2144;
        _2712 = ((_2916 * _900) * _2931) + _2488;
        _2714 = ((_2918 * _902) * _2931) + _2490;
        _2716 = ((_2920 * _903) * _2931) + _2492;
    }
    else
    {
        _2706 = _2140;
        _2708 = _2142;
        _2710 = _2144;
        _2712 = _2488;
        _2714 = _2490;
        _2716 = _2492;
    }
    float _4766 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4777 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4788 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4799 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _2734 = ((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2706 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _915))) + ((_2712 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1757)) * cbPerFrame._m0[3u].x);
    float _2735 = ((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2708 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _915))) + ((_2714 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1757)) * cbPerFrame._m0[3u].x);
    float _2736 = ((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2710 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _915))) + ((_2716 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1757)) * cbPerFrame._m0[3u].x);
    float _2741 = cbInstanceData._m0[_875 + 6u].w * (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)));
    float _2746 = _837 / cbSceneParam._m0[86u].x;
    float _2747 = _838 / cbSceneParam._m0[86u].y;
    vec4 _2761 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2746, _2747, (log2((isnan(cbSceneParam._m0[77u].w) ? _759 : (isnan(_759) ? cbSceneParam._m0[77u].w : min(_759, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2763 = _2761.x;
    float _2764 = _2761.y;
    float _2765 = _2761.z;
    float _2766 = _2761.w;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    if (_759 > cbSceneParam._m0[78u].w)
    {
        float _2821 = isnan(_759) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _759 : min(cbSceneParam._m0[80u].w, _759));
        float _2822 = _2821 / _759;
        float _2833 = _2822 * _810;
        float _2834 = _811 * _2822;
        float _2835 = (-0.0) - _2834;
        float _2836 = _2822 * _812;
        float _2838 = (cbSceneParam._m0[77u].w * _2835) / _2821;
        float _2839 = _2838 + cbSceneParam._m0[79u].w;
        float _2840 = cbSceneParam._m0[79u].w - _2834;
        float _2846 = sqrt(((_2833 * _2833) + (_2834 * _2834)) + (_2836 * _2836));
        float _2849 = (1.0 - (cbSceneParam._m0[77u].w / _2821)) * _2846;
        float _2854 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2856 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3033;
        if (abs((_2835 - _2838) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3033 = ((((_2839 > 0.0) ? exp2(_2854 * _2839) : (2.0 - exp2(_2856 * _2839))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2849;
        }
        else
        {
            float _2977 = 1.0 / cbSceneParam._m0[80u].x;
            float _2978 = isnan(_2840) ? _2839 : (isnan(_2839) ? _2840 : max(_2839, _2840));
            float _2979 = isnan(_2840) ? _2839 : (isnan(_2839) ? _2840 : min(_2839, _2840));
            float _2988 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : min(_2978, 0.0));
            float _2989 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : min(_2979, 0.0));
            _3033 = ((abs(_2846 / _2835) * cbSceneParam._m0[80u].y) * ((((_2988 - _2989) * 2.0) - ((exp2(_2854 * (isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0)))) - exp2(_2854 * (isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0))))) * _2977)) - ((exp2(_2856 * _2988) - exp2(_2856 * _2989)) * _2977))) + (_2849 * cbSceneParam._m0[80u].z);
        }
        vec4 _3035 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2746, _2747, 1.0), 0.0);
        float _3044 = exp2((_3033 * (-1.44269502162933349609375)) * (1.0 - _3035.w));
        float _3045 = log2(_3044);
        float _3061 = log2(_2766);
        _2858 = (exp2(_3061 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3045 * cbSceneParam._m0[78u].x)) * _3035.x) / cbSceneParam._m0[78u].x)) + _2763;
        _2860 = (exp2(_3061 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3045 * cbSceneParam._m0[78u].y)) * _3035.y) / cbSceneParam._m0[78u].y)) + _2764;
        _2862 = (exp2(_3061 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3045 * cbSceneParam._m0[78u].z)) * _3035.z) / cbSceneParam._m0[78u].z)) + _2765;
        _2864 = _3044 * _2766;
    }
    else
    {
        _2858 = _2763;
        _2860 = _2764;
        _2862 = _2765;
        _2864 = _2766;
    }
    bool _3071;
    vec4 _2874;
    vec4 _2896;
    float _2898;
    float _2902;
    float _2903;
    float _2904;
    float _2905;
    bool _2915;
    for (;;)
    {
        _2874 = cbMatDynParam._m0[0u];
        float _2876 = roundEven(_2874.y);
        bool _2877 = _2876 == 3.0;
        float _2878 = log2(_2864);
        float _2885 = exp2(_2878 * cbSceneParam._m0[78u].x) * _2734;
        float _2886 = exp2(_2878 * cbSceneParam._m0[78u].y) * _2735;
        float _2887 = exp2(_2878 * cbSceneParam._m0[78u].z) * _2736;
        float _2894 = _826 + (-0.5);
        _2896 = cbMtdParam._m0[1u];
        _2898 = _2896.y * _2894;
        float _2901 = (_2876 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2902 = _2901 * (_2877 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2858)));
        _2903 = _2901 * (_2877 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2860)));
        _2904 = _2901 * (_2877 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2862)));
        _2905 = _2894 * 0.999000012874603271484375;
        _2915 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2915)
        {
            if ((cbInstanceData._m0[_875 + 7u].x + _2905) < 0.5)
            {
                _3071 = true;
                break;
            }
        }
        uint _3012 = _876 + uint(_2874.w);
        if ((cbInstanceData._m0[_3012].w < 1.0) && ((cbInstanceData._m0[_3012].w + _2905) < 0.5))
        {
            _3071 = true;
            break;
        }
        if ((_2898 + _477) < _2896.x)
        {
            _3071 = true;
            break;
        }
        _3071 = false;
        break;
    }
    float _3275;
    if (_3071)
    {
        discard_state = true;
        _3275 = 0.0;
    }
    else
    {
        _3275 = _2741;
    }
    SV_Target.x = _2902;
    SV_Target.y = _2903;
    SV_Target.z = _2904;
    SV_Target.w = _3275;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2741;
    discard_exit();
}


