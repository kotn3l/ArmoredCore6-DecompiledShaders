#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_nrd_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _693;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _157 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _158 = _157 * NORMAL.x;
    float _159 = _157 * NORMAL.y;
    float _160 = _157 * NORMAL.z;
    vec4 _180 = texture(sampler2D(M_A_M0_Edge_nrd_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _186 = _180.x * cbMtdParam._m0[9u].x;
    float _187 = _180.y * cbMtdParam._m0[9u].y;
    float _188 = _180.z * cbMtdParam._m0[9u].z;
    float _192 = inversesqrt(dot(vec3(_158, _159, _160), vec3(_158, _159, _160)));
    float _193 = _192 * _158;
    float _194 = _192 * _159;
    float _195 = _192 * _160;
    float _2803 = isnan(0.0) ? _186 : (isnan(_186) ? 0.0 : max(_186, 0.0));
    float _2814 = isnan(0.0) ? _187 : (isnan(_187) ? 0.0 : max(_187, 0.0));
    float _2825 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _215 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    float _273 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _274 = _267 * _273;
    float _275 = _268 * _273;
    float _276 = _269 * _273;
    float _282 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _283 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _304 = fma(_195, cbSceneParam._m0[5u].z, fma(_194, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _193));
    float _307 = fma(_195, cbSceneParam._m0[6u].z, fma(_194, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _193));
    float _310 = fma(_195, cbSceneParam._m0[7u].z, fma(_194, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _193));
    uint _323 = uint(roundEven(NORMAL.w)) * 13u;
    uint _326 = (_323 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _332 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2803 : (isnan(_2803) ? 1.0 : min(_2803, 1.0)))) * cbInstanceData._m0[_326].x;
    float _333 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2814 : (isnan(_2814) ? 1.0 : min(_2814, 1.0)))) * cbInstanceData._m0[_326].y;
    float _334 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2825 : (isnan(_2825) ? 1.0 : min(_2825, 1.0)))) * cbInstanceData._m0[_326].z;
    float _2836 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _335 = isnan(1.0) ? _2836 : (isnan(_2836) ? 1.0 : min(_2836, 1.0));
    float _2847 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _336 = isnan(1.0) ? _2847 : (isnan(_2847) ? 1.0 : min(_2847, 1.0));
    float _2858 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _337 = isnan(1.0) ? _2858 : (isnan(_2858) ? 1.0 : min(_2858, 1.0));
    vec4 _346 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _282, cbSceneParam._m0[86u].y * _283));
    float _349 = _346.x * TEXCOORD.z;
    float _350 = dot(vec3(_193, _194, _195), vec3(_274, _275, _276));
    float _353 = _350 * 2.0;
    float _358 = (_353 * _193) - _274;
    float _359 = (_353 * _194) - _275;
    float _360 = (_353 * _195) - _276;
    float _382 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _386 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _390 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _692;
    float _694;
    float _695;
    float _696;
    float _697;
    float _698;
    float _699;
    float _700;
    float _701;
    float _702;
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _417 = fma(_390, cbModelParam._m0[26u].z, fma(_386, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _382));
        float _421 = fma(_390, cbModelParam._m0[27u].z, fma(_386, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _382));
        float _425 = fma(_390, cbModelParam._m0[28u].z, fma(_386, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _382));
        float _450 = _382 + _193;
        float _451 = _386 + _194;
        float _452 = _390 + _195;
        float _462 = fma(_452, cbModelParam._m0[26u].z, fma(_451, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _450)) - _417;
        float _463 = fma(_452, cbModelParam._m0[27u].z, fma(_451, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _450)) - _421;
        float _464 = fma(_452, cbModelParam._m0[28u].z, fma(_451, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _450)) - _425;
        float _468 = inversesqrt(dot(vec3(_462, _463, _464), vec3(_462, _463, _464)));
        float _481 = ((_468 * _462) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_417 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _482 = ((_468 * _463) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_421 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _483 = ((_468 * _464) / cbModelParam._m0[34u].z) + ((((((_425 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _486 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_481, _482, _483), 0.0);
        vec4 _493 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_481, _482, _483), 0.0);
        vec4 _500 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_481, _482, _483), 0.0);
        vec4 _507 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_481, _482, _483), 0.0);
        float _520 = exp2((_486.w + (-0.5)) * 20.0) * 2.0;
        float _521 = _520 * (_486.x + (-0.5));
        float _522 = _520 * (_486.y + (-0.5));
        float _523 = _520 * (_486.z + (-0.5));
        float _530 = exp2((_493.w + (-0.5)) * 20.0) * 2.0;
        float _531 = _530 * (_493.x + (-0.5));
        float _532 = _530 * (_493.y + (-0.5));
        float _533 = _530 * (_493.z + (-0.5));
        float _540 = exp2((_500.w + (-0.5)) * 20.0) * 2.0;
        float _541 = _540 * (_500.x + (-0.5));
        float _542 = _540 * (_500.y + (-0.5));
        float _543 = _540 * (_500.z + (-0.5));
        float _550 = exp2((_507.w + (-0.5)) * 20.0) * 2.0;
        float _551 = _550 * (_507.x + (-0.5));
        float _552 = _550 * (_507.y + (-0.5));
        float _553 = _550 * (_507.z + (-0.5));
        float _554 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
        float _555 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
        float _556 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
        float _557 = _521 * 0.5;
        float _558 = _531 * 0.5;
        float _559 = _541 * 0.5;
        float _560 = dot(vec3(_557, _558, _559), vec3(_557, _558, _559));
        float _565 = (_560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_560);
        float _574 = (dot(vec3(_193, _194, _195), vec3(_565 * _557, _565 * _558, _565 * _559)) + 1.0) * 0.5;
        float _2884 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
        float _584 = sqrt(((_558 * _558) + (_557 * _557)) + (_559 * _559)) / (_554 + 9.9999997473787516355514526367188e-06);
        float _2895 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _585 = isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0));
        float _586 = _585 * 2.0;
        float _590 = (1.0 - _585) / (_585 + 1.0);
        float _2906 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        float _591 = isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0));
        float _600 = ((((1.0 - _591) * (_586 + 2.0)) * exp2(log2(isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0))) * (_586 + 1.0))) + _591) * _554;
        float _601 = _522 * 0.5;
        float _602 = _532 * 0.5;
        float _603 = _542 * 0.5;
        float _604 = dot(vec3(_601, _602, _603), vec3(_601, _602, _603));
        float _609 = (_604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_604);
        float _617 = (dot(vec3(_193, _194, _195), vec3(_609 * _601, _609 * _602, _609 * _603)) + 1.0) * 0.5;
        float _2917 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _626 = sqrt(((_602 * _602) + (_601 * _601)) + (_603 * _603)) / (_555 + 9.9999997473787516355514526367188e-06);
        float _2928 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _627 = isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0));
        float _628 = _627 * 2.0;
        float _632 = (1.0 - _627) / (_627 + 1.0);
        float _2939 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _633 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
        float _642 = ((((1.0 - _633) * (_628 + 2.0)) * exp2(log2(isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0))) * (_628 + 1.0))) + _633) * _555;
        float _643 = _523 * 0.5;
        float _644 = _533 * 0.5;
        float _645 = _543 * 0.5;
        float _646 = dot(vec3(_643, _644, _645), vec3(_643, _644, _645));
        float _651 = (_646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_646);
        float _659 = (dot(vec3(_193, _194, _195), vec3(_651 * _643, _651 * _644, _651 * _645)) + 1.0) * 0.5;
        float _2950 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _668 = sqrt(((_644 * _644) + (_643 * _643)) + (_645 * _645)) / (_556 + 9.9999997473787516355514526367188e-06);
        float _2961 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0));
        float _670 = _669 * 2.0;
        float _674 = (1.0 - _669) / (_669 + 1.0);
        float _2972 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _675 = isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0));
        float _684 = ((((1.0 - _675) * (_670 + 2.0)) * exp2(log2(isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0))) * (_670 + 1.0))) + _675) * _556;
        _692 = _523;
        _694 = _522;
        _695 = _521;
        _696 = _533;
        _697 = _532;
        _698 = _531;
        _699 = _543;
        _700 = _542;
        _701 = _541;
        _702 = _556;
        _703 = _555;
        _704 = _554;
        _705 = cbModelParam._m0[36u].z * (isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0)));
        _706 = cbModelParam._m0[36u].z * (isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0)));
        _707 = cbModelParam._m0[36u].z * (isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0)));
    }
    else
    {
        _692 = _693;
        _694 = _693;
        _695 = _693;
        _696 = _693;
        _697 = _693;
        _698 = _693;
        _699 = _693;
        _700 = _693;
        _701 = _693;
        _702 = _693;
        _703 = _693;
        _704 = _693;
        _705 = 0.0;
        _706 = 0.0;
        _707 = 0.0;
    }
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _733 = fma(_390, cbModelParam._m0[30u].z, fma(_386, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _382));
        float _737 = fma(_390, cbModelParam._m0[31u].z, fma(_386, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _382));
        float _741 = fma(_390, cbModelParam._m0[32u].z, fma(_386, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _382));
        float _764 = _382 + _193;
        float _765 = _386 + _194;
        float _766 = _390 + _195;
        float _776 = fma(_766, cbModelParam._m0[30u].z, fma(_765, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _764)) - _733;
        float _777 = fma(_766, cbModelParam._m0[31u].z, fma(_765, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _764)) - _737;
        float _778 = fma(_766, cbModelParam._m0[32u].z, fma(_765, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _764)) - _741;
        float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
        float _795 = ((_782 * _776) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_733 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _796 = ((_782 * _777) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_737 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _797 = ((_782 * _778) / cbModelParam._m0[35u].z) + ((((((_741 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        float _832 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_799.x + (-0.5));
        float _834 = _832 * (_799.y + (-0.5));
        float _835 = _832 * (_799.z + (-0.5));
        float _842 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_806.x + (-0.5));
        float _844 = _842 * (_806.y + (-0.5));
        float _845 = _842 * (_806.z + (-0.5));
        float _852 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_813.x + (-0.5));
        float _854 = _852 * (_813.y + (-0.5));
        float _855 = _852 * (_813.z + (-0.5));
        float _862 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_820.x + (-0.5));
        float _864 = _862 * (_820.y + (-0.5));
        float _865 = _862 * (_820.z + (-0.5));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = _833 * 0.5;
        float _870 = _843 * 0.5;
        float _871 = _853 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _885 = (dot(vec3(_193, _194, _195), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3013 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _894 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3024 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3035 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0))) * (_896 + 1.0))) + _901) * _866;
        float _911 = _834 * 0.5;
        float _912 = _844 * 0.5;
        float _913 = _854 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _927 = (dot(vec3(_193, _194, _195), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3046 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _936 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3057 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3068 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0))) * (_938 + 1.0))) + _943) * _867;
        float _953 = _835 * 0.5;
        float _954 = _845 * 0.5;
        float _955 = _855 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_193, _194, _195), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3079 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3090 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3101 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0))) * (_980 + 1.0))) + _985) * _868;
        _1002 = _835;
        _1003 = _834;
        _1004 = _833;
        _1005 = _845;
        _1006 = _844;
        _1007 = _843;
        _1008 = _855;
        _1009 = _854;
        _1010 = _853;
        _1011 = _868;
        _1012 = _867;
        _1013 = _866;
        _1014 = cbModelParam._m0[36u].w * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
        _1015 = cbModelParam._m0[36u].w * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1016 = cbModelParam._m0[36u].w * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
    }
    else
    {
        _1002 = _693;
        _1003 = _693;
        _1004 = _693;
        _1005 = _693;
        _1006 = _693;
        _1007 = _693;
        _1008 = _693;
        _1009 = _693;
        _1010 = _693;
        _1011 = _693;
        _1012 = _693;
        _1013 = _693;
        _1014 = 0.0;
        _1015 = 0.0;
        _1016 = 0.0;
    }
    float _1026 = (cbModelParam._m0[1u].x * (_1014 - _705)) + _705;
    float _1027 = (cbModelParam._m0[1u].x * (_1015 - _706)) + _706;
    float _1028 = (cbModelParam._m0[1u].x * (_1016 - _707)) + _707;
    float _1049 = fma(_1028, cbSceneParam._m0[89u].z, fma(_1027, cbSceneParam._m0[89u].y, _1026 * cbSceneParam._m0[89u].x));
    float _1052 = fma(_1028, cbSceneParam._m0[90u].z, fma(_1027, cbSceneParam._m0[90u].y, _1026 * cbSceneParam._m0[90u].x));
    float _1055 = fma(_1028, cbSceneParam._m0[91u].z, fma(_1027, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1026));
    float _1070 = _358 * 0.5;
    float _1071 = _359 * 0.5;
    float _1072 = _360 * 0.5;
    float _1073 = dot(vec4(_1070, _1071, _1072, 1.0), vec4(_1004, _1007, _1010, _1013));
    float _1076 = dot(vec4(_1070, _1071, _1072, 1.0), vec4(_1003, _1006, _1009, _1012));
    float _1079 = dot(vec4(_1070, _1071, _1072, 1.0), vec4(_1002, _1005, _1008, _1011));
    float _1113;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1086 = dot(vec4(_1070, _1071, _1072, 1.0), vec4(_692, _696, _699, _702));
        float _1090 = dot(vec4(_1070, _1071, _1072, 1.0), vec4(_694, _697, _700, _703));
        float _1094 = dot(vec4(_1070, _1071, _1072, 1.0), vec4(_695, _698, _701, _704));
        float _1101 = dot(vec4(cbModelParam._m0[39u]), vec4(_1070, _1071, _1072, 1.0));
        _1113 = dot(vec3(isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)), isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)), isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1101) ? 0.0 : (isnan(0.0) ? _1101 : max(0.0, _1101))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1113 = 1.0;
    }
    float _1124;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1115 = dot(vec4(cbModelParam._m0[40u]), vec4(_1070, _1071, _1072, 1.0));
        _1124 = dot(vec3(isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)), isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)), isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1115) ? 0.0 : (isnan(0.0) ? _1115 : max(0.0, _1115))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1124 = 1.0;
    }
    float _1128 = (_1124 * cbModelParam._m0[1u].x) + (_1113 * (1.0 - cbModelParam._m0[1u].x));
    float _1137 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1219;
    float _1221;
    float _1223;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1186 = fma(_390, cbModelParam._m0[13u].z, fma(_386, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _382)) + cbModelParam._m0[13u].w;
        float _1190 = fma(_390, cbModelParam._m0[14u].z, fma(_386, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _382)) + cbModelParam._m0[14u].w;
        float _1194 = fma(_390, cbModelParam._m0[15u].z, fma(_386, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _382)) + cbModelParam._m0[15u].w;
        float _1197 = fma(_360, cbModelParam._m0[13u].z, fma(_359, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _358));
        float _1200 = fma(_360, cbModelParam._m0[14u].z, fma(_359, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _358));
        float _1203 = fma(_360, cbModelParam._m0[15u].z, fma(_359, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _358));
        float _1229;
        if (_1197 > 0.0)
        {
            _1229 = abs((1.0 - _1186) / _1197);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1197 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1186 + 1.0) / _1197);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1229 = frontier_phi_14_12_ladder;
        }
        float _1437;
        if (_1200 > 0.0)
        {
            _1437 = abs((1.0 - _1190) / _1200);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1200 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1190 + 1.0) / _1200);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1437 = frontier_phi_23_19_ladder;
        }
        float _1626;
        if (_1203 > 0.0)
        {
            _1626 = abs((1.0 - _1194) / _1203);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1203 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1194 + 1.0) / _1203);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1626 = frontier_phi_35_30_ladder;
        }
        float _1628 = isnan(_1437) ? _1229 : (isnan(_1229) ? _1437 : min(_1229, _1437));
        float _1629 = isnan(_1626) ? _1628 : (isnan(_1628) ? _1626 : min(_1628, _1626));
        float _1633 = (_1629 * _1197) + _1186;
        float _1634 = (_1629 * _1200) + _1190;
        float _1635 = (_1629 * _1203) + _1194;
        float _1636 = _1629 * 9.9999997473787516355514526367188e-05;
        float _1638 = (-1.0) - _1636;
        float _1640 = _1636 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1635 > _1640) || ((_1635 < _1638) || ((_1634 > _1640) || ((_1634 < _1638) || ((_1633 < _1638) || (_1633 > _1640))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1635, cbModelParam._m0[9u].z, fma(_1634, cbModelParam._m0[9u].y, _1633 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1635, cbModelParam._m0[10u].z, fma(_1634, cbModelParam._m0[10u].y, _1633 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1635, cbModelParam._m0[11u].z, fma(_1634, cbModelParam._m0[11u].y, _1633 * cbModelParam._m0[11u].x))), _1137);
            frontier_phi_13_35_ladder = _1732.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1732.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1732.x * cbModelParam._m0[1u].y;
        }
        _1219 = frontier_phi_13_35_ladder_2;
        _1221 = frontier_phi_13_35_ladder_1;
        _1223 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1207 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_358, _359, _360), _1137);
        _1219 = _1207.x * cbModelParam._m0[1u].y;
        _1221 = _1207.y * cbModelParam._m0[1u].y;
        _1223 = _1207.z * cbModelParam._m0[1u].y;
    }
    float _1226 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1319;
    float _1321;
    float _1323;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1283 = fma(_390, cbModelParam._m0[21u].z, fma(_386, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _382)) + cbModelParam._m0[21u].w;
        float _1287 = fma(_390, cbModelParam._m0[22u].z, fma(_386, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _382)) + cbModelParam._m0[22u].w;
        float _1291 = fma(_390, cbModelParam._m0[23u].z, fma(_386, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _382)) + cbModelParam._m0[23u].w;
        float _1294 = fma(_360, cbModelParam._m0[21u].z, fma(_359, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _358));
        float _1297 = fma(_360, cbModelParam._m0[22u].z, fma(_359, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _358));
        float _1300 = fma(_360, cbModelParam._m0[23u].z, fma(_359, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _358));
        float _1442;
        if (_1294 > 0.0)
        {
            _1442 = abs((1.0 - _1283) / _1294);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1294 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1283 + 1.0) / _1294);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1442 = frontier_phi_25_21_ladder;
        }
        float _1653;
        if (_1297 > 0.0)
        {
            _1653 = abs((1.0 - _1287) / _1297);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1297 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1287 + 1.0) / _1297);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1653 = frontier_phi_37_32_ladder;
        }
        float _1804;
        if (_1300 > 0.0)
        {
            _1804 = abs((1.0 - _1291) / _1300);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1300 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1291 + 1.0) / _1300);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1804 = frontier_phi_46_43_ladder;
        }
        float _1806 = isnan(_1653) ? _1442 : (isnan(_1442) ? _1653 : min(_1442, _1653));
        float _1807 = isnan(_1804) ? _1806 : (isnan(_1806) ? _1804 : min(_1806, _1804));
        float _1811 = (_1807 * _1294) + _1283;
        float _1812 = (_1807 * _1297) + _1287;
        float _1813 = (_1807 * _1300) + _1291;
        float _1814 = _1807 * 9.9999997473787516355514526367188e-05;
        float _1815 = (-1.0) - _1814;
        float _1817 = _1814 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1813 > _1817) || ((_1813 < _1815) || ((_1812 > _1817) || ((_1812 < _1815) || ((_1811 < _1815) || (_1811 > _1817))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2012 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1813, cbModelParam._m0[17u].z, fma(_1812, cbModelParam._m0[17u].y, _1811 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1813, cbModelParam._m0[18u].z, fma(_1812, cbModelParam._m0[18u].y, _1811 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1813, cbModelParam._m0[19u].z, fma(_1812, cbModelParam._m0[19u].y, _1811 * cbModelParam._m0[19u].x))), _1226);
            frontier_phi_22_46_ladder = _2012.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2012.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2012.x * cbModelParam._m0[1u].z;
        }
        _1319 = frontier_phi_22_46_ladder_2;
        _1321 = frontier_phi_22_46_ladder_1;
        _1323 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1303 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_358, _359, _360), _1226);
        _1319 = _1303.x * cbModelParam._m0[1u].z;
        _1321 = _1303.y * cbModelParam._m0[1u].z;
        _1323 = _1303.z * cbModelParam._m0[1u].z;
    }
    float _1335 = _349 * 0.01200000010430812835693359375;
    float _1337 = _1335 * ((cbModelParam._m0[1u].w * (_1319 - _1219)) + _1219);
    float _1338 = _1335 * ((cbModelParam._m0[1u].w * (_1321 - _1221)) + _1221);
    float _1339 = _1335 * ((cbModelParam._m0[1u].w * (_1323 - _1223)) + _1223);
    float _1342 = fma(_1339, cbSceneParam._m0[89u].z, fma(_1338, cbSceneParam._m0[89u].y, _1337 * cbSceneParam._m0[89u].x));
    float _1345 = fma(_1339, cbSceneParam._m0[90u].z, fma(_1338, cbSceneParam._m0[90u].y, _1337 * cbSceneParam._m0[90u].x));
    float _1348 = fma(_1339, cbSceneParam._m0[91u].z, fma(_1338, cbSceneParam._m0[91u].y, _1337 * cbSceneParam._m0[91u].x));
    uvec4 _1358 = floatBitsToUint(cbInstanceData._m0[_323 + 5u]);
    uint _1360 = _1358.x * 14u;
    uint _1361 = _1360 + 13u;
    float _1368 = _349 + (-1.0);
    float _1374 = (cbLight._m0[_1361].x * _1368) + 1.0;
    float _1375 = (cbLight._m0[_1361].y * _1368) + 1.0;
    float _1376 = (cbLight._m0[_1361].z * _1368) + 1.0;
    float _1377 = (cbLight._m0[_1361].w * _1368) + 1.0;
    uint _1378 = _1360 + 5u;
    float _1384 = isnan(1.0) ? _1375 : (isnan(_1375) ? 1.0 : min(_1375, 1.0));
    uint _1388 = _1360 + 4u;
    float _1395 = isnan(1.0) ? _1374 : (isnan(_1374) ? 1.0 : min(_1374, 1.0));
    uint _1399 = _1360 | 1u;
    float _1410 = dot(vec3(cbLight._m0[_1360].xyz), vec3(_193, _194, _195));
    float _1413 = dot(vec3(cbLight._m0[_1399].xyz), vec3(_193, _194, _195));
    float _3237 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
    float _3248 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
    float _1418 = (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0))) * 0.3183098733425140380859375;
    float _1420 = (isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))) * 0.3183098733425140380859375;
    float _1427 = ((cbLight._m0[_1378].x * _1384) * _1420) + ((cbLight._m0[_1388].x * _1395) * _1418);
    float _1428 = ((_1384 * cbLight._m0[_1378].y) * _1420) + ((_1395 * cbLight._m0[_1388].y) * _1418);
    float _1429 = ((_1384 * cbLight._m0[_1378].z) * _1420) + ((_1395 * cbLight._m0[_1388].z) * _1418);
    uvec4 _1434 = floatBitsToUint(cbLight._m0[_1360 + 12u]);
    bool _1436 = _1434.x == 0u;
    float _1447;
    float _1449;
    float _1451;
    if (_1436)
    {
        _1447 = _1427;
        _1449 = _1428;
        _1451 = _1429;
    }
    else
    {
        uint _1455 = _1360 + 6u;
        float _1471 = (dot(vec3(cbLight._m0[_1360 + 2u].xyz), vec3(_193, _194, _195)) * 0.5) + 0.5;
        float _1472 = _1471 * _1471;
        float _3259 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
        float _1474 = isnan(1.0) ? _1376 : (isnan(_1376) ? 1.0 : min(_1376, 1.0));
        _1447 = (((cbLight._m0[_1455].x * 0.3183098733425140380859375) * _1473) * _1474) + _1427;
        _1449 = (((cbLight._m0[_1455].y * 0.3183098733425140380859375) * _1473) * _1474) + _1428;
        _1451 = (((cbLight._m0[_1455].z * 0.3183098733425140380859375) * _1473) * _1474) + _1429;
    }
    bool _1454 = _1434.y == 0u;
    float _1492;
    float _1494;
    float _1496;
    if (_1454)
    {
        _1492 = _1447;
        _1494 = _1449;
        _1496 = _1451;
    }
    else
    {
        uint _1597 = _1360 + 7u;
        float _1613 = (dot(vec3(cbLight._m0[_1360 + 3u].xyz), vec3(_193, _194, _195)) * 0.5) + 0.5;
        float _1614 = _1613 * _1613;
        float _3275 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _1616 = isnan(1.0) ? _1377 : (isnan(_1377) ? 1.0 : min(_1377, 1.0));
        _1492 = (((cbLight._m0[_1597].x * 0.3183098733425140380859375) * _1615) * _1616) + _1447;
        _1494 = (((cbLight._m0[_1597].y * 0.3183098733425140380859375) * _1615) * _1616) + _1449;
        _1496 = (((cbLight._m0[_1597].z * 0.3183098733425140380859375) * _1615) * _1616) + _1451;
    }
    uint _1498 = _1360 + 8u;
    float _1504 = cbLight._m0[_1360].x + _274;
    float _1505 = cbLight._m0[_1360].y + _275;
    float _1506 = cbLight._m0[_1360].z + _276;
    float _1510 = inversesqrt(dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506)));
    float _1514 = dot(vec3(_193, _194, _195), vec3(cbLight._m0[_1360].xyz));
    float _3291 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
    float _1517 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _1518 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _1519 = dot(vec3(cbLight._m0[_1360].xyz), vec3(_1504 * _1510, _1505 * _1510, _1506 * _1510));
    float _3313 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
    float _1530 = (exp2(log2(1.0 - (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1536 = (0.5 / ((_1517 + 9.9999999392252902907785028219223e-09) + _1518)) * _1517;
    float _3324 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
    float _1538 = (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * 0.31831014156341552734375;
    uint _1549 = _1360 + 9u;
    float _1555 = cbLight._m0[_1399].x + _274;
    float _1556 = cbLight._m0[_1399].y + _275;
    float _1557 = cbLight._m0[_1399].z + _276;
    float _1561 = inversesqrt(dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557)));
    float _1565 = dot(vec3(_193, _194, _195), vec3(cbLight._m0[_1399].xyz));
    float _3335 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _1568 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _1569 = dot(vec3(cbLight._m0[_1399].xyz), vec3(_1555 * _1561, _1556 * _1561, _1557 * _1561));
    float _3346 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _1578 = (exp2(log2(1.0 - (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1582 = (0.5 / ((_1568 + 9.9999999392252902907785028219223e-09) + _1518)) * _1568;
    float _3357 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
    float _1584 = (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) * 0.31831014156341552734375;
    float _1594 = (((_1578 * cbLight._m0[_1549].x) * _1584) * _1384) + (((_1530 * cbLight._m0[_1498].x) * _1538) * _1395);
    float _1595 = (((_1578 * cbLight._m0[_1549].y) * _1584) * _1384) + (((_1530 * cbLight._m0[_1498].y) * _1538) * _1395);
    float _1596 = (((_1578 * cbLight._m0[_1549].z) * _1584) * _1384) + (((_1530 * cbLight._m0[_1498].z) * _1538) * _1395);
    float _1658;
    float _1660;
    float _1662;
    if (_1436)
    {
        _1658 = _1594;
        _1660 = _1595;
        _1662 = _1596;
    }
    else
    {
        uint _1664 = _1360 + 10u;
        uint _1670 = _1360 + 2u;
        float _1676 = cbLight._m0[_1670].x + _274;
        float _1677 = cbLight._m0[_1670].y + _275;
        float _1678 = cbLight._m0[_1670].z + _276;
        float _1682 = inversesqrt(dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678)));
        float _1686 = dot(vec3(_193, _194, _195), vec3(cbLight._m0[_1670].xyz));
        float _3368 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1689 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _1690 = dot(vec3(cbLight._m0[_1670].xyz), vec3(_1676 * _1682, _1677 * _1682, _1678 * _1682));
        float _3379 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = (exp2(log2(1.0 - (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1703 = (0.5 / ((_1689 + 9.9999999392252902907785028219223e-09) + _1518)) * _1689;
        float _3390 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1705 = (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * 0.31831014156341552734375;
        float _1706 = isnan(1.0) ? _1376 : (isnan(_1376) ? 1.0 : min(_1376, 1.0));
        _1658 = (((_1699 * cbLight._m0[_1664].x) * _1705) * _1706) + _1594;
        _1660 = (((_1699 * cbLight._m0[_1664].y) * _1705) * _1706) + _1595;
        _1662 = (((_1699 * cbLight._m0[_1664].z) * _1705) * _1706) + _1596;
    }
    float _1741;
    float _1743;
    float _1745;
    if (_1454)
    {
        _1741 = _1658;
        _1743 = _1660;
        _1745 = _1662;
    }
    else
    {
        uint _1752 = _1360 + 11u;
        uint _1758 = _1360 + 3u;
        float _1764 = cbLight._m0[_1758].x + _274;
        float _1765 = cbLight._m0[_1758].y + _275;
        float _1766 = cbLight._m0[_1758].z + _276;
        float _1770 = inversesqrt(dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766)));
        float _1774 = dot(vec3(_193, _194, _195), vec3(cbLight._m0[_1758].xyz));
        float _3406 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1777 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _1778 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_1764 * _1770, _1765 * _1770, _1766 * _1770));
        float _3417 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = (exp2(log2(1.0 - (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1791 = (0.5 / ((_1777 + 9.9999999392252902907785028219223e-09) + _1518)) * _1777;
        float _3428 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1793 = (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) * 0.31831014156341552734375;
        float _1794 = isnan(1.0) ? _1377 : (isnan(_1377) ? 1.0 : min(_1377, 1.0));
        _1741 = (((_1787 * cbLight._m0[_1752].x) * _1793) * _1794) + _1658;
        _1743 = (((_1787 * cbLight._m0[_1752].y) * _1793) * _1794) + _1660;
        _1745 = (((_1787 * cbLight._m0[_1752].z) * _1793) * _1794) + _1662;
    }
    float _1929;
    float _1931;
    float _1933;
    float _1935;
    float _1937;
    float _1939;
    if (_1358.y == 0u)
    {
        float _1869 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1870 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1869;
        float _1871 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1869;
        float _1872 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1869;
        uvec4 _1884 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1885 = _1884.x;
        uint _1896 = uint((float(_1884.y) * floor(float(uint(cbSceneParam._m0[85u].y * _283) / _1885))) + floor(float(uint(cbSceneParam._m0[85u].x * _282) / _1885)));
        float _1906 = (log2(_1872 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1907 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        uint _1910 = uint(isnan(14.0) ? _1907 : (isnan(_1907) ? 14.0 : min(_1907, 14.0)));
        uvec4 _1915 = texelFetch(g_lightClusterGridBuffer, int(((_1910 << 2u) + (_1896 << 6u)) >> 2u));
        uint _1916 = _1915.x;
        uint _1917 = _1884.z;
        float _2017;
        float _2019;
        float _2021;
        float _2023;
        float _2025;
        float _2027;
        if (((((1u << ((_1917 >> 4u) & 15u)) + 4294967295u) & _1916) == 0u) || ((_1917 & 240u) == 0u))
        {
            _2017 = 0.0;
            _2019 = 0.0;
            _2021 = 0.0;
            _2023 = 0.0;
            _2025 = 0.0;
            _2027 = 0.0;
        }
        else
        {
            float _2018;
            float _2020;
            float _2022;
            float _2024;
            float _2026;
            float _2028;
            float _2160 = 0.0;
            float _2161 = 0.0;
            float _2162 = 0.0;
            float _2163 = 0.0;
            float _2164 = 0.0;
            float _2165 = 0.0;
            uint _2166 = 0u;
            uint _2175;
            bool _2176;
            for (;;)
            {
                _2175 = texelFetch(g_lightClassification, int((((_1910 << 5u) + (_1896 << 9u)) + (_2166 << 2u)) >> 2u)).x;
                _2176 = _2175 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2176)
                {
                    frontier_phi_61_pred = _2160;
                    frontier_phi_61_pred_1 = _2165;
                    frontier_phi_61_pred_2 = _2164;
                    frontier_phi_61_pred_3 = _2163;
                    frontier_phi_61_pred_4 = _2162;
                    frontier_phi_61_pred_5 = _2161;
                }
                else
                {
                    float _2284;
                    float _2285;
                    float _2286;
                    float _2287;
                    float _2288;
                    float _2289;
                    uint _2290;
                    _2284 = _2160;
                    _2285 = _2161;
                    _2286 = _2162;
                    _2287 = _2163;
                    _2288 = _2164;
                    _2289 = _2165;
                    _2290 = _2175;
                    float _2216;
                    float _2217;
                    float _2218;
                    float _2219;
                    float _2220;
                    float _2221;
                    for (;;)
                    {
                        uint _2294 = uint(findLSB(_2290)) + (_2166 << 5u);
                        uint _2291 = (_2290 + 4294967295u) & _2290;
                        uint _2296 = _2294 * 48u;
                        vec4 _2310 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2296)).x, texelFetch(g_PointLightRenderingBuffer, int(_2296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2296 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2296 + 3u)).x));
                        uint _2316 = (_2294 * 48u) + 4u;
                        vec4 _2329 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2316)).x, texelFetch(g_PointLightRenderingBuffer, int(_2316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2316 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2316 + 3u)).x));
                        uint _2335 = (_2294 * 48u) + 8u;
                        vec3 _2346 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2335)).x, texelFetch(g_PointLightRenderingBuffer, int(_2335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2335 + 2u)).x));
                        float _2350 = _2310.x - _1870;
                        float _2351 = _2310.y - _1871;
                        float _2352 = _2310.z - _1872;
                        float _2353 = dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352));
                        float _2356 = inversesqrt(_2353);
                        float _2365 = 1.0 - (_2353 * _2310.w);
                        float _3454 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
                        float _2366 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
                        float _2367 = sqrt(_2353) * _2329.w;
                        float _2370 = 1.39999997615814208984375 / (_2367 + 1.39999997615814208984375);
                        float _2371 = _2370 * _2370;
                        float _2374 = ((1.0 - _2371) * dot(vec3(_304, _307, _310), vec3(_2356 * _2350, _2356 * _2351, _2356 * _2352))) + _2371;
                        float _2377 = _2367 * _2367;
                        float _2381 = ((isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0))) * _2366) / ((_2377 * 0.699999988079071044921875) + 1.0);
                        float _2385 = (-0.0) - _1870;
                        float _2386 = (-0.0) - _1871;
                        float _2387 = (-0.0) - _1872;
                        float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
                        float _2395 = dot(vec3(_304, _307, _310), vec3(_2391 * _2385, _2391 * _2386, _2391 * _2387));
                        float _3470 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
                        float _3481 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
                        float _2399 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
                        float _2403 = (0.5 / (((isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) + 9.9999999392252902907785028219223e-09) + _2399)) * _2399;
                        float _3492 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
                        float _2412 = (((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 3.1415927410125732421875) / ((_2377 * 2.1991131305694580078125) + 3.141590118408203125)) * _2366;
                        _2219 = (_2381 * _2329.x) + _2287;
                        _2220 = (_2381 * _2329.y) + _2288;
                        _2221 = (_2381 * _2329.z) + _2289;
                        _2216 = (_2412 * _2346.x) + _2284;
                        _2217 = (_2412 * _2346.y) + _2285;
                        _2218 = (_2412 * _2346.z) + _2286;
                        if (_2291 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2284 = _2216;
                            _2285 = _2217;
                            _2286 = _2218;
                            _2287 = _2219;
                            _2288 = _2220;
                            _2289 = _2221;
                            _2290 = _2291;
                        }
                    }
                    frontier_phi_61_pred = _2216;
                    frontier_phi_61_pred_1 = _2221;
                    frontier_phi_61_pred_2 = _2220;
                    frontier_phi_61_pred_3 = _2219;
                    frontier_phi_61_pred_4 = _2218;
                    frontier_phi_61_pred_5 = _2217;
                }
                _2018 = frontier_phi_61_pred;
                _2028 = frontier_phi_61_pred_1;
                _2026 = frontier_phi_61_pred_2;
                _2024 = frontier_phi_61_pred_3;
                _2022 = frontier_phi_61_pred_4;
                _2020 = frontier_phi_61_pred_5;
                uint _2167 = _2166 + 1u;
                if (_2167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2160 = _2018;
                    _2161 = _2020;
                    _2162 = _2022;
                    _2163 = _2024;
                    _2164 = _2026;
                    _2165 = _2028;
                    _2166 = _2167;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2017 = _2018;
            _2019 = _2020;
            _2021 = _2022;
            _2023 = _2024;
            _2025 = _2026;
            _2027 = _2028;
        }
        uvec4 _2031 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2032 = _2031.z;
        uint _2034 = (_2032 >> 8u) & 15u;
        float _2131;
        float _2133;
        float _2135;
        float _2137;
        float _2139;
        float _2141;
        if (((4294967295u << _2034) & _1916) == 0u)
        {
            _2131 = _2017;
            _2133 = _2019;
            _2135 = _2021;
            _2137 = _2023;
            _2139 = _2025;
            _2141 = _2027;
        }
        else
        {
            float _2156 = inversesqrt(dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2034 < ((_2032 >> 12u) & 15u))
            {
                float _2132;
                float _2134;
                float _2136;
                float _2138;
                float _2140;
                float _2142;
                float _2267 = _2017;
                float _2268 = _2019;
                float _2269 = _2021;
                float _2270 = _2023;
                float _2271 = _2025;
                float _2272 = _2027;
                uint _2273 = _2034;
                uint _2282;
                bool _2283;
                for (;;)
                {
                    _2282 = texelFetch(g_lightClassification, int((((_1910 << 5u) + (_1896 << 9u)) + (_2273 << 2u)) >> 2u)).x;
                    _2283 = _2282 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2283)
                    {
                        frontier_phi_67_pred = _2270;
                        frontier_phi_67_pred_1 = _2271;
                        frontier_phi_67_pred_2 = _2272;
                        frontier_phi_67_pred_3 = _2269;
                        frontier_phi_67_pred_4 = _2268;
                        frontier_phi_67_pred_5 = _2267;
                    }
                    else
                    {
                        float _2417;
                        float _2418;
                        float _2419;
                        float _2420;
                        float _2421;
                        float _2422;
                        float _2669;
                        float _2670;
                        float _2671;
                        float _2672;
                        float _2673;
                        float _2674;
                        float _2430 = _2267;
                        float _2431 = _2268;
                        float _2432 = _2269;
                        float _2433 = _2270;
                        float _2434 = _2271;
                        float _2435 = _2272;
                        uint _2436 = _2282;
                        uint _2437;
                        vec4 _2462;
                        float _2463;
                        vec4 _2478;
                        vec3 _2490;
                        vec4 _2506;
                        vec4 _2522;
                        float _2569;
                        bool _2570;
                        for (;;)
                        {
                            uint _2447 = ((_2273 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2436));
                            _2437 = (_2436 + 4294967295u) & _2436;
                            uint _2449 = _2447 * 40u;
                            _2462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 3u)).x));
                            _2463 = _2462.w;
                            uint _2465 = (_2447 * 40u) + 4u;
                            _2478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 3u)).x));
                            uint _2480 = (_2447 * 40u) + 8u;
                            _2490 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 2u)).x));
                            uint _2493 = (_2447 * 40u) + 16u;
                            _2506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 3u)).x));
                            uint _2509 = (_2447 * 40u) + 20u;
                            _2522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 3u)).x));
                            uint _2525 = (_2447 * 40u) + 24u;
                            vec4 _2538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 3u)).x));
                            uint _2544 = (_2447 * 40u) + 28u;
                            vec4 _2557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 3u)).x));
                            _2569 = fma(_1872, _2557.z, fma(_1871, _2557.y, _2557.x * _1870)) + _2557.w;
                            _2570 = !((fma(_1872, _2538.z, fma(_1871, _2538.y, _2538.x * _1870)) + _2538.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2570)
                            {
                                float _2597 = _2462.x - _1870;
                                float _2598 = _2462.y - _1871;
                                float _2599 = _2462.z - _1872;
                                float _2600 = dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599));
                                float _2603 = inversesqrt(_2600);
                                float _2604 = _2603 * _2597;
                                float _2605 = _2603 * _2598;
                                float _2606 = _2603 * _2599;
                                float _2610 = 1.0 - (_2600 / (_2463 * _2463));
                                float _3503 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
                                float _2611 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
                                float _2615 = sqrt(_2600) * _2478.w;
                                float _2617 = 1.39999997615814208984375 / (_2615 + 1.39999997615814208984375);
                                float _2618 = _2617 * _2617;
                                float _2619 = 1.0 - _2618;
                                float _2621 = (_2619 * dot(vec3(_2604, _2605, _2606), vec3(_304, _307, _310))) + _2618;
                                float _2624 = _2615 * _2615;
                                float _2628 = (fma(_1872, _2506.z, fma(_1871, _2506.y, _2506.x * _1870)) + _2506.w) / _2569;
                                float _2629 = (fma(_1872, _2522.z, fma(_1871, _2522.y, _2522.x * _1870)) + _2522.w) / _2569;
                                float _2633 = 1.0 - dot(vec2(_2628, _2629), vec2(_2628, _2629));
                                float _3519 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
                                float _2634 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
                                float _2635 = _2634 * (((isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0))) * _2611) / ((_2624 * 0.699999988079071044921875) + 1.0));
                                float _2645 = dot(vec3(_304, _307, _310), vec3((-0.0) - (_1870 * _2156), (-0.0) - (_1871 * _2156), (-0.0) - (_1872 * _2156)));
                                float _3530 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
                                float _2653 = (_2619 * dot(vec3(_304, _307, _310), vec3(_2604, _2605, _2606))) + _2618;
                                float _3541 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
                                float _2654 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
                                float _2658 = (0.5 / (((isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) + 9.9999999392252902907785028219223e-09) + _2654)) * _2654;
                                float _3552 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
                                float _2665 = (_2634 * _2611) * (((isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * 3.1415927410125732421875) / ((_2624 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2665 * _2490.x;
                                frontier_phi_73_pred_1 = _2665 * _2490.y;
                                frontier_phi_73_pred_2 = _2635 * _2478.z;
                                frontier_phi_73_pred_3 = _2635 * _2478.y;
                                frontier_phi_73_pred_4 = _2635 * _2478.x;
                                frontier_phi_73_pred_5 = _2665 * _2490.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2669 = frontier_phi_73_pred;
                            _2670 = frontier_phi_73_pred_1;
                            _2674 = frontier_phi_73_pred_2;
                            _2673 = frontier_phi_73_pred_3;
                            _2672 = frontier_phi_73_pred_4;
                            _2671 = frontier_phi_73_pred_5;
                            _2420 = _2672 + _2433;
                            _2421 = _2673 + _2434;
                            _2422 = _2674 + _2435;
                            _2417 = _2669 + _2430;
                            _2418 = _2670 + _2431;
                            _2419 = _2671 + _2432;
                            if (_2437 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2430 = _2417;
                                _2431 = _2418;
                                _2432 = _2419;
                                _2433 = _2420;
                                _2434 = _2421;
                                _2435 = _2422;
                                _2436 = _2437;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2420;
                        frontier_phi_67_pred_1 = _2421;
                        frontier_phi_67_pred_2 = _2422;
                        frontier_phi_67_pred_3 = _2419;
                        frontier_phi_67_pred_4 = _2418;
                        frontier_phi_67_pred_5 = _2417;
                    }
                    _2138 = frontier_phi_67_pred;
                    _2140 = frontier_phi_67_pred_1;
                    _2142 = frontier_phi_67_pred_2;
                    _2136 = frontier_phi_67_pred_3;
                    _2134 = frontier_phi_67_pred_4;
                    _2132 = frontier_phi_67_pred_5;
                    uint _2274 = _2273 + 1u;
                    if (_2274 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2267 = _2132;
                        _2268 = _2134;
                        _2269 = _2136;
                        _2270 = _2138;
                        _2271 = _2140;
                        _2272 = _2142;
                        _2273 = _2274;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2140;
                frontier_phi_55_56_ladder_1 = _2142;
                frontier_phi_55_56_ladder_2 = _2138;
                frontier_phi_55_56_ladder_3 = _2136;
                frontier_phi_55_56_ladder_4 = _2134;
                frontier_phi_55_56_ladder_5 = _2132;
            }
            else
            {
                frontier_phi_55_56_ladder = _2025;
                frontier_phi_55_56_ladder_1 = _2027;
                frontier_phi_55_56_ladder_2 = _2023;
                frontier_phi_55_56_ladder_3 = _2021;
                frontier_phi_55_56_ladder_4 = _2019;
                frontier_phi_55_56_ladder_5 = _2017;
            }
            _2131 = frontier_phi_55_56_ladder_5;
            _2133 = frontier_phi_55_56_ladder_4;
            _2135 = frontier_phi_55_56_ladder_3;
            _2137 = frontier_phi_55_56_ladder_2;
            _2139 = frontier_phi_55_56_ladder;
            _2141 = frontier_phi_55_56_ladder_1;
        }
        float _2146 = isnan(1.0) ? _349 : (isnan(_349) ? 1.0 : min(_349, 1.0));
        _1929 = (_2146 * _2137) + _1492;
        _1931 = (_2146 * _2139) + _1494;
        _1933 = (_2146 * _2141) + _1496;
        _1935 = ((_2131 * 0.039999999105930328369140625) * _2146) + _1741;
        _1937 = ((_2133 * 0.039999999105930328369140625) * _2146) + _1743;
        _1939 = ((_2135 * 0.039999999105930328369140625) * _2146) + _1745;
    }
    else
    {
        _1929 = _1492;
        _1931 = _1494;
        _1933 = _1496;
        _1935 = _1741;
        _1937 = _1743;
        _1939 = _1745;
    }
    float _3568 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3579 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3590 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    uint _1959 = _323 + 6u;
    float _1967 = _282 / cbSceneParam._m0[86u].x;
    float _1968 = _283 / cbSceneParam._m0[86u].y;
    vec4 _1982 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1967, _1968, (log2((isnan(cbSceneParam._m0[77u].w) ? _215 : (isnan(_215) ? cbSceneParam._m0[77u].w : min(_215, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1984 = _1982.x;
    float _1985 = _1982.y;
    float _1986 = _1982.z;
    float _1987 = _1982.w;
    float _2080;
    float _2082;
    float _2084;
    float _2086;
    if (_215 > cbSceneParam._m0[78u].w)
    {
        float _2042 = isnan(_215) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _215 : min(cbSceneParam._m0[80u].w, _215));
        float _2043 = _2042 / _215;
        float _2054 = _2043 * _267;
        float _2055 = _268 * _2043;
        float _2056 = (-0.0) - _2055;
        float _2058 = _2043 * _269;
        float _2060 = (cbSceneParam._m0[77u].w * _2056) / _2042;
        float _2061 = _2060 + cbSceneParam._m0[79u].w;
        float _2062 = cbSceneParam._m0[79u].w - _2055;
        float _2068 = sqrt(((_2054 * _2054) + (_2055 * _2055)) + (_2058 * _2058));
        float _2071 = (1.0 - (cbSceneParam._m0[77u].w / _2042)) * _2068;
        float _2076 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2078 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2229;
        if (abs((_2056 - _2060) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2229 = ((((_2061 > 0.0) ? exp2(_2076 * _2061) : (2.0 - exp2(_2078 * _2061))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2071;
        }
        else
        {
            float _2189 = 1.0 / cbSceneParam._m0[80u].x;
            float _2190 = isnan(_2062) ? _2061 : (isnan(_2061) ? _2062 : max(_2061, _2062));
            float _2191 = isnan(_2062) ? _2061 : (isnan(_2061) ? _2062 : min(_2061, _2062));
            float _2200 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : min(_2190, 0.0));
            float _2201 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : min(_2191, 0.0));
            _2229 = ((abs(_2068 / _2056) * cbSceneParam._m0[80u].y) * ((((_2200 - _2201) * 2.0) - ((exp2(_2076 * (isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0)))) - exp2(_2076 * (isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0))))) * _2189)) - ((exp2(_2078 * _2200) - exp2(_2078 * _2201)) * _2189))) + (_2071 * cbSceneParam._m0[80u].z);
        }
        vec4 _2231 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1967, _1968, 1.0), 0.0);
        float _2240 = exp2((_2229 * (-1.44269502162933349609375)) * (1.0 - _2231.w));
        float _2241 = log2(_2240);
        float _2257 = log2(_1987);
        _2080 = (exp2(_2257 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2241 * cbSceneParam._m0[78u].x)) * _2231.x) / cbSceneParam._m0[78u].x)) + _1984;
        _2082 = (exp2(_2257 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2241 * cbSceneParam._m0[78u].y)) * _2231.y) / cbSceneParam._m0[78u].y)) + _1985;
        _2084 = (exp2(_2257 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2241 * cbSceneParam._m0[78u].z)) * _2231.z) / cbSceneParam._m0[78u].z)) + _1986;
        _2086 = _2240 * _1987;
    }
    else
    {
        _2080 = _1984;
        _2082 = _1985;
        _2084 = _1986;
        _2086 = _1987;
    }
    float _2098 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2099 = _2098 == 3.0;
    float _2101 = log2(_2086);
    float _2108 = exp2(_2101 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_1929 + ((isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0))) * _349))) + ((_1935 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _1128)) * cbPerFrame._m0[3u].x));
    float _2109 = exp2(_2101 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1931 + ((isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0))) * _349))) + ((_1937 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _1128)) * cbPerFrame._m0[3u].x));
    float _2110 = exp2(_2101 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_1933 + ((isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0))) * _349))) + ((_1939 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _1128)) * cbPerFrame._m0[3u].x));
    float _2119 = (_2098 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2119 * (_2099 ? _2108 : (_2108 + (cbSceneParam._m0[72u].w * _2080)));
    SV_Target.y = _2119 * (_2099 ? _2109 : (_2109 + (cbSceneParam._m0[72u].w * _2082)));
    SV_Target.z = _2119 * (_2099 ? _2110 : (_2110 + (cbSceneParam._m0[72u].w * _2084)));
    SV_Target.w = cbInstanceData._m0[_1959].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1959].w;
}


