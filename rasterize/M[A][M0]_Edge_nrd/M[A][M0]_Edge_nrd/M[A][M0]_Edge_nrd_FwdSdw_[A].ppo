#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_nrd_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _743;
float _3192;
float _3193;
float _3194;
float _3195;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    vec4 _188 = texture(sampler2D(M_A_M0_Edge_nrd_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _188.w;
    float _195 = _188.x * cbMtdParam._m0[9u].x;
    float _196 = _188.y * cbMtdParam._m0[9u].y;
    float _197 = _188.z * cbMtdParam._m0[9u].z;
    float _201 = inversesqrt(dot(vec3(_166, _167, _168), vec3(_166, _167, _168)));
    float _202 = _201 * _166;
    float _203 = _201 * _167;
    float _204 = _201 * _168;
    float _3204 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _3215 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3226 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _224 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    float _282 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _283 = _276 * _282;
    float _284 = _277 * _282;
    float _285 = _278 * _282;
    vec4 _290 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _292 = _290.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _422 = sqrt(((_276 * _276) + (_277 * _277)) + (_278 * _278));
        float _428 = (cbMatDynParam._m0[5u].x * _422) + cbMatDynParam._m0[5u].y;
        float _3237 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
        float _429 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _433 = (cbMatDynParam._m0[5u].z * _422) + cbMatDynParam._m0[5u].w;
        float _3248 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))) - _429)) + _429) < ((_292 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _304 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _305 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _325 = fma(_204, cbSceneParam._m0[5u].z, fma(_203, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _202));
    float _328 = fma(_204, cbSceneParam._m0[6u].z, fma(_203, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _202));
    float _331 = fma(_204, cbSceneParam._m0[7u].z, fma(_203, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _202));
    uint _344 = uint(roundEven(NORMAL.w)) * 13u;
    uint _346 = _344 + 9u;
    uint _347 = _346 + uint(cbMatDynParam._m0[0u].w);
    float _353 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0)))) * cbInstanceData._m0[_347].x;
    float _354 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0)))) * cbInstanceData._m0[_347].y;
    float _355 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_347].z;
    float _3259 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _356 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    float _3270 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _357 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
    float _3281 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _358 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
    vec4 _367 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _304, cbSceneParam._m0[86u].y * _305));
    float _370 = _367.x * TEXCOORD.z;
    float _371 = dot(vec3(_202, _203, _204), vec3(_283, _284, _285));
    float _374 = _371 * 2.0;
    float _379 = (_374 * _202) - _283;
    float _380 = (_374 * _203) - _284;
    float _381 = (_374 * _204) - _285;
    float _403 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _407 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _411 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _742;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _467 = fma(_411, cbModelParam._m0[26u].z, fma(_407, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _403));
        float _471 = fma(_411, cbModelParam._m0[27u].z, fma(_407, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _403));
        float _475 = fma(_411, cbModelParam._m0[28u].z, fma(_407, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _403));
        float _500 = _403 + _202;
        float _501 = _407 + _203;
        float _502 = _411 + _204;
        float _512 = fma(_502, cbModelParam._m0[26u].z, fma(_501, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _500)) - _467;
        float _513 = fma(_502, cbModelParam._m0[27u].z, fma(_501, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _500)) - _471;
        float _514 = fma(_502, cbModelParam._m0[28u].z, fma(_501, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _500)) - _475;
        float _518 = inversesqrt(dot(vec3(_512, _513, _514), vec3(_512, _513, _514)));
        float _531 = ((_518 * _512) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_467 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _532 = ((_518 * _513) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_471 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _533 = ((_518 * _514) / cbModelParam._m0[34u].z) + ((((((_475 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _536 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_531, _532, _533), 0.0);
        vec4 _543 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_531, _532, _533), 0.0);
        vec4 _550 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_531, _532, _533), 0.0);
        vec4 _557 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_531, _532, _533), 0.0);
        float _570 = exp2((_536.w + (-0.5)) * 20.0) * 2.0;
        float _571 = _570 * (_536.x + (-0.5));
        float _572 = _570 * (_536.y + (-0.5));
        float _573 = _570 * (_536.z + (-0.5));
        float _580 = exp2((_543.w + (-0.5)) * 20.0) * 2.0;
        float _581 = _580 * (_543.x + (-0.5));
        float _582 = _580 * (_543.y + (-0.5));
        float _583 = _580 * (_543.z + (-0.5));
        float _590 = exp2((_550.w + (-0.5)) * 20.0) * 2.0;
        float _591 = _590 * (_550.x + (-0.5));
        float _592 = _590 * (_550.y + (-0.5));
        float _593 = _590 * (_550.z + (-0.5));
        float _600 = exp2((_557.w + (-0.5)) * 20.0) * 2.0;
        float _601 = _600 * (_557.x + (-0.5));
        float _602 = _600 * (_557.y + (-0.5));
        float _603 = _600 * (_557.z + (-0.5));
        float _604 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _605 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        float _606 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _607 = _571 * 0.5;
        float _608 = _581 * 0.5;
        float _609 = _591 * 0.5;
        float _610 = dot(vec3(_607, _608, _609), vec3(_607, _608, _609));
        float _615 = (_610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_610);
        float _624 = (dot(vec3(_202, _203, _204), vec3(_615 * _607, _615 * _608, _615 * _609)) + 1.0) * 0.5;
        float _3307 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _634 = sqrt(((_608 * _608) + (_607 * _607)) + (_609 * _609)) / (_604 + 9.9999997473787516355514526367188e-06);
        float _3318 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _635 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
        float _636 = _635 * 2.0;
        float _640 = (1.0 - _635) / (_635 + 1.0);
        float _3329 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _641 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _650 = ((((1.0 - _641) * (_636 + 2.0)) * exp2(log2(isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) * (_636 + 1.0))) + _641) * _604;
        float _651 = _572 * 0.5;
        float _652 = _582 * 0.5;
        float _653 = _592 * 0.5;
        float _654 = dot(vec3(_651, _652, _653), vec3(_651, _652, _653));
        float _659 = (_654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_654);
        float _667 = (dot(vec3(_202, _203, _204), vec3(_659 * _651, _659 * _652, _659 * _653)) + 1.0) * 0.5;
        float _3340 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _676 = sqrt(((_652 * _652) + (_651 * _651)) + (_653 * _653)) / (_605 + 9.9999997473787516355514526367188e-06);
        float _3351 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _677 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _678 = _677 * 2.0;
        float _682 = (1.0 - _677) / (_677 + 1.0);
        float _3362 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _683 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _692 = ((((1.0 - _683) * (_678 + 2.0)) * exp2(log2(isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * (_678 + 1.0))) + _683) * _605;
        float _693 = _573 * 0.5;
        float _694 = _583 * 0.5;
        float _695 = _593 * 0.5;
        float _696 = dot(vec3(_693, _694, _695), vec3(_693, _694, _695));
        float _701 = (_696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_696);
        float _709 = (dot(vec3(_202, _203, _204), vec3(_701 * _693, _701 * _694, _701 * _695)) + 1.0) * 0.5;
        float _3373 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _718 = sqrt(((_694 * _694) + (_693 * _693)) + (_695 * _695)) / (_606 + 9.9999997473787516355514526367188e-06);
        float _3384 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _720 = _719 * 2.0;
        float _724 = (1.0 - _719) / (_719 + 1.0);
        float _3395 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _734 = ((((1.0 - _725) * (_720 + 2.0)) * exp2(log2(isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * (_720 + 1.0))) + _725) * _606;
        _742 = _573;
        _744 = _572;
        _745 = _571;
        _746 = _583;
        _747 = _582;
        _748 = _581;
        _749 = _593;
        _750 = _592;
        _751 = _591;
        _752 = _606;
        _753 = _605;
        _754 = _604;
        _755 = cbModelParam._m0[36u].z * (isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0)));
        _756 = cbModelParam._m0[36u].z * (isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0)));
        _757 = cbModelParam._m0[36u].z * (isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0)));
    }
    else
    {
        _742 = _743;
        _744 = _743;
        _745 = _743;
        _746 = _743;
        _747 = _743;
        _748 = _743;
        _749 = _743;
        _750 = _743;
        _751 = _743;
        _752 = _743;
        _753 = _743;
        _754 = _743;
        _755 = 0.0;
        _756 = 0.0;
        _757 = 0.0;
    }
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _786 = fma(_411, cbModelParam._m0[30u].z, fma(_407, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _403));
        float _790 = fma(_411, cbModelParam._m0[31u].z, fma(_407, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _403));
        float _794 = fma(_411, cbModelParam._m0[32u].z, fma(_407, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _403));
        float _817 = _403 + _202;
        float _818 = _407 + _203;
        float _819 = _411 + _204;
        float _829 = fma(_819, cbModelParam._m0[30u].z, fma(_818, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _817)) - _786;
        float _830 = fma(_819, cbModelParam._m0[31u].z, fma(_818, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _817)) - _790;
        float _831 = fma(_819, cbModelParam._m0[32u].z, fma(_818, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _817)) - _794;
        float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
        float _848 = ((_835 * _829) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_786 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_835 * _830) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_790 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_835 * _831) / cbModelParam._m0[35u].z) + ((((((_794 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        float _885 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_852.x + (-0.5));
        float _887 = _885 * (_852.y + (-0.5));
        float _888 = _885 * (_852.z + (-0.5));
        float _895 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_859.x + (-0.5));
        float _897 = _895 * (_859.y + (-0.5));
        float _898 = _895 * (_859.z + (-0.5));
        float _905 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_866.x + (-0.5));
        float _907 = _905 * (_866.y + (-0.5));
        float _908 = _905 * (_866.z + (-0.5));
        float _915 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_873.x + (-0.5));
        float _917 = _915 * (_873.y + (-0.5));
        float _918 = _915 * (_873.z + (-0.5));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = _886 * 0.5;
        float _923 = _896 * 0.5;
        float _924 = _906 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_202, _203, _204), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3458 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_949 + 1.0))) + _954) * _919;
        float _964 = _887 * 0.5;
        float _965 = _897 * 0.5;
        float _966 = _907 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_202, _203, _204), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3491 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_991 + 1.0))) + _996) * _920;
        float _1006 = _888 * 0.5;
        float _1007 = _898 * 0.5;
        float _1008 = _908 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_202, _203, _204), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3524 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_1033 + 1.0))) + _1038) * _921;
        _1055 = _888;
        _1056 = _887;
        _1057 = _886;
        _1058 = _898;
        _1059 = _897;
        _1060 = _896;
        _1061 = _908;
        _1062 = _907;
        _1063 = _906;
        _1064 = _921;
        _1065 = _920;
        _1066 = _919;
        _1067 = cbModelParam._m0[36u].w * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1068 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1069 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
    }
    else
    {
        _1055 = _743;
        _1056 = _743;
        _1057 = _743;
        _1058 = _743;
        _1059 = _743;
        _1060 = _743;
        _1061 = _743;
        _1062 = _743;
        _1063 = _743;
        _1064 = _743;
        _1065 = _743;
        _1066 = _743;
        _1067 = 0.0;
        _1068 = 0.0;
        _1069 = 0.0;
    }
    float _1079 = (cbModelParam._m0[1u].x * (_1067 - _755)) + _755;
    float _1080 = (cbModelParam._m0[1u].x * (_1068 - _756)) + _756;
    float _1081 = (cbModelParam._m0[1u].x * (_1069 - _757)) + _757;
    float _1102 = fma(_1081, cbSceneParam._m0[89u].z, fma(_1080, cbSceneParam._m0[89u].y, _1079 * cbSceneParam._m0[89u].x));
    float _1105 = fma(_1081, cbSceneParam._m0[90u].z, fma(_1080, cbSceneParam._m0[90u].y, _1079 * cbSceneParam._m0[90u].x));
    float _1108 = fma(_1081, cbSceneParam._m0[91u].z, fma(_1080, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1079));
    float _1123 = _379 * 0.5;
    float _1124 = _380 * 0.5;
    float _1125 = _381 * 0.5;
    float _1126 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_1057, _1060, _1063, _1066));
    float _1129 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_1056, _1059, _1062, _1065));
    float _1132 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_1055, _1058, _1061, _1064));
    float _1166;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1139 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_742, _746, _749, _752));
        float _1143 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_744, _747, _750, _753));
        float _1147 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_745, _748, _751, _754));
        float _1154 = dot(vec4(cbModelParam._m0[39u]), vec4(_1123, _1124, _1125, 1.0));
        _1166 = dot(vec3(isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)), isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)), isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1154) ? 0.0 : (isnan(0.0) ? _1154 : max(0.0, _1154))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1166 = 1.0;
    }
    float _1177;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1168 = dot(vec4(cbModelParam._m0[40u]), vec4(_1123, _1124, _1125, 1.0));
        _1177 = dot(vec3(isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)), isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)), isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1168) ? 0.0 : (isnan(0.0) ? _1168 : max(0.0, _1168))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1177 = 1.0;
    }
    float _1181 = (_1177 * cbModelParam._m0[1u].x) + (_1166 * (1.0 - cbModelParam._m0[1u].x));
    float _1190 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1272;
    float _1274;
    float _1276;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1239 = fma(_411, cbModelParam._m0[13u].z, fma(_407, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _403)) + cbModelParam._m0[13u].w;
        float _1243 = fma(_411, cbModelParam._m0[14u].z, fma(_407, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _403)) + cbModelParam._m0[14u].w;
        float _1247 = fma(_411, cbModelParam._m0[15u].z, fma(_407, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _403)) + cbModelParam._m0[15u].w;
        float _1250 = fma(_381, cbModelParam._m0[13u].z, fma(_380, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _379));
        float _1253 = fma(_381, cbModelParam._m0[14u].z, fma(_380, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _379));
        float _1256 = fma(_381, cbModelParam._m0[15u].z, fma(_380, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _379));
        float _1282;
        if (_1250 > 0.0)
        {
            _1282 = abs((1.0 - _1239) / _1250);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1250 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1239 + 1.0) / _1250);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1282 = frontier_phi_17_15_ladder;
        }
        float _1457;
        if (_1253 > 0.0)
        {
            _1457 = abs((1.0 - _1243) / _1253);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1253 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1243 + 1.0) / _1253);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1457 = frontier_phi_26_22_ladder;
        }
        float _1754;
        if (_1256 > 0.0)
        {
            _1754 = abs((1.0 - _1247) / _1256);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1256 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1247 + 1.0) / _1256);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1754 = frontier_phi_38_33_ladder;
        }
        float _1756 = isnan(_1457) ? _1282 : (isnan(_1282) ? _1457 : min(_1282, _1457));
        float _1757 = isnan(_1754) ? _1756 : (isnan(_1756) ? _1754 : min(_1756, _1754));
        float _1761 = (_1757 * _1250) + _1239;
        float _1762 = (_1757 * _1253) + _1243;
        float _1763 = (_1757 * _1256) + _1247;
        float _1764 = _1757 * 9.9999997473787516355514526367188e-05;
        float _1766 = (-1.0) - _1764;
        float _1768 = _1764 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1763 > _1768) || ((_1763 < _1766) || ((_1762 > _1768) || ((_1762 < _1766) || ((_1761 < _1766) || (_1761 > _1768))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1908 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1763, cbModelParam._m0[9u].z, fma(_1762, cbModelParam._m0[9u].y, _1761 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1763, cbModelParam._m0[10u].z, fma(_1762, cbModelParam._m0[10u].y, _1761 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1763, cbModelParam._m0[11u].z, fma(_1762, cbModelParam._m0[11u].y, _1761 * cbModelParam._m0[11u].x))), _1190);
            frontier_phi_16_38_ladder = _1908.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1908.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1908.x * cbModelParam._m0[1u].y;
        }
        _1272 = frontier_phi_16_38_ladder_2;
        _1274 = frontier_phi_16_38_ladder_1;
        _1276 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1260 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_379, _380, _381), _1190);
        _1272 = _1260.x * cbModelParam._m0[1u].y;
        _1274 = _1260.y * cbModelParam._m0[1u].y;
        _1276 = _1260.z * cbModelParam._m0[1u].y;
    }
    float _1279 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1372;
    float _1374;
    float _1376;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1336 = fma(_411, cbModelParam._m0[21u].z, fma(_407, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _403)) + cbModelParam._m0[21u].w;
        float _1340 = fma(_411, cbModelParam._m0[22u].z, fma(_407, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _403)) + cbModelParam._m0[22u].w;
        float _1344 = fma(_411, cbModelParam._m0[23u].z, fma(_407, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _403)) + cbModelParam._m0[23u].w;
        float _1347 = fma(_381, cbModelParam._m0[21u].z, fma(_380, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _379));
        float _1350 = fma(_381, cbModelParam._m0[22u].z, fma(_380, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _379));
        float _1353 = fma(_381, cbModelParam._m0[23u].z, fma(_380, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _379));
        float _1462;
        if (_1347 > 0.0)
        {
            _1462 = abs((1.0 - _1336) / _1347);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1336 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1462 = frontier_phi_28_24_ladder;
        }
        float _1781;
        if (_1350 > 0.0)
        {
            _1781 = abs((1.0 - _1340) / _1350);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1340 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1781 = frontier_phi_40_35_ladder;
        }
        float _2054;
        if (_1353 > 0.0)
        {
            _2054 = abs((1.0 - _1344) / _1353);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1344 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2054 = frontier_phi_50_47_ladder;
        }
        float _2056 = isnan(_1781) ? _1462 : (isnan(_1462) ? _1781 : min(_1462, _1781));
        float _2057 = isnan(_2054) ? _2056 : (isnan(_2056) ? _2054 : min(_2056, _2054));
        float _2061 = (_2057 * _1347) + _1336;
        float _2062 = (_2057 * _1350) + _1340;
        float _2063 = (_2057 * _1353) + _1344;
        float _2064 = _2057 * 9.9999997473787516355514526367188e-05;
        float _2065 = (-1.0) - _2064;
        float _2067 = _2064 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2063 > _2067) || ((_2063 < _2065) || ((_2062 > _2067) || ((_2062 < _2065) || ((_2061 < _2065) || (_2061 > _2067))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2154 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2063, cbModelParam._m0[17u].z, fma(_2062, cbModelParam._m0[17u].y, _2061 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2063, cbModelParam._m0[18u].z, fma(_2062, cbModelParam._m0[18u].y, _2061 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2063, cbModelParam._m0[19u].z, fma(_2062, cbModelParam._m0[19u].y, _2061 * cbModelParam._m0[19u].x))), _1279);
            frontier_phi_25_50_ladder = _2154.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2154.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2154.x * cbModelParam._m0[1u].z;
        }
        _1372 = frontier_phi_25_50_ladder_2;
        _1374 = frontier_phi_25_50_ladder_1;
        _1376 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1356 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_379, _380, _381), _1279);
        _1372 = _1356.x * cbModelParam._m0[1u].z;
        _1374 = _1356.y * cbModelParam._m0[1u].z;
        _1376 = _1356.z * cbModelParam._m0[1u].z;
    }
    float _1388 = _370 * 0.01200000010430812835693359375;
    float _1390 = _1388 * ((cbModelParam._m0[1u].w * (_1372 - _1272)) + _1272);
    float _1391 = _1388 * ((cbModelParam._m0[1u].w * (_1374 - _1274)) + _1274);
    float _1392 = _1388 * ((cbModelParam._m0[1u].w * (_1376 - _1276)) + _1276);
    float _1395 = fma(_1392, cbSceneParam._m0[89u].z, fma(_1391, cbSceneParam._m0[89u].y, _1390 * cbSceneParam._m0[89u].x));
    float _1398 = fma(_1392, cbSceneParam._m0[90u].z, fma(_1391, cbSceneParam._m0[90u].y, _1390 * cbSceneParam._m0[90u].x));
    float _1401 = fma(_1392, cbSceneParam._m0[91u].z, fma(_1391, cbSceneParam._m0[91u].y, _1390 * cbSceneParam._m0[91u].x));
    float _1436 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1440 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1444 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1448 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1449 = _1436 / _1448;
    float _1450 = _1440 / _1448;
    float _1451 = _1444 / _1448;
    float _1598;
    float _1599;
    float _1600;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1478 = ((uint(_1451 > cbSceneParam._m0[59u].y) + uint(_1451 > cbSceneParam._m0[59u].x)) + uint(_1451 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1479 = _1478 + 43u;
        uint _1487 = _1478 + 44u;
        uint _1495 = _1478 + 45u;
        uint _1503 = _1478 + 46u;
        float _1514 = fma(_1448, cbSceneParam._m0[_1479].w, fma(_1444, cbSceneParam._m0[_1479].z, fma(_1440, cbSceneParam._m0[_1479].y, _1436 * cbSceneParam._m0[_1479].x)));
        float _1518 = fma(_1448, cbSceneParam._m0[_1487].w, fma(_1444, cbSceneParam._m0[_1487].z, fma(_1440, cbSceneParam._m0[_1487].y, _1436 * cbSceneParam._m0[_1487].x)));
        float _1526 = fma(_1448, cbSceneParam._m0[_1503].w, fma(_1444, cbSceneParam._m0[_1503].z, fma(_1440, cbSceneParam._m0[_1503].y, _1436 * cbSceneParam._m0[_1503].x)));
        float _1531 = cbSceneParam._m0[33u].z * _1526;
        float _1533 = cbSceneParam._m0[33u].w * _1526;
        float _1536 = fma(_1448, cbSceneParam._m0[_1495].w, fma(_1444, cbSceneParam._m0[_1495].z, fma(_1440, cbSceneParam._m0[_1495].y, _1436 * cbSceneParam._m0[_1495].x))) / _1526;
        float _1584 = (cbSceneParam._m0[33u].x - sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451))) * cbSceneParam._m0[33u].y;
        float _3650 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1591 = (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1531 + _1514) / _1526, (_1533 + _1518) / _1526), _1536), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1533 + _1514) / _1526, (_1518 - _1531) / _1526), _1536), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1514 - _1531) / _1526, (_1518 - _1533) / _1526), _1536), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1514 - _1533) / _1526, (_1531 + _1518) / _1526), _1536), 0.0)).x), vec4(0.25)));
        _1598 = 1.0 - (_1591 * cbSceneParam._m0[34u].x);
        _1599 = 1.0 - (_1591 * cbSceneParam._m0[34u].y);
        _1600 = 1.0 - (_1591 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1598 = 1.0;
        _1599 = 1.0;
        _1600 = 1.0;
    }
    float _1664;
    float _1666;
    float _1668;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1652 = fma(_1448, cbSceneParam._m0[63u].w, fma(_1444, cbSceneParam._m0[63u].z, fma(_1440, cbSceneParam._m0[63u].y, _1436 * cbSceneParam._m0[63u].x)));
        float _1653 = fma(_1448, cbSceneParam._m0[60u].w, fma(_1444, cbSceneParam._m0[60u].z, fma(_1440, cbSceneParam._m0[60u].y, _1436 * cbSceneParam._m0[60u].x))) / _1652;
        float _1654 = fma(_1448, cbSceneParam._m0[61u].w, fma(_1444, cbSceneParam._m0[61u].z, fma(_1440, cbSceneParam._m0[61u].y, _1436 * cbSceneParam._m0[61u].x))) / _1652;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1653 >= cbSceneParam._m0[64u].x) && (_1654 >= cbSceneParam._m0[64u].y)) && (_1653 <= cbSceneParam._m0[64u].z)) && (_1654 <= cbSceneParam._m0[64u].w))
        {
            float _1794 = fma(_1448, cbSceneParam._m0[62u].w, fma(_1444, cbSceneParam._m0[62u].z, fma(_1440, cbSceneParam._m0[62u].y, _1436 * cbSceneParam._m0[62u].x))) / _1652;
            float _1798 = isnan(cbSceneParam._m0[41u].w) ? _1794 : (isnan(_1794) ? cbSceneParam._m0[41u].w : max(_1794, cbSceneParam._m0[41u].w));
            float _1841 = (cbSceneParam._m0[33u].x - sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451))) * cbSceneParam._m0[33u].y;
            float _3666 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
            float _1848 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1653, cbSceneParam._m0[33u].w + _1654), _1798), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1653, _1654 - cbSceneParam._m0[33u].z), _1798), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1653 - cbSceneParam._m0[33u].z, _1654 - cbSceneParam._m0[33u].w), _1798), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1653 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1654), _1798), 0.0)).x), vec4(0.25)));
            float _1852 = 1.0 - (_1848 * cbSceneParam._m0[34u].x);
            float _1853 = 1.0 - (_1848 * cbSceneParam._m0[34u].y);
            float _1854 = 1.0 - (_1848 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1854) ? _1600 : (isnan(_1600) ? _1854 : min(_1600, _1854));
            frontier_phi_37_36_ladder_1 = isnan(_1853) ? _1599 : (isnan(_1599) ? _1853 : min(_1599, _1853));
            frontier_phi_37_36_ladder_2 = isnan(_1852) ? _1598 : (isnan(_1598) ? _1852 : min(_1598, _1852));
        }
        else
        {
            frontier_phi_37_36_ladder = _1600;
            frontier_phi_37_36_ladder_1 = _1599;
            frontier_phi_37_36_ladder_2 = _1598;
        }
        _1664 = frontier_phi_37_36_ladder_2;
        _1666 = frontier_phi_37_36_ladder_1;
        _1668 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1664 = _1598;
        _1666 = _1599;
        _1668 = _1600;
    }
    uvec4 _1673 = floatBitsToUint(cbInstanceData._m0[_344 + 5u]);
    uint _1675 = _1673.x * 14u;
    uint _1676 = _1675 + 13u;
    float _1683 = _370 + (-1.0);
    float _1689 = (cbLight._m0[_1676].x * _1683) + 1.0;
    float _1690 = (cbLight._m0[_1676].y * _1683) + 1.0;
    float _1691 = (cbLight._m0[_1676].z * _1683) + 1.0;
    float _1692 = (cbLight._m0[_1676].w * _1683) + 1.0;
    uint _1693 = _1675 + 5u;
    float _1699 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
    uint _1703 = _1675 + 4u;
    float _1713 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
    uint _1717 = _1675 | 1u;
    float _1728 = dot(vec3(cbLight._m0[_1675].xyz), vec3(_202, _203, _204));
    float _1731 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_202, _203, _204));
    float _3702 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _3713 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1736 = (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.3183098733425140380859375;
    float _1738 = (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.3183098733425140380859375;
    float _1745 = ((cbLight._m0[_1693].x * _1699) * _1738) + (((cbLight._m0[_1703].x * _1664) * _1713) * _1736);
    float _1746 = ((_1699 * cbLight._m0[_1693].y) * _1738) + (((cbLight._m0[_1703].y * _1666) * _1713) * _1736);
    float _1747 = ((_1699 * cbLight._m0[_1693].z) * _1738) + (((cbLight._m0[_1703].z * _1668) * _1713) * _1736);
    uvec4 _1751 = floatBitsToUint(cbLight._m0[_1675 + 12u]);
    bool _1753 = _1751.x == 0u;
    float _1855;
    float _1857;
    float _1859;
    if (_1753)
    {
        _1855 = _1745;
        _1857 = _1746;
        _1859 = _1747;
    }
    else
    {
        uint _1863 = _1675 + 6u;
        float _1879 = (dot(vec3(cbLight._m0[_1675 + 2u].xyz), vec3(_202, _203, _204)) * 0.5) + 0.5;
        float _1880 = _1879 * _1879;
        float _3724 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1882 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
        _1855 = (((cbLight._m0[_1863].x * 0.3183098733425140380859375) * _1881) * _1882) + _1745;
        _1857 = (((cbLight._m0[_1863].y * 0.3183098733425140380859375) * _1881) * _1882) + _1746;
        _1859 = (((cbLight._m0[_1863].z * 0.3183098733425140380859375) * _1881) * _1882) + _1747;
    }
    bool _1862 = _1751.y == 0u;
    float _1917;
    float _1919;
    float _1921;
    if (_1862)
    {
        _1917 = _1855;
        _1919 = _1857;
        _1921 = _1859;
    }
    else
    {
        uint _2025 = _1675 + 7u;
        float _2041 = (dot(vec3(cbLight._m0[_1675 + 3u].xyz), vec3(_202, _203, _204)) * 0.5) + 0.5;
        float _2042 = _2041 * _2041;
        float _3740 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2043 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _2044 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
        _1917 = (((cbLight._m0[_2025].x * 0.3183098733425140380859375) * _2043) * _2044) + _1855;
        _1919 = (((cbLight._m0[_2025].y * 0.3183098733425140380859375) * _2043) * _2044) + _1857;
        _1921 = (((cbLight._m0[_2025].z * 0.3183098733425140380859375) * _2043) * _2044) + _1859;
    }
    uint _1923 = _1675 + 8u;
    float _1929 = cbLight._m0[_1675].x + _283;
    float _1930 = cbLight._m0[_1675].y + _284;
    float _1931 = cbLight._m0[_1675].z + _285;
    float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
    float _1939 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1675].xyz));
    float _3756 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1942 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _1943 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _1944 = dot(vec3(cbLight._m0[_1675].xyz), vec3(_1929 * _1935, _1930 * _1935, _1931 * _1935));
    float _3778 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1955 = (exp2(log2(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1961 = (0.5 / ((_1942 + 9.9999999392252902907785028219223e-09) + _1943)) * _1942;
    float _3789 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1963 = (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * 0.31831014156341552734375;
    uint _1977 = _1675 + 9u;
    float _1983 = cbLight._m0[_1717].x + _283;
    float _1984 = cbLight._m0[_1717].y + _284;
    float _1985 = cbLight._m0[_1717].z + _285;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1993 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1717].xyz));
    float _3800 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1997 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_1983 * _1989, _1984 * _1989, _1985 * _1989));
    float _3811 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2006 = (exp2(log2(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2010 = (0.5 / ((_1996 + 9.9999999392252902907785028219223e-09) + _1943)) * _1996;
    float _3822 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2012 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * 0.31831014156341552734375;
    float _2022 = (((_2006 * cbLight._m0[_1977].x) * _2012) * _1699) + ((((cbLight._m0[_1923].x * _1664) * _1955) * _1963) * _1713);
    float _2023 = (((_2006 * cbLight._m0[_1977].y) * _2012) * _1699) + ((((cbLight._m0[_1923].y * _1666) * _1955) * _1963) * _1713);
    float _2024 = (((_2006 * cbLight._m0[_1977].z) * _2012) * _1699) + ((((cbLight._m0[_1923].z * _1668) * _1955) * _1963) * _1713);
    float _2080;
    float _2082;
    float _2084;
    if (_1753)
    {
        _2080 = _2022;
        _2082 = _2023;
        _2084 = _2024;
    }
    else
    {
        uint _2086 = _1675 + 10u;
        uint _2092 = _1675 + 2u;
        float _2098 = cbLight._m0[_2092].x + _283;
        float _2099 = cbLight._m0[_2092].y + _284;
        float _2100 = cbLight._m0[_2092].z + _285;
        float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
        float _2108 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_2092].xyz));
        float _3833 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2111 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _2112 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2098 * _2104, _2099 * _2104, _2100 * _2104));
        float _3844 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2121 = (exp2(log2(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2125 = (0.5 / ((_2111 + 9.9999999392252902907785028219223e-09) + _1943)) * _2111;
        float _3855 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2127 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * 0.31831014156341552734375;
        float _2128 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
        _2080 = (((_2121 * cbLight._m0[_2086].x) * _2127) * _2128) + _2022;
        _2082 = (((_2121 * cbLight._m0[_2086].y) * _2127) * _2128) + _2023;
        _2084 = (((_2121 * cbLight._m0[_2086].z) * _2127) * _2128) + _2024;
    }
    float _2159;
    float _2161;
    float _2163;
    if (_1862)
    {
        _2159 = _2080;
        _2161 = _2082;
        _2163 = _2084;
    }
    else
    {
        uint _2170 = _1675 + 11u;
        uint _2176 = _1675 + 3u;
        float _2182 = cbLight._m0[_2176].x + _283;
        float _2183 = cbLight._m0[_2176].y + _284;
        float _2184 = cbLight._m0[_2176].z + _285;
        float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
        float _2192 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_2176].xyz));
        float _3871 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _2196 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2182 * _2188, _2183 * _2188, _2184 * _2188));
        float _3882 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2205 = (exp2(log2(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2209 = (0.5 / ((_2195 + 9.9999999392252902907785028219223e-09) + _1943)) * _2195;
        float _3893 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2211 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * 0.31831014156341552734375;
        float _2212 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
        _2159 = (((_2205 * cbLight._m0[_2170].x) * _2211) * _2212) + _2080;
        _2161 = (((_2205 * cbLight._m0[_2170].y) * _2211) * _2212) + _2082;
        _2163 = (((_2205 * cbLight._m0[_2170].z) * _2211) * _2212) + _2084;
    }
    float _2278;
    float _2280;
    float _2282;
    float _2284;
    float _2286;
    float _2288;
    if (_1673.y == 0u)
    {
        uvec4 _2233 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2234 = _2233.x;
        uint _2245 = uint((float(_2233.y) * floor(float(uint(cbSceneParam._m0[85u].y * _305) / _2234))) + floor(float(uint(cbSceneParam._m0[85u].x * _304) / _2234)));
        float _2255 = (log2(_1451 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2256 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        uint _2259 = uint(isnan(14.0) ? _2256 : (isnan(_2256) ? 14.0 : min(_2256, 14.0)));
        uvec4 _2264 = texelFetch(g_lightClusterGridBuffer, int(((_2259 << 2u) + (_2245 << 6u)) >> 2u));
        uint _2265 = _2264.x;
        uint _2266 = _2233.z;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        float _2355;
        if (((((1u << ((_2266 >> 4u) & 15u)) + 4294967295u) & _2265) == 0u) || ((_2266 & 240u) == 0u))
        {
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
        }
        else
        {
            float _2346;
            float _2348;
            float _2350;
            float _2352;
            float _2354;
            float _2356;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            uint _2503 = 0u;
            uint _2512;
            bool _2513;
            for (;;)
            {
                _2512 = texelFetch(g_lightClassification, int((((_2259 << 5u) + (_2245 << 9u)) + (_2503 << 2u)) >> 2u)).x;
                _2513 = _2512 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2513)
                {
                    frontier_phi_71_pred = _2502;
                    frontier_phi_71_pred_1 = _2501;
                    frontier_phi_71_pred_2 = _2500;
                    frontier_phi_71_pred_3 = _2499;
                    frontier_phi_71_pred_4 = _2498;
                    frontier_phi_71_pred_5 = _2497;
                }
                else
                {
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    uint _2648;
                    _2642 = _2497;
                    _2643 = _2498;
                    _2644 = _2499;
                    _2645 = _2500;
                    _2646 = _2501;
                    _2647 = _2502;
                    _2648 = _2512;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    for (;;)
                    {
                        uint _2652 = uint(findLSB(_2648)) + (_2503 << 5u);
                        uint _2649 = (_2648 + 4294967295u) & _2648;
                        uint _2654 = _2652 * 48u;
                        vec4 _2668 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2654)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 3u)).x));
                        uint _2674 = (_2652 * 48u) + 4u;
                        vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2674)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 3u)).x));
                        uint _2693 = (_2652 * 48u) + 8u;
                        vec3 _2704 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x));
                        float _2708 = _2668.x - _1449;
                        float _2709 = _2668.y - _1450;
                        float _2710 = _2668.z - _1451;
                        float _2711 = dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710));
                        float _2714 = inversesqrt(_2711);
                        float _2723 = 1.0 - (_2711 * _2668.w);
                        float _3919 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2724 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
                        float _2725 = sqrt(_2711) * _2687.w;
                        float _2728 = 1.39999997615814208984375 / (_2725 + 1.39999997615814208984375);
                        float _2729 = _2728 * _2728;
                        float _2732 = ((1.0 - _2729) * dot(vec3(_325, _328, _331), vec3(_2714 * _2708, _2714 * _2709, _2714 * _2710))) + _2729;
                        float _2735 = _2725 * _2725;
                        float _2739 = ((isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))) * _2724) / ((_2735 * 0.699999988079071044921875) + 1.0);
                        float _2743 = (-0.0) - _1449;
                        float _2744 = (-0.0) - _1450;
                        float _2745 = (-0.0) - _1451;
                        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
                        float _2753 = dot(vec3(_325, _328, _331), vec3(_2749 * _2743, _2749 * _2744, _2749 * _2745));
                        float _3935 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _3946 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2757 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
                        float _2761 = (0.5 / (((isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) + 9.9999999392252902907785028219223e-09) + _2757)) * _2757;
                        float _3957 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                        float _2770 = (((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * 3.1415927410125732421875) / ((_2735 * 2.1991131305694580078125) + 3.141590118408203125)) * _2724;
                        _2572 = (_2739 * _2687.x) + _2645;
                        _2573 = (_2739 * _2687.y) + _2646;
                        _2574 = (_2739 * _2687.z) + _2647;
                        _2569 = (_2770 * _2704.x) + _2642;
                        _2570 = (_2770 * _2704.y) + _2643;
                        _2571 = (_2770 * _2704.z) + _2644;
                        if (_2649 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2642 = _2569;
                            _2643 = _2570;
                            _2644 = _2571;
                            _2645 = _2572;
                            _2646 = _2573;
                            _2647 = _2574;
                            _2648 = _2649;
                        }
                    }
                    frontier_phi_71_pred = _2574;
                    frontier_phi_71_pred_1 = _2573;
                    frontier_phi_71_pred_2 = _2572;
                    frontier_phi_71_pred_3 = _2571;
                    frontier_phi_71_pred_4 = _2570;
                    frontier_phi_71_pred_5 = _2569;
                }
                _2356 = frontier_phi_71_pred;
                _2354 = frontier_phi_71_pred_1;
                _2352 = frontier_phi_71_pred_2;
                _2350 = frontier_phi_71_pred_3;
                _2348 = frontier_phi_71_pred_4;
                _2346 = frontier_phi_71_pred_5;
                uint _2504 = _2503 + 1u;
                if (_2504 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2497 = _2346;
                    _2498 = _2348;
                    _2499 = _2350;
                    _2500 = _2352;
                    _2501 = _2354;
                    _2502 = _2356;
                    _2503 = _2504;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
        }
        uvec4 _2359 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2360 = _2359.z;
        uint _2362 = (_2360 >> 8u) & 15u;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        if (((4294967295u << _2362) & _2265) == 0u)
        {
            _2468 = _2345;
            _2470 = _2347;
            _2472 = _2349;
            _2474 = _2351;
            _2476 = _2353;
            _2478 = _2355;
        }
        else
        {
            float _2493 = inversesqrt(dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2362 < ((_2360 >> 12u) & 15u))
            {
                float _2469;
                float _2471;
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2625 = _2345;
                float _2626 = _2347;
                float _2627 = _2349;
                float _2628 = _2351;
                float _2629 = _2353;
                float _2630 = _2355;
                uint _2631 = _2362;
                uint _2640;
                bool _2641;
                for (;;)
                {
                    _2640 = texelFetch(g_lightClassification, int((((_2259 << 5u) + (_2245 << 9u)) + (_2631 << 2u)) >> 2u)).x;
                    _2641 = _2640 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2641)
                    {
                        frontier_phi_82_pred = _2630;
                        frontier_phi_82_pred_1 = _2629;
                        frontier_phi_82_pred_2 = _2628;
                        frontier_phi_82_pred_3 = _2627;
                        frontier_phi_82_pred_4 = _2626;
                        frontier_phi_82_pred_5 = _2625;
                    }
                    else
                    {
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _2797 = _2625;
                        float _2798 = _2626;
                        float _2799 = _2627;
                        float _2800 = _2628;
                        float _2801 = _2629;
                        float _2802 = _2630;
                        uint _2803 = _2640;
                        uint _2804;
                        vec4 _2829;
                        float _2830;
                        vec4 _2845;
                        vec3 _2857;
                        vec4 _2873;
                        vec4 _2889;
                        float _2936;
                        bool _2937;
                        for (;;)
                        {
                            uint _2814 = ((_2631 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2803));
                            _2804 = (_2803 + 4294967295u) & _2803;
                            uint _2816 = _2814 * 40u;
                            _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            _2830 = _2829.w;
                            uint _2832 = (_2814 * 40u) + 4u;
                            _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            uint _2847 = (_2814 * 40u) + 8u;
                            _2857 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x));
                            uint _2860 = (_2814 * 40u) + 16u;
                            _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            uint _2876 = (_2814 * 40u) + 20u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2892 = (_2814 * 40u) + 24u;
                            vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2911 = (_2814 * 40u) + 28u;
                            vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            _2936 = fma(_1451, _2924.z, fma(_1450, _2924.y, _2924.x * _1449)) + _2924.w;
                            _2937 = !((fma(_1451, _2905.z, fma(_1450, _2905.y, _2905.x * _1449)) + _2905.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_2937)
                            {
                                float _2964 = _2829.x - _1449;
                                float _2965 = _2829.y - _1450;
                                float _2966 = _2829.z - _1451;
                                float _2967 = dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966));
                                float _2970 = inversesqrt(_2967);
                                float _2971 = _2970 * _2964;
                                float _2972 = _2970 * _2965;
                                float _2973 = _2970 * _2966;
                                float _2977 = 1.0 - (_2967 / (_2830 * _2830));
                                float _3968 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2978 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                                float _2982 = sqrt(_2967) * _2845.w;
                                float _2984 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                                float _2985 = _2984 * _2984;
                                float _2986 = 1.0 - _2985;
                                float _2988 = (_2986 * dot(vec3(_2971, _2972, _2973), vec3(_325, _328, _331))) + _2985;
                                float _2991 = _2982 * _2982;
                                float _2995 = (fma(_1451, _2873.z, fma(_1450, _2873.y, _2873.x * _1449)) + _2873.w) / _2936;
                                float _2996 = (fma(_1451, _2889.z, fma(_1450, _2889.y, _2889.x * _1449)) + _2889.w) / _2936;
                                float _3000 = 1.0 - dot(vec2(_2995, _2996), vec2(_2995, _2996));
                                float _3984 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3001 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                                float _3002 = _3001 * (((isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0))) * _2978) / ((_2991 * 0.699999988079071044921875) + 1.0));
                                float _3012 = dot(vec3(_325, _328, _331), vec3((-0.0) - (_1449 * _2493), (-0.0) - (_1450 * _2493), (-0.0) - (_1451 * _2493)));
                                float _3995 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3020 = (_2986 * dot(vec3(_325, _328, _331), vec3(_2971, _2972, _2973))) + _2985;
                                float _4006 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3021 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                                float _3025 = (0.5 / (((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) + 9.9999999392252902907785028219223e-09) + _3021)) * _3021;
                                float _4017 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3032 = (_3001 * _2978) * (((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 3.1415927410125732421875) / ((_2991 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3002 * _2845.z;
                                frontier_phi_88_pred_1 = _3002 * _2845.y;
                                frontier_phi_88_pred_2 = _3002 * _2845.x;
                                frontier_phi_88_pred_3 = _3032 * _2857.z;
                                frontier_phi_88_pred_4 = _3032 * _2857.y;
                                frontier_phi_88_pred_5 = _3032 * _2857.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3041 = frontier_phi_88_pred;
                            _3040 = frontier_phi_88_pred_1;
                            _3039 = frontier_phi_88_pred_2;
                            _3038 = frontier_phi_88_pred_3;
                            _3037 = frontier_phi_88_pred_4;
                            _3036 = frontier_phi_88_pred_5;
                            _2787 = _3039 + _2800;
                            _2788 = _3040 + _2801;
                            _2789 = _3041 + _2802;
                            _2784 = _3036 + _2797;
                            _2785 = _3037 + _2798;
                            _2786 = _3038 + _2799;
                            if (_2804 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2804;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2789;
                        frontier_phi_82_pred_1 = _2788;
                        frontier_phi_82_pred_2 = _2787;
                        frontier_phi_82_pred_3 = _2786;
                        frontier_phi_82_pred_4 = _2785;
                        frontier_phi_82_pred_5 = _2784;
                    }
                    _2479 = frontier_phi_82_pred;
                    _2477 = frontier_phi_82_pred_1;
                    _2475 = frontier_phi_82_pred_2;
                    _2473 = frontier_phi_82_pred_3;
                    _2471 = frontier_phi_82_pred_4;
                    _2469 = frontier_phi_82_pred_5;
                    uint _2632 = _2631 + 1u;
                    if (_2632 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2625 = _2469;
                        _2626 = _2471;
                        _2627 = _2473;
                        _2628 = _2475;
                        _2629 = _2477;
                        _2630 = _2479;
                        _2631 = _2632;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2475;
                frontier_phi_63_64_ladder_1 = _2479;
                frontier_phi_63_64_ladder_2 = _2477;
                frontier_phi_63_64_ladder_3 = _2473;
                frontier_phi_63_64_ladder_4 = _2471;
                frontier_phi_63_64_ladder_5 = _2469;
            }
            else
            {
                frontier_phi_63_64_ladder = _2351;
                frontier_phi_63_64_ladder_1 = _2355;
                frontier_phi_63_64_ladder_2 = _2353;
                frontier_phi_63_64_ladder_3 = _2349;
                frontier_phi_63_64_ladder_4 = _2347;
                frontier_phi_63_64_ladder_5 = _2345;
            }
            _2468 = frontier_phi_63_64_ladder_5;
            _2470 = frontier_phi_63_64_ladder_4;
            _2472 = frontier_phi_63_64_ladder_3;
            _2474 = frontier_phi_63_64_ladder;
            _2476 = frontier_phi_63_64_ladder_2;
            _2478 = frontier_phi_63_64_ladder_1;
        }
        float _2483 = isnan(1.0) ? _370 : (isnan(_370) ? 1.0 : min(_370, 1.0));
        _2278 = (_2483 * _2474) + _1917;
        _2280 = (_2483 * _2476) + _1919;
        _2282 = (_2483 * _2478) + _1921;
        _2284 = ((_2468 * 0.039999999105930328369140625) * _2483) + _2159;
        _2286 = ((_2470 * 0.039999999105930328369140625) * _2483) + _2161;
        _2288 = ((_2472 * 0.039999999105930328369140625) * _2483) + _2163;
    }
    else
    {
        _2278 = _1917;
        _2280 = _1919;
        _2282 = _1921;
        _2284 = _2159;
        _2286 = _2161;
        _2288 = _2163;
    }
    float _4033 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _4044 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _4055 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _2305 = ((isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_2278 + ((isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0))) * _370))) + ((_2284 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _1181)) * cbPerFrame._m0[3u].x);
    float _2306 = ((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_2280 + ((isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0))) * _370))) + ((_2286 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _1181)) * cbPerFrame._m0[3u].x);
    float _2307 = ((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2282 + ((isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))) * _370))) + ((_2288 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _1181)) * cbPerFrame._m0[3u].x);
    uint _2308 = _344 + 6u;
    float _2316 = _304 / cbSceneParam._m0[86u].x;
    float _2317 = _305 / cbSceneParam._m0[86u].y;
    vec4 _2331 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2316, _2317, (log2((isnan(cbSceneParam._m0[77u].w) ? _224 : (isnan(_224) ? cbSceneParam._m0[77u].w : min(_224, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2333 = _2331.x;
    float _2334 = _2331.y;
    float _2335 = _2331.z;
    float _2336 = _2331.w;
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    if (_224 > cbSceneParam._m0[78u].w)
    {
        float _2370 = isnan(_224) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _224 : min(cbSceneParam._m0[80u].w, _224));
        float _2371 = _2370 / _224;
        float _2382 = _2371 * _276;
        float _2383 = _277 * _2371;
        float _2384 = (-0.0) - _2383;
        float _2386 = _2371 * _278;
        float _2388 = (cbSceneParam._m0[77u].w * _2384) / _2370;
        float _2389 = _2388 + cbSceneParam._m0[79u].w;
        float _2390 = cbSceneParam._m0[79u].w - _2383;
        float _2396 = sqrt(((_2382 * _2382) + (_2383 * _2383)) + (_2386 * _2386));
        float _2399 = (1.0 - (cbSceneParam._m0[77u].w / _2370)) * _2396;
        float _2404 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2406 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2582;
        if (abs((_2384 - _2388) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2582 = ((((_2389 > 0.0) ? exp2(_2404 * _2389) : (2.0 - exp2(_2406 * _2389))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2399;
        }
        else
        {
            float _2526 = 1.0 / cbSceneParam._m0[80u].x;
            float _2527 = isnan(_2390) ? _2389 : (isnan(_2389) ? _2390 : max(_2389, _2390));
            float _2528 = isnan(_2390) ? _2389 : (isnan(_2389) ? _2390 : min(_2389, _2390));
            float _2537 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : min(_2527, 0.0));
            float _2538 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : min(_2528, 0.0));
            _2582 = ((abs(_2396 / _2384) * cbSceneParam._m0[80u].y) * ((((_2537 - _2538) * 2.0) - ((exp2(_2404 * (isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0)))) - exp2(_2404 * (isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0))))) * _2526)) - ((exp2(_2406 * _2537) - exp2(_2406 * _2538)) * _2526))) + (_2399 * cbSceneParam._m0[80u].z);
        }
        vec4 _2584 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2316, _2317, 1.0), 0.0);
        float _2593 = exp2((_2582 * (-1.44269502162933349609375)) * (1.0 - _2584.w));
        float _2594 = log2(_2593);
        float _2610 = log2(_2336);
        _2408 = (exp2(_2610 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2594 * cbSceneParam._m0[78u].x)) * _2584.x) / cbSceneParam._m0[78u].x)) + _2333;
        _2410 = (exp2(_2610 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2594 * cbSceneParam._m0[78u].y)) * _2584.y) / cbSceneParam._m0[78u].y)) + _2334;
        _2412 = (exp2(_2610 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2594 * cbSceneParam._m0[78u].z)) * _2584.z) / cbSceneParam._m0[78u].z)) + _2335;
        _2414 = _2593 * _2336;
    }
    else
    {
        _2408 = _2333;
        _2410 = _2334;
        _2412 = _2335;
        _2414 = _2336;
    }
    bool _2620;
    vec4 _2424;
    vec4 _2447;
    float _2449;
    float _2453;
    float _2454;
    float _2455;
    float _2456;
    bool _2467;
    for (;;)
    {
        _2424 = cbMatDynParam._m0[0u];
        float _2426 = roundEven(_2424.y);
        bool _2427 = _2426 == 3.0;
        float _2429 = log2(_2414);
        float _2436 = exp2(_2429 * cbSceneParam._m0[78u].x) * _2305;
        float _2437 = exp2(_2429 * cbSceneParam._m0[78u].y) * _2306;
        float _2438 = exp2(_2429 * cbSceneParam._m0[78u].z) * _2307;
        float _2445 = _292 + (-0.5);
        _2447 = cbMtdParam._m0[1u];
        _2449 = _2447.y * _2445;
        float _2452 = (_2426 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2453 = _2452 * (_2427 ? _2436 : (_2436 + (cbSceneParam._m0[72u].w * _2408)));
        _2454 = _2452 * (_2427 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2410)));
        _2455 = _2452 * (_2427 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2412)));
        _2456 = _2445 * 0.999000012874603271484375;
        _2467 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2467)
        {
            if ((cbInstanceData._m0[_344 + 7u].x + _2456) < 0.5)
            {
                _2620 = true;
                break;
            }
        }
        uint _2561 = _346 + uint(_2424.w);
        if ((cbInstanceData._m0[_2561].w < 1.0) && ((cbInstanceData._m0[_2561].w + _2456) < 0.5))
        {
            _2620 = true;
            break;
        }
        if ((_2449 + _194) < _2447.x)
        {
            _2620 = true;
            break;
        }
        _2620 = false;
        break;
    }
    float _2775;
    if (_2620)
    {
        discard_state = true;
        _2775 = 0.0;
    }
    else
    {
        _2775 = cbInstanceData._m0[_2308].w;
    }
    SV_Target.x = _2453;
    SV_Target.y = _2454;
    SV_Target.z = _2455;
    SV_Target.w = _2775;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2308].w;
    discard_exit();
}


