#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_nrd_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _739;
float _2904;
float _2905;
float _2906;
float _2907;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _161 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _162 = _161 * NORMAL.x;
    float _163 = _161 * NORMAL.y;
    float _164 = _161 * NORMAL.z;
    vec4 _184 = texture(sampler2D(M_A_M0_Edge_nrd_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _190 = _184.w;
    float _191 = _184.x * cbMtdParam._m0[9u].x;
    float _192 = _184.y * cbMtdParam._m0[9u].y;
    float _193 = _184.z * cbMtdParam._m0[9u].z;
    float _197 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _198 = _197 * _162;
    float _199 = _197 * _163;
    float _200 = _197 * _164;
    float _2916 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _2927 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _2938 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _220 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _262 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _272 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _262);
    float _273 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _262);
    float _274 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _262);
    float _278 = inversesqrt(dot(vec3(_272, _273, _274), vec3(_272, _273, _274)));
    float _279 = _272 * _278;
    float _280 = _273 * _278;
    float _281 = _274 * _278;
    vec4 _286 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _288 = _286.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _418 = sqrt(((_272 * _272) + (_273 * _273)) + (_274 * _274));
        float _424 = (cbMatDynParam._m0[5u].x * _418) + cbMatDynParam._m0[5u].y;
        float _2949 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
        float _425 = isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0));
        float _429 = (cbMatDynParam._m0[5u].z * _418) + cbMatDynParam._m0[5u].w;
        float _2960 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0))) - _425)) + _425) < ((_288 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _300 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _301 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _321 = fma(_200, cbSceneParam._m0[5u].z, fma(_199, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _198));
    float _324 = fma(_200, cbSceneParam._m0[6u].z, fma(_199, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _198));
    float _327 = fma(_200, cbSceneParam._m0[7u].z, fma(_199, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _198));
    uint _340 = uint(roundEven(NORMAL.w)) * 13u;
    uint _342 = _340 + 9u;
    uint _343 = _342 + uint(cbMatDynParam._m0[0u].w);
    float _349 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2916 : (isnan(_2916) ? 1.0 : min(_2916, 1.0)))) * cbInstanceData._m0[_343].x;
    float _350 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0)))) * cbInstanceData._m0[_343].y;
    float _351 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0)))) * cbInstanceData._m0[_343].z;
    float _2971 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _352 = isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0));
    float _2982 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _353 = isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0));
    float _2993 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _354 = isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0));
    vec4 _363 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _300, cbSceneParam._m0[86u].y * _301));
    float _366 = _363.x * TEXCOORD.z;
    float _367 = dot(vec3(_198, _199, _200), vec3(_279, _280, _281));
    float _370 = _367 * 2.0;
    float _375 = (_370 * _198) - _279;
    float _376 = (_370 * _199) - _280;
    float _377 = (_370 * _200) - _281;
    float _399 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _403 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _407 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _738;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _463 = fma(_407, cbModelParam._m0[26u].z, fma(_403, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _399));
        float _467 = fma(_407, cbModelParam._m0[27u].z, fma(_403, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _399));
        float _471 = fma(_407, cbModelParam._m0[28u].z, fma(_403, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _399));
        float _496 = _399 + _198;
        float _497 = _403 + _199;
        float _498 = _407 + _200;
        float _508 = fma(_498, cbModelParam._m0[26u].z, fma(_497, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _496)) - _463;
        float _509 = fma(_498, cbModelParam._m0[27u].z, fma(_497, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _496)) - _467;
        float _510 = fma(_498, cbModelParam._m0[28u].z, fma(_497, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _496)) - _471;
        float _514 = inversesqrt(dot(vec3(_508, _509, _510), vec3(_508, _509, _510)));
        float _527 = ((_514 * _508) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_463 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _528 = ((_514 * _509) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_467 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _529 = ((_514 * _510) / cbModelParam._m0[34u].z) + ((((((_471 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _532 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_527, _528, _529), 0.0);
        vec4 _539 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_527, _528, _529), 0.0);
        vec4 _546 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_527, _528, _529), 0.0);
        vec4 _553 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_527, _528, _529), 0.0);
        float _566 = exp2((_532.w + (-0.5)) * 20.0) * 2.0;
        float _567 = _566 * (_532.x + (-0.5));
        float _568 = _566 * (_532.y + (-0.5));
        float _569 = _566 * (_532.z + (-0.5));
        float _576 = exp2((_539.w + (-0.5)) * 20.0) * 2.0;
        float _577 = _576 * (_539.x + (-0.5));
        float _578 = _576 * (_539.y + (-0.5));
        float _579 = _576 * (_539.z + (-0.5));
        float _586 = exp2((_546.w + (-0.5)) * 20.0) * 2.0;
        float _587 = _586 * (_546.x + (-0.5));
        float _588 = _586 * (_546.y + (-0.5));
        float _589 = _586 * (_546.z + (-0.5));
        float _596 = exp2((_553.w + (-0.5)) * 20.0) * 2.0;
        float _597 = _596 * (_553.x + (-0.5));
        float _598 = _596 * (_553.y + (-0.5));
        float _599 = _596 * (_553.z + (-0.5));
        float _600 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _601 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        float _602 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _603 = _567 * 0.5;
        float _604 = _577 * 0.5;
        float _605 = _587 * 0.5;
        float _606 = dot(vec3(_603, _604, _605), vec3(_603, _604, _605));
        float _611 = (_606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_606);
        float _620 = (dot(vec3(_198, _199, _200), vec3(_611 * _603, _611 * _604, _611 * _605)) + 1.0) * 0.5;
        float _3019 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        float _630 = sqrt(((_604 * _604) + (_603 * _603)) + (_605 * _605)) / (_600 + 9.9999997473787516355514526367188e-06);
        float _3030 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _631 = isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0));
        float _632 = _631 * 2.0;
        float _636 = (1.0 - _631) / (_631 + 1.0);
        float _3041 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _637 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
        float _646 = ((((1.0 - _637) * (_632 + 2.0)) * exp2(log2(isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0))) * (_632 + 1.0))) + _637) * _600;
        float _647 = _568 * 0.5;
        float _648 = _578 * 0.5;
        float _649 = _588 * 0.5;
        float _650 = dot(vec3(_647, _648, _649), vec3(_647, _648, _649));
        float _655 = (_650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_650);
        float _663 = (dot(vec3(_198, _199, _200), vec3(_655 * _647, _655 * _648, _655 * _649)) + 1.0) * 0.5;
        float _3052 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _672 = sqrt(((_648 * _648) + (_647 * _647)) + (_649 * _649)) / (_601 + 9.9999997473787516355514526367188e-06);
        float _3063 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
        float _674 = _673 * 2.0;
        float _678 = (1.0 - _673) / (_673 + 1.0);
        float _3074 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
        float _688 = ((((1.0 - _679) * (_674 + 2.0)) * exp2(log2(isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0))) * (_674 + 1.0))) + _679) * _601;
        float _689 = _569 * 0.5;
        float _690 = _579 * 0.5;
        float _691 = _589 * 0.5;
        float _692 = dot(vec3(_689, _690, _691), vec3(_689, _690, _691));
        float _697 = (_692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_692);
        float _705 = (dot(vec3(_198, _199, _200), vec3(_697 * _689, _697 * _690, _697 * _691)) + 1.0) * 0.5;
        float _3085 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _714 = sqrt(((_690 * _690) + (_689 * _689)) + (_691 * _691)) / (_602 + 9.9999997473787516355514526367188e-06);
        float _3096 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0));
        float _716 = _715 * 2.0;
        float _720 = (1.0 - _715) / (_715 + 1.0);
        float _3107 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
        float _730 = ((((1.0 - _721) * (_716 + 2.0)) * exp2(log2(isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0))) * (_716 + 1.0))) + _721) * _602;
        _738 = _569;
        _740 = _568;
        _741 = _567;
        _742 = _579;
        _743 = _578;
        _744 = _577;
        _745 = _589;
        _746 = _588;
        _747 = _587;
        _748 = _602;
        _749 = _601;
        _750 = _600;
        _751 = cbModelParam._m0[36u].z * (isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0)));
        _752 = cbModelParam._m0[36u].z * (isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0)));
        _753 = cbModelParam._m0[36u].z * (isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0)));
    }
    else
    {
        _738 = _739;
        _740 = _739;
        _741 = _739;
        _742 = _739;
        _743 = _739;
        _744 = _739;
        _745 = _739;
        _746 = _739;
        _747 = _739;
        _748 = _739;
        _749 = _739;
        _750 = _739;
        _751 = 0.0;
        _752 = 0.0;
        _753 = 0.0;
    }
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _782 = fma(_407, cbModelParam._m0[30u].z, fma(_403, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _399));
        float _786 = fma(_407, cbModelParam._m0[31u].z, fma(_403, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _399));
        float _790 = fma(_407, cbModelParam._m0[32u].z, fma(_403, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _399));
        float _813 = _399 + _198;
        float _814 = _403 + _199;
        float _815 = _407 + _200;
        float _825 = fma(_815, cbModelParam._m0[30u].z, fma(_814, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _813)) - _782;
        float _826 = fma(_815, cbModelParam._m0[31u].z, fma(_814, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _813)) - _786;
        float _827 = fma(_815, cbModelParam._m0[32u].z, fma(_814, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _813)) - _790;
        float _831 = inversesqrt(dot(vec3(_825, _826, _827), vec3(_825, _826, _827)));
        float _844 = ((_831 * _825) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_782 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_831 * _826) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_786 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_831 * _827) / cbModelParam._m0[35u].z) + ((((((_790 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        float _881 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_848.x + (-0.5));
        float _883 = _881 * (_848.y + (-0.5));
        float _884 = _881 * (_848.z + (-0.5));
        float _891 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_855.x + (-0.5));
        float _893 = _891 * (_855.y + (-0.5));
        float _894 = _891 * (_855.z + (-0.5));
        float _901 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_862.x + (-0.5));
        float _903 = _901 * (_862.y + (-0.5));
        float _904 = _901 * (_862.z + (-0.5));
        float _911 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_869.x + (-0.5));
        float _913 = _911 * (_869.y + (-0.5));
        float _914 = _911 * (_869.z + (-0.5));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = _882 * 0.5;
        float _919 = _892 * 0.5;
        float _920 = _902 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _934 = (dot(vec3(_198, _199, _200), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3148 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _943 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3159 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3170 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0))) * (_945 + 1.0))) + _950) * _915;
        float _960 = _883 * 0.5;
        float _961 = _893 * 0.5;
        float _962 = _903 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_198, _199, _200), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3181 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3192 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3203 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0))) * (_987 + 1.0))) + _992) * _916;
        float _1002 = _884 * 0.5;
        float _1003 = _894 * 0.5;
        float _1004 = _904 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_198, _199, _200), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3214 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3225 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3236 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0))) * (_1029 + 1.0))) + _1034) * _917;
        _1051 = _884;
        _1052 = _883;
        _1053 = _882;
        _1054 = _894;
        _1055 = _893;
        _1056 = _892;
        _1057 = _904;
        _1058 = _903;
        _1059 = _902;
        _1060 = _917;
        _1061 = _916;
        _1062 = _915;
        _1063 = cbModelParam._m0[36u].w * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
        _1064 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1065 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
    }
    else
    {
        _1051 = _739;
        _1052 = _739;
        _1053 = _739;
        _1054 = _739;
        _1055 = _739;
        _1056 = _739;
        _1057 = _739;
        _1058 = _739;
        _1059 = _739;
        _1060 = _739;
        _1061 = _739;
        _1062 = _739;
        _1063 = 0.0;
        _1064 = 0.0;
        _1065 = 0.0;
    }
    float _1075 = (cbModelParam._m0[1u].x * (_1063 - _751)) + _751;
    float _1076 = (cbModelParam._m0[1u].x * (_1064 - _752)) + _752;
    float _1077 = (cbModelParam._m0[1u].x * (_1065 - _753)) + _753;
    float _1098 = fma(_1077, cbSceneParam._m0[89u].z, fma(_1076, cbSceneParam._m0[89u].y, _1075 * cbSceneParam._m0[89u].x));
    float _1101 = fma(_1077, cbSceneParam._m0[90u].z, fma(_1076, cbSceneParam._m0[90u].y, _1075 * cbSceneParam._m0[90u].x));
    float _1104 = fma(_1077, cbSceneParam._m0[91u].z, fma(_1076, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1075));
    float _1119 = _375 * 0.5;
    float _1120 = _376 * 0.5;
    float _1121 = _377 * 0.5;
    float _1122 = dot(vec4(_1119, _1120, _1121, 1.0), vec4(_1053, _1056, _1059, _1062));
    float _1125 = dot(vec4(_1119, _1120, _1121, 1.0), vec4(_1052, _1055, _1058, _1061));
    float _1128 = dot(vec4(_1119, _1120, _1121, 1.0), vec4(_1051, _1054, _1057, _1060));
    float _1162;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1135 = dot(vec4(_1119, _1120, _1121, 1.0), vec4(_738, _742, _745, _748));
        float _1139 = dot(vec4(_1119, _1120, _1121, 1.0), vec4(_740, _743, _746, _749));
        float _1143 = dot(vec4(_1119, _1120, _1121, 1.0), vec4(_741, _744, _747, _750));
        float _1150 = dot(vec4(cbModelParam._m0[39u]), vec4(_1119, _1120, _1121, 1.0));
        _1162 = dot(vec3(isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)), isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)), isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1150) ? 0.0 : (isnan(0.0) ? _1150 : max(0.0, _1150))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1162 = 1.0;
    }
    float _1173;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1164 = dot(vec4(cbModelParam._m0[40u]), vec4(_1119, _1120, _1121, 1.0));
        _1173 = dot(vec3(isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)), isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)), isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1164) ? 0.0 : (isnan(0.0) ? _1164 : max(0.0, _1164))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1173 = 1.0;
    }
    float _1177 = (_1173 * cbModelParam._m0[1u].x) + (_1162 * (1.0 - cbModelParam._m0[1u].x));
    float _1186 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1268;
    float _1270;
    float _1272;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1235 = fma(_407, cbModelParam._m0[13u].z, fma(_403, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _399)) + cbModelParam._m0[13u].w;
        float _1239 = fma(_407, cbModelParam._m0[14u].z, fma(_403, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _399)) + cbModelParam._m0[14u].w;
        float _1243 = fma(_407, cbModelParam._m0[15u].z, fma(_403, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _399)) + cbModelParam._m0[15u].w;
        float _1246 = fma(_377, cbModelParam._m0[13u].z, fma(_376, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _375));
        float _1249 = fma(_377, cbModelParam._m0[14u].z, fma(_376, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _375));
        float _1252 = fma(_377, cbModelParam._m0[15u].z, fma(_376, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _375));
        float _1278;
        if (_1246 > 0.0)
        {
            _1278 = abs((1.0 - _1235) / _1246);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1246 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1235 + 1.0) / _1246);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1278 = frontier_phi_17_15_ladder;
        }
        float _1486;
        if (_1249 > 0.0)
        {
            _1486 = abs((1.0 - _1239) / _1249);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1249 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1239 + 1.0) / _1249);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1486 = frontier_phi_26_22_ladder;
        }
        float _1675;
        if (_1252 > 0.0)
        {
            _1675 = abs((1.0 - _1243) / _1252);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1252 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1243 + 1.0) / _1252);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1675 = frontier_phi_38_33_ladder;
        }
        float _1677 = isnan(_1486) ? _1278 : (isnan(_1278) ? _1486 : min(_1278, _1486));
        float _1678 = isnan(_1675) ? _1677 : (isnan(_1677) ? _1675 : min(_1677, _1675));
        float _1682 = (_1678 * _1246) + _1235;
        float _1683 = (_1678 * _1249) + _1239;
        float _1684 = (_1678 * _1252) + _1243;
        float _1685 = _1678 * 9.9999997473787516355514526367188e-05;
        float _1687 = (-1.0) - _1685;
        float _1689 = _1685 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1684 > _1689) || ((_1684 < _1687) || ((_1683 > _1689) || ((_1683 < _1687) || ((_1682 < _1687) || (_1682 > _1689))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1781 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1684, cbModelParam._m0[9u].z, fma(_1683, cbModelParam._m0[9u].y, _1682 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1684, cbModelParam._m0[10u].z, fma(_1683, cbModelParam._m0[10u].y, _1682 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1684, cbModelParam._m0[11u].z, fma(_1683, cbModelParam._m0[11u].y, _1682 * cbModelParam._m0[11u].x))), _1186);
            frontier_phi_16_38_ladder = _1781.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1781.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1781.x * cbModelParam._m0[1u].y;
        }
        _1268 = frontier_phi_16_38_ladder_2;
        _1270 = frontier_phi_16_38_ladder_1;
        _1272 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1256 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_375, _376, _377), _1186);
        _1268 = _1256.x * cbModelParam._m0[1u].y;
        _1270 = _1256.y * cbModelParam._m0[1u].y;
        _1272 = _1256.z * cbModelParam._m0[1u].y;
    }
    float _1275 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1368;
    float _1370;
    float _1372;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1332 = fma(_407, cbModelParam._m0[21u].z, fma(_403, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _399)) + cbModelParam._m0[21u].w;
        float _1336 = fma(_407, cbModelParam._m0[22u].z, fma(_403, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _399)) + cbModelParam._m0[22u].w;
        float _1340 = fma(_407, cbModelParam._m0[23u].z, fma(_403, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _399)) + cbModelParam._m0[23u].w;
        float _1343 = fma(_377, cbModelParam._m0[21u].z, fma(_376, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _375));
        float _1346 = fma(_377, cbModelParam._m0[22u].z, fma(_376, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _375));
        float _1349 = fma(_377, cbModelParam._m0[23u].z, fma(_376, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _375));
        float _1491;
        if (_1343 > 0.0)
        {
            _1491 = abs((1.0 - _1332) / _1343);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1332 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1491 = frontier_phi_28_24_ladder;
        }
        float _1702;
        if (_1346 > 0.0)
        {
            _1702 = abs((1.0 - _1336) / _1346);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1336 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1702 = frontier_phi_40_35_ladder;
        }
        float _1853;
        if (_1349 > 0.0)
        {
            _1853 = abs((1.0 - _1340) / _1349);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1340 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1853 = frontier_phi_49_46_ladder;
        }
        float _1855 = isnan(_1702) ? _1491 : (isnan(_1491) ? _1702 : min(_1491, _1702));
        float _1856 = isnan(_1853) ? _1855 : (isnan(_1855) ? _1853 : min(_1855, _1853));
        float _1860 = (_1856 * _1343) + _1332;
        float _1861 = (_1856 * _1346) + _1336;
        float _1862 = (_1856 * _1349) + _1340;
        float _1863 = _1856 * 9.9999997473787516355514526367188e-05;
        float _1864 = (-1.0) - _1863;
        float _1866 = _1863 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1862 > _1866) || ((_1862 < _1864) || ((_1861 > _1866) || ((_1861 < _1864) || ((_1860 < _1864) || (_1860 > _1866))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2061 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1862, cbModelParam._m0[17u].z, fma(_1861, cbModelParam._m0[17u].y, _1860 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1862, cbModelParam._m0[18u].z, fma(_1861, cbModelParam._m0[18u].y, _1860 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1862, cbModelParam._m0[19u].z, fma(_1861, cbModelParam._m0[19u].y, _1860 * cbModelParam._m0[19u].x))), _1275);
            frontier_phi_25_49_ladder = _2061.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2061.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2061.x * cbModelParam._m0[1u].z;
        }
        _1368 = frontier_phi_25_49_ladder_2;
        _1370 = frontier_phi_25_49_ladder_1;
        _1372 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_375, _376, _377), _1275);
        _1368 = _1352.x * cbModelParam._m0[1u].z;
        _1370 = _1352.y * cbModelParam._m0[1u].z;
        _1372 = _1352.z * cbModelParam._m0[1u].z;
    }
    float _1384 = _366 * 0.01200000010430812835693359375;
    float _1386 = _1384 * ((cbModelParam._m0[1u].w * (_1368 - _1268)) + _1268);
    float _1387 = _1384 * ((cbModelParam._m0[1u].w * (_1370 - _1270)) + _1270);
    float _1388 = _1384 * ((cbModelParam._m0[1u].w * (_1372 - _1272)) + _1272);
    float _1391 = fma(_1388, cbSceneParam._m0[89u].z, fma(_1387, cbSceneParam._m0[89u].y, _1386 * cbSceneParam._m0[89u].x));
    float _1394 = fma(_1388, cbSceneParam._m0[90u].z, fma(_1387, cbSceneParam._m0[90u].y, _1386 * cbSceneParam._m0[90u].x));
    float _1397 = fma(_1388, cbSceneParam._m0[91u].z, fma(_1387, cbSceneParam._m0[91u].y, _1386 * cbSceneParam._m0[91u].x));
    uvec4 _1407 = floatBitsToUint(cbInstanceData._m0[_340 + 5u]);
    uint _1409 = _1407.x * 14u;
    uint _1410 = _1409 + 13u;
    float _1417 = _366 + (-1.0);
    float _1423 = (cbLight._m0[_1410].x * _1417) + 1.0;
    float _1424 = (cbLight._m0[_1410].y * _1417) + 1.0;
    float _1425 = (cbLight._m0[_1410].z * _1417) + 1.0;
    float _1426 = (cbLight._m0[_1410].w * _1417) + 1.0;
    uint _1427 = _1409 + 5u;
    float _1433 = isnan(1.0) ? _1424 : (isnan(_1424) ? 1.0 : min(_1424, 1.0));
    uint _1437 = _1409 + 4u;
    float _1444 = isnan(1.0) ? _1423 : (isnan(_1423) ? 1.0 : min(_1423, 1.0));
    uint _1448 = _1409 | 1u;
    float _1459 = dot(vec3(cbLight._m0[_1409].xyz), vec3(_198, _199, _200));
    float _1462 = dot(vec3(cbLight._m0[_1448].xyz), vec3(_198, _199, _200));
    float _3372 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
    float _3383 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
    float _1467 = (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * 0.3183098733425140380859375;
    float _1469 = (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * 0.3183098733425140380859375;
    float _1476 = ((cbLight._m0[_1427].x * _1433) * _1469) + ((cbLight._m0[_1437].x * _1444) * _1467);
    float _1477 = ((_1433 * cbLight._m0[_1427].y) * _1469) + ((_1444 * cbLight._m0[_1437].y) * _1467);
    float _1478 = ((_1433 * cbLight._m0[_1427].z) * _1469) + ((_1444 * cbLight._m0[_1437].z) * _1467);
    uvec4 _1483 = floatBitsToUint(cbLight._m0[_1409 + 12u]);
    bool _1485 = _1483.x == 0u;
    float _1496;
    float _1498;
    float _1500;
    if (_1485)
    {
        _1496 = _1476;
        _1498 = _1477;
        _1500 = _1478;
    }
    else
    {
        uint _1504 = _1409 + 6u;
        float _1520 = (dot(vec3(cbLight._m0[_1409 + 2u].xyz), vec3(_198, _199, _200)) * 0.5) + 0.5;
        float _1521 = _1520 * _1520;
        float _3394 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _1523 = isnan(1.0) ? _1425 : (isnan(_1425) ? 1.0 : min(_1425, 1.0));
        _1496 = (((cbLight._m0[_1504].x * 0.3183098733425140380859375) * _1522) * _1523) + _1476;
        _1498 = (((cbLight._m0[_1504].y * 0.3183098733425140380859375) * _1522) * _1523) + _1477;
        _1500 = (((cbLight._m0[_1504].z * 0.3183098733425140380859375) * _1522) * _1523) + _1478;
    }
    bool _1503 = _1483.y == 0u;
    float _1541;
    float _1543;
    float _1545;
    if (_1503)
    {
        _1541 = _1496;
        _1543 = _1498;
        _1545 = _1500;
    }
    else
    {
        uint _1646 = _1409 + 7u;
        float _1662 = (dot(vec3(cbLight._m0[_1409 + 3u].xyz), vec3(_198, _199, _200)) * 0.5) + 0.5;
        float _1663 = _1662 * _1662;
        float _3410 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _1665 = isnan(1.0) ? _1426 : (isnan(_1426) ? 1.0 : min(_1426, 1.0));
        _1541 = (((cbLight._m0[_1646].x * 0.3183098733425140380859375) * _1664) * _1665) + _1496;
        _1543 = (((cbLight._m0[_1646].y * 0.3183098733425140380859375) * _1664) * _1665) + _1498;
        _1545 = (((cbLight._m0[_1646].z * 0.3183098733425140380859375) * _1664) * _1665) + _1500;
    }
    uint _1547 = _1409 + 8u;
    float _1553 = cbLight._m0[_1409].x + _279;
    float _1554 = cbLight._m0[_1409].y + _280;
    float _1555 = cbLight._m0[_1409].z + _281;
    float _1559 = inversesqrt(dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555)));
    float _1563 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1409].xyz));
    float _3426 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
    float _1566 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _1567 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _1568 = dot(vec3(cbLight._m0[_1409].xyz), vec3(_1553 * _1559, _1554 * _1559, _1555 * _1559));
    float _3448 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _1579 = (exp2(log2(1.0 - (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1585 = (0.5 / ((_1566 + 9.9999999392252902907785028219223e-09) + _1567)) * _1566;
    float _3459 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
    float _1587 = (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * 0.31831014156341552734375;
    uint _1598 = _1409 + 9u;
    float _1604 = cbLight._m0[_1448].x + _279;
    float _1605 = cbLight._m0[_1448].y + _280;
    float _1606 = cbLight._m0[_1448].z + _281;
    float _1610 = inversesqrt(dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606)));
    float _1614 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1448].xyz));
    float _3470 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1617 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _1618 = dot(vec3(cbLight._m0[_1448].xyz), vec3(_1604 * _1610, _1605 * _1610, _1606 * _1610));
    float _3481 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _1627 = (exp2(log2(1.0 - (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1631 = (0.5 / ((_1617 + 9.9999999392252902907785028219223e-09) + _1567)) * _1617;
    float _3492 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1633 = (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.31831014156341552734375;
    float _1643 = (((_1627 * cbLight._m0[_1598].x) * _1633) * _1433) + (((_1579 * cbLight._m0[_1547].x) * _1587) * _1444);
    float _1644 = (((_1627 * cbLight._m0[_1598].y) * _1633) * _1433) + (((_1579 * cbLight._m0[_1547].y) * _1587) * _1444);
    float _1645 = (((_1627 * cbLight._m0[_1598].z) * _1633) * _1433) + (((_1579 * cbLight._m0[_1547].z) * _1587) * _1444);
    float _1707;
    float _1709;
    float _1711;
    if (_1485)
    {
        _1707 = _1643;
        _1709 = _1644;
        _1711 = _1645;
    }
    else
    {
        uint _1713 = _1409 + 10u;
        uint _1719 = _1409 + 2u;
        float _1725 = cbLight._m0[_1719].x + _279;
        float _1726 = cbLight._m0[_1719].y + _280;
        float _1727 = cbLight._m0[_1719].z + _281;
        float _1731 = inversesqrt(dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727)));
        float _1735 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1719].xyz));
        float _3503 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1738 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1739 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_1725 * _1731, _1726 * _1731, _1727 * _1731));
        float _3514 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = (exp2(log2(1.0 - (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1752 = (0.5 / ((_1738 + 9.9999999392252902907785028219223e-09) + _1567)) * _1738;
        float _3525 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1754 = (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * 0.31831014156341552734375;
        float _1755 = isnan(1.0) ? _1425 : (isnan(_1425) ? 1.0 : min(_1425, 1.0));
        _1707 = (((_1748 * cbLight._m0[_1713].x) * _1754) * _1755) + _1643;
        _1709 = (((_1748 * cbLight._m0[_1713].y) * _1754) * _1755) + _1644;
        _1711 = (((_1748 * cbLight._m0[_1713].z) * _1754) * _1755) + _1645;
    }
    float _1790;
    float _1792;
    float _1794;
    if (_1503)
    {
        _1790 = _1707;
        _1792 = _1709;
        _1794 = _1711;
    }
    else
    {
        uint _1801 = _1409 + 11u;
        uint _1807 = _1409 + 3u;
        float _1813 = cbLight._m0[_1807].x + _279;
        float _1814 = cbLight._m0[_1807].y + _280;
        float _1815 = cbLight._m0[_1807].z + _281;
        float _1819 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
        float _1823 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1807].xyz));
        float _3541 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1826 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1827 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_1813 * _1819, _1814 * _1819, _1815 * _1819));
        float _3552 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1836 = (exp2(log2(1.0 - (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1840 = (0.5 / ((_1826 + 9.9999999392252902907785028219223e-09) + _1567)) * _1826;
        float _3563 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1842 = (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * 0.31831014156341552734375;
        float _1843 = isnan(1.0) ? _1426 : (isnan(_1426) ? 1.0 : min(_1426, 1.0));
        _1790 = (((_1836 * cbLight._m0[_1801].x) * _1842) * _1843) + _1707;
        _1792 = (((_1836 * cbLight._m0[_1801].y) * _1842) * _1843) + _1709;
        _1794 = (((_1836 * cbLight._m0[_1801].z) * _1842) * _1843) + _1711;
    }
    float _1978;
    float _1980;
    float _1982;
    float _1984;
    float _1986;
    float _1988;
    if (_1407.y == 0u)
    {
        float _1918 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1919 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1918;
        float _1920 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1918;
        float _1921 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1918;
        uvec4 _1933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1934 = _1933.x;
        uint _1945 = uint((float(_1933.y) * floor(float(uint(cbSceneParam._m0[85u].y * _301) / _1934))) + floor(float(uint(cbSceneParam._m0[85u].x * _300) / _1934)));
        float _1955 = (log2(_1921 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1956 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        uint _1959 = uint(isnan(14.0) ? _1956 : (isnan(_1956) ? 14.0 : min(_1956, 14.0)));
        uvec4 _1964 = texelFetch(g_lightClusterGridBuffer, int(((_1959 << 2u) + (_1945 << 6u)) >> 2u));
        uint _1965 = _1964.x;
        uint _1966 = _1933.z;
        float _2066;
        float _2068;
        float _2070;
        float _2072;
        float _2074;
        float _2076;
        if (((((1u << ((_1966 >> 4u) & 15u)) + 4294967295u) & _1965) == 0u) || ((_1966 & 240u) == 0u))
        {
            _2066 = 0.0;
            _2068 = 0.0;
            _2070 = 0.0;
            _2072 = 0.0;
            _2074 = 0.0;
            _2076 = 0.0;
        }
        else
        {
            float _2067;
            float _2069;
            float _2071;
            float _2073;
            float _2075;
            float _2077;
            float _2218 = 0.0;
            float _2219 = 0.0;
            float _2220 = 0.0;
            float _2221 = 0.0;
            float _2222 = 0.0;
            float _2223 = 0.0;
            uint _2224 = 0u;
            uint _2233;
            bool _2234;
            for (;;)
            {
                _2233 = texelFetch(g_lightClassification, int((((_1959 << 5u) + (_1945 << 9u)) + (_2224 << 2u)) >> 2u)).x;
                _2234 = _2233 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2234)
                {
                    frontier_phi_66_pred = _2218;
                    frontier_phi_66_pred_1 = _2223;
                    frontier_phi_66_pred_2 = _2222;
                    frontier_phi_66_pred_3 = _2221;
                    frontier_phi_66_pred_4 = _2220;
                    frontier_phi_66_pred_5 = _2219;
                }
                else
                {
                    float _2363;
                    float _2364;
                    float _2365;
                    float _2366;
                    float _2367;
                    float _2368;
                    uint _2369;
                    _2363 = _2218;
                    _2364 = _2219;
                    _2365 = _2220;
                    _2366 = _2221;
                    _2367 = _2222;
                    _2368 = _2223;
                    _2369 = _2233;
                    float _2290;
                    float _2291;
                    float _2292;
                    float _2293;
                    float _2294;
                    float _2295;
                    for (;;)
                    {
                        uint _2373 = uint(findLSB(_2369)) + (_2224 << 5u);
                        uint _2370 = (_2369 + 4294967295u) & _2369;
                        uint _2375 = _2373 * 48u;
                        vec4 _2389 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2375)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 3u)).x));
                        uint _2395 = (_2373 * 48u) + 4u;
                        vec4 _2408 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2395)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 3u)).x));
                        uint _2414 = (_2373 * 48u) + 8u;
                        vec3 _2425 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2414)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 2u)).x));
                        float _2429 = _2389.x - _1919;
                        float _2430 = _2389.y - _1920;
                        float _2431 = _2389.z - _1921;
                        float _2432 = dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431));
                        float _2435 = inversesqrt(_2432);
                        float _2444 = 1.0 - (_2432 * _2389.w);
                        float _3589 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
                        float _2445 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
                        float _2446 = sqrt(_2432) * _2408.w;
                        float _2449 = 1.39999997615814208984375 / (_2446 + 1.39999997615814208984375);
                        float _2450 = _2449 * _2449;
                        float _2453 = ((1.0 - _2450) * dot(vec3(_321, _324, _327), vec3(_2435 * _2429, _2435 * _2430, _2435 * _2431))) + _2450;
                        float _2456 = _2446 * _2446;
                        float _2460 = ((isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0))) * _2445) / ((_2456 * 0.699999988079071044921875) + 1.0);
                        float _2464 = (-0.0) - _1919;
                        float _2465 = (-0.0) - _1920;
                        float _2466 = (-0.0) - _1921;
                        float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
                        float _2474 = dot(vec3(_321, _324, _327), vec3(_2470 * _2464, _2470 * _2465, _2470 * _2466));
                        float _3605 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
                        float _3616 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
                        float _2478 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
                        float _2482 = (0.5 / (((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) + 9.9999999392252902907785028219223e-09) + _2478)) * _2478;
                        float _3627 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
                        float _2491 = (((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * 3.1415927410125732421875) / ((_2456 * 2.1991131305694580078125) + 3.141590118408203125)) * _2445;
                        _2293 = (_2460 * _2408.x) + _2366;
                        _2294 = (_2460 * _2408.y) + _2367;
                        _2295 = (_2460 * _2408.z) + _2368;
                        _2290 = (_2491 * _2425.x) + _2363;
                        _2291 = (_2491 * _2425.y) + _2364;
                        _2292 = (_2491 * _2425.z) + _2365;
                        if (_2370 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2363 = _2290;
                            _2364 = _2291;
                            _2365 = _2292;
                            _2366 = _2293;
                            _2367 = _2294;
                            _2368 = _2295;
                            _2369 = _2370;
                        }
                    }
                    frontier_phi_66_pred = _2290;
                    frontier_phi_66_pred_1 = _2295;
                    frontier_phi_66_pred_2 = _2294;
                    frontier_phi_66_pred_3 = _2293;
                    frontier_phi_66_pred_4 = _2292;
                    frontier_phi_66_pred_5 = _2291;
                }
                _2067 = frontier_phi_66_pred;
                _2077 = frontier_phi_66_pred_1;
                _2075 = frontier_phi_66_pred_2;
                _2073 = frontier_phi_66_pred_3;
                _2071 = frontier_phi_66_pred_4;
                _2069 = frontier_phi_66_pred_5;
                uint _2225 = _2224 + 1u;
                if (_2225 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2218 = _2067;
                    _2219 = _2069;
                    _2220 = _2071;
                    _2221 = _2073;
                    _2222 = _2075;
                    _2223 = _2077;
                    _2224 = _2225;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2066 = _2067;
            _2068 = _2069;
            _2070 = _2071;
            _2072 = _2073;
            _2074 = _2075;
            _2076 = _2077;
        }
        uvec4 _2080 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2081 = _2080.z;
        uint _2083 = (_2081 >> 8u) & 15u;
        float _2189;
        float _2191;
        float _2193;
        float _2195;
        float _2197;
        float _2199;
        if (((4294967295u << _2083) & _1965) == 0u)
        {
            _2189 = _2066;
            _2191 = _2068;
            _2193 = _2070;
            _2195 = _2072;
            _2197 = _2074;
            _2199 = _2076;
        }
        else
        {
            float _2214 = inversesqrt(dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2083 < ((_2081 >> 12u) & 15u))
            {
                float _2190;
                float _2192;
                float _2194;
                float _2196;
                float _2198;
                float _2200;
                float _2346 = _2066;
                float _2347 = _2068;
                float _2348 = _2070;
                float _2349 = _2072;
                float _2350 = _2074;
                float _2351 = _2076;
                uint _2352 = _2083;
                uint _2361;
                bool _2362;
                for (;;)
                {
                    _2361 = texelFetch(g_lightClassification, int((((_1959 << 5u) + (_1945 << 9u)) + (_2352 << 2u)) >> 2u)).x;
                    _2362 = _2361 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2362)
                    {
                        frontier_phi_77_pred = _2351;
                        frontier_phi_77_pred_1 = _2350;
                        frontier_phi_77_pred_2 = _2349;
                        frontier_phi_77_pred_3 = _2348;
                        frontier_phi_77_pred_4 = _2347;
                        frontier_phi_77_pred_5 = _2346;
                    }
                    else
                    {
                        float _2505;
                        float _2506;
                        float _2507;
                        float _2508;
                        float _2509;
                        float _2510;
                        float _2757;
                        float _2758;
                        float _2759;
                        float _2760;
                        float _2761;
                        float _2762;
                        float _2518 = _2346;
                        float _2519 = _2347;
                        float _2520 = _2348;
                        float _2521 = _2349;
                        float _2522 = _2350;
                        float _2523 = _2351;
                        uint _2524 = _2361;
                        uint _2525;
                        vec4 _2550;
                        float _2551;
                        vec4 _2566;
                        vec3 _2578;
                        vec4 _2594;
                        vec4 _2610;
                        float _2657;
                        bool _2658;
                        for (;;)
                        {
                            uint _2535 = ((_2352 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2524));
                            _2525 = (_2524 + 4294967295u) & _2524;
                            uint _2537 = _2535 * 40u;
                            _2550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2537 + 3u)).x));
                            _2551 = _2550.w;
                            uint _2553 = (_2535 * 40u) + 4u;
                            _2566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 3u)).x));
                            uint _2568 = (_2535 * 40u) + 8u;
                            _2578 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 2u)).x));
                            uint _2581 = (_2535 * 40u) + 16u;
                            _2594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 3u)).x));
                            uint _2597 = (_2535 * 40u) + 20u;
                            _2610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 3u)).x));
                            uint _2613 = (_2535 * 40u) + 24u;
                            vec4 _2626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 3u)).x));
                            uint _2632 = (_2535 * 40u) + 28u;
                            vec4 _2645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 3u)).x));
                            _2657 = fma(_1921, _2645.z, fma(_1920, _2645.y, _2645.x * _1919)) + _2645.w;
                            _2658 = !((fma(_1921, _2626.z, fma(_1920, _2626.y, _2626.x * _1919)) + _2626.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2658)
                            {
                                float _2685 = _2550.x - _1919;
                                float _2686 = _2550.y - _1920;
                                float _2687 = _2550.z - _1921;
                                float _2688 = dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687));
                                float _2691 = inversesqrt(_2688);
                                float _2692 = _2691 * _2685;
                                float _2693 = _2691 * _2686;
                                float _2694 = _2691 * _2687;
                                float _2698 = 1.0 - (_2688 / (_2551 * _2551));
                                float _3638 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                                float _2699 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
                                float _2703 = sqrt(_2688) * _2566.w;
                                float _2705 = 1.39999997615814208984375 / (_2703 + 1.39999997615814208984375);
                                float _2706 = _2705 * _2705;
                                float _2707 = 1.0 - _2706;
                                float _2709 = (_2707 * dot(vec3(_2692, _2693, _2694), vec3(_321, _324, _327))) + _2706;
                                float _2712 = _2703 * _2703;
                                float _2716 = (fma(_1921, _2594.z, fma(_1920, _2594.y, _2594.x * _1919)) + _2594.w) / _2657;
                                float _2717 = (fma(_1921, _2610.z, fma(_1920, _2610.y, _2610.x * _1919)) + _2610.w) / _2657;
                                float _2721 = 1.0 - dot(vec2(_2716, _2717), vec2(_2716, _2717));
                                float _3654 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                                float _2722 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
                                float _2723 = _2722 * (((isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0))) * _2699) / ((_2712 * 0.699999988079071044921875) + 1.0));
                                float _2733 = dot(vec3(_321, _324, _327), vec3((-0.0) - (_1919 * _2214), (-0.0) - (_1920 * _2214), (-0.0) - (_1921 * _2214)));
                                float _3665 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                                float _2741 = (_2707 * dot(vec3(_321, _324, _327), vec3(_2692, _2693, _2694))) + _2706;
                                float _3676 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                                float _2742 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
                                float _2746 = (0.5 / (((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) + 9.9999999392252902907785028219223e-09) + _2742)) * _2742;
                                float _3687 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                                float _2753 = (_2722 * _2699) * (((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 3.1415927410125732421875) / ((_2712 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2723 * _2566.y;
                                frontier_phi_83_pred_1 = _2723 * _2566.x;
                                frontier_phi_83_pred_2 = _2753 * _2578.z;
                                frontier_phi_83_pred_3 = _2753 * _2578.y;
                                frontier_phi_83_pred_4 = _2753 * _2578.x;
                                frontier_phi_83_pred_5 = _2723 * _2566.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2761 = frontier_phi_83_pred;
                            _2760 = frontier_phi_83_pred_1;
                            _2759 = frontier_phi_83_pred_2;
                            _2758 = frontier_phi_83_pred_3;
                            _2757 = frontier_phi_83_pred_4;
                            _2762 = frontier_phi_83_pred_5;
                            _2508 = _2760 + _2521;
                            _2509 = _2761 + _2522;
                            _2510 = _2762 + _2523;
                            _2505 = _2757 + _2518;
                            _2506 = _2758 + _2519;
                            _2507 = _2759 + _2520;
                            if (_2525 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2518 = _2505;
                                _2519 = _2506;
                                _2520 = _2507;
                                _2521 = _2508;
                                _2522 = _2509;
                                _2523 = _2510;
                                _2524 = _2525;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2510;
                        frontier_phi_77_pred_1 = _2509;
                        frontier_phi_77_pred_2 = _2508;
                        frontier_phi_77_pred_3 = _2507;
                        frontier_phi_77_pred_4 = _2506;
                        frontier_phi_77_pred_5 = _2505;
                    }
                    _2200 = frontier_phi_77_pred;
                    _2198 = frontier_phi_77_pred_1;
                    _2196 = frontier_phi_77_pred_2;
                    _2194 = frontier_phi_77_pred_3;
                    _2192 = frontier_phi_77_pred_4;
                    _2190 = frontier_phi_77_pred_5;
                    uint _2353 = _2352 + 1u;
                    if (_2353 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2346 = _2190;
                        _2347 = _2192;
                        _2348 = _2194;
                        _2349 = _2196;
                        _2350 = _2198;
                        _2351 = _2200;
                        _2352 = _2353;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2194;
                frontier_phi_58_59_ladder_1 = _2200;
                frontier_phi_58_59_ladder_2 = _2198;
                frontier_phi_58_59_ladder_3 = _2196;
                frontier_phi_58_59_ladder_4 = _2192;
                frontier_phi_58_59_ladder_5 = _2190;
            }
            else
            {
                frontier_phi_58_59_ladder = _2070;
                frontier_phi_58_59_ladder_1 = _2076;
                frontier_phi_58_59_ladder_2 = _2074;
                frontier_phi_58_59_ladder_3 = _2072;
                frontier_phi_58_59_ladder_4 = _2068;
                frontier_phi_58_59_ladder_5 = _2066;
            }
            _2189 = frontier_phi_58_59_ladder_5;
            _2191 = frontier_phi_58_59_ladder_4;
            _2193 = frontier_phi_58_59_ladder;
            _2195 = frontier_phi_58_59_ladder_3;
            _2197 = frontier_phi_58_59_ladder_2;
            _2199 = frontier_phi_58_59_ladder_1;
        }
        float _2204 = isnan(1.0) ? _366 : (isnan(_366) ? 1.0 : min(_366, 1.0));
        _1978 = (_2204 * _2195) + _1541;
        _1980 = (_2204 * _2197) + _1543;
        _1982 = (_2204 * _2199) + _1545;
        _1984 = ((_2189 * 0.039999999105930328369140625) * _2204) + _1790;
        _1986 = ((_2191 * 0.039999999105930328369140625) * _2204) + _1792;
        _1988 = ((_2193 * 0.039999999105930328369140625) * _2204) + _1794;
    }
    else
    {
        _1978 = _1541;
        _1980 = _1543;
        _1982 = _1545;
        _1984 = _1790;
        _1986 = _1792;
        _1988 = _1794;
    }
    float _3703 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3714 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3725 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _2005 = ((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1978 + ((isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0))) * _366))) + ((_1984 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _1177)) * cbPerFrame._m0[3u].x);
    float _2006 = ((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1980 + ((isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0))) * _366))) + ((_1986 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _1177)) * cbPerFrame._m0[3u].x);
    float _2007 = ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1982 + ((isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0))) * _366))) + ((_1988 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _1177)) * cbPerFrame._m0[3u].x);
    uint _2008 = _340 + 6u;
    float _2016 = _300 / cbSceneParam._m0[86u].x;
    float _2017 = _301 / cbSceneParam._m0[86u].y;
    vec4 _2031 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2016, _2017, (log2((isnan(cbSceneParam._m0[77u].w) ? _220 : (isnan(_220) ? cbSceneParam._m0[77u].w : min(_220, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2033 = _2031.x;
    float _2034 = _2031.y;
    float _2035 = _2031.z;
    float _2036 = _2031.w;
    float _2129;
    float _2131;
    float _2133;
    float _2135;
    if (_220 > cbSceneParam._m0[78u].w)
    {
        float _2091 = isnan(_220) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _220 : min(cbSceneParam._m0[80u].w, _220));
        float _2092 = _2091 / _220;
        float _2103 = _2092 * _272;
        float _2104 = _273 * _2092;
        float _2105 = (-0.0) - _2104;
        float _2107 = _2092 * _274;
        float _2109 = (cbSceneParam._m0[77u].w * _2105) / _2091;
        float _2110 = _2109 + cbSceneParam._m0[79u].w;
        float _2111 = cbSceneParam._m0[79u].w - _2104;
        float _2117 = sqrt(((_2103 * _2103) + (_2104 * _2104)) + (_2107 * _2107));
        float _2120 = (1.0 - (cbSceneParam._m0[77u].w / _2091)) * _2117;
        float _2125 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2127 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2303;
        if (abs((_2105 - _2109) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2303 = ((((_2110 > 0.0) ? exp2(_2125 * _2110) : (2.0 - exp2(_2127 * _2110))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2120;
        }
        else
        {
            float _2247 = 1.0 / cbSceneParam._m0[80u].x;
            float _2248 = isnan(_2111) ? _2110 : (isnan(_2110) ? _2111 : max(_2110, _2111));
            float _2249 = isnan(_2111) ? _2110 : (isnan(_2110) ? _2111 : min(_2110, _2111));
            float _2258 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : min(_2248, 0.0));
            float _2259 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : min(_2249, 0.0));
            _2303 = ((abs(_2117 / _2105) * cbSceneParam._m0[80u].y) * ((((_2258 - _2259) * 2.0) - ((exp2(_2125 * (isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0)))) - exp2(_2125 * (isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0))))) * _2247)) - ((exp2(_2127 * _2258) - exp2(_2127 * _2259)) * _2247))) + (_2120 * cbSceneParam._m0[80u].z);
        }
        vec4 _2305 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2016, _2017, 1.0), 0.0);
        float _2314 = exp2((_2303 * (-1.44269502162933349609375)) * (1.0 - _2305.w));
        float _2315 = log2(_2314);
        float _2331 = log2(_2036);
        _2129 = (exp2(_2331 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2315 * cbSceneParam._m0[78u].x)) * _2305.x) / cbSceneParam._m0[78u].x)) + _2033;
        _2131 = (exp2(_2331 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2315 * cbSceneParam._m0[78u].y)) * _2305.y) / cbSceneParam._m0[78u].y)) + _2034;
        _2133 = (exp2(_2331 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2315 * cbSceneParam._m0[78u].z)) * _2305.z) / cbSceneParam._m0[78u].z)) + _2035;
        _2135 = _2314 * _2036;
    }
    else
    {
        _2129 = _2033;
        _2131 = _2034;
        _2133 = _2035;
        _2135 = _2036;
    }
    bool _2341;
    vec4 _2145;
    vec4 _2168;
    float _2170;
    float _2174;
    float _2175;
    float _2176;
    float _2177;
    bool _2188;
    for (;;)
    {
        _2145 = cbMatDynParam._m0[0u];
        float _2147 = roundEven(_2145.y);
        bool _2148 = _2147 == 3.0;
        float _2150 = log2(_2135);
        float _2157 = exp2(_2150 * cbSceneParam._m0[78u].x) * _2005;
        float _2158 = exp2(_2150 * cbSceneParam._m0[78u].y) * _2006;
        float _2159 = exp2(_2150 * cbSceneParam._m0[78u].z) * _2007;
        float _2166 = _288 + (-0.5);
        _2168 = cbMtdParam._m0[1u];
        _2170 = _2168.y * _2166;
        float _2173 = (_2147 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2174 = _2173 * (_2148 ? _2157 : (_2157 + (cbSceneParam._m0[72u].w * _2129)));
        _2175 = _2173 * (_2148 ? _2158 : (_2158 + (cbSceneParam._m0[72u].w * _2131)));
        _2176 = _2173 * (_2148 ? _2159 : (_2159 + (cbSceneParam._m0[72u].w * _2133)));
        _2177 = _2166 * 0.999000012874603271484375;
        _2188 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2188)
        {
            if ((cbInstanceData._m0[_340 + 7u].x + _2177) < 0.5)
            {
                _2341 = true;
                break;
            }
        }
        uint _2282 = _342 + uint(_2145.w);
        if ((cbInstanceData._m0[_2282].w < 1.0) && ((cbInstanceData._m0[_2282].w + _2177) < 0.5))
        {
            _2341 = true;
            break;
        }
        if ((_2170 + _190) < _2168.x)
        {
            _2341 = true;
            break;
        }
        _2341 = false;
        break;
    }
    float _2496;
    if (_2341)
    {
        discard_state = true;
        _2496 = 0.0;
    }
    else
    {
        _2496 = cbInstanceData._m0[_2008].w;
    }
    SV_Target.x = _2174;
    SV_Target.y = _2175;
    SV_Target.z = _2176;
    SV_Target.w = _2496;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2008].w;
    discard_exit();
}


