#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_nrd_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _697;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _161 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _162 = _161 * NORMAL.x;
    float _163 = _161 * NORMAL.y;
    float _164 = _161 * NORMAL.z;
    vec4 _184 = texture(sampler2D(M_A_M0_Edge_nrd_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _190 = _184.x * cbMtdParam._m0[9u].x;
    float _191 = _184.y * cbMtdParam._m0[9u].y;
    float _192 = _184.z * cbMtdParam._m0[9u].z;
    float _196 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _197 = _196 * _162;
    float _198 = _196 * _163;
    float _199 = _196 * _164;
    float _3091 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _3102 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _3113 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _219 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _277 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _278 = _271 * _277;
    float _279 = _272 * _277;
    float _280 = _273 * _277;
    float _286 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _287 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _308 = fma(_199, cbSceneParam._m0[5u].z, fma(_198, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _197));
    float _311 = fma(_199, cbSceneParam._m0[6u].z, fma(_198, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _197));
    float _314 = fma(_199, cbSceneParam._m0[7u].z, fma(_198, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _197));
    uint _327 = uint(roundEven(NORMAL.w)) * 13u;
    uint _330 = (_327 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _336 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0)))) * cbInstanceData._m0[_330].x;
    float _337 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0)))) * cbInstanceData._m0[_330].y;
    float _338 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0)))) * cbInstanceData._m0[_330].z;
    float _3124 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _339 = isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0));
    float _3135 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _340 = isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0));
    float _3146 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _341 = isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0));
    vec4 _350 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _286, cbSceneParam._m0[86u].y * _287));
    float _353 = _350.x * TEXCOORD.z;
    float _354 = dot(vec3(_197, _198, _199), vec3(_278, _279, _280));
    float _357 = _354 * 2.0;
    float _362 = (_357 * _197) - _278;
    float _363 = (_357 * _198) - _279;
    float _364 = (_357 * _199) - _280;
    float _386 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _390 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _394 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _696;
    float _698;
    float _699;
    float _700;
    float _701;
    float _702;
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _421 = fma(_394, cbModelParam._m0[26u].z, fma(_390, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _386));
        float _425 = fma(_394, cbModelParam._m0[27u].z, fma(_390, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _386));
        float _429 = fma(_394, cbModelParam._m0[28u].z, fma(_390, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _386));
        float _454 = _386 + _197;
        float _455 = _390 + _198;
        float _456 = _394 + _199;
        float _466 = fma(_456, cbModelParam._m0[26u].z, fma(_455, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _454)) - _421;
        float _467 = fma(_456, cbModelParam._m0[27u].z, fma(_455, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _454)) - _425;
        float _468 = fma(_456, cbModelParam._m0[28u].z, fma(_455, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _454)) - _429;
        float _472 = inversesqrt(dot(vec3(_466, _467, _468), vec3(_466, _467, _468)));
        float _485 = ((_472 * _466) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_421 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _486 = ((_472 * _467) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_425 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _487 = ((_472 * _468) / cbModelParam._m0[34u].z) + ((((((_429 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _490 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_485, _486, _487), 0.0);
        vec4 _497 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_485, _486, _487), 0.0);
        vec4 _504 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_485, _486, _487), 0.0);
        vec4 _511 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_485, _486, _487), 0.0);
        float _524 = exp2((_490.w + (-0.5)) * 20.0) * 2.0;
        float _525 = _524 * (_490.x + (-0.5));
        float _526 = _524 * (_490.y + (-0.5));
        float _527 = _524 * (_490.z + (-0.5));
        float _534 = exp2((_497.w + (-0.5)) * 20.0) * 2.0;
        float _535 = _534 * (_497.x + (-0.5));
        float _536 = _534 * (_497.y + (-0.5));
        float _537 = _534 * (_497.z + (-0.5));
        float _544 = exp2((_504.w + (-0.5)) * 20.0) * 2.0;
        float _545 = _544 * (_504.x + (-0.5));
        float _546 = _544 * (_504.y + (-0.5));
        float _547 = _544 * (_504.z + (-0.5));
        float _554 = exp2((_511.w + (-0.5)) * 20.0) * 2.0;
        float _555 = _554 * (_511.x + (-0.5));
        float _556 = _554 * (_511.y + (-0.5));
        float _557 = _554 * (_511.z + (-0.5));
        float _558 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
        float _559 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        float _560 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
        float _561 = _525 * 0.5;
        float _562 = _535 * 0.5;
        float _563 = _545 * 0.5;
        float _564 = dot(vec3(_561, _562, _563), vec3(_561, _562, _563));
        float _569 = (_564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_564);
        float _578 = (dot(vec3(_197, _198, _199), vec3(_569 * _561, _569 * _562, _569 * _563)) + 1.0) * 0.5;
        float _3172 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        float _588 = sqrt(((_562 * _562) + (_561 * _561)) + (_563 * _563)) / (_558 + 9.9999997473787516355514526367188e-06);
        float _3183 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _589 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
        float _590 = _589 * 2.0;
        float _594 = (1.0 - _589) / (_589 + 1.0);
        float _3194 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        float _595 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
        float _604 = ((((1.0 - _595) * (_590 + 2.0)) * exp2(log2(isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0))) * (_590 + 1.0))) + _595) * _558;
        float _605 = _526 * 0.5;
        float _606 = _536 * 0.5;
        float _607 = _546 * 0.5;
        float _608 = dot(vec3(_605, _606, _607), vec3(_605, _606, _607));
        float _613 = (_608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_608);
        float _621 = (dot(vec3(_197, _198, _199), vec3(_613 * _605, _613 * _606, _613 * _607)) + 1.0) * 0.5;
        float _3205 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _630 = sqrt(((_606 * _606) + (_605 * _605)) + (_607 * _607)) / (_559 + 9.9999997473787516355514526367188e-06);
        float _3216 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _631 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
        float _632 = _631 * 2.0;
        float _636 = (1.0 - _631) / (_631 + 1.0);
        float _3227 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _637 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
        float _646 = ((((1.0 - _637) * (_632 + 2.0)) * exp2(log2(isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0))) * (_632 + 1.0))) + _637) * _559;
        float _647 = _527 * 0.5;
        float _648 = _537 * 0.5;
        float _649 = _547 * 0.5;
        float _650 = dot(vec3(_647, _648, _649), vec3(_647, _648, _649));
        float _655 = (_650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_650);
        float _663 = (dot(vec3(_197, _198, _199), vec3(_655 * _647, _655 * _648, _655 * _649)) + 1.0) * 0.5;
        float _3238 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _672 = sqrt(((_648 * _648) + (_647 * _647)) + (_649 * _649)) / (_560 + 9.9999997473787516355514526367188e-06);
        float _3249 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
        float _674 = _673 * 2.0;
        float _678 = (1.0 - _673) / (_673 + 1.0);
        float _3260 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _688 = ((((1.0 - _679) * (_674 + 2.0)) * exp2(log2(isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0))) * (_674 + 1.0))) + _679) * _560;
        _696 = _527;
        _698 = _526;
        _699 = _525;
        _700 = _537;
        _701 = _536;
        _702 = _535;
        _703 = _547;
        _704 = _546;
        _705 = _545;
        _706 = _560;
        _707 = _559;
        _708 = _558;
        _709 = cbModelParam._m0[36u].z * (isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0)));
        _710 = cbModelParam._m0[36u].z * (isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0)));
        _711 = cbModelParam._m0[36u].z * (isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0)));
    }
    else
    {
        _696 = _697;
        _698 = _697;
        _699 = _697;
        _700 = _697;
        _701 = _697;
        _702 = _697;
        _703 = _697;
        _704 = _697;
        _705 = _697;
        _706 = _697;
        _707 = _697;
        _708 = _697;
        _709 = 0.0;
        _710 = 0.0;
        _711 = 0.0;
    }
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _737 = fma(_394, cbModelParam._m0[30u].z, fma(_390, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _386));
        float _741 = fma(_394, cbModelParam._m0[31u].z, fma(_390, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _386));
        float _745 = fma(_394, cbModelParam._m0[32u].z, fma(_390, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _386));
        float _768 = _386 + _197;
        float _769 = _390 + _198;
        float _770 = _394 + _199;
        float _780 = fma(_770, cbModelParam._m0[30u].z, fma(_769, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _768)) - _737;
        float _781 = fma(_770, cbModelParam._m0[31u].z, fma(_769, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _768)) - _741;
        float _782 = fma(_770, cbModelParam._m0[32u].z, fma(_769, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _768)) - _745;
        float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
        float _799 = ((_786 * _780) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_737 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _800 = ((_786 * _781) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_741 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _801 = ((_786 * _782) / cbModelParam._m0[35u].z) + ((((((_745 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        float _836 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_803.x + (-0.5));
        float _838 = _836 * (_803.y + (-0.5));
        float _839 = _836 * (_803.z + (-0.5));
        float _846 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_810.x + (-0.5));
        float _848 = _846 * (_810.y + (-0.5));
        float _849 = _846 * (_810.z + (-0.5));
        float _856 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_817.x + (-0.5));
        float _858 = _856 * (_817.y + (-0.5));
        float _859 = _856 * (_817.z + (-0.5));
        float _866 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_824.x + (-0.5));
        float _868 = _866 * (_824.y + (-0.5));
        float _869 = _866 * (_824.z + (-0.5));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = _837 * 0.5;
        float _874 = _847 * 0.5;
        float _875 = _857 * 0.5;
        float _876 = dot(vec3(_873, _874, _875), vec3(_873, _874, _875));
        float _881 = (_876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_876);
        float _889 = (dot(vec3(_197, _198, _199), vec3(_881 * _873, _881 * _874, _881 * _875)) + 1.0) * 0.5;
        float _3301 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _898 = sqrt(((_874 * _874) + (_873 * _873)) + (_875 * _875)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3312 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3323 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * (_900 + 1.0))) + _905) * _870;
        float _915 = _838 * 0.5;
        float _916 = _848 * 0.5;
        float _917 = _858 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_197, _198, _199), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3356 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_942 + 1.0))) + _947) * _871;
        float _957 = _839 * 0.5;
        float _958 = _849 * 0.5;
        float _959 = _859 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_197, _198, _199), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3389 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_984 + 1.0))) + _989) * _872;
        _1006 = _839;
        _1007 = _838;
        _1008 = _837;
        _1009 = _849;
        _1010 = _848;
        _1011 = _847;
        _1012 = _859;
        _1013 = _858;
        _1014 = _857;
        _1015 = _872;
        _1016 = _871;
        _1017 = _870;
        _1018 = cbModelParam._m0[36u].w * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
        _1019 = cbModelParam._m0[36u].w * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1020 = cbModelParam._m0[36u].w * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
    }
    else
    {
        _1006 = _697;
        _1007 = _697;
        _1008 = _697;
        _1009 = _697;
        _1010 = _697;
        _1011 = _697;
        _1012 = _697;
        _1013 = _697;
        _1014 = _697;
        _1015 = _697;
        _1016 = _697;
        _1017 = _697;
        _1018 = 0.0;
        _1019 = 0.0;
        _1020 = 0.0;
    }
    float _1030 = (cbModelParam._m0[1u].x * (_1018 - _709)) + _709;
    float _1031 = (cbModelParam._m0[1u].x * (_1019 - _710)) + _710;
    float _1032 = (cbModelParam._m0[1u].x * (_1020 - _711)) + _711;
    float _1053 = fma(_1032, cbSceneParam._m0[89u].z, fma(_1031, cbSceneParam._m0[89u].y, _1030 * cbSceneParam._m0[89u].x));
    float _1056 = fma(_1032, cbSceneParam._m0[90u].z, fma(_1031, cbSceneParam._m0[90u].y, _1030 * cbSceneParam._m0[90u].x));
    float _1059 = fma(_1032, cbSceneParam._m0[91u].z, fma(_1031, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1030));
    float _1074 = _362 * 0.5;
    float _1075 = _363 * 0.5;
    float _1076 = _364 * 0.5;
    float _1077 = dot(vec4(_1074, _1075, _1076, 1.0), vec4(_1008, _1011, _1014, _1017));
    float _1080 = dot(vec4(_1074, _1075, _1076, 1.0), vec4(_1007, _1010, _1013, _1016));
    float _1083 = dot(vec4(_1074, _1075, _1076, 1.0), vec4(_1006, _1009, _1012, _1015));
    float _1117;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1090 = dot(vec4(_1074, _1075, _1076, 1.0), vec4(_696, _700, _703, _706));
        float _1094 = dot(vec4(_1074, _1075, _1076, 1.0), vec4(_698, _701, _704, _707));
        float _1098 = dot(vec4(_1074, _1075, _1076, 1.0), vec4(_699, _702, _705, _708));
        float _1105 = dot(vec4(cbModelParam._m0[39u]), vec4(_1074, _1075, _1076, 1.0));
        _1117 = dot(vec3(isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)), isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)), isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1105) ? 0.0 : (isnan(0.0) ? _1105 : max(0.0, _1105))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1117 = 1.0;
    }
    float _1128;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1119 = dot(vec4(cbModelParam._m0[40u]), vec4(_1074, _1075, _1076, 1.0));
        _1128 = dot(vec3(isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)), isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)), isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1119) ? 0.0 : (isnan(0.0) ? _1119 : max(0.0, _1119))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1128 = 1.0;
    }
    float _1132 = (_1128 * cbModelParam._m0[1u].x) + (_1117 * (1.0 - cbModelParam._m0[1u].x));
    float _1141 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1223;
    float _1225;
    float _1227;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1190 = fma(_394, cbModelParam._m0[13u].z, fma(_390, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _386)) + cbModelParam._m0[13u].w;
        float _1194 = fma(_394, cbModelParam._m0[14u].z, fma(_390, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _386)) + cbModelParam._m0[14u].w;
        float _1198 = fma(_394, cbModelParam._m0[15u].z, fma(_390, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _386)) + cbModelParam._m0[15u].w;
        float _1201 = fma(_364, cbModelParam._m0[13u].z, fma(_363, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _362));
        float _1204 = fma(_364, cbModelParam._m0[14u].z, fma(_363, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _362));
        float _1207 = fma(_364, cbModelParam._m0[15u].z, fma(_363, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _362));
        float _1233;
        if (_1201 > 0.0)
        {
            _1233 = abs((1.0 - _1190) / _1201);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1201 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1190 + 1.0) / _1201);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1233 = frontier_phi_14_12_ladder;
        }
        float _1408;
        if (_1204 > 0.0)
        {
            _1408 = abs((1.0 - _1194) / _1204);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1204 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1194 + 1.0) / _1204);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1408 = frontier_phi_23_19_ladder;
        }
        float _1705;
        if (_1207 > 0.0)
        {
            _1705 = abs((1.0 - _1198) / _1207);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1207 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1198 + 1.0) / _1207);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1705 = frontier_phi_35_30_ladder;
        }
        float _1707 = isnan(_1408) ? _1233 : (isnan(_1233) ? _1408 : min(_1233, _1408));
        float _1708 = isnan(_1705) ? _1707 : (isnan(_1707) ? _1705 : min(_1707, _1705));
        float _1712 = (_1708 * _1201) + _1190;
        float _1713 = (_1708 * _1204) + _1194;
        float _1714 = (_1708 * _1207) + _1198;
        float _1715 = _1708 * 9.9999997473787516355514526367188e-05;
        float _1717 = (-1.0) - _1715;
        float _1719 = _1715 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1714 > _1719) || ((_1714 < _1717) || ((_1713 > _1719) || ((_1713 < _1717) || ((_1712 < _1717) || (_1712 > _1719))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1859 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1714, cbModelParam._m0[9u].z, fma(_1713, cbModelParam._m0[9u].y, _1712 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1714, cbModelParam._m0[10u].z, fma(_1713, cbModelParam._m0[10u].y, _1712 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1714, cbModelParam._m0[11u].z, fma(_1713, cbModelParam._m0[11u].y, _1712 * cbModelParam._m0[11u].x))), _1141);
            frontier_phi_13_35_ladder = _1859.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1859.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1859.x * cbModelParam._m0[1u].y;
        }
        _1223 = frontier_phi_13_35_ladder_2;
        _1225 = frontier_phi_13_35_ladder_1;
        _1227 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1211 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_362, _363, _364), _1141);
        _1223 = _1211.x * cbModelParam._m0[1u].y;
        _1225 = _1211.y * cbModelParam._m0[1u].y;
        _1227 = _1211.z * cbModelParam._m0[1u].y;
    }
    float _1230 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1323;
    float _1325;
    float _1327;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1287 = fma(_394, cbModelParam._m0[21u].z, fma(_390, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _386)) + cbModelParam._m0[21u].w;
        float _1291 = fma(_394, cbModelParam._m0[22u].z, fma(_390, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _386)) + cbModelParam._m0[22u].w;
        float _1295 = fma(_394, cbModelParam._m0[23u].z, fma(_390, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _386)) + cbModelParam._m0[23u].w;
        float _1298 = fma(_364, cbModelParam._m0[21u].z, fma(_363, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _362));
        float _1301 = fma(_364, cbModelParam._m0[22u].z, fma(_363, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _362));
        float _1304 = fma(_364, cbModelParam._m0[23u].z, fma(_363, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _362));
        float _1413;
        if (_1298 > 0.0)
        {
            _1413 = abs((1.0 - _1287) / _1298);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1298 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1287 + 1.0) / _1298);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1413 = frontier_phi_25_21_ladder;
        }
        float _1732;
        if (_1301 > 0.0)
        {
            _1732 = abs((1.0 - _1291) / _1301);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1301 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1291 + 1.0) / _1301);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1732 = frontier_phi_37_32_ladder;
        }
        float _2005;
        if (_1304 > 0.0)
        {
            _2005 = abs((1.0 - _1295) / _1304);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1304 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1295 + 1.0) / _1304);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2005 = frontier_phi_47_44_ladder;
        }
        float _2007 = isnan(_1732) ? _1413 : (isnan(_1413) ? _1732 : min(_1413, _1732));
        float _2008 = isnan(_2005) ? _2007 : (isnan(_2007) ? _2005 : min(_2007, _2005));
        float _2012 = (_2008 * _1298) + _1287;
        float _2013 = (_2008 * _1301) + _1291;
        float _2014 = (_2008 * _1304) + _1295;
        float _2015 = _2008 * 9.9999997473787516355514526367188e-05;
        float _2016 = (-1.0) - _2015;
        float _2018 = _2015 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2014 > _2018) || ((_2014 < _2016) || ((_2013 > _2018) || ((_2013 < _2016) || ((_2012 < _2016) || (_2012 > _2018))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2105 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2014, cbModelParam._m0[17u].z, fma(_2013, cbModelParam._m0[17u].y, _2012 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2014, cbModelParam._m0[18u].z, fma(_2013, cbModelParam._m0[18u].y, _2012 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2014, cbModelParam._m0[19u].z, fma(_2013, cbModelParam._m0[19u].y, _2012 * cbModelParam._m0[19u].x))), _1230);
            frontier_phi_22_47_ladder = _2105.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2105.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2105.x * cbModelParam._m0[1u].z;
        }
        _1323 = frontier_phi_22_47_ladder_2;
        _1325 = frontier_phi_22_47_ladder_1;
        _1327 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1307 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_362, _363, _364), _1230);
        _1323 = _1307.x * cbModelParam._m0[1u].z;
        _1325 = _1307.y * cbModelParam._m0[1u].z;
        _1327 = _1307.z * cbModelParam._m0[1u].z;
    }
    float _1339 = _353 * 0.01200000010430812835693359375;
    float _1341 = _1339 * ((cbModelParam._m0[1u].w * (_1323 - _1223)) + _1223);
    float _1342 = _1339 * ((cbModelParam._m0[1u].w * (_1325 - _1225)) + _1225);
    float _1343 = _1339 * ((cbModelParam._m0[1u].w * (_1327 - _1227)) + _1227);
    float _1346 = fma(_1343, cbSceneParam._m0[89u].z, fma(_1342, cbSceneParam._m0[89u].y, _1341 * cbSceneParam._m0[89u].x));
    float _1349 = fma(_1343, cbSceneParam._m0[90u].z, fma(_1342, cbSceneParam._m0[90u].y, _1341 * cbSceneParam._m0[90u].x));
    float _1352 = fma(_1343, cbSceneParam._m0[91u].z, fma(_1342, cbSceneParam._m0[91u].y, _1341 * cbSceneParam._m0[91u].x));
    float _1387 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1391 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1395 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1399 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1400 = _1387 / _1399;
    float _1401 = _1391 / _1399;
    float _1402 = _1395 / _1399;
    float _1549;
    float _1550;
    float _1551;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1429 = ((uint(_1402 > cbSceneParam._m0[59u].y) + uint(_1402 > cbSceneParam._m0[59u].x)) + uint(_1402 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1430 = _1429 + 43u;
        uint _1438 = _1429 + 44u;
        uint _1446 = _1429 + 45u;
        uint _1454 = _1429 + 46u;
        float _1465 = fma(_1399, cbSceneParam._m0[_1430].w, fma(_1395, cbSceneParam._m0[_1430].z, fma(_1391, cbSceneParam._m0[_1430].y, _1387 * cbSceneParam._m0[_1430].x)));
        float _1469 = fma(_1399, cbSceneParam._m0[_1438].w, fma(_1395, cbSceneParam._m0[_1438].z, fma(_1391, cbSceneParam._m0[_1438].y, _1387 * cbSceneParam._m0[_1438].x)));
        float _1477 = fma(_1399, cbSceneParam._m0[_1454].w, fma(_1395, cbSceneParam._m0[_1454].z, fma(_1391, cbSceneParam._m0[_1454].y, _1387 * cbSceneParam._m0[_1454].x)));
        float _1482 = cbSceneParam._m0[33u].z * _1477;
        float _1484 = cbSceneParam._m0[33u].w * _1477;
        float _1487 = fma(_1399, cbSceneParam._m0[_1446].w, fma(_1395, cbSceneParam._m0[_1446].z, fma(_1391, cbSceneParam._m0[_1446].y, _1387 * cbSceneParam._m0[_1446].x))) / _1477;
        float _1535 = (cbSceneParam._m0[33u].x - sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402))) * cbSceneParam._m0[33u].y;
        float _3515 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1542 = (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1482 + _1465) / _1477, (_1484 + _1469) / _1477), _1487), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1484 + _1465) / _1477, (_1469 - _1482) / _1477), _1487), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1465 - _1482) / _1477, (_1469 - _1484) / _1477), _1487), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1465 - _1484) / _1477, (_1482 + _1469) / _1477), _1487), 0.0)).x), vec4(0.25)));
        _1549 = 1.0 - (_1542 * cbSceneParam._m0[34u].x);
        _1550 = 1.0 - (_1542 * cbSceneParam._m0[34u].y);
        _1551 = 1.0 - (_1542 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1549 = 1.0;
        _1550 = 1.0;
        _1551 = 1.0;
    }
    float _1615;
    float _1617;
    float _1619;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1603 = fma(_1399, cbSceneParam._m0[63u].w, fma(_1395, cbSceneParam._m0[63u].z, fma(_1391, cbSceneParam._m0[63u].y, _1387 * cbSceneParam._m0[63u].x)));
        float _1604 = fma(_1399, cbSceneParam._m0[60u].w, fma(_1395, cbSceneParam._m0[60u].z, fma(_1391, cbSceneParam._m0[60u].y, _1387 * cbSceneParam._m0[60u].x))) / _1603;
        float _1605 = fma(_1399, cbSceneParam._m0[61u].w, fma(_1395, cbSceneParam._m0[61u].z, fma(_1391, cbSceneParam._m0[61u].y, _1387 * cbSceneParam._m0[61u].x))) / _1603;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1604 >= cbSceneParam._m0[64u].x) && (_1605 >= cbSceneParam._m0[64u].y)) && (_1604 <= cbSceneParam._m0[64u].z)) && (_1605 <= cbSceneParam._m0[64u].w))
        {
            float _1745 = fma(_1399, cbSceneParam._m0[62u].w, fma(_1395, cbSceneParam._m0[62u].z, fma(_1391, cbSceneParam._m0[62u].y, _1387 * cbSceneParam._m0[62u].x))) / _1603;
            float _1749 = isnan(cbSceneParam._m0[41u].w) ? _1745 : (isnan(_1745) ? cbSceneParam._m0[41u].w : max(_1745, cbSceneParam._m0[41u].w));
            float _1792 = (cbSceneParam._m0[33u].x - sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402))) * cbSceneParam._m0[33u].y;
            float _3531 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
            float _1799 = (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1604, cbSceneParam._m0[33u].w + _1605), _1749), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1604, _1605 - cbSceneParam._m0[33u].z), _1749), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1604 - cbSceneParam._m0[33u].z, _1605 - cbSceneParam._m0[33u].w), _1749), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1604 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1605), _1749), 0.0)).x), vec4(0.25)));
            float _1803 = 1.0 - (_1799 * cbSceneParam._m0[34u].x);
            float _1804 = 1.0 - (_1799 * cbSceneParam._m0[34u].y);
            float _1805 = 1.0 - (_1799 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1805) ? _1551 : (isnan(_1551) ? _1805 : min(_1551, _1805));
            frontier_phi_34_33_ladder_1 = isnan(_1804) ? _1550 : (isnan(_1550) ? _1804 : min(_1550, _1804));
            frontier_phi_34_33_ladder_2 = isnan(_1803) ? _1549 : (isnan(_1549) ? _1803 : min(_1549, _1803));
        }
        else
        {
            frontier_phi_34_33_ladder = _1551;
            frontier_phi_34_33_ladder_1 = _1550;
            frontier_phi_34_33_ladder_2 = _1549;
        }
        _1615 = frontier_phi_34_33_ladder_2;
        _1617 = frontier_phi_34_33_ladder_1;
        _1619 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1615 = _1549;
        _1617 = _1550;
        _1619 = _1551;
    }
    uvec4 _1624 = floatBitsToUint(cbInstanceData._m0[_327 + 5u]);
    uint _1626 = _1624.x * 14u;
    uint _1627 = _1626 + 13u;
    float _1634 = _353 + (-1.0);
    float _1640 = (cbLight._m0[_1627].x * _1634) + 1.0;
    float _1641 = (cbLight._m0[_1627].y * _1634) + 1.0;
    float _1642 = (cbLight._m0[_1627].z * _1634) + 1.0;
    float _1643 = (cbLight._m0[_1627].w * _1634) + 1.0;
    uint _1644 = _1626 + 5u;
    float _1650 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
    uint _1654 = _1626 + 4u;
    float _1664 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
    uint _1668 = _1626 | 1u;
    float _1679 = dot(vec3(cbLight._m0[_1626].xyz), vec3(_197, _198, _199));
    float _1682 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_197, _198, _199));
    float _3567 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _3578 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _1687 = (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * 0.3183098733425140380859375;
    float _1689 = (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * 0.3183098733425140380859375;
    float _1696 = ((cbLight._m0[_1644].x * _1650) * _1689) + (((cbLight._m0[_1654].x * _1615) * _1664) * _1687);
    float _1697 = ((_1650 * cbLight._m0[_1644].y) * _1689) + (((cbLight._m0[_1654].y * _1617) * _1664) * _1687);
    float _1698 = ((_1650 * cbLight._m0[_1644].z) * _1689) + (((cbLight._m0[_1654].z * _1619) * _1664) * _1687);
    uvec4 _1702 = floatBitsToUint(cbLight._m0[_1626 + 12u]);
    bool _1704 = _1702.x == 0u;
    float _1806;
    float _1808;
    float _1810;
    if (_1704)
    {
        _1806 = _1696;
        _1808 = _1697;
        _1810 = _1698;
    }
    else
    {
        uint _1814 = _1626 + 6u;
        float _1830 = (dot(vec3(cbLight._m0[_1626 + 2u].xyz), vec3(_197, _198, _199)) * 0.5) + 0.5;
        float _1831 = _1830 * _1830;
        float _3589 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1833 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1806 = (((cbLight._m0[_1814].x * 0.3183098733425140380859375) * _1832) * _1833) + _1696;
        _1808 = (((cbLight._m0[_1814].y * 0.3183098733425140380859375) * _1832) * _1833) + _1697;
        _1810 = (((cbLight._m0[_1814].z * 0.3183098733425140380859375) * _1832) * _1833) + _1698;
    }
    bool _1813 = _1702.y == 0u;
    float _1868;
    float _1870;
    float _1872;
    if (_1813)
    {
        _1868 = _1806;
        _1870 = _1808;
        _1872 = _1810;
    }
    else
    {
        uint _1976 = _1626 + 7u;
        float _1992 = (dot(vec3(cbLight._m0[_1626 + 3u].xyz), vec3(_197, _198, _199)) * 0.5) + 0.5;
        float _1993 = _1992 * _1992;
        float _3605 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1994 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1995 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _1868 = (((cbLight._m0[_1976].x * 0.3183098733425140380859375) * _1994) * _1995) + _1806;
        _1870 = (((cbLight._m0[_1976].y * 0.3183098733425140380859375) * _1994) * _1995) + _1808;
        _1872 = (((cbLight._m0[_1976].z * 0.3183098733425140380859375) * _1994) * _1995) + _1810;
    }
    uint _1874 = _1626 + 8u;
    float _1880 = cbLight._m0[_1626].x + _278;
    float _1881 = cbLight._m0[_1626].y + _279;
    float _1882 = cbLight._m0[_1626].z + _280;
    float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
    float _1890 = dot(vec3(_197, _198, _199), vec3(cbLight._m0[_1626].xyz));
    float _3621 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _1894 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1626].xyz), vec3(_1880 * _1886, _1881 * _1886, _1882 * _1886));
    float _3643 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1906 = (exp2(log2(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1912 = (0.5 / ((_1893 + 9.9999999392252902907785028219223e-09) + _1894)) * _1893;
    float _3654 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1914 = (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.31831014156341552734375;
    uint _1928 = _1626 + 9u;
    float _1934 = cbLight._m0[_1668].x + _278;
    float _1935 = cbLight._m0[_1668].y + _279;
    float _1936 = cbLight._m0[_1668].z + _280;
    float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
    float _1944 = dot(vec3(_197, _198, _199), vec3(cbLight._m0[_1668].xyz));
    float _3665 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _1948 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_1934 * _1940, _1935 * _1940, _1936 * _1940));
    float _3676 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1957 = (exp2(log2(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1961 = (0.5 / ((_1947 + 9.9999999392252902907785028219223e-09) + _1894)) * _1947;
    float _3687 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1963 = (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.31831014156341552734375;
    float _1973 = (((_1957 * cbLight._m0[_1928].x) * _1963) * _1650) + ((((cbLight._m0[_1874].x * _1615) * _1906) * _1914) * _1664);
    float _1974 = (((_1957 * cbLight._m0[_1928].y) * _1963) * _1650) + ((((cbLight._m0[_1874].y * _1617) * _1906) * _1914) * _1664);
    float _1975 = (((_1957 * cbLight._m0[_1928].z) * _1963) * _1650) + ((((cbLight._m0[_1874].z * _1619) * _1906) * _1914) * _1664);
    float _2031;
    float _2033;
    float _2035;
    if (_1704)
    {
        _2031 = _1973;
        _2033 = _1974;
        _2035 = _1975;
    }
    else
    {
        uint _2037 = _1626 + 10u;
        uint _2043 = _1626 + 2u;
        float _2049 = cbLight._m0[_2043].x + _278;
        float _2050 = cbLight._m0[_2043].y + _279;
        float _2051 = cbLight._m0[_2043].z + _280;
        float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
        float _2059 = dot(vec3(_197, _198, _199), vec3(cbLight._m0[_2043].xyz));
        float _3698 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2062 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _2063 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2049 * _2055, _2050 * _2055, _2051 * _2055));
        float _3709 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2072 = (exp2(log2(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2076 = (0.5 / ((_2062 + 9.9999999392252902907785028219223e-09) + _1894)) * _2062;
        float _3720 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2078 = (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.31831014156341552734375;
        float _2079 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _2031 = (((_2072 * cbLight._m0[_2037].x) * _2078) * _2079) + _1973;
        _2033 = (((_2072 * cbLight._m0[_2037].y) * _2078) * _2079) + _1974;
        _2035 = (((_2072 * cbLight._m0[_2037].z) * _2078) * _2079) + _1975;
    }
    float _2110;
    float _2112;
    float _2114;
    if (_1813)
    {
        _2110 = _2031;
        _2112 = _2033;
        _2114 = _2035;
    }
    else
    {
        uint _2121 = _1626 + 11u;
        uint _2127 = _1626 + 3u;
        float _2133 = cbLight._m0[_2127].x + _278;
        float _2134 = cbLight._m0[_2127].y + _279;
        float _2135 = cbLight._m0[_2127].z + _280;
        float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
        float _2143 = dot(vec3(_197, _198, _199), vec3(cbLight._m0[_2127].xyz));
        float _3736 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _2147 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2133 * _2139, _2134 * _2139, _2135 * _2139));
        float _3747 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2156 = (exp2(log2(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2160 = (0.5 / ((_2146 + 9.9999999392252902907785028219223e-09) + _1894)) * _2146;
        float _3758 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2162 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 0.31831014156341552734375;
        float _2163 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _2110 = (((_2156 * cbLight._m0[_2121].x) * _2162) * _2163) + _2031;
        _2112 = (((_2156 * cbLight._m0[_2121].y) * _2162) * _2163) + _2033;
        _2114 = (((_2156 * cbLight._m0[_2121].z) * _2162) * _2163) + _2035;
    }
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    if (_1624.y == 0u)
    {
        uvec4 _2184 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2185 = _2184.x;
        uint _2196 = uint((float(_2184.y) * floor(float(uint(cbSceneParam._m0[85u].y * _287) / _2185))) + floor(float(uint(cbSceneParam._m0[85u].x * _286) / _2185)));
        float _2206 = (log2(_1402 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2207 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        uint _2210 = uint(isnan(14.0) ? _2207 : (isnan(_2207) ? 14.0 : min(_2207, 14.0)));
        uvec4 _2215 = texelFetch(g_lightClusterGridBuffer, int(((_2210 << 2u) + (_2196 << 6u)) >> 2u));
        uint _2216 = _2215.x;
        uint _2217 = _2184.z;
        float _2296;
        float _2298;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        if (((((1u << ((_2217 >> 4u) & 15u)) + 4294967295u) & _2216) == 0u) || ((_2217 & 240u) == 0u))
        {
            _2296 = 0.0;
            _2298 = 0.0;
            _2300 = 0.0;
            _2302 = 0.0;
            _2304 = 0.0;
            _2306 = 0.0;
        }
        else
        {
            float _2297;
            float _2299;
            float _2301;
            float _2303;
            float _2305;
            float _2307;
            float _2439 = 0.0;
            float _2440 = 0.0;
            float _2441 = 0.0;
            float _2442 = 0.0;
            float _2443 = 0.0;
            float _2444 = 0.0;
            uint _2445 = 0u;
            uint _2454;
            bool _2455;
            for (;;)
            {
                _2454 = texelFetch(g_lightClassification, int((((_2210 << 5u) + (_2196 << 9u)) + (_2445 << 2u)) >> 2u)).x;
                _2455 = _2454 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2455)
                {
                    frontier_phi_66_pred = _2444;
                    frontier_phi_66_pred_1 = _2443;
                    frontier_phi_66_pred_2 = _2442;
                    frontier_phi_66_pred_3 = _2441;
                    frontier_phi_66_pred_4 = _2440;
                    frontier_phi_66_pred_5 = _2439;
                }
                else
                {
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    uint _2569;
                    _2563 = _2439;
                    _2564 = _2440;
                    _2565 = _2441;
                    _2566 = _2442;
                    _2567 = _2443;
                    _2568 = _2444;
                    _2569 = _2454;
                    float _2495;
                    float _2496;
                    float _2497;
                    float _2498;
                    float _2499;
                    float _2500;
                    for (;;)
                    {
                        uint _2573 = uint(findLSB(_2569)) + (_2445 << 5u);
                        uint _2570 = (_2569 + 4294967295u) & _2569;
                        uint _2575 = _2573 * 48u;
                        vec4 _2589 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2575)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 3u)).x));
                        uint _2595 = (_2573 * 48u) + 4u;
                        vec4 _2608 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2595)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 3u)).x));
                        uint _2614 = (_2573 * 48u) + 8u;
                        vec3 _2625 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2614)).x, texelFetch(g_PointLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2614 + 2u)).x));
                        float _2629 = _2589.x - _1400;
                        float _2630 = _2589.y - _1401;
                        float _2631 = _2589.z - _1402;
                        float _2632 = dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631));
                        float _2635 = inversesqrt(_2632);
                        float _2644 = 1.0 - (_2632 * _2589.w);
                        float _3784 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
                        float _2645 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
                        float _2646 = sqrt(_2632) * _2608.w;
                        float _2649 = 1.39999997615814208984375 / (_2646 + 1.39999997615814208984375);
                        float _2650 = _2649 * _2649;
                        float _2653 = ((1.0 - _2650) * dot(vec3(_308, _311, _314), vec3(_2635 * _2629, _2635 * _2630, _2635 * _2631))) + _2650;
                        float _2656 = _2646 * _2646;
                        float _2660 = ((isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0))) * _2645) / ((_2656 * 0.699999988079071044921875) + 1.0);
                        float _2664 = (-0.0) - _1400;
                        float _2665 = (-0.0) - _1401;
                        float _2666 = (-0.0) - _1402;
                        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
                        float _2674 = dot(vec3(_308, _311, _314), vec3(_2670 * _2664, _2670 * _2665, _2670 * _2666));
                        float _3800 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _3811 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
                        float _2678 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
                        float _2682 = (0.5 / (((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) + 9.9999999392252902907785028219223e-09) + _2678)) * _2678;
                        float _3822 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
                        float _2691 = (((isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * 3.1415927410125732421875) / ((_2656 * 2.1991131305694580078125) + 3.141590118408203125)) * _2645;
                        _2498 = (_2660 * _2608.x) + _2566;
                        _2499 = (_2660 * _2608.y) + _2567;
                        _2500 = (_2660 * _2608.z) + _2568;
                        _2495 = (_2691 * _2625.x) + _2563;
                        _2496 = (_2691 * _2625.y) + _2564;
                        _2497 = (_2691 * _2625.z) + _2565;
                        if (_2570 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2563 = _2495;
                            _2564 = _2496;
                            _2565 = _2497;
                            _2566 = _2498;
                            _2567 = _2499;
                            _2568 = _2500;
                            _2569 = _2570;
                        }
                    }
                    frontier_phi_66_pred = _2500;
                    frontier_phi_66_pred_1 = _2499;
                    frontier_phi_66_pred_2 = _2498;
                    frontier_phi_66_pred_3 = _2497;
                    frontier_phi_66_pred_4 = _2496;
                    frontier_phi_66_pred_5 = _2495;
                }
                _2307 = frontier_phi_66_pred;
                _2305 = frontier_phi_66_pred_1;
                _2303 = frontier_phi_66_pred_2;
                _2301 = frontier_phi_66_pred_3;
                _2299 = frontier_phi_66_pred_4;
                _2297 = frontier_phi_66_pred_5;
                uint _2446 = _2445 + 1u;
                if (_2446 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2439 = _2297;
                    _2440 = _2299;
                    _2441 = _2301;
                    _2442 = _2303;
                    _2443 = _2305;
                    _2444 = _2307;
                    _2445 = _2446;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2296 = _2297;
            _2298 = _2299;
            _2300 = _2301;
            _2302 = _2303;
            _2304 = _2305;
            _2306 = _2307;
        }
        uvec4 _2310 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2311 = _2310.z;
        uint _2313 = (_2311 >> 8u) & 15u;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        if (((4294967295u << _2313) & _2216) == 0u)
        {
            _2410 = _2296;
            _2412 = _2298;
            _2414 = _2300;
            _2416 = _2302;
            _2418 = _2304;
            _2420 = _2306;
        }
        else
        {
            float _2435 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2313 < ((_2311 >> 12u) & 15u))
            {
                float _2411;
                float _2413;
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2546 = _2296;
                float _2547 = _2298;
                float _2548 = _2300;
                float _2549 = _2302;
                float _2550 = _2304;
                float _2551 = _2306;
                uint _2552 = _2313;
                uint _2561;
                bool _2562;
                for (;;)
                {
                    _2561 = texelFetch(g_lightClassification, int((((_2210 << 5u) + (_2196 << 9u)) + (_2552 << 2u)) >> 2u)).x;
                    _2562 = _2561 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2562)
                    {
                        frontier_phi_72_pred = _2551;
                        frontier_phi_72_pred_1 = _2550;
                        frontier_phi_72_pred_2 = _2549;
                        frontier_phi_72_pred_3 = _2548;
                        frontier_phi_72_pred_4 = _2547;
                        frontier_phi_72_pred_5 = _2546;
                    }
                    else
                    {
                        float _2696;
                        float _2697;
                        float _2698;
                        float _2699;
                        float _2700;
                        float _2701;
                        float _2948;
                        float _2949;
                        float _2950;
                        float _2951;
                        float _2952;
                        float _2953;
                        float _2709 = _2546;
                        float _2710 = _2547;
                        float _2711 = _2548;
                        float _2712 = _2549;
                        float _2713 = _2550;
                        float _2714 = _2551;
                        uint _2715 = _2561;
                        uint _2716;
                        vec4 _2741;
                        float _2742;
                        vec4 _2757;
                        vec3 _2769;
                        vec4 _2785;
                        vec4 _2801;
                        float _2848;
                        bool _2849;
                        for (;;)
                        {
                            uint _2726 = ((_2552 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2715));
                            _2716 = (_2715 + 4294967295u) & _2715;
                            uint _2728 = _2726 * 40u;
                            _2741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 3u)).x));
                            _2742 = _2741.w;
                            uint _2744 = (_2726 * 40u) + 4u;
                            _2757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 3u)).x));
                            uint _2759 = (_2726 * 40u) + 8u;
                            _2769 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 2u)).x));
                            uint _2772 = (_2726 * 40u) + 16u;
                            _2785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 3u)).x));
                            uint _2788 = (_2726 * 40u) + 20u;
                            _2801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 3u)).x));
                            uint _2804 = (_2726 * 40u) + 24u;
                            vec4 _2817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 3u)).x));
                            uint _2823 = (_2726 * 40u) + 28u;
                            vec4 _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            _2848 = fma(_1402, _2836.z, fma(_1401, _2836.y, _2836.x * _1400)) + _2836.w;
                            _2849 = !((fma(_1402, _2817.z, fma(_1401, _2817.y, _2817.x * _1400)) + _2817.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2849)
                            {
                                float _2876 = _2741.x - _1400;
                                float _2877 = _2741.y - _1401;
                                float _2878 = _2741.z - _1402;
                                float _2879 = dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878));
                                float _2882 = inversesqrt(_2879);
                                float _2883 = _2882 * _2876;
                                float _2884 = _2882 * _2877;
                                float _2885 = _2882 * _2878;
                                float _2889 = 1.0 - (_2879 / (_2742 * _2742));
                                float _3833 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                                float _2890 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
                                float _2894 = sqrt(_2879) * _2757.w;
                                float _2896 = 1.39999997615814208984375 / (_2894 + 1.39999997615814208984375);
                                float _2897 = _2896 * _2896;
                                float _2898 = 1.0 - _2897;
                                float _2900 = (_2898 * dot(vec3(_2883, _2884, _2885), vec3(_308, _311, _314))) + _2897;
                                float _2903 = _2894 * _2894;
                                float _2907 = (fma(_1402, _2785.z, fma(_1401, _2785.y, _2785.x * _1400)) + _2785.w) / _2848;
                                float _2908 = (fma(_1402, _2801.z, fma(_1401, _2801.y, _2801.x * _1400)) + _2801.w) / _2848;
                                float _2912 = 1.0 - dot(vec2(_2907, _2908), vec2(_2907, _2908));
                                float _3849 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                                float _2913 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
                                float _2914 = _2913 * (((isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0))) * _2890) / ((_2903 * 0.699999988079071044921875) + 1.0));
                                float _2924 = dot(vec3(_308, _311, _314), vec3((-0.0) - (_1400 * _2435), (-0.0) - (_1401 * _2435), (-0.0) - (_1402 * _2435)));
                                float _3860 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                                float _2932 = (_2898 * dot(vec3(_308, _311, _314), vec3(_2883, _2884, _2885))) + _2897;
                                float _3871 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                                float _2933 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
                                float _2937 = (0.5 / (((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) + 9.9999999392252902907785028219223e-09) + _2933)) * _2933;
                                float _3882 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                                float _2944 = (_2913 * _2890) * (((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 3.1415927410125732421875) / ((_2903 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _2914 * _2757.y;
                                frontier_phi_78_pred_1 = _2914 * _2757.x;
                                frontier_phi_78_pred_2 = _2944 * _2769.z;
                                frontier_phi_78_pred_3 = _2944 * _2769.y;
                                frontier_phi_78_pred_4 = _2944 * _2769.x;
                                frontier_phi_78_pred_5 = _2914 * _2757.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _2952 = frontier_phi_78_pred;
                            _2951 = frontier_phi_78_pred_1;
                            _2950 = frontier_phi_78_pred_2;
                            _2949 = frontier_phi_78_pred_3;
                            _2948 = frontier_phi_78_pred_4;
                            _2953 = frontier_phi_78_pred_5;
                            _2699 = _2951 + _2712;
                            _2700 = _2952 + _2713;
                            _2701 = _2953 + _2714;
                            _2696 = _2948 + _2709;
                            _2697 = _2949 + _2710;
                            _2698 = _2950 + _2711;
                            if (_2716 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2709 = _2696;
                                _2710 = _2697;
                                _2711 = _2698;
                                _2712 = _2699;
                                _2713 = _2700;
                                _2714 = _2701;
                                _2715 = _2716;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2701;
                        frontier_phi_72_pred_1 = _2700;
                        frontier_phi_72_pred_2 = _2699;
                        frontier_phi_72_pred_3 = _2698;
                        frontier_phi_72_pred_4 = _2697;
                        frontier_phi_72_pred_5 = _2696;
                    }
                    _2421 = frontier_phi_72_pred;
                    _2419 = frontier_phi_72_pred_1;
                    _2417 = frontier_phi_72_pred_2;
                    _2415 = frontier_phi_72_pred_3;
                    _2413 = frontier_phi_72_pred_4;
                    _2411 = frontier_phi_72_pred_5;
                    uint _2553 = _2552 + 1u;
                    if (_2553 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2546 = _2411;
                        _2547 = _2413;
                        _2548 = _2415;
                        _2549 = _2417;
                        _2550 = _2419;
                        _2551 = _2421;
                        _2552 = _2553;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2421;
                frontier_phi_60_61_ladder_1 = _2419;
                frontier_phi_60_61_ladder_2 = _2415;
                frontier_phi_60_61_ladder_3 = _2413;
                frontier_phi_60_61_ladder_4 = _2411;
                frontier_phi_60_61_ladder_5 = _2417;
            }
            else
            {
                frontier_phi_60_61_ladder = _2306;
                frontier_phi_60_61_ladder_1 = _2304;
                frontier_phi_60_61_ladder_2 = _2300;
                frontier_phi_60_61_ladder_3 = _2298;
                frontier_phi_60_61_ladder_4 = _2296;
                frontier_phi_60_61_ladder_5 = _2302;
            }
            _2410 = frontier_phi_60_61_ladder_4;
            _2412 = frontier_phi_60_61_ladder_3;
            _2414 = frontier_phi_60_61_ladder_2;
            _2416 = frontier_phi_60_61_ladder_5;
            _2418 = frontier_phi_60_61_ladder_1;
            _2420 = frontier_phi_60_61_ladder;
        }
        float _2425 = isnan(1.0) ? _353 : (isnan(_353) ? 1.0 : min(_353, 1.0));
        _2229 = (_2425 * _2416) + _1868;
        _2231 = (_2425 * _2418) + _1870;
        _2233 = (_2425 * _2420) + _1872;
        _2235 = ((_2410 * 0.039999999105930328369140625) * _2425) + _2110;
        _2237 = ((_2412 * 0.039999999105930328369140625) * _2425) + _2112;
        _2239 = ((_2414 * 0.039999999105930328369140625) * _2425) + _2114;
    }
    else
    {
        _2229 = _1868;
        _2231 = _1870;
        _2233 = _1872;
        _2235 = _2110;
        _2237 = _2112;
        _2239 = _2114;
    }
    float _3898 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3909 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3920 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    uint _2259 = _327 + 6u;
    float _2267 = _286 / cbSceneParam._m0[86u].x;
    float _2268 = _287 / cbSceneParam._m0[86u].y;
    vec4 _2282 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2267, _2268, (log2((isnan(cbSceneParam._m0[77u].w) ? _219 : (isnan(_219) ? cbSceneParam._m0[77u].w : min(_219, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2284 = _2282.x;
    float _2285 = _2282.y;
    float _2286 = _2282.z;
    float _2287 = _2282.w;
    float _2359;
    float _2361;
    float _2363;
    float _2365;
    if (_219 > cbSceneParam._m0[78u].w)
    {
        float _2321 = isnan(_219) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _219 : min(cbSceneParam._m0[80u].w, _219));
        float _2322 = _2321 / _219;
        float _2333 = _2322 * _271;
        float _2334 = _272 * _2322;
        float _2335 = (-0.0) - _2334;
        float _2337 = _2322 * _273;
        float _2339 = (cbSceneParam._m0[77u].w * _2335) / _2321;
        float _2340 = _2339 + cbSceneParam._m0[79u].w;
        float _2341 = cbSceneParam._m0[79u].w - _2334;
        float _2347 = sqrt(((_2333 * _2333) + (_2334 * _2334)) + (_2337 * _2337));
        float _2350 = (1.0 - (cbSceneParam._m0[77u].w / _2321)) * _2347;
        float _2355 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2357 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2508;
        if (abs((_2335 - _2339) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2508 = ((((_2340 > 0.0) ? exp2(_2355 * _2340) : (2.0 - exp2(_2357 * _2340))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2350;
        }
        else
        {
            float _2468 = 1.0 / cbSceneParam._m0[80u].x;
            float _2469 = isnan(_2341) ? _2340 : (isnan(_2340) ? _2341 : max(_2340, _2341));
            float _2470 = isnan(_2341) ? _2340 : (isnan(_2340) ? _2341 : min(_2340, _2341));
            float _2479 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : min(_2469, 0.0));
            float _2480 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : min(_2470, 0.0));
            _2508 = ((abs(_2347 / _2335) * cbSceneParam._m0[80u].y) * ((((_2479 - _2480) * 2.0) - ((exp2(_2355 * (isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0)))) - exp2(_2355 * (isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0))))) * _2468)) - ((exp2(_2357 * _2479) - exp2(_2357 * _2480)) * _2468))) + (_2350 * cbSceneParam._m0[80u].z);
        }
        vec4 _2510 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2267, _2268, 1.0), 0.0);
        float _2519 = exp2((_2508 * (-1.44269502162933349609375)) * (1.0 - _2510.w));
        float _2520 = log2(_2519);
        float _2536 = log2(_2287);
        _2359 = (exp2(_2536 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2520 * cbSceneParam._m0[78u].x)) * _2510.x) / cbSceneParam._m0[78u].x)) + _2284;
        _2361 = (exp2(_2536 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2520 * cbSceneParam._m0[78u].y)) * _2510.y) / cbSceneParam._m0[78u].y)) + _2285;
        _2363 = (exp2(_2536 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2520 * cbSceneParam._m0[78u].z)) * _2510.z) / cbSceneParam._m0[78u].z)) + _2286;
        _2365 = _2519 * _2287;
    }
    else
    {
        _2359 = _2284;
        _2361 = _2285;
        _2363 = _2286;
        _2365 = _2287;
    }
    float _2377 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2378 = _2377 == 3.0;
    float _2380 = log2(_2365);
    float _2387 = exp2(_2380 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_2229 + ((isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0))) * _353))) + ((_2235 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _1132)) * cbPerFrame._m0[3u].x));
    float _2388 = exp2(_2380 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_2231 + ((isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0))) * _353))) + ((_2237 + ((isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))) * _1132)) * cbPerFrame._m0[3u].x));
    float _2389 = exp2(_2380 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_2233 + ((isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0))) * _353))) + ((_2239 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _1132)) * cbPerFrame._m0[3u].x));
    float _2398 = (_2377 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2398 * (_2378 ? _2387 : (_2387 + (cbSceneParam._m0[72u].w * _2359)));
    SV_Target.y = _2398 * (_2378 ? _2388 : (_2388 + (cbSceneParam._m0[72u].w * _2361)));
    SV_Target.z = _2398 * (_2378 ? _2389 : (_2389 + (cbSceneParam._m0[72u].w * _2363)));
    SV_Target.w = cbInstanceData._m0[_2259].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2259].w;
}


