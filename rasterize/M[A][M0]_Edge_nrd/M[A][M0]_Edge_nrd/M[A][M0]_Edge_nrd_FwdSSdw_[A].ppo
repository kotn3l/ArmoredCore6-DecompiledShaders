#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_nrd_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _741;
float _2930;
float _2931;
float _2932;
float _2933;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    vec4 _186 = texture(sampler2D(M_A_M0_Edge_nrd_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.w;
    float _193 = _186.x * cbMtdParam._m0[9u].x;
    float _194 = _186.y * cbMtdParam._m0[9u].y;
    float _195 = _186.z * cbMtdParam._m0[9u].z;
    float _199 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _200 = _199 * _164;
    float _201 = _199 * _165;
    float _202 = _199 * _166;
    float _2942 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _2953 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2964 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _222 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _274 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _264);
    float _275 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _264);
    float _276 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _264);
    float _280 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _281 = _274 * _280;
    float _282 = _275 * _280;
    float _283 = _276 * _280;
    vec4 _288 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _290 = _288.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _420 = sqrt(((_274 * _274) + (_275 * _275)) + (_276 * _276));
        float _426 = (cbMatDynParam._m0[5u].x * _420) + cbMatDynParam._m0[5u].y;
        float _2975 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
        float _427 = isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0));
        float _431 = (cbMatDynParam._m0[5u].z * _420) + cbMatDynParam._m0[5u].w;
        float _2986 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0))) - _427)) + _427) < ((_290 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _302 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _303 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _323 = fma(_202, cbSceneParam._m0[5u].z, fma(_201, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _200));
    float _326 = fma(_202, cbSceneParam._m0[6u].z, fma(_201, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _200));
    float _329 = fma(_202, cbSceneParam._m0[7u].z, fma(_201, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _200));
    uint _342 = uint(roundEven(NORMAL.w)) * 13u;
    uint _344 = _342 + 9u;
    uint _345 = _344 + uint(cbMatDynParam._m0[0u].w);
    float _351 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2942 : (isnan(_2942) ? 1.0 : min(_2942, 1.0)))) * cbInstanceData._m0[_345].x;
    float _352 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2953 : (isnan(_2953) ? 1.0 : min(_2953, 1.0)))) * cbInstanceData._m0[_345].y;
    float _353 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0)))) * cbInstanceData._m0[_345].z;
    float _2997 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _354 = isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0));
    float _3008 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _355 = isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0));
    float _3019 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _356 = isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0));
    vec4 _365 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _302, cbSceneParam._m0[86u].y * _303));
    float _368 = _365.x * TEXCOORD.z;
    float _369 = dot(vec3(_200, _201, _202), vec3(_281, _282, _283));
    float _372 = _369 * 2.0;
    float _377 = (_372 * _200) - _281;
    float _378 = (_372 * _201) - _282;
    float _379 = (_372 * _202) - _283;
    float _401 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _405 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _409 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _740;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _465 = fma(_409, cbModelParam._m0[26u].z, fma(_405, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _401));
        float _469 = fma(_409, cbModelParam._m0[27u].z, fma(_405, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _401));
        float _473 = fma(_409, cbModelParam._m0[28u].z, fma(_405, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _401));
        float _498 = _401 + _200;
        float _499 = _405 + _201;
        float _500 = _409 + _202;
        float _510 = fma(_500, cbModelParam._m0[26u].z, fma(_499, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _498)) - _465;
        float _511 = fma(_500, cbModelParam._m0[27u].z, fma(_499, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _498)) - _469;
        float _512 = fma(_500, cbModelParam._m0[28u].z, fma(_499, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _498)) - _473;
        float _516 = inversesqrt(dot(vec3(_510, _511, _512), vec3(_510, _511, _512)));
        float _529 = ((_516 * _510) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_465 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _530 = ((_516 * _511) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_469 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _531 = ((_516 * _512) / cbModelParam._m0[34u].z) + ((((((_473 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _534 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_529, _530, _531), 0.0);
        vec4 _541 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_529, _530, _531), 0.0);
        vec4 _548 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_529, _530, _531), 0.0);
        vec4 _555 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_529, _530, _531), 0.0);
        float _568 = exp2((_534.w + (-0.5)) * 20.0) * 2.0;
        float _569 = _568 * (_534.x + (-0.5));
        float _570 = _568 * (_534.y + (-0.5));
        float _571 = _568 * (_534.z + (-0.5));
        float _578 = exp2((_541.w + (-0.5)) * 20.0) * 2.0;
        float _579 = _578 * (_541.x + (-0.5));
        float _580 = _578 * (_541.y + (-0.5));
        float _581 = _578 * (_541.z + (-0.5));
        float _588 = exp2((_548.w + (-0.5)) * 20.0) * 2.0;
        float _589 = _588 * (_548.x + (-0.5));
        float _590 = _588 * (_548.y + (-0.5));
        float _591 = _588 * (_548.z + (-0.5));
        float _598 = exp2((_555.w + (-0.5)) * 20.0) * 2.0;
        float _599 = _598 * (_555.x + (-0.5));
        float _600 = _598 * (_555.y + (-0.5));
        float _601 = _598 * (_555.z + (-0.5));
        float _602 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _603 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        float _604 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _605 = _569 * 0.5;
        float _606 = _579 * 0.5;
        float _607 = _589 * 0.5;
        float _608 = dot(vec3(_605, _606, _607), vec3(_605, _606, _607));
        float _613 = (_608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_608);
        float _622 = (dot(vec3(_200, _201, _202), vec3(_613 * _605, _613 * _606, _613 * _607)) + 1.0) * 0.5;
        float _3045 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _632 = sqrt(((_606 * _606) + (_605 * _605)) + (_607 * _607)) / (_602 + 9.9999997473787516355514526367188e-06);
        float _3056 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _633 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
        float _634 = _633 * 2.0;
        float _638 = (1.0 - _633) / (_633 + 1.0);
        float _3067 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _639 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _648 = ((((1.0 - _639) * (_634 + 2.0)) * exp2(log2(isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0))) * (_634 + 1.0))) + _639) * _602;
        float _649 = _570 * 0.5;
        float _650 = _580 * 0.5;
        float _651 = _590 * 0.5;
        float _652 = dot(vec3(_649, _650, _651), vec3(_649, _650, _651));
        float _657 = (_652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_652);
        float _665 = (dot(vec3(_200, _201, _202), vec3(_657 * _649, _657 * _650, _657 * _651)) + 1.0) * 0.5;
        float _3078 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _674 = sqrt(((_650 * _650) + (_649 * _649)) + (_651 * _651)) / (_603 + 9.9999997473787516355514526367188e-06);
        float _3089 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _675 = isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0));
        float _676 = _675 * 2.0;
        float _680 = (1.0 - _675) / (_675 + 1.0);
        float _3100 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _690 = ((((1.0 - _681) * (_676 + 2.0)) * exp2(log2(isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0))) * (_676 + 1.0))) + _681) * _603;
        float _691 = _571 * 0.5;
        float _692 = _581 * 0.5;
        float _693 = _591 * 0.5;
        float _694 = dot(vec3(_691, _692, _693), vec3(_691, _692, _693));
        float _699 = (_694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_694);
        float _707 = (dot(vec3(_200, _201, _202), vec3(_699 * _691, _699 * _692, _699 * _693)) + 1.0) * 0.5;
        float _3111 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _716 = sqrt(((_692 * _692) + (_691 * _691)) + (_693 * _693)) / (_604 + 9.9999997473787516355514526367188e-06);
        float _3122 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
        float _718 = _717 * 2.0;
        float _722 = (1.0 - _717) / (_717 + 1.0);
        float _3133 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _732 = ((((1.0 - _723) * (_718 + 2.0)) * exp2(log2(isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0))) * (_718 + 1.0))) + _723) * _604;
        _740 = _571;
        _742 = _570;
        _743 = _569;
        _744 = _581;
        _745 = _580;
        _746 = _579;
        _747 = _591;
        _748 = _590;
        _749 = _589;
        _750 = _604;
        _751 = _603;
        _752 = _602;
        _753 = cbModelParam._m0[36u].z * (isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0)));
        _754 = cbModelParam._m0[36u].z * (isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0)));
        _755 = cbModelParam._m0[36u].z * (isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0)));
    }
    else
    {
        _740 = _741;
        _742 = _741;
        _743 = _741;
        _744 = _741;
        _745 = _741;
        _746 = _741;
        _747 = _741;
        _748 = _741;
        _749 = _741;
        _750 = _741;
        _751 = _741;
        _752 = _741;
        _753 = 0.0;
        _754 = 0.0;
        _755 = 0.0;
    }
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _784 = fma(_409, cbModelParam._m0[30u].z, fma(_405, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _401));
        float _788 = fma(_409, cbModelParam._m0[31u].z, fma(_405, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _401));
        float _792 = fma(_409, cbModelParam._m0[32u].z, fma(_405, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _401));
        float _815 = _401 + _200;
        float _816 = _405 + _201;
        float _817 = _409 + _202;
        float _827 = fma(_817, cbModelParam._m0[30u].z, fma(_816, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _815)) - _784;
        float _828 = fma(_817, cbModelParam._m0[31u].z, fma(_816, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _815)) - _788;
        float _829 = fma(_817, cbModelParam._m0[32u].z, fma(_816, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _815)) - _792;
        float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
        float _846 = ((_833 * _827) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_784 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_833 * _828) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_788 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_833 * _829) / cbModelParam._m0[35u].z) + ((((((_792 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        float _883 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_850.x + (-0.5));
        float _885 = _883 * (_850.y + (-0.5));
        float _886 = _883 * (_850.z + (-0.5));
        float _893 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_857.x + (-0.5));
        float _895 = _893 * (_857.y + (-0.5));
        float _896 = _893 * (_857.z + (-0.5));
        float _903 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_864.x + (-0.5));
        float _905 = _903 * (_864.y + (-0.5));
        float _906 = _903 * (_864.z + (-0.5));
        float _913 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_871.x + (-0.5));
        float _915 = _913 * (_871.y + (-0.5));
        float _916 = _913 * (_871.z + (-0.5));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = _884 * 0.5;
        float _921 = _894 * 0.5;
        float _922 = _904 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _936 = (dot(vec3(_200, _201, _202), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3174 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _945 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3185 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3196 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0))) * (_947 + 1.0))) + _952) * _917;
        float _962 = _885 * 0.5;
        float _963 = _895 * 0.5;
        float _964 = _905 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_200, _201, _202), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3207 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3218 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3229 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0))) * (_989 + 1.0))) + _994) * _918;
        float _1004 = _886 * 0.5;
        float _1005 = _896 * 0.5;
        float _1006 = _906 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_200, _201, _202), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3240 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3251 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3262 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))) * (_1031 + 1.0))) + _1036) * _919;
        _1053 = _886;
        _1054 = _885;
        _1055 = _884;
        _1056 = _896;
        _1057 = _895;
        _1058 = _894;
        _1059 = _906;
        _1060 = _905;
        _1061 = _904;
        _1062 = _919;
        _1063 = _918;
        _1064 = _917;
        _1065 = cbModelParam._m0[36u].w * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1066 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1067 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
    }
    else
    {
        _1053 = _741;
        _1054 = _741;
        _1055 = _741;
        _1056 = _741;
        _1057 = _741;
        _1058 = _741;
        _1059 = _741;
        _1060 = _741;
        _1061 = _741;
        _1062 = _741;
        _1063 = _741;
        _1064 = _741;
        _1065 = 0.0;
        _1066 = 0.0;
        _1067 = 0.0;
    }
    float _1077 = (cbModelParam._m0[1u].x * (_1065 - _753)) + _753;
    float _1078 = (cbModelParam._m0[1u].x * (_1066 - _754)) + _754;
    float _1079 = (cbModelParam._m0[1u].x * (_1067 - _755)) + _755;
    float _1100 = fma(_1079, cbSceneParam._m0[89u].z, fma(_1078, cbSceneParam._m0[89u].y, _1077 * cbSceneParam._m0[89u].x));
    float _1103 = fma(_1079, cbSceneParam._m0[90u].z, fma(_1078, cbSceneParam._m0[90u].y, _1077 * cbSceneParam._m0[90u].x));
    float _1106 = fma(_1079, cbSceneParam._m0[91u].z, fma(_1078, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1077));
    float _1121 = _377 * 0.5;
    float _1122 = _378 * 0.5;
    float _1123 = _379 * 0.5;
    float _1124 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_1055, _1058, _1061, _1064));
    float _1127 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_1054, _1057, _1060, _1063));
    float _1130 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_1053, _1056, _1059, _1062));
    float _1164;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1137 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_740, _744, _747, _750));
        float _1141 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_742, _745, _748, _751));
        float _1145 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_743, _746, _749, _752));
        float _1152 = dot(vec4(cbModelParam._m0[39u]), vec4(_1121, _1122, _1123, 1.0));
        _1164 = dot(vec3(isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)), isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)), isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1152) ? 0.0 : (isnan(0.0) ? _1152 : max(0.0, _1152))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1164 = 1.0;
    }
    float _1175;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1166 = dot(vec4(cbModelParam._m0[40u]), vec4(_1121, _1122, _1123, 1.0));
        _1175 = dot(vec3(isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)), isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)), isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1166) ? 0.0 : (isnan(0.0) ? _1166 : max(0.0, _1166))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1175 = 1.0;
    }
    float _1179 = (_1175 * cbModelParam._m0[1u].x) + (_1164 * (1.0 - cbModelParam._m0[1u].x));
    float _1188 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1270;
    float _1272;
    float _1274;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1237 = fma(_409, cbModelParam._m0[13u].z, fma(_405, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _401)) + cbModelParam._m0[13u].w;
        float _1241 = fma(_409, cbModelParam._m0[14u].z, fma(_405, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _401)) + cbModelParam._m0[14u].w;
        float _1245 = fma(_409, cbModelParam._m0[15u].z, fma(_405, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _401)) + cbModelParam._m0[15u].w;
        float _1248 = fma(_379, cbModelParam._m0[13u].z, fma(_378, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _377));
        float _1251 = fma(_379, cbModelParam._m0[14u].z, fma(_378, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _377));
        float _1254 = fma(_379, cbModelParam._m0[15u].z, fma(_378, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _377));
        float _1280;
        if (_1248 > 0.0)
        {
            _1280 = abs((1.0 - _1237) / _1248);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1248 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1237 + 1.0) / _1248);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1280 = frontier_phi_17_15_ladder;
        }
        float _1509;
        if (_1251 > 0.0)
        {
            _1509 = abs((1.0 - _1241) / _1251);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1251 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1241 + 1.0) / _1251);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1509 = frontier_phi_26_22_ladder;
        }
        float _1701;
        if (_1254 > 0.0)
        {
            _1701 = abs((1.0 - _1245) / _1254);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1254 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1245 + 1.0) / _1254);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1701 = frontier_phi_38_33_ladder;
        }
        float _1703 = isnan(_1509) ? _1280 : (isnan(_1280) ? _1509 : min(_1280, _1509));
        float _1704 = isnan(_1701) ? _1703 : (isnan(_1703) ? _1701 : min(_1703, _1701));
        float _1708 = (_1704 * _1248) + _1237;
        float _1709 = (_1704 * _1251) + _1241;
        float _1710 = (_1704 * _1254) + _1245;
        float _1711 = _1704 * 9.9999997473787516355514526367188e-05;
        float _1713 = (-1.0) - _1711;
        float _1715 = _1711 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1710 > _1715) || ((_1710 < _1713) || ((_1709 > _1715) || ((_1709 < _1713) || ((_1708 < _1713) || (_1708 > _1715))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1807 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1710, cbModelParam._m0[9u].z, fma(_1709, cbModelParam._m0[9u].y, _1708 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1710, cbModelParam._m0[10u].z, fma(_1709, cbModelParam._m0[10u].y, _1708 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1710, cbModelParam._m0[11u].z, fma(_1709, cbModelParam._m0[11u].y, _1708 * cbModelParam._m0[11u].x))), _1188);
            frontier_phi_16_38_ladder = _1807.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1807.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1807.x * cbModelParam._m0[1u].y;
        }
        _1270 = frontier_phi_16_38_ladder_2;
        _1272 = frontier_phi_16_38_ladder_1;
        _1274 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1258 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_377, _378, _379), _1188);
        _1270 = _1258.x * cbModelParam._m0[1u].y;
        _1272 = _1258.y * cbModelParam._m0[1u].y;
        _1274 = _1258.z * cbModelParam._m0[1u].y;
    }
    float _1277 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1370;
    float _1372;
    float _1374;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1334 = fma(_409, cbModelParam._m0[21u].z, fma(_405, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _401)) + cbModelParam._m0[21u].w;
        float _1338 = fma(_409, cbModelParam._m0[22u].z, fma(_405, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _401)) + cbModelParam._m0[22u].w;
        float _1342 = fma(_409, cbModelParam._m0[23u].z, fma(_405, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _401)) + cbModelParam._m0[23u].w;
        float _1345 = fma(_379, cbModelParam._m0[21u].z, fma(_378, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _377));
        float _1348 = fma(_379, cbModelParam._m0[22u].z, fma(_378, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _377));
        float _1351 = fma(_379, cbModelParam._m0[23u].z, fma(_378, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _377));
        float _1514;
        if (_1345 > 0.0)
        {
            _1514 = abs((1.0 - _1334) / _1345);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1334 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1514 = frontier_phi_28_24_ladder;
        }
        float _1728;
        if (_1348 > 0.0)
        {
            _1728 = abs((1.0 - _1338) / _1348);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1338 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1728 = frontier_phi_40_35_ladder;
        }
        float _1879;
        if (_1351 > 0.0)
        {
            _1879 = abs((1.0 - _1342) / _1351);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1342 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1879 = frontier_phi_49_46_ladder;
        }
        float _1881 = isnan(_1728) ? _1514 : (isnan(_1514) ? _1728 : min(_1514, _1728));
        float _1882 = isnan(_1879) ? _1881 : (isnan(_1881) ? _1879 : min(_1881, _1879));
        float _1886 = (_1882 * _1345) + _1334;
        float _1887 = (_1882 * _1348) + _1338;
        float _1888 = (_1882 * _1351) + _1342;
        float _1889 = _1882 * 9.9999997473787516355514526367188e-05;
        float _1890 = (-1.0) - _1889;
        float _1892 = _1889 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1888 > _1892) || ((_1888 < _1890) || ((_1887 > _1892) || ((_1887 < _1890) || ((_1886 < _1890) || (_1886 > _1892))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2087 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1888, cbModelParam._m0[17u].z, fma(_1887, cbModelParam._m0[17u].y, _1886 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1888, cbModelParam._m0[18u].z, fma(_1887, cbModelParam._m0[18u].y, _1886 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1888, cbModelParam._m0[19u].z, fma(_1887, cbModelParam._m0[19u].y, _1886 * cbModelParam._m0[19u].x))), _1277);
            frontier_phi_25_49_ladder = _2087.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2087.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2087.x * cbModelParam._m0[1u].z;
        }
        _1370 = frontier_phi_25_49_ladder_2;
        _1372 = frontier_phi_25_49_ladder_1;
        _1374 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1354 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_377, _378, _379), _1277);
        _1370 = _1354.x * cbModelParam._m0[1u].z;
        _1372 = _1354.y * cbModelParam._m0[1u].z;
        _1374 = _1354.z * cbModelParam._m0[1u].z;
    }
    float _1386 = _368 * 0.01200000010430812835693359375;
    float _1388 = _1386 * ((cbModelParam._m0[1u].w * (_1370 - _1270)) + _1270);
    float _1389 = _1386 * ((cbModelParam._m0[1u].w * (_1372 - _1272)) + _1272);
    float _1390 = _1386 * ((cbModelParam._m0[1u].w * (_1374 - _1274)) + _1274);
    float _1393 = fma(_1390, cbSceneParam._m0[89u].z, fma(_1389, cbSceneParam._m0[89u].y, _1388 * cbSceneParam._m0[89u].x));
    float _1396 = fma(_1390, cbSceneParam._m0[90u].z, fma(_1389, cbSceneParam._m0[90u].y, _1388 * cbSceneParam._m0[90u].x));
    float _1399 = fma(_1390, cbSceneParam._m0[91u].z, fma(_1389, cbSceneParam._m0[91u].y, _1388 * cbSceneParam._m0[91u].x));
    vec4 _1407 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_302, _303));
    float _1409 = _1407.w;
    float _1421 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1409);
    float _1422 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1409);
    float _1423 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1409);
    uvec4 _1427 = floatBitsToUint(cbInstanceData._m0[_342 + 5u]);
    uint _1429 = _1427.x * 14u;
    uint _1430 = _1429 + 13u;
    float _1437 = _368 + (-1.0);
    float _1443 = (cbLight._m0[_1430].x * _1437) + 1.0;
    float _1444 = (cbLight._m0[_1430].y * _1437) + 1.0;
    float _1445 = (cbLight._m0[_1430].z * _1437) + 1.0;
    float _1446 = (cbLight._m0[_1430].w * _1437) + 1.0;
    uint _1447 = _1429 + 5u;
    float _1453 = isnan(1.0) ? _1444 : (isnan(_1444) ? 1.0 : min(_1444, 1.0));
    uint _1457 = _1429 + 4u;
    float _1467 = isnan(1.0) ? _1443 : (isnan(_1443) ? 1.0 : min(_1443, 1.0));
    uint _1471 = _1429 | 1u;
    float _1482 = dot(vec3(cbLight._m0[_1429].xyz), vec3(_200, _201, _202));
    float _1485 = dot(vec3(cbLight._m0[_1471].xyz), vec3(_200, _201, _202));
    float _3398 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
    float _3409 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
    float _1490 = (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * 0.3183098733425140380859375;
    float _1492 = (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * 0.3183098733425140380859375;
    float _1499 = ((cbLight._m0[_1447].x * _1453) * _1492) + (((cbLight._m0[_1457].x * _1421) * _1467) * _1490);
    float _1500 = ((_1453 * cbLight._m0[_1447].y) * _1492) + (((cbLight._m0[_1457].y * _1422) * _1467) * _1490);
    float _1501 = ((_1453 * cbLight._m0[_1447].z) * _1492) + (((cbLight._m0[_1457].z * _1423) * _1467) * _1490);
    uvec4 _1506 = floatBitsToUint(cbLight._m0[_1429 + 12u]);
    bool _1508 = _1506.x == 0u;
    float _1519;
    float _1521;
    float _1523;
    if (_1508)
    {
        _1519 = _1499;
        _1521 = _1500;
        _1523 = _1501;
    }
    else
    {
        uint _1527 = _1429 + 6u;
        float _1543 = (dot(vec3(cbLight._m0[_1429 + 2u].xyz), vec3(_200, _201, _202)) * 0.5) + 0.5;
        float _1544 = _1543 * _1543;
        float _3420 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _1546 = isnan(1.0) ? _1445 : (isnan(_1445) ? 1.0 : min(_1445, 1.0));
        _1519 = (((cbLight._m0[_1527].x * 0.3183098733425140380859375) * _1545) * _1546) + _1499;
        _1521 = (((cbLight._m0[_1527].y * 0.3183098733425140380859375) * _1545) * _1546) + _1500;
        _1523 = (((cbLight._m0[_1527].z * 0.3183098733425140380859375) * _1545) * _1546) + _1501;
    }
    bool _1526 = _1506.y == 0u;
    float _1564;
    float _1566;
    float _1568;
    if (_1526)
    {
        _1564 = _1519;
        _1566 = _1521;
        _1568 = _1523;
    }
    else
    {
        uint _1672 = _1429 + 7u;
        float _1688 = (dot(vec3(cbLight._m0[_1429 + 3u].xyz), vec3(_200, _201, _202)) * 0.5) + 0.5;
        float _1689 = _1688 * _1688;
        float _3436 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _1691 = isnan(1.0) ? _1446 : (isnan(_1446) ? 1.0 : min(_1446, 1.0));
        _1564 = (((cbLight._m0[_1672].x * 0.3183098733425140380859375) * _1690) * _1691) + _1519;
        _1566 = (((cbLight._m0[_1672].y * 0.3183098733425140380859375) * _1690) * _1691) + _1521;
        _1568 = (((cbLight._m0[_1672].z * 0.3183098733425140380859375) * _1690) * _1691) + _1523;
    }
    uint _1570 = _1429 + 8u;
    float _1576 = cbLight._m0[_1429].x + _281;
    float _1577 = cbLight._m0[_1429].y + _282;
    float _1578 = cbLight._m0[_1429].z + _283;
    float _1582 = inversesqrt(dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578)));
    float _1586 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1429].xyz));
    float _3452 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _1589 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _1590 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _1591 = dot(vec3(cbLight._m0[_1429].xyz), vec3(_1576 * _1582, _1577 * _1582, _1578 * _1582));
    float _3474 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1602 = (exp2(log2(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1608 = (0.5 / ((_1589 + 9.9999999392252902907785028219223e-09) + _1590)) * _1589;
    float _3485 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
    float _1610 = (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * 0.31831014156341552734375;
    uint _1624 = _1429 + 9u;
    float _1630 = cbLight._m0[_1471].x + _281;
    float _1631 = cbLight._m0[_1471].y + _282;
    float _1632 = cbLight._m0[_1471].z + _283;
    float _1636 = inversesqrt(dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632)));
    float _1640 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1471].xyz));
    float _3496 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1643 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _1644 = dot(vec3(cbLight._m0[_1471].xyz), vec3(_1630 * _1636, _1631 * _1636, _1632 * _1636));
    float _3507 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1653 = (exp2(log2(1.0 - (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1657 = (0.5 / ((_1643 + 9.9999999392252902907785028219223e-09) + _1590)) * _1643;
    float _3518 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1659 = (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.31831014156341552734375;
    float _1669 = (((_1653 * cbLight._m0[_1624].x) * _1659) * _1453) + ((((cbLight._m0[_1570].x * _1421) * _1602) * _1610) * _1467);
    float _1670 = (((_1653 * cbLight._m0[_1624].y) * _1659) * _1453) + ((((cbLight._m0[_1570].y * _1422) * _1602) * _1610) * _1467);
    float _1671 = (((_1653 * cbLight._m0[_1624].z) * _1659) * _1453) + ((((cbLight._m0[_1570].z * _1423) * _1602) * _1610) * _1467);
    float _1733;
    float _1735;
    float _1737;
    if (_1508)
    {
        _1733 = _1669;
        _1735 = _1670;
        _1737 = _1671;
    }
    else
    {
        uint _1739 = _1429 + 10u;
        uint _1745 = _1429 + 2u;
        float _1751 = cbLight._m0[_1745].x + _281;
        float _1752 = cbLight._m0[_1745].y + _282;
        float _1753 = cbLight._m0[_1745].z + _283;
        float _1757 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
        float _1761 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1745].xyz));
        float _3529 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1764 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1765 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_1751 * _1757, _1752 * _1757, _1753 * _1757));
        float _3540 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1774 = (exp2(log2(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1778 = (0.5 / ((_1764 + 9.9999999392252902907785028219223e-09) + _1590)) * _1764;
        float _3551 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1780 = (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.31831014156341552734375;
        float _1781 = isnan(1.0) ? _1445 : (isnan(_1445) ? 1.0 : min(_1445, 1.0));
        _1733 = (((_1774 * cbLight._m0[_1739].x) * _1780) * _1781) + _1669;
        _1735 = (((_1774 * cbLight._m0[_1739].y) * _1780) * _1781) + _1670;
        _1737 = (((_1774 * cbLight._m0[_1739].z) * _1780) * _1781) + _1671;
    }
    float _1816;
    float _1818;
    float _1820;
    if (_1526)
    {
        _1816 = _1733;
        _1818 = _1735;
        _1820 = _1737;
    }
    else
    {
        uint _1827 = _1429 + 11u;
        uint _1833 = _1429 + 3u;
        float _1839 = cbLight._m0[_1833].x + _281;
        float _1840 = cbLight._m0[_1833].y + _282;
        float _1841 = cbLight._m0[_1833].z + _283;
        float _1845 = inversesqrt(dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841)));
        float _1849 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1833].xyz));
        float _3567 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1852 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1853 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_1839 * _1845, _1840 * _1845, _1841 * _1845));
        float _3578 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1862 = (exp2(log2(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1866 = (0.5 / ((_1852 + 9.9999999392252902907785028219223e-09) + _1590)) * _1852;
        float _3589 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1868 = (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * 0.31831014156341552734375;
        float _1869 = isnan(1.0) ? _1446 : (isnan(_1446) ? 1.0 : min(_1446, 1.0));
        _1816 = (((_1862 * cbLight._m0[_1827].x) * _1868) * _1869) + _1733;
        _1818 = (((_1862 * cbLight._m0[_1827].y) * _1868) * _1869) + _1735;
        _1820 = (((_1862 * cbLight._m0[_1827].z) * _1868) * _1869) + _1737;
    }
    float _2004;
    float _2006;
    float _2008;
    float _2010;
    float _2012;
    float _2014;
    if (_1427.y == 0u)
    {
        float _1944 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1945 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1944;
        float _1946 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1944;
        float _1947 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1944;
        uvec4 _1959 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1960 = _1959.x;
        uint _1971 = uint((float(_1959.y) * floor(float(uint(cbSceneParam._m0[85u].y * _303) / _1960))) + floor(float(uint(cbSceneParam._m0[85u].x * _302) / _1960)));
        float _1981 = (log2(_1947 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1982 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        uint _1985 = uint(isnan(14.0) ? _1982 : (isnan(_1982) ? 14.0 : min(_1982, 14.0)));
        uvec4 _1990 = texelFetch(g_lightClusterGridBuffer, int(((_1985 << 2u) + (_1971 << 6u)) >> 2u));
        uint _1991 = _1990.x;
        uint _1992 = _1959.z;
        float _2092;
        float _2094;
        float _2096;
        float _2098;
        float _2100;
        float _2102;
        if (((((1u << ((_1992 >> 4u) & 15u)) + 4294967295u) & _1991) == 0u) || ((_1992 & 240u) == 0u))
        {
            _2092 = 0.0;
            _2094 = 0.0;
            _2096 = 0.0;
            _2098 = 0.0;
            _2100 = 0.0;
            _2102 = 0.0;
        }
        else
        {
            float _2093;
            float _2095;
            float _2097;
            float _2099;
            float _2101;
            float _2103;
            float _2244 = 0.0;
            float _2245 = 0.0;
            float _2246 = 0.0;
            float _2247 = 0.0;
            float _2248 = 0.0;
            float _2249 = 0.0;
            uint _2250 = 0u;
            uint _2259;
            bool _2260;
            for (;;)
            {
                _2259 = texelFetch(g_lightClassification, int((((_1985 << 5u) + (_1971 << 9u)) + (_2250 << 2u)) >> 2u)).x;
                _2260 = _2259 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2260)
                {
                    frontier_phi_66_pred = _2244;
                    frontier_phi_66_pred_1 = _2249;
                    frontier_phi_66_pred_2 = _2248;
                    frontier_phi_66_pred_3 = _2247;
                    frontier_phi_66_pred_4 = _2246;
                    frontier_phi_66_pred_5 = _2245;
                }
                else
                {
                    float _2389;
                    float _2390;
                    float _2391;
                    float _2392;
                    float _2393;
                    float _2394;
                    uint _2395;
                    _2389 = _2244;
                    _2390 = _2245;
                    _2391 = _2246;
                    _2392 = _2247;
                    _2393 = _2248;
                    _2394 = _2249;
                    _2395 = _2259;
                    float _2316;
                    float _2317;
                    float _2318;
                    float _2319;
                    float _2320;
                    float _2321;
                    for (;;)
                    {
                        uint _2399 = uint(findLSB(_2395)) + (_2250 << 5u);
                        uint _2396 = (_2395 + 4294967295u) & _2395;
                        uint _2401 = _2399 * 48u;
                        vec4 _2415 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2401)).x, texelFetch(g_PointLightRenderingBuffer, int(_2401 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2401 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2401 + 3u)).x));
                        uint _2421 = (_2399 * 48u) + 4u;
                        vec4 _2434 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2421)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 3u)).x));
                        uint _2440 = (_2399 * 48u) + 8u;
                        vec3 _2451 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2440)).x, texelFetch(g_PointLightRenderingBuffer, int(_2440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2440 + 2u)).x));
                        float _2455 = _2415.x - _1945;
                        float _2456 = _2415.y - _1946;
                        float _2457 = _2415.z - _1947;
                        float _2458 = dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457));
                        float _2461 = inversesqrt(_2458);
                        float _2470 = 1.0 - (_2458 * _2415.w);
                        float _3615 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
                        float _2471 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
                        float _2472 = sqrt(_2458) * _2434.w;
                        float _2475 = 1.39999997615814208984375 / (_2472 + 1.39999997615814208984375);
                        float _2476 = _2475 * _2475;
                        float _2479 = ((1.0 - _2476) * dot(vec3(_323, _326, _329), vec3(_2461 * _2455, _2461 * _2456, _2461 * _2457))) + _2476;
                        float _2482 = _2472 * _2472;
                        float _2486 = ((isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0))) * _2471) / ((_2482 * 0.699999988079071044921875) + 1.0);
                        float _2490 = (-0.0) - _1945;
                        float _2491 = (-0.0) - _1946;
                        float _2492 = (-0.0) - _1947;
                        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
                        float _2500 = dot(vec3(_323, _326, _329), vec3(_2496 * _2490, _2496 * _2491, _2496 * _2492));
                        float _3631 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
                        float _3642 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
                        float _2504 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
                        float _2508 = (0.5 / (((isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) + 9.9999999392252902907785028219223e-09) + _2504)) * _2504;
                        float _3653 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
                        float _2517 = (((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 3.1415927410125732421875) / ((_2482 * 2.1991131305694580078125) + 3.141590118408203125)) * _2471;
                        _2319 = (_2486 * _2434.x) + _2392;
                        _2320 = (_2486 * _2434.y) + _2393;
                        _2321 = (_2486 * _2434.z) + _2394;
                        _2316 = (_2517 * _2451.x) + _2389;
                        _2317 = (_2517 * _2451.y) + _2390;
                        _2318 = (_2517 * _2451.z) + _2391;
                        if (_2396 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2389 = _2316;
                            _2390 = _2317;
                            _2391 = _2318;
                            _2392 = _2319;
                            _2393 = _2320;
                            _2394 = _2321;
                            _2395 = _2396;
                        }
                    }
                    frontier_phi_66_pred = _2316;
                    frontier_phi_66_pred_1 = _2321;
                    frontier_phi_66_pred_2 = _2320;
                    frontier_phi_66_pred_3 = _2319;
                    frontier_phi_66_pred_4 = _2318;
                    frontier_phi_66_pred_5 = _2317;
                }
                _2093 = frontier_phi_66_pred;
                _2103 = frontier_phi_66_pred_1;
                _2101 = frontier_phi_66_pred_2;
                _2099 = frontier_phi_66_pred_3;
                _2097 = frontier_phi_66_pred_4;
                _2095 = frontier_phi_66_pred_5;
                uint _2251 = _2250 + 1u;
                if (_2251 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2244 = _2093;
                    _2245 = _2095;
                    _2246 = _2097;
                    _2247 = _2099;
                    _2248 = _2101;
                    _2249 = _2103;
                    _2250 = _2251;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2092 = _2093;
            _2094 = _2095;
            _2096 = _2097;
            _2098 = _2099;
            _2100 = _2101;
            _2102 = _2103;
        }
        uvec4 _2106 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2107 = _2106.z;
        uint _2109 = (_2107 >> 8u) & 15u;
        float _2215;
        float _2217;
        float _2219;
        float _2221;
        float _2223;
        float _2225;
        if (((4294967295u << _2109) & _1991) == 0u)
        {
            _2215 = _2092;
            _2217 = _2094;
            _2219 = _2096;
            _2221 = _2098;
            _2223 = _2100;
            _2225 = _2102;
        }
        else
        {
            float _2240 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2109 < ((_2107 >> 12u) & 15u))
            {
                float _2216;
                float _2218;
                float _2220;
                float _2222;
                float _2224;
                float _2226;
                float _2372 = _2092;
                float _2373 = _2094;
                float _2374 = _2096;
                float _2375 = _2098;
                float _2376 = _2100;
                float _2377 = _2102;
                uint _2378 = _2109;
                uint _2387;
                bool _2388;
                for (;;)
                {
                    _2387 = texelFetch(g_lightClassification, int((((_1985 << 5u) + (_1971 << 9u)) + (_2378 << 2u)) >> 2u)).x;
                    _2388 = _2387 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2388)
                    {
                        frontier_phi_77_pred = _2377;
                        frontier_phi_77_pred_1 = _2376;
                        frontier_phi_77_pred_2 = _2375;
                        frontier_phi_77_pred_3 = _2374;
                        frontier_phi_77_pred_4 = _2373;
                        frontier_phi_77_pred_5 = _2372;
                    }
                    else
                    {
                        float _2531;
                        float _2532;
                        float _2533;
                        float _2534;
                        float _2535;
                        float _2536;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2544 = _2372;
                        float _2545 = _2373;
                        float _2546 = _2374;
                        float _2547 = _2375;
                        float _2548 = _2376;
                        float _2549 = _2377;
                        uint _2550 = _2387;
                        uint _2551;
                        vec4 _2576;
                        float _2577;
                        vec4 _2592;
                        vec3 _2604;
                        vec4 _2620;
                        vec4 _2636;
                        float _2683;
                        bool _2684;
                        for (;;)
                        {
                            uint _2561 = ((_2378 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2550));
                            _2551 = (_2550 + 4294967295u) & _2550;
                            uint _2563 = _2561 * 40u;
                            _2576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2563 + 3u)).x));
                            _2577 = _2576.w;
                            uint _2579 = (_2561 * 40u) + 4u;
                            _2592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 3u)).x));
                            uint _2594 = (_2561 * 40u) + 8u;
                            _2604 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 2u)).x));
                            uint _2607 = (_2561 * 40u) + 16u;
                            _2620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2607 + 3u)).x));
                            uint _2623 = (_2561 * 40u) + 20u;
                            _2636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 3u)).x));
                            uint _2639 = (_2561 * 40u) + 24u;
                            vec4 _2652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 3u)).x));
                            uint _2658 = (_2561 * 40u) + 28u;
                            vec4 _2671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 3u)).x));
                            _2683 = fma(_1947, _2671.z, fma(_1946, _2671.y, _2671.x * _1945)) + _2671.w;
                            _2684 = !((fma(_1947, _2652.z, fma(_1946, _2652.y, _2652.x * _1945)) + _2652.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2684)
                            {
                                float _2711 = _2576.x - _1945;
                                float _2712 = _2576.y - _1946;
                                float _2713 = _2576.z - _1947;
                                float _2714 = dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713));
                                float _2717 = inversesqrt(_2714);
                                float _2718 = _2717 * _2711;
                                float _2719 = _2717 * _2712;
                                float _2720 = _2717 * _2713;
                                float _2724 = 1.0 - (_2714 / (_2577 * _2577));
                                float _3664 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                                float _2725 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
                                float _2729 = sqrt(_2714) * _2592.w;
                                float _2731 = 1.39999997615814208984375 / (_2729 + 1.39999997615814208984375);
                                float _2732 = _2731 * _2731;
                                float _2733 = 1.0 - _2732;
                                float _2735 = (_2733 * dot(vec3(_2718, _2719, _2720), vec3(_323, _326, _329))) + _2732;
                                float _2738 = _2729 * _2729;
                                float _2742 = (fma(_1947, _2620.z, fma(_1946, _2620.y, _2620.x * _1945)) + _2620.w) / _2683;
                                float _2743 = (fma(_1947, _2636.z, fma(_1946, _2636.y, _2636.x * _1945)) + _2636.w) / _2683;
                                float _2747 = 1.0 - dot(vec2(_2742, _2743), vec2(_2742, _2743));
                                float _3680 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                                float _2748 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
                                float _2749 = _2748 * (((isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0))) * _2725) / ((_2738 * 0.699999988079071044921875) + 1.0));
                                float _2759 = dot(vec3(_323, _326, _329), vec3((-0.0) - (_1945 * _2240), (-0.0) - (_1946 * _2240), (-0.0) - (_1947 * _2240)));
                                float _3691 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                                float _2767 = (_2733 * dot(vec3(_323, _326, _329), vec3(_2718, _2719, _2720))) + _2732;
                                float _3702 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                                float _2768 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
                                float _2772 = (0.5 / (((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) + 9.9999999392252902907785028219223e-09) + _2768)) * _2768;
                                float _3713 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                                float _2779 = (_2748 * _2725) * (((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 3.1415927410125732421875) / ((_2738 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2749 * _2592.y;
                                frontier_phi_83_pred_1 = _2749 * _2592.x;
                                frontier_phi_83_pred_2 = _2779 * _2604.z;
                                frontier_phi_83_pred_3 = _2779 * _2604.y;
                                frontier_phi_83_pred_4 = _2779 * _2604.x;
                                frontier_phi_83_pred_5 = _2749 * _2592.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2787 = frontier_phi_83_pred;
                            _2786 = frontier_phi_83_pred_1;
                            _2785 = frontier_phi_83_pred_2;
                            _2784 = frontier_phi_83_pred_3;
                            _2783 = frontier_phi_83_pred_4;
                            _2788 = frontier_phi_83_pred_5;
                            _2534 = _2786 + _2547;
                            _2535 = _2787 + _2548;
                            _2536 = _2788 + _2549;
                            _2531 = _2783 + _2544;
                            _2532 = _2784 + _2545;
                            _2533 = _2785 + _2546;
                            if (_2551 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2544 = _2531;
                                _2545 = _2532;
                                _2546 = _2533;
                                _2547 = _2534;
                                _2548 = _2535;
                                _2549 = _2536;
                                _2550 = _2551;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2536;
                        frontier_phi_77_pred_1 = _2535;
                        frontier_phi_77_pred_2 = _2534;
                        frontier_phi_77_pred_3 = _2533;
                        frontier_phi_77_pred_4 = _2532;
                        frontier_phi_77_pred_5 = _2531;
                    }
                    _2226 = frontier_phi_77_pred;
                    _2224 = frontier_phi_77_pred_1;
                    _2222 = frontier_phi_77_pred_2;
                    _2220 = frontier_phi_77_pred_3;
                    _2218 = frontier_phi_77_pred_4;
                    _2216 = frontier_phi_77_pred_5;
                    uint _2379 = _2378 + 1u;
                    if (_2379 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2372 = _2216;
                        _2373 = _2218;
                        _2374 = _2220;
                        _2375 = _2222;
                        _2376 = _2224;
                        _2377 = _2226;
                        _2378 = _2379;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2220;
                frontier_phi_58_59_ladder_1 = _2226;
                frontier_phi_58_59_ladder_2 = _2224;
                frontier_phi_58_59_ladder_3 = _2222;
                frontier_phi_58_59_ladder_4 = _2218;
                frontier_phi_58_59_ladder_5 = _2216;
            }
            else
            {
                frontier_phi_58_59_ladder = _2096;
                frontier_phi_58_59_ladder_1 = _2102;
                frontier_phi_58_59_ladder_2 = _2100;
                frontier_phi_58_59_ladder_3 = _2098;
                frontier_phi_58_59_ladder_4 = _2094;
                frontier_phi_58_59_ladder_5 = _2092;
            }
            _2215 = frontier_phi_58_59_ladder_5;
            _2217 = frontier_phi_58_59_ladder_4;
            _2219 = frontier_phi_58_59_ladder;
            _2221 = frontier_phi_58_59_ladder_3;
            _2223 = frontier_phi_58_59_ladder_2;
            _2225 = frontier_phi_58_59_ladder_1;
        }
        float _2230 = isnan(1.0) ? _368 : (isnan(_368) ? 1.0 : min(_368, 1.0));
        _2004 = (_2230 * _2221) + _1564;
        _2006 = (_2230 * _2223) + _1566;
        _2008 = (_2230 * _2225) + _1568;
        _2010 = ((_2215 * 0.039999999105930328369140625) * _2230) + _1816;
        _2012 = ((_2217 * 0.039999999105930328369140625) * _2230) + _1818;
        _2014 = ((_2219 * 0.039999999105930328369140625) * _2230) + _1820;
    }
    else
    {
        _2004 = _1564;
        _2006 = _1566;
        _2008 = _1568;
        _2010 = _1816;
        _2012 = _1818;
        _2014 = _1820;
    }
    float _3729 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _3740 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _3751 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _2031 = ((isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_2004 + ((isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0))) * _368))) + ((_2010 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _1179)) * cbPerFrame._m0[3u].x);
    float _2032 = ((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_2006 + ((isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0))) * _368))) + ((_2012 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _1179)) * cbPerFrame._m0[3u].x);
    float _2033 = ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_2008 + ((isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0))) * _368))) + ((_2014 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _1179)) * cbPerFrame._m0[3u].x);
    uint _2034 = _342 + 6u;
    float _2042 = _302 / cbSceneParam._m0[86u].x;
    float _2043 = _303 / cbSceneParam._m0[86u].y;
    vec4 _2057 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2042, _2043, (log2((isnan(cbSceneParam._m0[77u].w) ? _222 : (isnan(_222) ? cbSceneParam._m0[77u].w : min(_222, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2059 = _2057.x;
    float _2060 = _2057.y;
    float _2061 = _2057.z;
    float _2062 = _2057.w;
    float _2155;
    float _2157;
    float _2159;
    float _2161;
    if (_222 > cbSceneParam._m0[78u].w)
    {
        float _2117 = isnan(_222) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _222 : min(cbSceneParam._m0[80u].w, _222));
        float _2118 = _2117 / _222;
        float _2129 = _2118 * _274;
        float _2130 = _275 * _2118;
        float _2131 = (-0.0) - _2130;
        float _2133 = _2118 * _276;
        float _2135 = (cbSceneParam._m0[77u].w * _2131) / _2117;
        float _2136 = _2135 + cbSceneParam._m0[79u].w;
        float _2137 = cbSceneParam._m0[79u].w - _2130;
        float _2143 = sqrt(((_2129 * _2129) + (_2130 * _2130)) + (_2133 * _2133));
        float _2146 = (1.0 - (cbSceneParam._m0[77u].w / _2117)) * _2143;
        float _2151 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2153 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2329;
        if (abs((_2131 - _2135) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2329 = ((((_2136 > 0.0) ? exp2(_2151 * _2136) : (2.0 - exp2(_2153 * _2136))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2146;
        }
        else
        {
            float _2273 = 1.0 / cbSceneParam._m0[80u].x;
            float _2274 = isnan(_2137) ? _2136 : (isnan(_2136) ? _2137 : max(_2136, _2137));
            float _2275 = isnan(_2137) ? _2136 : (isnan(_2136) ? _2137 : min(_2136, _2137));
            float _2284 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : min(_2274, 0.0));
            float _2285 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : min(_2275, 0.0));
            _2329 = ((abs(_2143 / _2131) * cbSceneParam._m0[80u].y) * ((((_2284 - _2285) * 2.0) - ((exp2(_2151 * (isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0)))) - exp2(_2151 * (isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0))))) * _2273)) - ((exp2(_2153 * _2284) - exp2(_2153 * _2285)) * _2273))) + (_2146 * cbSceneParam._m0[80u].z);
        }
        vec4 _2331 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2042, _2043, 1.0), 0.0);
        float _2340 = exp2((_2329 * (-1.44269502162933349609375)) * (1.0 - _2331.w));
        float _2341 = log2(_2340);
        float _2357 = log2(_2062);
        _2155 = (exp2(_2357 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2341 * cbSceneParam._m0[78u].x)) * _2331.x) / cbSceneParam._m0[78u].x)) + _2059;
        _2157 = (exp2(_2357 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2341 * cbSceneParam._m0[78u].y)) * _2331.y) / cbSceneParam._m0[78u].y)) + _2060;
        _2159 = (exp2(_2357 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2341 * cbSceneParam._m0[78u].z)) * _2331.z) / cbSceneParam._m0[78u].z)) + _2061;
        _2161 = _2340 * _2062;
    }
    else
    {
        _2155 = _2059;
        _2157 = _2060;
        _2159 = _2061;
        _2161 = _2062;
    }
    bool _2367;
    vec4 _2171;
    vec4 _2194;
    float _2196;
    float _2200;
    float _2201;
    float _2202;
    float _2203;
    bool _2214;
    for (;;)
    {
        _2171 = cbMatDynParam._m0[0u];
        float _2173 = roundEven(_2171.y);
        bool _2174 = _2173 == 3.0;
        float _2176 = log2(_2161);
        float _2183 = exp2(_2176 * cbSceneParam._m0[78u].x) * _2031;
        float _2184 = exp2(_2176 * cbSceneParam._m0[78u].y) * _2032;
        float _2185 = exp2(_2176 * cbSceneParam._m0[78u].z) * _2033;
        float _2192 = _290 + (-0.5);
        _2194 = cbMtdParam._m0[1u];
        _2196 = _2194.y * _2192;
        float _2199 = (_2173 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2200 = _2199 * (_2174 ? _2183 : (_2183 + (cbSceneParam._m0[72u].w * _2155)));
        _2201 = _2199 * (_2174 ? _2184 : (_2184 + (cbSceneParam._m0[72u].w * _2157)));
        _2202 = _2199 * (_2174 ? _2185 : (_2185 + (cbSceneParam._m0[72u].w * _2159)));
        _2203 = _2192 * 0.999000012874603271484375;
        _2214 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2214)
        {
            if ((cbInstanceData._m0[_342 + 7u].x + _2203) < 0.5)
            {
                _2367 = true;
                break;
            }
        }
        uint _2308 = _344 + uint(_2171.w);
        if ((cbInstanceData._m0[_2308].w < 1.0) && ((cbInstanceData._m0[_2308].w + _2203) < 0.5))
        {
            _2367 = true;
            break;
        }
        if ((_2196 + _192) < _2194.x)
        {
            _2367 = true;
            break;
        }
        _2367 = false;
        break;
    }
    float _2522;
    if (_2367)
    {
        discard_state = true;
        _2522 = 0.0;
    }
    else
    {
        _2522 = cbInstanceData._m0[_2034].w;
    }
    SV_Target.x = _2200;
    SV_Target.y = _2201;
    SV_Target.z = _2202;
    SV_Target.w = _2522;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2034].w;
    discard_exit();
}


