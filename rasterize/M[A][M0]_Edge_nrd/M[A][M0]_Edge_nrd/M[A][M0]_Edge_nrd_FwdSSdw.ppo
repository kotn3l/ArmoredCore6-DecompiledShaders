#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_nrd_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _695;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _159 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _160 = _159 * NORMAL.x;
    float _161 = _159 * NORMAL.y;
    float _162 = _159 * NORMAL.z;
    vec4 _182 = texture(sampler2D(M_A_M0_Edge_nrd_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _188 = _182.x * cbMtdParam._m0[9u].x;
    float _189 = _182.y * cbMtdParam._m0[9u].y;
    float _190 = _182.z * cbMtdParam._m0[9u].z;
    float _194 = inversesqrt(dot(vec3(_160, _161, _162), vec3(_160, _161, _162)));
    float _195 = _194 * _160;
    float _196 = _194 * _161;
    float _197 = _194 * _162;
    float _2829 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _2840 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _2851 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _217 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    float _275 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _276 = _269 * _275;
    float _277 = _270 * _275;
    float _278 = _271 * _275;
    float _284 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _285 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _306 = fma(_197, cbSceneParam._m0[5u].z, fma(_196, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _195));
    float _309 = fma(_197, cbSceneParam._m0[6u].z, fma(_196, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _195));
    float _312 = fma(_197, cbSceneParam._m0[7u].z, fma(_196, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _195));
    uint _325 = uint(roundEven(NORMAL.w)) * 13u;
    uint _328 = (_325 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _334 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2829 : (isnan(_2829) ? 1.0 : min(_2829, 1.0)))) * cbInstanceData._m0[_328].x;
    float _335 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2840 : (isnan(_2840) ? 1.0 : min(_2840, 1.0)))) * cbInstanceData._m0[_328].y;
    float _336 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2851 : (isnan(_2851) ? 1.0 : min(_2851, 1.0)))) * cbInstanceData._m0[_328].z;
    float _2862 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _337 = isnan(1.0) ? _2862 : (isnan(_2862) ? 1.0 : min(_2862, 1.0));
    float _2873 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _338 = isnan(1.0) ? _2873 : (isnan(_2873) ? 1.0 : min(_2873, 1.0));
    float _2884 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _339 = isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0));
    vec4 _348 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _284, cbSceneParam._m0[86u].y * _285));
    float _351 = _348.x * TEXCOORD.z;
    float _352 = dot(vec3(_195, _196, _197), vec3(_276, _277, _278));
    float _355 = _352 * 2.0;
    float _360 = (_355 * _195) - _276;
    float _361 = (_355 * _196) - _277;
    float _362 = (_355 * _197) - _278;
    float _384 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _388 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _392 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _694;
    float _696;
    float _697;
    float _698;
    float _699;
    float _700;
    float _701;
    float _702;
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _419 = fma(_392, cbModelParam._m0[26u].z, fma(_388, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _384));
        float _423 = fma(_392, cbModelParam._m0[27u].z, fma(_388, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _384));
        float _427 = fma(_392, cbModelParam._m0[28u].z, fma(_388, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _384));
        float _452 = _384 + _195;
        float _453 = _388 + _196;
        float _454 = _392 + _197;
        float _464 = fma(_454, cbModelParam._m0[26u].z, fma(_453, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _452)) - _419;
        float _465 = fma(_454, cbModelParam._m0[27u].z, fma(_453, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _452)) - _423;
        float _466 = fma(_454, cbModelParam._m0[28u].z, fma(_453, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _452)) - _427;
        float _470 = inversesqrt(dot(vec3(_464, _465, _466), vec3(_464, _465, _466)));
        float _483 = ((_470 * _464) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_419 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _484 = ((_470 * _465) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_423 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _485 = ((_470 * _466) / cbModelParam._m0[34u].z) + ((((((_427 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _488 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_483, _484, _485), 0.0);
        vec4 _495 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_483, _484, _485), 0.0);
        vec4 _502 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_483, _484, _485), 0.0);
        vec4 _509 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_483, _484, _485), 0.0);
        float _522 = exp2((_488.w + (-0.5)) * 20.0) * 2.0;
        float _523 = _522 * (_488.x + (-0.5));
        float _524 = _522 * (_488.y + (-0.5));
        float _525 = _522 * (_488.z + (-0.5));
        float _532 = exp2((_495.w + (-0.5)) * 20.0) * 2.0;
        float _533 = _532 * (_495.x + (-0.5));
        float _534 = _532 * (_495.y + (-0.5));
        float _535 = _532 * (_495.z + (-0.5));
        float _542 = exp2((_502.w + (-0.5)) * 20.0) * 2.0;
        float _543 = _542 * (_502.x + (-0.5));
        float _544 = _542 * (_502.y + (-0.5));
        float _545 = _542 * (_502.z + (-0.5));
        float _552 = exp2((_509.w + (-0.5)) * 20.0) * 2.0;
        float _553 = _552 * (_509.x + (-0.5));
        float _554 = _552 * (_509.y + (-0.5));
        float _555 = _552 * (_509.z + (-0.5));
        float _556 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
        float _557 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
        float _558 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
        float _559 = _523 * 0.5;
        float _560 = _533 * 0.5;
        float _561 = _543 * 0.5;
        float _562 = dot(vec3(_559, _560, _561), vec3(_559, _560, _561));
        float _567 = (_562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_562);
        float _576 = (dot(vec3(_195, _196, _197), vec3(_567 * _559, _567 * _560, _567 * _561)) + 1.0) * 0.5;
        float _2910 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
        float _586 = sqrt(((_560 * _560) + (_559 * _559)) + (_561 * _561)) / (_556 + 9.9999997473787516355514526367188e-06);
        float _2921 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        float _587 = isnan(1.0) ? _2921 : (isnan(_2921) ? 1.0 : min(_2921, 1.0));
        float _588 = _587 * 2.0;
        float _592 = (1.0 - _587) / (_587 + 1.0);
        float _2932 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        float _593 = isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0));
        float _602 = ((((1.0 - _593) * (_588 + 2.0)) * exp2(log2(isnan(1.0) ? _2910 : (isnan(_2910) ? 1.0 : min(_2910, 1.0))) * (_588 + 1.0))) + _593) * _556;
        float _603 = _524 * 0.5;
        float _604 = _534 * 0.5;
        float _605 = _544 * 0.5;
        float _606 = dot(vec3(_603, _604, _605), vec3(_603, _604, _605));
        float _611 = (_606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_606);
        float _619 = (dot(vec3(_195, _196, _197), vec3(_611 * _603, _611 * _604, _611 * _605)) + 1.0) * 0.5;
        float _2943 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _628 = sqrt(((_604 * _604) + (_603 * _603)) + (_605 * _605)) / (_557 + 9.9999997473787516355514526367188e-06);
        float _2954 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _629 = isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0));
        float _630 = _629 * 2.0;
        float _634 = (1.0 - _629) / (_629 + 1.0);
        float _2965 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _635 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
        float _644 = ((((1.0 - _635) * (_630 + 2.0)) * exp2(log2(isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0))) * (_630 + 1.0))) + _635) * _557;
        float _645 = _525 * 0.5;
        float _646 = _535 * 0.5;
        float _647 = _545 * 0.5;
        float _648 = dot(vec3(_645, _646, _647), vec3(_645, _646, _647));
        float _653 = (_648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_648);
        float _661 = (dot(vec3(_195, _196, _197), vec3(_653 * _645, _653 * _646, _653 * _647)) + 1.0) * 0.5;
        float _2976 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _670 = sqrt(((_646 * _646) + (_645 * _645)) + (_647 * _647)) / (_558 + 9.9999997473787516355514526367188e-06);
        float _2987 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0));
        float _672 = _671 * 2.0;
        float _676 = (1.0 - _671) / (_671 + 1.0);
        float _2998 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _677 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
        float _686 = ((((1.0 - _677) * (_672 + 2.0)) * exp2(log2(isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0))) * (_672 + 1.0))) + _677) * _558;
        _694 = _525;
        _696 = _524;
        _697 = _523;
        _698 = _535;
        _699 = _534;
        _700 = _533;
        _701 = _545;
        _702 = _544;
        _703 = _543;
        _704 = _558;
        _705 = _557;
        _706 = _556;
        _707 = cbModelParam._m0[36u].z * (isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0)));
        _708 = cbModelParam._m0[36u].z * (isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0)));
        _709 = cbModelParam._m0[36u].z * (isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0)));
    }
    else
    {
        _694 = _695;
        _696 = _695;
        _697 = _695;
        _698 = _695;
        _699 = _695;
        _700 = _695;
        _701 = _695;
        _702 = _695;
        _703 = _695;
        _704 = _695;
        _705 = _695;
        _706 = _695;
        _707 = 0.0;
        _708 = 0.0;
        _709 = 0.0;
    }
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _735 = fma(_392, cbModelParam._m0[30u].z, fma(_388, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _384));
        float _739 = fma(_392, cbModelParam._m0[31u].z, fma(_388, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _384));
        float _743 = fma(_392, cbModelParam._m0[32u].z, fma(_388, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _384));
        float _766 = _384 + _195;
        float _767 = _388 + _196;
        float _768 = _392 + _197;
        float _778 = fma(_768, cbModelParam._m0[30u].z, fma(_767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _766)) - _735;
        float _779 = fma(_768, cbModelParam._m0[31u].z, fma(_767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _766)) - _739;
        float _780 = fma(_768, cbModelParam._m0[32u].z, fma(_767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _766)) - _743;
        float _784 = inversesqrt(dot(vec3(_778, _779, _780), vec3(_778, _779, _780)));
        float _797 = ((_784 * _778) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_735 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _798 = ((_784 * _779) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_739 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _799 = ((_784 * _780) / cbModelParam._m0[35u].z) + ((((((_743 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        float _834 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_801.x + (-0.5));
        float _836 = _834 * (_801.y + (-0.5));
        float _837 = _834 * (_801.z + (-0.5));
        float _844 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_808.x + (-0.5));
        float _846 = _844 * (_808.y + (-0.5));
        float _847 = _844 * (_808.z + (-0.5));
        float _854 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_815.x + (-0.5));
        float _856 = _854 * (_815.y + (-0.5));
        float _857 = _854 * (_815.z + (-0.5));
        float _864 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_822.x + (-0.5));
        float _866 = _864 * (_822.y + (-0.5));
        float _867 = _864 * (_822.z + (-0.5));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = _835 * 0.5;
        float _872 = _845 * 0.5;
        float _873 = _855 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _887 = (dot(vec3(_195, _196, _197), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3039 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _896 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3050 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3061 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3039 : (isnan(_3039) ? 1.0 : min(_3039, 1.0))) * (_898 + 1.0))) + _903) * _868;
        float _913 = _836 * 0.5;
        float _914 = _846 * 0.5;
        float _915 = _856 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _929 = (dot(vec3(_195, _196, _197), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3072 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _938 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3083 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3094 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0))) * (_940 + 1.0))) + _945) * _869;
        float _955 = _837 * 0.5;
        float _956 = _847 * 0.5;
        float _957 = _857 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_195, _196, _197), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3105 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3116 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3127 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0))) * (_982 + 1.0))) + _987) * _870;
        _1004 = _837;
        _1005 = _836;
        _1006 = _835;
        _1007 = _847;
        _1008 = _846;
        _1009 = _845;
        _1010 = _857;
        _1011 = _856;
        _1012 = _855;
        _1013 = _870;
        _1014 = _869;
        _1015 = _868;
        _1016 = cbModelParam._m0[36u].w * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
        _1017 = cbModelParam._m0[36u].w * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1018 = cbModelParam._m0[36u].w * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
    }
    else
    {
        _1004 = _695;
        _1005 = _695;
        _1006 = _695;
        _1007 = _695;
        _1008 = _695;
        _1009 = _695;
        _1010 = _695;
        _1011 = _695;
        _1012 = _695;
        _1013 = _695;
        _1014 = _695;
        _1015 = _695;
        _1016 = 0.0;
        _1017 = 0.0;
        _1018 = 0.0;
    }
    float _1028 = (cbModelParam._m0[1u].x * (_1016 - _707)) + _707;
    float _1029 = (cbModelParam._m0[1u].x * (_1017 - _708)) + _708;
    float _1030 = (cbModelParam._m0[1u].x * (_1018 - _709)) + _709;
    float _1051 = fma(_1030, cbSceneParam._m0[89u].z, fma(_1029, cbSceneParam._m0[89u].y, _1028 * cbSceneParam._m0[89u].x));
    float _1054 = fma(_1030, cbSceneParam._m0[90u].z, fma(_1029, cbSceneParam._m0[90u].y, _1028 * cbSceneParam._m0[90u].x));
    float _1057 = fma(_1030, cbSceneParam._m0[91u].z, fma(_1029, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1028));
    float _1072 = _360 * 0.5;
    float _1073 = _361 * 0.5;
    float _1074 = _362 * 0.5;
    float _1075 = dot(vec4(_1072, _1073, _1074, 1.0), vec4(_1006, _1009, _1012, _1015));
    float _1078 = dot(vec4(_1072, _1073, _1074, 1.0), vec4(_1005, _1008, _1011, _1014));
    float _1081 = dot(vec4(_1072, _1073, _1074, 1.0), vec4(_1004, _1007, _1010, _1013));
    float _1115;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1088 = dot(vec4(_1072, _1073, _1074, 1.0), vec4(_694, _698, _701, _704));
        float _1092 = dot(vec4(_1072, _1073, _1074, 1.0), vec4(_696, _699, _702, _705));
        float _1096 = dot(vec4(_1072, _1073, _1074, 1.0), vec4(_697, _700, _703, _706));
        float _1103 = dot(vec4(cbModelParam._m0[39u]), vec4(_1072, _1073, _1074, 1.0));
        _1115 = dot(vec3(isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)), isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)), isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1103) ? 0.0 : (isnan(0.0) ? _1103 : max(0.0, _1103))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1115 = 1.0;
    }
    float _1126;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1117 = dot(vec4(cbModelParam._m0[40u]), vec4(_1072, _1073, _1074, 1.0));
        _1126 = dot(vec3(isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)), isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)), isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1117) ? 0.0 : (isnan(0.0) ? _1117 : max(0.0, _1117))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1126 = 1.0;
    }
    float _1130 = (_1126 * cbModelParam._m0[1u].x) + (_1115 * (1.0 - cbModelParam._m0[1u].x));
    float _1139 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1221;
    float _1223;
    float _1225;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1188 = fma(_392, cbModelParam._m0[13u].z, fma(_388, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _384)) + cbModelParam._m0[13u].w;
        float _1192 = fma(_392, cbModelParam._m0[14u].z, fma(_388, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _384)) + cbModelParam._m0[14u].w;
        float _1196 = fma(_392, cbModelParam._m0[15u].z, fma(_388, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _384)) + cbModelParam._m0[15u].w;
        float _1199 = fma(_362, cbModelParam._m0[13u].z, fma(_361, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _360));
        float _1202 = fma(_362, cbModelParam._m0[14u].z, fma(_361, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _360));
        float _1205 = fma(_362, cbModelParam._m0[15u].z, fma(_361, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _360));
        float _1231;
        if (_1199 > 0.0)
        {
            _1231 = abs((1.0 - _1188) / _1199);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1199 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1188 + 1.0) / _1199);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1231 = frontier_phi_14_12_ladder;
        }
        float _1460;
        if (_1202 > 0.0)
        {
            _1460 = abs((1.0 - _1192) / _1202);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1202 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1192 + 1.0) / _1202);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1460 = frontier_phi_23_19_ladder;
        }
        float _1652;
        if (_1205 > 0.0)
        {
            _1652 = abs((1.0 - _1196) / _1205);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1205 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1196 + 1.0) / _1205);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1652 = frontier_phi_35_30_ladder;
        }
        float _1654 = isnan(_1460) ? _1231 : (isnan(_1231) ? _1460 : min(_1231, _1460));
        float _1655 = isnan(_1652) ? _1654 : (isnan(_1654) ? _1652 : min(_1654, _1652));
        float _1659 = (_1655 * _1199) + _1188;
        float _1660 = (_1655 * _1202) + _1192;
        float _1661 = (_1655 * _1205) + _1196;
        float _1662 = _1655 * 9.9999997473787516355514526367188e-05;
        float _1664 = (-1.0) - _1662;
        float _1666 = _1662 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1661 > _1666) || ((_1661 < _1664) || ((_1660 > _1666) || ((_1660 < _1664) || ((_1659 < _1664) || (_1659 > _1666))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1758 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1661, cbModelParam._m0[9u].z, fma(_1660, cbModelParam._m0[9u].y, _1659 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1661, cbModelParam._m0[10u].z, fma(_1660, cbModelParam._m0[10u].y, _1659 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1661, cbModelParam._m0[11u].z, fma(_1660, cbModelParam._m0[11u].y, _1659 * cbModelParam._m0[11u].x))), _1139);
            frontier_phi_13_35_ladder = _1758.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1758.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1758.x * cbModelParam._m0[1u].y;
        }
        _1221 = frontier_phi_13_35_ladder_2;
        _1223 = frontier_phi_13_35_ladder_1;
        _1225 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1209 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_360, _361, _362), _1139);
        _1221 = _1209.x * cbModelParam._m0[1u].y;
        _1223 = _1209.y * cbModelParam._m0[1u].y;
        _1225 = _1209.z * cbModelParam._m0[1u].y;
    }
    float _1228 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1321;
    float _1323;
    float _1325;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1285 = fma(_392, cbModelParam._m0[21u].z, fma(_388, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _384)) + cbModelParam._m0[21u].w;
        float _1289 = fma(_392, cbModelParam._m0[22u].z, fma(_388, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _384)) + cbModelParam._m0[22u].w;
        float _1293 = fma(_392, cbModelParam._m0[23u].z, fma(_388, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _384)) + cbModelParam._m0[23u].w;
        float _1296 = fma(_362, cbModelParam._m0[21u].z, fma(_361, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _360));
        float _1299 = fma(_362, cbModelParam._m0[22u].z, fma(_361, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _360));
        float _1302 = fma(_362, cbModelParam._m0[23u].z, fma(_361, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _360));
        float _1465;
        if (_1296 > 0.0)
        {
            _1465 = abs((1.0 - _1285) / _1296);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1296 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1285 + 1.0) / _1296);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1465 = frontier_phi_25_21_ladder;
        }
        float _1679;
        if (_1299 > 0.0)
        {
            _1679 = abs((1.0 - _1289) / _1299);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1299 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1289 + 1.0) / _1299);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1679 = frontier_phi_37_32_ladder;
        }
        float _1830;
        if (_1302 > 0.0)
        {
            _1830 = abs((1.0 - _1293) / _1302);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1302 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1293 + 1.0) / _1302);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1830 = frontier_phi_46_43_ladder;
        }
        float _1832 = isnan(_1679) ? _1465 : (isnan(_1465) ? _1679 : min(_1465, _1679));
        float _1833 = isnan(_1830) ? _1832 : (isnan(_1832) ? _1830 : min(_1832, _1830));
        float _1837 = (_1833 * _1296) + _1285;
        float _1838 = (_1833 * _1299) + _1289;
        float _1839 = (_1833 * _1302) + _1293;
        float _1840 = _1833 * 9.9999997473787516355514526367188e-05;
        float _1841 = (-1.0) - _1840;
        float _1843 = _1840 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1839 > _1843) || ((_1839 < _1841) || ((_1838 > _1843) || ((_1838 < _1841) || ((_1837 < _1841) || (_1837 > _1843))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2038 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1839, cbModelParam._m0[17u].z, fma(_1838, cbModelParam._m0[17u].y, _1837 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1839, cbModelParam._m0[18u].z, fma(_1838, cbModelParam._m0[18u].y, _1837 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1839, cbModelParam._m0[19u].z, fma(_1838, cbModelParam._m0[19u].y, _1837 * cbModelParam._m0[19u].x))), _1228);
            frontier_phi_22_46_ladder = _2038.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2038.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2038.x * cbModelParam._m0[1u].z;
        }
        _1321 = frontier_phi_22_46_ladder_2;
        _1323 = frontier_phi_22_46_ladder_1;
        _1325 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1305 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_360, _361, _362), _1228);
        _1321 = _1305.x * cbModelParam._m0[1u].z;
        _1323 = _1305.y * cbModelParam._m0[1u].z;
        _1325 = _1305.z * cbModelParam._m0[1u].z;
    }
    float _1337 = _351 * 0.01200000010430812835693359375;
    float _1339 = _1337 * ((cbModelParam._m0[1u].w * (_1321 - _1221)) + _1221);
    float _1340 = _1337 * ((cbModelParam._m0[1u].w * (_1323 - _1223)) + _1223);
    float _1341 = _1337 * ((cbModelParam._m0[1u].w * (_1325 - _1225)) + _1225);
    float _1344 = fma(_1341, cbSceneParam._m0[89u].z, fma(_1340, cbSceneParam._m0[89u].y, _1339 * cbSceneParam._m0[89u].x));
    float _1347 = fma(_1341, cbSceneParam._m0[90u].z, fma(_1340, cbSceneParam._m0[90u].y, _1339 * cbSceneParam._m0[90u].x));
    float _1350 = fma(_1341, cbSceneParam._m0[91u].z, fma(_1340, cbSceneParam._m0[91u].y, _1339 * cbSceneParam._m0[91u].x));
    vec4 _1358 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_284, _285));
    float _1360 = _1358.w;
    float _1372 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1360);
    float _1373 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1360);
    float _1374 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1360);
    uvec4 _1378 = floatBitsToUint(cbInstanceData._m0[_325 + 5u]);
    uint _1380 = _1378.x * 14u;
    uint _1381 = _1380 + 13u;
    float _1388 = _351 + (-1.0);
    float _1394 = (cbLight._m0[_1381].x * _1388) + 1.0;
    float _1395 = (cbLight._m0[_1381].y * _1388) + 1.0;
    float _1396 = (cbLight._m0[_1381].z * _1388) + 1.0;
    float _1397 = (cbLight._m0[_1381].w * _1388) + 1.0;
    uint _1398 = _1380 + 5u;
    float _1404 = isnan(1.0) ? _1395 : (isnan(_1395) ? 1.0 : min(_1395, 1.0));
    uint _1408 = _1380 + 4u;
    float _1418 = isnan(1.0) ? _1394 : (isnan(_1394) ? 1.0 : min(_1394, 1.0));
    uint _1422 = _1380 | 1u;
    float _1433 = dot(vec3(cbLight._m0[_1380].xyz), vec3(_195, _196, _197));
    float _1436 = dot(vec3(cbLight._m0[_1422].xyz), vec3(_195, _196, _197));
    float _3263 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
    float _3274 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
    float _1441 = (isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0))) * 0.3183098733425140380859375;
    float _1443 = (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))) * 0.3183098733425140380859375;
    float _1450 = ((cbLight._m0[_1398].x * _1404) * _1443) + (((cbLight._m0[_1408].x * _1372) * _1418) * _1441);
    float _1451 = ((_1404 * cbLight._m0[_1398].y) * _1443) + (((cbLight._m0[_1408].y * _1373) * _1418) * _1441);
    float _1452 = ((_1404 * cbLight._m0[_1398].z) * _1443) + (((cbLight._m0[_1408].z * _1374) * _1418) * _1441);
    uvec4 _1457 = floatBitsToUint(cbLight._m0[_1380 + 12u]);
    bool _1459 = _1457.x == 0u;
    float _1470;
    float _1472;
    float _1474;
    if (_1459)
    {
        _1470 = _1450;
        _1472 = _1451;
        _1474 = _1452;
    }
    else
    {
        uint _1478 = _1380 + 6u;
        float _1494 = (dot(vec3(cbLight._m0[_1380 + 2u].xyz), vec3(_195, _196, _197)) * 0.5) + 0.5;
        float _1495 = _1494 * _1494;
        float _3285 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
        float _1497 = isnan(1.0) ? _1396 : (isnan(_1396) ? 1.0 : min(_1396, 1.0));
        _1470 = (((cbLight._m0[_1478].x * 0.3183098733425140380859375) * _1496) * _1497) + _1450;
        _1472 = (((cbLight._m0[_1478].y * 0.3183098733425140380859375) * _1496) * _1497) + _1451;
        _1474 = (((cbLight._m0[_1478].z * 0.3183098733425140380859375) * _1496) * _1497) + _1452;
    }
    bool _1477 = _1457.y == 0u;
    float _1515;
    float _1517;
    float _1519;
    if (_1477)
    {
        _1515 = _1470;
        _1517 = _1472;
        _1519 = _1474;
    }
    else
    {
        uint _1623 = _1380 + 7u;
        float _1639 = (dot(vec3(cbLight._m0[_1380 + 3u].xyz), vec3(_195, _196, _197)) * 0.5) + 0.5;
        float _1640 = _1639 * _1639;
        float _3301 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
        float _1642 = isnan(1.0) ? _1397 : (isnan(_1397) ? 1.0 : min(_1397, 1.0));
        _1515 = (((cbLight._m0[_1623].x * 0.3183098733425140380859375) * _1641) * _1642) + _1470;
        _1517 = (((cbLight._m0[_1623].y * 0.3183098733425140380859375) * _1641) * _1642) + _1472;
        _1519 = (((cbLight._m0[_1623].z * 0.3183098733425140380859375) * _1641) * _1642) + _1474;
    }
    uint _1521 = _1380 + 8u;
    float _1527 = cbLight._m0[_1380].x + _276;
    float _1528 = cbLight._m0[_1380].y + _277;
    float _1529 = cbLight._m0[_1380].z + _278;
    float _1533 = inversesqrt(dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529)));
    float _1537 = dot(vec3(_195, _196, _197), vec3(cbLight._m0[_1380].xyz));
    float _3317 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
    float _1540 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _3328 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _1541 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _1542 = dot(vec3(cbLight._m0[_1380].xyz), vec3(_1527 * _1533, _1528 * _1533, _1529 * _1533));
    float _3339 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
    float _1553 = (exp2(log2(1.0 - (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1559 = (0.5 / ((_1540 + 9.9999999392252902907785028219223e-09) + _1541)) * _1540;
    float _3350 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
    float _1561 = (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * 0.31831014156341552734375;
    uint _1575 = _1380 + 9u;
    float _1581 = cbLight._m0[_1422].x + _276;
    float _1582 = cbLight._m0[_1422].y + _277;
    float _1583 = cbLight._m0[_1422].z + _278;
    float _1587 = inversesqrt(dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583)));
    float _1591 = dot(vec3(_195, _196, _197), vec3(cbLight._m0[_1422].xyz));
    float _3361 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1594 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _1595 = dot(vec3(cbLight._m0[_1422].xyz), vec3(_1581 * _1587, _1582 * _1587, _1583 * _1587));
    float _3372 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1604 = (exp2(log2(1.0 - (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1608 = (0.5 / ((_1594 + 9.9999999392252902907785028219223e-09) + _1541)) * _1594;
    float _3383 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
    float _1610 = (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * 0.31831014156341552734375;
    float _1620 = (((_1604 * cbLight._m0[_1575].x) * _1610) * _1404) + ((((cbLight._m0[_1521].x * _1372) * _1553) * _1561) * _1418);
    float _1621 = (((_1604 * cbLight._m0[_1575].y) * _1610) * _1404) + ((((cbLight._m0[_1521].y * _1373) * _1553) * _1561) * _1418);
    float _1622 = (((_1604 * cbLight._m0[_1575].z) * _1610) * _1404) + ((((cbLight._m0[_1521].z * _1374) * _1553) * _1561) * _1418);
    float _1684;
    float _1686;
    float _1688;
    if (_1459)
    {
        _1684 = _1620;
        _1686 = _1621;
        _1688 = _1622;
    }
    else
    {
        uint _1690 = _1380 + 10u;
        uint _1696 = _1380 + 2u;
        float _1702 = cbLight._m0[_1696].x + _276;
        float _1703 = cbLight._m0[_1696].y + _277;
        float _1704 = cbLight._m0[_1696].z + _278;
        float _1708 = inversesqrt(dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704)));
        float _1712 = dot(vec3(_195, _196, _197), vec3(cbLight._m0[_1696].xyz));
        float _3394 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1715 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _1716 = dot(vec3(cbLight._m0[_1696].xyz), vec3(_1702 * _1708, _1703 * _1708, _1704 * _1708));
        float _3405 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = (exp2(log2(1.0 - (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1729 = (0.5 / ((_1715 + 9.9999999392252902907785028219223e-09) + _1541)) * _1715;
        float _3416 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1731 = (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * 0.31831014156341552734375;
        float _1732 = isnan(1.0) ? _1396 : (isnan(_1396) ? 1.0 : min(_1396, 1.0));
        _1684 = (((_1725 * cbLight._m0[_1690].x) * _1731) * _1732) + _1620;
        _1686 = (((_1725 * cbLight._m0[_1690].y) * _1731) * _1732) + _1621;
        _1688 = (((_1725 * cbLight._m0[_1690].z) * _1731) * _1732) + _1622;
    }
    float _1767;
    float _1769;
    float _1771;
    if (_1477)
    {
        _1767 = _1684;
        _1769 = _1686;
        _1771 = _1688;
    }
    else
    {
        uint _1778 = _1380 + 11u;
        uint _1784 = _1380 + 3u;
        float _1790 = cbLight._m0[_1784].x + _276;
        float _1791 = cbLight._m0[_1784].y + _277;
        float _1792 = cbLight._m0[_1784].z + _278;
        float _1796 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
        float _1800 = dot(vec3(_195, _196, _197), vec3(cbLight._m0[_1784].xyz));
        float _3432 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1803 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1804 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_1790 * _1796, _1791 * _1796, _1792 * _1796));
        float _3443 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1813 = (exp2(log2(1.0 - (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1817 = (0.5 / ((_1803 + 9.9999999392252902907785028219223e-09) + _1541)) * _1803;
        float _3454 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1819 = (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * 0.31831014156341552734375;
        float _1820 = isnan(1.0) ? _1397 : (isnan(_1397) ? 1.0 : min(_1397, 1.0));
        _1767 = (((_1813 * cbLight._m0[_1778].x) * _1819) * _1820) + _1684;
        _1769 = (((_1813 * cbLight._m0[_1778].y) * _1819) * _1820) + _1686;
        _1771 = (((_1813 * cbLight._m0[_1778].z) * _1819) * _1820) + _1688;
    }
    float _1955;
    float _1957;
    float _1959;
    float _1961;
    float _1963;
    float _1965;
    if (_1378.y == 0u)
    {
        float _1895 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1896 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1895;
        float _1897 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1895;
        float _1898 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1895;
        uvec4 _1910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1911 = _1910.x;
        uint _1922 = uint((float(_1910.y) * floor(float(uint(cbSceneParam._m0[85u].y * _285) / _1911))) + floor(float(uint(cbSceneParam._m0[85u].x * _284) / _1911)));
        float _1932 = (log2(_1898 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1933 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        uint _1936 = uint(isnan(14.0) ? _1933 : (isnan(_1933) ? 14.0 : min(_1933, 14.0)));
        uvec4 _1941 = texelFetch(g_lightClusterGridBuffer, int(((_1936 << 2u) + (_1922 << 6u)) >> 2u));
        uint _1942 = _1941.x;
        uint _1943 = _1910.z;
        float _2043;
        float _2045;
        float _2047;
        float _2049;
        float _2051;
        float _2053;
        if (((((1u << ((_1943 >> 4u) & 15u)) + 4294967295u) & _1942) == 0u) || ((_1943 & 240u) == 0u))
        {
            _2043 = 0.0;
            _2045 = 0.0;
            _2047 = 0.0;
            _2049 = 0.0;
            _2051 = 0.0;
            _2053 = 0.0;
        }
        else
        {
            float _2044;
            float _2046;
            float _2048;
            float _2050;
            float _2052;
            float _2054;
            float _2186 = 0.0;
            float _2187 = 0.0;
            float _2188 = 0.0;
            float _2189 = 0.0;
            float _2190 = 0.0;
            float _2191 = 0.0;
            uint _2192 = 0u;
            uint _2201;
            bool _2202;
            for (;;)
            {
                _2201 = texelFetch(g_lightClassification, int((((_1936 << 5u) + (_1922 << 9u)) + (_2192 << 2u)) >> 2u)).x;
                _2202 = _2201 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2202)
                {
                    frontier_phi_61_pred = _2186;
                    frontier_phi_61_pred_1 = _2191;
                    frontier_phi_61_pred_2 = _2190;
                    frontier_phi_61_pred_3 = _2189;
                    frontier_phi_61_pred_4 = _2188;
                    frontier_phi_61_pred_5 = _2187;
                }
                else
                {
                    float _2310;
                    float _2311;
                    float _2312;
                    float _2313;
                    float _2314;
                    float _2315;
                    uint _2316;
                    _2310 = _2186;
                    _2311 = _2187;
                    _2312 = _2188;
                    _2313 = _2189;
                    _2314 = _2190;
                    _2315 = _2191;
                    _2316 = _2201;
                    float _2242;
                    float _2243;
                    float _2244;
                    float _2245;
                    float _2246;
                    float _2247;
                    for (;;)
                    {
                        uint _2320 = uint(findLSB(_2316)) + (_2192 << 5u);
                        uint _2317 = (_2316 + 4294967295u) & _2316;
                        uint _2322 = _2320 * 48u;
                        vec4 _2336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2322)).x, texelFetch(g_PointLightRenderingBuffer, int(_2322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2322 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2322 + 3u)).x));
                        uint _2342 = (_2320 * 48u) + 4u;
                        vec4 _2355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2342)).x, texelFetch(g_PointLightRenderingBuffer, int(_2342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2342 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2342 + 3u)).x));
                        uint _2361 = (_2320 * 48u) + 8u;
                        vec3 _2372 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2361)).x, texelFetch(g_PointLightRenderingBuffer, int(_2361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2361 + 2u)).x));
                        float _2376 = _2336.x - _1896;
                        float _2377 = _2336.y - _1897;
                        float _2378 = _2336.z - _1898;
                        float _2379 = dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378));
                        float _2382 = inversesqrt(_2379);
                        float _2391 = 1.0 - (_2379 * _2336.w);
                        float _3480 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
                        float _2392 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
                        float _2393 = sqrt(_2379) * _2355.w;
                        float _2396 = 1.39999997615814208984375 / (_2393 + 1.39999997615814208984375);
                        float _2397 = _2396 * _2396;
                        float _2400 = ((1.0 - _2397) * dot(vec3(_306, _309, _312), vec3(_2382 * _2376, _2382 * _2377, _2382 * _2378))) + _2397;
                        float _2403 = _2393 * _2393;
                        float _2407 = ((isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0))) * _2392) / ((_2403 * 0.699999988079071044921875) + 1.0);
                        float _2411 = (-0.0) - _1896;
                        float _2412 = (-0.0) - _1897;
                        float _2413 = (-0.0) - _1898;
                        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
                        float _2421 = dot(vec3(_306, _309, _312), vec3(_2417 * _2411, _2417 * _2412, _2417 * _2413));
                        float _3496 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
                        float _3507 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
                        float _2425 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
                        float _2429 = (0.5 / (((isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) + 9.9999999392252902907785028219223e-09) + _2425)) * _2425;
                        float _3518 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
                        float _2438 = (((isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 3.1415927410125732421875) / ((_2403 * 2.1991131305694580078125) + 3.141590118408203125)) * _2392;
                        _2245 = (_2407 * _2355.x) + _2313;
                        _2246 = (_2407 * _2355.y) + _2314;
                        _2247 = (_2407 * _2355.z) + _2315;
                        _2242 = (_2438 * _2372.x) + _2310;
                        _2243 = (_2438 * _2372.y) + _2311;
                        _2244 = (_2438 * _2372.z) + _2312;
                        if (_2317 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2310 = _2242;
                            _2311 = _2243;
                            _2312 = _2244;
                            _2313 = _2245;
                            _2314 = _2246;
                            _2315 = _2247;
                            _2316 = _2317;
                        }
                    }
                    frontier_phi_61_pred = _2242;
                    frontier_phi_61_pred_1 = _2247;
                    frontier_phi_61_pred_2 = _2246;
                    frontier_phi_61_pred_3 = _2245;
                    frontier_phi_61_pred_4 = _2244;
                    frontier_phi_61_pred_5 = _2243;
                }
                _2044 = frontier_phi_61_pred;
                _2054 = frontier_phi_61_pred_1;
                _2052 = frontier_phi_61_pred_2;
                _2050 = frontier_phi_61_pred_3;
                _2048 = frontier_phi_61_pred_4;
                _2046 = frontier_phi_61_pred_5;
                uint _2193 = _2192 + 1u;
                if (_2193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2186 = _2044;
                    _2187 = _2046;
                    _2188 = _2048;
                    _2189 = _2050;
                    _2190 = _2052;
                    _2191 = _2054;
                    _2192 = _2193;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2043 = _2044;
            _2045 = _2046;
            _2047 = _2048;
            _2049 = _2050;
            _2051 = _2052;
            _2053 = _2054;
        }
        uvec4 _2057 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2058 = _2057.z;
        uint _2060 = (_2058 >> 8u) & 15u;
        float _2157;
        float _2159;
        float _2161;
        float _2163;
        float _2165;
        float _2167;
        if (((4294967295u << _2060) & _1942) == 0u)
        {
            _2157 = _2043;
            _2159 = _2045;
            _2161 = _2047;
            _2163 = _2049;
            _2165 = _2051;
            _2167 = _2053;
        }
        else
        {
            float _2182 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2060 < ((_2058 >> 12u) & 15u))
            {
                float _2158;
                float _2160;
                float _2162;
                float _2164;
                float _2166;
                float _2168;
                float _2293 = _2043;
                float _2294 = _2045;
                float _2295 = _2047;
                float _2296 = _2049;
                float _2297 = _2051;
                float _2298 = _2053;
                uint _2299 = _2060;
                uint _2308;
                bool _2309;
                for (;;)
                {
                    _2308 = texelFetch(g_lightClassification, int((((_1936 << 5u) + (_1922 << 9u)) + (_2299 << 2u)) >> 2u)).x;
                    _2309 = _2308 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2309)
                    {
                        frontier_phi_67_pred = _2296;
                        frontier_phi_67_pred_1 = _2297;
                        frontier_phi_67_pred_2 = _2298;
                        frontier_phi_67_pred_3 = _2295;
                        frontier_phi_67_pred_4 = _2294;
                        frontier_phi_67_pred_5 = _2293;
                    }
                    else
                    {
                        float _2443;
                        float _2444;
                        float _2445;
                        float _2446;
                        float _2447;
                        float _2448;
                        float _2695;
                        float _2696;
                        float _2697;
                        float _2698;
                        float _2699;
                        float _2700;
                        float _2456 = _2293;
                        float _2457 = _2294;
                        float _2458 = _2295;
                        float _2459 = _2296;
                        float _2460 = _2297;
                        float _2461 = _2298;
                        uint _2462 = _2308;
                        uint _2463;
                        vec4 _2488;
                        float _2489;
                        vec4 _2504;
                        vec3 _2516;
                        vec4 _2532;
                        vec4 _2548;
                        float _2595;
                        bool _2596;
                        for (;;)
                        {
                            uint _2473 = ((_2299 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2462));
                            _2463 = (_2462 + 4294967295u) & _2462;
                            uint _2475 = _2473 * 40u;
                            _2488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2475 + 3u)).x));
                            _2489 = _2488.w;
                            uint _2491 = (_2473 * 40u) + 4u;
                            _2504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2491 + 3u)).x));
                            uint _2506 = (_2473 * 40u) + 8u;
                            _2516 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2506 + 2u)).x));
                            uint _2519 = (_2473 * 40u) + 16u;
                            _2532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 3u)).x));
                            uint _2535 = (_2473 * 40u) + 20u;
                            _2548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 3u)).x));
                            uint _2551 = (_2473 * 40u) + 24u;
                            vec4 _2564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 3u)).x));
                            uint _2570 = (_2473 * 40u) + 28u;
                            vec4 _2583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2570 + 3u)).x));
                            _2595 = fma(_1898, _2583.z, fma(_1897, _2583.y, _2583.x * _1896)) + _2583.w;
                            _2596 = !((fma(_1898, _2564.z, fma(_1897, _2564.y, _2564.x * _1896)) + _2564.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2596)
                            {
                                float _2623 = _2488.x - _1896;
                                float _2624 = _2488.y - _1897;
                                float _2625 = _2488.z - _1898;
                                float _2626 = dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625));
                                float _2629 = inversesqrt(_2626);
                                float _2630 = _2629 * _2623;
                                float _2631 = _2629 * _2624;
                                float _2632 = _2629 * _2625;
                                float _2636 = 1.0 - (_2626 / (_2489 * _2489));
                                float _3529 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
                                float _2637 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
                                float _2641 = sqrt(_2626) * _2504.w;
                                float _2643 = 1.39999997615814208984375 / (_2641 + 1.39999997615814208984375);
                                float _2644 = _2643 * _2643;
                                float _2645 = 1.0 - _2644;
                                float _2647 = (_2645 * dot(vec3(_2630, _2631, _2632), vec3(_306, _309, _312))) + _2644;
                                float _2650 = _2641 * _2641;
                                float _2654 = (fma(_1898, _2532.z, fma(_1897, _2532.y, _2532.x * _1896)) + _2532.w) / _2595;
                                float _2655 = (fma(_1898, _2548.z, fma(_1897, _2548.y, _2548.x * _1896)) + _2548.w) / _2595;
                                float _2659 = 1.0 - dot(vec2(_2654, _2655), vec2(_2654, _2655));
                                float _3545 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                                float _2660 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
                                float _2661 = _2660 * (((isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0))) * _2637) / ((_2650 * 0.699999988079071044921875) + 1.0));
                                float _2671 = dot(vec3(_306, _309, _312), vec3((-0.0) - (_1896 * _2182), (-0.0) - (_1897 * _2182), (-0.0) - (_1898 * _2182)));
                                float _3556 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                                float _2679 = (_2645 * dot(vec3(_306, _309, _312), vec3(_2630, _2631, _2632))) + _2644;
                                float _3567 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
                                float _2680 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
                                float _2684 = (0.5 / (((isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) + 9.9999999392252902907785028219223e-09) + _2680)) * _2680;
                                float _3578 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
                                float _2691 = (_2660 * _2637) * (((isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * 3.1415927410125732421875) / ((_2650 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2691 * _2516.x;
                                frontier_phi_73_pred_1 = _2691 * _2516.y;
                                frontier_phi_73_pred_2 = _2661 * _2504.z;
                                frontier_phi_73_pred_3 = _2661 * _2504.y;
                                frontier_phi_73_pred_4 = _2661 * _2504.x;
                                frontier_phi_73_pred_5 = _2691 * _2516.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2695 = frontier_phi_73_pred;
                            _2696 = frontier_phi_73_pred_1;
                            _2700 = frontier_phi_73_pred_2;
                            _2699 = frontier_phi_73_pred_3;
                            _2698 = frontier_phi_73_pred_4;
                            _2697 = frontier_phi_73_pred_5;
                            _2446 = _2698 + _2459;
                            _2447 = _2699 + _2460;
                            _2448 = _2700 + _2461;
                            _2443 = _2695 + _2456;
                            _2444 = _2696 + _2457;
                            _2445 = _2697 + _2458;
                            if (_2463 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2456 = _2443;
                                _2457 = _2444;
                                _2458 = _2445;
                                _2459 = _2446;
                                _2460 = _2447;
                                _2461 = _2448;
                                _2462 = _2463;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2446;
                        frontier_phi_67_pred_1 = _2447;
                        frontier_phi_67_pred_2 = _2448;
                        frontier_phi_67_pred_3 = _2445;
                        frontier_phi_67_pred_4 = _2444;
                        frontier_phi_67_pred_5 = _2443;
                    }
                    _2164 = frontier_phi_67_pred;
                    _2166 = frontier_phi_67_pred_1;
                    _2168 = frontier_phi_67_pred_2;
                    _2162 = frontier_phi_67_pred_3;
                    _2160 = frontier_phi_67_pred_4;
                    _2158 = frontier_phi_67_pred_5;
                    uint _2300 = _2299 + 1u;
                    if (_2300 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2293 = _2158;
                        _2294 = _2160;
                        _2295 = _2162;
                        _2296 = _2164;
                        _2297 = _2166;
                        _2298 = _2168;
                        _2299 = _2300;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2166;
                frontier_phi_55_56_ladder_1 = _2168;
                frontier_phi_55_56_ladder_2 = _2164;
                frontier_phi_55_56_ladder_3 = _2162;
                frontier_phi_55_56_ladder_4 = _2160;
                frontier_phi_55_56_ladder_5 = _2158;
            }
            else
            {
                frontier_phi_55_56_ladder = _2051;
                frontier_phi_55_56_ladder_1 = _2053;
                frontier_phi_55_56_ladder_2 = _2049;
                frontier_phi_55_56_ladder_3 = _2047;
                frontier_phi_55_56_ladder_4 = _2045;
                frontier_phi_55_56_ladder_5 = _2043;
            }
            _2157 = frontier_phi_55_56_ladder_5;
            _2159 = frontier_phi_55_56_ladder_4;
            _2161 = frontier_phi_55_56_ladder_3;
            _2163 = frontier_phi_55_56_ladder_2;
            _2165 = frontier_phi_55_56_ladder;
            _2167 = frontier_phi_55_56_ladder_1;
        }
        float _2172 = isnan(1.0) ? _351 : (isnan(_351) ? 1.0 : min(_351, 1.0));
        _1955 = (_2172 * _2163) + _1515;
        _1957 = (_2172 * _2165) + _1517;
        _1959 = (_2172 * _2167) + _1519;
        _1961 = ((_2157 * 0.039999999105930328369140625) * _2172) + _1767;
        _1963 = ((_2159 * 0.039999999105930328369140625) * _2172) + _1769;
        _1965 = ((_2161 * 0.039999999105930328369140625) * _2172) + _1771;
    }
    else
    {
        _1955 = _1515;
        _1957 = _1517;
        _1959 = _1519;
        _1961 = _1767;
        _1963 = _1769;
        _1965 = _1771;
    }
    float _3594 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3605 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3616 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    uint _1985 = _325 + 6u;
    float _1993 = _284 / cbSceneParam._m0[86u].x;
    float _1994 = _285 / cbSceneParam._m0[86u].y;
    vec4 _2008 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1993, _1994, (log2((isnan(cbSceneParam._m0[77u].w) ? _217 : (isnan(_217) ? cbSceneParam._m0[77u].w : min(_217, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2010 = _2008.x;
    float _2011 = _2008.y;
    float _2012 = _2008.z;
    float _2013 = _2008.w;
    float _2106;
    float _2108;
    float _2110;
    float _2112;
    if (_217 > cbSceneParam._m0[78u].w)
    {
        float _2068 = isnan(_217) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _217 : min(cbSceneParam._m0[80u].w, _217));
        float _2069 = _2068 / _217;
        float _2080 = _2069 * _269;
        float _2081 = _270 * _2069;
        float _2082 = (-0.0) - _2081;
        float _2084 = _2069 * _271;
        float _2086 = (cbSceneParam._m0[77u].w * _2082) / _2068;
        float _2087 = _2086 + cbSceneParam._m0[79u].w;
        float _2088 = cbSceneParam._m0[79u].w - _2081;
        float _2094 = sqrt(((_2080 * _2080) + (_2081 * _2081)) + (_2084 * _2084));
        float _2097 = (1.0 - (cbSceneParam._m0[77u].w / _2068)) * _2094;
        float _2102 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2104 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2255;
        if (abs((_2082 - _2086) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2255 = ((((_2087 > 0.0) ? exp2(_2102 * _2087) : (2.0 - exp2(_2104 * _2087))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2097;
        }
        else
        {
            float _2215 = 1.0 / cbSceneParam._m0[80u].x;
            float _2216 = isnan(_2088) ? _2087 : (isnan(_2087) ? _2088 : max(_2087, _2088));
            float _2217 = isnan(_2088) ? _2087 : (isnan(_2087) ? _2088 : min(_2087, _2088));
            float _2226 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : min(_2216, 0.0));
            float _2227 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : min(_2217, 0.0));
            _2255 = ((abs(_2094 / _2082) * cbSceneParam._m0[80u].y) * ((((_2226 - _2227) * 2.0) - ((exp2(_2102 * (isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0)))) - exp2(_2102 * (isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0))))) * _2215)) - ((exp2(_2104 * _2226) - exp2(_2104 * _2227)) * _2215))) + (_2097 * cbSceneParam._m0[80u].z);
        }
        vec4 _2257 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1993, _1994, 1.0), 0.0);
        float _2266 = exp2((_2255 * (-1.44269502162933349609375)) * (1.0 - _2257.w));
        float _2267 = log2(_2266);
        float _2283 = log2(_2013);
        _2106 = (exp2(_2283 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2267 * cbSceneParam._m0[78u].x)) * _2257.x) / cbSceneParam._m0[78u].x)) + _2010;
        _2108 = (exp2(_2283 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2267 * cbSceneParam._m0[78u].y)) * _2257.y) / cbSceneParam._m0[78u].y)) + _2011;
        _2110 = (exp2(_2283 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2267 * cbSceneParam._m0[78u].z)) * _2257.z) / cbSceneParam._m0[78u].z)) + _2012;
        _2112 = _2266 * _2013;
    }
    else
    {
        _2106 = _2010;
        _2108 = _2011;
        _2110 = _2012;
        _2112 = _2013;
    }
    float _2124 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2125 = _2124 == 3.0;
    float _2127 = log2(_2112);
    float _2134 = exp2(_2127 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_1955 + ((isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0))) * _351))) + ((_1961 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _1130)) * cbPerFrame._m0[3u].x));
    float _2135 = exp2(_2127 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1957 + ((isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0))) * _351))) + ((_1963 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _1130)) * cbPerFrame._m0[3u].x));
    float _2136 = exp2(_2127 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1959 + ((isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0))) * _351))) + ((_1965 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _1130)) * cbPerFrame._m0[3u].x));
    float _2145 = (_2124 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2145 * (_2125 ? _2134 : (_2134 + (cbSceneParam._m0[72u].w * _2106)));
    SV_Target.y = _2145 * (_2125 ? _2135 : (_2135 + (cbSceneParam._m0[72u].w * _2108)));
    SV_Target.z = _2145 * (_2125 ? _2136 : (_2136 + (cbSceneParam._m0[72u].w * _2110)));
    SV_Target.w = cbInstanceData._m0[_1985].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1985].w;
}


