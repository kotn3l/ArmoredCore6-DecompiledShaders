#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _771;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _159 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _160 = _159 * NORMAL.x;
    float _161 = _159 * NORMAL.y;
    float _162 = _159 * NORMAL.z;
    vec4 _182 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _188 = _182.x * cbMtdParam._m0[9u].x;
    float _189 = _182.y * cbMtdParam._m0[9u].y;
    float _190 = _182.z * cbMtdParam._m0[9u].z;
    vec4 _211 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _213 = _211.x;
    float _214 = _211.y;
    float _215 = _211.z;
    float _216 = cbMtdParam._m0[11u].w * cbMtdParam._m0[12u].x;
    float _217 = _216 * _213;
    float _218 = _216 * _214;
    float _219 = _216 * _215;
    float _220 = isnan(_218) ? _217 : (isnan(_217) ? _218 : max(_217, _218));
    float _221 = isnan(_219) ? _220 : (isnan(_220) ? _219 : max(_220, _219));
    float _224;
    float _226;
    if (_221 < 1.1920928955078125e-07)
    {
        _224 = 0.0;
        _226 = 0.0;
    }
    else
    {
        float _252 = isnan(_218) ? _217 : (isnan(_217) ? _218 : min(_217, _218));
        float _254 = _221 - (isnan(_219) ? _252 : (isnan(_252) ? _219 : min(_252, _219)));
        float _227 = _254 / _221;
        float frontier_phi_1_2_ladder;
        float frontier_phi_1_2_ladder_1;
        if (_254 < 1.1920928955078125e-07)
        {
            frontier_phi_1_2_ladder = _227;
            frontier_phi_1_2_ladder_1 = 0.0;
        }
        else
        {
            float _1172;
            if (_221 == _217)
            {
                _1172 = ((_216 * (_214 - _215)) / _254) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_14_10_ladder;
                if (_221 == _218)
                {
                    frontier_phi_14_10_ladder = (((_216 * (_215 - _213)) / _254) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_14_10_ladder = (((_216 * (_213 - _214)) / _254) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _1172 = frontier_phi_14_10_ladder;
            }
            float _1177 = (_1172 < 0.0) ? (_1172 + 1.0) : _1172;
            frontier_phi_1_2_ladder = _227;
            frontier_phi_1_2_ladder_1 = _1177 - floor(_1177);
        }
        _224 = frontier_phi_1_2_ladder_1;
        _226 = frontier_phi_1_2_ladder;
    }
    float _228 = _226 + cbMtdParam._m0[11u].y;
    float _232 = fract(cbMtdParam._m0[11u].z + _224) * 6.0;
    uint _235 = uint(int(floor(_232)));
    float _237 = _232 - float(int(_235));
    float _240 = (1.0 - _228) * _221;
    float _243 = (1.0 - (_237 * _228)) * _221;
    float _247 = (1.0 - ((1.0 - _237) * _228)) * _221;
    float _256;
    float _258;
    float _259;
    if ((_235 == 0u) || (_235 == 6u))
    {
        _256 = _221;
        _258 = _247;
        _259 = _240;
    }
    else
    {
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        if (_235 == 1u)
        {
            frontier_phi_3_4_ladder = _240;
            frontier_phi_3_4_ladder_1 = _221;
            frontier_phi_3_4_ladder_2 = _243;
        }
        else
        {
            float frontier_phi_3_4_ladder_8_ladder;
            float frontier_phi_3_4_ladder_8_ladder_1;
            float frontier_phi_3_4_ladder_8_ladder_2;
            if (_235 == 2u)
            {
                frontier_phi_3_4_ladder_8_ladder = _247;
                frontier_phi_3_4_ladder_8_ladder_1 = _221;
                frontier_phi_3_4_ladder_8_ladder_2 = _240;
            }
            else
            {
                float frontier_phi_3_4_ladder_8_ladder_13_ladder;
                float frontier_phi_3_4_ladder_8_ladder_13_ladder_1;
                float frontier_phi_3_4_ladder_8_ladder_13_ladder_2;
                if (_235 == 3u)
                {
                    frontier_phi_3_4_ladder_8_ladder_13_ladder = _221;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder_1 = _243;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder_2 = _240;
                }
                else
                {
                    bool _1218 = _235 == 4u;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder = _1218 ? _221 : _243;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder_1 = _240;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder_2 = _1218 ? _247 : _221;
                }
                frontier_phi_3_4_ladder_8_ladder = frontier_phi_3_4_ladder_8_ladder_13_ladder;
                frontier_phi_3_4_ladder_8_ladder_1 = frontier_phi_3_4_ladder_8_ladder_13_ladder_1;
                frontier_phi_3_4_ladder_8_ladder_2 = frontier_phi_3_4_ladder_8_ladder_13_ladder_2;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_8_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_8_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_8_ladder_2;
        }
        _256 = frontier_phi_3_4_ladder_2;
        _258 = frontier_phi_3_4_ladder_1;
        _259 = frontier_phi_3_4_ladder;
    }
    float _271 = inversesqrt(dot(vec3(_160, _161, _162), vec3(_160, _161, _162)));
    float _272 = _271 * _160;
    float _273 = _271 * _161;
    float _274 = _271 * _162;
    float _2993 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _3004 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _3015 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _293 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _335 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _345 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _335);
    float _346 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _335);
    float _347 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _335);
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _345 * _351;
    float _353 = _346 * _351;
    float _354 = _347 * _351;
    float _360 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _361 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _381 = fma(_274, cbSceneParam._m0[5u].z, fma(_273, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _272));
    float _384 = fma(_274, cbSceneParam._m0[6u].z, fma(_273, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _272));
    float _387 = fma(_274, cbSceneParam._m0[7u].z, fma(_273, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _272));
    uint _400 = uint(roundEven(NORMAL.w)) * 13u;
    uint _401 = _400 + 9u;
    uint _402 = _401 + uint(cbMatDynParam._m0[0u].w);
    float _408 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0)))) * cbInstanceData._m0[_402].x;
    float _409 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0)))) * cbInstanceData._m0[_402].y;
    float _410 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0)))) * cbInstanceData._m0[_402].z;
    float _3026 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _411 = isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0));
    float _3037 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _412 = isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0));
    float _3048 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _413 = isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0));
    vec4 _422 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _360, cbSceneParam._m0[86u].y * _361));
    float _425 = _422.x * TEXCOORD.z;
    float _426 = dot(vec3(_272, _273, _274), vec3(_352, _353, _354));
    float _429 = _426 * 2.0;
    float _434 = (_429 * _272) - _352;
    float _435 = (_429 * _273) - _353;
    float _436 = (_429 * _274) - _354;
    float _458 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _462 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _466 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _770;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _495 = fma(_466, cbModelParam._m0[26u].z, fma(_462, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _458));
        float _499 = fma(_466, cbModelParam._m0[27u].z, fma(_462, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _458));
        float _503 = fma(_466, cbModelParam._m0[28u].z, fma(_462, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _458));
        float _528 = _458 + _272;
        float _529 = _462 + _273;
        float _530 = _466 + _274;
        float _540 = fma(_530, cbModelParam._m0[26u].z, fma(_529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528)) - _495;
        float _541 = fma(_530, cbModelParam._m0[27u].z, fma(_529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528)) - _499;
        float _542 = fma(_530, cbModelParam._m0[28u].z, fma(_529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528)) - _503;
        float _546 = inversesqrt(dot(vec3(_540, _541, _542), vec3(_540, _541, _542)));
        float _559 = ((_546 * _540) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_495 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _560 = ((_546 * _541) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_499 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _561 = ((_546 * _542) / cbModelParam._m0[34u].z) + ((((((_503 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _571 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _578 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _585 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        float _598 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _599 = _598 * (_564.x + (-0.5));
        float _600 = _598 * (_564.y + (-0.5));
        float _601 = _598 * (_564.z + (-0.5));
        float _608 = exp2((_571.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_571.x + (-0.5));
        float _610 = _608 * (_571.y + (-0.5));
        float _611 = _608 * (_571.z + (-0.5));
        float _618 = exp2((_578.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_578.x + (-0.5));
        float _620 = _618 * (_578.y + (-0.5));
        float _621 = _618 * (_578.z + (-0.5));
        float _628 = exp2((_585.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_585.x + (-0.5));
        float _630 = _628 * (_585.y + (-0.5));
        float _631 = _628 * (_585.z + (-0.5));
        float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _633 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _635 = _599 * 0.5;
        float _636 = _609 * 0.5;
        float _637 = _619 * 0.5;
        float _638 = dot(vec3(_635, _636, _637), vec3(_635, _636, _637));
        float _643 = (_638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_638);
        float _652 = (dot(vec3(_272, _273, _274), vec3(_643 * _635, _643 * _636, _643 * _637)) + 1.0) * 0.5;
        float _3074 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _662 = sqrt(((_636 * _636) + (_635 * _635)) + (_637 * _637)) / (_632 + 9.9999997473787516355514526367188e-06);
        float _3085 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0));
        float _664 = _663 * 2.0;
        float _668 = (1.0 - _663) / (_663 + 1.0);
        float _3096 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0));
        float _678 = ((((1.0 - _669) * (_664 + 2.0)) * exp2(log2(isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0))) * (_664 + 1.0))) + _669) * _632;
        float _679 = _600 * 0.5;
        float _680 = _610 * 0.5;
        float _681 = _620 * 0.5;
        float _682 = dot(vec3(_679, _680, _681), vec3(_679, _680, _681));
        float _687 = (_682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_682);
        float _695 = (dot(vec3(_272, _273, _274), vec3(_687 * _679, _687 * _680, _687 * _681)) + 1.0) * 0.5;
        float _3107 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _704 = sqrt(((_680 * _680) + (_679 * _679)) + (_681 * _681)) / (_633 + 9.9999997473787516355514526367188e-06);
        float _3118 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0));
        float _706 = _705 * 2.0;
        float _710 = (1.0 - _705) / (_705 + 1.0);
        float _3129 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0));
        float _720 = ((((1.0 - _711) * (_706 + 2.0)) * exp2(log2(isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0))) * (_706 + 1.0))) + _711) * _633;
        float _721 = _601 * 0.5;
        float _722 = _611 * 0.5;
        float _723 = _621 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _737 = (dot(vec3(_272, _273, _274), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3140 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _746 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_634 + 9.9999997473787516355514526367188e-06);
        float _3151 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3162 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0))) * (_748 + 1.0))) + _753) * _634;
        _770 = _601;
        _772 = _600;
        _773 = _599;
        _774 = _611;
        _775 = _610;
        _776 = _609;
        _777 = _621;
        _778 = _620;
        _779 = _619;
        _780 = _634;
        _781 = _633;
        _782 = _632;
        _783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0)));
        _784 = cbModelParam._m0[36u].z * (isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0)));
        _785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
    }
    else
    {
        _770 = _771;
        _772 = _771;
        _773 = _771;
        _774 = _771;
        _775 = _771;
        _776 = _771;
        _777 = _771;
        _778 = _771;
        _779 = _771;
        _780 = _771;
        _781 = _771;
        _782 = _771;
        _783 = 0.0;
        _784 = 0.0;
        _785 = 0.0;
    }
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _818 = fma(_466, cbModelParam._m0[30u].z, fma(_462, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _458));
        float _822 = fma(_466, cbModelParam._m0[31u].z, fma(_462, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _458));
        float _826 = fma(_466, cbModelParam._m0[32u].z, fma(_462, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _458));
        float _849 = _458 + _272;
        float _850 = _462 + _273;
        float _851 = _466 + _274;
        float _861 = fma(_851, cbModelParam._m0[30u].z, fma(_850, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _849)) - _818;
        float _862 = fma(_851, cbModelParam._m0[31u].z, fma(_850, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _849)) - _822;
        float _863 = fma(_851, cbModelParam._m0[32u].z, fma(_850, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _849)) - _826;
        float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
        float _880 = ((_867 * _861) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_818 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_867 * _862) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_822 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_867 * _863) / cbModelParam._m0[35u].z) + ((((((_826 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        float _917 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_884.x + (-0.5));
        float _919 = _917 * (_884.y + (-0.5));
        float _920 = _917 * (_884.z + (-0.5));
        float _927 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_891.x + (-0.5));
        float _929 = _927 * (_891.y + (-0.5));
        float _930 = _927 * (_891.z + (-0.5));
        float _937 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_898.x + (-0.5));
        float _939 = _937 * (_898.y + (-0.5));
        float _940 = _937 * (_898.z + (-0.5));
        float _947 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_905.x + (-0.5));
        float _949 = _947 * (_905.y + (-0.5));
        float _950 = _947 * (_905.z + (-0.5));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = _918 * 0.5;
        float _955 = _928 * 0.5;
        float _956 = _938 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_272, _273, _274), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3203 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3214 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3225 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0))) * (_981 + 1.0))) + _986) * _951;
        float _996 = _919 * 0.5;
        float _997 = _929 * 0.5;
        float _998 = _939 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_272, _273, _274), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3236 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3247 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3258 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0))) * (_1023 + 1.0))) + _1028) * _952;
        float _1038 = _920 * 0.5;
        float _1039 = _930 * 0.5;
        float _1040 = _940 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_272, _273, _274), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3269 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3280 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3291 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0))) * (_1065 + 1.0))) + _1070) * _953;
        _1087 = _920;
        _1088 = _919;
        _1089 = _918;
        _1090 = _930;
        _1091 = _929;
        _1092 = _928;
        _1093 = _940;
        _1094 = _939;
        _1095 = _938;
        _1096 = _953;
        _1097 = _952;
        _1098 = _951;
        _1099 = cbModelParam._m0[36u].w * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1100 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1101 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
    }
    else
    {
        _1087 = _771;
        _1088 = _771;
        _1089 = _771;
        _1090 = _771;
        _1091 = _771;
        _1092 = _771;
        _1093 = _771;
        _1094 = _771;
        _1095 = _771;
        _1096 = _771;
        _1097 = _771;
        _1098 = _771;
        _1099 = 0.0;
        _1100 = 0.0;
        _1101 = 0.0;
    }
    float _1111 = (cbModelParam._m0[1u].x * (_1099 - _783)) + _783;
    float _1112 = (cbModelParam._m0[1u].x * (_1100 - _784)) + _784;
    float _1113 = (cbModelParam._m0[1u].x * (_1101 - _785)) + _785;
    float _1134 = fma(_1113, cbSceneParam._m0[89u].z, fma(_1112, cbSceneParam._m0[89u].y, _1111 * cbSceneParam._m0[89u].x));
    float _1137 = fma(_1113, cbSceneParam._m0[90u].z, fma(_1112, cbSceneParam._m0[90u].y, _1111 * cbSceneParam._m0[90u].x));
    float _1140 = fma(_1113, cbSceneParam._m0[91u].z, fma(_1112, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1111));
    float _1155 = _434 * 0.5;
    float _1156 = _435 * 0.5;
    float _1157 = _436 * 0.5;
    float _1158 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1089, _1092, _1095, _1098));
    float _1161 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1088, _1091, _1094, _1097));
    float _1164 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1087, _1090, _1093, _1096));
    float _1216;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1189 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_770, _774, _777, _780));
        float _1193 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_772, _775, _778, _781));
        float _1197 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_773, _776, _779, _782));
        float _1204 = dot(vec4(cbModelParam._m0[39u]), vec4(_1155, _1156, _1157, 1.0));
        _1216 = dot(vec3(isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1204) ? 0.0 : (isnan(0.0) ? _1204 : max(0.0, _1204))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1216 = 1.0;
    }
    float _1229;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1220 = dot(vec4(cbModelParam._m0[40u]), vec4(_1155, _1156, _1157, 1.0));
        _1229 = dot(vec3(isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)), isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)), isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1220) ? 0.0 : (isnan(0.0) ? _1220 : max(0.0, _1220))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1229 = 1.0;
    }
    float _1233 = (_1229 * cbModelParam._m0[1u].x) + (_1216 * (1.0 - cbModelParam._m0[1u].x));
    float _1242 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1324;
    float _1326;
    float _1328;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1291 = fma(_466, cbModelParam._m0[13u].z, fma(_462, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _458)) + cbModelParam._m0[13u].w;
        float _1295 = fma(_466, cbModelParam._m0[14u].z, fma(_462, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _458)) + cbModelParam._m0[14u].w;
        float _1299 = fma(_466, cbModelParam._m0[15u].z, fma(_462, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _458)) + cbModelParam._m0[15u].w;
        float _1302 = fma(_436, cbModelParam._m0[13u].z, fma(_435, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _434));
        float _1305 = fma(_436, cbModelParam._m0[14u].z, fma(_435, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _434));
        float _1308 = fma(_436, cbModelParam._m0[15u].z, fma(_435, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _434));
        float _1334;
        if (_1302 > 0.0)
        {
            _1334 = abs((1.0 - _1291) / _1302);
        }
        else
        {
            float frontier_phi_27_25_ladder;
            if (_1302 < 0.0)
            {
                frontier_phi_27_25_ladder = abs((_1291 + 1.0) / _1302);
            }
            else
            {
                frontier_phi_27_25_ladder = 5000.0;
            }
            _1334 = frontier_phi_27_25_ladder;
        }
        float _1540;
        if (_1305 > 0.0)
        {
            _1540 = abs((1.0 - _1295) / _1305);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1295 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1540 = frontier_phi_36_32_ladder;
        }
        float _1729;
        if (_1308 > 0.0)
        {
            _1729 = abs((1.0 - _1299) / _1308);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1299 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _1729 = frontier_phi_48_43_ladder;
        }
        float _1731 = isnan(_1540) ? _1334 : (isnan(_1334) ? _1540 : min(_1334, _1540));
        float _1732 = isnan(_1729) ? _1731 : (isnan(_1731) ? _1729 : min(_1731, _1729));
        float _1736 = (_1732 * _1302) + _1291;
        float _1737 = (_1732 * _1305) + _1295;
        float _1738 = (_1732 * _1308) + _1299;
        float _1739 = _1732 * 9.9999997473787516355514526367188e-05;
        float _1741 = (-1.0) - _1739;
        float _1743 = _1739 + 1.0;
        float frontier_phi_26_48_ladder;
        float frontier_phi_26_48_ladder_1;
        float frontier_phi_26_48_ladder_2;
        if ((_1738 > _1743) || ((_1738 < _1741) || ((_1737 > _1743) || ((_1737 < _1741) || ((_1736 < _1741) || (_1736 > _1743))))))
        {
            frontier_phi_26_48_ladder = 0.0;
            frontier_phi_26_48_ladder_1 = 0.0;
            frontier_phi_26_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1835 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1738, cbModelParam._m0[9u].z, fma(_1737, cbModelParam._m0[9u].y, _1736 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1738, cbModelParam._m0[10u].z, fma(_1737, cbModelParam._m0[10u].y, _1736 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1738, cbModelParam._m0[11u].z, fma(_1737, cbModelParam._m0[11u].y, _1736 * cbModelParam._m0[11u].x))), _1242);
            frontier_phi_26_48_ladder = _1835.z * cbModelParam._m0[1u].y;
            frontier_phi_26_48_ladder_1 = _1835.y * cbModelParam._m0[1u].y;
            frontier_phi_26_48_ladder_2 = _1835.x * cbModelParam._m0[1u].y;
        }
        _1324 = frontier_phi_26_48_ladder_2;
        _1326 = frontier_phi_26_48_ladder_1;
        _1328 = frontier_phi_26_48_ladder;
    }
    else
    {
        vec4 _1312 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_434, _435, _436), _1242);
        _1324 = _1312.x * cbModelParam._m0[1u].y;
        _1326 = _1312.y * cbModelParam._m0[1u].y;
        _1328 = _1312.z * cbModelParam._m0[1u].y;
    }
    float _1331 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1424;
    float _1426;
    float _1428;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1388 = fma(_466, cbModelParam._m0[21u].z, fma(_462, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _458)) + cbModelParam._m0[21u].w;
        float _1392 = fma(_466, cbModelParam._m0[22u].z, fma(_462, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _458)) + cbModelParam._m0[22u].w;
        float _1396 = fma(_466, cbModelParam._m0[23u].z, fma(_462, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _458)) + cbModelParam._m0[23u].w;
        float _1399 = fma(_436, cbModelParam._m0[21u].z, fma(_435, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _434));
        float _1402 = fma(_436, cbModelParam._m0[22u].z, fma(_435, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _434));
        float _1405 = fma(_436, cbModelParam._m0[23u].z, fma(_435, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _434));
        float _1545;
        if (_1399 > 0.0)
        {
            _1545 = abs((1.0 - _1388) / _1399);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1388 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1545 = frontier_phi_38_34_ladder;
        }
        float _1756;
        if (_1402 > 0.0)
        {
            _1756 = abs((1.0 - _1392) / _1402);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1392 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1756 = frontier_phi_50_45_ladder;
        }
        float _1907;
        if (_1405 > 0.0)
        {
            _1907 = abs((1.0 - _1396) / _1405);
        }
        else
        {
            float frontier_phi_59_56_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_59_56_ladder = abs((_1396 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_59_56_ladder = 5000.0;
            }
            _1907 = frontier_phi_59_56_ladder;
        }
        float _1909 = isnan(_1756) ? _1545 : (isnan(_1545) ? _1756 : min(_1545, _1756));
        float _1910 = isnan(_1907) ? _1909 : (isnan(_1909) ? _1907 : min(_1909, _1907));
        float _1914 = (_1910 * _1399) + _1388;
        float _1915 = (_1910 * _1402) + _1392;
        float _1916 = (_1910 * _1405) + _1396;
        float _1917 = _1910 * 9.9999997473787516355514526367188e-05;
        float _1918 = (-1.0) - _1917;
        float _1920 = _1917 + 1.0;
        float frontier_phi_35_59_ladder;
        float frontier_phi_35_59_ladder_1;
        float frontier_phi_35_59_ladder_2;
        if ((_1916 > _1920) || ((_1916 < _1918) || ((_1915 > _1920) || ((_1915 < _1918) || ((_1914 < _1918) || (_1914 > _1920))))))
        {
            frontier_phi_35_59_ladder = 0.0;
            frontier_phi_35_59_ladder_1 = 0.0;
            frontier_phi_35_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2144 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1916, cbModelParam._m0[17u].z, fma(_1915, cbModelParam._m0[17u].y, _1914 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1916, cbModelParam._m0[18u].z, fma(_1915, cbModelParam._m0[18u].y, _1914 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1916, cbModelParam._m0[19u].z, fma(_1915, cbModelParam._m0[19u].y, _1914 * cbModelParam._m0[19u].x))), _1331);
            frontier_phi_35_59_ladder = _2144.z * cbModelParam._m0[1u].z;
            frontier_phi_35_59_ladder_1 = _2144.y * cbModelParam._m0[1u].z;
            frontier_phi_35_59_ladder_2 = _2144.x * cbModelParam._m0[1u].z;
        }
        _1424 = frontier_phi_35_59_ladder_2;
        _1426 = frontier_phi_35_59_ladder_1;
        _1428 = frontier_phi_35_59_ladder;
    }
    else
    {
        vec4 _1408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_434, _435, _436), _1331);
        _1424 = _1408.x * cbModelParam._m0[1u].z;
        _1426 = _1408.y * cbModelParam._m0[1u].z;
        _1428 = _1408.z * cbModelParam._m0[1u].z;
    }
    float _1440 = _425 * 0.01200000010430812835693359375;
    float _1442 = _1440 * ((cbModelParam._m0[1u].w * (_1424 - _1324)) + _1324);
    float _1443 = _1440 * ((cbModelParam._m0[1u].w * (_1426 - _1326)) + _1326);
    float _1444 = _1440 * ((cbModelParam._m0[1u].w * (_1428 - _1328)) + _1328);
    float _1447 = fma(_1444, cbSceneParam._m0[89u].z, fma(_1443, cbSceneParam._m0[89u].y, _1442 * cbSceneParam._m0[89u].x));
    float _1450 = fma(_1444, cbSceneParam._m0[90u].z, fma(_1443, cbSceneParam._m0[90u].y, _1442 * cbSceneParam._m0[90u].x));
    float _1453 = fma(_1444, cbSceneParam._m0[91u].z, fma(_1443, cbSceneParam._m0[91u].y, _1442 * cbSceneParam._m0[91u].x));
    uvec4 _1463 = floatBitsToUint(cbInstanceData._m0[_400 + 5u]);
    uint _1465 = _1463.x * 14u;
    uint _1466 = _1465 + 13u;
    float _1473 = _425 + (-1.0);
    float _1479 = (cbLight._m0[_1466].x * _1473) + 1.0;
    float _1480 = (cbLight._m0[_1466].y * _1473) + 1.0;
    float _1481 = (cbLight._m0[_1466].z * _1473) + 1.0;
    float _1482 = (cbLight._m0[_1466].w * _1473) + 1.0;
    uint _1483 = _1465 + 5u;
    float _1489 = isnan(1.0) ? _1480 : (isnan(_1480) ? 1.0 : min(_1480, 1.0));
    uint _1493 = _1465 + 4u;
    float _1499 = isnan(1.0) ? _1479 : (isnan(_1479) ? 1.0 : min(_1479, 1.0));
    uint _1503 = _1465 | 1u;
    float _1514 = dot(vec3(cbLight._m0[_1465].xyz), vec3(_272, _273, _274));
    float _1517 = dot(vec3(cbLight._m0[_1503].xyz), vec3(_272, _273, _274));
    float _3427 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
    float _3438 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
    float _1522 = (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * 0.3183098733425140380859375;
    float _1524 = (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * 0.3183098733425140380859375;
    float _1531 = ((cbLight._m0[_1483].x * _1489) * _1524) + ((cbLight._m0[_1493].x * _1499) * _1522);
    float _1532 = ((_1489 * cbLight._m0[_1483].y) * _1524) + ((_1499 * cbLight._m0[_1493].y) * _1522);
    float _1533 = ((_1489 * cbLight._m0[_1483].z) * _1524) + ((_1499 * cbLight._m0[_1493].z) * _1522);
    uvec4 _1537 = floatBitsToUint(cbLight._m0[_1465 + 12u]);
    bool _1539 = _1537.x == 0u;
    float _1550;
    float _1552;
    float _1554;
    if (_1539)
    {
        _1550 = _1531;
        _1552 = _1532;
        _1554 = _1533;
    }
    else
    {
        uint _1558 = _1465 + 6u;
        float _1574 = (dot(vec3(cbLight._m0[_1465 + 2u].xyz), vec3(_272, _273, _274)) * 0.5) + 0.5;
        float _1575 = _1574 * _1574;
        float _3449 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1577 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
        _1550 = (((cbLight._m0[_1558].x * 0.3183098733425140380859375) * _1576) * _1577) + _1531;
        _1552 = (((cbLight._m0[_1558].y * 0.3183098733425140380859375) * _1576) * _1577) + _1532;
        _1554 = (((cbLight._m0[_1558].z * 0.3183098733425140380859375) * _1576) * _1577) + _1533;
    }
    bool _1557 = _1537.y == 0u;
    float _1595;
    float _1597;
    float _1599;
    if (_1557)
    {
        _1595 = _1550;
        _1597 = _1552;
        _1599 = _1554;
    }
    else
    {
        uint _1700 = _1465 + 7u;
        float _1716 = (dot(vec3(cbLight._m0[_1465 + 3u].xyz), vec3(_272, _273, _274)) * 0.5) + 0.5;
        float _1717 = _1716 * _1716;
        float _3465 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1719 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
        _1595 = (((cbLight._m0[_1700].x * 0.3183098733425140380859375) * _1718) * _1719) + _1550;
        _1597 = (((cbLight._m0[_1700].y * 0.3183098733425140380859375) * _1718) * _1719) + _1552;
        _1599 = (((cbLight._m0[_1700].z * 0.3183098733425140380859375) * _1718) * _1719) + _1554;
    }
    uint _1601 = _1465 + 8u;
    float _1607 = cbLight._m0[_1465].x + _352;
    float _1608 = cbLight._m0[_1465].y + _353;
    float _1609 = cbLight._m0[_1465].z + _354;
    float _1613 = inversesqrt(dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609)));
    float _1617 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_1465].xyz));
    float _3481 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1620 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _1621 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _1622 = dot(vec3(cbLight._m0[_1465].xyz), vec3(_1607 * _1613, _1608 * _1613, _1609 * _1613));
    float _3503 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _1633 = (exp2(log2(1.0 - (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1639 = (0.5 / ((_1620 + 9.9999999392252902907785028219223e-09) + _1621)) * _1620;
    float _3514 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _1641 = (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * 0.31831014156341552734375;
    uint _1652 = _1465 + 9u;
    float _1658 = cbLight._m0[_1503].x + _352;
    float _1659 = cbLight._m0[_1503].y + _353;
    float _1660 = cbLight._m0[_1503].z + _354;
    float _1664 = inversesqrt(dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660)));
    float _1668 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_1503].xyz));
    float _3525 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1671 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _1672 = dot(vec3(cbLight._m0[_1503].xyz), vec3(_1658 * _1664, _1659 * _1664, _1660 * _1664));
    float _3536 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1681 = (exp2(log2(1.0 - (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1685 = (0.5 / ((_1671 + 9.9999999392252902907785028219223e-09) + _1621)) * _1671;
    float _3547 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1687 = (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * 0.31831014156341552734375;
    float _1697 = (((_1681 * cbLight._m0[_1652].x) * _1687) * _1489) + (((_1633 * cbLight._m0[_1601].x) * _1641) * _1499);
    float _1698 = (((_1681 * cbLight._m0[_1652].y) * _1687) * _1489) + (((_1633 * cbLight._m0[_1601].y) * _1641) * _1499);
    float _1699 = (((_1681 * cbLight._m0[_1652].z) * _1687) * _1489) + (((_1633 * cbLight._m0[_1601].z) * _1641) * _1499);
    float _1761;
    float _1763;
    float _1765;
    if (_1539)
    {
        _1761 = _1697;
        _1763 = _1698;
        _1765 = _1699;
    }
    else
    {
        uint _1767 = _1465 + 10u;
        uint _1773 = _1465 + 2u;
        float _1779 = cbLight._m0[_1773].x + _352;
        float _1780 = cbLight._m0[_1773].y + _353;
        float _1781 = cbLight._m0[_1773].z + _354;
        float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
        float _1789 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_1773].xyz));
        float _3558 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1792 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1793 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1779 * _1785, _1780 * _1785, _1781 * _1785));
        float _3569 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = (exp2(log2(1.0 - (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1806 = (0.5 / ((_1792 + 9.9999999392252902907785028219223e-09) + _1621)) * _1792;
        float _3580 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1808 = (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * 0.31831014156341552734375;
        float _1809 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
        _1761 = (((_1802 * cbLight._m0[_1767].x) * _1808) * _1809) + _1697;
        _1763 = (((_1802 * cbLight._m0[_1767].y) * _1808) * _1809) + _1698;
        _1765 = (((_1802 * cbLight._m0[_1767].z) * _1808) * _1809) + _1699;
    }
    float _1844;
    float _1846;
    float _1848;
    if (_1557)
    {
        _1844 = _1761;
        _1846 = _1763;
        _1848 = _1765;
    }
    else
    {
        uint _1855 = _1465 + 11u;
        uint _1861 = _1465 + 3u;
        float _1867 = cbLight._m0[_1861].x + _352;
        float _1868 = cbLight._m0[_1861].y + _353;
        float _1869 = cbLight._m0[_1861].z + _354;
        float _1873 = inversesqrt(dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869)));
        float _1877 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_1861].xyz));
        float _3596 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1880 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1881 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_1867 * _1873, _1868 * _1873, _1869 * _1873));
        float _3607 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1890 = (exp2(log2(1.0 - (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1894 = (0.5 / ((_1880 + 9.9999999392252902907785028219223e-09) + _1621)) * _1880;
        float _3618 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1896 = (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * 0.31831014156341552734375;
        float _1897 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
        _1844 = (((_1890 * cbLight._m0[_1855].x) * _1896) * _1897) + _1761;
        _1846 = (((_1890 * cbLight._m0[_1855].y) * _1896) * _1897) + _1763;
        _1848 = (((_1890 * cbLight._m0[_1855].z) * _1896) * _1897) + _1765;
    }
    float _2032;
    float _2034;
    float _2036;
    float _2038;
    float _2040;
    float _2042;
    if (_1463.y == 0u)
    {
        float _1972 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1972;
        float _1974 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1972;
        float _1975 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1972;
        uvec4 _1987 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1988 = _1987.x;
        uint _1999 = uint((float(_1987.y) * floor(float(uint(cbSceneParam._m0[85u].y * _361) / _1988))) + floor(float(uint(cbSceneParam._m0[85u].x * _360) / _1988)));
        float _2009 = (log2(_1975 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2010 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        uint _2013 = uint(isnan(14.0) ? _2010 : (isnan(_2010) ? 14.0 : min(_2010, 14.0)));
        uvec4 _2018 = texelFetch(g_lightClusterGridBuffer, int(((_2013 << 2u) + (_1999 << 6u)) >> 2u));
        uint _2019 = _2018.x;
        uint _2020 = _1987.z;
        float _2149;
        float _2151;
        float _2153;
        float _2155;
        float _2157;
        float _2159;
        if (((((1u << ((_2020 >> 4u) & 15u)) + 4294967295u) & _2019) == 0u) || ((_2020 & 240u) == 0u))
        {
            _2149 = 0.0;
            _2151 = 0.0;
            _2153 = 0.0;
            _2155 = 0.0;
            _2157 = 0.0;
            _2159 = 0.0;
        }
        else
        {
            float _2150;
            float _2152;
            float _2154;
            float _2156;
            float _2158;
            float _2160;
            float _2300 = 0.0;
            float _2301 = 0.0;
            float _2302 = 0.0;
            float _2303 = 0.0;
            float _2304 = 0.0;
            float _2305 = 0.0;
            uint _2306 = 0u;
            uint _2315;
            bool _2316;
            for (;;)
            {
                _2315 = texelFetch(g_lightClassification, int((((_2013 << 5u) + (_1999 << 9u)) + (_2306 << 2u)) >> 2u)).x;
                _2316 = _2315 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2316)
                {
                    frontier_phi_74_pred = _2305;
                    frontier_phi_74_pred_1 = _2304;
                    frontier_phi_74_pred_2 = _2303;
                    frontier_phi_74_pred_3 = _2302;
                    frontier_phi_74_pred_4 = _2301;
                    frontier_phi_74_pred_5 = _2300;
                }
                else
                {
                    float _2424;
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    uint _2430;
                    _2424 = _2300;
                    _2425 = _2301;
                    _2426 = _2302;
                    _2427 = _2303;
                    _2428 = _2304;
                    _2429 = _2305;
                    _2430 = _2315;
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    float _2360;
                    float _2361;
                    for (;;)
                    {
                        uint _2434 = uint(findLSB(_2430)) + (_2306 << 5u);
                        uint _2431 = (_2430 + 4294967295u) & _2430;
                        uint _2436 = _2434 * 48u;
                        vec4 _2450 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2436)).x, texelFetch(g_PointLightRenderingBuffer, int(_2436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2436 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2436 + 3u)).x));
                        uint _2456 = (_2434 * 48u) + 4u;
                        vec4 _2469 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2456)).x, texelFetch(g_PointLightRenderingBuffer, int(_2456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2456 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2456 + 3u)).x));
                        uint _2475 = (_2434 * 48u) + 8u;
                        vec3 _2486 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2475)).x, texelFetch(g_PointLightRenderingBuffer, int(_2475 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2475 + 2u)).x));
                        float _2490 = _2450.x - _1973;
                        float _2491 = _2450.y - _1974;
                        float _2492 = _2450.z - _1975;
                        float _2493 = dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492));
                        float _2496 = inversesqrt(_2493);
                        float _2505 = 1.0 - (_2493 * _2450.w);
                        float _3644 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
                        float _2506 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
                        float _2507 = sqrt(_2493) * _2469.w;
                        float _2510 = 1.39999997615814208984375 / (_2507 + 1.39999997615814208984375);
                        float _2511 = _2510 * _2510;
                        float _2514 = ((1.0 - _2511) * dot(vec3(_381, _384, _387), vec3(_2496 * _2490, _2496 * _2491, _2496 * _2492))) + _2511;
                        float _2517 = _2507 * _2507;
                        float _2521 = ((isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0))) * _2506) / ((_2517 * 0.699999988079071044921875) + 1.0);
                        float _2525 = (-0.0) - _1973;
                        float _2526 = (-0.0) - _1974;
                        float _2527 = (-0.0) - _1975;
                        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
                        float _2535 = dot(vec3(_381, _384, _387), vec3(_2531 * _2525, _2531 * _2526, _2531 * _2527));
                        float _3660 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
                        float _3671 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
                        float _2539 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
                        float _2543 = (0.5 / (((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) + 9.9999999392252902907785028219223e-09) + _2539)) * _2539;
                        float _3682 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
                        float _2552 = (((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 3.1415927410125732421875) / ((_2517 * 2.1991131305694580078125) + 3.141590118408203125)) * _2506;
                        _2359 = (_2521 * _2469.x) + _2427;
                        _2360 = (_2521 * _2469.y) + _2428;
                        _2361 = (_2521 * _2469.z) + _2429;
                        _2356 = (_2552 * _2486.x) + _2424;
                        _2357 = (_2552 * _2486.y) + _2425;
                        _2358 = (_2552 * _2486.z) + _2426;
                        if (_2431 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2424 = _2356;
                            _2425 = _2357;
                            _2426 = _2358;
                            _2427 = _2359;
                            _2428 = _2360;
                            _2429 = _2361;
                            _2430 = _2431;
                        }
                    }
                    frontier_phi_74_pred = _2361;
                    frontier_phi_74_pred_1 = _2360;
                    frontier_phi_74_pred_2 = _2359;
                    frontier_phi_74_pred_3 = _2358;
                    frontier_phi_74_pred_4 = _2357;
                    frontier_phi_74_pred_5 = _2356;
                }
                _2160 = frontier_phi_74_pred;
                _2158 = frontier_phi_74_pred_1;
                _2156 = frontier_phi_74_pred_2;
                _2154 = frontier_phi_74_pred_3;
                _2152 = frontier_phi_74_pred_4;
                _2150 = frontier_phi_74_pred_5;
                uint _2307 = _2306 + 1u;
                if (_2307 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2300 = _2150;
                    _2301 = _2152;
                    _2302 = _2154;
                    _2303 = _2156;
                    _2304 = _2158;
                    _2305 = _2160;
                    _2306 = _2307;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2149 = _2150;
            _2151 = _2152;
            _2153 = _2154;
            _2155 = _2156;
            _2157 = _2158;
            _2159 = _2160;
        }
        uvec4 _2163 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2164 = _2163.z;
        uint _2166 = (_2164 >> 8u) & 15u;
        float _2271;
        float _2273;
        float _2275;
        float _2277;
        float _2279;
        float _2281;
        if (((4294967295u << _2166) & _2019) == 0u)
        {
            _2271 = _2149;
            _2273 = _2151;
            _2275 = _2153;
            _2277 = _2155;
            _2279 = _2157;
            _2281 = _2159;
        }
        else
        {
            float _2296 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2166 < ((_2164 >> 12u) & 15u))
            {
                float _2272;
                float _2274;
                float _2276;
                float _2278;
                float _2280;
                float _2282;
                float _2407 = _2149;
                float _2408 = _2151;
                float _2409 = _2153;
                float _2410 = _2155;
                float _2411 = _2157;
                float _2412 = _2159;
                uint _2413 = _2166;
                uint _2422;
                bool _2423;
                for (;;)
                {
                    _2422 = texelFetch(g_lightClassification, int((((_2013 << 5u) + (_1999 << 9u)) + (_2413 << 2u)) >> 2u)).x;
                    _2423 = _2422 == 0u;
                    float frontier_phi_80_pred;
                    float frontier_phi_80_pred_1;
                    float frontier_phi_80_pred_2;
                    float frontier_phi_80_pred_3;
                    float frontier_phi_80_pred_4;
                    float frontier_phi_80_pred_5;
                    if (_2423)
                    {
                        frontier_phi_80_pred = _2412;
                        frontier_phi_80_pred_1 = _2411;
                        frontier_phi_80_pred_2 = _2410;
                        frontier_phi_80_pred_3 = _2409;
                        frontier_phi_80_pred_4 = _2408;
                        frontier_phi_80_pred_5 = _2407;
                    }
                    else
                    {
                        float _2557;
                        float _2558;
                        float _2559;
                        float _2560;
                        float _2561;
                        float _2562;
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2570 = _2407;
                        float _2571 = _2408;
                        float _2572 = _2409;
                        float _2573 = _2410;
                        float _2574 = _2411;
                        float _2575 = _2412;
                        uint _2576 = _2422;
                        uint _2577;
                        vec4 _2602;
                        float _2603;
                        vec4 _2618;
                        vec3 _2630;
                        vec4 _2646;
                        vec4 _2662;
                        float _2709;
                        bool _2710;
                        for (;;)
                        {
                            uint _2587 = ((_2413 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2576));
                            _2577 = (_2576 + 4294967295u) & _2576;
                            uint _2589 = _2587 * 40u;
                            _2602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 3u)).x));
                            _2603 = _2602.w;
                            uint _2605 = (_2587 * 40u) + 4u;
                            _2618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 3u)).x));
                            uint _2620 = (_2587 * 40u) + 8u;
                            _2630 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 2u)).x));
                            uint _2633 = (_2587 * 40u) + 16u;
                            _2646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2633 + 3u)).x));
                            uint _2649 = (_2587 * 40u) + 20u;
                            _2662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 3u)).x));
                            uint _2665 = (_2587 * 40u) + 24u;
                            vec4 _2678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 3u)).x));
                            uint _2684 = (_2587 * 40u) + 28u;
                            vec4 _2697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 3u)).x));
                            _2709 = fma(_1975, _2697.z, fma(_1974, _2697.y, _2697.x * _1973)) + _2697.w;
                            _2710 = !((fma(_1975, _2678.z, fma(_1974, _2678.y, _2678.x * _1973)) + _2678.w) <= 0.0);
                            float frontier_phi_86_pred;
                            float frontier_phi_86_pred_1;
                            float frontier_phi_86_pred_2;
                            float frontier_phi_86_pred_3;
                            float frontier_phi_86_pred_4;
                            float frontier_phi_86_pred_5;
                            if (_2710)
                            {
                                float _2737 = _2602.x - _1973;
                                float _2738 = _2602.y - _1974;
                                float _2739 = _2602.z - _1975;
                                float _2740 = dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739));
                                float _2743 = inversesqrt(_2740);
                                float _2744 = _2743 * _2737;
                                float _2745 = _2743 * _2738;
                                float _2746 = _2743 * _2739;
                                float _2750 = 1.0 - (_2740 / (_2603 * _2603));
                                float _3693 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                                float _2751 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
                                float _2755 = sqrt(_2740) * _2618.w;
                                float _2757 = 1.39999997615814208984375 / (_2755 + 1.39999997615814208984375);
                                float _2758 = _2757 * _2757;
                                float _2759 = 1.0 - _2758;
                                float _2761 = (_2759 * dot(vec3(_2744, _2745, _2746), vec3(_381, _384, _387))) + _2758;
                                float _2764 = _2755 * _2755;
                                float _2768 = (fma(_1975, _2646.z, fma(_1974, _2646.y, _2646.x * _1973)) + _2646.w) / _2709;
                                float _2769 = (fma(_1975, _2662.z, fma(_1974, _2662.y, _2662.x * _1973)) + _2662.w) / _2709;
                                float _2773 = 1.0 - dot(vec2(_2768, _2769), vec2(_2768, _2769));
                                float _3709 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                                float _2774 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
                                float _2775 = _2774 * (((isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0))) * _2751) / ((_2764 * 0.699999988079071044921875) + 1.0));
                                float _2785 = dot(vec3(_381, _384, _387), vec3((-0.0) - (_1973 * _2296), (-0.0) - (_1974 * _2296), (-0.0) - (_1975 * _2296)));
                                float _3720 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                                float _2793 = (_2759 * dot(vec3(_381, _384, _387), vec3(_2744, _2745, _2746))) + _2758;
                                float _3731 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                                float _2794 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
                                float _2798 = (0.5 / (((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) + 9.9999999392252902907785028219223e-09) + _2794)) * _2794;
                                float _3742 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                                float _2805 = (_2774 * _2751) * (((isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * 3.1415927410125732421875) / ((_2764 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_86_pred = _2775 * _2618.y;
                                frontier_phi_86_pred_1 = _2775 * _2618.x;
                                frontier_phi_86_pred_2 = _2805 * _2630.z;
                                frontier_phi_86_pred_3 = _2805 * _2630.y;
                                frontier_phi_86_pred_4 = _2805 * _2630.x;
                                frontier_phi_86_pred_5 = _2775 * _2618.z;
                            }
                            else
                            {
                                frontier_phi_86_pred = 0.0;
                                frontier_phi_86_pred_1 = 0.0;
                                frontier_phi_86_pred_2 = 0.0;
                                frontier_phi_86_pred_3 = 0.0;
                                frontier_phi_86_pred_4 = 0.0;
                                frontier_phi_86_pred_5 = 0.0;
                            }
                            _2813 = frontier_phi_86_pred;
                            _2812 = frontier_phi_86_pred_1;
                            _2811 = frontier_phi_86_pred_2;
                            _2810 = frontier_phi_86_pred_3;
                            _2809 = frontier_phi_86_pred_4;
                            _2814 = frontier_phi_86_pred_5;
                            _2560 = _2812 + _2573;
                            _2561 = _2813 + _2574;
                            _2562 = _2814 + _2575;
                            _2557 = _2809 + _2570;
                            _2558 = _2810 + _2571;
                            _2559 = _2811 + _2572;
                            if (_2577 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2570 = _2557;
                                _2571 = _2558;
                                _2572 = _2559;
                                _2573 = _2560;
                                _2574 = _2561;
                                _2575 = _2562;
                                _2576 = _2577;
                                continue;
                            }
                        }
                        frontier_phi_80_pred = _2562;
                        frontier_phi_80_pred_1 = _2561;
                        frontier_phi_80_pred_2 = _2560;
                        frontier_phi_80_pred_3 = _2559;
                        frontier_phi_80_pred_4 = _2558;
                        frontier_phi_80_pred_5 = _2557;
                    }
                    _2282 = frontier_phi_80_pred;
                    _2280 = frontier_phi_80_pred_1;
                    _2278 = frontier_phi_80_pred_2;
                    _2276 = frontier_phi_80_pred_3;
                    _2274 = frontier_phi_80_pred_4;
                    _2272 = frontier_phi_80_pred_5;
                    uint _2414 = _2413 + 1u;
                    if (_2414 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2407 = _2272;
                        _2408 = _2274;
                        _2409 = _2276;
                        _2410 = _2278;
                        _2411 = _2280;
                        _2412 = _2282;
                        _2413 = _2414;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2282;
                frontier_phi_68_69_ladder_1 = _2280;
                frontier_phi_68_69_ladder_2 = _2276;
                frontier_phi_68_69_ladder_3 = _2274;
                frontier_phi_68_69_ladder_4 = _2272;
                frontier_phi_68_69_ladder_5 = _2278;
            }
            else
            {
                frontier_phi_68_69_ladder = _2159;
                frontier_phi_68_69_ladder_1 = _2157;
                frontier_phi_68_69_ladder_2 = _2153;
                frontier_phi_68_69_ladder_3 = _2151;
                frontier_phi_68_69_ladder_4 = _2149;
                frontier_phi_68_69_ladder_5 = _2155;
            }
            _2271 = frontier_phi_68_69_ladder_4;
            _2273 = frontier_phi_68_69_ladder_3;
            _2275 = frontier_phi_68_69_ladder_2;
            _2277 = frontier_phi_68_69_ladder_5;
            _2279 = frontier_phi_68_69_ladder_1;
            _2281 = frontier_phi_68_69_ladder;
        }
        float _2286 = isnan(1.0) ? _425 : (isnan(_425) ? 1.0 : min(_425, 1.0));
        _2032 = (_2286 * _2277) + _1595;
        _2034 = (_2286 * _2279) + _1597;
        _2036 = (_2286 * _2281) + _1599;
        _2038 = ((_2271 * 0.039999999105930328369140625) * _2286) + _1844;
        _2040 = ((_2273 * 0.039999999105930328369140625) * _2286) + _1846;
        _2042 = ((_2275 * 0.039999999105930328369140625) * _2286) + _1848;
    }
    else
    {
        _2032 = _1595;
        _2034 = _1597;
        _2036 = _1599;
        _2038 = _1844;
        _2040 = _1846;
        _2042 = _1848;
    }
    uint _2048 = _401 + uint(cbMatDynParam._m0[0u].w);
    float _2054 = (cbSceneParam._m0[72u].y * _256) * cbInstanceData._m0[_2048].x;
    float _2055 = (cbSceneParam._m0[72u].y * _258) * cbInstanceData._m0[_2048].y;
    float _2056 = (cbSceneParam._m0[72u].y * _259) * cbInstanceData._m0[_2048].z;
    float _3758 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3769 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _3780 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _2073 = (((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_2032 + ((isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))) * _425))) + ((_2038 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _1233)) * cbPerFrame._m0[3u].x)) + _2054;
    float _2075 = (_2055 + ((_2040 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _1233)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_2034 + ((isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0))) * _425)));
    float _2077 = (_2056 + ((_2042 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _1233)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_2036 + ((isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))) * _425)));
    float _3806 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2090 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    uint _2091 = _400 + 6u;
    float _2099 = _360 / cbSceneParam._m0[86u].x;
    float _2100 = _361 / cbSceneParam._m0[86u].y;
    vec4 _2114 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2099, _2100, (log2((isnan(cbSceneParam._m0[77u].w) ? _293 : (isnan(_293) ? cbSceneParam._m0[77u].w : min(_293, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2116 = _2114.x;
    float _2117 = _2114.y;
    float _2118 = _2114.z;
    float _2119 = _2114.w;
    float _2212;
    float _2214;
    float _2216;
    float _2218;
    if (_293 > cbSceneParam._m0[78u].w)
    {
        float _2174 = isnan(_293) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _293 : min(cbSceneParam._m0[80u].w, _293));
        float _2175 = _2174 / _293;
        float _2186 = _2175 * _345;
        float _2187 = _346 * _2175;
        float _2188 = (-0.0) - _2187;
        float _2190 = _2175 * _347;
        float _2192 = (cbSceneParam._m0[77u].w * _2188) / _2174;
        float _2193 = _2192 + cbSceneParam._m0[79u].w;
        float _2194 = cbSceneParam._m0[79u].w - _2187;
        float _2200 = sqrt(((_2186 * _2186) + (_2187 * _2187)) + (_2190 * _2190));
        float _2203 = (1.0 - (cbSceneParam._m0[77u].w / _2174)) * _2200;
        float _2208 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2210 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2369;
        if (abs((_2188 - _2192) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2369 = ((((_2193 > 0.0) ? exp2(_2208 * _2193) : (2.0 - exp2(_2210 * _2193))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2203;
        }
        else
        {
            float _2329 = 1.0 / cbSceneParam._m0[80u].x;
            float _2330 = isnan(_2194) ? _2193 : (isnan(_2193) ? _2194 : max(_2193, _2194));
            float _2331 = isnan(_2194) ? _2193 : (isnan(_2193) ? _2194 : min(_2193, _2194));
            float _2340 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : min(_2330, 0.0));
            float _2341 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : min(_2331, 0.0));
            _2369 = ((abs(_2200 / _2188) * cbSceneParam._m0[80u].y) * ((((_2340 - _2341) * 2.0) - ((exp2(_2208 * (isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0)))) - exp2(_2208 * (isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0))))) * _2329)) - ((exp2(_2210 * _2340) - exp2(_2210 * _2341)) * _2329))) + (_2203 * cbSceneParam._m0[80u].z);
        }
        vec4 _2371 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2099, _2100, 1.0), 0.0);
        float _2380 = exp2((_2369 * (-1.44269502162933349609375)) * (1.0 - _2371.w));
        float _2381 = log2(_2380);
        float _2397 = log2(_2119);
        _2212 = (exp2(_2397 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2381 * cbSceneParam._m0[78u].x)) * _2371.x) / cbSceneParam._m0[78u].x)) + _2116;
        _2214 = (exp2(_2397 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2381 * cbSceneParam._m0[78u].y)) * _2371.y) / cbSceneParam._m0[78u].y)) + _2117;
        _2216 = (exp2(_2397 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2381 * cbSceneParam._m0[78u].z)) * _2371.z) / cbSceneParam._m0[78u].z)) + _2118;
        _2218 = _2380 * _2119;
    }
    else
    {
        _2212 = _2116;
        _2214 = _2117;
        _2216 = _2118;
        _2218 = _2119;
    }
    float _2229 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2230 = _2229 == 3.0;
    float _2232 = log2(_2218);
    float _2236 = exp2(_2232 * cbSceneParam._m0[78u].x);
    float _2237 = exp2(_2232 * cbSceneParam._m0[78u].y);
    float _2238 = exp2(_2232 * cbSceneParam._m0[78u].z);
    float _2239 = _2236 * (isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0)));
    float _2240 = _2237 * (isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0)));
    float _2241 = _2238 * (isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0)));
    float _2250 = (_2229 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2250 * (_2230 ? _2239 : (_2239 + (cbSceneParam._m0[72u].w * _2212)));
    SV_Target.y = _2250 * (_2230 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2214)));
    SV_Target.z = _2250 * (_2230 ? _2241 : (_2241 + (cbSceneParam._m0[72u].w * _2216)));
    SV_Target.w = cbInstanceData._m0[_2091].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2054) * _2090) * _2236) * _2250;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2055) * _2090) * _2237) * _2250;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2056) * _2090) * _2238) * _2250;
    SV_Target_1.w = cbInstanceData._m0[_2091].w;
}


