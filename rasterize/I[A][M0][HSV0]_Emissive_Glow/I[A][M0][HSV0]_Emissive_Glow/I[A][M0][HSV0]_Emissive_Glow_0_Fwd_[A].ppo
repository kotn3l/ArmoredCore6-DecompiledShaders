#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _768;
float _2979;
float _2980;
float _2981;
float _2982;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    vec4 _186 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[9u].x;
    float _193 = _186.y * cbMtdParam._m0[9u].y;
    float _194 = _186.z * cbMtdParam._m0[9u].z;
    vec4 _206 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _228 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _229 = _228 * _164;
    float _230 = _228 * _165;
    float _231 = _228 * _166;
    float _2991 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _3002 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _3013 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _251 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _292 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _302 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _292);
    float _303 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _292);
    float _304 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _292);
    float _308 = inversesqrt(dot(vec3(_302, _303, _304), vec3(_302, _303, _304)));
    float _309 = _302 * _308;
    float _310 = _303 * _308;
    float _311 = _304 * _308;
    vec4 _316 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _318 = _316.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _447 = sqrt(((_302 * _302) + (_303 * _303)) + (_304 * _304));
        float _453 = (cbMatDynParam._m0[5u].x * _447) + cbMatDynParam._m0[5u].y;
        float _3024 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
        float _454 = isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0));
        float _458 = (cbMatDynParam._m0[5u].z * _447) + cbMatDynParam._m0[5u].w;
        float _3035 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0))) - _454)) + _454) < ((_318 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _330 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _331 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _351 = fma(_231, cbSceneParam._m0[5u].z, fma(_230, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _229));
    float _354 = fma(_231, cbSceneParam._m0[6u].z, fma(_230, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _229));
    float _357 = fma(_231, cbSceneParam._m0[7u].z, fma(_230, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _229));
    uint _370 = uint(roundEven(NORMAL.w)) * 13u;
    uint _371 = _370 + 9u;
    uint _372 = _371 + uint(cbMatDynParam._m0[0u].w);
    float _378 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0)))) * cbInstanceData._m0[_372].x;
    float _379 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0)))) * cbInstanceData._m0[_372].y;
    float _380 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0)))) * cbInstanceData._m0[_372].z;
    float _3046 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0));
    float _3057 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0));
    float _3068 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _383 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
    vec4 _392 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _330, cbSceneParam._m0[86u].y * _331));
    float _395 = _392.x * TEXCOORD.z;
    float _396 = dot(vec3(_229, _230, _231), vec3(_309, _310, _311));
    float _399 = _396 * 2.0;
    float _404 = (_399 * _229) - _309;
    float _405 = (_399 * _230) - _310;
    float _406 = (_399 * _231) - _311;
    float _428 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _432 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _436 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _767;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _492 = fma(_436, cbModelParam._m0[26u].z, fma(_432, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _428));
        float _496 = fma(_436, cbModelParam._m0[27u].z, fma(_432, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _428));
        float _500 = fma(_436, cbModelParam._m0[28u].z, fma(_432, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _428));
        float _525 = _428 + _229;
        float _526 = _432 + _230;
        float _527 = _436 + _231;
        float _537 = fma(_527, cbModelParam._m0[26u].z, fma(_526, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _525)) - _492;
        float _538 = fma(_527, cbModelParam._m0[27u].z, fma(_526, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _525)) - _496;
        float _539 = fma(_527, cbModelParam._m0[28u].z, fma(_526, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _525)) - _500;
        float _543 = inversesqrt(dot(vec3(_537, _538, _539), vec3(_537, _538, _539)));
        float _556 = ((_543 * _537) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_492 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _557 = ((_543 * _538) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_496 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _558 = ((_543 * _539) / cbModelParam._m0[34u].z) + ((((((_500 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _561 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_556, _557, _558), 0.0);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_556, _557, _558), 0.0);
        vec4 _575 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_556, _557, _558), 0.0);
        vec4 _582 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_556, _557, _558), 0.0);
        float _595 = exp2((_561.w + (-0.5)) * 20.0) * 2.0;
        float _596 = _595 * (_561.x + (-0.5));
        float _597 = _595 * (_561.y + (-0.5));
        float _598 = _595 * (_561.z + (-0.5));
        float _605 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _606 = _605 * (_568.x + (-0.5));
        float _607 = _605 * (_568.y + (-0.5));
        float _608 = _605 * (_568.z + (-0.5));
        float _615 = exp2((_575.w + (-0.5)) * 20.0) * 2.0;
        float _616 = _615 * (_575.x + (-0.5));
        float _617 = _615 * (_575.y + (-0.5));
        float _618 = _615 * (_575.z + (-0.5));
        float _625 = exp2((_582.w + (-0.5)) * 20.0) * 2.0;
        float _626 = _625 * (_582.x + (-0.5));
        float _627 = _625 * (_582.y + (-0.5));
        float _628 = _625 * (_582.z + (-0.5));
        float _629 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _630 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _631 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _632 = _596 * 0.5;
        float _633 = _606 * 0.5;
        float _634 = _616 * 0.5;
        float _635 = dot(vec3(_632, _633, _634), vec3(_632, _633, _634));
        float _640 = (_635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_635);
        float _649 = (dot(vec3(_229, _230, _231), vec3(_640 * _632, _640 * _633, _640 * _634)) + 1.0) * 0.5;
        float _3094 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _659 = sqrt(((_633 * _633) + (_632 * _632)) + (_634 * _634)) / (_629 + 9.9999997473787516355514526367188e-06);
        float _3105 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
        float _661 = _660 * 2.0;
        float _665 = (1.0 - _660) / (_660 + 1.0);
        float _3116 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _666 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _675 = ((((1.0 - _666) * (_661 + 2.0)) * exp2(log2(isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0))) * (_661 + 1.0))) + _666) * _629;
        float _676 = _597 * 0.5;
        float _677 = _607 * 0.5;
        float _678 = _617 * 0.5;
        float _679 = dot(vec3(_676, _677, _678), vec3(_676, _677, _678));
        float _684 = (_679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_679);
        float _692 = (dot(vec3(_229, _230, _231), vec3(_684 * _676, _684 * _677, _684 * _678)) + 1.0) * 0.5;
        float _3127 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _701 = sqrt(((_677 * _677) + (_676 * _676)) + (_678 * _678)) / (_630 + 9.9999997473787516355514526367188e-06);
        float _3138 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _703 = _702 * 2.0;
        float _707 = (1.0 - _702) / (_702 + 1.0);
        float _3149 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _708 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _717 = ((((1.0 - _708) * (_703 + 2.0)) * exp2(log2(isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0))) * (_703 + 1.0))) + _708) * _630;
        float _718 = _598 * 0.5;
        float _719 = _608 * 0.5;
        float _720 = _618 * 0.5;
        float _721 = dot(vec3(_718, _719, _720), vec3(_718, _719, _720));
        float _726 = (_721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_721);
        float _734 = (dot(vec3(_229, _230, _231), vec3(_726 * _718, _726 * _719, _726 * _720)) + 1.0) * 0.5;
        float _3160 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _743 = sqrt(((_719 * _719) + (_718 * _718)) + (_720 * _720)) / (_631 + 9.9999997473787516355514526367188e-06);
        float _3171 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0));
        float _745 = _744 * 2.0;
        float _749 = (1.0 - _744) / (_744 + 1.0);
        float _3182 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
        float _759 = ((((1.0 - _750) * (_745 + 2.0)) * exp2(log2(isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0))) * (_745 + 1.0))) + _750) * _631;
        _767 = _598;
        _769 = _597;
        _770 = _596;
        _771 = _608;
        _772 = _607;
        _773 = _606;
        _774 = _618;
        _775 = _617;
        _776 = _616;
        _777 = _631;
        _778 = _630;
        _779 = _629;
        _780 = cbModelParam._m0[36u].z * (isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0)));
        _781 = cbModelParam._m0[36u].z * (isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0)));
        _782 = cbModelParam._m0[36u].z * (isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0)));
    }
    else
    {
        _767 = _768;
        _769 = _768;
        _770 = _768;
        _771 = _768;
        _772 = _768;
        _773 = _768;
        _774 = _768;
        _775 = _768;
        _776 = _768;
        _777 = _768;
        _778 = _768;
        _779 = _768;
        _780 = 0.0;
        _781 = 0.0;
        _782 = 0.0;
    }
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _811 = fma(_436, cbModelParam._m0[30u].z, fma(_432, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _428));
        float _815 = fma(_436, cbModelParam._m0[31u].z, fma(_432, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _428));
        float _819 = fma(_436, cbModelParam._m0[32u].z, fma(_432, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _428));
        float _842 = _428 + _229;
        float _843 = _432 + _230;
        float _844 = _436 + _231;
        float _854 = fma(_844, cbModelParam._m0[30u].z, fma(_843, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842)) - _811;
        float _855 = fma(_844, cbModelParam._m0[31u].z, fma(_843, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842)) - _815;
        float _856 = fma(_844, cbModelParam._m0[32u].z, fma(_843, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842)) - _819;
        float _860 = inversesqrt(dot(vec3(_854, _855, _856), vec3(_854, _855, _856)));
        float _873 = ((_860 * _854) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_811 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_860 * _855) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_815 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_860 * _856) / cbModelParam._m0[35u].z) + ((((((_819 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        float _910 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_877.x + (-0.5));
        float _912 = _910 * (_877.y + (-0.5));
        float _913 = _910 * (_877.z + (-0.5));
        float _920 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_884.x + (-0.5));
        float _922 = _920 * (_884.y + (-0.5));
        float _923 = _920 * (_884.z + (-0.5));
        float _930 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_891.x + (-0.5));
        float _932 = _930 * (_891.y + (-0.5));
        float _933 = _930 * (_891.z + (-0.5));
        float _940 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_898.x + (-0.5));
        float _942 = _940 * (_898.y + (-0.5));
        float _943 = _940 * (_898.z + (-0.5));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = _911 * 0.5;
        float _948 = _921 * 0.5;
        float _949 = _931 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(_229, _230, _231), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3223 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3234 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3245 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))) * (_974 + 1.0))) + _979) * _944;
        float _989 = _912 * 0.5;
        float _990 = _922 * 0.5;
        float _991 = _932 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_229, _230, _231), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3256 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3267 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3278 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))) * (_1016 + 1.0))) + _1021) * _945;
        float _1031 = _913 * 0.5;
        float _1032 = _923 * 0.5;
        float _1033 = _933 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_229, _230, _231), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3289 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3300 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3311 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0))) * (_1058 + 1.0))) + _1063) * _946;
        _1080 = _913;
        _1081 = _912;
        _1082 = _911;
        _1083 = _923;
        _1084 = _922;
        _1085 = _921;
        _1086 = _933;
        _1087 = _932;
        _1088 = _931;
        _1089 = _946;
        _1090 = _945;
        _1091 = _944;
        _1092 = cbModelParam._m0[36u].w * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
        _1093 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
        _1094 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
    }
    else
    {
        _1080 = _768;
        _1081 = _768;
        _1082 = _768;
        _1083 = _768;
        _1084 = _768;
        _1085 = _768;
        _1086 = _768;
        _1087 = _768;
        _1088 = _768;
        _1089 = _768;
        _1090 = _768;
        _1091 = _768;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1104 = (cbModelParam._m0[1u].x * (_1092 - _780)) + _780;
    float _1105 = (cbModelParam._m0[1u].x * (_1093 - _781)) + _781;
    float _1106 = (cbModelParam._m0[1u].x * (_1094 - _782)) + _782;
    float _1127 = fma(_1106, cbSceneParam._m0[89u].z, fma(_1105, cbSceneParam._m0[89u].y, _1104 * cbSceneParam._m0[89u].x));
    float _1130 = fma(_1106, cbSceneParam._m0[90u].z, fma(_1105, cbSceneParam._m0[90u].y, _1104 * cbSceneParam._m0[90u].x));
    float _1133 = fma(_1106, cbSceneParam._m0[91u].z, fma(_1105, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1104));
    float _1148 = _404 * 0.5;
    float _1149 = _405 * 0.5;
    float _1150 = _406 * 0.5;
    float _1151 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_1082, _1085, _1088, _1091));
    float _1154 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_1081, _1084, _1087, _1090));
    float _1157 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_1080, _1083, _1086, _1089));
    float _1191;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1164 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_767, _771, _774, _777));
        float _1168 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_769, _772, _775, _778));
        float _1172 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_770, _773, _776, _779));
        float _1179 = dot(vec4(cbModelParam._m0[39u]), vec4(_1148, _1149, _1150, 1.0));
        _1191 = dot(vec3(isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)), isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)), isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1179) ? 0.0 : (isnan(0.0) ? _1179 : max(0.0, _1179))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1191 = 1.0;
    }
    float _1202;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1193 = dot(vec4(cbModelParam._m0[40u]), vec4(_1148, _1149, _1150, 1.0));
        _1202 = dot(vec3(isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)), isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)), isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1193) ? 0.0 : (isnan(0.0) ? _1193 : max(0.0, _1193))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1202 = 1.0;
    }
    float _1206 = (_1202 * cbModelParam._m0[1u].x) + (_1191 * (1.0 - cbModelParam._m0[1u].x));
    float _1215 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1297;
    float _1299;
    float _1301;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1264 = fma(_436, cbModelParam._m0[13u].z, fma(_432, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _428)) + cbModelParam._m0[13u].w;
        float _1268 = fma(_436, cbModelParam._m0[14u].z, fma(_432, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _428)) + cbModelParam._m0[14u].w;
        float _1272 = fma(_436, cbModelParam._m0[15u].z, fma(_432, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _428)) + cbModelParam._m0[15u].w;
        float _1275 = fma(_406, cbModelParam._m0[13u].z, fma(_405, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _404));
        float _1278 = fma(_406, cbModelParam._m0[14u].z, fma(_405, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _404));
        float _1281 = fma(_406, cbModelParam._m0[15u].z, fma(_405, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _404));
        float _1307;
        if (_1275 > 0.0)
        {
            _1307 = abs((1.0 - _1264) / _1275);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1275 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1264 + 1.0) / _1275);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1307 = frontier_phi_17_15_ladder;
        }
        float _1515;
        if (_1278 > 0.0)
        {
            _1515 = abs((1.0 - _1268) / _1278);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1278 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1268 + 1.0) / _1278);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1515 = frontier_phi_26_22_ladder;
        }
        float _1704;
        if (_1281 > 0.0)
        {
            _1704 = abs((1.0 - _1272) / _1281);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1281 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1272 + 1.0) / _1281);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1704 = frontier_phi_38_33_ladder;
        }
        float _1706 = isnan(_1515) ? _1307 : (isnan(_1307) ? _1515 : min(_1307, _1515));
        float _1707 = isnan(_1704) ? _1706 : (isnan(_1706) ? _1704 : min(_1706, _1704));
        float _1711 = (_1707 * _1275) + _1264;
        float _1712 = (_1707 * _1278) + _1268;
        float _1713 = (_1707 * _1281) + _1272;
        float _1714 = _1707 * 9.9999997473787516355514526367188e-05;
        float _1716 = (-1.0) - _1714;
        float _1718 = _1714 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1713 > _1718) || ((_1713 < _1716) || ((_1712 > _1718) || ((_1712 < _1716) || ((_1711 < _1716) || (_1711 > _1718))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1810 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1713, cbModelParam._m0[9u].z, fma(_1712, cbModelParam._m0[9u].y, _1711 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1713, cbModelParam._m0[10u].z, fma(_1712, cbModelParam._m0[10u].y, _1711 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1713, cbModelParam._m0[11u].z, fma(_1712, cbModelParam._m0[11u].y, _1711 * cbModelParam._m0[11u].x))), _1215);
            frontier_phi_16_38_ladder = _1810.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1810.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1810.x * cbModelParam._m0[1u].y;
        }
        _1297 = frontier_phi_16_38_ladder_2;
        _1299 = frontier_phi_16_38_ladder_1;
        _1301 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1285 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_404, _405, _406), _1215);
        _1297 = _1285.x * cbModelParam._m0[1u].y;
        _1299 = _1285.y * cbModelParam._m0[1u].y;
        _1301 = _1285.z * cbModelParam._m0[1u].y;
    }
    float _1304 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1397;
    float _1399;
    float _1401;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1361 = fma(_436, cbModelParam._m0[21u].z, fma(_432, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _428)) + cbModelParam._m0[21u].w;
        float _1365 = fma(_436, cbModelParam._m0[22u].z, fma(_432, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _428)) + cbModelParam._m0[22u].w;
        float _1369 = fma(_436, cbModelParam._m0[23u].z, fma(_432, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _428)) + cbModelParam._m0[23u].w;
        float _1372 = fma(_406, cbModelParam._m0[21u].z, fma(_405, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _404));
        float _1375 = fma(_406, cbModelParam._m0[22u].z, fma(_405, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _404));
        float _1378 = fma(_406, cbModelParam._m0[23u].z, fma(_405, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _404));
        float _1520;
        if (_1372 > 0.0)
        {
            _1520 = abs((1.0 - _1361) / _1372);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1361 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1520 = frontier_phi_28_24_ladder;
        }
        float _1731;
        if (_1375 > 0.0)
        {
            _1731 = abs((1.0 - _1365) / _1375);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1365 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1731 = frontier_phi_40_35_ladder;
        }
        float _1882;
        if (_1378 > 0.0)
        {
            _1882 = abs((1.0 - _1369) / _1378);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1369 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1882 = frontier_phi_49_46_ladder;
        }
        float _1884 = isnan(_1731) ? _1520 : (isnan(_1520) ? _1731 : min(_1520, _1731));
        float _1885 = isnan(_1882) ? _1884 : (isnan(_1884) ? _1882 : min(_1884, _1882));
        float _1889 = (_1885 * _1372) + _1361;
        float _1890 = (_1885 * _1375) + _1365;
        float _1891 = (_1885 * _1378) + _1369;
        float _1892 = _1885 * 9.9999997473787516355514526367188e-05;
        float _1893 = (-1.0) - _1892;
        float _1895 = _1892 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1891 > _1895) || ((_1891 < _1893) || ((_1890 > _1895) || ((_1890 < _1893) || ((_1889 < _1893) || (_1889 > _1895))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2128 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1891, cbModelParam._m0[17u].z, fma(_1890, cbModelParam._m0[17u].y, _1889 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1891, cbModelParam._m0[18u].z, fma(_1890, cbModelParam._m0[18u].y, _1889 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1891, cbModelParam._m0[19u].z, fma(_1890, cbModelParam._m0[19u].y, _1889 * cbModelParam._m0[19u].x))), _1304);
            frontier_phi_25_49_ladder = _2128.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2128.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2128.x * cbModelParam._m0[1u].z;
        }
        _1397 = frontier_phi_25_49_ladder_2;
        _1399 = frontier_phi_25_49_ladder_1;
        _1401 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1381 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_404, _405, _406), _1304);
        _1397 = _1381.x * cbModelParam._m0[1u].z;
        _1399 = _1381.y * cbModelParam._m0[1u].z;
        _1401 = _1381.z * cbModelParam._m0[1u].z;
    }
    float _1413 = _395 * 0.01200000010430812835693359375;
    float _1415 = _1413 * ((cbModelParam._m0[1u].w * (_1397 - _1297)) + _1297);
    float _1416 = _1413 * ((cbModelParam._m0[1u].w * (_1399 - _1299)) + _1299);
    float _1417 = _1413 * ((cbModelParam._m0[1u].w * (_1401 - _1301)) + _1301);
    float _1420 = fma(_1417, cbSceneParam._m0[89u].z, fma(_1416, cbSceneParam._m0[89u].y, _1415 * cbSceneParam._m0[89u].x));
    float _1423 = fma(_1417, cbSceneParam._m0[90u].z, fma(_1416, cbSceneParam._m0[90u].y, _1415 * cbSceneParam._m0[90u].x));
    float _1426 = fma(_1417, cbSceneParam._m0[91u].z, fma(_1416, cbSceneParam._m0[91u].y, _1415 * cbSceneParam._m0[91u].x));
    uvec4 _1436 = floatBitsToUint(cbInstanceData._m0[_370 + 5u]);
    uint _1438 = _1436.x * 14u;
    uint _1439 = _1438 + 13u;
    float _1446 = _395 + (-1.0);
    float _1452 = (cbLight._m0[_1439].x * _1446) + 1.0;
    float _1453 = (cbLight._m0[_1439].y * _1446) + 1.0;
    float _1454 = (cbLight._m0[_1439].z * _1446) + 1.0;
    float _1455 = (cbLight._m0[_1439].w * _1446) + 1.0;
    uint _1456 = _1438 + 5u;
    float _1462 = isnan(1.0) ? _1453 : (isnan(_1453) ? 1.0 : min(_1453, 1.0));
    uint _1466 = _1438 + 4u;
    float _1473 = isnan(1.0) ? _1452 : (isnan(_1452) ? 1.0 : min(_1452, 1.0));
    uint _1477 = _1438 | 1u;
    float _1488 = dot(vec3(cbLight._m0[_1438].xyz), vec3(_229, _230, _231));
    float _1491 = dot(vec3(cbLight._m0[_1477].xyz), vec3(_229, _230, _231));
    float _3447 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
    float _3458 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
    float _1496 = (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * 0.3183098733425140380859375;
    float _1498 = (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * 0.3183098733425140380859375;
    float _1505 = ((cbLight._m0[_1456].x * _1462) * _1498) + ((cbLight._m0[_1466].x * _1473) * _1496);
    float _1506 = ((_1462 * cbLight._m0[_1456].y) * _1498) + ((_1473 * cbLight._m0[_1466].y) * _1496);
    float _1507 = ((_1462 * cbLight._m0[_1456].z) * _1498) + ((_1473 * cbLight._m0[_1466].z) * _1496);
    uvec4 _1512 = floatBitsToUint(cbLight._m0[_1438 + 12u]);
    bool _1514 = _1512.x == 0u;
    float _1525;
    float _1527;
    float _1529;
    if (_1514)
    {
        _1525 = _1505;
        _1527 = _1506;
        _1529 = _1507;
    }
    else
    {
        uint _1533 = _1438 + 6u;
        float _1549 = (dot(vec3(cbLight._m0[_1438 + 2u].xyz), vec3(_229, _230, _231)) * 0.5) + 0.5;
        float _1550 = _1549 * _1549;
        float _3469 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1552 = isnan(1.0) ? _1454 : (isnan(_1454) ? 1.0 : min(_1454, 1.0));
        _1525 = (((cbLight._m0[_1533].x * 0.3183098733425140380859375) * _1551) * _1552) + _1505;
        _1527 = (((cbLight._m0[_1533].y * 0.3183098733425140380859375) * _1551) * _1552) + _1506;
        _1529 = (((cbLight._m0[_1533].z * 0.3183098733425140380859375) * _1551) * _1552) + _1507;
    }
    bool _1532 = _1512.y == 0u;
    float _1570;
    float _1572;
    float _1574;
    if (_1532)
    {
        _1570 = _1525;
        _1572 = _1527;
        _1574 = _1529;
    }
    else
    {
        uint _1675 = _1438 + 7u;
        float _1691 = (dot(vec3(cbLight._m0[_1438 + 3u].xyz), vec3(_229, _230, _231)) * 0.5) + 0.5;
        float _1692 = _1691 * _1691;
        float _3485 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1694 = isnan(1.0) ? _1455 : (isnan(_1455) ? 1.0 : min(_1455, 1.0));
        _1570 = (((cbLight._m0[_1675].x * 0.3183098733425140380859375) * _1693) * _1694) + _1525;
        _1572 = (((cbLight._m0[_1675].y * 0.3183098733425140380859375) * _1693) * _1694) + _1527;
        _1574 = (((cbLight._m0[_1675].z * 0.3183098733425140380859375) * _1693) * _1694) + _1529;
    }
    uint _1576 = _1438 + 8u;
    float _1582 = cbLight._m0[_1438].x + _309;
    float _1583 = cbLight._m0[_1438].y + _310;
    float _1584 = cbLight._m0[_1438].z + _311;
    float _1588 = inversesqrt(dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584)));
    float _1592 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_1438].xyz));
    float _3501 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _1595 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _3512 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _1596 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _1597 = dot(vec3(cbLight._m0[_1438].xyz), vec3(_1582 * _1588, _1583 * _1588, _1584 * _1588));
    float _3523 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
    float _1608 = (exp2(log2(1.0 - (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1614 = (0.5 / ((_1595 + 9.9999999392252902907785028219223e-09) + _1596)) * _1595;
    float _3534 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1616 = (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * 0.31831014156341552734375;
    uint _1627 = _1438 + 9u;
    float _1633 = cbLight._m0[_1477].x + _309;
    float _1634 = cbLight._m0[_1477].y + _310;
    float _1635 = cbLight._m0[_1477].z + _311;
    float _1639 = inversesqrt(dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635)));
    float _1643 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_1477].xyz));
    float _3545 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1646 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _1647 = dot(vec3(cbLight._m0[_1477].xyz), vec3(_1633 * _1639, _1634 * _1639, _1635 * _1639));
    float _3556 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _1656 = (exp2(log2(1.0 - (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1660 = (0.5 / ((_1646 + 9.9999999392252902907785028219223e-09) + _1596)) * _1646;
    float _3567 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1662 = (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * 0.31831014156341552734375;
    float _1672 = (((_1656 * cbLight._m0[_1627].x) * _1662) * _1462) + (((_1608 * cbLight._m0[_1576].x) * _1616) * _1473);
    float _1673 = (((_1656 * cbLight._m0[_1627].y) * _1662) * _1462) + (((_1608 * cbLight._m0[_1576].y) * _1616) * _1473);
    float _1674 = (((_1656 * cbLight._m0[_1627].z) * _1662) * _1462) + (((_1608 * cbLight._m0[_1576].z) * _1616) * _1473);
    float _1736;
    float _1738;
    float _1740;
    if (_1514)
    {
        _1736 = _1672;
        _1738 = _1673;
        _1740 = _1674;
    }
    else
    {
        uint _1742 = _1438 + 10u;
        uint _1748 = _1438 + 2u;
        float _1754 = cbLight._m0[_1748].x + _309;
        float _1755 = cbLight._m0[_1748].y + _310;
        float _1756 = cbLight._m0[_1748].z + _311;
        float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
        float _1764 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_1748].xyz));
        float _3578 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1767 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1768 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_1754 * _1760, _1755 * _1760, _1756 * _1760));
        float _3589 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = (exp2(log2(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1781 = (0.5 / ((_1767 + 9.9999999392252902907785028219223e-09) + _1596)) * _1767;
        float _3600 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1783 = (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 0.31831014156341552734375;
        float _1784 = isnan(1.0) ? _1454 : (isnan(_1454) ? 1.0 : min(_1454, 1.0));
        _1736 = (((_1777 * cbLight._m0[_1742].x) * _1783) * _1784) + _1672;
        _1738 = (((_1777 * cbLight._m0[_1742].y) * _1783) * _1784) + _1673;
        _1740 = (((_1777 * cbLight._m0[_1742].z) * _1783) * _1784) + _1674;
    }
    float _1819;
    float _1821;
    float _1823;
    if (_1532)
    {
        _1819 = _1736;
        _1821 = _1738;
        _1823 = _1740;
    }
    else
    {
        uint _1830 = _1438 + 11u;
        uint _1836 = _1438 + 3u;
        float _1842 = cbLight._m0[_1836].x + _309;
        float _1843 = cbLight._m0[_1836].y + _310;
        float _1844 = cbLight._m0[_1836].z + _311;
        float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
        float _1852 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_1836].xyz));
        float _3616 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1855 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1856 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_1842 * _1848, _1843 * _1848, _1844 * _1848));
        float _3627 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1865 = (exp2(log2(1.0 - (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1869 = (0.5 / ((_1855 + 9.9999999392252902907785028219223e-09) + _1596)) * _1855;
        float _3638 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1871 = (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.31831014156341552734375;
        float _1872 = isnan(1.0) ? _1455 : (isnan(_1455) ? 1.0 : min(_1455, 1.0));
        _1819 = (((_1865 * cbLight._m0[_1830].x) * _1871) * _1872) + _1736;
        _1821 = (((_1865 * cbLight._m0[_1830].y) * _1871) * _1872) + _1738;
        _1823 = (((_1865 * cbLight._m0[_1830].z) * _1871) * _1872) + _1740;
    }
    float _2007;
    float _2009;
    float _2011;
    float _2013;
    float _2015;
    float _2017;
    if (_1436.y == 0u)
    {
        float _1947 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1948 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1947;
        float _1949 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1947;
        float _1950 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1947;
        uvec4 _1962 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1963 = _1962.x;
        uint _1974 = uint((float(_1962.y) * floor(float(uint(cbSceneParam._m0[85u].y * _331) / _1963))) + floor(float(uint(cbSceneParam._m0[85u].x * _330) / _1963)));
        float _1984 = (log2(_1950 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1985 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        uint _1988 = uint(isnan(14.0) ? _1985 : (isnan(_1985) ? 14.0 : min(_1985, 14.0)));
        uvec4 _1993 = texelFetch(g_lightClusterGridBuffer, int(((_1988 << 2u) + (_1974 << 6u)) >> 2u));
        uint _1994 = _1993.x;
        uint _1995 = _1962.z;
        float _2133;
        float _2135;
        float _2137;
        float _2139;
        float _2141;
        float _2143;
        if (((((1u << ((_1995 >> 4u) & 15u)) + 4294967295u) & _1994) == 0u) || ((_1995 & 240u) == 0u))
        {
            _2133 = 0.0;
            _2135 = 0.0;
            _2137 = 0.0;
            _2139 = 0.0;
            _2141 = 0.0;
            _2143 = 0.0;
        }
        else
        {
            float _2134;
            float _2136;
            float _2138;
            float _2140;
            float _2142;
            float _2144;
            float _2293 = 0.0;
            float _2294 = 0.0;
            float _2295 = 0.0;
            float _2296 = 0.0;
            float _2297 = 0.0;
            float _2298 = 0.0;
            uint _2299 = 0u;
            uint _2308;
            bool _2309;
            for (;;)
            {
                _2308 = texelFetch(g_lightClassification, int((((_1988 << 5u) + (_1974 << 9u)) + (_2299 << 2u)) >> 2u)).x;
                _2309 = _2308 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2309)
                {
                    frontier_phi_66_pred = _2293;
                    frontier_phi_66_pred_1 = _2298;
                    frontier_phi_66_pred_2 = _2297;
                    frontier_phi_66_pred_3 = _2296;
                    frontier_phi_66_pred_4 = _2295;
                    frontier_phi_66_pred_5 = _2294;
                }
                else
                {
                    float _2438;
                    float _2439;
                    float _2440;
                    float _2441;
                    float _2442;
                    float _2443;
                    uint _2444;
                    _2438 = _2293;
                    _2439 = _2294;
                    _2440 = _2295;
                    _2441 = _2296;
                    _2442 = _2297;
                    _2443 = _2298;
                    _2444 = _2308;
                    float _2365;
                    float _2366;
                    float _2367;
                    float _2368;
                    float _2369;
                    float _2370;
                    for (;;)
                    {
                        uint _2448 = uint(findLSB(_2444)) + (_2299 << 5u);
                        uint _2445 = (_2444 + 4294967295u) & _2444;
                        uint _2450 = _2448 * 48u;
                        vec4 _2464 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2450)).x, texelFetch(g_PointLightRenderingBuffer, int(_2450 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2450 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2450 + 3u)).x));
                        uint _2470 = (_2448 * 48u) + 4u;
                        vec4 _2483 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2470)).x, texelFetch(g_PointLightRenderingBuffer, int(_2470 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2470 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2470 + 3u)).x));
                        uint _2489 = (_2448 * 48u) + 8u;
                        vec3 _2500 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2489)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 2u)).x));
                        float _2504 = _2464.x - _1948;
                        float _2505 = _2464.y - _1949;
                        float _2506 = _2464.z - _1950;
                        float _2507 = dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506));
                        float _2510 = inversesqrt(_2507);
                        float _2519 = 1.0 - (_2507 * _2464.w);
                        float _3664 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
                        float _2520 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
                        float _2521 = sqrt(_2507) * _2483.w;
                        float _2524 = 1.39999997615814208984375 / (_2521 + 1.39999997615814208984375);
                        float _2525 = _2524 * _2524;
                        float _2528 = ((1.0 - _2525) * dot(vec3(_351, _354, _357), vec3(_2510 * _2504, _2510 * _2505, _2510 * _2506))) + _2525;
                        float _2531 = _2521 * _2521;
                        float _2535 = ((isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0))) * _2520) / ((_2531 * 0.699999988079071044921875) + 1.0);
                        float _2539 = (-0.0) - _1948;
                        float _2540 = (-0.0) - _1949;
                        float _2541 = (-0.0) - _1950;
                        float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
                        float _2549 = dot(vec3(_351, _354, _357), vec3(_2545 * _2539, _2545 * _2540, _2545 * _2541));
                        float _3680 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
                        float _3691 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
                        float _2553 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
                        float _2557 = (0.5 / (((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) + 9.9999999392252902907785028219223e-09) + _2553)) * _2553;
                        float _3702 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
                        float _2566 = (((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 3.1415927410125732421875) / ((_2531 * 2.1991131305694580078125) + 3.141590118408203125)) * _2520;
                        _2368 = (_2535 * _2483.x) + _2441;
                        _2369 = (_2535 * _2483.y) + _2442;
                        _2370 = (_2535 * _2483.z) + _2443;
                        _2365 = (_2566 * _2500.x) + _2438;
                        _2366 = (_2566 * _2500.y) + _2439;
                        _2367 = (_2566 * _2500.z) + _2440;
                        if (_2445 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2438 = _2365;
                            _2439 = _2366;
                            _2440 = _2367;
                            _2441 = _2368;
                            _2442 = _2369;
                            _2443 = _2370;
                            _2444 = _2445;
                        }
                    }
                    frontier_phi_66_pred = _2365;
                    frontier_phi_66_pred_1 = _2370;
                    frontier_phi_66_pred_2 = _2369;
                    frontier_phi_66_pred_3 = _2368;
                    frontier_phi_66_pred_4 = _2367;
                    frontier_phi_66_pred_5 = _2366;
                }
                _2134 = frontier_phi_66_pred;
                _2144 = frontier_phi_66_pred_1;
                _2142 = frontier_phi_66_pred_2;
                _2140 = frontier_phi_66_pred_3;
                _2138 = frontier_phi_66_pred_4;
                _2136 = frontier_phi_66_pred_5;
                uint _2300 = _2299 + 1u;
                if (_2300 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2293 = _2134;
                    _2294 = _2136;
                    _2295 = _2138;
                    _2296 = _2140;
                    _2297 = _2142;
                    _2298 = _2144;
                    _2299 = _2300;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2133 = _2134;
            _2135 = _2136;
            _2137 = _2138;
            _2139 = _2140;
            _2141 = _2142;
            _2143 = _2144;
        }
        uvec4 _2147 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2148 = _2147.z;
        uint _2150 = (_2148 >> 8u) & 15u;
        float _2264;
        float _2266;
        float _2268;
        float _2270;
        float _2272;
        float _2274;
        if (((4294967295u << _2150) & _1994) == 0u)
        {
            _2264 = _2133;
            _2266 = _2135;
            _2268 = _2137;
            _2270 = _2139;
            _2272 = _2141;
            _2274 = _2143;
        }
        else
        {
            float _2289 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2150 < ((_2148 >> 12u) & 15u))
            {
                float _2265;
                float _2267;
                float _2269;
                float _2271;
                float _2273;
                float _2275;
                float _2421 = _2133;
                float _2422 = _2135;
                float _2423 = _2137;
                float _2424 = _2139;
                float _2425 = _2141;
                float _2426 = _2143;
                uint _2427 = _2150;
                uint _2436;
                bool _2437;
                for (;;)
                {
                    _2436 = texelFetch(g_lightClassification, int((((_1988 << 5u) + (_1974 << 9u)) + (_2427 << 2u)) >> 2u)).x;
                    _2437 = _2436 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2437)
                    {
                        frontier_phi_77_pred = _2426;
                        frontier_phi_77_pred_1 = _2425;
                        frontier_phi_77_pred_2 = _2424;
                        frontier_phi_77_pred_3 = _2423;
                        frontier_phi_77_pred_4 = _2422;
                        frontier_phi_77_pred_5 = _2421;
                    }
                    else
                    {
                        float _2580;
                        float _2581;
                        float _2582;
                        float _2583;
                        float _2584;
                        float _2585;
                        float _2832;
                        float _2833;
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2593 = _2421;
                        float _2594 = _2422;
                        float _2595 = _2423;
                        float _2596 = _2424;
                        float _2597 = _2425;
                        float _2598 = _2426;
                        uint _2599 = _2436;
                        uint _2600;
                        vec4 _2625;
                        float _2626;
                        vec4 _2641;
                        vec3 _2653;
                        vec4 _2669;
                        vec4 _2685;
                        float _2732;
                        bool _2733;
                        for (;;)
                        {
                            uint _2610 = ((_2427 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2599));
                            _2600 = (_2599 + 4294967295u) & _2599;
                            uint _2612 = _2610 * 40u;
                            _2625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 3u)).x));
                            _2626 = _2625.w;
                            uint _2628 = (_2610 * 40u) + 4u;
                            _2641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 3u)).x));
                            uint _2643 = (_2610 * 40u) + 8u;
                            _2653 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 2u)).x));
                            uint _2656 = (_2610 * 40u) + 16u;
                            _2669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 3u)).x));
                            uint _2672 = (_2610 * 40u) + 20u;
                            _2685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 3u)).x));
                            uint _2688 = (_2610 * 40u) + 24u;
                            vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 3u)).x));
                            uint _2707 = (_2610 * 40u) + 28u;
                            vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2707 + 3u)).x));
                            _2732 = fma(_1950, _2720.z, fma(_1949, _2720.y, _2720.x * _1948)) + _2720.w;
                            _2733 = !((fma(_1950, _2701.z, fma(_1949, _2701.y, _2701.x * _1948)) + _2701.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2733)
                            {
                                float _2760 = _2625.x - _1948;
                                float _2761 = _2625.y - _1949;
                                float _2762 = _2625.z - _1950;
                                float _2763 = dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762));
                                float _2766 = inversesqrt(_2763);
                                float _2767 = _2766 * _2760;
                                float _2768 = _2766 * _2761;
                                float _2769 = _2766 * _2762;
                                float _2773 = 1.0 - (_2763 / (_2626 * _2626));
                                float _3713 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                                float _2774 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
                                float _2778 = sqrt(_2763) * _2641.w;
                                float _2780 = 1.39999997615814208984375 / (_2778 + 1.39999997615814208984375);
                                float _2781 = _2780 * _2780;
                                float _2782 = 1.0 - _2781;
                                float _2784 = (_2782 * dot(vec3(_2767, _2768, _2769), vec3(_351, _354, _357))) + _2781;
                                float _2787 = _2778 * _2778;
                                float _2791 = (fma(_1950, _2669.z, fma(_1949, _2669.y, _2669.x * _1948)) + _2669.w) / _2732;
                                float _2792 = (fma(_1950, _2685.z, fma(_1949, _2685.y, _2685.x * _1948)) + _2685.w) / _2732;
                                float _2796 = 1.0 - dot(vec2(_2791, _2792), vec2(_2791, _2792));
                                float _3729 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                                float _2797 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                                float _2798 = _2797 * (((isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0))) * _2774) / ((_2787 * 0.699999988079071044921875) + 1.0));
                                float _2808 = dot(vec3(_351, _354, _357), vec3((-0.0) - (_1948 * _2289), (-0.0) - (_1949 * _2289), (-0.0) - (_1950 * _2289)));
                                float _3740 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                                float _2816 = (_2782 * dot(vec3(_351, _354, _357), vec3(_2767, _2768, _2769))) + _2781;
                                float _3751 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                                float _2817 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
                                float _2821 = (0.5 / (((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) + 9.9999999392252902907785028219223e-09) + _2817)) * _2817;
                                float _3762 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                                float _2828 = (_2797 * _2774) * (((isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * 3.1415927410125732421875) / ((_2787 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2798 * _2641.y;
                                frontier_phi_83_pred_1 = _2798 * _2641.x;
                                frontier_phi_83_pred_2 = _2828 * _2653.z;
                                frontier_phi_83_pred_3 = _2828 * _2653.y;
                                frontier_phi_83_pred_4 = _2828 * _2653.x;
                                frontier_phi_83_pred_5 = _2798 * _2641.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2836 = frontier_phi_83_pred;
                            _2835 = frontier_phi_83_pred_1;
                            _2834 = frontier_phi_83_pred_2;
                            _2833 = frontier_phi_83_pred_3;
                            _2832 = frontier_phi_83_pred_4;
                            _2837 = frontier_phi_83_pred_5;
                            _2583 = _2835 + _2596;
                            _2584 = _2836 + _2597;
                            _2585 = _2837 + _2598;
                            _2580 = _2832 + _2593;
                            _2581 = _2833 + _2594;
                            _2582 = _2834 + _2595;
                            if (_2600 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2593 = _2580;
                                _2594 = _2581;
                                _2595 = _2582;
                                _2596 = _2583;
                                _2597 = _2584;
                                _2598 = _2585;
                                _2599 = _2600;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2585;
                        frontier_phi_77_pred_1 = _2584;
                        frontier_phi_77_pred_2 = _2583;
                        frontier_phi_77_pred_3 = _2582;
                        frontier_phi_77_pred_4 = _2581;
                        frontier_phi_77_pred_5 = _2580;
                    }
                    _2275 = frontier_phi_77_pred;
                    _2273 = frontier_phi_77_pred_1;
                    _2271 = frontier_phi_77_pred_2;
                    _2269 = frontier_phi_77_pred_3;
                    _2267 = frontier_phi_77_pred_4;
                    _2265 = frontier_phi_77_pred_5;
                    uint _2428 = _2427 + 1u;
                    if (_2428 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2421 = _2265;
                        _2422 = _2267;
                        _2423 = _2269;
                        _2424 = _2271;
                        _2425 = _2273;
                        _2426 = _2275;
                        _2427 = _2428;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2269;
                frontier_phi_58_59_ladder_1 = _2275;
                frontier_phi_58_59_ladder_2 = _2273;
                frontier_phi_58_59_ladder_3 = _2271;
                frontier_phi_58_59_ladder_4 = _2267;
                frontier_phi_58_59_ladder_5 = _2265;
            }
            else
            {
                frontier_phi_58_59_ladder = _2137;
                frontier_phi_58_59_ladder_1 = _2143;
                frontier_phi_58_59_ladder_2 = _2141;
                frontier_phi_58_59_ladder_3 = _2139;
                frontier_phi_58_59_ladder_4 = _2135;
                frontier_phi_58_59_ladder_5 = _2133;
            }
            _2264 = frontier_phi_58_59_ladder_5;
            _2266 = frontier_phi_58_59_ladder_4;
            _2268 = frontier_phi_58_59_ladder;
            _2270 = frontier_phi_58_59_ladder_3;
            _2272 = frontier_phi_58_59_ladder_2;
            _2274 = frontier_phi_58_59_ladder_1;
        }
        float _2279 = isnan(1.0) ? _395 : (isnan(_395) ? 1.0 : min(_395, 1.0));
        _2007 = (_2279 * _2270) + _1570;
        _2009 = (_2279 * _2272) + _1572;
        _2011 = (_2279 * _2274) + _1574;
        _2013 = ((_2264 * 0.039999999105930328369140625) * _2279) + _1819;
        _2015 = ((_2266 * 0.039999999105930328369140625) * _2279) + _1821;
        _2017 = ((_2268 * 0.039999999105930328369140625) * _2279) + _1823;
    }
    else
    {
        _2007 = _1570;
        _2009 = _1572;
        _2011 = _1574;
        _2013 = _1819;
        _2015 = _1821;
        _2017 = _1823;
    }
    uint _2023 = _371 + uint(cbMatDynParam._m0[0u].w);
    float _2032 = (((cbMtdParam._m0[11u].x * _206.x) * cbMtdParam._m0[10u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2023].x;
    float _2036 = (((cbMtdParam._m0[11u].x * _206.y) * cbMtdParam._m0[10u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2023].y;
    float _2040 = (((cbMtdParam._m0[11u].x * _206.z) * cbMtdParam._m0[10u].z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2023].z;
    float _3778 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3789 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3800 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _2057 = (((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_2007 + ((isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0))) * _395))) + ((_2013 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _1206)) * cbPerFrame._m0[3u].x)) + _2032;
    float _2059 = (_2036 + ((_2015 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _1206)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_2009 + ((isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))) * _395)));
    float _2061 = (_2040 + ((_2017 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _1206)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_2011 + ((isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0))) * _395)));
    float _2062 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2063 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2064 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2070 = cbMtdParam._m0[2u].x * _2032;
    float _2071 = cbMtdParam._m0[2u].y * _2036;
    float _2072 = cbMtdParam._m0[2u].z * _2040;
    float _3826 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2074 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    uint _2075 = _370 + 6u;
    float _2083 = _330 / cbSceneParam._m0[86u].x;
    float _2084 = _331 / cbSceneParam._m0[86u].y;
    vec4 _2098 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2083, _2084, (log2((isnan(cbSceneParam._m0[77u].w) ? _251 : (isnan(_251) ? cbSceneParam._m0[77u].w : min(_251, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2100 = _2098.x;
    float _2101 = _2098.y;
    float _2102 = _2098.z;
    float _2103 = _2098.w;
    float _2196;
    float _2198;
    float _2200;
    float _2202;
    if (_251 > cbSceneParam._m0[78u].w)
    {
        float _2158 = isnan(_251) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _251 : min(cbSceneParam._m0[80u].w, _251));
        float _2159 = _2158 / _251;
        float _2170 = _2159 * _302;
        float _2171 = _303 * _2159;
        float _2172 = (-0.0) - _2171;
        float _2174 = _2159 * _304;
        float _2176 = (cbSceneParam._m0[77u].w * _2172) / _2158;
        float _2177 = _2176 + cbSceneParam._m0[79u].w;
        float _2178 = cbSceneParam._m0[79u].w - _2171;
        float _2184 = sqrt(((_2170 * _2170) + (_2171 * _2171)) + (_2174 * _2174));
        float _2187 = (1.0 - (cbSceneParam._m0[77u].w / _2158)) * _2184;
        float _2192 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2194 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2378;
        if (abs((_2172 - _2176) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2378 = ((((_2177 > 0.0) ? exp2(_2192 * _2177) : (2.0 - exp2(_2194 * _2177))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2187;
        }
        else
        {
            float _2322 = 1.0 / cbSceneParam._m0[80u].x;
            float _2323 = isnan(_2178) ? _2177 : (isnan(_2177) ? _2178 : max(_2177, _2178));
            float _2324 = isnan(_2178) ? _2177 : (isnan(_2177) ? _2178 : min(_2177, _2178));
            float _2333 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : min(_2323, 0.0));
            float _2334 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : min(_2324, 0.0));
            _2378 = ((abs(_2184 / _2172) * cbSceneParam._m0[80u].y) * ((((_2333 - _2334) * 2.0) - ((exp2(_2192 * (isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0)))) - exp2(_2192 * (isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0))))) * _2322)) - ((exp2(_2194 * _2333) - exp2(_2194 * _2334)) * _2322))) + (_2187 * cbSceneParam._m0[80u].z);
        }
        vec4 _2380 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2083, _2084, 1.0), 0.0);
        float _2389 = exp2((_2378 * (-1.44269502162933349609375)) * (1.0 - _2380.w));
        float _2390 = log2(_2389);
        float _2406 = log2(_2103);
        _2196 = (exp2(_2406 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2390 * cbSceneParam._m0[78u].x)) * _2380.x) / cbSceneParam._m0[78u].x)) + _2100;
        _2198 = (exp2(_2406 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2390 * cbSceneParam._m0[78u].y)) * _2380.y) / cbSceneParam._m0[78u].y)) + _2101;
        _2200 = (exp2(_2406 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2390 * cbSceneParam._m0[78u].z)) * _2380.z) / cbSceneParam._m0[78u].z)) + _2102;
        _2202 = _2389 * _2103;
    }
    else
    {
        _2196 = _2100;
        _2198 = _2101;
        _2200 = _2102;
        _2202 = _2103;
    }
    bool _2416;
    vec4 _2211;
    vec4 _2234;
    float _2236;
    float _2240;
    float _2241;
    float _2242;
    float _2245;
    float _2248;
    float _2251;
    float _2252;
    bool _2263;
    for (;;)
    {
        _2211 = cbMatDynParam._m0[0u];
        float _2213 = roundEven(_2211.y);
        bool _2214 = _2213 == 3.0;
        float _2216 = log2(_2202);
        float _2220 = exp2(_2216 * cbSceneParam._m0[78u].x);
        float _2221 = exp2(_2216 * cbSceneParam._m0[78u].y);
        float _2222 = exp2(_2216 * cbSceneParam._m0[78u].z);
        float _2223 = _2220 * _2062;
        float _2224 = _2221 * _2063;
        float _2225 = _2222 * _2064;
        float _2232 = _318 + (-0.5);
        _2234 = cbMtdParam._m0[1u];
        _2236 = _2234.y * _2232;
        float _2239 = (_2213 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2240 = _2239 * (_2214 ? _2223 : (_2223 + (cbSceneParam._m0[72u].w * _2196)));
        _2241 = _2239 * (_2214 ? _2224 : (_2224 + (cbSceneParam._m0[72u].w * _2198)));
        _2242 = _2239 * (_2214 ? _2225 : (_2225 + (cbSceneParam._m0[72u].w * _2200)));
        _2245 = ((_2070 * _2074) * _2220) * _2239;
        _2248 = ((_2071 * _2074) * _2221) * _2239;
        _2251 = ((_2072 * _2074) * _2222) * _2239;
        _2252 = _2232 * 0.999000012874603271484375;
        _2263 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2263)
        {
            if ((cbInstanceData._m0[_370 + 7u].x + _2252) < 0.5)
            {
                _2416 = true;
                break;
            }
        }
        uint _2357 = _371 + uint(_2211.w);
        if ((cbInstanceData._m0[_2357].w < 1.0) && ((cbInstanceData._m0[_2357].w + _2252) < 0.5))
        {
            _2416 = true;
            break;
        }
        if ((_2236 + 1.0) < _2234.x)
        {
            _2416 = true;
            break;
        }
        _2416 = false;
        break;
    }
    float _2571;
    if (_2416)
    {
        discard_state = true;
        _2571 = 0.0;
    }
    else
    {
        _2571 = cbInstanceData._m0[_2075].w;
    }
    SV_Target.x = _2240;
    SV_Target.y = _2241;
    SV_Target.z = _2242;
    SV_Target.w = _2571;
    SV_Target_1.x = _2245;
    SV_Target_1.y = _2248;
    SV_Target_1.z = _2251;
    SV_Target_1.w = cbInstanceData._m0[_2075].w;
    discard_exit();
}


