#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _825;
float _3099;
float _3100;
float _3101;
float _3102;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    vec4 _188 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _188.x * cbMtdParam._m0[9u].x;
    float _195 = _188.y * cbMtdParam._m0[9u].y;
    float _196 = _188.z * cbMtdParam._m0[9u].z;
    vec4 _217 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _219 = _217.x;
    float _220 = _217.y;
    float _221 = _217.z;
    float _222 = cbMtdParam._m0[11u].w * cbMtdParam._m0[12u].x;
    float _223 = _222 * _219;
    float _224 = _222 * _220;
    float _225 = _222 * _221;
    float _226 = isnan(_224) ? _223 : (isnan(_223) ? _224 : max(_223, _224));
    float _227 = isnan(_225) ? _226 : (isnan(_226) ? _225 : max(_226, _225));
    float _230;
    float _232;
    if (_227 < 1.1920928955078125e-07)
    {
        _230 = 0.0;
        _232 = 0.0;
    }
    else
    {
        float _258 = isnan(_224) ? _223 : (isnan(_223) ? _224 : min(_223, _224));
        float _260 = _227 - (isnan(_225) ? _258 : (isnan(_258) ? _225 : min(_258, _225)));
        float _233 = _260 / _227;
        float frontier_phi_1_2_ladder;
        float frontier_phi_1_2_ladder_1;
        if (_260 < 1.1920928955078125e-07)
        {
            frontier_phi_1_2_ladder = _233;
            frontier_phi_1_2_ladder_1 = 0.0;
        }
        else
        {
            float _846;
            if (_227 == _223)
            {
                _846 = ((_222 * (_220 - _221)) / _260) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_15_10_ladder;
                if (_227 == _224)
                {
                    frontier_phi_15_10_ladder = (((_222 * (_221 - _219)) / _260) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_15_10_ladder = (((_222 * (_219 - _220)) / _260) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _846 = frontier_phi_15_10_ladder;
            }
            float _851 = (_846 < 0.0) ? (_846 + 1.0) : _846;
            frontier_phi_1_2_ladder = _233;
            frontier_phi_1_2_ladder_1 = _851 - floor(_851);
        }
        _230 = frontier_phi_1_2_ladder_1;
        _232 = frontier_phi_1_2_ladder;
    }
    float _234 = _232 + cbMtdParam._m0[11u].y;
    float _238 = fract(cbMtdParam._m0[11u].z + _230) * 6.0;
    uint _241 = uint(int(floor(_238)));
    float _243 = _238 - float(int(_241));
    float _246 = (1.0 - _234) * _227;
    float _249 = (1.0 - (_243 * _234)) * _227;
    float _253 = (1.0 - ((1.0 - _243) * _234)) * _227;
    float _262;
    float _264;
    float _265;
    if ((_241 == 0u) || (_241 == 6u))
    {
        _262 = _227;
        _264 = _253;
        _265 = _246;
    }
    else
    {
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        if (_241 == 1u)
        {
            frontier_phi_3_4_ladder = _249;
            frontier_phi_3_4_ladder_1 = _246;
            frontier_phi_3_4_ladder_2 = _227;
        }
        else
        {
            float frontier_phi_3_4_ladder_8_ladder;
            float frontier_phi_3_4_ladder_8_ladder_1;
            float frontier_phi_3_4_ladder_8_ladder_2;
            if (_241 == 2u)
            {
                frontier_phi_3_4_ladder_8_ladder = _246;
                frontier_phi_3_4_ladder_8_ladder_1 = _253;
                frontier_phi_3_4_ladder_8_ladder_2 = _227;
            }
            else
            {
                float frontier_phi_3_4_ladder_8_ladder_14_ladder;
                float frontier_phi_3_4_ladder_8_ladder_14_ladder_1;
                float frontier_phi_3_4_ladder_8_ladder_14_ladder_2;
                if (_241 == 3u)
                {
                    frontier_phi_3_4_ladder_8_ladder_14_ladder = _246;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder_1 = _227;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder_2 = _249;
                }
                else
                {
                    bool _1239 = _241 == 4u;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder = _1239 ? _253 : _227;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder_1 = _1239 ? _227 : _249;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder_2 = _246;
                }
                frontier_phi_3_4_ladder_8_ladder = frontier_phi_3_4_ladder_8_ladder_14_ladder;
                frontier_phi_3_4_ladder_8_ladder_1 = frontier_phi_3_4_ladder_8_ladder_14_ladder_1;
                frontier_phi_3_4_ladder_8_ladder_2 = frontier_phi_3_4_ladder_8_ladder_14_ladder_2;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_8_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_8_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_8_ladder_2;
        }
        _262 = frontier_phi_3_4_ladder;
        _264 = frontier_phi_3_4_ladder_2;
        _265 = frontier_phi_3_4_ladder_1;
    }
    float _277 = inversesqrt(dot(vec3(_166, _167, _168), vec3(_166, _167, _168)));
    float _278 = _277 * _166;
    float _279 = _277 * _167;
    float _280 = _277 * _168;
    float _3131 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _3142 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _3153 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _299 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _341 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _351 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _341);
    float _352 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _341);
    float _353 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _341);
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _351 * _357;
    float _359 = _352 * _357;
    float _360 = _353 * _357;
    vec4 _365 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _367 = _365.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _497 = sqrt(((_351 * _351) + (_352 * _352)) + (_353 * _353));
        float _503 = (cbMatDynParam._m0[5u].x * _497) + cbMatDynParam._m0[5u].y;
        float _3164 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
        float _504 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
        float _508 = (cbMatDynParam._m0[5u].z * _497) + cbMatDynParam._m0[5u].w;
        float _3175 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0))) - _504)) + _504) < ((_367 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _380 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _381 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _401 = fma(_280, cbSceneParam._m0[5u].z, fma(_279, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _278));
    float _404 = fma(_280, cbSceneParam._m0[6u].z, fma(_279, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _278));
    float _407 = fma(_280, cbSceneParam._m0[7u].z, fma(_279, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _278));
    uint _420 = uint(roundEven(NORMAL.w)) * 13u;
    uint _421 = _420 + 9u;
    uint _422 = _421 + uint(cbMatDynParam._m0[0u].w);
    float _428 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0)))) * cbInstanceData._m0[_422].x;
    float _429 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0)))) * cbInstanceData._m0[_422].y;
    float _430 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0)))) * cbInstanceData._m0[_422].z;
    float _3186 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
    float _3197 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
    float _3208 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
    vec4 _442 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _380, cbSceneParam._m0[86u].y * _381));
    float _445 = _442.x * TEXCOORD.z;
    float _446 = dot(vec3(_278, _279, _280), vec3(_358, _359, _360));
    float _449 = _446 * 2.0;
    float _454 = (_449 * _278) - _358;
    float _455 = (_449 * _279) - _359;
    float _456 = (_449 * _280) - _360;
    float _478 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _482 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _486 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _824;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _549 = fma(_486, cbModelParam._m0[26u].z, fma(_482, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _478));
        float _553 = fma(_486, cbModelParam._m0[27u].z, fma(_482, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _478));
        float _557 = fma(_486, cbModelParam._m0[28u].z, fma(_482, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _478));
        float _582 = _478 + _278;
        float _583 = _482 + _279;
        float _584 = _486 + _280;
        float _594 = fma(_584, cbModelParam._m0[26u].z, fma(_583, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _582)) - _549;
        float _595 = fma(_584, cbModelParam._m0[27u].z, fma(_583, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _582)) - _553;
        float _596 = fma(_584, cbModelParam._m0[28u].z, fma(_583, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _582)) - _557;
        float _600 = inversesqrt(dot(vec3(_594, _595, _596), vec3(_594, _595, _596)));
        float _613 = ((_600 * _594) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_549 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _614 = ((_600 * _595) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_553 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _615 = ((_600 * _596) / cbModelParam._m0[34u].z) + ((((((_557 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _618 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_613, _614, _615), 0.0);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_613, _614, _615), 0.0);
        vec4 _632 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_613, _614, _615), 0.0);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_613, _614, _615), 0.0);
        float _652 = exp2((_618.w + (-0.5)) * 20.0) * 2.0;
        float _653 = _652 * (_618.x + (-0.5));
        float _654 = _652 * (_618.y + (-0.5));
        float _655 = _652 * (_618.z + (-0.5));
        float _662 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _663 = _662 * (_625.x + (-0.5));
        float _664 = _662 * (_625.y + (-0.5));
        float _665 = _662 * (_625.z + (-0.5));
        float _672 = exp2((_632.w + (-0.5)) * 20.0) * 2.0;
        float _673 = _672 * (_632.x + (-0.5));
        float _674 = _672 * (_632.y + (-0.5));
        float _675 = _672 * (_632.z + (-0.5));
        float _682 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_639.x + (-0.5));
        float _684 = _682 * (_639.y + (-0.5));
        float _685 = _682 * (_639.z + (-0.5));
        float _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _687 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _688 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _689 = _653 * 0.5;
        float _690 = _663 * 0.5;
        float _691 = _673 * 0.5;
        float _692 = dot(vec3(_689, _690, _691), vec3(_689, _690, _691));
        float _697 = (_692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_692);
        float _706 = (dot(vec3(_278, _279, _280), vec3(_697 * _689, _697 * _690, _697 * _691)) + 1.0) * 0.5;
        float _3234 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _716 = sqrt(((_690 * _690) + (_689 * _689)) + (_691 * _691)) / (_686 + 9.9999997473787516355514526367188e-06);
        float _3245 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _718 = _717 * 2.0;
        float _722 = (1.0 - _717) / (_717 + 1.0);
        float _3256 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _732 = ((((1.0 - _723) * (_718 + 2.0)) * exp2(log2(isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))) * (_718 + 1.0))) + _723) * _686;
        float _733 = _654 * 0.5;
        float _734 = _664 * 0.5;
        float _735 = _674 * 0.5;
        float _736 = dot(vec3(_733, _734, _735), vec3(_733, _734, _735));
        float _741 = (_736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_736);
        float _749 = (dot(vec3(_278, _279, _280), vec3(_741 * _733, _741 * _734, _741 * _735)) + 1.0) * 0.5;
        float _3267 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _758 = sqrt(((_734 * _734) + (_733 * _733)) + (_735 * _735)) / (_687 + 9.9999997473787516355514526367188e-06);
        float _3278 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _760 = _759 * 2.0;
        float _764 = (1.0 - _759) / (_759 + 1.0);
        float _3289 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _774 = ((((1.0 - _765) * (_760 + 2.0)) * exp2(log2(isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))) * (_760 + 1.0))) + _765) * _687;
        float _775 = _655 * 0.5;
        float _776 = _665 * 0.5;
        float _777 = _675 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _791 = (dot(vec3(_278, _279, _280), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3300 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _800 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_688 + 9.9999997473787516355514526367188e-06);
        float _3311 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3322 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * (_802 + 1.0))) + _807) * _688;
        _824 = _655;
        _826 = _654;
        _827 = _653;
        _828 = _665;
        _829 = _664;
        _830 = _663;
        _831 = _675;
        _832 = _674;
        _833 = _673;
        _834 = _688;
        _835 = _687;
        _836 = _686;
        _837 = cbModelParam._m0[36u].z * (isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0)));
        _838 = cbModelParam._m0[36u].z * (isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0)));
        _839 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
    }
    else
    {
        _824 = _825;
        _826 = _825;
        _827 = _825;
        _828 = _825;
        _829 = _825;
        _830 = _825;
        _831 = _825;
        _832 = _825;
        _833 = _825;
        _834 = _825;
        _835 = _825;
        _836 = _825;
        _837 = 0.0;
        _838 = 0.0;
        _839 = 0.0;
    }
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _886 = fma(_486, cbModelParam._m0[30u].z, fma(_482, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _478));
        float _890 = fma(_486, cbModelParam._m0[31u].z, fma(_482, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _478));
        float _894 = fma(_486, cbModelParam._m0[32u].z, fma(_482, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _478));
        float _917 = _478 + _278;
        float _918 = _482 + _279;
        float _919 = _486 + _280;
        float _929 = fma(_919, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _917)) - _886;
        float _930 = fma(_919, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _917)) - _890;
        float _931 = fma(_919, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _917)) - _894;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_886 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_890 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[35u].z) + ((((((_894 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _985 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_952.x + (-0.5));
        float _987 = _985 * (_952.y + (-0.5));
        float _988 = _985 * (_952.z + (-0.5));
        float _995 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_959.x + (-0.5));
        float _997 = _995 * (_959.y + (-0.5));
        float _998 = _995 * (_959.z + (-0.5));
        float _1005 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_966.x + (-0.5));
        float _1007 = _1005 * (_966.y + (-0.5));
        float _1008 = _1005 * (_966.z + (-0.5));
        float _1015 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_973.x + (-0.5));
        float _1017 = _1015 * (_973.y + (-0.5));
        float _1018 = _1015 * (_973.z + (-0.5));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = _986 * 0.5;
        float _1023 = _996 * 0.5;
        float _1024 = _1006 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_278, _279, _280), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3363 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3374 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3385 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * (_1049 + 1.0))) + _1054) * _1019;
        float _1064 = _987 * 0.5;
        float _1065 = _997 * 0.5;
        float _1066 = _1007 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_278, _279, _280), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3396 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3407 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3418 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * (_1091 + 1.0))) + _1096) * _1020;
        float _1106 = _988 * 0.5;
        float _1107 = _998 * 0.5;
        float _1108 = _1008 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_278, _279, _280), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3429 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3440 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3451 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * (_1133 + 1.0))) + _1138) * _1021;
        _1155 = _988;
        _1156 = _987;
        _1157 = _986;
        _1158 = _998;
        _1159 = _997;
        _1160 = _996;
        _1161 = _1008;
        _1162 = _1007;
        _1163 = _1006;
        _1164 = _1021;
        _1165 = _1020;
        _1166 = _1019;
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _825;
        _1156 = _825;
        _1157 = _825;
        _1158 = _825;
        _1159 = _825;
        _1160 = _825;
        _1161 = _825;
        _1162 = _825;
        _1163 = _825;
        _1164 = _825;
        _1165 = _825;
        _1166 = _825;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _837)) + _837;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _838)) + _838;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _839)) + _839;
    float _1202 = fma(_1181, cbSceneParam._m0[89u].z, fma(_1180, cbSceneParam._m0[89u].y, _1179 * cbSceneParam._m0[89u].x));
    float _1205 = fma(_1181, cbSceneParam._m0[90u].z, fma(_1180, cbSceneParam._m0[90u].y, _1179 * cbSceneParam._m0[90u].x));
    float _1208 = fma(_1181, cbSceneParam._m0[91u].z, fma(_1180, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1179));
    float _1223 = _454 * 0.5;
    float _1224 = _455 * 0.5;
    float _1225 = _456 * 0.5;
    float _1226 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1229 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1232 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1268;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1241 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_824, _828, _831, _834));
        float _1245 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_826, _829, _832, _835));
        float _1249 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_827, _830, _833, _836));
        float _1256 = dot(vec4(cbModelParam._m0[39u]), vec4(_1223, _1224, _1225, 1.0));
        _1268 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1268 = 1.0;
    }
    float _1279;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1270 = dot(vec4(cbModelParam._m0[40u]), vec4(_1223, _1224, _1225, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1283 = (_1279 * cbModelParam._m0[1u].x) + (_1268 * (1.0 - cbModelParam._m0[1u].x));
    float _1292 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1374;
    float _1376;
    float _1378;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1341 = fma(_486, cbModelParam._m0[13u].z, fma(_482, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _478)) + cbModelParam._m0[13u].w;
        float _1345 = fma(_486, cbModelParam._m0[14u].z, fma(_482, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _478)) + cbModelParam._m0[14u].w;
        float _1349 = fma(_486, cbModelParam._m0[15u].z, fma(_482, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _478)) + cbModelParam._m0[15u].w;
        float _1352 = fma(_456, cbModelParam._m0[13u].z, fma(_455, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _454));
        float _1355 = fma(_456, cbModelParam._m0[14u].z, fma(_455, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _454));
        float _1358 = fma(_456, cbModelParam._m0[15u].z, fma(_455, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _454));
        float _1384;
        if (_1352 > 0.0)
        {
            _1384 = abs((1.0 - _1341) / _1352);
        }
        else
        {
            float frontier_phi_30_28_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_30_28_ladder = abs((_1341 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_30_28_ladder = 5000.0;
            }
            _1384 = frontier_phi_30_28_ladder;
        }
        float _1611;
        if (_1355 > 0.0)
        {
            _1611 = abs((1.0 - _1345) / _1355);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1345 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1611 = frontier_phi_39_35_ladder;
        }
        float _1803;
        if (_1358 > 0.0)
        {
            _1803 = abs((1.0 - _1349) / _1358);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1349 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _1803 = frontier_phi_51_46_ladder;
        }
        float _1805 = isnan(_1611) ? _1384 : (isnan(_1384) ? _1611 : min(_1384, _1611));
        float _1806 = isnan(_1803) ? _1805 : (isnan(_1805) ? _1803 : min(_1805, _1803));
        float _1810 = (_1806 * _1352) + _1341;
        float _1811 = (_1806 * _1355) + _1345;
        float _1812 = (_1806 * _1358) + _1349;
        float _1813 = _1806 * 9.9999997473787516355514526367188e-05;
        float _1815 = (-1.0) - _1813;
        float _1817 = _1813 + 1.0;
        float frontier_phi_29_51_ladder;
        float frontier_phi_29_51_ladder_1;
        float frontier_phi_29_51_ladder_2;
        if ((_1812 > _1817) || ((_1812 < _1815) || ((_1811 > _1817) || ((_1811 < _1815) || ((_1810 < _1815) || (_1810 > _1817))))))
        {
            frontier_phi_29_51_ladder = 0.0;
            frontier_phi_29_51_ladder_1 = 0.0;
            frontier_phi_29_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1909 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1812, cbModelParam._m0[9u].z, fma(_1811, cbModelParam._m0[9u].y, _1810 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1812, cbModelParam._m0[10u].z, fma(_1811, cbModelParam._m0[10u].y, _1810 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1812, cbModelParam._m0[11u].z, fma(_1811, cbModelParam._m0[11u].y, _1810 * cbModelParam._m0[11u].x))), _1292);
            frontier_phi_29_51_ladder = _1909.z * cbModelParam._m0[1u].y;
            frontier_phi_29_51_ladder_1 = _1909.y * cbModelParam._m0[1u].y;
            frontier_phi_29_51_ladder_2 = _1909.x * cbModelParam._m0[1u].y;
        }
        _1374 = frontier_phi_29_51_ladder_2;
        _1376 = frontier_phi_29_51_ladder_1;
        _1378 = frontier_phi_29_51_ladder;
    }
    else
    {
        vec4 _1362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_454, _455, _456), _1292);
        _1374 = _1362.x * cbModelParam._m0[1u].y;
        _1376 = _1362.y * cbModelParam._m0[1u].y;
        _1378 = _1362.z * cbModelParam._m0[1u].y;
    }
    float _1381 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1474;
    float _1476;
    float _1478;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1438 = fma(_486, cbModelParam._m0[21u].z, fma(_482, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _478)) + cbModelParam._m0[21u].w;
        float _1442 = fma(_486, cbModelParam._m0[22u].z, fma(_482, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _478)) + cbModelParam._m0[22u].w;
        float _1446 = fma(_486, cbModelParam._m0[23u].z, fma(_482, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _478)) + cbModelParam._m0[23u].w;
        float _1449 = fma(_456, cbModelParam._m0[21u].z, fma(_455, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _454));
        float _1452 = fma(_456, cbModelParam._m0[22u].z, fma(_455, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _454));
        float _1455 = fma(_456, cbModelParam._m0[23u].z, fma(_455, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _454));
        float _1616;
        if (_1449 > 0.0)
        {
            _1616 = abs((1.0 - _1438) / _1449);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1438 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _1616 = frontier_phi_41_37_ladder;
        }
        float _1830;
        if (_1452 > 0.0)
        {
            _1830 = abs((1.0 - _1442) / _1452);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1442 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _1830 = frontier_phi_53_48_ladder;
        }
        float _1981;
        if (_1455 > 0.0)
        {
            _1981 = abs((1.0 - _1446) / _1455);
        }
        else
        {
            float frontier_phi_62_59_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_62_59_ladder = abs((_1446 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_62_59_ladder = 5000.0;
            }
            _1981 = frontier_phi_62_59_ladder;
        }
        float _1983 = isnan(_1830) ? _1616 : (isnan(_1616) ? _1830 : min(_1616, _1830));
        float _1984 = isnan(_1981) ? _1983 : (isnan(_1983) ? _1981 : min(_1983, _1981));
        float _1988 = (_1984 * _1449) + _1438;
        float _1989 = (_1984 * _1452) + _1442;
        float _1990 = (_1984 * _1455) + _1446;
        float _1991 = _1984 * 9.9999997473787516355514526367188e-05;
        float _1992 = (-1.0) - _1991;
        float _1994 = _1991 + 1.0;
        float frontier_phi_38_62_ladder;
        float frontier_phi_38_62_ladder_1;
        float frontier_phi_38_62_ladder_2;
        if ((_1990 > _1994) || ((_1990 < _1992) || ((_1989 > _1994) || ((_1989 < _1992) || ((_1988 < _1992) || (_1988 > _1994))))))
        {
            frontier_phi_38_62_ladder = 0.0;
            frontier_phi_38_62_ladder_1 = 0.0;
            frontier_phi_38_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2218 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1990, cbModelParam._m0[17u].z, fma(_1989, cbModelParam._m0[17u].y, _1988 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1990, cbModelParam._m0[18u].z, fma(_1989, cbModelParam._m0[18u].y, _1988 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1990, cbModelParam._m0[19u].z, fma(_1989, cbModelParam._m0[19u].y, _1988 * cbModelParam._m0[19u].x))), _1381);
            frontier_phi_38_62_ladder = _2218.z * cbModelParam._m0[1u].z;
            frontier_phi_38_62_ladder_1 = _2218.y * cbModelParam._m0[1u].z;
            frontier_phi_38_62_ladder_2 = _2218.x * cbModelParam._m0[1u].z;
        }
        _1474 = frontier_phi_38_62_ladder_2;
        _1476 = frontier_phi_38_62_ladder_1;
        _1478 = frontier_phi_38_62_ladder;
    }
    else
    {
        vec4 _1458 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_454, _455, _456), _1381);
        _1474 = _1458.x * cbModelParam._m0[1u].z;
        _1476 = _1458.y * cbModelParam._m0[1u].z;
        _1478 = _1458.z * cbModelParam._m0[1u].z;
    }
    float _1490 = _445 * 0.01200000010430812835693359375;
    float _1492 = _1490 * ((cbModelParam._m0[1u].w * (_1474 - _1374)) + _1374);
    float _1493 = _1490 * ((cbModelParam._m0[1u].w * (_1476 - _1376)) + _1376);
    float _1494 = _1490 * ((cbModelParam._m0[1u].w * (_1478 - _1378)) + _1378);
    float _1497 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1500 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1503 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, _1492 * cbSceneParam._m0[91u].x));
    vec4 _1511 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_380, _381));
    float _1513 = _1511.w;
    float _1525 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1513);
    float _1526 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1513);
    float _1527 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1513);
    uvec4 _1531 = floatBitsToUint(cbInstanceData._m0[_420 + 5u]);
    uint _1533 = _1531.x * 14u;
    uint _1534 = _1533 + 13u;
    float _1541 = _445 + (-1.0);
    float _1547 = (cbLight._m0[_1534].x * _1541) + 1.0;
    float _1548 = (cbLight._m0[_1534].y * _1541) + 1.0;
    float _1549 = (cbLight._m0[_1534].z * _1541) + 1.0;
    float _1550 = (cbLight._m0[_1534].w * _1541) + 1.0;
    uint _1551 = _1533 + 5u;
    float _1557 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
    uint _1561 = _1533 + 4u;
    float _1570 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
    uint _1574 = _1533 | 1u;
    float _1585 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_278, _279, _280));
    float _1588 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_278, _279, _280));
    float _3587 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
    float _3598 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _1593 = (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 0.3183098733425140380859375;
    float _1595 = (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 0.3183098733425140380859375;
    float _1602 = ((cbLight._m0[_1551].x * _1557) * _1595) + (((cbLight._m0[_1561].x * _1525) * _1570) * _1593);
    float _1603 = ((_1557 * cbLight._m0[_1551].y) * _1595) + (((cbLight._m0[_1561].y * _1526) * _1570) * _1593);
    float _1604 = ((_1557 * cbLight._m0[_1551].z) * _1595) + (((cbLight._m0[_1561].z * _1527) * _1570) * _1593);
    uvec4 _1608 = floatBitsToUint(cbLight._m0[_1533 + 12u]);
    bool _1610 = _1608.x == 0u;
    float _1621;
    float _1623;
    float _1625;
    if (_1610)
    {
        _1621 = _1602;
        _1623 = _1603;
        _1625 = _1604;
    }
    else
    {
        uint _1629 = _1533 + 6u;
        float _1645 = (dot(vec3(cbLight._m0[_1533 + 2u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _1646 = _1645 * _1645;
        float _3609 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1648 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
        _1621 = (((cbLight._m0[_1629].x * 0.3183098733425140380859375) * _1647) * _1648) + _1602;
        _1623 = (((cbLight._m0[_1629].y * 0.3183098733425140380859375) * _1647) * _1648) + _1603;
        _1625 = (((cbLight._m0[_1629].z * 0.3183098733425140380859375) * _1647) * _1648) + _1604;
    }
    bool _1628 = _1608.y == 0u;
    float _1666;
    float _1668;
    float _1670;
    if (_1628)
    {
        _1666 = _1621;
        _1668 = _1623;
        _1670 = _1625;
    }
    else
    {
        uint _1774 = _1533 + 7u;
        float _1790 = (dot(vec3(cbLight._m0[_1533 + 3u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _1791 = _1790 * _1790;
        float _3625 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1793 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _1666 = (((cbLight._m0[_1774].x * 0.3183098733425140380859375) * _1792) * _1793) + _1621;
        _1668 = (((cbLight._m0[_1774].y * 0.3183098733425140380859375) * _1792) * _1793) + _1623;
        _1670 = (((cbLight._m0[_1774].z * 0.3183098733425140380859375) * _1792) * _1793) + _1625;
    }
    uint _1672 = _1533 + 8u;
    float _1678 = cbLight._m0[_1533].x + _358;
    float _1679 = cbLight._m0[_1533].y + _359;
    float _1680 = cbLight._m0[_1533].z + _360;
    float _1684 = inversesqrt(dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680)));
    float _1688 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1533].xyz));
    float _3641 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1691 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _1692 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _1693 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_1678 * _1684, _1679 * _1684, _1680 * _1684));
    float _3663 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1704 = (exp2(log2(1.0 - (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1710 = (0.5 / ((_1691 + 9.9999999392252902907785028219223e-09) + _1692)) * _1691;
    float _3674 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1712 = (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.31831014156341552734375;
    uint _1726 = _1533 + 9u;
    float _1732 = cbLight._m0[_1574].x + _358;
    float _1733 = cbLight._m0[_1574].y + _359;
    float _1734 = cbLight._m0[_1574].z + _360;
    float _1738 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
    float _1742 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1574].xyz));
    float _3685 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _1746 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_1732 * _1738, _1733 * _1738, _1734 * _1738));
    float _3696 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1755 = (exp2(log2(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1759 = (0.5 / ((_1745 + 9.9999999392252902907785028219223e-09) + _1692)) * _1745;
    float _3707 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1761 = (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * 0.31831014156341552734375;
    float _1771 = (((_1755 * cbLight._m0[_1726].x) * _1761) * _1557) + ((((cbLight._m0[_1672].x * _1525) * _1704) * _1712) * _1570);
    float _1772 = (((_1755 * cbLight._m0[_1726].y) * _1761) * _1557) + ((((cbLight._m0[_1672].y * _1526) * _1704) * _1712) * _1570);
    float _1773 = (((_1755 * cbLight._m0[_1726].z) * _1761) * _1557) + ((((cbLight._m0[_1672].z * _1527) * _1704) * _1712) * _1570);
    float _1835;
    float _1837;
    float _1839;
    if (_1610)
    {
        _1835 = _1771;
        _1837 = _1772;
        _1839 = _1773;
    }
    else
    {
        uint _1841 = _1533 + 10u;
        uint _1847 = _1533 + 2u;
        float _1853 = cbLight._m0[_1847].x + _358;
        float _1854 = cbLight._m0[_1847].y + _359;
        float _1855 = cbLight._m0[_1847].z + _360;
        float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
        float _1863 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1847].xyz));
        float _3718 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1866 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1867 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_1853 * _1859, _1854 * _1859, _1855 * _1859));
        float _3729 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1876 = (exp2(log2(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1880 = (0.5 / ((_1866 + 9.9999999392252902907785028219223e-09) + _1692)) * _1866;
        float _3740 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1882 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.31831014156341552734375;
        float _1883 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
        _1835 = (((_1876 * cbLight._m0[_1841].x) * _1882) * _1883) + _1771;
        _1837 = (((_1876 * cbLight._m0[_1841].y) * _1882) * _1883) + _1772;
        _1839 = (((_1876 * cbLight._m0[_1841].z) * _1882) * _1883) + _1773;
    }
    float _1918;
    float _1920;
    float _1922;
    if (_1628)
    {
        _1918 = _1835;
        _1920 = _1837;
        _1922 = _1839;
    }
    else
    {
        uint _1929 = _1533 + 11u;
        uint _1935 = _1533 + 3u;
        float _1941 = cbLight._m0[_1935].x + _358;
        float _1942 = cbLight._m0[_1935].y + _359;
        float _1943 = cbLight._m0[_1935].z + _360;
        float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
        float _1951 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1935].xyz));
        float _3756 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1954 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1955 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_1941 * _1947, _1942 * _1947, _1943 * _1947));
        float _3767 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1964 = (exp2(log2(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1968 = (0.5 / ((_1954 + 9.9999999392252902907785028219223e-09) + _1692)) * _1954;
        float _3778 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1970 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.31831014156341552734375;
        float _1971 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _1918 = (((_1964 * cbLight._m0[_1929].x) * _1970) * _1971) + _1835;
        _1920 = (((_1964 * cbLight._m0[_1929].y) * _1970) * _1971) + _1837;
        _1922 = (((_1964 * cbLight._m0[_1929].z) * _1970) * _1971) + _1839;
    }
    float _2106;
    float _2108;
    float _2110;
    float _2112;
    float _2114;
    float _2116;
    if (_1531.y == 0u)
    {
        float _2046 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2047 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2046;
        float _2048 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2046;
        float _2049 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2046;
        uvec4 _2061 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2062 = _2061.x;
        uint _2073 = uint((float(_2061.y) * floor(float(uint(cbSceneParam._m0[85u].y * _381) / _2062))) + floor(float(uint(cbSceneParam._m0[85u].x * _380) / _2062)));
        float _2083 = (log2(_2049 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2084 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        uint _2087 = uint(isnan(14.0) ? _2084 : (isnan(_2084) ? 14.0 : min(_2084, 14.0)));
        uvec4 _2092 = texelFetch(g_lightClusterGridBuffer, int(((_2087 << 2u) + (_2073 << 6u)) >> 2u));
        uint _2093 = _2092.x;
        uint _2094 = _2061.z;
        float _2223;
        float _2225;
        float _2227;
        float _2229;
        float _2231;
        float _2233;
        if (((((1u << ((_2094 >> 4u) & 15u)) + 4294967295u) & _2093) == 0u) || ((_2094 & 240u) == 0u))
        {
            _2223 = 0.0;
            _2225 = 0.0;
            _2227 = 0.0;
            _2229 = 0.0;
            _2231 = 0.0;
            _2233 = 0.0;
        }
        else
        {
            float _2224;
            float _2226;
            float _2228;
            float _2230;
            float _2232;
            float _2234;
            float _2383 = 0.0;
            float _2384 = 0.0;
            float _2385 = 0.0;
            float _2386 = 0.0;
            float _2387 = 0.0;
            float _2388 = 0.0;
            uint _2389 = 0u;
            uint _2398;
            bool _2399;
            for (;;)
            {
                _2398 = texelFetch(g_lightClassification, int((((_2087 << 5u) + (_2073 << 9u)) + (_2389 << 2u)) >> 2u)).x;
                _2399 = _2398 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2399)
                {
                    frontier_phi_79_pred = _2388;
                    frontier_phi_79_pred_1 = _2387;
                    frontier_phi_79_pred_2 = _2386;
                    frontier_phi_79_pred_3 = _2385;
                    frontier_phi_79_pred_4 = _2384;
                    frontier_phi_79_pred_5 = _2383;
                }
                else
                {
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    uint _2534;
                    _2528 = _2383;
                    _2529 = _2384;
                    _2530 = _2385;
                    _2531 = _2386;
                    _2532 = _2387;
                    _2533 = _2388;
                    _2534 = _2398;
                    float _2455;
                    float _2456;
                    float _2457;
                    float _2458;
                    float _2459;
                    float _2460;
                    for (;;)
                    {
                        uint _2538 = uint(findLSB(_2534)) + (_2389 << 5u);
                        uint _2535 = (_2534 + 4294967295u) & _2534;
                        uint _2540 = _2538 * 48u;
                        vec4 _2554 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2540)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 3u)).x));
                        uint _2560 = (_2538 * 48u) + 4u;
                        vec4 _2573 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2560)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 3u)).x));
                        uint _2579 = (_2538 * 48u) + 8u;
                        vec3 _2590 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2579)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 2u)).x));
                        float _2594 = _2554.x - _2047;
                        float _2595 = _2554.y - _2048;
                        float _2596 = _2554.z - _2049;
                        float _2597 = dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596));
                        float _2600 = inversesqrt(_2597);
                        float _2609 = 1.0 - (_2597 * _2554.w);
                        float _3804 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
                        float _2610 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
                        float _2611 = sqrt(_2597) * _2573.w;
                        float _2614 = 1.39999997615814208984375 / (_2611 + 1.39999997615814208984375);
                        float _2615 = _2614 * _2614;
                        float _2618 = ((1.0 - _2615) * dot(vec3(_401, _404, _407), vec3(_2600 * _2594, _2600 * _2595, _2600 * _2596))) + _2615;
                        float _2621 = _2611 * _2611;
                        float _2625 = ((isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0))) * _2610) / ((_2621 * 0.699999988079071044921875) + 1.0);
                        float _2629 = (-0.0) - _2047;
                        float _2630 = (-0.0) - _2048;
                        float _2631 = (-0.0) - _2049;
                        float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
                        float _2639 = dot(vec3(_401, _404, _407), vec3(_2635 * _2629, _2635 * _2630, _2635 * _2631));
                        float _3820 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
                        float _3831 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
                        float _2643 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
                        float _2647 = (0.5 / (((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) + 9.9999999392252902907785028219223e-09) + _2643)) * _2643;
                        float _3842 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                        float _2656 = (((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 3.1415927410125732421875) / ((_2621 * 2.1991131305694580078125) + 3.141590118408203125)) * _2610;
                        _2458 = (_2625 * _2573.x) + _2531;
                        _2459 = (_2625 * _2573.y) + _2532;
                        _2460 = (_2625 * _2573.z) + _2533;
                        _2455 = (_2656 * _2590.x) + _2528;
                        _2456 = (_2656 * _2590.y) + _2529;
                        _2457 = (_2656 * _2590.z) + _2530;
                        if (_2535 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2528 = _2455;
                            _2529 = _2456;
                            _2530 = _2457;
                            _2531 = _2458;
                            _2532 = _2459;
                            _2533 = _2460;
                            _2534 = _2535;
                        }
                    }
                    frontier_phi_79_pred = _2460;
                    frontier_phi_79_pred_1 = _2459;
                    frontier_phi_79_pred_2 = _2458;
                    frontier_phi_79_pred_3 = _2457;
                    frontier_phi_79_pred_4 = _2456;
                    frontier_phi_79_pred_5 = _2455;
                }
                _2234 = frontier_phi_79_pred;
                _2232 = frontier_phi_79_pred_1;
                _2230 = frontier_phi_79_pred_2;
                _2228 = frontier_phi_79_pred_3;
                _2226 = frontier_phi_79_pred_4;
                _2224 = frontier_phi_79_pred_5;
                uint _2390 = _2389 + 1u;
                if (_2390 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2383 = _2224;
                    _2384 = _2226;
                    _2385 = _2228;
                    _2386 = _2230;
                    _2387 = _2232;
                    _2388 = _2234;
                    _2389 = _2390;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2223 = _2224;
            _2225 = _2226;
            _2227 = _2228;
            _2229 = _2230;
            _2231 = _2232;
            _2233 = _2234;
        }
        uvec4 _2237 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2238 = _2237.z;
        uint _2240 = (_2238 >> 8u) & 15u;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        if (((4294967295u << _2240) & _2093) == 0u)
        {
            _2354 = _2223;
            _2356 = _2225;
            _2358 = _2227;
            _2360 = _2229;
            _2362 = _2231;
            _2364 = _2233;
        }
        else
        {
            float _2379 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
            float frontier_phi_71_72_ladder;
            float frontier_phi_71_72_ladder_1;
            float frontier_phi_71_72_ladder_2;
            float frontier_phi_71_72_ladder_3;
            float frontier_phi_71_72_ladder_4;
            float frontier_phi_71_72_ladder_5;
            if (_2240 < ((_2238 >> 12u) & 15u))
            {
                float _2355;
                float _2357;
                float _2359;
                float _2361;
                float _2363;
                float _2365;
                float _2511 = _2223;
                float _2512 = _2225;
                float _2513 = _2227;
                float _2514 = _2229;
                float _2515 = _2231;
                float _2516 = _2233;
                uint _2517 = _2240;
                uint _2526;
                bool _2527;
                for (;;)
                {
                    _2526 = texelFetch(g_lightClassification, int((((_2087 << 5u) + (_2073 << 9u)) + (_2517 << 2u)) >> 2u)).x;
                    _2527 = _2526 == 0u;
                    float frontier_phi_90_pred;
                    float frontier_phi_90_pred_1;
                    float frontier_phi_90_pred_2;
                    float frontier_phi_90_pred_3;
                    float frontier_phi_90_pred_4;
                    float frontier_phi_90_pred_5;
                    if (_2527)
                    {
                        frontier_phi_90_pred = _2516;
                        frontier_phi_90_pred_1 = _2515;
                        frontier_phi_90_pred_2 = _2514;
                        frontier_phi_90_pred_3 = _2513;
                        frontier_phi_90_pred_4 = _2512;
                        frontier_phi_90_pred_5 = _2511;
                    }
                    else
                    {
                        float _2670;
                        float _2671;
                        float _2672;
                        float _2673;
                        float _2674;
                        float _2675;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2683 = _2511;
                        float _2684 = _2512;
                        float _2685 = _2513;
                        float _2686 = _2514;
                        float _2687 = _2515;
                        float _2688 = _2516;
                        uint _2689 = _2526;
                        uint _2690;
                        vec4 _2715;
                        float _2716;
                        vec4 _2731;
                        vec3 _2743;
                        vec4 _2759;
                        vec4 _2775;
                        float _2822;
                        bool _2823;
                        for (;;)
                        {
                            uint _2700 = ((_2517 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2689));
                            _2690 = (_2689 + 4294967295u) & _2689;
                            uint _2702 = _2700 * 40u;
                            _2715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 3u)).x));
                            _2716 = _2715.w;
                            uint _2718 = (_2700 * 40u) + 4u;
                            _2731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 3u)).x));
                            uint _2733 = (_2700 * 40u) + 8u;
                            _2743 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 2u)).x));
                            uint _2746 = (_2700 * 40u) + 16u;
                            _2759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 3u)).x));
                            uint _2762 = (_2700 * 40u) + 20u;
                            _2775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 3u)).x));
                            uint _2778 = (_2700 * 40u) + 24u;
                            vec4 _2791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 3u)).x));
                            uint _2797 = (_2700 * 40u) + 28u;
                            vec4 _2810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 3u)).x));
                            _2822 = fma(_2049, _2810.z, fma(_2048, _2810.y, _2810.x * _2047)) + _2810.w;
                            _2823 = !((fma(_2049, _2791.z, fma(_2048, _2791.y, _2791.x * _2047)) + _2791.w) <= 0.0);
                            float frontier_phi_96_pred;
                            float frontier_phi_96_pred_1;
                            float frontier_phi_96_pred_2;
                            float frontier_phi_96_pred_3;
                            float frontier_phi_96_pred_4;
                            float frontier_phi_96_pred_5;
                            if (_2823)
                            {
                                float _2850 = _2715.x - _2047;
                                float _2851 = _2715.y - _2048;
                                float _2852 = _2715.z - _2049;
                                float _2853 = dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852));
                                float _2856 = inversesqrt(_2853);
                                float _2857 = _2856 * _2850;
                                float _2858 = _2856 * _2851;
                                float _2859 = _2856 * _2852;
                                float _2863 = 1.0 - (_2853 / (_2716 * _2716));
                                float _3853 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                                float _2864 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
                                float _2868 = sqrt(_2853) * _2731.w;
                                float _2870 = 1.39999997615814208984375 / (_2868 + 1.39999997615814208984375);
                                float _2871 = _2870 * _2870;
                                float _2872 = 1.0 - _2871;
                                float _2874 = (_2872 * dot(vec3(_2857, _2858, _2859), vec3(_401, _404, _407))) + _2871;
                                float _2877 = _2868 * _2868;
                                float _2881 = (fma(_2049, _2759.z, fma(_2048, _2759.y, _2759.x * _2047)) + _2759.w) / _2822;
                                float _2882 = (fma(_2049, _2775.z, fma(_2048, _2775.y, _2775.x * _2047)) + _2775.w) / _2822;
                                float _2886 = 1.0 - dot(vec2(_2881, _2882), vec2(_2881, _2882));
                                float _3869 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                                float _2887 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
                                float _2888 = _2887 * (((isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0))) * _2864) / ((_2877 * 0.699999988079071044921875) + 1.0));
                                float _2898 = dot(vec3(_401, _404, _407), vec3((-0.0) - (_2047 * _2379), (-0.0) - (_2048 * _2379), (-0.0) - (_2049 * _2379)));
                                float _3880 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                                float _2906 = (_2872 * dot(vec3(_401, _404, _407), vec3(_2857, _2858, _2859))) + _2871;
                                float _3891 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                                float _2907 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
                                float _2911 = (0.5 / (((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) + 9.9999999392252902907785028219223e-09) + _2907)) * _2907;
                                float _3902 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                                float _2918 = (_2887 * _2864) * (((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * 3.1415927410125732421875) / ((_2877 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_96_pred = _2888 * _2731.z;
                                frontier_phi_96_pred_1 = _2888 * _2731.y;
                                frontier_phi_96_pred_2 = _2888 * _2731.x;
                                frontier_phi_96_pred_3 = _2918 * _2743.z;
                                frontier_phi_96_pred_4 = _2918 * _2743.y;
                                frontier_phi_96_pred_5 = _2918 * _2743.x;
                            }
                            else
                            {
                                frontier_phi_96_pred = 0.0;
                                frontier_phi_96_pred_1 = 0.0;
                                frontier_phi_96_pred_2 = 0.0;
                                frontier_phi_96_pred_3 = 0.0;
                                frontier_phi_96_pred_4 = 0.0;
                                frontier_phi_96_pred_5 = 0.0;
                            }
                            _2927 = frontier_phi_96_pred;
                            _2926 = frontier_phi_96_pred_1;
                            _2925 = frontier_phi_96_pred_2;
                            _2924 = frontier_phi_96_pred_3;
                            _2923 = frontier_phi_96_pred_4;
                            _2922 = frontier_phi_96_pred_5;
                            _2673 = _2925 + _2686;
                            _2674 = _2926 + _2687;
                            _2675 = _2927 + _2688;
                            _2670 = _2922 + _2683;
                            _2671 = _2923 + _2684;
                            _2672 = _2924 + _2685;
                            if (_2690 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2683 = _2670;
                                _2684 = _2671;
                                _2685 = _2672;
                                _2686 = _2673;
                                _2687 = _2674;
                                _2688 = _2675;
                                _2689 = _2690;
                                continue;
                            }
                        }
                        frontier_phi_90_pred = _2675;
                        frontier_phi_90_pred_1 = _2674;
                        frontier_phi_90_pred_2 = _2673;
                        frontier_phi_90_pred_3 = _2672;
                        frontier_phi_90_pred_4 = _2671;
                        frontier_phi_90_pred_5 = _2670;
                    }
                    _2365 = frontier_phi_90_pred;
                    _2363 = frontier_phi_90_pred_1;
                    _2361 = frontier_phi_90_pred_2;
                    _2359 = frontier_phi_90_pred_3;
                    _2357 = frontier_phi_90_pred_4;
                    _2355 = frontier_phi_90_pred_5;
                    uint _2518 = _2517 + 1u;
                    if (_2518 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2511 = _2355;
                        _2512 = _2357;
                        _2513 = _2359;
                        _2514 = _2361;
                        _2515 = _2363;
                        _2516 = _2365;
                        _2517 = _2518;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_71_72_ladder = _2361;
                frontier_phi_71_72_ladder_1 = _2365;
                frontier_phi_71_72_ladder_2 = _2363;
                frontier_phi_71_72_ladder_3 = _2359;
                frontier_phi_71_72_ladder_4 = _2357;
                frontier_phi_71_72_ladder_5 = _2355;
            }
            else
            {
                frontier_phi_71_72_ladder = _2229;
                frontier_phi_71_72_ladder_1 = _2233;
                frontier_phi_71_72_ladder_2 = _2231;
                frontier_phi_71_72_ladder_3 = _2227;
                frontier_phi_71_72_ladder_4 = _2225;
                frontier_phi_71_72_ladder_5 = _2223;
            }
            _2354 = frontier_phi_71_72_ladder_5;
            _2356 = frontier_phi_71_72_ladder_4;
            _2358 = frontier_phi_71_72_ladder_3;
            _2360 = frontier_phi_71_72_ladder;
            _2362 = frontier_phi_71_72_ladder_2;
            _2364 = frontier_phi_71_72_ladder_1;
        }
        float _2369 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
        _2106 = (_2369 * _2360) + _1666;
        _2108 = (_2369 * _2362) + _1668;
        _2110 = (_2369 * _2364) + _1670;
        _2112 = ((_2354 * 0.039999999105930328369140625) * _2369) + _1918;
        _2114 = ((_2356 * 0.039999999105930328369140625) * _2369) + _1920;
        _2116 = ((_2358 * 0.039999999105930328369140625) * _2369) + _1922;
    }
    else
    {
        _2106 = _1666;
        _2108 = _1668;
        _2110 = _1670;
        _2112 = _1918;
        _2114 = _1920;
        _2116 = _1922;
    }
    uint _2122 = _421 + uint(cbMatDynParam._m0[0u].w);
    float _2128 = (cbSceneParam._m0[72u].y * _262) * cbInstanceData._m0[_2122].x;
    float _2129 = (cbSceneParam._m0[72u].y * _264) * cbInstanceData._m0[_2122].y;
    float _2130 = (cbSceneParam._m0[72u].y * _265) * cbInstanceData._m0[_2122].z;
    float _3918 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3929 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3940 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _2147 = (((isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_2106 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _445))) + ((_2112 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + _2128;
    float _2149 = (_2129 + ((_2114 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_2108 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _445)));
    float _2151 = (_2130 + ((_2116 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_2110 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _445)));
    float _2152 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2153 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2154 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2160 = cbMtdParam._m0[2u].x * _2128;
    float _2161 = cbMtdParam._m0[2u].y * _2129;
    float _2162 = cbMtdParam._m0[2u].z * _2130;
    float _3966 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2164 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    uint _2165 = _420 + 6u;
    float _2173 = _380 / cbSceneParam._m0[86u].x;
    float _2174 = _381 / cbSceneParam._m0[86u].y;
    vec4 _2188 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2173, _2174, (log2((isnan(cbSceneParam._m0[77u].w) ? _299 : (isnan(_299) ? cbSceneParam._m0[77u].w : min(_299, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2190 = _2188.x;
    float _2191 = _2188.y;
    float _2192 = _2188.z;
    float _2193 = _2188.w;
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    if (_299 > cbSceneParam._m0[78u].w)
    {
        float _2248 = isnan(_299) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _299 : min(cbSceneParam._m0[80u].w, _299));
        float _2249 = _2248 / _299;
        float _2260 = _2249 * _351;
        float _2261 = _352 * _2249;
        float _2262 = (-0.0) - _2261;
        float _2264 = _2249 * _353;
        float _2266 = (cbSceneParam._m0[77u].w * _2262) / _2248;
        float _2267 = _2266 + cbSceneParam._m0[79u].w;
        float _2268 = cbSceneParam._m0[79u].w - _2261;
        float _2274 = sqrt(((_2260 * _2260) + (_2261 * _2261)) + (_2264 * _2264));
        float _2277 = (1.0 - (cbSceneParam._m0[77u].w / _2248)) * _2274;
        float _2282 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2284 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2468;
        if (abs((_2262 - _2266) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2468 = ((((_2267 > 0.0) ? exp2(_2282 * _2267) : (2.0 - exp2(_2284 * _2267))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2277;
        }
        else
        {
            float _2412 = 1.0 / cbSceneParam._m0[80u].x;
            float _2413 = isnan(_2268) ? _2267 : (isnan(_2267) ? _2268 : max(_2267, _2268));
            float _2414 = isnan(_2268) ? _2267 : (isnan(_2267) ? _2268 : min(_2267, _2268));
            float _2423 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : min(_2413, 0.0));
            float _2424 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : min(_2414, 0.0));
            _2468 = ((abs(_2274 / _2262) * cbSceneParam._m0[80u].y) * ((((_2423 - _2424) * 2.0) - ((exp2(_2282 * (isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0)))) - exp2(_2282 * (isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0))))) * _2412)) - ((exp2(_2284 * _2423) - exp2(_2284 * _2424)) * _2412))) + (_2277 * cbSceneParam._m0[80u].z);
        }
        vec4 _2470 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2173, _2174, 1.0), 0.0);
        float _2479 = exp2((_2468 * (-1.44269502162933349609375)) * (1.0 - _2470.w));
        float _2480 = log2(_2479);
        float _2496 = log2(_2193);
        _2286 = (exp2(_2496 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2480 * cbSceneParam._m0[78u].x)) * _2470.x) / cbSceneParam._m0[78u].x)) + _2190;
        _2288 = (exp2(_2496 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2480 * cbSceneParam._m0[78u].y)) * _2470.y) / cbSceneParam._m0[78u].y)) + _2191;
        _2290 = (exp2(_2496 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2480 * cbSceneParam._m0[78u].z)) * _2470.z) / cbSceneParam._m0[78u].z)) + _2192;
        _2292 = _2479 * _2193;
    }
    else
    {
        _2286 = _2190;
        _2288 = _2191;
        _2290 = _2192;
        _2292 = _2193;
    }
    bool _2506;
    vec4 _2301;
    vec4 _2324;
    float _2326;
    float _2330;
    float _2331;
    float _2332;
    float _2335;
    float _2338;
    float _2341;
    float _2342;
    bool _2353;
    for (;;)
    {
        _2301 = cbMatDynParam._m0[0u];
        float _2303 = roundEven(_2301.y);
        bool _2304 = _2303 == 3.0;
        float _2306 = log2(_2292);
        float _2310 = exp2(_2306 * cbSceneParam._m0[78u].x);
        float _2311 = exp2(_2306 * cbSceneParam._m0[78u].y);
        float _2312 = exp2(_2306 * cbSceneParam._m0[78u].z);
        float _2313 = _2310 * _2152;
        float _2314 = _2311 * _2153;
        float _2315 = _2312 * _2154;
        float _2322 = _367 + (-0.5);
        _2324 = cbMtdParam._m0[1u];
        _2326 = _2324.y * _2322;
        float _2329 = (_2303 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2330 = _2329 * (_2304 ? _2313 : (_2313 + (cbSceneParam._m0[72u].w * _2286)));
        _2331 = _2329 * (_2304 ? _2314 : (_2314 + (cbSceneParam._m0[72u].w * _2288)));
        _2332 = _2329 * (_2304 ? _2315 : (_2315 + (cbSceneParam._m0[72u].w * _2290)));
        _2335 = ((_2160 * _2164) * _2310) * _2329;
        _2338 = ((_2161 * _2164) * _2311) * _2329;
        _2341 = ((_2162 * _2164) * _2312) * _2329;
        _2342 = _2322 * 0.999000012874603271484375;
        _2353 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2353)
        {
            if ((cbInstanceData._m0[_420 + 7u].x + _2342) < 0.5)
            {
                _2506 = true;
                break;
            }
        }
        uint _2447 = _421 + uint(_2301.w);
        if ((cbInstanceData._m0[_2447].w < 1.0) && ((cbInstanceData._m0[_2447].w + _2342) < 0.5))
        {
            _2506 = true;
            break;
        }
        if ((_2326 + 1.0) < _2324.x)
        {
            _2506 = true;
            break;
        }
        _2506 = false;
        break;
    }
    float _2661;
    if (_2506)
    {
        discard_state = true;
        _2661 = 0.0;
    }
    else
    {
        _2661 = cbInstanceData._m0[_2165].w;
    }
    SV_Target.x = _2330;
    SV_Target.y = _2331;
    SV_Target.z = _2332;
    SV_Target.w = _2661;
    SV_Target_1.x = _2335;
    SV_Target_1.y = _2338;
    SV_Target_1.z = _2341;
    SV_Target_1.w = cbInstanceData._m0[_2165].w;
    discard_exit();
}


