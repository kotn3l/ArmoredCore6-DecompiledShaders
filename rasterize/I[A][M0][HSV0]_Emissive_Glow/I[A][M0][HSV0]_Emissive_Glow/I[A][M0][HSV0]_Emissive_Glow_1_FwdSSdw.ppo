#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _773;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _161 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _162 = _161 * NORMAL.x;
    float _163 = _161 * NORMAL.y;
    float _164 = _161 * NORMAL.z;
    vec4 _184 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _190 = _184.x * cbMtdParam._m0[9u].x;
    float _191 = _184.y * cbMtdParam._m0[9u].y;
    float _192 = _184.z * cbMtdParam._m0[9u].z;
    vec4 _213 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _215 = _213.x;
    float _216 = _213.y;
    float _217 = _213.z;
    float _218 = cbMtdParam._m0[11u].w * cbMtdParam._m0[12u].x;
    float _219 = _218 * _215;
    float _220 = _218 * _216;
    float _221 = _218 * _217;
    float _222 = isnan(_220) ? _219 : (isnan(_219) ? _220 : max(_219, _220));
    float _223 = isnan(_221) ? _222 : (isnan(_222) ? _221 : max(_222, _221));
    float _226;
    float _228;
    if (_223 < 1.1920928955078125e-07)
    {
        _226 = 0.0;
        _228 = 0.0;
    }
    else
    {
        float _254 = isnan(_220) ? _219 : (isnan(_219) ? _220 : min(_219, _220));
        float _256 = _223 - (isnan(_221) ? _254 : (isnan(_254) ? _221 : min(_254, _221)));
        float _229 = _256 / _223;
        float frontier_phi_1_2_ladder;
        float frontier_phi_1_2_ladder_1;
        if (_256 < 1.1920928955078125e-07)
        {
            frontier_phi_1_2_ladder = _229;
            frontier_phi_1_2_ladder_1 = 0.0;
        }
        else
        {
            float _1174;
            if (_223 == _219)
            {
                _1174 = ((_218 * (_216 - _217)) / _256) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_14_10_ladder;
                if (_223 == _220)
                {
                    frontier_phi_14_10_ladder = (((_218 * (_217 - _215)) / _256) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_14_10_ladder = (((_218 * (_215 - _216)) / _256) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _1174 = frontier_phi_14_10_ladder;
            }
            float _1179 = (_1174 < 0.0) ? (_1174 + 1.0) : _1174;
            frontier_phi_1_2_ladder = _229;
            frontier_phi_1_2_ladder_1 = _1179 - floor(_1179);
        }
        _226 = frontier_phi_1_2_ladder_1;
        _228 = frontier_phi_1_2_ladder;
    }
    float _230 = _228 + cbMtdParam._m0[11u].y;
    float _234 = fract(cbMtdParam._m0[11u].z + _226) * 6.0;
    uint _237 = uint(int(floor(_234)));
    float _239 = _234 - float(int(_237));
    float _242 = (1.0 - _230) * _223;
    float _245 = (1.0 - (_239 * _230)) * _223;
    float _249 = (1.0 - ((1.0 - _239) * _230)) * _223;
    float _258;
    float _260;
    float _261;
    if ((_237 == 0u) || (_237 == 6u))
    {
        _258 = _223;
        _260 = _249;
        _261 = _242;
    }
    else
    {
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        if (_237 == 1u)
        {
            frontier_phi_3_4_ladder = _242;
            frontier_phi_3_4_ladder_1 = _223;
            frontier_phi_3_4_ladder_2 = _245;
        }
        else
        {
            float frontier_phi_3_4_ladder_8_ladder;
            float frontier_phi_3_4_ladder_8_ladder_1;
            float frontier_phi_3_4_ladder_8_ladder_2;
            if (_237 == 2u)
            {
                frontier_phi_3_4_ladder_8_ladder = _249;
                frontier_phi_3_4_ladder_8_ladder_1 = _223;
                frontier_phi_3_4_ladder_8_ladder_2 = _242;
            }
            else
            {
                float frontier_phi_3_4_ladder_8_ladder_13_ladder;
                float frontier_phi_3_4_ladder_8_ladder_13_ladder_1;
                float frontier_phi_3_4_ladder_8_ladder_13_ladder_2;
                if (_237 == 3u)
                {
                    frontier_phi_3_4_ladder_8_ladder_13_ladder = _223;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder_1 = _245;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder_2 = _242;
                }
                else
                {
                    bool _1220 = _237 == 4u;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder = _1220 ? _223 : _245;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder_1 = _242;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder_2 = _1220 ? _249 : _223;
                }
                frontier_phi_3_4_ladder_8_ladder = frontier_phi_3_4_ladder_8_ladder_13_ladder;
                frontier_phi_3_4_ladder_8_ladder_1 = frontier_phi_3_4_ladder_8_ladder_13_ladder_1;
                frontier_phi_3_4_ladder_8_ladder_2 = frontier_phi_3_4_ladder_8_ladder_13_ladder_2;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_8_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_8_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_8_ladder_2;
        }
        _258 = frontier_phi_3_4_ladder_2;
        _260 = frontier_phi_3_4_ladder_1;
        _261 = frontier_phi_3_4_ladder;
    }
    float _273 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _274 = _273 * _162;
    float _275 = _273 * _163;
    float _276 = _273 * _164;
    float _3019 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _3030 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _3041 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _295 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _337 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _347 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _337);
    float _348 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _337);
    float _349 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _337);
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _347 * _353;
    float _355 = _348 * _353;
    float _356 = _349 * _353;
    float _362 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _363 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _383 = fma(_276, cbSceneParam._m0[5u].z, fma(_275, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _274));
    float _386 = fma(_276, cbSceneParam._m0[6u].z, fma(_275, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _274));
    float _389 = fma(_276, cbSceneParam._m0[7u].z, fma(_275, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _274));
    uint _402 = uint(roundEven(NORMAL.w)) * 13u;
    uint _403 = _402 + 9u;
    uint _404 = _403 + uint(cbMatDynParam._m0[0u].w);
    float _410 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0)))) * cbInstanceData._m0[_404].x;
    float _411 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0)))) * cbInstanceData._m0[_404].y;
    float _412 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0)))) * cbInstanceData._m0[_404].z;
    float _3052 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _413 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
    float _3063 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _414 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
    float _3074 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
    vec4 _424 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _362, cbSceneParam._m0[86u].y * _363));
    float _427 = _424.x * TEXCOORD.z;
    float _428 = dot(vec3(_274, _275, _276), vec3(_354, _355, _356));
    float _431 = _428 * 2.0;
    float _436 = (_431 * _274) - _354;
    float _437 = (_431 * _275) - _355;
    float _438 = (_431 * _276) - _356;
    float _460 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _464 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _468 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _772;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _497 = fma(_468, cbModelParam._m0[26u].z, fma(_464, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _460));
        float _501 = fma(_468, cbModelParam._m0[27u].z, fma(_464, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _460));
        float _505 = fma(_468, cbModelParam._m0[28u].z, fma(_464, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _460));
        float _530 = _460 + _274;
        float _531 = _464 + _275;
        float _532 = _468 + _276;
        float _542 = fma(_532, cbModelParam._m0[26u].z, fma(_531, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _530)) - _497;
        float _543 = fma(_532, cbModelParam._m0[27u].z, fma(_531, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _530)) - _501;
        float _544 = fma(_532, cbModelParam._m0[28u].z, fma(_531, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _530)) - _505;
        float _548 = inversesqrt(dot(vec3(_542, _543, _544), vec3(_542, _543, _544)));
        float _561 = ((_548 * _542) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_497 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _562 = ((_548 * _543) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_501 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _563 = ((_548 * _544) / cbModelParam._m0[34u].z) + ((((((_505 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _573 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        float _600 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _601 = _600 * (_566.x + (-0.5));
        float _602 = _600 * (_566.y + (-0.5));
        float _603 = _600 * (_566.z + (-0.5));
        float _610 = exp2((_573.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_573.x + (-0.5));
        float _612 = _610 * (_573.y + (-0.5));
        float _613 = _610 * (_573.z + (-0.5));
        float _620 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _621 = _620 * (_580.x + (-0.5));
        float _622 = _620 * (_580.y + (-0.5));
        float _623 = _620 * (_580.z + (-0.5));
        float _630 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_587.x + (-0.5));
        float _632 = _630 * (_587.y + (-0.5));
        float _633 = _630 * (_587.z + (-0.5));
        float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _635 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _636 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _637 = _601 * 0.5;
        float _638 = _611 * 0.5;
        float _639 = _621 * 0.5;
        float _640 = dot(vec3(_637, _638, _639), vec3(_637, _638, _639));
        float _645 = (_640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_640);
        float _654 = (dot(vec3(_274, _275, _276), vec3(_645 * _637, _645 * _638, _645 * _639)) + 1.0) * 0.5;
        float _3100 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _664 = sqrt(((_638 * _638) + (_637 * _637)) + (_639 * _639)) / (_634 + 9.9999997473787516355514526367188e-06);
        float _3111 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _666 = _665 * 2.0;
        float _670 = (1.0 - _665) / (_665 + 1.0);
        float _3122 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
        float _680 = ((((1.0 - _671) * (_666 + 2.0)) * exp2(log2(isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0))) * (_666 + 1.0))) + _671) * _634;
        float _681 = _602 * 0.5;
        float _682 = _612 * 0.5;
        float _683 = _622 * 0.5;
        float _684 = dot(vec3(_681, _682, _683), vec3(_681, _682, _683));
        float _689 = (_684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_684);
        float _697 = (dot(vec3(_274, _275, _276), vec3(_689 * _681, _689 * _682, _689 * _683)) + 1.0) * 0.5;
        float _3133 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _706 = sqrt(((_682 * _682) + (_681 * _681)) + (_683 * _683)) / (_635 + 9.9999997473787516355514526367188e-06);
        float _3144 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _708 = _707 * 2.0;
        float _712 = (1.0 - _707) / (_707 + 1.0);
        float _3155 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
        float _722 = ((((1.0 - _713) * (_708 + 2.0)) * exp2(log2(isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0))) * (_708 + 1.0))) + _713) * _635;
        float _723 = _603 * 0.5;
        float _724 = _613 * 0.5;
        float _725 = _623 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _739 = (dot(vec3(_274, _275, _276), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3166 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _748 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_636 + 9.9999997473787516355514526367188e-06);
        float _3177 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3188 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0))) * (_750 + 1.0))) + _755) * _636;
        _772 = _603;
        _774 = _602;
        _775 = _601;
        _776 = _613;
        _777 = _612;
        _778 = _611;
        _779 = _623;
        _780 = _622;
        _781 = _621;
        _782 = _636;
        _783 = _635;
        _784 = _634;
        _785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0)));
        _786 = cbModelParam._m0[36u].z * (isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0)));
        _787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
    }
    else
    {
        _772 = _773;
        _774 = _773;
        _775 = _773;
        _776 = _773;
        _777 = _773;
        _778 = _773;
        _779 = _773;
        _780 = _773;
        _781 = _773;
        _782 = _773;
        _783 = _773;
        _784 = _773;
        _785 = 0.0;
        _786 = 0.0;
        _787 = 0.0;
    }
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _820 = fma(_468, cbModelParam._m0[30u].z, fma(_464, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _460));
        float _824 = fma(_468, cbModelParam._m0[31u].z, fma(_464, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _460));
        float _828 = fma(_468, cbModelParam._m0[32u].z, fma(_464, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _460));
        float _851 = _460 + _274;
        float _852 = _464 + _275;
        float _853 = _468 + _276;
        float _863 = fma(_853, cbModelParam._m0[30u].z, fma(_852, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _851)) - _820;
        float _864 = fma(_853, cbModelParam._m0[31u].z, fma(_852, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _851)) - _824;
        float _865 = fma(_853, cbModelParam._m0[32u].z, fma(_852, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _851)) - _828;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_820 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_824 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[35u].z) + ((((((_828 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _919 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_886.x + (-0.5));
        float _921 = _919 * (_886.y + (-0.5));
        float _922 = _919 * (_886.z + (-0.5));
        float _929 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_893.x + (-0.5));
        float _931 = _929 * (_893.y + (-0.5));
        float _932 = _929 * (_893.z + (-0.5));
        float _939 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_900.x + (-0.5));
        float _941 = _939 * (_900.y + (-0.5));
        float _942 = _939 * (_900.z + (-0.5));
        float _949 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_907.x + (-0.5));
        float _951 = _949 * (_907.y + (-0.5));
        float _952 = _949 * (_907.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_274, _275, _276), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3229 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3240 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3251 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0))) * (_983 + 1.0))) + _988) * _953;
        float _998 = _921 * 0.5;
        float _999 = _931 * 0.5;
        float _1000 = _941 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_274, _275, _276), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3262 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3273 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3284 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0))) * (_1025 + 1.0))) + _1030) * _954;
        float _1040 = _922 * 0.5;
        float _1041 = _932 * 0.5;
        float _1042 = _942 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_274, _275, _276), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3295 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3306 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3317 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0))) * (_1067 + 1.0))) + _1072) * _955;
        _1089 = _922;
        _1090 = _921;
        _1091 = _920;
        _1092 = _932;
        _1093 = _931;
        _1094 = _930;
        _1095 = _942;
        _1096 = _941;
        _1097 = _940;
        _1098 = _955;
        _1099 = _954;
        _1100 = _953;
        _1101 = cbModelParam._m0[36u].w * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1102 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1103 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
    }
    else
    {
        _1089 = _773;
        _1090 = _773;
        _1091 = _773;
        _1092 = _773;
        _1093 = _773;
        _1094 = _773;
        _1095 = _773;
        _1096 = _773;
        _1097 = _773;
        _1098 = _773;
        _1099 = _773;
        _1100 = _773;
        _1101 = 0.0;
        _1102 = 0.0;
        _1103 = 0.0;
    }
    float _1113 = (cbModelParam._m0[1u].x * (_1101 - _785)) + _785;
    float _1114 = (cbModelParam._m0[1u].x * (_1102 - _786)) + _786;
    float _1115 = (cbModelParam._m0[1u].x * (_1103 - _787)) + _787;
    float _1136 = fma(_1115, cbSceneParam._m0[89u].z, fma(_1114, cbSceneParam._m0[89u].y, _1113 * cbSceneParam._m0[89u].x));
    float _1139 = fma(_1115, cbSceneParam._m0[90u].z, fma(_1114, cbSceneParam._m0[90u].y, _1113 * cbSceneParam._m0[90u].x));
    float _1142 = fma(_1115, cbSceneParam._m0[91u].z, fma(_1114, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1113));
    float _1157 = _436 * 0.5;
    float _1158 = _437 * 0.5;
    float _1159 = _438 * 0.5;
    float _1160 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1091, _1094, _1097, _1100));
    float _1163 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1090, _1093, _1096, _1099));
    float _1166 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_1089, _1092, _1095, _1098));
    float _1218;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1191 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_772, _776, _779, _782));
        float _1195 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_774, _777, _780, _783));
        float _1199 = dot(vec4(_1157, _1158, _1159, 1.0), vec4(_775, _778, _781, _784));
        float _1206 = dot(vec4(cbModelParam._m0[39u]), vec4(_1157, _1158, _1159, 1.0));
        _1218 = dot(vec3(isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1206) ? 0.0 : (isnan(0.0) ? _1206 : max(0.0, _1206))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1218 = 1.0;
    }
    float _1231;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1222 = dot(vec4(cbModelParam._m0[40u]), vec4(_1157, _1158, _1159, 1.0));
        _1231 = dot(vec3(isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)), isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)), isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1222) ? 0.0 : (isnan(0.0) ? _1222 : max(0.0, _1222))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1231 = 1.0;
    }
    float _1235 = (_1231 * cbModelParam._m0[1u].x) + (_1218 * (1.0 - cbModelParam._m0[1u].x));
    float _1244 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1326;
    float _1328;
    float _1330;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1293 = fma(_468, cbModelParam._m0[13u].z, fma(_464, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _460)) + cbModelParam._m0[13u].w;
        float _1297 = fma(_468, cbModelParam._m0[14u].z, fma(_464, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _460)) + cbModelParam._m0[14u].w;
        float _1301 = fma(_468, cbModelParam._m0[15u].z, fma(_464, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _460)) + cbModelParam._m0[15u].w;
        float _1304 = fma(_438, cbModelParam._m0[13u].z, fma(_437, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _436));
        float _1307 = fma(_438, cbModelParam._m0[14u].z, fma(_437, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _436));
        float _1310 = fma(_438, cbModelParam._m0[15u].z, fma(_437, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _436));
        float _1336;
        if (_1304 > 0.0)
        {
            _1336 = abs((1.0 - _1293) / _1304);
        }
        else
        {
            float frontier_phi_27_25_ladder;
            if (_1304 < 0.0)
            {
                frontier_phi_27_25_ladder = abs((_1293 + 1.0) / _1304);
            }
            else
            {
                frontier_phi_27_25_ladder = 5000.0;
            }
            _1336 = frontier_phi_27_25_ladder;
        }
        float _1563;
        if (_1307 > 0.0)
        {
            _1563 = abs((1.0 - _1297) / _1307);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1297 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1563 = frontier_phi_36_32_ladder;
        }
        float _1755;
        if (_1310 > 0.0)
        {
            _1755 = abs((1.0 - _1301) / _1310);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1301 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _1755 = frontier_phi_48_43_ladder;
        }
        float _1757 = isnan(_1563) ? _1336 : (isnan(_1336) ? _1563 : min(_1336, _1563));
        float _1758 = isnan(_1755) ? _1757 : (isnan(_1757) ? _1755 : min(_1757, _1755));
        float _1762 = (_1758 * _1304) + _1293;
        float _1763 = (_1758 * _1307) + _1297;
        float _1764 = (_1758 * _1310) + _1301;
        float _1765 = _1758 * 9.9999997473787516355514526367188e-05;
        float _1767 = (-1.0) - _1765;
        float _1769 = _1765 + 1.0;
        float frontier_phi_26_48_ladder;
        float frontier_phi_26_48_ladder_1;
        float frontier_phi_26_48_ladder_2;
        if ((_1764 > _1769) || ((_1764 < _1767) || ((_1763 > _1769) || ((_1763 < _1767) || ((_1762 < _1767) || (_1762 > _1769))))))
        {
            frontier_phi_26_48_ladder = 0.0;
            frontier_phi_26_48_ladder_1 = 0.0;
            frontier_phi_26_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1861 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1764, cbModelParam._m0[9u].z, fma(_1763, cbModelParam._m0[9u].y, _1762 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1764, cbModelParam._m0[10u].z, fma(_1763, cbModelParam._m0[10u].y, _1762 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1764, cbModelParam._m0[11u].z, fma(_1763, cbModelParam._m0[11u].y, _1762 * cbModelParam._m0[11u].x))), _1244);
            frontier_phi_26_48_ladder = _1861.z * cbModelParam._m0[1u].y;
            frontier_phi_26_48_ladder_1 = _1861.y * cbModelParam._m0[1u].y;
            frontier_phi_26_48_ladder_2 = _1861.x * cbModelParam._m0[1u].y;
        }
        _1326 = frontier_phi_26_48_ladder_2;
        _1328 = frontier_phi_26_48_ladder_1;
        _1330 = frontier_phi_26_48_ladder;
    }
    else
    {
        vec4 _1314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_436, _437, _438), _1244);
        _1326 = _1314.x * cbModelParam._m0[1u].y;
        _1328 = _1314.y * cbModelParam._m0[1u].y;
        _1330 = _1314.z * cbModelParam._m0[1u].y;
    }
    float _1333 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1426;
    float _1428;
    float _1430;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1390 = fma(_468, cbModelParam._m0[21u].z, fma(_464, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _460)) + cbModelParam._m0[21u].w;
        float _1394 = fma(_468, cbModelParam._m0[22u].z, fma(_464, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _460)) + cbModelParam._m0[22u].w;
        float _1398 = fma(_468, cbModelParam._m0[23u].z, fma(_464, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _460)) + cbModelParam._m0[23u].w;
        float _1401 = fma(_438, cbModelParam._m0[21u].z, fma(_437, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _436));
        float _1404 = fma(_438, cbModelParam._m0[22u].z, fma(_437, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _436));
        float _1407 = fma(_438, cbModelParam._m0[23u].z, fma(_437, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _436));
        float _1568;
        if (_1401 > 0.0)
        {
            _1568 = abs((1.0 - _1390) / _1401);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1390 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1568 = frontier_phi_38_34_ladder;
        }
        float _1782;
        if (_1404 > 0.0)
        {
            _1782 = abs((1.0 - _1394) / _1404);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1394 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1782 = frontier_phi_50_45_ladder;
        }
        float _1933;
        if (_1407 > 0.0)
        {
            _1933 = abs((1.0 - _1398) / _1407);
        }
        else
        {
            float frontier_phi_59_56_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_59_56_ladder = abs((_1398 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_59_56_ladder = 5000.0;
            }
            _1933 = frontier_phi_59_56_ladder;
        }
        float _1935 = isnan(_1782) ? _1568 : (isnan(_1568) ? _1782 : min(_1568, _1782));
        float _1936 = isnan(_1933) ? _1935 : (isnan(_1935) ? _1933 : min(_1935, _1933));
        float _1940 = (_1936 * _1401) + _1390;
        float _1941 = (_1936 * _1404) + _1394;
        float _1942 = (_1936 * _1407) + _1398;
        float _1943 = _1936 * 9.9999997473787516355514526367188e-05;
        float _1944 = (-1.0) - _1943;
        float _1946 = _1943 + 1.0;
        float frontier_phi_35_59_ladder;
        float frontier_phi_35_59_ladder_1;
        float frontier_phi_35_59_ladder_2;
        if ((_1942 > _1946) || ((_1942 < _1944) || ((_1941 > _1946) || ((_1941 < _1944) || ((_1940 < _1944) || (_1940 > _1946))))))
        {
            frontier_phi_35_59_ladder = 0.0;
            frontier_phi_35_59_ladder_1 = 0.0;
            frontier_phi_35_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2170 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1942, cbModelParam._m0[17u].z, fma(_1941, cbModelParam._m0[17u].y, _1940 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1942, cbModelParam._m0[18u].z, fma(_1941, cbModelParam._m0[18u].y, _1940 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1942, cbModelParam._m0[19u].z, fma(_1941, cbModelParam._m0[19u].y, _1940 * cbModelParam._m0[19u].x))), _1333);
            frontier_phi_35_59_ladder = _2170.z * cbModelParam._m0[1u].z;
            frontier_phi_35_59_ladder_1 = _2170.y * cbModelParam._m0[1u].z;
            frontier_phi_35_59_ladder_2 = _2170.x * cbModelParam._m0[1u].z;
        }
        _1426 = frontier_phi_35_59_ladder_2;
        _1428 = frontier_phi_35_59_ladder_1;
        _1430 = frontier_phi_35_59_ladder;
    }
    else
    {
        vec4 _1410 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_436, _437, _438), _1333);
        _1426 = _1410.x * cbModelParam._m0[1u].z;
        _1428 = _1410.y * cbModelParam._m0[1u].z;
        _1430 = _1410.z * cbModelParam._m0[1u].z;
    }
    float _1442 = _427 * 0.01200000010430812835693359375;
    float _1444 = _1442 * ((cbModelParam._m0[1u].w * (_1426 - _1326)) + _1326);
    float _1445 = _1442 * ((cbModelParam._m0[1u].w * (_1428 - _1328)) + _1328);
    float _1446 = _1442 * ((cbModelParam._m0[1u].w * (_1430 - _1330)) + _1330);
    float _1449 = fma(_1446, cbSceneParam._m0[89u].z, fma(_1445, cbSceneParam._m0[89u].y, _1444 * cbSceneParam._m0[89u].x));
    float _1452 = fma(_1446, cbSceneParam._m0[90u].z, fma(_1445, cbSceneParam._m0[90u].y, _1444 * cbSceneParam._m0[90u].x));
    float _1455 = fma(_1446, cbSceneParam._m0[91u].z, fma(_1445, cbSceneParam._m0[91u].y, _1444 * cbSceneParam._m0[91u].x));
    vec4 _1463 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_362, _363));
    float _1465 = _1463.w;
    float _1477 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1465);
    float _1478 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1465);
    float _1479 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1465);
    uvec4 _1483 = floatBitsToUint(cbInstanceData._m0[_402 + 5u]);
    uint _1485 = _1483.x * 14u;
    uint _1486 = _1485 + 13u;
    float _1493 = _427 + (-1.0);
    float _1499 = (cbLight._m0[_1486].x * _1493) + 1.0;
    float _1500 = (cbLight._m0[_1486].y * _1493) + 1.0;
    float _1501 = (cbLight._m0[_1486].z * _1493) + 1.0;
    float _1502 = (cbLight._m0[_1486].w * _1493) + 1.0;
    uint _1503 = _1485 + 5u;
    float _1509 = isnan(1.0) ? _1500 : (isnan(_1500) ? 1.0 : min(_1500, 1.0));
    uint _1513 = _1485 + 4u;
    float _1522 = isnan(1.0) ? _1499 : (isnan(_1499) ? 1.0 : min(_1499, 1.0));
    uint _1526 = _1485 | 1u;
    float _1537 = dot(vec3(cbLight._m0[_1485].xyz), vec3(_274, _275, _276));
    float _1540 = dot(vec3(cbLight._m0[_1526].xyz), vec3(_274, _275, _276));
    float _3453 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
    float _3464 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
    float _1545 = (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * 0.3183098733425140380859375;
    float _1547 = (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * 0.3183098733425140380859375;
    float _1554 = ((cbLight._m0[_1503].x * _1509) * _1547) + (((cbLight._m0[_1513].x * _1477) * _1522) * _1545);
    float _1555 = ((_1509 * cbLight._m0[_1503].y) * _1547) + (((cbLight._m0[_1513].y * _1478) * _1522) * _1545);
    float _1556 = ((_1509 * cbLight._m0[_1503].z) * _1547) + (((cbLight._m0[_1513].z * _1479) * _1522) * _1545);
    uvec4 _1560 = floatBitsToUint(cbLight._m0[_1485 + 12u]);
    bool _1562 = _1560.x == 0u;
    float _1573;
    float _1575;
    float _1577;
    if (_1562)
    {
        _1573 = _1554;
        _1575 = _1555;
        _1577 = _1556;
    }
    else
    {
        uint _1581 = _1485 + 6u;
        float _1597 = (dot(vec3(cbLight._m0[_1485 + 2u].xyz), vec3(_274, _275, _276)) * 0.5) + 0.5;
        float _1598 = _1597 * _1597;
        float _3475 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1600 = isnan(1.0) ? _1501 : (isnan(_1501) ? 1.0 : min(_1501, 1.0));
        _1573 = (((cbLight._m0[_1581].x * 0.3183098733425140380859375) * _1599) * _1600) + _1554;
        _1575 = (((cbLight._m0[_1581].y * 0.3183098733425140380859375) * _1599) * _1600) + _1555;
        _1577 = (((cbLight._m0[_1581].z * 0.3183098733425140380859375) * _1599) * _1600) + _1556;
    }
    bool _1580 = _1560.y == 0u;
    float _1618;
    float _1620;
    float _1622;
    if (_1580)
    {
        _1618 = _1573;
        _1620 = _1575;
        _1622 = _1577;
    }
    else
    {
        uint _1726 = _1485 + 7u;
        float _1742 = (dot(vec3(cbLight._m0[_1485 + 3u].xyz), vec3(_274, _275, _276)) * 0.5) + 0.5;
        float _1743 = _1742 * _1742;
        float _3491 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1745 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
        _1618 = (((cbLight._m0[_1726].x * 0.3183098733425140380859375) * _1744) * _1745) + _1573;
        _1620 = (((cbLight._m0[_1726].y * 0.3183098733425140380859375) * _1744) * _1745) + _1575;
        _1622 = (((cbLight._m0[_1726].z * 0.3183098733425140380859375) * _1744) * _1745) + _1577;
    }
    uint _1624 = _1485 + 8u;
    float _1630 = cbLight._m0[_1485].x + _354;
    float _1631 = cbLight._m0[_1485].y + _355;
    float _1632 = cbLight._m0[_1485].z + _356;
    float _1636 = inversesqrt(dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632)));
    float _1640 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1485].xyz));
    float _3507 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1643 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _1644 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _1645 = dot(vec3(cbLight._m0[_1485].xyz), vec3(_1630 * _1636, _1631 * _1636, _1632 * _1636));
    float _3529 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1656 = (exp2(log2(1.0 - (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1662 = (0.5 / ((_1643 + 9.9999999392252902907785028219223e-09) + _1644)) * _1643;
    float _3540 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1664 = (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * 0.31831014156341552734375;
    uint _1678 = _1485 + 9u;
    float _1684 = cbLight._m0[_1526].x + _354;
    float _1685 = cbLight._m0[_1526].y + _355;
    float _1686 = cbLight._m0[_1526].z + _356;
    float _1690 = inversesqrt(dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686)));
    float _1694 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1526].xyz));
    float _3551 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1697 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _1698 = dot(vec3(cbLight._m0[_1526].xyz), vec3(_1684 * _1690, _1685 * _1690, _1686 * _1690));
    float _3562 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1707 = (exp2(log2(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1711 = (0.5 / ((_1697 + 9.9999999392252902907785028219223e-09) + _1644)) * _1697;
    float _3573 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1713 = (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.31831014156341552734375;
    float _1723 = (((_1707 * cbLight._m0[_1678].x) * _1713) * _1509) + ((((cbLight._m0[_1624].x * _1477) * _1656) * _1664) * _1522);
    float _1724 = (((_1707 * cbLight._m0[_1678].y) * _1713) * _1509) + ((((cbLight._m0[_1624].y * _1478) * _1656) * _1664) * _1522);
    float _1725 = (((_1707 * cbLight._m0[_1678].z) * _1713) * _1509) + ((((cbLight._m0[_1624].z * _1479) * _1656) * _1664) * _1522);
    float _1787;
    float _1789;
    float _1791;
    if (_1562)
    {
        _1787 = _1723;
        _1789 = _1724;
        _1791 = _1725;
    }
    else
    {
        uint _1793 = _1485 + 10u;
        uint _1799 = _1485 + 2u;
        float _1805 = cbLight._m0[_1799].x + _354;
        float _1806 = cbLight._m0[_1799].y + _355;
        float _1807 = cbLight._m0[_1799].z + _356;
        float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
        float _1815 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1799].xyz));
        float _3584 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1818 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1819 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_1805 * _1811, _1806 * _1811, _1807 * _1811));
        float _3595 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1828 = (exp2(log2(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1832 = (0.5 / ((_1818 + 9.9999999392252902907785028219223e-09) + _1644)) * _1818;
        float _3606 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1834 = (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * 0.31831014156341552734375;
        float _1835 = isnan(1.0) ? _1501 : (isnan(_1501) ? 1.0 : min(_1501, 1.0));
        _1787 = (((_1828 * cbLight._m0[_1793].x) * _1834) * _1835) + _1723;
        _1789 = (((_1828 * cbLight._m0[_1793].y) * _1834) * _1835) + _1724;
        _1791 = (((_1828 * cbLight._m0[_1793].z) * _1834) * _1835) + _1725;
    }
    float _1870;
    float _1872;
    float _1874;
    if (_1580)
    {
        _1870 = _1787;
        _1872 = _1789;
        _1874 = _1791;
    }
    else
    {
        uint _1881 = _1485 + 11u;
        uint _1887 = _1485 + 3u;
        float _1893 = cbLight._m0[_1887].x + _354;
        float _1894 = cbLight._m0[_1887].y + _355;
        float _1895 = cbLight._m0[_1887].z + _356;
        float _1899 = inversesqrt(dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895)));
        float _1903 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1887].xyz));
        float _3622 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1906 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1907 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_1893 * _1899, _1894 * _1899, _1895 * _1899));
        float _3633 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1916 = (exp2(log2(1.0 - (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1920 = (0.5 / ((_1906 + 9.9999999392252902907785028219223e-09) + _1644)) * _1906;
        float _3644 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1922 = (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * 0.31831014156341552734375;
        float _1923 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
        _1870 = (((_1916 * cbLight._m0[_1881].x) * _1922) * _1923) + _1787;
        _1872 = (((_1916 * cbLight._m0[_1881].y) * _1922) * _1923) + _1789;
        _1874 = (((_1916 * cbLight._m0[_1881].z) * _1922) * _1923) + _1791;
    }
    float _2058;
    float _2060;
    float _2062;
    float _2064;
    float _2066;
    float _2068;
    if (_1483.y == 0u)
    {
        float _1998 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1999 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1998;
        float _2000 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1998;
        float _2001 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1998;
        uvec4 _2013 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2014 = _2013.x;
        uint _2025 = uint((float(_2013.y) * floor(float(uint(cbSceneParam._m0[85u].y * _363) / _2014))) + floor(float(uint(cbSceneParam._m0[85u].x * _362) / _2014)));
        float _2035 = (log2(_2001 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2036 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        uint _2039 = uint(isnan(14.0) ? _2036 : (isnan(_2036) ? 14.0 : min(_2036, 14.0)));
        uvec4 _2044 = texelFetch(g_lightClusterGridBuffer, int(((_2039 << 2u) + (_2025 << 6u)) >> 2u));
        uint _2045 = _2044.x;
        uint _2046 = _2013.z;
        float _2175;
        float _2177;
        float _2179;
        float _2181;
        float _2183;
        float _2185;
        if (((((1u << ((_2046 >> 4u) & 15u)) + 4294967295u) & _2045) == 0u) || ((_2046 & 240u) == 0u))
        {
            _2175 = 0.0;
            _2177 = 0.0;
            _2179 = 0.0;
            _2181 = 0.0;
            _2183 = 0.0;
            _2185 = 0.0;
        }
        else
        {
            float _2176;
            float _2178;
            float _2180;
            float _2182;
            float _2184;
            float _2186;
            float _2326 = 0.0;
            float _2327 = 0.0;
            float _2328 = 0.0;
            float _2329 = 0.0;
            float _2330 = 0.0;
            float _2331 = 0.0;
            uint _2332 = 0u;
            uint _2341;
            bool _2342;
            for (;;)
            {
                _2341 = texelFetch(g_lightClassification, int((((_2039 << 5u) + (_2025 << 9u)) + (_2332 << 2u)) >> 2u)).x;
                _2342 = _2341 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2342)
                {
                    frontier_phi_74_pred = _2331;
                    frontier_phi_74_pred_1 = _2330;
                    frontier_phi_74_pred_2 = _2329;
                    frontier_phi_74_pred_3 = _2328;
                    frontier_phi_74_pred_4 = _2327;
                    frontier_phi_74_pred_5 = _2326;
                }
                else
                {
                    float _2450;
                    float _2451;
                    float _2452;
                    float _2453;
                    float _2454;
                    float _2455;
                    uint _2456;
                    _2450 = _2326;
                    _2451 = _2327;
                    _2452 = _2328;
                    _2453 = _2329;
                    _2454 = _2330;
                    _2455 = _2331;
                    _2456 = _2341;
                    float _2382;
                    float _2383;
                    float _2384;
                    float _2385;
                    float _2386;
                    float _2387;
                    for (;;)
                    {
                        uint _2460 = uint(findLSB(_2456)) + (_2332 << 5u);
                        uint _2457 = (_2456 + 4294967295u) & _2456;
                        uint _2462 = _2460 * 48u;
                        vec4 _2476 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2462)).x, texelFetch(g_PointLightRenderingBuffer, int(_2462 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2462 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2462 + 3u)).x));
                        uint _2482 = (_2460 * 48u) + 4u;
                        vec4 _2495 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2482)).x, texelFetch(g_PointLightRenderingBuffer, int(_2482 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2482 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2482 + 3u)).x));
                        uint _2501 = (_2460 * 48u) + 8u;
                        vec3 _2512 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2501)).x, texelFetch(g_PointLightRenderingBuffer, int(_2501 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2501 + 2u)).x));
                        float _2516 = _2476.x - _1999;
                        float _2517 = _2476.y - _2000;
                        float _2518 = _2476.z - _2001;
                        float _2519 = dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518));
                        float _2522 = inversesqrt(_2519);
                        float _2531 = 1.0 - (_2519 * _2476.w);
                        float _3670 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
                        float _2532 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
                        float _2533 = sqrt(_2519) * _2495.w;
                        float _2536 = 1.39999997615814208984375 / (_2533 + 1.39999997615814208984375);
                        float _2537 = _2536 * _2536;
                        float _2540 = ((1.0 - _2537) * dot(vec3(_383, _386, _389), vec3(_2522 * _2516, _2522 * _2517, _2522 * _2518))) + _2537;
                        float _2543 = _2533 * _2533;
                        float _2547 = ((isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0))) * _2532) / ((_2543 * 0.699999988079071044921875) + 1.0);
                        float _2551 = (-0.0) - _1999;
                        float _2552 = (-0.0) - _2000;
                        float _2553 = (-0.0) - _2001;
                        float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
                        float _2561 = dot(vec3(_383, _386, _389), vec3(_2557 * _2551, _2557 * _2552, _2557 * _2553));
                        float _3686 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
                        float _3697 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
                        float _2565 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
                        float _2569 = (0.5 / (((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) + 9.9999999392252902907785028219223e-09) + _2565)) * _2565;
                        float _3708 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
                        float _2578 = (((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 3.1415927410125732421875) / ((_2543 * 2.1991131305694580078125) + 3.141590118408203125)) * _2532;
                        _2385 = (_2547 * _2495.x) + _2453;
                        _2386 = (_2547 * _2495.y) + _2454;
                        _2387 = (_2547 * _2495.z) + _2455;
                        _2382 = (_2578 * _2512.x) + _2450;
                        _2383 = (_2578 * _2512.y) + _2451;
                        _2384 = (_2578 * _2512.z) + _2452;
                        if (_2457 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2450 = _2382;
                            _2451 = _2383;
                            _2452 = _2384;
                            _2453 = _2385;
                            _2454 = _2386;
                            _2455 = _2387;
                            _2456 = _2457;
                        }
                    }
                    frontier_phi_74_pred = _2387;
                    frontier_phi_74_pred_1 = _2386;
                    frontier_phi_74_pred_2 = _2385;
                    frontier_phi_74_pred_3 = _2384;
                    frontier_phi_74_pred_4 = _2383;
                    frontier_phi_74_pred_5 = _2382;
                }
                _2186 = frontier_phi_74_pred;
                _2184 = frontier_phi_74_pred_1;
                _2182 = frontier_phi_74_pred_2;
                _2180 = frontier_phi_74_pred_3;
                _2178 = frontier_phi_74_pred_4;
                _2176 = frontier_phi_74_pred_5;
                uint _2333 = _2332 + 1u;
                if (_2333 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2326 = _2176;
                    _2327 = _2178;
                    _2328 = _2180;
                    _2329 = _2182;
                    _2330 = _2184;
                    _2331 = _2186;
                    _2332 = _2333;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2175 = _2176;
            _2177 = _2178;
            _2179 = _2180;
            _2181 = _2182;
            _2183 = _2184;
            _2185 = _2186;
        }
        uvec4 _2189 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2190 = _2189.z;
        uint _2192 = (_2190 >> 8u) & 15u;
        float _2297;
        float _2299;
        float _2301;
        float _2303;
        float _2305;
        float _2307;
        if (((4294967295u << _2192) & _2045) == 0u)
        {
            _2297 = _2175;
            _2299 = _2177;
            _2301 = _2179;
            _2303 = _2181;
            _2305 = _2183;
            _2307 = _2185;
        }
        else
        {
            float _2322 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2192 < ((_2190 >> 12u) & 15u))
            {
                float _2298;
                float _2300;
                float _2302;
                float _2304;
                float _2306;
                float _2308;
                float _2433 = _2175;
                float _2434 = _2177;
                float _2435 = _2179;
                float _2436 = _2181;
                float _2437 = _2183;
                float _2438 = _2185;
                uint _2439 = _2192;
                uint _2448;
                bool _2449;
                for (;;)
                {
                    _2448 = texelFetch(g_lightClassification, int((((_2039 << 5u) + (_2025 << 9u)) + (_2439 << 2u)) >> 2u)).x;
                    _2449 = _2448 == 0u;
                    float frontier_phi_80_pred;
                    float frontier_phi_80_pred_1;
                    float frontier_phi_80_pred_2;
                    float frontier_phi_80_pred_3;
                    float frontier_phi_80_pred_4;
                    float frontier_phi_80_pred_5;
                    if (_2449)
                    {
                        frontier_phi_80_pred = _2438;
                        frontier_phi_80_pred_1 = _2437;
                        frontier_phi_80_pred_2 = _2436;
                        frontier_phi_80_pred_3 = _2435;
                        frontier_phi_80_pred_4 = _2434;
                        frontier_phi_80_pred_5 = _2433;
                    }
                    else
                    {
                        float _2583;
                        float _2584;
                        float _2585;
                        float _2586;
                        float _2587;
                        float _2588;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2596 = _2433;
                        float _2597 = _2434;
                        float _2598 = _2435;
                        float _2599 = _2436;
                        float _2600 = _2437;
                        float _2601 = _2438;
                        uint _2602 = _2448;
                        uint _2603;
                        vec4 _2628;
                        float _2629;
                        vec4 _2644;
                        vec3 _2656;
                        vec4 _2672;
                        vec4 _2688;
                        float _2735;
                        bool _2736;
                        for (;;)
                        {
                            uint _2613 = ((_2439 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2602));
                            _2603 = (_2602 + 4294967295u) & _2602;
                            uint _2615 = _2613 * 40u;
                            _2628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 3u)).x));
                            _2629 = _2628.w;
                            uint _2631 = (_2613 * 40u) + 4u;
                            _2644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 3u)).x));
                            uint _2646 = (_2613 * 40u) + 8u;
                            _2656 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 2u)).x));
                            uint _2659 = (_2613 * 40u) + 16u;
                            _2672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2659 + 3u)).x));
                            uint _2675 = (_2613 * 40u) + 20u;
                            _2688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 3u)).x));
                            uint _2691 = (_2613 * 40u) + 24u;
                            vec4 _2704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 3u)).x));
                            uint _2710 = (_2613 * 40u) + 28u;
                            vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 3u)).x));
                            _2735 = fma(_2001, _2723.z, fma(_2000, _2723.y, _2723.x * _1999)) + _2723.w;
                            _2736 = !((fma(_2001, _2704.z, fma(_2000, _2704.y, _2704.x * _1999)) + _2704.w) <= 0.0);
                            float frontier_phi_86_pred;
                            float frontier_phi_86_pred_1;
                            float frontier_phi_86_pred_2;
                            float frontier_phi_86_pred_3;
                            float frontier_phi_86_pred_4;
                            float frontier_phi_86_pred_5;
                            if (_2736)
                            {
                                float _2763 = _2628.x - _1999;
                                float _2764 = _2628.y - _2000;
                                float _2765 = _2628.z - _2001;
                                float _2766 = dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765));
                                float _2769 = inversesqrt(_2766);
                                float _2770 = _2769 * _2763;
                                float _2771 = _2769 * _2764;
                                float _2772 = _2769 * _2765;
                                float _2776 = 1.0 - (_2766 / (_2629 * _2629));
                                float _3719 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                                float _2777 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
                                float _2781 = sqrt(_2766) * _2644.w;
                                float _2783 = 1.39999997615814208984375 / (_2781 + 1.39999997615814208984375);
                                float _2784 = _2783 * _2783;
                                float _2785 = 1.0 - _2784;
                                float _2787 = (_2785 * dot(vec3(_2770, _2771, _2772), vec3(_383, _386, _389))) + _2784;
                                float _2790 = _2781 * _2781;
                                float _2794 = (fma(_2001, _2672.z, fma(_2000, _2672.y, _2672.x * _1999)) + _2672.w) / _2735;
                                float _2795 = (fma(_2001, _2688.z, fma(_2000, _2688.y, _2688.x * _1999)) + _2688.w) / _2735;
                                float _2799 = 1.0 - dot(vec2(_2794, _2795), vec2(_2794, _2795));
                                float _3735 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                                float _2800 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
                                float _2801 = _2800 * (((isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0))) * _2777) / ((_2790 * 0.699999988079071044921875) + 1.0));
                                float _2811 = dot(vec3(_383, _386, _389), vec3((-0.0) - (_1999 * _2322), (-0.0) - (_2000 * _2322), (-0.0) - (_2001 * _2322)));
                                float _3746 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                                float _2819 = (_2785 * dot(vec3(_383, _386, _389), vec3(_2770, _2771, _2772))) + _2784;
                                float _3757 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                                float _2820 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
                                float _2824 = (0.5 / (((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) + 9.9999999392252902907785028219223e-09) + _2820)) * _2820;
                                float _3768 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                                float _2831 = (_2800 * _2777) * (((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 3.1415927410125732421875) / ((_2790 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_86_pred = _2801 * _2644.y;
                                frontier_phi_86_pred_1 = _2801 * _2644.x;
                                frontier_phi_86_pred_2 = _2831 * _2656.z;
                                frontier_phi_86_pred_3 = _2831 * _2656.y;
                                frontier_phi_86_pred_4 = _2831 * _2656.x;
                                frontier_phi_86_pred_5 = _2801 * _2644.z;
                            }
                            else
                            {
                                frontier_phi_86_pred = 0.0;
                                frontier_phi_86_pred_1 = 0.0;
                                frontier_phi_86_pred_2 = 0.0;
                                frontier_phi_86_pred_3 = 0.0;
                                frontier_phi_86_pred_4 = 0.0;
                                frontier_phi_86_pred_5 = 0.0;
                            }
                            _2839 = frontier_phi_86_pred;
                            _2838 = frontier_phi_86_pred_1;
                            _2837 = frontier_phi_86_pred_2;
                            _2836 = frontier_phi_86_pred_3;
                            _2835 = frontier_phi_86_pred_4;
                            _2840 = frontier_phi_86_pred_5;
                            _2586 = _2838 + _2599;
                            _2587 = _2839 + _2600;
                            _2588 = _2840 + _2601;
                            _2583 = _2835 + _2596;
                            _2584 = _2836 + _2597;
                            _2585 = _2837 + _2598;
                            if (_2603 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2596 = _2583;
                                _2597 = _2584;
                                _2598 = _2585;
                                _2599 = _2586;
                                _2600 = _2587;
                                _2601 = _2588;
                                _2602 = _2603;
                                continue;
                            }
                        }
                        frontier_phi_80_pred = _2588;
                        frontier_phi_80_pred_1 = _2587;
                        frontier_phi_80_pred_2 = _2586;
                        frontier_phi_80_pred_3 = _2585;
                        frontier_phi_80_pred_4 = _2584;
                        frontier_phi_80_pred_5 = _2583;
                    }
                    _2308 = frontier_phi_80_pred;
                    _2306 = frontier_phi_80_pred_1;
                    _2304 = frontier_phi_80_pred_2;
                    _2302 = frontier_phi_80_pred_3;
                    _2300 = frontier_phi_80_pred_4;
                    _2298 = frontier_phi_80_pred_5;
                    uint _2440 = _2439 + 1u;
                    if (_2440 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2433 = _2298;
                        _2434 = _2300;
                        _2435 = _2302;
                        _2436 = _2304;
                        _2437 = _2306;
                        _2438 = _2308;
                        _2439 = _2440;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2308;
                frontier_phi_68_69_ladder_1 = _2306;
                frontier_phi_68_69_ladder_2 = _2302;
                frontier_phi_68_69_ladder_3 = _2300;
                frontier_phi_68_69_ladder_4 = _2298;
                frontier_phi_68_69_ladder_5 = _2304;
            }
            else
            {
                frontier_phi_68_69_ladder = _2185;
                frontier_phi_68_69_ladder_1 = _2183;
                frontier_phi_68_69_ladder_2 = _2179;
                frontier_phi_68_69_ladder_3 = _2177;
                frontier_phi_68_69_ladder_4 = _2175;
                frontier_phi_68_69_ladder_5 = _2181;
            }
            _2297 = frontier_phi_68_69_ladder_4;
            _2299 = frontier_phi_68_69_ladder_3;
            _2301 = frontier_phi_68_69_ladder_2;
            _2303 = frontier_phi_68_69_ladder_5;
            _2305 = frontier_phi_68_69_ladder_1;
            _2307 = frontier_phi_68_69_ladder;
        }
        float _2312 = isnan(1.0) ? _427 : (isnan(_427) ? 1.0 : min(_427, 1.0));
        _2058 = (_2312 * _2303) + _1618;
        _2060 = (_2312 * _2305) + _1620;
        _2062 = (_2312 * _2307) + _1622;
        _2064 = ((_2297 * 0.039999999105930328369140625) * _2312) + _1870;
        _2066 = ((_2299 * 0.039999999105930328369140625) * _2312) + _1872;
        _2068 = ((_2301 * 0.039999999105930328369140625) * _2312) + _1874;
    }
    else
    {
        _2058 = _1618;
        _2060 = _1620;
        _2062 = _1622;
        _2064 = _1870;
        _2066 = _1872;
        _2068 = _1874;
    }
    uint _2074 = _403 + uint(cbMatDynParam._m0[0u].w);
    float _2080 = (cbSceneParam._m0[72u].y * _258) * cbInstanceData._m0[_2074].x;
    float _2081 = (cbSceneParam._m0[72u].y * _260) * cbInstanceData._m0[_2074].y;
    float _2082 = (cbSceneParam._m0[72u].y * _261) * cbInstanceData._m0[_2074].z;
    float _3784 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3795 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _3806 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _2099 = (((isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_2058 + ((isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))) * _427))) + ((_2064 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _1235)) * cbPerFrame._m0[3u].x)) + _2080;
    float _2101 = (_2081 + ((_2066 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _1235)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_2060 + ((isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0))) * _427)));
    float _2103 = (_2082 + ((_2068 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _1235)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_2062 + ((isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))) * _427)));
    float _3832 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2116 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    uint _2117 = _402 + 6u;
    float _2125 = _362 / cbSceneParam._m0[86u].x;
    float _2126 = _363 / cbSceneParam._m0[86u].y;
    vec4 _2140 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2125, _2126, (log2((isnan(cbSceneParam._m0[77u].w) ? _295 : (isnan(_295) ? cbSceneParam._m0[77u].w : min(_295, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2142 = _2140.x;
    float _2143 = _2140.y;
    float _2144 = _2140.z;
    float _2145 = _2140.w;
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    if (_295 > cbSceneParam._m0[78u].w)
    {
        float _2200 = isnan(_295) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _295 : min(cbSceneParam._m0[80u].w, _295));
        float _2201 = _2200 / _295;
        float _2212 = _2201 * _347;
        float _2213 = _348 * _2201;
        float _2214 = (-0.0) - _2213;
        float _2216 = _2201 * _349;
        float _2218 = (cbSceneParam._m0[77u].w * _2214) / _2200;
        float _2219 = _2218 + cbSceneParam._m0[79u].w;
        float _2220 = cbSceneParam._m0[79u].w - _2213;
        float _2226 = sqrt(((_2212 * _2212) + (_2213 * _2213)) + (_2216 * _2216));
        float _2229 = (1.0 - (cbSceneParam._m0[77u].w / _2200)) * _2226;
        float _2234 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2236 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2395;
        if (abs((_2214 - _2218) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2395 = ((((_2219 > 0.0) ? exp2(_2234 * _2219) : (2.0 - exp2(_2236 * _2219))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2229;
        }
        else
        {
            float _2355 = 1.0 / cbSceneParam._m0[80u].x;
            float _2356 = isnan(_2220) ? _2219 : (isnan(_2219) ? _2220 : max(_2219, _2220));
            float _2357 = isnan(_2220) ? _2219 : (isnan(_2219) ? _2220 : min(_2219, _2220));
            float _2366 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : min(_2356, 0.0));
            float _2367 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : min(_2357, 0.0));
            _2395 = ((abs(_2226 / _2214) * cbSceneParam._m0[80u].y) * ((((_2366 - _2367) * 2.0) - ((exp2(_2234 * (isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0)))) - exp2(_2234 * (isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0))))) * _2355)) - ((exp2(_2236 * _2366) - exp2(_2236 * _2367)) * _2355))) + (_2229 * cbSceneParam._m0[80u].z);
        }
        vec4 _2397 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2125, _2126, 1.0), 0.0);
        float _2406 = exp2((_2395 * (-1.44269502162933349609375)) * (1.0 - _2397.w));
        float _2407 = log2(_2406);
        float _2423 = log2(_2145);
        _2238 = (exp2(_2423 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2407 * cbSceneParam._m0[78u].x)) * _2397.x) / cbSceneParam._m0[78u].x)) + _2142;
        _2240 = (exp2(_2423 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2407 * cbSceneParam._m0[78u].y)) * _2397.y) / cbSceneParam._m0[78u].y)) + _2143;
        _2242 = (exp2(_2423 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2407 * cbSceneParam._m0[78u].z)) * _2397.z) / cbSceneParam._m0[78u].z)) + _2144;
        _2244 = _2406 * _2145;
    }
    else
    {
        _2238 = _2142;
        _2240 = _2143;
        _2242 = _2144;
        _2244 = _2145;
    }
    float _2255 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2256 = _2255 == 3.0;
    float _2258 = log2(_2244);
    float _2262 = exp2(_2258 * cbSceneParam._m0[78u].x);
    float _2263 = exp2(_2258 * cbSceneParam._m0[78u].y);
    float _2264 = exp2(_2258 * cbSceneParam._m0[78u].z);
    float _2265 = _2262 * (isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0)));
    float _2266 = _2263 * (isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0)));
    float _2267 = _2264 * (isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0)));
    float _2276 = (_2255 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2276 * (_2256 ? _2265 : (_2265 + (cbSceneParam._m0[72u].w * _2238)));
    SV_Target.y = _2276 * (_2256 ? _2266 : (_2266 + (cbSceneParam._m0[72u].w * _2240)));
    SV_Target.z = _2276 * (_2256 ? _2267 : (_2267 + (cbSceneParam._m0[72u].w * _2242)));
    SV_Target.w = cbInstanceData._m0[_2117].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2080) * _2116) * _2262) * _2276;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2081) * _2116) * _2263) * _2276;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2082) * _2116) * _2264) * _2276;
    SV_Target_1.w = cbInstanceData._m0[_2117].w;
}


