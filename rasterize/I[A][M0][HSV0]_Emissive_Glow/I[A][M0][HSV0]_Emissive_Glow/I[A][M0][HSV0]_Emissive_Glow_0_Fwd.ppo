#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _723;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _159 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _160 = _159 * NORMAL.x;
    float _161 = _159 * NORMAL.y;
    float _162 = _159 * NORMAL.z;
    vec4 _182 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _188 = _182.x * cbMtdParam._m0[9u].x;
    float _189 = _182.y * cbMtdParam._m0[9u].y;
    float _190 = _182.z * cbMtdParam._m0[9u].z;
    vec4 _202 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _224 = inversesqrt(dot(vec3(_160, _161, _162), vec3(_160, _161, _162)));
    float _225 = _224 * _160;
    float _226 = _224 * _161;
    float _227 = _224 * _162;
    float _2879 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _2890 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _2901 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _247 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _288 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _298 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _288);
    float _299 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _288);
    float _300 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _288);
    float _304 = inversesqrt(dot(vec3(_298, _299, _300), vec3(_298, _299, _300)));
    float _305 = _298 * _304;
    float _306 = _299 * _304;
    float _307 = _300 * _304;
    float _313 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _314 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _335 = fma(_227, cbSceneParam._m0[5u].z, fma(_226, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _225));
    float _338 = fma(_227, cbSceneParam._m0[6u].z, fma(_226, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _225));
    float _341 = fma(_227, cbSceneParam._m0[7u].z, fma(_226, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _225));
    uint _354 = uint(roundEven(NORMAL.w)) * 13u;
    uint _355 = _354 + 9u;
    uint _356 = _355 + uint(cbMatDynParam._m0[0u].w);
    float _362 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2879 : (isnan(_2879) ? 1.0 : min(_2879, 1.0)))) * cbInstanceData._m0[_356].x;
    float _363 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2890 : (isnan(_2890) ? 1.0 : min(_2890, 1.0)))) * cbInstanceData._m0[_356].y;
    float _364 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2901 : (isnan(_2901) ? 1.0 : min(_2901, 1.0)))) * cbInstanceData._m0[_356].z;
    float _2912 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _365 = isnan(1.0) ? _2912 : (isnan(_2912) ? 1.0 : min(_2912, 1.0));
    float _2923 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _366 = isnan(1.0) ? _2923 : (isnan(_2923) ? 1.0 : min(_2923, 1.0));
    float _2934 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _367 = isnan(1.0) ? _2934 : (isnan(_2934) ? 1.0 : min(_2934, 1.0));
    vec4 _376 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _313, cbSceneParam._m0[86u].y * _314));
    float _379 = _376.x * TEXCOORD.z;
    float _380 = dot(vec3(_225, _226, _227), vec3(_305, _306, _307));
    float _383 = _380 * 2.0;
    float _388 = (_383 * _225) - _305;
    float _389 = (_383 * _226) - _306;
    float _390 = (_383 * _227) - _307;
    float _412 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _420 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _722;
    float _724;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _447 = fma(_420, cbModelParam._m0[26u].z, fma(_416, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _412));
        float _451 = fma(_420, cbModelParam._m0[27u].z, fma(_416, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _412));
        float _455 = fma(_420, cbModelParam._m0[28u].z, fma(_416, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _412));
        float _480 = _412 + _225;
        float _481 = _416 + _226;
        float _482 = _420 + _227;
        float _492 = fma(_482, cbModelParam._m0[26u].z, fma(_481, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _480)) - _447;
        float _493 = fma(_482, cbModelParam._m0[27u].z, fma(_481, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _480)) - _451;
        float _494 = fma(_482, cbModelParam._m0[28u].z, fma(_481, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _480)) - _455;
        float _498 = inversesqrt(dot(vec3(_492, _493, _494), vec3(_492, _493, _494)));
        float _511 = ((_498 * _492) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_447 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _512 = ((_498 * _493) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_451 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _513 = ((_498 * _494) / cbModelParam._m0[34u].z) + ((((((_455 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _516 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_511, _512, _513), 0.0);
        vec4 _523 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_511, _512, _513), 0.0);
        vec4 _530 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_511, _512, _513), 0.0);
        vec4 _537 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_511, _512, _513), 0.0);
        float _550 = exp2((_516.w + (-0.5)) * 20.0) * 2.0;
        float _551 = _550 * (_516.x + (-0.5));
        float _552 = _550 * (_516.y + (-0.5));
        float _553 = _550 * (_516.z + (-0.5));
        float _560 = exp2((_523.w + (-0.5)) * 20.0) * 2.0;
        float _561 = _560 * (_523.x + (-0.5));
        float _562 = _560 * (_523.y + (-0.5));
        float _563 = _560 * (_523.z + (-0.5));
        float _570 = exp2((_530.w + (-0.5)) * 20.0) * 2.0;
        float _571 = _570 * (_530.x + (-0.5));
        float _572 = _570 * (_530.y + (-0.5));
        float _573 = _570 * (_530.z + (-0.5));
        float _580 = exp2((_537.w + (-0.5)) * 20.0) * 2.0;
        float _581 = _580 * (_537.x + (-0.5));
        float _582 = _580 * (_537.y + (-0.5));
        float _583 = _580 * (_537.z + (-0.5));
        float _584 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        float _585 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        float _586 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        float _587 = _551 * 0.5;
        float _588 = _561 * 0.5;
        float _589 = _571 * 0.5;
        float _590 = dot(vec3(_587, _588, _589), vec3(_587, _588, _589));
        float _595 = (_590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_590);
        float _604 = (dot(vec3(_225, _226, _227), vec3(_595 * _587, _595 * _588, _595 * _589)) + 1.0) * 0.5;
        float _2960 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        float _614 = sqrt(((_588 * _588) + (_587 * _587)) + (_589 * _589)) / (_584 + 9.9999997473787516355514526367188e-06);
        float _2971 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        float _615 = isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0));
        float _616 = _615 * 2.0;
        float _620 = (1.0 - _615) / (_615 + 1.0);
        float _2982 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        float _621 = isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0));
        float _630 = ((((1.0 - _621) * (_616 + 2.0)) * exp2(log2(isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0))) * (_616 + 1.0))) + _621) * _584;
        float _631 = _552 * 0.5;
        float _632 = _562 * 0.5;
        float _633 = _572 * 0.5;
        float _634 = dot(vec3(_631, _632, _633), vec3(_631, _632, _633));
        float _639 = (_634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_634);
        float _647 = (dot(vec3(_225, _226, _227), vec3(_639 * _631, _639 * _632, _639 * _633)) + 1.0) * 0.5;
        float _2993 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _656 = sqrt(((_632 * _632) + (_631 * _631)) + (_633 * _633)) / (_585 + 9.9999997473787516355514526367188e-06);
        float _3004 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _657 = isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0));
        float _658 = _657 * 2.0;
        float _662 = (1.0 - _657) / (_657 + 1.0);
        float _3015 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0));
        float _672 = ((((1.0 - _663) * (_658 + 2.0)) * exp2(log2(isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0))) * (_658 + 1.0))) + _663) * _585;
        float _673 = _553 * 0.5;
        float _674 = _563 * 0.5;
        float _675 = _573 * 0.5;
        float _676 = dot(vec3(_673, _674, _675), vec3(_673, _674, _675));
        float _681 = (_676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_676);
        float _689 = (dot(vec3(_225, _226, _227), vec3(_681 * _673, _681 * _674, _681 * _675)) + 1.0) * 0.5;
        float _3026 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _698 = sqrt(((_674 * _674) + (_673 * _673)) + (_675 * _675)) / (_586 + 9.9999997473787516355514526367188e-06);
        float _3037 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0));
        float _700 = _699 * 2.0;
        float _704 = (1.0 - _699) / (_699 + 1.0);
        float _3048 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0));
        float _714 = ((((1.0 - _705) * (_700 + 2.0)) * exp2(log2(isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0))) * (_700 + 1.0))) + _705) * _586;
        _722 = _553;
        _724 = _552;
        _725 = _551;
        _726 = _563;
        _727 = _562;
        _728 = _561;
        _729 = _573;
        _730 = _572;
        _731 = _571;
        _732 = _586;
        _733 = _585;
        _734 = _584;
        _735 = cbModelParam._m0[36u].z * (isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0)));
        _736 = cbModelParam._m0[36u].z * (isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0)));
        _737 = cbModelParam._m0[36u].z * (isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0)));
    }
    else
    {
        _722 = _723;
        _724 = _723;
        _725 = _723;
        _726 = _723;
        _727 = _723;
        _728 = _723;
        _729 = _723;
        _730 = _723;
        _731 = _723;
        _732 = _723;
        _733 = _723;
        _734 = _723;
        _735 = 0.0;
        _736 = 0.0;
        _737 = 0.0;
    }
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _763 = fma(_420, cbModelParam._m0[30u].z, fma(_416, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _412));
        float _767 = fma(_420, cbModelParam._m0[31u].z, fma(_416, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _412));
        float _771 = fma(_420, cbModelParam._m0[32u].z, fma(_416, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _412));
        float _794 = _412 + _225;
        float _795 = _416 + _226;
        float _796 = _420 + _227;
        float _806 = fma(_796, cbModelParam._m0[30u].z, fma(_795, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _794)) - _763;
        float _807 = fma(_796, cbModelParam._m0[31u].z, fma(_795, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _794)) - _767;
        float _808 = fma(_796, cbModelParam._m0[32u].z, fma(_795, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _794)) - _771;
        float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
        float _825 = ((_812 * _806) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_763 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_812 * _807) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_767 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_812 * _808) / cbModelParam._m0[35u].z) + ((((((_771 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        float _862 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_829.x + (-0.5));
        float _864 = _862 * (_829.y + (-0.5));
        float _865 = _862 * (_829.z + (-0.5));
        float _872 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_836.x + (-0.5));
        float _874 = _872 * (_836.y + (-0.5));
        float _875 = _872 * (_836.z + (-0.5));
        float _882 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_843.x + (-0.5));
        float _884 = _882 * (_843.y + (-0.5));
        float _885 = _882 * (_843.z + (-0.5));
        float _892 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_850.x + (-0.5));
        float _894 = _892 * (_850.y + (-0.5));
        float _895 = _892 * (_850.z + (-0.5));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = _863 * 0.5;
        float _900 = _873 * 0.5;
        float _901 = _883 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _915 = (dot(vec3(_225, _226, _227), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3089 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _924 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3100 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3111 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) * (_926 + 1.0))) + _931) * _896;
        float _941 = _864 * 0.5;
        float _942 = _874 * 0.5;
        float _943 = _884 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_225, _226, _227), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3122 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3133 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3144 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0))) * (_968 + 1.0))) + _973) * _897;
        float _983 = _865 * 0.5;
        float _984 = _875 * 0.5;
        float _985 = _885 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_225, _226, _227), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3155 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3166 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3177 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0))) * (_1010 + 1.0))) + _1015) * _898;
        _1032 = _865;
        _1033 = _864;
        _1034 = _863;
        _1035 = _875;
        _1036 = _874;
        _1037 = _873;
        _1038 = _885;
        _1039 = _884;
        _1040 = _883;
        _1041 = _898;
        _1042 = _897;
        _1043 = _896;
        _1044 = cbModelParam._m0[36u].w * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1045 = cbModelParam._m0[36u].w * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1046 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
    }
    else
    {
        _1032 = _723;
        _1033 = _723;
        _1034 = _723;
        _1035 = _723;
        _1036 = _723;
        _1037 = _723;
        _1038 = _723;
        _1039 = _723;
        _1040 = _723;
        _1041 = _723;
        _1042 = _723;
        _1043 = _723;
        _1044 = 0.0;
        _1045 = 0.0;
        _1046 = 0.0;
    }
    float _1056 = (cbModelParam._m0[1u].x * (_1044 - _735)) + _735;
    float _1057 = (cbModelParam._m0[1u].x * (_1045 - _736)) + _736;
    float _1058 = (cbModelParam._m0[1u].x * (_1046 - _737)) + _737;
    float _1079 = fma(_1058, cbSceneParam._m0[89u].z, fma(_1057, cbSceneParam._m0[89u].y, _1056 * cbSceneParam._m0[89u].x));
    float _1082 = fma(_1058, cbSceneParam._m0[90u].z, fma(_1057, cbSceneParam._m0[90u].y, _1056 * cbSceneParam._m0[90u].x));
    float _1085 = fma(_1058, cbSceneParam._m0[91u].z, fma(_1057, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1056));
    float _1100 = _388 * 0.5;
    float _1101 = _389 * 0.5;
    float _1102 = _390 * 0.5;
    float _1103 = dot(vec4(_1100, _1101, _1102, 1.0), vec4(_1034, _1037, _1040, _1043));
    float _1106 = dot(vec4(_1100, _1101, _1102, 1.0), vec4(_1033, _1036, _1039, _1042));
    float _1109 = dot(vec4(_1100, _1101, _1102, 1.0), vec4(_1032, _1035, _1038, _1041));
    float _1143;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1116 = dot(vec4(_1100, _1101, _1102, 1.0), vec4(_722, _726, _729, _732));
        float _1120 = dot(vec4(_1100, _1101, _1102, 1.0), vec4(_724, _727, _730, _733));
        float _1124 = dot(vec4(_1100, _1101, _1102, 1.0), vec4(_725, _728, _731, _734));
        float _1131 = dot(vec4(cbModelParam._m0[39u]), vec4(_1100, _1101, _1102, 1.0));
        _1143 = dot(vec3(isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)), isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)), isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1131) ? 0.0 : (isnan(0.0) ? _1131 : max(0.0, _1131))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1143 = 1.0;
    }
    float _1154;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1145 = dot(vec4(cbModelParam._m0[40u]), vec4(_1100, _1101, _1102, 1.0));
        _1154 = dot(vec3(isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)), isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)), isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1145) ? 0.0 : (isnan(0.0) ? _1145 : max(0.0, _1145))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1154 = 1.0;
    }
    float _1158 = (_1154 * cbModelParam._m0[1u].x) + (_1143 * (1.0 - cbModelParam._m0[1u].x));
    float _1167 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1249;
    float _1251;
    float _1253;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1216 = fma(_420, cbModelParam._m0[13u].z, fma(_416, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _412)) + cbModelParam._m0[13u].w;
        float _1220 = fma(_420, cbModelParam._m0[14u].z, fma(_416, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _412)) + cbModelParam._m0[14u].w;
        float _1224 = fma(_420, cbModelParam._m0[15u].z, fma(_416, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _412)) + cbModelParam._m0[15u].w;
        float _1227 = fma(_390, cbModelParam._m0[13u].z, fma(_389, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _388));
        float _1230 = fma(_390, cbModelParam._m0[14u].z, fma(_389, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _388));
        float _1233 = fma(_390, cbModelParam._m0[15u].z, fma(_389, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _388));
        float _1259;
        if (_1227 > 0.0)
        {
            _1259 = abs((1.0 - _1216) / _1227);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1227 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1216 + 1.0) / _1227);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1259 = frontier_phi_14_12_ladder;
        }
        float _1467;
        if (_1230 > 0.0)
        {
            _1467 = abs((1.0 - _1220) / _1230);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1230 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1220 + 1.0) / _1230);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1467 = frontier_phi_23_19_ladder;
        }
        float _1656;
        if (_1233 > 0.0)
        {
            _1656 = abs((1.0 - _1224) / _1233);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1233 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1224 + 1.0) / _1233);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1656 = frontier_phi_35_30_ladder;
        }
        float _1658 = isnan(_1467) ? _1259 : (isnan(_1259) ? _1467 : min(_1259, _1467));
        float _1659 = isnan(_1656) ? _1658 : (isnan(_1658) ? _1656 : min(_1658, _1656));
        float _1663 = (_1659 * _1227) + _1216;
        float _1664 = (_1659 * _1230) + _1220;
        float _1665 = (_1659 * _1233) + _1224;
        float _1666 = _1659 * 9.9999997473787516355514526367188e-05;
        float _1668 = (-1.0) - _1666;
        float _1670 = _1666 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1665 > _1670) || ((_1665 < _1668) || ((_1664 > _1670) || ((_1664 < _1668) || ((_1663 < _1668) || (_1663 > _1670))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1665, cbModelParam._m0[9u].z, fma(_1664, cbModelParam._m0[9u].y, _1663 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1665, cbModelParam._m0[10u].z, fma(_1664, cbModelParam._m0[10u].y, _1663 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1665, cbModelParam._m0[11u].z, fma(_1664, cbModelParam._m0[11u].y, _1663 * cbModelParam._m0[11u].x))), _1167);
            frontier_phi_13_35_ladder = _1762.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1762.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1762.x * cbModelParam._m0[1u].y;
        }
        _1249 = frontier_phi_13_35_ladder_2;
        _1251 = frontier_phi_13_35_ladder_1;
        _1253 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1237 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_388, _389, _390), _1167);
        _1249 = _1237.x * cbModelParam._m0[1u].y;
        _1251 = _1237.y * cbModelParam._m0[1u].y;
        _1253 = _1237.z * cbModelParam._m0[1u].y;
    }
    float _1256 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1349;
    float _1351;
    float _1353;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1313 = fma(_420, cbModelParam._m0[21u].z, fma(_416, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _412)) + cbModelParam._m0[21u].w;
        float _1317 = fma(_420, cbModelParam._m0[22u].z, fma(_416, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _412)) + cbModelParam._m0[22u].w;
        float _1321 = fma(_420, cbModelParam._m0[23u].z, fma(_416, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _412)) + cbModelParam._m0[23u].w;
        float _1324 = fma(_390, cbModelParam._m0[21u].z, fma(_389, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _388));
        float _1327 = fma(_390, cbModelParam._m0[22u].z, fma(_389, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _388));
        float _1330 = fma(_390, cbModelParam._m0[23u].z, fma(_389, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _388));
        float _1472;
        if (_1324 > 0.0)
        {
            _1472 = abs((1.0 - _1313) / _1324);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1313 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1472 = frontier_phi_25_21_ladder;
        }
        float _1683;
        if (_1327 > 0.0)
        {
            _1683 = abs((1.0 - _1317) / _1327);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1317 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1683 = frontier_phi_37_32_ladder;
        }
        float _1834;
        if (_1330 > 0.0)
        {
            _1834 = abs((1.0 - _1321) / _1330);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1330 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1321 + 1.0) / _1330);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1834 = frontier_phi_46_43_ladder;
        }
        float _1836 = isnan(_1683) ? _1472 : (isnan(_1472) ? _1683 : min(_1472, _1683));
        float _1837 = isnan(_1834) ? _1836 : (isnan(_1836) ? _1834 : min(_1836, _1834));
        float _1841 = (_1837 * _1324) + _1313;
        float _1842 = (_1837 * _1327) + _1317;
        float _1843 = (_1837 * _1330) + _1321;
        float _1844 = _1837 * 9.9999997473787516355514526367188e-05;
        float _1845 = (-1.0) - _1844;
        float _1847 = _1844 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1843 > _1847) || ((_1843 < _1845) || ((_1842 > _1847) || ((_1842 < _1845) || ((_1841 < _1845) || (_1841 > _1847))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2080 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1843, cbModelParam._m0[17u].z, fma(_1842, cbModelParam._m0[17u].y, _1841 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1843, cbModelParam._m0[18u].z, fma(_1842, cbModelParam._m0[18u].y, _1841 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1843, cbModelParam._m0[19u].z, fma(_1842, cbModelParam._m0[19u].y, _1841 * cbModelParam._m0[19u].x))), _1256);
            frontier_phi_22_46_ladder = _2080.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2080.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2080.x * cbModelParam._m0[1u].z;
        }
        _1349 = frontier_phi_22_46_ladder_2;
        _1351 = frontier_phi_22_46_ladder_1;
        _1353 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1333 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_388, _389, _390), _1256);
        _1349 = _1333.x * cbModelParam._m0[1u].z;
        _1351 = _1333.y * cbModelParam._m0[1u].z;
        _1353 = _1333.z * cbModelParam._m0[1u].z;
    }
    float _1365 = _379 * 0.01200000010430812835693359375;
    float _1367 = _1365 * ((cbModelParam._m0[1u].w * (_1349 - _1249)) + _1249);
    float _1368 = _1365 * ((cbModelParam._m0[1u].w * (_1351 - _1251)) + _1251);
    float _1369 = _1365 * ((cbModelParam._m0[1u].w * (_1353 - _1253)) + _1253);
    float _1372 = fma(_1369, cbSceneParam._m0[89u].z, fma(_1368, cbSceneParam._m0[89u].y, _1367 * cbSceneParam._m0[89u].x));
    float _1375 = fma(_1369, cbSceneParam._m0[90u].z, fma(_1368, cbSceneParam._m0[90u].y, _1367 * cbSceneParam._m0[90u].x));
    float _1378 = fma(_1369, cbSceneParam._m0[91u].z, fma(_1368, cbSceneParam._m0[91u].y, _1367 * cbSceneParam._m0[91u].x));
    uvec4 _1388 = floatBitsToUint(cbInstanceData._m0[_354 + 5u]);
    uint _1390 = _1388.x * 14u;
    uint _1391 = _1390 + 13u;
    float _1398 = _379 + (-1.0);
    float _1404 = (cbLight._m0[_1391].x * _1398) + 1.0;
    float _1405 = (cbLight._m0[_1391].y * _1398) + 1.0;
    float _1406 = (cbLight._m0[_1391].z * _1398) + 1.0;
    float _1407 = (cbLight._m0[_1391].w * _1398) + 1.0;
    uint _1408 = _1390 + 5u;
    float _1414 = isnan(1.0) ? _1405 : (isnan(_1405) ? 1.0 : min(_1405, 1.0));
    uint _1418 = _1390 + 4u;
    float _1425 = isnan(1.0) ? _1404 : (isnan(_1404) ? 1.0 : min(_1404, 1.0));
    uint _1429 = _1390 | 1u;
    float _1440 = dot(vec3(cbLight._m0[_1390].xyz), vec3(_225, _226, _227));
    float _1443 = dot(vec3(cbLight._m0[_1429].xyz), vec3(_225, _226, _227));
    float _3313 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
    float _3324 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
    float _1448 = (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * 0.3183098733425140380859375;
    float _1450 = (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * 0.3183098733425140380859375;
    float _1457 = ((cbLight._m0[_1408].x * _1414) * _1450) + ((cbLight._m0[_1418].x * _1425) * _1448);
    float _1458 = ((_1414 * cbLight._m0[_1408].y) * _1450) + ((_1425 * cbLight._m0[_1418].y) * _1448);
    float _1459 = ((_1414 * cbLight._m0[_1408].z) * _1450) + ((_1425 * cbLight._m0[_1418].z) * _1448);
    uvec4 _1464 = floatBitsToUint(cbLight._m0[_1390 + 12u]);
    bool _1466 = _1464.x == 0u;
    float _1477;
    float _1479;
    float _1481;
    if (_1466)
    {
        _1477 = _1457;
        _1479 = _1458;
        _1481 = _1459;
    }
    else
    {
        uint _1485 = _1390 + 6u;
        float _1501 = (dot(vec3(cbLight._m0[_1390 + 2u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _1502 = _1501 * _1501;
        float _3335 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _1504 = isnan(1.0) ? _1406 : (isnan(_1406) ? 1.0 : min(_1406, 1.0));
        _1477 = (((cbLight._m0[_1485].x * 0.3183098733425140380859375) * _1503) * _1504) + _1457;
        _1479 = (((cbLight._m0[_1485].y * 0.3183098733425140380859375) * _1503) * _1504) + _1458;
        _1481 = (((cbLight._m0[_1485].z * 0.3183098733425140380859375) * _1503) * _1504) + _1459;
    }
    bool _1484 = _1464.y == 0u;
    float _1522;
    float _1524;
    float _1526;
    if (_1484)
    {
        _1522 = _1477;
        _1524 = _1479;
        _1526 = _1481;
    }
    else
    {
        uint _1627 = _1390 + 7u;
        float _1643 = (dot(vec3(cbLight._m0[_1390 + 3u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _1644 = _1643 * _1643;
        float _3351 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _1646 = isnan(1.0) ? _1407 : (isnan(_1407) ? 1.0 : min(_1407, 1.0));
        _1522 = (((cbLight._m0[_1627].x * 0.3183098733425140380859375) * _1645) * _1646) + _1477;
        _1524 = (((cbLight._m0[_1627].y * 0.3183098733425140380859375) * _1645) * _1646) + _1479;
        _1526 = (((cbLight._m0[_1627].z * 0.3183098733425140380859375) * _1645) * _1646) + _1481;
    }
    uint _1528 = _1390 + 8u;
    float _1534 = cbLight._m0[_1390].x + _305;
    float _1535 = cbLight._m0[_1390].y + _306;
    float _1536 = cbLight._m0[_1390].z + _307;
    float _1540 = inversesqrt(dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536)));
    float _1544 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1390].xyz));
    float _3367 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
    float _1547 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _3378 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _1548 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _1549 = dot(vec3(cbLight._m0[_1390].xyz), vec3(_1534 * _1540, _1535 * _1540, _1536 * _1540));
    float _3389 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
    float _1560 = (exp2(log2(1.0 - (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1566 = (0.5 / ((_1547 + 9.9999999392252902907785028219223e-09) + _1548)) * _1547;
    float _3400 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1568 = (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * 0.31831014156341552734375;
    uint _1579 = _1390 + 9u;
    float _1585 = cbLight._m0[_1429].x + _305;
    float _1586 = cbLight._m0[_1429].y + _306;
    float _1587 = cbLight._m0[_1429].z + _307;
    float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
    float _1595 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1429].xyz));
    float _3411 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1598 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _1599 = dot(vec3(cbLight._m0[_1429].xyz), vec3(_1585 * _1591, _1586 * _1591, _1587 * _1591));
    float _3422 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _1608 = (exp2(log2(1.0 - (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1612 = (0.5 / ((_1598 + 9.9999999392252902907785028219223e-09) + _1548)) * _1598;
    float _3433 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1614 = (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) * 0.31831014156341552734375;
    float _1624 = (((_1608 * cbLight._m0[_1579].x) * _1614) * _1414) + (((_1560 * cbLight._m0[_1528].x) * _1568) * _1425);
    float _1625 = (((_1608 * cbLight._m0[_1579].y) * _1614) * _1414) + (((_1560 * cbLight._m0[_1528].y) * _1568) * _1425);
    float _1626 = (((_1608 * cbLight._m0[_1579].z) * _1614) * _1414) + (((_1560 * cbLight._m0[_1528].z) * _1568) * _1425);
    float _1688;
    float _1690;
    float _1692;
    if (_1466)
    {
        _1688 = _1624;
        _1690 = _1625;
        _1692 = _1626;
    }
    else
    {
        uint _1694 = _1390 + 10u;
        uint _1700 = _1390 + 2u;
        float _1706 = cbLight._m0[_1700].x + _305;
        float _1707 = cbLight._m0[_1700].y + _306;
        float _1708 = cbLight._m0[_1700].z + _307;
        float _1712 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
        float _1716 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1700].xyz));
        float _3444 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1719 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _1720 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_1706 * _1712, _1707 * _1712, _1708 * _1712));
        float _3455 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = (exp2(log2(1.0 - (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1733 = (0.5 / ((_1719 + 9.9999999392252902907785028219223e-09) + _1548)) * _1719;
        float _3466 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1735 = (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * 0.31831014156341552734375;
        float _1736 = isnan(1.0) ? _1406 : (isnan(_1406) ? 1.0 : min(_1406, 1.0));
        _1688 = (((_1729 * cbLight._m0[_1694].x) * _1735) * _1736) + _1624;
        _1690 = (((_1729 * cbLight._m0[_1694].y) * _1735) * _1736) + _1625;
        _1692 = (((_1729 * cbLight._m0[_1694].z) * _1735) * _1736) + _1626;
    }
    float _1771;
    float _1773;
    float _1775;
    if (_1484)
    {
        _1771 = _1688;
        _1773 = _1690;
        _1775 = _1692;
    }
    else
    {
        uint _1782 = _1390 + 11u;
        uint _1788 = _1390 + 3u;
        float _1794 = cbLight._m0[_1788].x + _305;
        float _1795 = cbLight._m0[_1788].y + _306;
        float _1796 = cbLight._m0[_1788].z + _307;
        float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
        float _1804 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1788].xyz));
        float _3482 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1807 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1808 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_1794 * _1800, _1795 * _1800, _1796 * _1800));
        float _3493 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = (exp2(log2(1.0 - (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1821 = (0.5 / ((_1807 + 9.9999999392252902907785028219223e-09) + _1548)) * _1807;
        float _3504 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1823 = (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * 0.31831014156341552734375;
        float _1824 = isnan(1.0) ? _1407 : (isnan(_1407) ? 1.0 : min(_1407, 1.0));
        _1771 = (((_1817 * cbLight._m0[_1782].x) * _1823) * _1824) + _1688;
        _1773 = (((_1817 * cbLight._m0[_1782].y) * _1823) * _1824) + _1690;
        _1775 = (((_1817 * cbLight._m0[_1782].z) * _1823) * _1824) + _1692;
    }
    float _1959;
    float _1961;
    float _1963;
    float _1965;
    float _1967;
    float _1969;
    if (_1388.y == 0u)
    {
        float _1899 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1900 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1899;
        float _1901 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1899;
        float _1902 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1899;
        uvec4 _1914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1915 = _1914.x;
        uint _1926 = uint((float(_1914.y) * floor(float(uint(cbSceneParam._m0[85u].y * _314) / _1915))) + floor(float(uint(cbSceneParam._m0[85u].x * _313) / _1915)));
        float _1936 = (log2(_1902 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1937 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        uint _1940 = uint(isnan(14.0) ? _1937 : (isnan(_1937) ? 14.0 : min(_1937, 14.0)));
        uvec4 _1945 = texelFetch(g_lightClusterGridBuffer, int(((_1940 << 2u) + (_1926 << 6u)) >> 2u));
        uint _1946 = _1945.x;
        uint _1947 = _1914.z;
        float _2085;
        float _2087;
        float _2089;
        float _2091;
        float _2093;
        float _2095;
        if (((((1u << ((_1947 >> 4u) & 15u)) + 4294967295u) & _1946) == 0u) || ((_1947 & 240u) == 0u))
        {
            _2085 = 0.0;
            _2087 = 0.0;
            _2089 = 0.0;
            _2091 = 0.0;
            _2093 = 0.0;
            _2095 = 0.0;
        }
        else
        {
            float _2086;
            float _2088;
            float _2090;
            float _2092;
            float _2094;
            float _2096;
            float _2236 = 0.0;
            float _2237 = 0.0;
            float _2238 = 0.0;
            float _2239 = 0.0;
            float _2240 = 0.0;
            float _2241 = 0.0;
            uint _2242 = 0u;
            uint _2251;
            bool _2252;
            for (;;)
            {
                _2251 = texelFetch(g_lightClassification, int((((_1940 << 5u) + (_1926 << 9u)) + (_2242 << 2u)) >> 2u)).x;
                _2252 = _2251 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2252)
                {
                    frontier_phi_61_pred = _2236;
                    frontier_phi_61_pred_1 = _2241;
                    frontier_phi_61_pred_2 = _2240;
                    frontier_phi_61_pred_3 = _2239;
                    frontier_phi_61_pred_4 = _2238;
                    frontier_phi_61_pred_5 = _2237;
                }
                else
                {
                    float _2360;
                    float _2361;
                    float _2362;
                    float _2363;
                    float _2364;
                    float _2365;
                    uint _2366;
                    _2360 = _2236;
                    _2361 = _2237;
                    _2362 = _2238;
                    _2363 = _2239;
                    _2364 = _2240;
                    _2365 = _2241;
                    _2366 = _2251;
                    float _2292;
                    float _2293;
                    float _2294;
                    float _2295;
                    float _2296;
                    float _2297;
                    for (;;)
                    {
                        uint _2370 = uint(findLSB(_2366)) + (_2242 << 5u);
                        uint _2367 = (_2366 + 4294967295u) & _2366;
                        uint _2372 = _2370 * 48u;
                        vec4 _2386 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2372)).x, texelFetch(g_PointLightRenderingBuffer, int(_2372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2372 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2372 + 3u)).x));
                        uint _2392 = (_2370 * 48u) + 4u;
                        vec4 _2405 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2392)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 3u)).x));
                        uint _2411 = (_2370 * 48u) + 8u;
                        vec3 _2422 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2411)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 2u)).x));
                        float _2426 = _2386.x - _1900;
                        float _2427 = _2386.y - _1901;
                        float _2428 = _2386.z - _1902;
                        float _2429 = dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428));
                        float _2432 = inversesqrt(_2429);
                        float _2441 = 1.0 - (_2429 * _2386.w);
                        float _3530 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
                        float _2442 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
                        float _2443 = sqrt(_2429) * _2405.w;
                        float _2446 = 1.39999997615814208984375 / (_2443 + 1.39999997615814208984375);
                        float _2447 = _2446 * _2446;
                        float _2450 = ((1.0 - _2447) * dot(vec3(_335, _338, _341), vec3(_2432 * _2426, _2432 * _2427, _2432 * _2428))) + _2447;
                        float _2453 = _2443 * _2443;
                        float _2457 = ((isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0))) * _2442) / ((_2453 * 0.699999988079071044921875) + 1.0);
                        float _2461 = (-0.0) - _1900;
                        float _2462 = (-0.0) - _1901;
                        float _2463 = (-0.0) - _1902;
                        float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
                        float _2471 = dot(vec3(_335, _338, _341), vec3(_2467 * _2461, _2467 * _2462, _2467 * _2463));
                        float _3546 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
                        float _3557 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
                        float _2475 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
                        float _2479 = (0.5 / (((isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) + 9.9999999392252902907785028219223e-09) + _2475)) * _2475;
                        float _3568 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
                        float _2488 = (((isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * 3.1415927410125732421875) / ((_2453 * 2.1991131305694580078125) + 3.141590118408203125)) * _2442;
                        _2295 = (_2457 * _2405.x) + _2363;
                        _2296 = (_2457 * _2405.y) + _2364;
                        _2297 = (_2457 * _2405.z) + _2365;
                        _2292 = (_2488 * _2422.x) + _2360;
                        _2293 = (_2488 * _2422.y) + _2361;
                        _2294 = (_2488 * _2422.z) + _2362;
                        if (_2367 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2360 = _2292;
                            _2361 = _2293;
                            _2362 = _2294;
                            _2363 = _2295;
                            _2364 = _2296;
                            _2365 = _2297;
                            _2366 = _2367;
                        }
                    }
                    frontier_phi_61_pred = _2292;
                    frontier_phi_61_pred_1 = _2297;
                    frontier_phi_61_pred_2 = _2296;
                    frontier_phi_61_pred_3 = _2295;
                    frontier_phi_61_pred_4 = _2294;
                    frontier_phi_61_pred_5 = _2293;
                }
                _2086 = frontier_phi_61_pred;
                _2096 = frontier_phi_61_pred_1;
                _2094 = frontier_phi_61_pred_2;
                _2092 = frontier_phi_61_pred_3;
                _2090 = frontier_phi_61_pred_4;
                _2088 = frontier_phi_61_pred_5;
                uint _2243 = _2242 + 1u;
                if (_2243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2236 = _2086;
                    _2237 = _2088;
                    _2238 = _2090;
                    _2239 = _2092;
                    _2240 = _2094;
                    _2241 = _2096;
                    _2242 = _2243;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2085 = _2086;
            _2087 = _2088;
            _2089 = _2090;
            _2091 = _2092;
            _2093 = _2094;
            _2095 = _2096;
        }
        uvec4 _2099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2100 = _2099.z;
        uint _2102 = (_2100 >> 8u) & 15u;
        float _2207;
        float _2209;
        float _2211;
        float _2213;
        float _2215;
        float _2217;
        if (((4294967295u << _2102) & _1946) == 0u)
        {
            _2207 = _2085;
            _2209 = _2087;
            _2211 = _2089;
            _2213 = _2091;
            _2215 = _2093;
            _2217 = _2095;
        }
        else
        {
            float _2232 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2102 < ((_2100 >> 12u) & 15u))
            {
                float _2208;
                float _2210;
                float _2212;
                float _2214;
                float _2216;
                float _2218;
                float _2343 = _2085;
                float _2344 = _2087;
                float _2345 = _2089;
                float _2346 = _2091;
                float _2347 = _2093;
                float _2348 = _2095;
                uint _2349 = _2102;
                uint _2358;
                bool _2359;
                for (;;)
                {
                    _2358 = texelFetch(g_lightClassification, int((((_1940 << 5u) + (_1926 << 9u)) + (_2349 << 2u)) >> 2u)).x;
                    _2359 = _2358 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2359)
                    {
                        frontier_phi_67_pred = _2346;
                        frontier_phi_67_pred_1 = _2347;
                        frontier_phi_67_pred_2 = _2348;
                        frontier_phi_67_pred_3 = _2345;
                        frontier_phi_67_pred_4 = _2344;
                        frontier_phi_67_pred_5 = _2343;
                    }
                    else
                    {
                        float _2493;
                        float _2494;
                        float _2495;
                        float _2496;
                        float _2497;
                        float _2498;
                        float _2745;
                        float _2746;
                        float _2747;
                        float _2748;
                        float _2749;
                        float _2750;
                        float _2506 = _2343;
                        float _2507 = _2344;
                        float _2508 = _2345;
                        float _2509 = _2346;
                        float _2510 = _2347;
                        float _2511 = _2348;
                        uint _2512 = _2358;
                        uint _2513;
                        vec4 _2538;
                        float _2539;
                        vec4 _2554;
                        vec3 _2566;
                        vec4 _2582;
                        vec4 _2598;
                        float _2645;
                        bool _2646;
                        for (;;)
                        {
                            uint _2523 = ((_2349 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2512));
                            _2513 = (_2512 + 4294967295u) & _2512;
                            uint _2525 = _2523 * 40u;
                            _2538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 3u)).x));
                            _2539 = _2538.w;
                            uint _2541 = (_2523 * 40u) + 4u;
                            _2554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 3u)).x));
                            uint _2556 = (_2523 * 40u) + 8u;
                            _2566 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 2u)).x));
                            uint _2569 = (_2523 * 40u) + 16u;
                            _2582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 3u)).x));
                            uint _2585 = (_2523 * 40u) + 20u;
                            _2598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 3u)).x));
                            uint _2601 = (_2523 * 40u) + 24u;
                            vec4 _2614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 3u)).x));
                            uint _2620 = (_2523 * 40u) + 28u;
                            vec4 _2633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 3u)).x));
                            _2645 = fma(_1902, _2633.z, fma(_1901, _2633.y, _2633.x * _1900)) + _2633.w;
                            _2646 = !((fma(_1902, _2614.z, fma(_1901, _2614.y, _2614.x * _1900)) + _2614.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2646)
                            {
                                float _2673 = _2538.x - _1900;
                                float _2674 = _2538.y - _1901;
                                float _2675 = _2538.z - _1902;
                                float _2676 = dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675));
                                float _2679 = inversesqrt(_2676);
                                float _2680 = _2679 * _2673;
                                float _2681 = _2679 * _2674;
                                float _2682 = _2679 * _2675;
                                float _2686 = 1.0 - (_2676 / (_2539 * _2539));
                                float _3579 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                                float _2687 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
                                float _2691 = sqrt(_2676) * _2554.w;
                                float _2693 = 1.39999997615814208984375 / (_2691 + 1.39999997615814208984375);
                                float _2694 = _2693 * _2693;
                                float _2695 = 1.0 - _2694;
                                float _2697 = (_2695 * dot(vec3(_2680, _2681, _2682), vec3(_335, _338, _341))) + _2694;
                                float _2700 = _2691 * _2691;
                                float _2704 = (fma(_1902, _2582.z, fma(_1901, _2582.y, _2582.x * _1900)) + _2582.w) / _2645;
                                float _2705 = (fma(_1902, _2598.z, fma(_1901, _2598.y, _2598.x * _1900)) + _2598.w) / _2645;
                                float _2709 = 1.0 - dot(vec2(_2704, _2705), vec2(_2704, _2705));
                                float _3595 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                                float _2710 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
                                float _2711 = _2710 * (((isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0))) * _2687) / ((_2700 * 0.699999988079071044921875) + 1.0));
                                float _2721 = dot(vec3(_335, _338, _341), vec3((-0.0) - (_1900 * _2232), (-0.0) - (_1901 * _2232), (-0.0) - (_1902 * _2232)));
                                float _3606 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                                float _2729 = (_2695 * dot(vec3(_335, _338, _341), vec3(_2680, _2681, _2682))) + _2694;
                                float _3617 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                                float _2730 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
                                float _2734 = (0.5 / (((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) + 9.9999999392252902907785028219223e-09) + _2730)) * _2730;
                                float _3628 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                                float _2741 = (_2710 * _2687) * (((isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * 3.1415927410125732421875) / ((_2700 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2741 * _2566.x;
                                frontier_phi_73_pred_1 = _2741 * _2566.y;
                                frontier_phi_73_pred_2 = _2711 * _2554.z;
                                frontier_phi_73_pred_3 = _2711 * _2554.y;
                                frontier_phi_73_pred_4 = _2711 * _2554.x;
                                frontier_phi_73_pred_5 = _2741 * _2566.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2745 = frontier_phi_73_pred;
                            _2746 = frontier_phi_73_pred_1;
                            _2750 = frontier_phi_73_pred_2;
                            _2749 = frontier_phi_73_pred_3;
                            _2748 = frontier_phi_73_pred_4;
                            _2747 = frontier_phi_73_pred_5;
                            _2496 = _2748 + _2509;
                            _2497 = _2749 + _2510;
                            _2498 = _2750 + _2511;
                            _2493 = _2745 + _2506;
                            _2494 = _2746 + _2507;
                            _2495 = _2747 + _2508;
                            if (_2513 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2506 = _2493;
                                _2507 = _2494;
                                _2508 = _2495;
                                _2509 = _2496;
                                _2510 = _2497;
                                _2511 = _2498;
                                _2512 = _2513;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2496;
                        frontier_phi_67_pred_1 = _2497;
                        frontier_phi_67_pred_2 = _2498;
                        frontier_phi_67_pred_3 = _2495;
                        frontier_phi_67_pred_4 = _2494;
                        frontier_phi_67_pred_5 = _2493;
                    }
                    _2214 = frontier_phi_67_pred;
                    _2216 = frontier_phi_67_pred_1;
                    _2218 = frontier_phi_67_pred_2;
                    _2212 = frontier_phi_67_pred_3;
                    _2210 = frontier_phi_67_pred_4;
                    _2208 = frontier_phi_67_pred_5;
                    uint _2350 = _2349 + 1u;
                    if (_2350 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2343 = _2208;
                        _2344 = _2210;
                        _2345 = _2212;
                        _2346 = _2214;
                        _2347 = _2216;
                        _2348 = _2218;
                        _2349 = _2350;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2216;
                frontier_phi_55_56_ladder_1 = _2218;
                frontier_phi_55_56_ladder_2 = _2214;
                frontier_phi_55_56_ladder_3 = _2212;
                frontier_phi_55_56_ladder_4 = _2210;
                frontier_phi_55_56_ladder_5 = _2208;
            }
            else
            {
                frontier_phi_55_56_ladder = _2093;
                frontier_phi_55_56_ladder_1 = _2095;
                frontier_phi_55_56_ladder_2 = _2091;
                frontier_phi_55_56_ladder_3 = _2089;
                frontier_phi_55_56_ladder_4 = _2087;
                frontier_phi_55_56_ladder_5 = _2085;
            }
            _2207 = frontier_phi_55_56_ladder_5;
            _2209 = frontier_phi_55_56_ladder_4;
            _2211 = frontier_phi_55_56_ladder_3;
            _2213 = frontier_phi_55_56_ladder_2;
            _2215 = frontier_phi_55_56_ladder;
            _2217 = frontier_phi_55_56_ladder_1;
        }
        float _2222 = isnan(1.0) ? _379 : (isnan(_379) ? 1.0 : min(_379, 1.0));
        _1959 = (_2222 * _2213) + _1522;
        _1961 = (_2222 * _2215) + _1524;
        _1963 = (_2222 * _2217) + _1526;
        _1965 = ((_2207 * 0.039999999105930328369140625) * _2222) + _1771;
        _1967 = ((_2209 * 0.039999999105930328369140625) * _2222) + _1773;
        _1969 = ((_2211 * 0.039999999105930328369140625) * _2222) + _1775;
    }
    else
    {
        _1959 = _1522;
        _1961 = _1524;
        _1963 = _1526;
        _1965 = _1771;
        _1967 = _1773;
        _1969 = _1775;
    }
    uint _1975 = _355 + uint(cbMatDynParam._m0[0u].w);
    float _1984 = (((cbMtdParam._m0[11u].x * _202.x) * cbMtdParam._m0[10u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1975].x;
    float _1988 = (((cbMtdParam._m0[11u].x * _202.y) * cbMtdParam._m0[10u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1975].y;
    float _1992 = (((cbMtdParam._m0[11u].x * _202.z) * cbMtdParam._m0[10u].z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1975].z;
    float _3644 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3655 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _3666 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _2009 = (((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1959 + ((isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0))) * _379))) + ((_1965 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _1158)) * cbPerFrame._m0[3u].x)) + _1984;
    float _2011 = (_1988 + ((_1967 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _1158)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1961 + ((isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0))) * _379)));
    float _2013 = (_1992 + ((_1969 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _1158)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1963 + ((isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0))) * _379)));
    float _3692 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2026 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    uint _2027 = _354 + 6u;
    float _2035 = _313 / cbSceneParam._m0[86u].x;
    float _2036 = _314 / cbSceneParam._m0[86u].y;
    vec4 _2050 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2035, _2036, (log2((isnan(cbSceneParam._m0[77u].w) ? _247 : (isnan(_247) ? cbSceneParam._m0[77u].w : min(_247, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2052 = _2050.x;
    float _2053 = _2050.y;
    float _2054 = _2050.z;
    float _2055 = _2050.w;
    float _2148;
    float _2150;
    float _2152;
    float _2154;
    if (_247 > cbSceneParam._m0[78u].w)
    {
        float _2110 = isnan(_247) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _247 : min(cbSceneParam._m0[80u].w, _247));
        float _2111 = _2110 / _247;
        float _2122 = _2111 * _298;
        float _2123 = _299 * _2111;
        float _2124 = (-0.0) - _2123;
        float _2126 = _2111 * _300;
        float _2128 = (cbSceneParam._m0[77u].w * _2124) / _2110;
        float _2129 = _2128 + cbSceneParam._m0[79u].w;
        float _2130 = cbSceneParam._m0[79u].w - _2123;
        float _2136 = sqrt(((_2122 * _2122) + (_2123 * _2123)) + (_2126 * _2126));
        float _2139 = (1.0 - (cbSceneParam._m0[77u].w / _2110)) * _2136;
        float _2144 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2146 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2305;
        if (abs((_2124 - _2128) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2305 = ((((_2129 > 0.0) ? exp2(_2144 * _2129) : (2.0 - exp2(_2146 * _2129))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2139;
        }
        else
        {
            float _2265 = 1.0 / cbSceneParam._m0[80u].x;
            float _2266 = isnan(_2130) ? _2129 : (isnan(_2129) ? _2130 : max(_2129, _2130));
            float _2267 = isnan(_2130) ? _2129 : (isnan(_2129) ? _2130 : min(_2129, _2130));
            float _2276 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : min(_2266, 0.0));
            float _2277 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : min(_2267, 0.0));
            _2305 = ((abs(_2136 / _2124) * cbSceneParam._m0[80u].y) * ((((_2276 - _2277) * 2.0) - ((exp2(_2144 * (isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0)))) - exp2(_2144 * (isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0))))) * _2265)) - ((exp2(_2146 * _2276) - exp2(_2146 * _2277)) * _2265))) + (_2139 * cbSceneParam._m0[80u].z);
        }
        vec4 _2307 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2035, _2036, 1.0), 0.0);
        float _2316 = exp2((_2305 * (-1.44269502162933349609375)) * (1.0 - _2307.w));
        float _2317 = log2(_2316);
        float _2333 = log2(_2055);
        _2148 = (exp2(_2333 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2317 * cbSceneParam._m0[78u].x)) * _2307.x) / cbSceneParam._m0[78u].x)) + _2052;
        _2150 = (exp2(_2333 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2317 * cbSceneParam._m0[78u].y)) * _2307.y) / cbSceneParam._m0[78u].y)) + _2053;
        _2152 = (exp2(_2333 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2317 * cbSceneParam._m0[78u].z)) * _2307.z) / cbSceneParam._m0[78u].z)) + _2054;
        _2154 = _2316 * _2055;
    }
    else
    {
        _2148 = _2052;
        _2150 = _2053;
        _2152 = _2054;
        _2154 = _2055;
    }
    float _2165 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2166 = _2165 == 3.0;
    float _2168 = log2(_2154);
    float _2172 = exp2(_2168 * cbSceneParam._m0[78u].x);
    float _2173 = exp2(_2168 * cbSceneParam._m0[78u].y);
    float _2174 = exp2(_2168 * cbSceneParam._m0[78u].z);
    float _2175 = _2172 * (isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)));
    float _2176 = _2173 * (isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0)));
    float _2177 = _2174 * (isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0)));
    float _2186 = (_2165 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2186 * (_2166 ? _2175 : (_2175 + (cbSceneParam._m0[72u].w * _2148)));
    SV_Target.y = _2186 * (_2166 ? _2176 : (_2176 + (cbSceneParam._m0[72u].w * _2150)));
    SV_Target.z = _2186 * (_2166 ? _2177 : (_2177 + (cbSceneParam._m0[72u].w * _2152)));
    SV_Target.w = cbInstanceData._m0[_2027].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1984) * _2026) * _2172) * _2186;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1988) * _2026) * _2173) * _2186;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1992) * _2026) * _2174) * _2186;
    SV_Target_1.w = cbInstanceData._m0[_2027].w;
}


