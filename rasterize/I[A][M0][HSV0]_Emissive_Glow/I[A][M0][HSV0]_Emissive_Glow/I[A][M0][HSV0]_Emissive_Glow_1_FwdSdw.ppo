#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _775;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    vec4 _186 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[9u].x;
    float _193 = _186.y * cbMtdParam._m0[9u].y;
    float _194 = _186.z * cbMtdParam._m0[9u].z;
    vec4 _215 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _217 = _215.x;
    float _218 = _215.y;
    float _219 = _215.z;
    float _220 = cbMtdParam._m0[11u].w * cbMtdParam._m0[12u].x;
    float _221 = _220 * _217;
    float _222 = _220 * _218;
    float _223 = _220 * _219;
    float _224 = isnan(_222) ? _221 : (isnan(_221) ? _222 : max(_221, _222));
    float _225 = isnan(_223) ? _224 : (isnan(_224) ? _223 : max(_224, _223));
    float _228;
    float _230;
    if (_225 < 1.1920928955078125e-07)
    {
        _228 = 0.0;
        _230 = 0.0;
    }
    else
    {
        float _256 = isnan(_222) ? _221 : (isnan(_221) ? _222 : min(_221, _222));
        float _258 = _225 - (isnan(_223) ? _256 : (isnan(_256) ? _223 : min(_256, _223)));
        float _231 = _258 / _225;
        float frontier_phi_1_2_ladder;
        float frontier_phi_1_2_ladder_1;
        if (_258 < 1.1920928955078125e-07)
        {
            frontier_phi_1_2_ladder = _231;
            frontier_phi_1_2_ladder_1 = 0.0;
        }
        else
        {
            float _1176;
            if (_225 == _221)
            {
                _1176 = ((_220 * (_218 - _219)) / _258) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_14_10_ladder;
                if (_225 == _222)
                {
                    frontier_phi_14_10_ladder = (((_220 * (_219 - _217)) / _258) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_14_10_ladder = (((_220 * (_217 - _218)) / _258) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _1176 = frontier_phi_14_10_ladder;
            }
            float _1181 = (_1176 < 0.0) ? (_1176 + 1.0) : _1176;
            frontier_phi_1_2_ladder = _231;
            frontier_phi_1_2_ladder_1 = _1181 - floor(_1181);
        }
        _228 = frontier_phi_1_2_ladder_1;
        _230 = frontier_phi_1_2_ladder;
    }
    float _232 = _230 + cbMtdParam._m0[11u].y;
    float _236 = fract(cbMtdParam._m0[11u].z + _228) * 6.0;
    uint _239 = uint(int(floor(_236)));
    float _241 = _236 - float(int(_239));
    float _244 = (1.0 - _232) * _225;
    float _247 = (1.0 - (_241 * _232)) * _225;
    float _251 = (1.0 - ((1.0 - _241) * _232)) * _225;
    float _260;
    float _262;
    float _263;
    if ((_239 == 0u) || (_239 == 6u))
    {
        _260 = _225;
        _262 = _251;
        _263 = _244;
    }
    else
    {
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        if (_239 == 1u)
        {
            frontier_phi_3_4_ladder = _225;
            frontier_phi_3_4_ladder_1 = _247;
            frontier_phi_3_4_ladder_2 = _244;
        }
        else
        {
            float frontier_phi_3_4_ladder_8_ladder;
            float frontier_phi_3_4_ladder_8_ladder_1;
            float frontier_phi_3_4_ladder_8_ladder_2;
            if (_239 == 2u)
            {
                frontier_phi_3_4_ladder_8_ladder = _225;
                frontier_phi_3_4_ladder_8_ladder_1 = _244;
                frontier_phi_3_4_ladder_8_ladder_2 = _251;
            }
            else
            {
                float frontier_phi_3_4_ladder_8_ladder_13_ladder;
                float frontier_phi_3_4_ladder_8_ladder_13_ladder_1;
                float frontier_phi_3_4_ladder_8_ladder_13_ladder_2;
                if (_239 == 3u)
                {
                    frontier_phi_3_4_ladder_8_ladder_13_ladder = _247;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder_1 = _244;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder_2 = _225;
                }
                else
                {
                    bool _1222 = _239 == 4u;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder = _244;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder_1 = _1222 ? _251 : _225;
                    frontier_phi_3_4_ladder_8_ladder_13_ladder_2 = _1222 ? _225 : _247;
                }
                frontier_phi_3_4_ladder_8_ladder = frontier_phi_3_4_ladder_8_ladder_13_ladder;
                frontier_phi_3_4_ladder_8_ladder_1 = frontier_phi_3_4_ladder_8_ladder_13_ladder_1;
                frontier_phi_3_4_ladder_8_ladder_2 = frontier_phi_3_4_ladder_8_ladder_13_ladder_2;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_8_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_8_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_8_ladder_2;
        }
        _260 = frontier_phi_3_4_ladder_1;
        _262 = frontier_phi_3_4_ladder;
        _263 = frontier_phi_3_4_ladder_2;
    }
    float _275 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _276 = _275 * _164;
    float _277 = _275 * _165;
    float _278 = _275 * _166;
    float _3281 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _3292 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _3303 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _297 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _339 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _349 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _339);
    float _350 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _339);
    float _351 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _339);
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _349 * _355;
    float _357 = _350 * _355;
    float _358 = _351 * _355;
    float _364 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _365 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _385 = fma(_278, cbSceneParam._m0[5u].z, fma(_277, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _276));
    float _388 = fma(_278, cbSceneParam._m0[6u].z, fma(_277, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _276));
    float _391 = fma(_278, cbSceneParam._m0[7u].z, fma(_277, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _276));
    uint _404 = uint(roundEven(NORMAL.w)) * 13u;
    uint _405 = _404 + 9u;
    uint _406 = _405 + uint(cbMatDynParam._m0[0u].w);
    float _412 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0)))) * cbInstanceData._m0[_406].x;
    float _413 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0)))) * cbInstanceData._m0[_406].y;
    float _414 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0)))) * cbInstanceData._m0[_406].z;
    float _3314 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
    float _3325 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _416 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
    float _3336 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    vec4 _426 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _364, cbSceneParam._m0[86u].y * _365));
    float _429 = _426.x * TEXCOORD.z;
    float _430 = dot(vec3(_276, _277, _278), vec3(_356, _357, _358));
    float _433 = _430 * 2.0;
    float _438 = (_433 * _276) - _356;
    float _439 = (_433 * _277) - _357;
    float _440 = (_433 * _278) - _358;
    float _462 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _466 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _470 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _774;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _499 = fma(_470, cbModelParam._m0[26u].z, fma(_466, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _462));
        float _503 = fma(_470, cbModelParam._m0[27u].z, fma(_466, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _462));
        float _507 = fma(_470, cbModelParam._m0[28u].z, fma(_466, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _462));
        float _532 = _462 + _276;
        float _533 = _466 + _277;
        float _534 = _470 + _278;
        float _544 = fma(_534, cbModelParam._m0[26u].z, fma(_533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _532)) - _499;
        float _545 = fma(_534, cbModelParam._m0[27u].z, fma(_533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _532)) - _503;
        float _546 = fma(_534, cbModelParam._m0[28u].z, fma(_533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _532)) - _507;
        float _550 = inversesqrt(dot(vec3(_544, _545, _546), vec3(_544, _545, _546)));
        float _563 = ((_550 * _544) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_499 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _564 = ((_550 * _545) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_503 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _565 = ((_550 * _546) / cbModelParam._m0[34u].z) + ((((((_507 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _575 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _582 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _589 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        float _602 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _603 = _602 * (_568.x + (-0.5));
        float _604 = _602 * (_568.y + (-0.5));
        float _605 = _602 * (_568.z + (-0.5));
        float _612 = exp2((_575.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_575.x + (-0.5));
        float _614 = _612 * (_575.y + (-0.5));
        float _615 = _612 * (_575.z + (-0.5));
        float _622 = exp2((_582.w + (-0.5)) * 20.0) * 2.0;
        float _623 = _622 * (_582.x + (-0.5));
        float _624 = _622 * (_582.y + (-0.5));
        float _625 = _622 * (_582.z + (-0.5));
        float _632 = exp2((_589.w + (-0.5)) * 20.0) * 2.0;
        float _633 = _632 * (_589.x + (-0.5));
        float _634 = _632 * (_589.y + (-0.5));
        float _635 = _632 * (_589.z + (-0.5));
        float _636 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _637 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _638 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _639 = _603 * 0.5;
        float _640 = _613 * 0.5;
        float _641 = _623 * 0.5;
        float _642 = dot(vec3(_639, _640, _641), vec3(_639, _640, _641));
        float _647 = (_642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_642);
        float _656 = (dot(vec3(_276, _277, _278), vec3(_647 * _639, _647 * _640, _647 * _641)) + 1.0) * 0.5;
        float _3362 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _666 = sqrt(((_640 * _640) + (_639 * _639)) + (_641 * _641)) / (_636 + 9.9999997473787516355514526367188e-06);
        float _3373 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _668 = _667 * 2.0;
        float _672 = (1.0 - _667) / (_667 + 1.0);
        float _3384 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _682 = ((((1.0 - _673) * (_668 + 2.0)) * exp2(log2(isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))) * (_668 + 1.0))) + _673) * _636;
        float _683 = _604 * 0.5;
        float _684 = _614 * 0.5;
        float _685 = _624 * 0.5;
        float _686 = dot(vec3(_683, _684, _685), vec3(_683, _684, _685));
        float _691 = (_686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_686);
        float _699 = (dot(vec3(_276, _277, _278), vec3(_691 * _683, _691 * _684, _691 * _685)) + 1.0) * 0.5;
        float _3395 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _708 = sqrt(((_684 * _684) + (_683 * _683)) + (_685 * _685)) / (_637 + 9.9999997473787516355514526367188e-06);
        float _3406 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _710 = _709 * 2.0;
        float _714 = (1.0 - _709) / (_709 + 1.0);
        float _3417 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _724 = ((((1.0 - _715) * (_710 + 2.0)) * exp2(log2(isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))) * (_710 + 1.0))) + _715) * _637;
        float _725 = _605 * 0.5;
        float _726 = _615 * 0.5;
        float _727 = _625 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _741 = (dot(vec3(_276, _277, _278), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3428 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _750 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_638 + 9.9999997473787516355514526367188e-06);
        float _3439 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3450 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) * (_752 + 1.0))) + _757) * _638;
        _774 = _605;
        _776 = _604;
        _777 = _603;
        _778 = _615;
        _779 = _614;
        _780 = _613;
        _781 = _625;
        _782 = _624;
        _783 = _623;
        _784 = _638;
        _785 = _637;
        _786 = _636;
        _787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0)));
        _788 = cbModelParam._m0[36u].z * (isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0)));
        _789 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
    }
    else
    {
        _774 = _775;
        _776 = _775;
        _777 = _775;
        _778 = _775;
        _779 = _775;
        _780 = _775;
        _781 = _775;
        _782 = _775;
        _783 = _775;
        _784 = _775;
        _785 = _775;
        _786 = _775;
        _787 = 0.0;
        _788 = 0.0;
        _789 = 0.0;
    }
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _822 = fma(_470, cbModelParam._m0[30u].z, fma(_466, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _462));
        float _826 = fma(_470, cbModelParam._m0[31u].z, fma(_466, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _462));
        float _830 = fma(_470, cbModelParam._m0[32u].z, fma(_466, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _462));
        float _853 = _462 + _276;
        float _854 = _466 + _277;
        float _855 = _470 + _278;
        float _865 = fma(_855, cbModelParam._m0[30u].z, fma(_854, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _853)) - _822;
        float _866 = fma(_855, cbModelParam._m0[31u].z, fma(_854, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _853)) - _826;
        float _867 = fma(_855, cbModelParam._m0[32u].z, fma(_854, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _853)) - _830;
        float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
        float _884 = ((_871 * _865) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_822 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_871 * _866) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_826 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_871 * _867) / cbModelParam._m0[35u].z) + ((((((_830 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        float _921 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_888.x + (-0.5));
        float _923 = _921 * (_888.y + (-0.5));
        float _924 = _921 * (_888.z + (-0.5));
        float _931 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_895.x + (-0.5));
        float _933 = _931 * (_895.y + (-0.5));
        float _934 = _931 * (_895.z + (-0.5));
        float _941 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_902.x + (-0.5));
        float _943 = _941 * (_902.y + (-0.5));
        float _944 = _941 * (_902.z + (-0.5));
        float _951 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_909.x + (-0.5));
        float _953 = _951 * (_909.y + (-0.5));
        float _954 = _951 * (_909.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_276, _277, _278), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3491 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3502 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3513 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * (_985 + 1.0))) + _990) * _955;
        float _1000 = _923 * 0.5;
        float _1001 = _933 * 0.5;
        float _1002 = _943 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_276, _277, _278), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3524 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3535 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3546 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * (_1027 + 1.0))) + _1032) * _956;
        float _1042 = _924 * 0.5;
        float _1043 = _934 * 0.5;
        float _1044 = _944 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_276, _277, _278), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3557 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3568 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3579 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (_1069 + 1.0))) + _1074) * _957;
        _1091 = _924;
        _1092 = _923;
        _1093 = _922;
        _1094 = _934;
        _1095 = _933;
        _1096 = _932;
        _1097 = _944;
        _1098 = _943;
        _1099 = _942;
        _1100 = _957;
        _1101 = _956;
        _1102 = _955;
        _1103 = cbModelParam._m0[36u].w * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1104 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1105 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _775;
        _1092 = _775;
        _1093 = _775;
        _1094 = _775;
        _1095 = _775;
        _1096 = _775;
        _1097 = _775;
        _1098 = _775;
        _1099 = _775;
        _1100 = _775;
        _1101 = _775;
        _1102 = _775;
        _1103 = 0.0;
        _1104 = 0.0;
        _1105 = 0.0;
    }
    float _1115 = (cbModelParam._m0[1u].x * (_1103 - _787)) + _787;
    float _1116 = (cbModelParam._m0[1u].x * (_1104 - _788)) + _788;
    float _1117 = (cbModelParam._m0[1u].x * (_1105 - _789)) + _789;
    float _1138 = fma(_1117, cbSceneParam._m0[89u].z, fma(_1116, cbSceneParam._m0[89u].y, _1115 * cbSceneParam._m0[89u].x));
    float _1141 = fma(_1117, cbSceneParam._m0[90u].z, fma(_1116, cbSceneParam._m0[90u].y, _1115 * cbSceneParam._m0[90u].x));
    float _1144 = fma(_1117, cbSceneParam._m0[91u].z, fma(_1116, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1115));
    float _1159 = _438 * 0.5;
    float _1160 = _439 * 0.5;
    float _1161 = _440 * 0.5;
    float _1162 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1093, _1096, _1099, _1102));
    float _1165 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1092, _1095, _1098, _1101));
    float _1168 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1091, _1094, _1097, _1100));
    float _1220;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1193 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_774, _778, _781, _784));
        float _1197 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_776, _779, _782, _785));
        float _1201 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_777, _780, _783, _786));
        float _1208 = dot(vec4(cbModelParam._m0[39u]), vec4(_1159, _1160, _1161, 1.0));
        _1220 = dot(vec3(isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1208) ? 0.0 : (isnan(0.0) ? _1208 : max(0.0, _1208))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1220 = 1.0;
    }
    float _1233;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1224 = dot(vec4(cbModelParam._m0[40u]), vec4(_1159, _1160, _1161, 1.0));
        _1233 = dot(vec3(isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)), isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)), isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1224) ? 0.0 : (isnan(0.0) ? _1224 : max(0.0, _1224))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1233 = 1.0;
    }
    float _1237 = (_1233 * cbModelParam._m0[1u].x) + (_1220 * (1.0 - cbModelParam._m0[1u].x));
    float _1246 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1328;
    float _1330;
    float _1332;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1295 = fma(_470, cbModelParam._m0[13u].z, fma(_466, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _462)) + cbModelParam._m0[13u].w;
        float _1299 = fma(_470, cbModelParam._m0[14u].z, fma(_466, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _462)) + cbModelParam._m0[14u].w;
        float _1303 = fma(_470, cbModelParam._m0[15u].z, fma(_466, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _462)) + cbModelParam._m0[15u].w;
        float _1306 = fma(_440, cbModelParam._m0[13u].z, fma(_439, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _438));
        float _1309 = fma(_440, cbModelParam._m0[14u].z, fma(_439, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _438));
        float _1312 = fma(_440, cbModelParam._m0[15u].z, fma(_439, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _438));
        float _1338;
        if (_1306 > 0.0)
        {
            _1338 = abs((1.0 - _1295) / _1306);
        }
        else
        {
            float frontier_phi_27_25_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_27_25_ladder = abs((_1295 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_27_25_ladder = 5000.0;
            }
            _1338 = frontier_phi_27_25_ladder;
        }
        float _1512;
        if (_1309 > 0.0)
        {
            _1512 = abs((1.0 - _1299) / _1309);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1299 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1512 = frontier_phi_36_32_ladder;
        }
        float _1808;
        if (_1312 > 0.0)
        {
            _1808 = abs((1.0 - _1303) / _1312);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1303 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _1808 = frontier_phi_48_43_ladder;
        }
        float _1810 = isnan(_1512) ? _1338 : (isnan(_1338) ? _1512 : min(_1338, _1512));
        float _1811 = isnan(_1808) ? _1810 : (isnan(_1810) ? _1808 : min(_1810, _1808));
        float _1815 = (_1811 * _1306) + _1295;
        float _1816 = (_1811 * _1309) + _1299;
        float _1817 = (_1811 * _1312) + _1303;
        float _1818 = _1811 * 9.9999997473787516355514526367188e-05;
        float _1820 = (-1.0) - _1818;
        float _1822 = _1818 + 1.0;
        float frontier_phi_26_48_ladder;
        float frontier_phi_26_48_ladder_1;
        float frontier_phi_26_48_ladder_2;
        if ((_1817 > _1822) || ((_1817 < _1820) || ((_1816 > _1822) || ((_1816 < _1820) || ((_1815 < _1820) || (_1815 > _1822))))))
        {
            frontier_phi_26_48_ladder = 0.0;
            frontier_phi_26_48_ladder_1 = 0.0;
            frontier_phi_26_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1962 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1817, cbModelParam._m0[9u].z, fma(_1816, cbModelParam._m0[9u].y, _1815 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1817, cbModelParam._m0[10u].z, fma(_1816, cbModelParam._m0[10u].y, _1815 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1817, cbModelParam._m0[11u].z, fma(_1816, cbModelParam._m0[11u].y, _1815 * cbModelParam._m0[11u].x))), _1246);
            frontier_phi_26_48_ladder = _1962.z * cbModelParam._m0[1u].y;
            frontier_phi_26_48_ladder_1 = _1962.y * cbModelParam._m0[1u].y;
            frontier_phi_26_48_ladder_2 = _1962.x * cbModelParam._m0[1u].y;
        }
        _1328 = frontier_phi_26_48_ladder_2;
        _1330 = frontier_phi_26_48_ladder_1;
        _1332 = frontier_phi_26_48_ladder;
    }
    else
    {
        vec4 _1316 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_438, _439, _440), _1246);
        _1328 = _1316.x * cbModelParam._m0[1u].y;
        _1330 = _1316.y * cbModelParam._m0[1u].y;
        _1332 = _1316.z * cbModelParam._m0[1u].y;
    }
    float _1335 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1428;
    float _1430;
    float _1432;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1392 = fma(_470, cbModelParam._m0[21u].z, fma(_466, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _462)) + cbModelParam._m0[21u].w;
        float _1396 = fma(_470, cbModelParam._m0[22u].z, fma(_466, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _462)) + cbModelParam._m0[22u].w;
        float _1400 = fma(_470, cbModelParam._m0[23u].z, fma(_466, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _462)) + cbModelParam._m0[23u].w;
        float _1403 = fma(_440, cbModelParam._m0[21u].z, fma(_439, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _438));
        float _1406 = fma(_440, cbModelParam._m0[22u].z, fma(_439, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _438));
        float _1409 = fma(_440, cbModelParam._m0[23u].z, fma(_439, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _438));
        float _1517;
        if (_1403 > 0.0)
        {
            _1517 = abs((1.0 - _1392) / _1403);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1392 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1517 = frontier_phi_38_34_ladder;
        }
        float _1835;
        if (_1406 > 0.0)
        {
            _1835 = abs((1.0 - _1396) / _1406);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1396 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1835 = frontier_phi_50_45_ladder;
        }
        float _2108;
        if (_1409 > 0.0)
        {
            _2108 = abs((1.0 - _1400) / _1409);
        }
        else
        {
            float frontier_phi_60_57_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_60_57_ladder = abs((_1400 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_60_57_ladder = 5000.0;
            }
            _2108 = frontier_phi_60_57_ladder;
        }
        float _2110 = isnan(_1835) ? _1517 : (isnan(_1517) ? _1835 : min(_1517, _1835));
        float _2111 = isnan(_2108) ? _2110 : (isnan(_2110) ? _2108 : min(_2110, _2108));
        float _2115 = (_2111 * _1403) + _1392;
        float _2116 = (_2111 * _1406) + _1396;
        float _2117 = (_2111 * _1409) + _1400;
        float _2118 = _2111 * 9.9999997473787516355514526367188e-05;
        float _2119 = (-1.0) - _2118;
        float _2121 = _2118 + 1.0;
        float frontier_phi_35_60_ladder;
        float frontier_phi_35_60_ladder_1;
        float frontier_phi_35_60_ladder_2;
        if ((_2117 > _2121) || ((_2117 < _2119) || ((_2116 > _2121) || ((_2116 < _2119) || ((_2115 < _2119) || (_2115 > _2121))))))
        {
            frontier_phi_35_60_ladder = 0.0;
            frontier_phi_35_60_ladder_1 = 0.0;
            frontier_phi_35_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2208 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2117, cbModelParam._m0[17u].z, fma(_2116, cbModelParam._m0[17u].y, _2115 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2117, cbModelParam._m0[18u].z, fma(_2116, cbModelParam._m0[18u].y, _2115 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2117, cbModelParam._m0[19u].z, fma(_2116, cbModelParam._m0[19u].y, _2115 * cbModelParam._m0[19u].x))), _1335);
            frontier_phi_35_60_ladder = _2208.z * cbModelParam._m0[1u].z;
            frontier_phi_35_60_ladder_1 = _2208.y * cbModelParam._m0[1u].z;
            frontier_phi_35_60_ladder_2 = _2208.x * cbModelParam._m0[1u].z;
        }
        _1428 = frontier_phi_35_60_ladder_2;
        _1430 = frontier_phi_35_60_ladder_1;
        _1432 = frontier_phi_35_60_ladder;
    }
    else
    {
        vec4 _1412 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_438, _439, _440), _1335);
        _1428 = _1412.x * cbModelParam._m0[1u].z;
        _1430 = _1412.y * cbModelParam._m0[1u].z;
        _1432 = _1412.z * cbModelParam._m0[1u].z;
    }
    float _1444 = _429 * 0.01200000010430812835693359375;
    float _1446 = _1444 * ((cbModelParam._m0[1u].w * (_1428 - _1328)) + _1328);
    float _1447 = _1444 * ((cbModelParam._m0[1u].w * (_1430 - _1330)) + _1330);
    float _1448 = _1444 * ((cbModelParam._m0[1u].w * (_1432 - _1332)) + _1332);
    float _1451 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1454 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1457 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, _1446 * cbSceneParam._m0[91u].x));
    float _1491 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1495 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1499 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1503 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1504 = _1491 / _1503;
    float _1505 = _1495 / _1503;
    float _1506 = _1499 / _1503;
    float _1653;
    float _1654;
    float _1655;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1533 = ((uint(_1506 > cbSceneParam._m0[59u].y) + uint(_1506 > cbSceneParam._m0[59u].x)) + uint(_1506 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1534 = _1533 + 43u;
        uint _1542 = _1533 + 44u;
        uint _1550 = _1533 + 45u;
        uint _1558 = _1533 + 46u;
        float _1569 = fma(_1503, cbSceneParam._m0[_1534].w, fma(_1499, cbSceneParam._m0[_1534].z, fma(_1495, cbSceneParam._m0[_1534].y, _1491 * cbSceneParam._m0[_1534].x)));
        float _1573 = fma(_1503, cbSceneParam._m0[_1542].w, fma(_1499, cbSceneParam._m0[_1542].z, fma(_1495, cbSceneParam._m0[_1542].y, _1491 * cbSceneParam._m0[_1542].x)));
        float _1581 = fma(_1503, cbSceneParam._m0[_1558].w, fma(_1499, cbSceneParam._m0[_1558].z, fma(_1495, cbSceneParam._m0[_1558].y, _1491 * cbSceneParam._m0[_1558].x)));
        float _1586 = cbSceneParam._m0[33u].z * _1581;
        float _1588 = cbSceneParam._m0[33u].w * _1581;
        float _1591 = fma(_1503, cbSceneParam._m0[_1550].w, fma(_1499, cbSceneParam._m0[_1550].z, fma(_1495, cbSceneParam._m0[_1550].y, _1491 * cbSceneParam._m0[_1550].x))) / _1581;
        float _1639 = (cbSceneParam._m0[33u].x - sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506))) * cbSceneParam._m0[33u].y;
        float _3705 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1646 = (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1586 + _1569) / _1581, (_1588 + _1573) / _1581), _1591), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1588 + _1569) / _1581, (_1573 - _1586) / _1581), _1591), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1569 - _1586) / _1581, (_1573 - _1588) / _1581), _1591), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1569 - _1588) / _1581, (_1586 + _1573) / _1581), _1591), 0.0)).x), vec4(0.25)));
        _1653 = 1.0 - (_1646 * cbSceneParam._m0[34u].x);
        _1654 = 1.0 - (_1646 * cbSceneParam._m0[34u].y);
        _1655 = 1.0 - (_1646 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1653 = 1.0;
        _1654 = 1.0;
        _1655 = 1.0;
    }
    float _1719;
    float _1721;
    float _1723;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1707 = fma(_1503, cbSceneParam._m0[63u].w, fma(_1499, cbSceneParam._m0[63u].z, fma(_1495, cbSceneParam._m0[63u].y, _1491 * cbSceneParam._m0[63u].x)));
        float _1708 = fma(_1503, cbSceneParam._m0[60u].w, fma(_1499, cbSceneParam._m0[60u].z, fma(_1495, cbSceneParam._m0[60u].y, _1491 * cbSceneParam._m0[60u].x))) / _1707;
        float _1709 = fma(_1503, cbSceneParam._m0[61u].w, fma(_1499, cbSceneParam._m0[61u].z, fma(_1495, cbSceneParam._m0[61u].y, _1491 * cbSceneParam._m0[61u].x))) / _1707;
        float frontier_phi_47_46_ladder;
        float frontier_phi_47_46_ladder_1;
        float frontier_phi_47_46_ladder_2;
        if ((((_1708 >= cbSceneParam._m0[64u].x) && (_1709 >= cbSceneParam._m0[64u].y)) && (_1708 <= cbSceneParam._m0[64u].z)) && (_1709 <= cbSceneParam._m0[64u].w))
        {
            float _1848 = fma(_1503, cbSceneParam._m0[62u].w, fma(_1499, cbSceneParam._m0[62u].z, fma(_1495, cbSceneParam._m0[62u].y, _1491 * cbSceneParam._m0[62u].x))) / _1707;
            float _1852 = isnan(cbSceneParam._m0[41u].w) ? _1848 : (isnan(_1848) ? cbSceneParam._m0[41u].w : max(_1848, cbSceneParam._m0[41u].w));
            float _1895 = (cbSceneParam._m0[33u].x - sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506))) * cbSceneParam._m0[33u].y;
            float _3721 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
            float _1902 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1708, cbSceneParam._m0[33u].w + _1709), _1852), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1708, _1709 - cbSceneParam._m0[33u].z), _1852), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1708 - cbSceneParam._m0[33u].z, _1709 - cbSceneParam._m0[33u].w), _1852), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1708 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1709), _1852), 0.0)).x), vec4(0.25)));
            float _1906 = 1.0 - (_1902 * cbSceneParam._m0[34u].x);
            float _1907 = 1.0 - (_1902 * cbSceneParam._m0[34u].y);
            float _1908 = 1.0 - (_1902 * cbSceneParam._m0[34u].z);
            frontier_phi_47_46_ladder = isnan(_1908) ? _1655 : (isnan(_1655) ? _1908 : min(_1655, _1908));
            frontier_phi_47_46_ladder_1 = isnan(_1907) ? _1654 : (isnan(_1654) ? _1907 : min(_1654, _1907));
            frontier_phi_47_46_ladder_2 = isnan(_1906) ? _1653 : (isnan(_1653) ? _1906 : min(_1653, _1906));
        }
        else
        {
            frontier_phi_47_46_ladder = _1655;
            frontier_phi_47_46_ladder_1 = _1654;
            frontier_phi_47_46_ladder_2 = _1653;
        }
        _1719 = frontier_phi_47_46_ladder_2;
        _1721 = frontier_phi_47_46_ladder_1;
        _1723 = frontier_phi_47_46_ladder;
    }
    else
    {
        _1719 = _1653;
        _1721 = _1654;
        _1723 = _1655;
    }
    uvec4 _1728 = floatBitsToUint(cbInstanceData._m0[_404 + 5u]);
    uint _1730 = _1728.x * 14u;
    uint _1731 = _1730 + 13u;
    float _1738 = _429 + (-1.0);
    float _1744 = (cbLight._m0[_1731].x * _1738) + 1.0;
    float _1745 = (cbLight._m0[_1731].y * _1738) + 1.0;
    float _1746 = (cbLight._m0[_1731].z * _1738) + 1.0;
    float _1747 = (cbLight._m0[_1731].w * _1738) + 1.0;
    uint _1748 = _1730 + 5u;
    float _1754 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
    uint _1758 = _1730 + 4u;
    float _1767 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1771 = _1730 | 1u;
    float _1782 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_276, _277, _278));
    float _1785 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_276, _277, _278));
    float _3757 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _3768 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1790 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.3183098733425140380859375;
    float _1792 = (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 0.3183098733425140380859375;
    float _1799 = ((cbLight._m0[_1748].x * _1754) * _1792) + (((cbLight._m0[_1758].x * _1719) * _1767) * _1790);
    float _1800 = ((_1754 * cbLight._m0[_1748].y) * _1792) + (((cbLight._m0[_1758].y * _1721) * _1767) * _1790);
    float _1801 = ((_1754 * cbLight._m0[_1748].z) * _1792) + (((cbLight._m0[_1758].z * _1723) * _1767) * _1790);
    uvec4 _1805 = floatBitsToUint(cbLight._m0[_1730 + 12u]);
    bool _1807 = _1805.x == 0u;
    float _1909;
    float _1911;
    float _1913;
    if (_1807)
    {
        _1909 = _1799;
        _1911 = _1800;
        _1913 = _1801;
    }
    else
    {
        uint _1917 = _1730 + 6u;
        float _1933 = (dot(vec3(cbLight._m0[_1730 + 2u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _1934 = _1933 * _1933;
        float _3779 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1936 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _1909 = (((cbLight._m0[_1917].x * 0.3183098733425140380859375) * _1935) * _1936) + _1799;
        _1911 = (((cbLight._m0[_1917].y * 0.3183098733425140380859375) * _1935) * _1936) + _1800;
        _1913 = (((cbLight._m0[_1917].z * 0.3183098733425140380859375) * _1935) * _1936) + _1801;
    }
    bool _1916 = _1805.y == 0u;
    float _1971;
    float _1973;
    float _1975;
    if (_1916)
    {
        _1971 = _1909;
        _1973 = _1911;
        _1975 = _1913;
    }
    else
    {
        uint _2079 = _1730 + 7u;
        float _2095 = (dot(vec3(cbLight._m0[_1730 + 3u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _2096 = _2095 * _2095;
        float _3795 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2097 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _2098 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _1971 = (((cbLight._m0[_2079].x * 0.3183098733425140380859375) * _2097) * _2098) + _1909;
        _1973 = (((cbLight._m0[_2079].y * 0.3183098733425140380859375) * _2097) * _2098) + _1911;
        _1975 = (((cbLight._m0[_2079].z * 0.3183098733425140380859375) * _2097) * _2098) + _1913;
    }
    uint _1977 = _1730 + 8u;
    float _1983 = cbLight._m0[_1730].x + _356;
    float _1984 = cbLight._m0[_1730].y + _357;
    float _1985 = cbLight._m0[_1730].z + _358;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1993 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1730].xyz));
    float _3811 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _1997 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1998 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1983 * _1989, _1984 * _1989, _1985 * _1989));
    float _3833 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2009 = (exp2(log2(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2015 = (0.5 / ((_1996 + 9.9999999392252902907785028219223e-09) + _1997)) * _1996;
    float _3844 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * 0.31831014156341552734375;
    uint _2031 = _1730 + 9u;
    float _2037 = cbLight._m0[_1771].x + _356;
    float _2038 = cbLight._m0[_1771].y + _357;
    float _2039 = cbLight._m0[_1771].z + _358;
    float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
    float _2047 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1771].xyz));
    float _3855 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _2051 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_2037 * _2043, _2038 * _2043, _2039 * _2043));
    float _3866 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2060 = (exp2(log2(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2064 = (0.5 / ((_2050 + 9.9999999392252902907785028219223e-09) + _1997)) * _2050;
    float _3877 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2066 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.31831014156341552734375;
    float _2076 = (((_2060 * cbLight._m0[_2031].x) * _2066) * _1754) + ((((cbLight._m0[_1977].x * _1719) * _2009) * _2017) * _1767);
    float _2077 = (((_2060 * cbLight._m0[_2031].y) * _2066) * _1754) + ((((cbLight._m0[_1977].y * _1721) * _2009) * _2017) * _1767);
    float _2078 = (((_2060 * cbLight._m0[_2031].z) * _2066) * _1754) + ((((cbLight._m0[_1977].z * _1723) * _2009) * _2017) * _1767);
    float _2134;
    float _2136;
    float _2138;
    if (_1807)
    {
        _2134 = _2076;
        _2136 = _2077;
        _2138 = _2078;
    }
    else
    {
        uint _2140 = _1730 + 10u;
        uint _2146 = _1730 + 2u;
        float _2152 = cbLight._m0[_2146].x + _356;
        float _2153 = cbLight._m0[_2146].y + _357;
        float _2154 = cbLight._m0[_2146].z + _358;
        float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
        float _2162 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_2146].xyz));
        float _3888 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _2166 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2152 * _2158, _2153 * _2158, _2154 * _2158));
        float _3899 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2175 = (exp2(log2(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2179 = (0.5 / ((_2165 + 9.9999999392252902907785028219223e-09) + _1997)) * _2165;
        float _3910 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2181 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * 0.31831014156341552734375;
        float _2182 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _2134 = (((_2175 * cbLight._m0[_2140].x) * _2181) * _2182) + _2076;
        _2136 = (((_2175 * cbLight._m0[_2140].y) * _2181) * _2182) + _2077;
        _2138 = (((_2175 * cbLight._m0[_2140].z) * _2181) * _2182) + _2078;
    }
    float _2213;
    float _2215;
    float _2217;
    if (_1916)
    {
        _2213 = _2134;
        _2215 = _2136;
        _2217 = _2138;
    }
    else
    {
        uint _2224 = _1730 + 11u;
        uint _2230 = _1730 + 3u;
        float _2236 = cbLight._m0[_2230].x + _356;
        float _2237 = cbLight._m0[_2230].y + _357;
        float _2238 = cbLight._m0[_2230].z + _358;
        float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
        float _2246 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_2230].xyz));
        float _3926 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _2250 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2236 * _2242, _2237 * _2242, _2238 * _2242));
        float _3937 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2263 = (0.5 / ((_2249 + 9.9999999392252902907785028219223e-09) + _1997)) * _2249;
        float _3948 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2265 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.31831014156341552734375;
        float _2266 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _2213 = (((_2259 * cbLight._m0[_2224].x) * _2265) * _2266) + _2134;
        _2215 = (((_2259 * cbLight._m0[_2224].y) * _2265) * _2266) + _2136;
        _2217 = (((_2259 * cbLight._m0[_2224].z) * _2265) * _2266) + _2138;
    }
    float _2332;
    float _2334;
    float _2336;
    float _2338;
    float _2340;
    float _2342;
    if (_1728.y == 0u)
    {
        uvec4 _2287 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2288 = _2287.x;
        uint _2299 = uint((float(_2287.y) * floor(float(uint(cbSceneParam._m0[85u].y * _365) / _2288))) + floor(float(uint(cbSceneParam._m0[85u].x * _364) / _2288)));
        float _2309 = (log2(_1506 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2310 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        uint _2313 = uint(isnan(14.0) ? _2310 : (isnan(_2310) ? 14.0 : min(_2310, 14.0)));
        uvec4 _2318 = texelFetch(g_lightClusterGridBuffer, int(((_2313 << 2u) + (_2299 << 6u)) >> 2u));
        uint _2319 = _2318.x;
        uint _2320 = _2287.z;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        if (((((1u << ((_2320 >> 4u) & 15u)) + 4294967295u) & _2319) == 0u) || ((_2320 & 240u) == 0u))
        {
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
        }
        else
        {
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            uint _2585 = 0u;
            uint _2594;
            bool _2595;
            for (;;)
            {
                _2594 = texelFetch(g_lightClassification, int((((_2313 << 5u) + (_2299 << 9u)) + (_2585 << 2u)) >> 2u)).x;
                _2595 = _2594 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2595)
                {
                    frontier_phi_79_pred = _2584;
                    frontier_phi_79_pred_1 = _2583;
                    frontier_phi_79_pred_2 = _2582;
                    frontier_phi_79_pred_3 = _2580;
                    frontier_phi_79_pred_4 = _2579;
                    frontier_phi_79_pred_5 = _2581;
                }
                else
                {
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    uint _2709;
                    _2703 = _2579;
                    _2704 = _2580;
                    _2705 = _2581;
                    _2706 = _2582;
                    _2707 = _2583;
                    _2708 = _2584;
                    _2709 = _2594;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    for (;;)
                    {
                        uint _2713 = uint(findLSB(_2709)) + (_2585 << 5u);
                        uint _2710 = (_2709 + 4294967295u) & _2709;
                        uint _2715 = _2713 * 48u;
                        vec4 _2729 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 3u)).x));
                        uint _2735 = (_2713 * 48u) + 4u;
                        vec4 _2748 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2735)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 3u)).x));
                        uint _2754 = (_2713 * 48u) + 8u;
                        vec3 _2765 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 2u)).x));
                        float _2769 = _2729.x - _1504;
                        float _2770 = _2729.y - _1505;
                        float _2771 = _2729.z - _1506;
                        float _2772 = dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771));
                        float _2775 = inversesqrt(_2772);
                        float _2784 = 1.0 - (_2772 * _2729.w);
                        float _3974 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2785 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                        float _2786 = sqrt(_2772) * _2748.w;
                        float _2789 = 1.39999997615814208984375 / (_2786 + 1.39999997615814208984375);
                        float _2790 = _2789 * _2789;
                        float _2793 = ((1.0 - _2790) * dot(vec3(_385, _388, _391), vec3(_2775 * _2769, _2775 * _2770, _2775 * _2771))) + _2790;
                        float _2796 = _2786 * _2786;
                        float _2800 = ((isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0))) * _2785) / ((_2796 * 0.699999988079071044921875) + 1.0);
                        float _2804 = (-0.0) - _1504;
                        float _2805 = (-0.0) - _1505;
                        float _2806 = (-0.0) - _1506;
                        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
                        float _2814 = dot(vec3(_385, _388, _391), vec3(_2810 * _2804, _2810 * _2805, _2810 * _2806));
                        float _3990 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _4001 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2818 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2822 = (0.5 / (((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) + 9.9999999392252902907785028219223e-09) + _2818)) * _2818;
                        float _4012 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2831 = (((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * 3.1415927410125732421875) / ((_2796 * 2.1991131305694580078125) + 3.141590118408203125)) * _2785;
                        _2638 = (_2800 * _2748.x) + _2706;
                        _2639 = (_2800 * _2748.y) + _2707;
                        _2640 = (_2800 * _2748.z) + _2708;
                        _2635 = (_2831 * _2765.x) + _2703;
                        _2636 = (_2831 * _2765.y) + _2704;
                        _2637 = (_2831 * _2765.z) + _2705;
                        if (_2710 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2703 = _2635;
                            _2704 = _2636;
                            _2705 = _2637;
                            _2706 = _2638;
                            _2707 = _2639;
                            _2708 = _2640;
                            _2709 = _2710;
                        }
                    }
                    frontier_phi_79_pred = _2640;
                    frontier_phi_79_pred_1 = _2639;
                    frontier_phi_79_pred_2 = _2638;
                    frontier_phi_79_pred_3 = _2636;
                    frontier_phi_79_pred_4 = _2635;
                    frontier_phi_79_pred_5 = _2637;
                }
                _2439 = frontier_phi_79_pred;
                _2437 = frontier_phi_79_pred_1;
                _2435 = frontier_phi_79_pred_2;
                _2431 = frontier_phi_79_pred_3;
                _2429 = frontier_phi_79_pred_4;
                _2433 = frontier_phi_79_pred_5;
                uint _2586 = _2585 + 1u;
                if (_2586 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2579 = _2429;
                    _2580 = _2431;
                    _2581 = _2433;
                    _2582 = _2435;
                    _2583 = _2437;
                    _2584 = _2439;
                    _2585 = _2586;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
        }
        uvec4 _2442 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2443 = _2442.z;
        uint _2445 = (_2443 >> 8u) & 15u;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        if (((4294967295u << _2445) & _2319) == 0u)
        {
            _2550 = _2428;
            _2552 = _2430;
            _2554 = _2432;
            _2556 = _2434;
            _2558 = _2436;
            _2560 = _2438;
        }
        else
        {
            float _2575 = inversesqrt(dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506)));
            float frontier_phi_73_74_ladder;
            float frontier_phi_73_74_ladder_1;
            float frontier_phi_73_74_ladder_2;
            float frontier_phi_73_74_ladder_3;
            float frontier_phi_73_74_ladder_4;
            float frontier_phi_73_74_ladder_5;
            if (_2445 < ((_2443 >> 12u) & 15u))
            {
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2559;
                float _2561;
                float _2686 = _2428;
                float _2687 = _2430;
                float _2688 = _2432;
                float _2689 = _2434;
                float _2690 = _2436;
                float _2691 = _2438;
                uint _2692 = _2445;
                uint _2701;
                bool _2702;
                for (;;)
                {
                    _2701 = texelFetch(g_lightClassification, int((((_2313 << 5u) + (_2299 << 9u)) + (_2692 << 2u)) >> 2u)).x;
                    _2702 = _2701 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2702)
                    {
                        frontier_phi_85_pred = _2686;
                        frontier_phi_85_pred_1 = _2691;
                        frontier_phi_85_pred_2 = _2690;
                        frontier_phi_85_pred_3 = _2689;
                        frontier_phi_85_pred_4 = _2688;
                        frontier_phi_85_pred_5 = _2687;
                    }
                    else
                    {
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _2849 = _2686;
                        float _2850 = _2687;
                        float _2851 = _2688;
                        float _2852 = _2689;
                        float _2853 = _2690;
                        float _2854 = _2691;
                        uint _2855 = _2701;
                        uint _2856;
                        vec4 _2881;
                        float _2882;
                        vec4 _2897;
                        vec3 _2909;
                        vec4 _2925;
                        vec4 _2941;
                        float _2988;
                        bool _2989;
                        for (;;)
                        {
                            uint _2866 = ((_2692 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2855));
                            _2856 = (_2855 + 4294967295u) & _2855;
                            uint _2868 = _2866 * 40u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            _2882 = _2881.w;
                            uint _2884 = (_2866 * 40u) + 4u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2899 = (_2866 * 40u) + 8u;
                            _2909 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x));
                            uint _2912 = (_2866 * 40u) + 16u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2928 = (_2866 * 40u) + 20u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2944 = (_2866 * 40u) + 24u;
                            vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2963 = (_2866 * 40u) + 28u;
                            vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            _2988 = fma(_1506, _2976.z, fma(_1505, _2976.y, _2976.x * _1504)) + _2976.w;
                            _2989 = !((fma(_1506, _2957.z, fma(_1505, _2957.y, _2957.x * _1504)) + _2957.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_2989)
                            {
                                float _3016 = _2881.x - _1504;
                                float _3017 = _2881.y - _1505;
                                float _3018 = _2881.z - _1506;
                                float _3019 = dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018));
                                float _3022 = inversesqrt(_3019);
                                float _3023 = _3022 * _3016;
                                float _3024 = _3022 * _3017;
                                float _3025 = _3022 * _3018;
                                float _3029 = 1.0 - (_3019 / (_2882 * _2882));
                                float _4023 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                                float _3034 = sqrt(_3019) * _2897.w;
                                float _3036 = 1.39999997615814208984375 / (_3034 + 1.39999997615814208984375);
                                float _3037 = _3036 * _3036;
                                float _3038 = 1.0 - _3037;
                                float _3040 = (_3038 * dot(vec3(_3023, _3024, _3025), vec3(_385, _388, _391))) + _3037;
                                float _3043 = _3034 * _3034;
                                float _3047 = (fma(_1506, _2925.z, fma(_1505, _2925.y, _2925.x * _1504)) + _2925.w) / _2988;
                                float _3048 = (fma(_1506, _2941.z, fma(_1505, _2941.y, _2941.x * _1504)) + _2941.w) / _2988;
                                float _3052 = 1.0 - dot(vec2(_3047, _3048), vec2(_3047, _3048));
                                float _4039 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                                float _3054 = _3053 * (((isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))) * _3030) / ((_3043 * 0.699999988079071044921875) + 1.0));
                                float _3064 = dot(vec3(_385, _388, _391), vec3((-0.0) - (_1504 * _2575), (-0.0) - (_1505 * _2575), (-0.0) - (_1506 * _2575)));
                                float _4050 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3072 = (_3038 * dot(vec3(_385, _388, _391), vec3(_3023, _3024, _3025))) + _3037;
                                float _4061 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3077 = (0.5 / (((isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) + 9.9999999392252902907785028219223e-09) + _3073)) * _3073;
                                float _4072 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3084 = (_3053 * _3030) * (((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 3.1415927410125732421875) / ((_3043 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_91_pred = _3054 * _2897.z;
                                frontier_phi_91_pred_1 = _3054 * _2897.y;
                                frontier_phi_91_pred_2 = _3054 * _2897.x;
                                frontier_phi_91_pred_3 = _3084 * _2909.z;
                                frontier_phi_91_pred_4 = _3084 * _2909.y;
                                frontier_phi_91_pred_5 = _3084 * _2909.x;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3093 = frontier_phi_91_pred;
                            _3092 = frontier_phi_91_pred_1;
                            _3091 = frontier_phi_91_pred_2;
                            _3090 = frontier_phi_91_pred_3;
                            _3089 = frontier_phi_91_pred_4;
                            _3088 = frontier_phi_91_pred_5;
                            _2839 = _3091 + _2852;
                            _2840 = _3092 + _2853;
                            _2841 = _3093 + _2854;
                            _2836 = _3088 + _2849;
                            _2837 = _3089 + _2850;
                            _2838 = _3090 + _2851;
                            if (_2856 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2856;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _2836;
                        frontier_phi_85_pred_1 = _2841;
                        frontier_phi_85_pred_2 = _2840;
                        frontier_phi_85_pred_3 = _2839;
                        frontier_phi_85_pred_4 = _2838;
                        frontier_phi_85_pred_5 = _2837;
                    }
                    _2551 = frontier_phi_85_pred;
                    _2561 = frontier_phi_85_pred_1;
                    _2559 = frontier_phi_85_pred_2;
                    _2557 = frontier_phi_85_pred_3;
                    _2555 = frontier_phi_85_pred_4;
                    _2553 = frontier_phi_85_pred_5;
                    uint _2693 = _2692 + 1u;
                    if (_2693 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2686 = _2551;
                        _2687 = _2553;
                        _2688 = _2555;
                        _2689 = _2557;
                        _2690 = _2559;
                        _2691 = _2561;
                        _2692 = _2693;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_73_74_ladder = _2559;
                frontier_phi_73_74_ladder_1 = _2557;
                frontier_phi_73_74_ladder_2 = _2555;
                frontier_phi_73_74_ladder_3 = _2553;
                frontier_phi_73_74_ladder_4 = _2551;
                frontier_phi_73_74_ladder_5 = _2561;
            }
            else
            {
                frontier_phi_73_74_ladder = _2436;
                frontier_phi_73_74_ladder_1 = _2434;
                frontier_phi_73_74_ladder_2 = _2432;
                frontier_phi_73_74_ladder_3 = _2430;
                frontier_phi_73_74_ladder_4 = _2428;
                frontier_phi_73_74_ladder_5 = _2438;
            }
            _2550 = frontier_phi_73_74_ladder_4;
            _2552 = frontier_phi_73_74_ladder_3;
            _2554 = frontier_phi_73_74_ladder_2;
            _2556 = frontier_phi_73_74_ladder_1;
            _2558 = frontier_phi_73_74_ladder;
            _2560 = frontier_phi_73_74_ladder_5;
        }
        float _2565 = isnan(1.0) ? _429 : (isnan(_429) ? 1.0 : min(_429, 1.0));
        _2332 = (_2565 * _2556) + _1971;
        _2334 = (_2565 * _2558) + _1973;
        _2336 = (_2565 * _2560) + _1975;
        _2338 = ((_2550 * 0.039999999105930328369140625) * _2565) + _2213;
        _2340 = ((_2552 * 0.039999999105930328369140625) * _2565) + _2215;
        _2342 = ((_2554 * 0.039999999105930328369140625) * _2565) + _2217;
    }
    else
    {
        _2332 = _1971;
        _2334 = _1973;
        _2336 = _1975;
        _2338 = _2213;
        _2340 = _2215;
        _2342 = _2217;
    }
    uint _2348 = _405 + uint(cbMatDynParam._m0[0u].w);
    float _2354 = (cbSceneParam._m0[72u].y * _260) * cbInstanceData._m0[_2348].x;
    float _2355 = (cbSceneParam._m0[72u].y * _262) * cbInstanceData._m0[_2348].y;
    float _2356 = (cbSceneParam._m0[72u].y * _263) * cbInstanceData._m0[_2348].z;
    float _4088 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _4099 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _4110 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _2373 = (((isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2332 + ((isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))) * _429))) + ((_2338 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _1237)) * cbPerFrame._m0[3u].x)) + _2354;
    float _2375 = (_2355 + ((_2340 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _1237)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2334 + ((isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0))) * _429)));
    float _2377 = (_2356 + ((_2342 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _1237)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2336 + ((isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0))) * _429)));
    float _4136 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2390 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    uint _2391 = _404 + 6u;
    float _2399 = _364 / cbSceneParam._m0[86u].x;
    float _2400 = _365 / cbSceneParam._m0[86u].y;
    vec4 _2414 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2399, _2400, (log2((isnan(cbSceneParam._m0[77u].w) ? _297 : (isnan(_297) ? cbSceneParam._m0[77u].w : min(_297, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2416 = _2414.x;
    float _2417 = _2414.y;
    float _2418 = _2414.z;
    float _2419 = _2414.w;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    if (_297 > cbSceneParam._m0[78u].w)
    {
        float _2453 = isnan(_297) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _297 : min(cbSceneParam._m0[80u].w, _297));
        float _2454 = _2453 / _297;
        float _2465 = _2454 * _349;
        float _2466 = _350 * _2454;
        float _2467 = (-0.0) - _2466;
        float _2469 = _2454 * _351;
        float _2471 = (cbSceneParam._m0[77u].w * _2467) / _2453;
        float _2472 = _2471 + cbSceneParam._m0[79u].w;
        float _2473 = cbSceneParam._m0[79u].w - _2466;
        float _2479 = sqrt(((_2465 * _2465) + (_2466 * _2466)) + (_2469 * _2469));
        float _2482 = (1.0 - (cbSceneParam._m0[77u].w / _2453)) * _2479;
        float _2487 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2489 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2648;
        if (abs((_2467 - _2471) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2648 = ((((_2472 > 0.0) ? exp2(_2487 * _2472) : (2.0 - exp2(_2489 * _2472))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2482;
        }
        else
        {
            float _2608 = 1.0 / cbSceneParam._m0[80u].x;
            float _2609 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : max(_2472, _2473));
            float _2610 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : min(_2472, _2473));
            float _2619 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : min(_2609, 0.0));
            float _2620 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : min(_2610, 0.0));
            _2648 = ((abs(_2479 / _2467) * cbSceneParam._m0[80u].y) * ((((_2619 - _2620) * 2.0) - ((exp2(_2487 * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0)))) - exp2(_2487 * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0))))) * _2608)) - ((exp2(_2489 * _2619) - exp2(_2489 * _2620)) * _2608))) + (_2482 * cbSceneParam._m0[80u].z);
        }
        vec4 _2650 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2399, _2400, 1.0), 0.0);
        float _2659 = exp2((_2648 * (-1.44269502162933349609375)) * (1.0 - _2650.w));
        float _2660 = log2(_2659);
        float _2676 = log2(_2419);
        _2491 = (exp2(_2676 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2660 * cbSceneParam._m0[78u].x)) * _2650.x) / cbSceneParam._m0[78u].x)) + _2416;
        _2493 = (exp2(_2676 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2660 * cbSceneParam._m0[78u].y)) * _2650.y) / cbSceneParam._m0[78u].y)) + _2417;
        _2495 = (exp2(_2676 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2660 * cbSceneParam._m0[78u].z)) * _2650.z) / cbSceneParam._m0[78u].z)) + _2418;
        _2497 = _2659 * _2419;
    }
    else
    {
        _2491 = _2416;
        _2493 = _2417;
        _2495 = _2418;
        _2497 = _2419;
    }
    float _2508 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2509 = _2508 == 3.0;
    float _2511 = log2(_2497);
    float _2515 = exp2(_2511 * cbSceneParam._m0[78u].x);
    float _2516 = exp2(_2511 * cbSceneParam._m0[78u].y);
    float _2517 = exp2(_2511 * cbSceneParam._m0[78u].z);
    float _2518 = _2515 * (isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0)));
    float _2519 = _2516 * (isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0)));
    float _2520 = _2517 * (isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0)));
    float _2529 = (_2508 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2529 * (_2509 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2491)));
    SV_Target.y = _2529 * (_2509 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2493)));
    SV_Target.z = _2529 * (_2509 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2495)));
    SV_Target.w = cbInstanceData._m0[_2391].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2354) * _2390) * _2515) * _2529;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2355) * _2390) * _2516) * _2529;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2356) * _2390) * _2517) * _2529;
    SV_Target_1.w = cbInstanceData._m0[_2391].w;
}


