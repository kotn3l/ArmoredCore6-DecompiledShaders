#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _725;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _161 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _162 = _161 * NORMAL.x;
    float _163 = _161 * NORMAL.y;
    float _164 = _161 * NORMAL.z;
    vec4 _184 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _190 = _184.x * cbMtdParam._m0[9u].x;
    float _191 = _184.y * cbMtdParam._m0[9u].y;
    float _192 = _184.z * cbMtdParam._m0[9u].z;
    vec4 _204 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _226 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _227 = _226 * _162;
    float _228 = _226 * _163;
    float _229 = _226 * _164;
    float _2905 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _2916 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _2927 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _249 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _290 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _300 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _290);
    float _301 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _290);
    float _302 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _290);
    float _306 = inversesqrt(dot(vec3(_300, _301, _302), vec3(_300, _301, _302)));
    float _307 = _300 * _306;
    float _308 = _301 * _306;
    float _309 = _302 * _306;
    float _315 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _316 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _337 = fma(_229, cbSceneParam._m0[5u].z, fma(_228, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _227));
    float _340 = fma(_229, cbSceneParam._m0[6u].z, fma(_228, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _227));
    float _343 = fma(_229, cbSceneParam._m0[7u].z, fma(_228, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _227));
    uint _356 = uint(roundEven(NORMAL.w)) * 13u;
    uint _357 = _356 + 9u;
    uint _358 = _357 + uint(cbMatDynParam._m0[0u].w);
    float _364 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2905 : (isnan(_2905) ? 1.0 : min(_2905, 1.0)))) * cbInstanceData._m0[_358].x;
    float _365 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2916 : (isnan(_2916) ? 1.0 : min(_2916, 1.0)))) * cbInstanceData._m0[_358].y;
    float _366 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0)))) * cbInstanceData._m0[_358].z;
    float _2938 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _367 = isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0));
    float _2949 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _368 = isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0));
    float _2960 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _369 = isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0));
    vec4 _378 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _315, cbSceneParam._m0[86u].y * _316));
    float _381 = _378.x * TEXCOORD.z;
    float _382 = dot(vec3(_227, _228, _229), vec3(_307, _308, _309));
    float _385 = _382 * 2.0;
    float _390 = (_385 * _227) - _307;
    float _391 = (_385 * _228) - _308;
    float _392 = (_385 * _229) - _309;
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _422 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _724;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _449 = fma(_422, cbModelParam._m0[26u].z, fma(_418, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _414));
        float _453 = fma(_422, cbModelParam._m0[27u].z, fma(_418, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _414));
        float _457 = fma(_422, cbModelParam._m0[28u].z, fma(_418, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _414));
        float _482 = _414 + _227;
        float _483 = _418 + _228;
        float _484 = _422 + _229;
        float _494 = fma(_484, cbModelParam._m0[26u].z, fma(_483, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _482)) - _449;
        float _495 = fma(_484, cbModelParam._m0[27u].z, fma(_483, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _482)) - _453;
        float _496 = fma(_484, cbModelParam._m0[28u].z, fma(_483, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _482)) - _457;
        float _500 = inversesqrt(dot(vec3(_494, _495, _496), vec3(_494, _495, _496)));
        float _513 = ((_500 * _494) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_449 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _514 = ((_500 * _495) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_453 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _515 = ((_500 * _496) / cbModelParam._m0[34u].z) + ((((((_457 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _518 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_513, _514, _515), 0.0);
        vec4 _525 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_513, _514, _515), 0.0);
        vec4 _532 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_513, _514, _515), 0.0);
        vec4 _539 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_513, _514, _515), 0.0);
        float _552 = exp2((_518.w + (-0.5)) * 20.0) * 2.0;
        float _553 = _552 * (_518.x + (-0.5));
        float _554 = _552 * (_518.y + (-0.5));
        float _555 = _552 * (_518.z + (-0.5));
        float _562 = exp2((_525.w + (-0.5)) * 20.0) * 2.0;
        float _563 = _562 * (_525.x + (-0.5));
        float _564 = _562 * (_525.y + (-0.5));
        float _565 = _562 * (_525.z + (-0.5));
        float _572 = exp2((_532.w + (-0.5)) * 20.0) * 2.0;
        float _573 = _572 * (_532.x + (-0.5));
        float _574 = _572 * (_532.y + (-0.5));
        float _575 = _572 * (_532.z + (-0.5));
        float _582 = exp2((_539.w + (-0.5)) * 20.0) * 2.0;
        float _583 = _582 * (_539.x + (-0.5));
        float _584 = _582 * (_539.y + (-0.5));
        float _585 = _582 * (_539.z + (-0.5));
        float _586 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        float _587 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _588 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _589 = _553 * 0.5;
        float _590 = _563 * 0.5;
        float _591 = _573 * 0.5;
        float _592 = dot(vec3(_589, _590, _591), vec3(_589, _590, _591));
        float _597 = (_592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_592);
        float _606 = (dot(vec3(_227, _228, _229), vec3(_597 * _589, _597 * _590, _597 * _591)) + 1.0) * 0.5;
        float _2986 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        float _616 = sqrt(((_590 * _590) + (_589 * _589)) + (_591 * _591)) / (_586 + 9.9999997473787516355514526367188e-06);
        float _2997 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        float _617 = isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0));
        float _618 = _617 * 2.0;
        float _622 = (1.0 - _617) / (_617 + 1.0);
        float _3008 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _623 = isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0));
        float _632 = ((((1.0 - _623) * (_618 + 2.0)) * exp2(log2(isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0))) * (_618 + 1.0))) + _623) * _586;
        float _633 = _554 * 0.5;
        float _634 = _564 * 0.5;
        float _635 = _574 * 0.5;
        float _636 = dot(vec3(_633, _634, _635), vec3(_633, _634, _635));
        float _641 = (_636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_636);
        float _649 = (dot(vec3(_227, _228, _229), vec3(_641 * _633, _641 * _634, _641 * _635)) + 1.0) * 0.5;
        float _3019 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _658 = sqrt(((_634 * _634) + (_633 * _633)) + (_635 * _635)) / (_587 + 9.9999997473787516355514526367188e-06);
        float _3030 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _659 = isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0));
        float _660 = _659 * 2.0;
        float _664 = (1.0 - _659) / (_659 + 1.0);
        float _3041 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
        float _674 = ((((1.0 - _665) * (_660 + 2.0)) * exp2(log2(isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0))) * (_660 + 1.0))) + _665) * _587;
        float _675 = _555 * 0.5;
        float _676 = _565 * 0.5;
        float _677 = _575 * 0.5;
        float _678 = dot(vec3(_675, _676, _677), vec3(_675, _676, _677));
        float _683 = (_678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_678);
        float _691 = (dot(vec3(_227, _228, _229), vec3(_683 * _675, _683 * _676, _683 * _677)) + 1.0) * 0.5;
        float _3052 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _700 = sqrt(((_676 * _676) + (_675 * _675)) + (_677 * _677)) / (_588 + 9.9999997473787516355514526367188e-06);
        float _3063 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
        float _702 = _701 * 2.0;
        float _706 = (1.0 - _701) / (_701 + 1.0);
        float _3074 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
        float _716 = ((((1.0 - _707) * (_702 + 2.0)) * exp2(log2(isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0))) * (_702 + 1.0))) + _707) * _588;
        _724 = _555;
        _726 = _554;
        _727 = _553;
        _728 = _565;
        _729 = _564;
        _730 = _563;
        _731 = _575;
        _732 = _574;
        _733 = _573;
        _734 = _588;
        _735 = _587;
        _736 = _586;
        _737 = cbModelParam._m0[36u].z * (isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0)));
        _738 = cbModelParam._m0[36u].z * (isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0)));
        _739 = cbModelParam._m0[36u].z * (isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0)));
    }
    else
    {
        _724 = _725;
        _726 = _725;
        _727 = _725;
        _728 = _725;
        _729 = _725;
        _730 = _725;
        _731 = _725;
        _732 = _725;
        _733 = _725;
        _734 = _725;
        _735 = _725;
        _736 = _725;
        _737 = 0.0;
        _738 = 0.0;
        _739 = 0.0;
    }
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _765 = fma(_422, cbModelParam._m0[30u].z, fma(_418, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _414));
        float _769 = fma(_422, cbModelParam._m0[31u].z, fma(_418, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _414));
        float _773 = fma(_422, cbModelParam._m0[32u].z, fma(_418, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _414));
        float _796 = _414 + _227;
        float _797 = _418 + _228;
        float _798 = _422 + _229;
        float _808 = fma(_798, cbModelParam._m0[30u].z, fma(_797, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _796)) - _765;
        float _809 = fma(_798, cbModelParam._m0[31u].z, fma(_797, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _796)) - _769;
        float _810 = fma(_798, cbModelParam._m0[32u].z, fma(_797, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _796)) - _773;
        float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
        float _827 = ((_814 * _808) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_765 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_814 * _809) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_769 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_814 * _810) / cbModelParam._m0[35u].z) + ((((((_773 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        float _864 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_831.x + (-0.5));
        float _866 = _864 * (_831.y + (-0.5));
        float _867 = _864 * (_831.z + (-0.5));
        float _874 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_838.x + (-0.5));
        float _876 = _874 * (_838.y + (-0.5));
        float _877 = _874 * (_838.z + (-0.5));
        float _884 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_845.x + (-0.5));
        float _886 = _884 * (_845.y + (-0.5));
        float _887 = _884 * (_845.z + (-0.5));
        float _894 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_852.x + (-0.5));
        float _896 = _894 * (_852.y + (-0.5));
        float _897 = _894 * (_852.z + (-0.5));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = _865 * 0.5;
        float _902 = _875 * 0.5;
        float _903 = _885 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _917 = (dot(vec3(_227, _228, _229), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3115 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _926 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3126 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3137 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0))) * (_928 + 1.0))) + _933) * _898;
        float _943 = _866 * 0.5;
        float _944 = _876 * 0.5;
        float _945 = _886 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(_227, _228, _229), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3148 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3159 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3170 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0))) * (_970 + 1.0))) + _975) * _899;
        float _985 = _867 * 0.5;
        float _986 = _877 * 0.5;
        float _987 = _887 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_227, _228, _229), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3181 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3192 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3203 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0))) * (_1012 + 1.0))) + _1017) * _900;
        _1034 = _867;
        _1035 = _866;
        _1036 = _865;
        _1037 = _877;
        _1038 = _876;
        _1039 = _875;
        _1040 = _887;
        _1041 = _886;
        _1042 = _885;
        _1043 = _900;
        _1044 = _899;
        _1045 = _898;
        _1046 = cbModelParam._m0[36u].w * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
        _1047 = cbModelParam._m0[36u].w * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
        _1048 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
    }
    else
    {
        _1034 = _725;
        _1035 = _725;
        _1036 = _725;
        _1037 = _725;
        _1038 = _725;
        _1039 = _725;
        _1040 = _725;
        _1041 = _725;
        _1042 = _725;
        _1043 = _725;
        _1044 = _725;
        _1045 = _725;
        _1046 = 0.0;
        _1047 = 0.0;
        _1048 = 0.0;
    }
    float _1058 = (cbModelParam._m0[1u].x * (_1046 - _737)) + _737;
    float _1059 = (cbModelParam._m0[1u].x * (_1047 - _738)) + _738;
    float _1060 = (cbModelParam._m0[1u].x * (_1048 - _739)) + _739;
    float _1081 = fma(_1060, cbSceneParam._m0[89u].z, fma(_1059, cbSceneParam._m0[89u].y, _1058 * cbSceneParam._m0[89u].x));
    float _1084 = fma(_1060, cbSceneParam._m0[90u].z, fma(_1059, cbSceneParam._m0[90u].y, _1058 * cbSceneParam._m0[90u].x));
    float _1087 = fma(_1060, cbSceneParam._m0[91u].z, fma(_1059, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1058));
    float _1102 = _390 * 0.5;
    float _1103 = _391 * 0.5;
    float _1104 = _392 * 0.5;
    float _1105 = dot(vec4(_1102, _1103, _1104, 1.0), vec4(_1036, _1039, _1042, _1045));
    float _1108 = dot(vec4(_1102, _1103, _1104, 1.0), vec4(_1035, _1038, _1041, _1044));
    float _1111 = dot(vec4(_1102, _1103, _1104, 1.0), vec4(_1034, _1037, _1040, _1043));
    float _1145;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1118 = dot(vec4(_1102, _1103, _1104, 1.0), vec4(_724, _728, _731, _734));
        float _1122 = dot(vec4(_1102, _1103, _1104, 1.0), vec4(_726, _729, _732, _735));
        float _1126 = dot(vec4(_1102, _1103, _1104, 1.0), vec4(_727, _730, _733, _736));
        float _1133 = dot(vec4(cbModelParam._m0[39u]), vec4(_1102, _1103, _1104, 1.0));
        _1145 = dot(vec3(isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)), isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)), isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1133) ? 0.0 : (isnan(0.0) ? _1133 : max(0.0, _1133))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1145 = 1.0;
    }
    float _1156;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1147 = dot(vec4(cbModelParam._m0[40u]), vec4(_1102, _1103, _1104, 1.0));
        _1156 = dot(vec3(isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)), isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)), isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1147) ? 0.0 : (isnan(0.0) ? _1147 : max(0.0, _1147))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1156 = 1.0;
    }
    float _1160 = (_1156 * cbModelParam._m0[1u].x) + (_1145 * (1.0 - cbModelParam._m0[1u].x));
    float _1169 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1251;
    float _1253;
    float _1255;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1218 = fma(_422, cbModelParam._m0[13u].z, fma(_418, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _414)) + cbModelParam._m0[13u].w;
        float _1222 = fma(_422, cbModelParam._m0[14u].z, fma(_418, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _414)) + cbModelParam._m0[14u].w;
        float _1226 = fma(_422, cbModelParam._m0[15u].z, fma(_418, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _414)) + cbModelParam._m0[15u].w;
        float _1229 = fma(_392, cbModelParam._m0[13u].z, fma(_391, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _390));
        float _1232 = fma(_392, cbModelParam._m0[14u].z, fma(_391, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _390));
        float _1235 = fma(_392, cbModelParam._m0[15u].z, fma(_391, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _390));
        float _1261;
        if (_1229 > 0.0)
        {
            _1261 = abs((1.0 - _1218) / _1229);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1229 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1218 + 1.0) / _1229);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1261 = frontier_phi_14_12_ladder;
        }
        float _1490;
        if (_1232 > 0.0)
        {
            _1490 = abs((1.0 - _1222) / _1232);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1232 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1222 + 1.0) / _1232);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1490 = frontier_phi_23_19_ladder;
        }
        float _1682;
        if (_1235 > 0.0)
        {
            _1682 = abs((1.0 - _1226) / _1235);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1235 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1226 + 1.0) / _1235);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1682 = frontier_phi_35_30_ladder;
        }
        float _1684 = isnan(_1490) ? _1261 : (isnan(_1261) ? _1490 : min(_1261, _1490));
        float _1685 = isnan(_1682) ? _1684 : (isnan(_1684) ? _1682 : min(_1684, _1682));
        float _1689 = (_1685 * _1229) + _1218;
        float _1690 = (_1685 * _1232) + _1222;
        float _1691 = (_1685 * _1235) + _1226;
        float _1692 = _1685 * 9.9999997473787516355514526367188e-05;
        float _1694 = (-1.0) - _1692;
        float _1696 = _1692 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1691 > _1696) || ((_1691 < _1694) || ((_1690 > _1696) || ((_1690 < _1694) || ((_1689 < _1694) || (_1689 > _1696))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1788 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1691, cbModelParam._m0[9u].z, fma(_1690, cbModelParam._m0[9u].y, _1689 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1691, cbModelParam._m0[10u].z, fma(_1690, cbModelParam._m0[10u].y, _1689 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1691, cbModelParam._m0[11u].z, fma(_1690, cbModelParam._m0[11u].y, _1689 * cbModelParam._m0[11u].x))), _1169);
            frontier_phi_13_35_ladder = _1788.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1788.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1788.x * cbModelParam._m0[1u].y;
        }
        _1251 = frontier_phi_13_35_ladder_2;
        _1253 = frontier_phi_13_35_ladder_1;
        _1255 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1239 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_390, _391, _392), _1169);
        _1251 = _1239.x * cbModelParam._m0[1u].y;
        _1253 = _1239.y * cbModelParam._m0[1u].y;
        _1255 = _1239.z * cbModelParam._m0[1u].y;
    }
    float _1258 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1351;
    float _1353;
    float _1355;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1315 = fma(_422, cbModelParam._m0[21u].z, fma(_418, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _414)) + cbModelParam._m0[21u].w;
        float _1319 = fma(_422, cbModelParam._m0[22u].z, fma(_418, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _414)) + cbModelParam._m0[22u].w;
        float _1323 = fma(_422, cbModelParam._m0[23u].z, fma(_418, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _414)) + cbModelParam._m0[23u].w;
        float _1326 = fma(_392, cbModelParam._m0[21u].z, fma(_391, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _390));
        float _1329 = fma(_392, cbModelParam._m0[22u].z, fma(_391, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _390));
        float _1332 = fma(_392, cbModelParam._m0[23u].z, fma(_391, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _390));
        float _1495;
        if (_1326 > 0.0)
        {
            _1495 = abs((1.0 - _1315) / _1326);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1326 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1315 + 1.0) / _1326);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1495 = frontier_phi_25_21_ladder;
        }
        float _1709;
        if (_1329 > 0.0)
        {
            _1709 = abs((1.0 - _1319) / _1329);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1319 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1709 = frontier_phi_37_32_ladder;
        }
        float _1860;
        if (_1332 > 0.0)
        {
            _1860 = abs((1.0 - _1323) / _1332);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1323 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1860 = frontier_phi_46_43_ladder;
        }
        float _1862 = isnan(_1709) ? _1495 : (isnan(_1495) ? _1709 : min(_1495, _1709));
        float _1863 = isnan(_1860) ? _1862 : (isnan(_1862) ? _1860 : min(_1862, _1860));
        float _1867 = (_1863 * _1326) + _1315;
        float _1868 = (_1863 * _1329) + _1319;
        float _1869 = (_1863 * _1332) + _1323;
        float _1870 = _1863 * 9.9999997473787516355514526367188e-05;
        float _1871 = (-1.0) - _1870;
        float _1873 = _1870 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1869 > _1873) || ((_1869 < _1871) || ((_1868 > _1873) || ((_1868 < _1871) || ((_1867 < _1871) || (_1867 > _1873))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2106 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1869, cbModelParam._m0[17u].z, fma(_1868, cbModelParam._m0[17u].y, _1867 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1869, cbModelParam._m0[18u].z, fma(_1868, cbModelParam._m0[18u].y, _1867 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1869, cbModelParam._m0[19u].z, fma(_1868, cbModelParam._m0[19u].y, _1867 * cbModelParam._m0[19u].x))), _1258);
            frontier_phi_22_46_ladder = _2106.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2106.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2106.x * cbModelParam._m0[1u].z;
        }
        _1351 = frontier_phi_22_46_ladder_2;
        _1353 = frontier_phi_22_46_ladder_1;
        _1355 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1335 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_390, _391, _392), _1258);
        _1351 = _1335.x * cbModelParam._m0[1u].z;
        _1353 = _1335.y * cbModelParam._m0[1u].z;
        _1355 = _1335.z * cbModelParam._m0[1u].z;
    }
    float _1367 = _381 * 0.01200000010430812835693359375;
    float _1369 = _1367 * ((cbModelParam._m0[1u].w * (_1351 - _1251)) + _1251);
    float _1370 = _1367 * ((cbModelParam._m0[1u].w * (_1353 - _1253)) + _1253);
    float _1371 = _1367 * ((cbModelParam._m0[1u].w * (_1355 - _1255)) + _1255);
    float _1374 = fma(_1371, cbSceneParam._m0[89u].z, fma(_1370, cbSceneParam._m0[89u].y, _1369 * cbSceneParam._m0[89u].x));
    float _1377 = fma(_1371, cbSceneParam._m0[90u].z, fma(_1370, cbSceneParam._m0[90u].y, _1369 * cbSceneParam._m0[90u].x));
    float _1380 = fma(_1371, cbSceneParam._m0[91u].z, fma(_1370, cbSceneParam._m0[91u].y, _1369 * cbSceneParam._m0[91u].x));
    vec4 _1388 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_315, _316));
    float _1390 = _1388.w;
    float _1402 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1390);
    float _1403 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1390);
    float _1404 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1390);
    uvec4 _1408 = floatBitsToUint(cbInstanceData._m0[_356 + 5u]);
    uint _1410 = _1408.x * 14u;
    uint _1411 = _1410 + 13u;
    float _1418 = _381 + (-1.0);
    float _1424 = (cbLight._m0[_1411].x * _1418) + 1.0;
    float _1425 = (cbLight._m0[_1411].y * _1418) + 1.0;
    float _1426 = (cbLight._m0[_1411].z * _1418) + 1.0;
    float _1427 = (cbLight._m0[_1411].w * _1418) + 1.0;
    uint _1428 = _1410 + 5u;
    float _1434 = isnan(1.0) ? _1425 : (isnan(_1425) ? 1.0 : min(_1425, 1.0));
    uint _1438 = _1410 + 4u;
    float _1448 = isnan(1.0) ? _1424 : (isnan(_1424) ? 1.0 : min(_1424, 1.0));
    uint _1452 = _1410 | 1u;
    float _1463 = dot(vec3(cbLight._m0[_1410].xyz), vec3(_227, _228, _229));
    float _1466 = dot(vec3(cbLight._m0[_1452].xyz), vec3(_227, _228, _229));
    float _3339 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
    float _3350 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
    float _1471 = (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) * 0.3183098733425140380859375;
    float _1473 = (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * 0.3183098733425140380859375;
    float _1480 = ((cbLight._m0[_1428].x * _1434) * _1473) + (((cbLight._m0[_1438].x * _1402) * _1448) * _1471);
    float _1481 = ((_1434 * cbLight._m0[_1428].y) * _1473) + (((cbLight._m0[_1438].y * _1403) * _1448) * _1471);
    float _1482 = ((_1434 * cbLight._m0[_1428].z) * _1473) + (((cbLight._m0[_1438].z * _1404) * _1448) * _1471);
    uvec4 _1487 = floatBitsToUint(cbLight._m0[_1410 + 12u]);
    bool _1489 = _1487.x == 0u;
    float _1500;
    float _1502;
    float _1504;
    if (_1489)
    {
        _1500 = _1480;
        _1502 = _1481;
        _1504 = _1482;
    }
    else
    {
        uint _1508 = _1410 + 6u;
        float _1524 = (dot(vec3(cbLight._m0[_1410 + 2u].xyz), vec3(_227, _228, _229)) * 0.5) + 0.5;
        float _1525 = _1524 * _1524;
        float _3361 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _1527 = isnan(1.0) ? _1426 : (isnan(_1426) ? 1.0 : min(_1426, 1.0));
        _1500 = (((cbLight._m0[_1508].x * 0.3183098733425140380859375) * _1526) * _1527) + _1480;
        _1502 = (((cbLight._m0[_1508].y * 0.3183098733425140380859375) * _1526) * _1527) + _1481;
        _1504 = (((cbLight._m0[_1508].z * 0.3183098733425140380859375) * _1526) * _1527) + _1482;
    }
    bool _1507 = _1487.y == 0u;
    float _1545;
    float _1547;
    float _1549;
    if (_1507)
    {
        _1545 = _1500;
        _1547 = _1502;
        _1549 = _1504;
    }
    else
    {
        uint _1653 = _1410 + 7u;
        float _1669 = (dot(vec3(cbLight._m0[_1410 + 3u].xyz), vec3(_227, _228, _229)) * 0.5) + 0.5;
        float _1670 = _1669 * _1669;
        float _3377 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _1672 = isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0));
        _1545 = (((cbLight._m0[_1653].x * 0.3183098733425140380859375) * _1671) * _1672) + _1500;
        _1547 = (((cbLight._m0[_1653].y * 0.3183098733425140380859375) * _1671) * _1672) + _1502;
        _1549 = (((cbLight._m0[_1653].z * 0.3183098733425140380859375) * _1671) * _1672) + _1504;
    }
    uint _1551 = _1410 + 8u;
    float _1557 = cbLight._m0[_1410].x + _307;
    float _1558 = cbLight._m0[_1410].y + _308;
    float _1559 = cbLight._m0[_1410].z + _309;
    float _1563 = inversesqrt(dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559)));
    float _1567 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1410].xyz));
    float _3393 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _1570 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _1571 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _1572 = dot(vec3(cbLight._m0[_1410].xyz), vec3(_1557 * _1563, _1558 * _1563, _1559 * _1563));
    float _3415 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1583 = (exp2(log2(1.0 - (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1589 = (0.5 / ((_1570 + 9.9999999392252902907785028219223e-09) + _1571)) * _1570;
    float _3426 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1591 = (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * 0.31831014156341552734375;
    uint _1605 = _1410 + 9u;
    float _1611 = cbLight._m0[_1452].x + _307;
    float _1612 = cbLight._m0[_1452].y + _308;
    float _1613 = cbLight._m0[_1452].z + _309;
    float _1617 = inversesqrt(dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613)));
    float _1621 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1452].xyz));
    float _3437 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1624 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _1625 = dot(vec3(cbLight._m0[_1452].xyz), vec3(_1611 * _1617, _1612 * _1617, _1613 * _1617));
    float _3448 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
    float _1634 = (exp2(log2(1.0 - (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1638 = (0.5 / ((_1624 + 9.9999999392252902907785028219223e-09) + _1571)) * _1624;
    float _3459 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1640 = (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * 0.31831014156341552734375;
    float _1650 = (((_1634 * cbLight._m0[_1605].x) * _1640) * _1434) + ((((cbLight._m0[_1551].x * _1402) * _1583) * _1591) * _1448);
    float _1651 = (((_1634 * cbLight._m0[_1605].y) * _1640) * _1434) + ((((cbLight._m0[_1551].y * _1403) * _1583) * _1591) * _1448);
    float _1652 = (((_1634 * cbLight._m0[_1605].z) * _1640) * _1434) + ((((cbLight._m0[_1551].z * _1404) * _1583) * _1591) * _1448);
    float _1714;
    float _1716;
    float _1718;
    if (_1489)
    {
        _1714 = _1650;
        _1716 = _1651;
        _1718 = _1652;
    }
    else
    {
        uint _1720 = _1410 + 10u;
        uint _1726 = _1410 + 2u;
        float _1732 = cbLight._m0[_1726].x + _307;
        float _1733 = cbLight._m0[_1726].y + _308;
        float _1734 = cbLight._m0[_1726].z + _309;
        float _1738 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
        float _1742 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1726].xyz));
        float _3470 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1745 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1746 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_1732 * _1738, _1733 * _1738, _1734 * _1738));
        float _3481 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1755 = (exp2(log2(1.0 - (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1759 = (0.5 / ((_1745 + 9.9999999392252902907785028219223e-09) + _1571)) * _1745;
        float _3492 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1761 = (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.31831014156341552734375;
        float _1762 = isnan(1.0) ? _1426 : (isnan(_1426) ? 1.0 : min(_1426, 1.0));
        _1714 = (((_1755 * cbLight._m0[_1720].x) * _1761) * _1762) + _1650;
        _1716 = (((_1755 * cbLight._m0[_1720].y) * _1761) * _1762) + _1651;
        _1718 = (((_1755 * cbLight._m0[_1720].z) * _1761) * _1762) + _1652;
    }
    float _1797;
    float _1799;
    float _1801;
    if (_1507)
    {
        _1797 = _1714;
        _1799 = _1716;
        _1801 = _1718;
    }
    else
    {
        uint _1808 = _1410 + 11u;
        uint _1814 = _1410 + 3u;
        float _1820 = cbLight._m0[_1814].x + _307;
        float _1821 = cbLight._m0[_1814].y + _308;
        float _1822 = cbLight._m0[_1814].z + _309;
        float _1826 = inversesqrt(dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822)));
        float _1830 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1814].xyz));
        float _3508 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1833 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1834 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_1820 * _1826, _1821 * _1826, _1822 * _1826));
        float _3519 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1843 = (exp2(log2(1.0 - (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1847 = (0.5 / ((_1833 + 9.9999999392252902907785028219223e-09) + _1571)) * _1833;
        float _3530 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1849 = (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * 0.31831014156341552734375;
        float _1850 = isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0));
        _1797 = (((_1843 * cbLight._m0[_1808].x) * _1849) * _1850) + _1714;
        _1799 = (((_1843 * cbLight._m0[_1808].y) * _1849) * _1850) + _1716;
        _1801 = (((_1843 * cbLight._m0[_1808].z) * _1849) * _1850) + _1718;
    }
    float _1985;
    float _1987;
    float _1989;
    float _1991;
    float _1993;
    float _1995;
    if (_1408.y == 0u)
    {
        float _1925 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1926 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1925;
        float _1927 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1925;
        float _1928 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1925;
        uvec4 _1940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1941 = _1940.x;
        uint _1952 = uint((float(_1940.y) * floor(float(uint(cbSceneParam._m0[85u].y * _316) / _1941))) + floor(float(uint(cbSceneParam._m0[85u].x * _315) / _1941)));
        float _1962 = (log2(_1928 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1963 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        uint _1966 = uint(isnan(14.0) ? _1963 : (isnan(_1963) ? 14.0 : min(_1963, 14.0)));
        uvec4 _1971 = texelFetch(g_lightClusterGridBuffer, int(((_1966 << 2u) + (_1952 << 6u)) >> 2u));
        uint _1972 = _1971.x;
        uint _1973 = _1940.z;
        float _2111;
        float _2113;
        float _2115;
        float _2117;
        float _2119;
        float _2121;
        if (((((1u << ((_1973 >> 4u) & 15u)) + 4294967295u) & _1972) == 0u) || ((_1973 & 240u) == 0u))
        {
            _2111 = 0.0;
            _2113 = 0.0;
            _2115 = 0.0;
            _2117 = 0.0;
            _2119 = 0.0;
            _2121 = 0.0;
        }
        else
        {
            float _2112;
            float _2114;
            float _2116;
            float _2118;
            float _2120;
            float _2122;
            float _2262 = 0.0;
            float _2263 = 0.0;
            float _2264 = 0.0;
            float _2265 = 0.0;
            float _2266 = 0.0;
            float _2267 = 0.0;
            uint _2268 = 0u;
            uint _2277;
            bool _2278;
            for (;;)
            {
                _2277 = texelFetch(g_lightClassification, int((((_1966 << 5u) + (_1952 << 9u)) + (_2268 << 2u)) >> 2u)).x;
                _2278 = _2277 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2278)
                {
                    frontier_phi_61_pred = _2262;
                    frontier_phi_61_pred_1 = _2267;
                    frontier_phi_61_pred_2 = _2266;
                    frontier_phi_61_pred_3 = _2265;
                    frontier_phi_61_pred_4 = _2264;
                    frontier_phi_61_pred_5 = _2263;
                }
                else
                {
                    float _2386;
                    float _2387;
                    float _2388;
                    float _2389;
                    float _2390;
                    float _2391;
                    uint _2392;
                    _2386 = _2262;
                    _2387 = _2263;
                    _2388 = _2264;
                    _2389 = _2265;
                    _2390 = _2266;
                    _2391 = _2267;
                    _2392 = _2277;
                    float _2318;
                    float _2319;
                    float _2320;
                    float _2321;
                    float _2322;
                    float _2323;
                    for (;;)
                    {
                        uint _2396 = uint(findLSB(_2392)) + (_2268 << 5u);
                        uint _2393 = (_2392 + 4294967295u) & _2392;
                        uint _2398 = _2396 * 48u;
                        vec4 _2412 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2398)).x, texelFetch(g_PointLightRenderingBuffer, int(_2398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2398 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2398 + 3u)).x));
                        uint _2418 = (_2396 * 48u) + 4u;
                        vec4 _2431 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2418)).x, texelFetch(g_PointLightRenderingBuffer, int(_2418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2418 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2418 + 3u)).x));
                        uint _2437 = (_2396 * 48u) + 8u;
                        vec3 _2448 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2437)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 2u)).x));
                        float _2452 = _2412.x - _1926;
                        float _2453 = _2412.y - _1927;
                        float _2454 = _2412.z - _1928;
                        float _2455 = dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454));
                        float _2458 = inversesqrt(_2455);
                        float _2467 = 1.0 - (_2455 * _2412.w);
                        float _3556 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
                        float _2468 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
                        float _2469 = sqrt(_2455) * _2431.w;
                        float _2472 = 1.39999997615814208984375 / (_2469 + 1.39999997615814208984375);
                        float _2473 = _2472 * _2472;
                        float _2476 = ((1.0 - _2473) * dot(vec3(_337, _340, _343), vec3(_2458 * _2452, _2458 * _2453, _2458 * _2454))) + _2473;
                        float _2479 = _2469 * _2469;
                        float _2483 = ((isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0))) * _2468) / ((_2479 * 0.699999988079071044921875) + 1.0);
                        float _2487 = (-0.0) - _1926;
                        float _2488 = (-0.0) - _1927;
                        float _2489 = (-0.0) - _1928;
                        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
                        float _2497 = dot(vec3(_337, _340, _343), vec3(_2493 * _2487, _2493 * _2488, _2493 * _2489));
                        float _3572 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
                        float _3583 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
                        float _2501 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
                        float _2505 = (0.5 / (((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) + 9.9999999392252902907785028219223e-09) + _2501)) * _2501;
                        float _3594 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
                        float _2514 = (((isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * 3.1415927410125732421875) / ((_2479 * 2.1991131305694580078125) + 3.141590118408203125)) * _2468;
                        _2321 = (_2483 * _2431.x) + _2389;
                        _2322 = (_2483 * _2431.y) + _2390;
                        _2323 = (_2483 * _2431.z) + _2391;
                        _2318 = (_2514 * _2448.x) + _2386;
                        _2319 = (_2514 * _2448.y) + _2387;
                        _2320 = (_2514 * _2448.z) + _2388;
                        if (_2393 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2386 = _2318;
                            _2387 = _2319;
                            _2388 = _2320;
                            _2389 = _2321;
                            _2390 = _2322;
                            _2391 = _2323;
                            _2392 = _2393;
                        }
                    }
                    frontier_phi_61_pred = _2318;
                    frontier_phi_61_pred_1 = _2323;
                    frontier_phi_61_pred_2 = _2322;
                    frontier_phi_61_pred_3 = _2321;
                    frontier_phi_61_pred_4 = _2320;
                    frontier_phi_61_pred_5 = _2319;
                }
                _2112 = frontier_phi_61_pred;
                _2122 = frontier_phi_61_pred_1;
                _2120 = frontier_phi_61_pred_2;
                _2118 = frontier_phi_61_pred_3;
                _2116 = frontier_phi_61_pred_4;
                _2114 = frontier_phi_61_pred_5;
                uint _2269 = _2268 + 1u;
                if (_2269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2262 = _2112;
                    _2263 = _2114;
                    _2264 = _2116;
                    _2265 = _2118;
                    _2266 = _2120;
                    _2267 = _2122;
                    _2268 = _2269;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2111 = _2112;
            _2113 = _2114;
            _2115 = _2116;
            _2117 = _2118;
            _2119 = _2120;
            _2121 = _2122;
        }
        uvec4 _2125 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2126 = _2125.z;
        uint _2128 = (_2126 >> 8u) & 15u;
        float _2233;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        if (((4294967295u << _2128) & _1972) == 0u)
        {
            _2233 = _2111;
            _2235 = _2113;
            _2237 = _2115;
            _2239 = _2117;
            _2241 = _2119;
            _2243 = _2121;
        }
        else
        {
            float _2258 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2128 < ((_2126 >> 12u) & 15u))
            {
                float _2234;
                float _2236;
                float _2238;
                float _2240;
                float _2242;
                float _2244;
                float _2369 = _2111;
                float _2370 = _2113;
                float _2371 = _2115;
                float _2372 = _2117;
                float _2373 = _2119;
                float _2374 = _2121;
                uint _2375 = _2128;
                uint _2384;
                bool _2385;
                for (;;)
                {
                    _2384 = texelFetch(g_lightClassification, int((((_1966 << 5u) + (_1952 << 9u)) + (_2375 << 2u)) >> 2u)).x;
                    _2385 = _2384 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2385)
                    {
                        frontier_phi_67_pred = _2372;
                        frontier_phi_67_pred_1 = _2373;
                        frontier_phi_67_pred_2 = _2374;
                        frontier_phi_67_pred_3 = _2371;
                        frontier_phi_67_pred_4 = _2370;
                        frontier_phi_67_pred_5 = _2369;
                    }
                    else
                    {
                        float _2519;
                        float _2520;
                        float _2521;
                        float _2522;
                        float _2523;
                        float _2524;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2532 = _2369;
                        float _2533 = _2370;
                        float _2534 = _2371;
                        float _2535 = _2372;
                        float _2536 = _2373;
                        float _2537 = _2374;
                        uint _2538 = _2384;
                        uint _2539;
                        vec4 _2564;
                        float _2565;
                        vec4 _2580;
                        vec3 _2592;
                        vec4 _2608;
                        vec4 _2624;
                        float _2671;
                        bool _2672;
                        for (;;)
                        {
                            uint _2549 = ((_2375 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2538));
                            _2539 = (_2538 + 4294967295u) & _2538;
                            uint _2551 = _2549 * 40u;
                            _2564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 3u)).x));
                            _2565 = _2564.w;
                            uint _2567 = (_2549 * 40u) + 4u;
                            _2580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 3u)).x));
                            uint _2582 = (_2549 * 40u) + 8u;
                            _2592 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 2u)).x));
                            uint _2595 = (_2549 * 40u) + 16u;
                            _2608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 3u)).x));
                            uint _2611 = (_2549 * 40u) + 20u;
                            _2624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 3u)).x));
                            uint _2627 = (_2549 * 40u) + 24u;
                            vec4 _2640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 3u)).x));
                            uint _2646 = (_2549 * 40u) + 28u;
                            vec4 _2659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 3u)).x));
                            _2671 = fma(_1928, _2659.z, fma(_1927, _2659.y, _2659.x * _1926)) + _2659.w;
                            _2672 = !((fma(_1928, _2640.z, fma(_1927, _2640.y, _2640.x * _1926)) + _2640.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2672)
                            {
                                float _2699 = _2564.x - _1926;
                                float _2700 = _2564.y - _1927;
                                float _2701 = _2564.z - _1928;
                                float _2702 = dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701));
                                float _2705 = inversesqrt(_2702);
                                float _2706 = _2705 * _2699;
                                float _2707 = _2705 * _2700;
                                float _2708 = _2705 * _2701;
                                float _2712 = 1.0 - (_2702 / (_2565 * _2565));
                                float _3605 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                                float _2713 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
                                float _2717 = sqrt(_2702) * _2580.w;
                                float _2719 = 1.39999997615814208984375 / (_2717 + 1.39999997615814208984375);
                                float _2720 = _2719 * _2719;
                                float _2721 = 1.0 - _2720;
                                float _2723 = (_2721 * dot(vec3(_2706, _2707, _2708), vec3(_337, _340, _343))) + _2720;
                                float _2726 = _2717 * _2717;
                                float _2730 = (fma(_1928, _2608.z, fma(_1927, _2608.y, _2608.x * _1926)) + _2608.w) / _2671;
                                float _2731 = (fma(_1928, _2624.z, fma(_1927, _2624.y, _2624.x * _1926)) + _2624.w) / _2671;
                                float _2735 = 1.0 - dot(vec2(_2730, _2731), vec2(_2730, _2731));
                                float _3621 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                                float _2736 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
                                float _2737 = _2736 * (((isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0))) * _2713) / ((_2726 * 0.699999988079071044921875) + 1.0));
                                float _2747 = dot(vec3(_337, _340, _343), vec3((-0.0) - (_1926 * _2258), (-0.0) - (_1927 * _2258), (-0.0) - (_1928 * _2258)));
                                float _3632 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                                float _2755 = (_2721 * dot(vec3(_337, _340, _343), vec3(_2706, _2707, _2708))) + _2720;
                                float _3643 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                                float _2756 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
                                float _2760 = (0.5 / (((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) + 9.9999999392252902907785028219223e-09) + _2756)) * _2756;
                                float _3654 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                                float _2767 = (_2736 * _2713) * (((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 3.1415927410125732421875) / ((_2726 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2767 * _2592.x;
                                frontier_phi_73_pred_1 = _2767 * _2592.y;
                                frontier_phi_73_pred_2 = _2737 * _2580.z;
                                frontier_phi_73_pred_3 = _2737 * _2580.y;
                                frontier_phi_73_pred_4 = _2737 * _2580.x;
                                frontier_phi_73_pred_5 = _2767 * _2592.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2771 = frontier_phi_73_pred;
                            _2772 = frontier_phi_73_pred_1;
                            _2776 = frontier_phi_73_pred_2;
                            _2775 = frontier_phi_73_pred_3;
                            _2774 = frontier_phi_73_pred_4;
                            _2773 = frontier_phi_73_pred_5;
                            _2522 = _2774 + _2535;
                            _2523 = _2775 + _2536;
                            _2524 = _2776 + _2537;
                            _2519 = _2771 + _2532;
                            _2520 = _2772 + _2533;
                            _2521 = _2773 + _2534;
                            if (_2539 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2532 = _2519;
                                _2533 = _2520;
                                _2534 = _2521;
                                _2535 = _2522;
                                _2536 = _2523;
                                _2537 = _2524;
                                _2538 = _2539;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2522;
                        frontier_phi_67_pred_1 = _2523;
                        frontier_phi_67_pred_2 = _2524;
                        frontier_phi_67_pred_3 = _2521;
                        frontier_phi_67_pred_4 = _2520;
                        frontier_phi_67_pred_5 = _2519;
                    }
                    _2240 = frontier_phi_67_pred;
                    _2242 = frontier_phi_67_pred_1;
                    _2244 = frontier_phi_67_pred_2;
                    _2238 = frontier_phi_67_pred_3;
                    _2236 = frontier_phi_67_pred_4;
                    _2234 = frontier_phi_67_pred_5;
                    uint _2376 = _2375 + 1u;
                    if (_2376 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2369 = _2234;
                        _2370 = _2236;
                        _2371 = _2238;
                        _2372 = _2240;
                        _2373 = _2242;
                        _2374 = _2244;
                        _2375 = _2376;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2242;
                frontier_phi_55_56_ladder_1 = _2244;
                frontier_phi_55_56_ladder_2 = _2240;
                frontier_phi_55_56_ladder_3 = _2238;
                frontier_phi_55_56_ladder_4 = _2236;
                frontier_phi_55_56_ladder_5 = _2234;
            }
            else
            {
                frontier_phi_55_56_ladder = _2119;
                frontier_phi_55_56_ladder_1 = _2121;
                frontier_phi_55_56_ladder_2 = _2117;
                frontier_phi_55_56_ladder_3 = _2115;
                frontier_phi_55_56_ladder_4 = _2113;
                frontier_phi_55_56_ladder_5 = _2111;
            }
            _2233 = frontier_phi_55_56_ladder_5;
            _2235 = frontier_phi_55_56_ladder_4;
            _2237 = frontier_phi_55_56_ladder_3;
            _2239 = frontier_phi_55_56_ladder_2;
            _2241 = frontier_phi_55_56_ladder;
            _2243 = frontier_phi_55_56_ladder_1;
        }
        float _2248 = isnan(1.0) ? _381 : (isnan(_381) ? 1.0 : min(_381, 1.0));
        _1985 = (_2248 * _2239) + _1545;
        _1987 = (_2248 * _2241) + _1547;
        _1989 = (_2248 * _2243) + _1549;
        _1991 = ((_2233 * 0.039999999105930328369140625) * _2248) + _1797;
        _1993 = ((_2235 * 0.039999999105930328369140625) * _2248) + _1799;
        _1995 = ((_2237 * 0.039999999105930328369140625) * _2248) + _1801;
    }
    else
    {
        _1985 = _1545;
        _1987 = _1547;
        _1989 = _1549;
        _1991 = _1797;
        _1993 = _1799;
        _1995 = _1801;
    }
    uint _2001 = _357 + uint(cbMatDynParam._m0[0u].w);
    float _2010 = (((cbMtdParam._m0[11u].x * _204.x) * cbMtdParam._m0[10u].x) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2001].x;
    float _2014 = (((cbMtdParam._m0[11u].x * _204.y) * cbMtdParam._m0[10u].y) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2001].y;
    float _2018 = (((cbMtdParam._m0[11u].x * _204.z) * cbMtdParam._m0[10u].z) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2001].z;
    float _3670 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3681 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3692 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _2035 = (((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1985 + ((isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0))) * _381))) + ((_1991 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _1160)) * cbPerFrame._m0[3u].x)) + _2010;
    float _2037 = (_2014 + ((_1993 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _1160)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1987 + ((isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0))) * _381)));
    float _2039 = (_2018 + ((_1995 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _1160)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1989 + ((isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0))) * _381)));
    float _3718 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2052 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    uint _2053 = _356 + 6u;
    float _2061 = _315 / cbSceneParam._m0[86u].x;
    float _2062 = _316 / cbSceneParam._m0[86u].y;
    vec4 _2076 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2061, _2062, (log2((isnan(cbSceneParam._m0[77u].w) ? _249 : (isnan(_249) ? cbSceneParam._m0[77u].w : min(_249, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2078 = _2076.x;
    float _2079 = _2076.y;
    float _2080 = _2076.z;
    float _2081 = _2076.w;
    float _2174;
    float _2176;
    float _2178;
    float _2180;
    if (_249 > cbSceneParam._m0[78u].w)
    {
        float _2136 = isnan(_249) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _249 : min(cbSceneParam._m0[80u].w, _249));
        float _2137 = _2136 / _249;
        float _2148 = _2137 * _300;
        float _2149 = _301 * _2137;
        float _2150 = (-0.0) - _2149;
        float _2152 = _2137 * _302;
        float _2154 = (cbSceneParam._m0[77u].w * _2150) / _2136;
        float _2155 = _2154 + cbSceneParam._m0[79u].w;
        float _2156 = cbSceneParam._m0[79u].w - _2149;
        float _2162 = sqrt(((_2148 * _2148) + (_2149 * _2149)) + (_2152 * _2152));
        float _2165 = (1.0 - (cbSceneParam._m0[77u].w / _2136)) * _2162;
        float _2170 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2172 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2331;
        if (abs((_2150 - _2154) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2331 = ((((_2155 > 0.0) ? exp2(_2170 * _2155) : (2.0 - exp2(_2172 * _2155))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2165;
        }
        else
        {
            float _2291 = 1.0 / cbSceneParam._m0[80u].x;
            float _2292 = isnan(_2156) ? _2155 : (isnan(_2155) ? _2156 : max(_2155, _2156));
            float _2293 = isnan(_2156) ? _2155 : (isnan(_2155) ? _2156 : min(_2155, _2156));
            float _2302 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : min(_2292, 0.0));
            float _2303 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : min(_2293, 0.0));
            _2331 = ((abs(_2162 / _2150) * cbSceneParam._m0[80u].y) * ((((_2302 - _2303) * 2.0) - ((exp2(_2170 * (isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0)))) - exp2(_2170 * (isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0))))) * _2291)) - ((exp2(_2172 * _2302) - exp2(_2172 * _2303)) * _2291))) + (_2165 * cbSceneParam._m0[80u].z);
        }
        vec4 _2333 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2061, _2062, 1.0), 0.0);
        float _2342 = exp2((_2331 * (-1.44269502162933349609375)) * (1.0 - _2333.w));
        float _2343 = log2(_2342);
        float _2359 = log2(_2081);
        _2174 = (exp2(_2359 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2343 * cbSceneParam._m0[78u].x)) * _2333.x) / cbSceneParam._m0[78u].x)) + _2078;
        _2176 = (exp2(_2359 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2343 * cbSceneParam._m0[78u].y)) * _2333.y) / cbSceneParam._m0[78u].y)) + _2079;
        _2178 = (exp2(_2359 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2343 * cbSceneParam._m0[78u].z)) * _2333.z) / cbSceneParam._m0[78u].z)) + _2080;
        _2180 = _2342 * _2081;
    }
    else
    {
        _2174 = _2078;
        _2176 = _2079;
        _2178 = _2080;
        _2180 = _2081;
    }
    float _2191 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2192 = _2191 == 3.0;
    float _2194 = log2(_2180);
    float _2198 = exp2(_2194 * cbSceneParam._m0[78u].x);
    float _2199 = exp2(_2194 * cbSceneParam._m0[78u].y);
    float _2200 = exp2(_2194 * cbSceneParam._m0[78u].z);
    float _2201 = _2198 * (isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0)));
    float _2202 = _2199 * (isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0)));
    float _2203 = _2200 * (isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0)));
    float _2212 = (_2191 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2212 * (_2192 ? _2201 : (_2201 + (cbSceneParam._m0[72u].w * _2174)));
    SV_Target.y = _2212 * (_2192 ? _2202 : (_2202 + (cbSceneParam._m0[72u].w * _2176)));
    SV_Target.z = _2212 * (_2192 ? _2203 : (_2203 + (cbSceneParam._m0[72u].w * _2178)));
    SV_Target.w = cbInstanceData._m0[_2053].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2010) * _2052) * _2198) * _2212;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2014) * _2052) * _2199) * _2212;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2018) * _2052) * _2200) * _2212;
    SV_Target_1.w = cbInstanceData._m0[_2053].w;
}


