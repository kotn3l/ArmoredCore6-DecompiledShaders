#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _827;
float _3361;
float _3362;
float _3363;
float _3364;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    vec4 _190 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _219 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _221 = _219.x;
    float _222 = _219.y;
    float _223 = _219.z;
    float _224 = cbMtdParam._m0[11u].w * cbMtdParam._m0[12u].x;
    float _225 = _224 * _221;
    float _226 = _224 * _222;
    float _227 = _224 * _223;
    float _228 = isnan(_226) ? _225 : (isnan(_225) ? _226 : max(_225, _226));
    float _229 = isnan(_227) ? _228 : (isnan(_228) ? _227 : max(_228, _227));
    float _232;
    float _234;
    if (_229 < 1.1920928955078125e-07)
    {
        _232 = 0.0;
        _234 = 0.0;
    }
    else
    {
        float _260 = isnan(_226) ? _225 : (isnan(_225) ? _226 : min(_225, _226));
        float _262 = _229 - (isnan(_227) ? _260 : (isnan(_260) ? _227 : min(_260, _227)));
        float _235 = _262 / _229;
        float frontier_phi_1_2_ladder;
        float frontier_phi_1_2_ladder_1;
        if (_262 < 1.1920928955078125e-07)
        {
            frontier_phi_1_2_ladder = _235;
            frontier_phi_1_2_ladder_1 = 0.0;
        }
        else
        {
            float _848;
            if (_229 == _225)
            {
                _848 = ((_224 * (_222 - _223)) / _262) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_15_10_ladder;
                if (_229 == _226)
                {
                    frontier_phi_15_10_ladder = (((_224 * (_223 - _221)) / _262) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_15_10_ladder = (((_224 * (_221 - _222)) / _262) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _848 = frontier_phi_15_10_ladder;
            }
            float _853 = (_848 < 0.0) ? (_848 + 1.0) : _848;
            frontier_phi_1_2_ladder = _235;
            frontier_phi_1_2_ladder_1 = _853 - floor(_853);
        }
        _232 = frontier_phi_1_2_ladder_1;
        _234 = frontier_phi_1_2_ladder;
    }
    float _236 = _234 + cbMtdParam._m0[11u].y;
    float _240 = fract(cbMtdParam._m0[11u].z + _232) * 6.0;
    uint _243 = uint(int(floor(_240)));
    float _245 = _240 - float(int(_243));
    float _248 = (1.0 - _236) * _229;
    float _251 = (1.0 - (_245 * _236)) * _229;
    float _255 = (1.0 - ((1.0 - _245) * _236)) * _229;
    float _264;
    float _266;
    float _267;
    if ((_243 == 0u) || (_243 == 6u))
    {
        _264 = _229;
        _266 = _255;
        _267 = _248;
    }
    else
    {
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        if (_243 == 1u)
        {
            frontier_phi_3_4_ladder = _251;
            frontier_phi_3_4_ladder_1 = _248;
            frontier_phi_3_4_ladder_2 = _229;
        }
        else
        {
            float frontier_phi_3_4_ladder_8_ladder;
            float frontier_phi_3_4_ladder_8_ladder_1;
            float frontier_phi_3_4_ladder_8_ladder_2;
            if (_243 == 2u)
            {
                frontier_phi_3_4_ladder_8_ladder = _248;
                frontier_phi_3_4_ladder_8_ladder_1 = _255;
                frontier_phi_3_4_ladder_8_ladder_2 = _229;
            }
            else
            {
                float frontier_phi_3_4_ladder_8_ladder_14_ladder;
                float frontier_phi_3_4_ladder_8_ladder_14_ladder_1;
                float frontier_phi_3_4_ladder_8_ladder_14_ladder_2;
                if (_243 == 3u)
                {
                    frontier_phi_3_4_ladder_8_ladder_14_ladder = _248;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder_1 = _229;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder_2 = _251;
                }
                else
                {
                    bool _1241 = _243 == 4u;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder = _1241 ? _255 : _229;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder_1 = _1241 ? _229 : _251;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder_2 = _248;
                }
                frontier_phi_3_4_ladder_8_ladder = frontier_phi_3_4_ladder_8_ladder_14_ladder;
                frontier_phi_3_4_ladder_8_ladder_1 = frontier_phi_3_4_ladder_8_ladder_14_ladder_1;
                frontier_phi_3_4_ladder_8_ladder_2 = frontier_phi_3_4_ladder_8_ladder_14_ladder_2;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_8_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_8_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_8_ladder_2;
        }
        _264 = frontier_phi_3_4_ladder;
        _266 = frontier_phi_3_4_ladder_2;
        _267 = frontier_phi_3_4_ladder_1;
    }
    float _279 = inversesqrt(dot(vec3(_168, _169, _170), vec3(_168, _169, _170)));
    float _280 = _279 * _168;
    float _281 = _279 * _169;
    float _282 = _279 * _170;
    float _3393 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3404 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3415 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _301 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _343 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _353 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _343);
    float _354 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _343);
    float _355 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _343);
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _360 = _353 * _359;
    float _361 = _354 * _359;
    float _362 = _355 * _359;
    vec4 _367 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _369 = _367.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _499 = sqrt(((_353 * _353) + (_354 * _354)) + (_355 * _355));
        float _505 = (cbMatDynParam._m0[5u].x * _499) + cbMatDynParam._m0[5u].y;
        float _3426 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
        float _506 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _510 = (cbMatDynParam._m0[5u].z * _499) + cbMatDynParam._m0[5u].w;
        float _3437 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) - _506)) + _506) < ((_369 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _382 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _383 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _403 = fma(_282, cbSceneParam._m0[5u].z, fma(_281, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _280));
    float _406 = fma(_282, cbSceneParam._m0[6u].z, fma(_281, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _280));
    float _409 = fma(_282, cbSceneParam._m0[7u].z, fma(_281, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _280));
    uint _422 = uint(roundEven(NORMAL.w)) * 13u;
    uint _423 = _422 + 9u;
    uint _424 = _423 + uint(cbMatDynParam._m0[0u].w);
    float _430 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * cbInstanceData._m0[_424].x;
    float _431 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) * cbInstanceData._m0[_424].y;
    float _432 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0)))) * cbInstanceData._m0[_424].z;
    float _3448 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _3459 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    vec4 _444 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _382, cbSceneParam._m0[86u].y * _383));
    float _447 = _444.x * TEXCOORD.z;
    float _448 = dot(vec3(_280, _281, _282), vec3(_360, _361, _362));
    float _451 = _448 * 2.0;
    float _456 = (_451 * _280) - _360;
    float _457 = (_451 * _281) - _361;
    float _458 = (_451 * _282) - _362;
    float _480 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _484 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _826;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _551 = fma(_488, cbModelParam._m0[26u].z, fma(_484, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _480));
        float _555 = fma(_488, cbModelParam._m0[27u].z, fma(_484, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _480));
        float _559 = fma(_488, cbModelParam._m0[28u].z, fma(_484, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _480));
        float _584 = _480 + _280;
        float _585 = _484 + _281;
        float _586 = _488 + _282;
        float _596 = fma(_586, cbModelParam._m0[26u].z, fma(_585, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _584)) - _551;
        float _597 = fma(_586, cbModelParam._m0[27u].z, fma(_585, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _584)) - _555;
        float _598 = fma(_586, cbModelParam._m0[28u].z, fma(_585, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _584)) - _559;
        float _602 = inversesqrt(dot(vec3(_596, _597, _598), vec3(_596, _597, _598)));
        float _615 = ((_602 * _596) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_551 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _616 = ((_602 * _597) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_555 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _617 = ((_602 * _598) / cbModelParam._m0[34u].z) + ((((((_559 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _620 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_615, _616, _617), 0.0);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_615, _616, _617), 0.0);
        vec4 _634 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_615, _616, _617), 0.0);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_615, _616, _617), 0.0);
        float _654 = exp2((_620.w + (-0.5)) * 20.0) * 2.0;
        float _655 = _654 * (_620.x + (-0.5));
        float _656 = _654 * (_620.y + (-0.5));
        float _657 = _654 * (_620.z + (-0.5));
        float _664 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _665 = _664 * (_627.x + (-0.5));
        float _666 = _664 * (_627.y + (-0.5));
        float _667 = _664 * (_627.z + (-0.5));
        float _674 = exp2((_634.w + (-0.5)) * 20.0) * 2.0;
        float _675 = _674 * (_634.x + (-0.5));
        float _676 = _674 * (_634.y + (-0.5));
        float _677 = _674 * (_634.z + (-0.5));
        float _684 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_641.x + (-0.5));
        float _686 = _684 * (_641.y + (-0.5));
        float _687 = _684 * (_641.z + (-0.5));
        float _688 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _689 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _690 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _691 = _655 * 0.5;
        float _692 = _665 * 0.5;
        float _693 = _675 * 0.5;
        float _694 = dot(vec3(_691, _692, _693), vec3(_691, _692, _693));
        float _699 = (_694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_694);
        float _708 = (dot(vec3(_280, _281, _282), vec3(_699 * _691, _699 * _692, _699 * _693)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _718 = sqrt(((_692 * _692) + (_691 * _691)) + (_693 * _693)) / (_688 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _720 = _719 * 2.0;
        float _724 = (1.0 - _719) / (_719 + 1.0);
        float _3518 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _734 = ((((1.0 - _725) * (_720 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_720 + 1.0))) + _725) * _688;
        float _735 = _656 * 0.5;
        float _736 = _666 * 0.5;
        float _737 = _676 * 0.5;
        float _738 = dot(vec3(_735, _736, _737), vec3(_735, _736, _737));
        float _743 = (_738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_738);
        float _751 = (dot(vec3(_280, _281, _282), vec3(_743 * _735, _743 * _736, _743 * _737)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _760 = sqrt(((_736 * _736) + (_735 * _735)) + (_737 * _737)) / (_689 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _762 = _761 * 2.0;
        float _766 = (1.0 - _761) / (_761 + 1.0);
        float _3551 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _776 = ((((1.0 - _767) * (_762 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_762 + 1.0))) + _767) * _689;
        float _777 = _657 * 0.5;
        float _778 = _667 * 0.5;
        float _779 = _677 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _793 = (dot(vec3(_280, _281, _282), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _802 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_690 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3584 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_804 + 1.0))) + _809) * _690;
        _826 = _657;
        _828 = _656;
        _829 = _655;
        _830 = _667;
        _831 = _666;
        _832 = _665;
        _833 = _677;
        _834 = _676;
        _835 = _675;
        _836 = _690;
        _837 = _689;
        _838 = _688;
        _839 = cbModelParam._m0[36u].z * (isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0)));
        _840 = cbModelParam._m0[36u].z * (isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0)));
        _841 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
    }
    else
    {
        _826 = _827;
        _828 = _827;
        _829 = _827;
        _830 = _827;
        _831 = _827;
        _832 = _827;
        _833 = _827;
        _834 = _827;
        _835 = _827;
        _836 = _827;
        _837 = _827;
        _838 = _827;
        _839 = 0.0;
        _840 = 0.0;
        _841 = 0.0;
    }
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _888 = fma(_488, cbModelParam._m0[30u].z, fma(_484, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _480));
        float _892 = fma(_488, cbModelParam._m0[31u].z, fma(_484, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _480));
        float _896 = fma(_488, cbModelParam._m0[32u].z, fma(_484, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _480));
        float _919 = _480 + _280;
        float _920 = _484 + _281;
        float _921 = _488 + _282;
        float _931 = fma(_921, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919)) - _888;
        float _932 = fma(_921, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919)) - _892;
        float _933 = fma(_921, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919)) - _896;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_888 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_892 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[35u].z) + ((((((_896 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _987 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_954.x + (-0.5));
        float _989 = _987 * (_954.y + (-0.5));
        float _990 = _987 * (_954.z + (-0.5));
        float _997 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_961.x + (-0.5));
        float _999 = _997 * (_961.y + (-0.5));
        float _1000 = _997 * (_961.z + (-0.5));
        float _1007 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_968.x + (-0.5));
        float _1009 = _1007 * (_968.y + (-0.5));
        float _1010 = _1007 * (_968.z + (-0.5));
        float _1017 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_975.x + (-0.5));
        float _1019 = _1017 * (_975.y + (-0.5));
        float _1020 = _1017 * (_975.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_280, _281, _282), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3647 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1051 + 1.0))) + _1056) * _1021;
        float _1066 = _989 * 0.5;
        float _1067 = _999 * 0.5;
        float _1068 = _1009 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_280, _281, _282), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3680 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1093 + 1.0))) + _1098) * _1022;
        float _1108 = _990 * 0.5;
        float _1109 = _1000 * 0.5;
        float _1110 = _1010 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_280, _281, _282), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3713 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1135 + 1.0))) + _1140) * _1023;
        _1157 = _990;
        _1158 = _989;
        _1159 = _988;
        _1160 = _1000;
        _1161 = _999;
        _1162 = _998;
        _1163 = _1010;
        _1164 = _1009;
        _1165 = _1008;
        _1166 = _1023;
        _1167 = _1022;
        _1168 = _1021;
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
    }
    else
    {
        _1157 = _827;
        _1158 = _827;
        _1159 = _827;
        _1160 = _827;
        _1161 = _827;
        _1162 = _827;
        _1163 = _827;
        _1164 = _827;
        _1165 = _827;
        _1166 = _827;
        _1167 = _827;
        _1168 = _827;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _839)) + _839;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _840)) + _840;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _841)) + _841;
    float _1204 = fma(_1183, cbSceneParam._m0[89u].z, fma(_1182, cbSceneParam._m0[89u].y, _1181 * cbSceneParam._m0[89u].x));
    float _1207 = fma(_1183, cbSceneParam._m0[90u].z, fma(_1182, cbSceneParam._m0[90u].y, _1181 * cbSceneParam._m0[90u].x));
    float _1210 = fma(_1183, cbSceneParam._m0[91u].z, fma(_1182, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1181));
    float _1225 = _456 * 0.5;
    float _1226 = _457 * 0.5;
    float _1227 = _458 * 0.5;
    float _1228 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1231 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1234 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1270;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1243 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_826, _830, _833, _836));
        float _1247 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_828, _831, _834, _837));
        float _1251 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_829, _832, _835, _838));
        float _1258 = dot(vec4(cbModelParam._m0[39u]), vec4(_1225, _1226, _1227, 1.0));
        _1270 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1258) ? 0.0 : (isnan(0.0) ? _1258 : max(0.0, _1258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1270 = 1.0;
    }
    float _1281;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1272 = dot(vec4(cbModelParam._m0[40u]), vec4(_1225, _1226, _1227, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1272) ? 0.0 : (isnan(0.0) ? _1272 : max(0.0, _1272))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1285 = (_1281 * cbModelParam._m0[1u].x) + (_1270 * (1.0 - cbModelParam._m0[1u].x));
    float _1294 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1376;
    float _1378;
    float _1380;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1343 = fma(_488, cbModelParam._m0[13u].z, fma(_484, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _480)) + cbModelParam._m0[13u].w;
        float _1347 = fma(_488, cbModelParam._m0[14u].z, fma(_484, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _480)) + cbModelParam._m0[14u].w;
        float _1351 = fma(_488, cbModelParam._m0[15u].z, fma(_484, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _480)) + cbModelParam._m0[15u].w;
        float _1354 = fma(_458, cbModelParam._m0[13u].z, fma(_457, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _456));
        float _1357 = fma(_458, cbModelParam._m0[14u].z, fma(_457, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _456));
        float _1360 = fma(_458, cbModelParam._m0[15u].z, fma(_457, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _456));
        float _1386;
        if (_1354 > 0.0)
        {
            _1386 = abs((1.0 - _1343) / _1354);
        }
        else
        {
            float frontier_phi_30_28_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_30_28_ladder = abs((_1343 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_30_28_ladder = 5000.0;
            }
            _1386 = frontier_phi_30_28_ladder;
        }
        float _1560;
        if (_1357 > 0.0)
        {
            _1560 = abs((1.0 - _1347) / _1357);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1347 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1560 = frontier_phi_39_35_ladder;
        }
        float _1856;
        if (_1360 > 0.0)
        {
            _1856 = abs((1.0 - _1351) / _1360);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1351 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _1856 = frontier_phi_51_46_ladder;
        }
        float _1858 = isnan(_1560) ? _1386 : (isnan(_1386) ? _1560 : min(_1386, _1560));
        float _1859 = isnan(_1856) ? _1858 : (isnan(_1858) ? _1856 : min(_1858, _1856));
        float _1863 = (_1859 * _1354) + _1343;
        float _1864 = (_1859 * _1357) + _1347;
        float _1865 = (_1859 * _1360) + _1351;
        float _1866 = _1859 * 9.9999997473787516355514526367188e-05;
        float _1868 = (-1.0) - _1866;
        float _1870 = _1866 + 1.0;
        float frontier_phi_29_51_ladder;
        float frontier_phi_29_51_ladder_1;
        float frontier_phi_29_51_ladder_2;
        if ((_1865 > _1870) || ((_1865 < _1868) || ((_1864 > _1870) || ((_1864 < _1868) || ((_1863 < _1868) || (_1863 > _1870))))))
        {
            frontier_phi_29_51_ladder = 0.0;
            frontier_phi_29_51_ladder_1 = 0.0;
            frontier_phi_29_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2010 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1865, cbModelParam._m0[9u].z, fma(_1864, cbModelParam._m0[9u].y, _1863 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1865, cbModelParam._m0[10u].z, fma(_1864, cbModelParam._m0[10u].y, _1863 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1865, cbModelParam._m0[11u].z, fma(_1864, cbModelParam._m0[11u].y, _1863 * cbModelParam._m0[11u].x))), _1294);
            frontier_phi_29_51_ladder = _2010.x * cbModelParam._m0[1u].y;
            frontier_phi_29_51_ladder_1 = _2010.z * cbModelParam._m0[1u].y;
            frontier_phi_29_51_ladder_2 = _2010.y * cbModelParam._m0[1u].y;
        }
        _1376 = frontier_phi_29_51_ladder;
        _1378 = frontier_phi_29_51_ladder_2;
        _1380 = frontier_phi_29_51_ladder_1;
    }
    else
    {
        vec4 _1364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_456, _457, _458), _1294);
        _1376 = _1364.x * cbModelParam._m0[1u].y;
        _1378 = _1364.y * cbModelParam._m0[1u].y;
        _1380 = _1364.z * cbModelParam._m0[1u].y;
    }
    float _1383 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1440 = fma(_488, cbModelParam._m0[21u].z, fma(_484, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _480)) + cbModelParam._m0[21u].w;
        float _1444 = fma(_488, cbModelParam._m0[22u].z, fma(_484, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _480)) + cbModelParam._m0[22u].w;
        float _1448 = fma(_488, cbModelParam._m0[23u].z, fma(_484, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _480)) + cbModelParam._m0[23u].w;
        float _1451 = fma(_458, cbModelParam._m0[21u].z, fma(_457, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _456));
        float _1454 = fma(_458, cbModelParam._m0[22u].z, fma(_457, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _456));
        float _1457 = fma(_458, cbModelParam._m0[23u].z, fma(_457, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _456));
        float _1565;
        if (_1451 > 0.0)
        {
            _1565 = abs((1.0 - _1440) / _1451);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1440 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _1565 = frontier_phi_41_37_ladder;
        }
        float _1883;
        if (_1454 > 0.0)
        {
            _1883 = abs((1.0 - _1444) / _1454);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1444 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _1883 = frontier_phi_53_48_ladder;
        }
        float _2156;
        if (_1457 > 0.0)
        {
            _2156 = abs((1.0 - _1448) / _1457);
        }
        else
        {
            float frontier_phi_63_60_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_63_60_ladder = abs((_1448 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_63_60_ladder = 5000.0;
            }
            _2156 = frontier_phi_63_60_ladder;
        }
        float _2158 = isnan(_1883) ? _1565 : (isnan(_1565) ? _1883 : min(_1565, _1883));
        float _2159 = isnan(_2156) ? _2158 : (isnan(_2158) ? _2156 : min(_2158, _2156));
        float _2163 = (_2159 * _1451) + _1440;
        float _2164 = (_2159 * _1454) + _1444;
        float _2165 = (_2159 * _1457) + _1448;
        float _2166 = _2159 * 9.9999997473787516355514526367188e-05;
        float _2167 = (-1.0) - _2166;
        float _2169 = _2166 + 1.0;
        float frontier_phi_38_63_ladder;
        float frontier_phi_38_63_ladder_1;
        float frontier_phi_38_63_ladder_2;
        if ((_2165 > _2169) || ((_2165 < _2167) || ((_2164 > _2169) || ((_2164 < _2167) || ((_2163 < _2167) || (_2163 > _2169))))))
        {
            frontier_phi_38_63_ladder = 0.0;
            frontier_phi_38_63_ladder_1 = 0.0;
            frontier_phi_38_63_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2256 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2165, cbModelParam._m0[17u].z, fma(_2164, cbModelParam._m0[17u].y, _2163 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2165, cbModelParam._m0[18u].z, fma(_2164, cbModelParam._m0[18u].y, _2163 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2165, cbModelParam._m0[19u].z, fma(_2164, cbModelParam._m0[19u].y, _2163 * cbModelParam._m0[19u].x))), _1383);
            frontier_phi_38_63_ladder = _2256.z * cbModelParam._m0[1u].z;
            frontier_phi_38_63_ladder_1 = _2256.y * cbModelParam._m0[1u].z;
            frontier_phi_38_63_ladder_2 = _2256.x * cbModelParam._m0[1u].z;
        }
        _1476 = frontier_phi_38_63_ladder_2;
        _1478 = frontier_phi_38_63_ladder_1;
        _1480 = frontier_phi_38_63_ladder;
    }
    else
    {
        vec4 _1460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_456, _457, _458), _1383);
        _1476 = _1460.x * cbModelParam._m0[1u].z;
        _1478 = _1460.y * cbModelParam._m0[1u].z;
        _1480 = _1460.z * cbModelParam._m0[1u].z;
    }
    float _1492 = _447 * 0.01200000010430812835693359375;
    float _1494 = _1492 * ((cbModelParam._m0[1u].w * (_1476 - _1376)) + _1376);
    float _1495 = _1492 * ((cbModelParam._m0[1u].w * (_1478 - _1378)) + _1378);
    float _1496 = _1492 * ((cbModelParam._m0[1u].w * (_1480 - _1380)) + _1380);
    float _1499 = fma(_1496, cbSceneParam._m0[89u].z, fma(_1495, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1502 = fma(_1496, cbSceneParam._m0[90u].z, fma(_1495, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1505 = fma(_1496, cbSceneParam._m0[91u].z, fma(_1495, cbSceneParam._m0[91u].y, _1494 * cbSceneParam._m0[91u].x));
    float _1539 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1543 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1547 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1551 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1552 = _1539 / _1551;
    float _1553 = _1543 / _1551;
    float _1554 = _1547 / _1551;
    float _1701;
    float _1702;
    float _1703;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1581 = ((uint(_1554 > cbSceneParam._m0[59u].y) + uint(_1554 > cbSceneParam._m0[59u].x)) + uint(_1554 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1582 = _1581 + 43u;
        uint _1590 = _1581 + 44u;
        uint _1598 = _1581 + 45u;
        uint _1606 = _1581 + 46u;
        float _1617 = fma(_1551, cbSceneParam._m0[_1582].w, fma(_1547, cbSceneParam._m0[_1582].z, fma(_1543, cbSceneParam._m0[_1582].y, _1539 * cbSceneParam._m0[_1582].x)));
        float _1621 = fma(_1551, cbSceneParam._m0[_1590].w, fma(_1547, cbSceneParam._m0[_1590].z, fma(_1543, cbSceneParam._m0[_1590].y, _1539 * cbSceneParam._m0[_1590].x)));
        float _1629 = fma(_1551, cbSceneParam._m0[_1606].w, fma(_1547, cbSceneParam._m0[_1606].z, fma(_1543, cbSceneParam._m0[_1606].y, _1539 * cbSceneParam._m0[_1606].x)));
        float _1634 = cbSceneParam._m0[33u].z * _1629;
        float _1636 = cbSceneParam._m0[33u].w * _1629;
        float _1639 = fma(_1551, cbSceneParam._m0[_1598].w, fma(_1547, cbSceneParam._m0[_1598].z, fma(_1543, cbSceneParam._m0[_1598].y, _1539 * cbSceneParam._m0[_1598].x))) / _1629;
        float _1687 = (cbSceneParam._m0[33u].x - sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554))) * cbSceneParam._m0[33u].y;
        float _3839 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1694 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1634 + _1617) / _1629, (_1636 + _1621) / _1629), _1639), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1636 + _1617) / _1629, (_1621 - _1634) / _1629), _1639), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1617 - _1634) / _1629, (_1621 - _1636) / _1629), _1639), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1617 - _1636) / _1629, (_1634 + _1621) / _1629), _1639), 0.0)).x), vec4(0.25)));
        _1701 = 1.0 - (_1694 * cbSceneParam._m0[34u].x);
        _1702 = 1.0 - (_1694 * cbSceneParam._m0[34u].y);
        _1703 = 1.0 - (_1694 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1701 = 1.0;
        _1702 = 1.0;
        _1703 = 1.0;
    }
    float _1767;
    float _1769;
    float _1771;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1755 = fma(_1551, cbSceneParam._m0[63u].w, fma(_1547, cbSceneParam._m0[63u].z, fma(_1543, cbSceneParam._m0[63u].y, _1539 * cbSceneParam._m0[63u].x)));
        float _1756 = fma(_1551, cbSceneParam._m0[60u].w, fma(_1547, cbSceneParam._m0[60u].z, fma(_1543, cbSceneParam._m0[60u].y, _1539 * cbSceneParam._m0[60u].x))) / _1755;
        float _1757 = fma(_1551, cbSceneParam._m0[61u].w, fma(_1547, cbSceneParam._m0[61u].z, fma(_1543, cbSceneParam._m0[61u].y, _1539 * cbSceneParam._m0[61u].x))) / _1755;
        float frontier_phi_50_49_ladder;
        float frontier_phi_50_49_ladder_1;
        float frontier_phi_50_49_ladder_2;
        if ((((_1756 >= cbSceneParam._m0[64u].x) && (_1757 >= cbSceneParam._m0[64u].y)) && (_1756 <= cbSceneParam._m0[64u].z)) && (_1757 <= cbSceneParam._m0[64u].w))
        {
            float _1896 = fma(_1551, cbSceneParam._m0[62u].w, fma(_1547, cbSceneParam._m0[62u].z, fma(_1543, cbSceneParam._m0[62u].y, _1539 * cbSceneParam._m0[62u].x))) / _1755;
            float _1900 = isnan(cbSceneParam._m0[41u].w) ? _1896 : (isnan(_1896) ? cbSceneParam._m0[41u].w : max(_1896, cbSceneParam._m0[41u].w));
            float _1943 = (cbSceneParam._m0[33u].x - sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554))) * cbSceneParam._m0[33u].y;
            float _3855 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
            float _1950 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1756, cbSceneParam._m0[33u].w + _1757), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1756, _1757 - cbSceneParam._m0[33u].z), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1756 - cbSceneParam._m0[33u].z, _1757 - cbSceneParam._m0[33u].w), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1756 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1757), _1900), 0.0)).x), vec4(0.25)));
            float _1954 = 1.0 - (_1950 * cbSceneParam._m0[34u].x);
            float _1955 = 1.0 - (_1950 * cbSceneParam._m0[34u].y);
            float _1956 = 1.0 - (_1950 * cbSceneParam._m0[34u].z);
            frontier_phi_50_49_ladder = isnan(_1956) ? _1703 : (isnan(_1703) ? _1956 : min(_1703, _1956));
            frontier_phi_50_49_ladder_1 = isnan(_1955) ? _1702 : (isnan(_1702) ? _1955 : min(_1702, _1955));
            frontier_phi_50_49_ladder_2 = isnan(_1954) ? _1701 : (isnan(_1701) ? _1954 : min(_1701, _1954));
        }
        else
        {
            frontier_phi_50_49_ladder = _1703;
            frontier_phi_50_49_ladder_1 = _1702;
            frontier_phi_50_49_ladder_2 = _1701;
        }
        _1767 = frontier_phi_50_49_ladder_2;
        _1769 = frontier_phi_50_49_ladder_1;
        _1771 = frontier_phi_50_49_ladder;
    }
    else
    {
        _1767 = _1701;
        _1769 = _1702;
        _1771 = _1703;
    }
    uvec4 _1776 = floatBitsToUint(cbInstanceData._m0[_422 + 5u]);
    uint _1778 = _1776.x * 14u;
    uint _1779 = _1778 + 13u;
    float _1786 = _447 + (-1.0);
    float _1792 = (cbLight._m0[_1779].x * _1786) + 1.0;
    float _1793 = (cbLight._m0[_1779].y * _1786) + 1.0;
    float _1794 = (cbLight._m0[_1779].z * _1786) + 1.0;
    float _1795 = (cbLight._m0[_1779].w * _1786) + 1.0;
    uint _1796 = _1778 + 5u;
    float _1802 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
    uint _1806 = _1778 + 4u;
    float _1815 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
    uint _1819 = _1778 | 1u;
    float _1830 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_280, _281, _282));
    float _1833 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_280, _281, _282));
    float _3891 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _3902 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1838 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * 0.3183098733425140380859375;
    float _1840 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * 0.3183098733425140380859375;
    float _1847 = ((cbLight._m0[_1796].x * _1802) * _1840) + (((cbLight._m0[_1806].x * _1767) * _1815) * _1838);
    float _1848 = ((_1802 * cbLight._m0[_1796].y) * _1840) + (((cbLight._m0[_1806].y * _1769) * _1815) * _1838);
    float _1849 = ((_1802 * cbLight._m0[_1796].z) * _1840) + (((cbLight._m0[_1806].z * _1771) * _1815) * _1838);
    uvec4 _1853 = floatBitsToUint(cbLight._m0[_1778 + 12u]);
    bool _1855 = _1853.x == 0u;
    float _1957;
    float _1959;
    float _1961;
    if (_1855)
    {
        _1957 = _1847;
        _1959 = _1848;
        _1961 = _1849;
    }
    else
    {
        uint _1965 = _1778 + 6u;
        float _1981 = (dot(vec3(cbLight._m0[_1778 + 2u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1982 = _1981 * _1981;
        float _3913 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1984 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _1957 = (((cbLight._m0[_1965].x * 0.3183098733425140380859375) * _1983) * _1984) + _1847;
        _1959 = (((cbLight._m0[_1965].y * 0.3183098733425140380859375) * _1983) * _1984) + _1848;
        _1961 = (((cbLight._m0[_1965].z * 0.3183098733425140380859375) * _1983) * _1984) + _1849;
    }
    bool _1964 = _1853.y == 0u;
    float _2019;
    float _2021;
    float _2023;
    if (_1964)
    {
        _2019 = _1957;
        _2021 = _1959;
        _2023 = _1961;
    }
    else
    {
        uint _2127 = _1778 + 7u;
        float _2143 = (dot(vec3(cbLight._m0[_1778 + 3u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _2144 = _2143 * _2143;
        float _3929 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2145 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _2146 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _2019 = (((cbLight._m0[_2127].x * 0.3183098733425140380859375) * _2145) * _2146) + _1957;
        _2021 = (((cbLight._m0[_2127].y * 0.3183098733425140380859375) * _2145) * _2146) + _1959;
        _2023 = (((cbLight._m0[_2127].z * 0.3183098733425140380859375) * _2145) * _2146) + _1961;
    }
    uint _2025 = _1778 + 8u;
    float _2031 = cbLight._m0[_1778].x + _360;
    float _2032 = cbLight._m0[_1778].y + _361;
    float _2033 = cbLight._m0[_1778].z + _362;
    float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
    float _2041 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1778].xyz));
    float _3945 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _2045 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _2046 = dot(vec3(cbLight._m0[_1778].xyz), vec3(_2031 * _2037, _2032 * _2037, _2033 * _2037));
    float _3967 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2057 = (exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2063 = (0.5 / ((_2044 + 9.9999999392252902907785028219223e-09) + _2045)) * _2044;
    float _3978 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2065 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * 0.31831014156341552734375;
    uint _2079 = _1778 + 9u;
    float _2085 = cbLight._m0[_1819].x + _360;
    float _2086 = cbLight._m0[_1819].y + _361;
    float _2087 = cbLight._m0[_1819].z + _362;
    float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
    float _2095 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1819].xyz));
    float _3989 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _2099 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_2085 * _2091, _2086 * _2091, _2087 * _2091));
    float _4000 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2108 = (exp2(log2(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2112 = (0.5 / ((_2098 + 9.9999999392252902907785028219223e-09) + _2045)) * _2098;
    float _4011 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.31831014156341552734375;
    float _2124 = (((_2108 * cbLight._m0[_2079].x) * _2114) * _1802) + ((((cbLight._m0[_2025].x * _1767) * _2057) * _2065) * _1815);
    float _2125 = (((_2108 * cbLight._m0[_2079].y) * _2114) * _1802) + ((((cbLight._m0[_2025].y * _1769) * _2057) * _2065) * _1815);
    float _2126 = (((_2108 * cbLight._m0[_2079].z) * _2114) * _1802) + ((((cbLight._m0[_2025].z * _1771) * _2057) * _2065) * _1815);
    float _2182;
    float _2184;
    float _2186;
    if (_1855)
    {
        _2182 = _2124;
        _2184 = _2125;
        _2186 = _2126;
    }
    else
    {
        uint _2188 = _1778 + 10u;
        uint _2194 = _1778 + 2u;
        float _2200 = cbLight._m0[_2194].x + _360;
        float _2201 = cbLight._m0[_2194].y + _361;
        float _2202 = cbLight._m0[_2194].z + _362;
        float _2206 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
        float _2210 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_2194].xyz));
        float _4022 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2213 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2214 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_2200 * _2206, _2201 * _2206, _2202 * _2206));
        float _4033 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2223 = (exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2227 = (0.5 / ((_2213 + 9.9999999392252902907785028219223e-09) + _2045)) * _2213;
        float _4044 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2229 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.31831014156341552734375;
        float _2230 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _2182 = (((_2223 * cbLight._m0[_2188].x) * _2229) * _2230) + _2124;
        _2184 = (((_2223 * cbLight._m0[_2188].y) * _2229) * _2230) + _2125;
        _2186 = (((_2223 * cbLight._m0[_2188].z) * _2229) * _2230) + _2126;
    }
    float _2261;
    float _2263;
    float _2265;
    if (_1964)
    {
        _2261 = _2182;
        _2263 = _2184;
        _2265 = _2186;
    }
    else
    {
        uint _2272 = _1778 + 11u;
        uint _2278 = _1778 + 3u;
        float _2284 = cbLight._m0[_2278].x + _360;
        float _2285 = cbLight._m0[_2278].y + _361;
        float _2286 = cbLight._m0[_2278].z + _362;
        float _2290 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
        float _2294 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_2278].xyz));
        float _4060 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2297 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2298 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2284 * _2290, _2285 * _2290, _2286 * _2290));
        float _4071 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2307 = (exp2(log2(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2311 = (0.5 / ((_2297 + 9.9999999392252902907785028219223e-09) + _2045)) * _2297;
        float _4082 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2313 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * 0.31831014156341552734375;
        float _2314 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _2261 = (((_2307 * cbLight._m0[_2272].x) * _2313) * _2314) + _2182;
        _2263 = (((_2307 * cbLight._m0[_2272].y) * _2313) * _2314) + _2184;
        _2265 = (((_2307 * cbLight._m0[_2272].z) * _2313) * _2314) + _2186;
    }
    float _2380;
    float _2382;
    float _2384;
    float _2386;
    float _2388;
    float _2390;
    if (_1776.y == 0u)
    {
        uvec4 _2335 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2336 = _2335.x;
        uint _2347 = uint((float(_2335.y) * floor(float(uint(cbSceneParam._m0[85u].y * _383) / _2336))) + floor(float(uint(cbSceneParam._m0[85u].x * _382) / _2336)));
        float _2357 = (log2(_1554 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2358 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        uint _2361 = uint(isnan(14.0) ? _2358 : (isnan(_2358) ? 14.0 : min(_2358, 14.0)));
        uvec4 _2366 = texelFetch(g_lightClusterGridBuffer, int(((_2361 << 2u) + (_2347 << 6u)) >> 2u));
        uint _2367 = _2366.x;
        uint _2368 = _2335.z;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        if (((((1u << ((_2368 >> 4u) & 15u)) + 4294967295u) & _2367) == 0u) || ((_2368 & 240u) == 0u))
        {
            _2476 = 0.0;
            _2478 = 0.0;
            _2480 = 0.0;
            _2482 = 0.0;
            _2484 = 0.0;
            _2486 = 0.0;
        }
        else
        {
            float _2477;
            float _2479;
            float _2481;
            float _2483;
            float _2485;
            float _2487;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            uint _2642 = 0u;
            uint _2651;
            bool _2652;
            for (;;)
            {
                _2651 = texelFetch(g_lightClassification, int((((_2361 << 5u) + (_2347 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                _2652 = _2651 == 0u;
                float frontier_phi_84_pred;
                float frontier_phi_84_pred_1;
                float frontier_phi_84_pred_2;
                float frontier_phi_84_pred_3;
                float frontier_phi_84_pred_4;
                float frontier_phi_84_pred_5;
                if (_2652)
                {
                    frontier_phi_84_pred = _2641;
                    frontier_phi_84_pred_1 = _2640;
                    frontier_phi_84_pred_2 = _2639;
                    frontier_phi_84_pred_3 = _2638;
                    frontier_phi_84_pred_4 = _2636;
                    frontier_phi_84_pred_5 = _2637;
                }
                else
                {
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    uint _2787;
                    _2781 = _2636;
                    _2782 = _2637;
                    _2783 = _2638;
                    _2784 = _2639;
                    _2785 = _2640;
                    _2786 = _2641;
                    _2787 = _2651;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    for (;;)
                    {
                        uint _2791 = uint(findLSB(_2787)) + (_2642 << 5u);
                        uint _2788 = (_2787 + 4294967295u) & _2787;
                        uint _2793 = _2791 * 48u;
                        vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 3u)).x));
                        uint _2813 = (_2791 * 48u) + 4u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 3u)).x));
                        uint _2832 = (_2791 * 48u) + 8u;
                        vec3 _2843 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x));
                        float _2847 = _2807.x - _1552;
                        float _2848 = _2807.y - _1553;
                        float _2849 = _2807.z - _1554;
                        float _2850 = dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849));
                        float _2853 = inversesqrt(_2850);
                        float _2862 = 1.0 - (_2850 * _2807.w);
                        float _4108 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2863 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2864 = sqrt(_2850) * _2826.w;
                        float _2867 = 1.39999997615814208984375 / (_2864 + 1.39999997615814208984375);
                        float _2868 = _2867 * _2867;
                        float _2871 = ((1.0 - _2868) * dot(vec3(_403, _406, _409), vec3(_2853 * _2847, _2853 * _2848, _2853 * _2849))) + _2868;
                        float _2874 = _2864 * _2864;
                        float _2878 = ((isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0))) * _2863) / ((_2874 * 0.699999988079071044921875) + 1.0);
                        float _2882 = (-0.0) - _1552;
                        float _2883 = (-0.0) - _1553;
                        float _2884 = (-0.0) - _1554;
                        float _2888 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
                        float _2892 = dot(vec3(_403, _406, _409), vec3(_2888 * _2882, _2888 * _2883, _2888 * _2884));
                        float _4124 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _4135 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2896 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                        float _2900 = (0.5 / (((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) + 9.9999999392252902907785028219223e-09) + _2896)) * _2896;
                        float _4146 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2909 = (((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 3.1415927410125732421875) / ((_2874 * 2.1991131305694580078125) + 3.141590118408203125)) * _2863;
                        _2711 = (_2878 * _2826.x) + _2784;
                        _2712 = (_2878 * _2826.y) + _2785;
                        _2713 = (_2878 * _2826.z) + _2786;
                        _2708 = (_2909 * _2843.x) + _2781;
                        _2709 = (_2909 * _2843.y) + _2782;
                        _2710 = (_2909 * _2843.z) + _2783;
                        if (_2788 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2781 = _2708;
                            _2782 = _2709;
                            _2783 = _2710;
                            _2784 = _2711;
                            _2785 = _2712;
                            _2786 = _2713;
                            _2787 = _2788;
                        }
                    }
                    frontier_phi_84_pred = _2713;
                    frontier_phi_84_pred_1 = _2712;
                    frontier_phi_84_pred_2 = _2711;
                    frontier_phi_84_pred_3 = _2710;
                    frontier_phi_84_pred_4 = _2708;
                    frontier_phi_84_pred_5 = _2709;
                }
                _2487 = frontier_phi_84_pred;
                _2485 = frontier_phi_84_pred_1;
                _2483 = frontier_phi_84_pred_2;
                _2481 = frontier_phi_84_pred_3;
                _2477 = frontier_phi_84_pred_4;
                _2479 = frontier_phi_84_pred_5;
                uint _2643 = _2642 + 1u;
                if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2636 = _2477;
                    _2637 = _2479;
                    _2638 = _2481;
                    _2639 = _2483;
                    _2640 = _2485;
                    _2641 = _2487;
                    _2642 = _2643;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2476 = _2477;
            _2478 = _2479;
            _2480 = _2481;
            _2482 = _2483;
            _2484 = _2485;
            _2486 = _2487;
        }
        uvec4 _2490 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2491 = _2490.z;
        uint _2493 = (_2491 >> 8u) & 15u;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        if (((4294967295u << _2493) & _2367) == 0u)
        {
            _2607 = _2476;
            _2609 = _2478;
            _2611 = _2480;
            _2613 = _2482;
            _2615 = _2484;
            _2617 = _2486;
        }
        else
        {
            float _2632 = inversesqrt(dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554)));
            float frontier_phi_76_77_ladder;
            float frontier_phi_76_77_ladder_1;
            float frontier_phi_76_77_ladder_2;
            float frontier_phi_76_77_ladder_3;
            float frontier_phi_76_77_ladder_4;
            float frontier_phi_76_77_ladder_5;
            if (_2493 < ((_2491 >> 12u) & 15u))
            {
                float _2608;
                float _2610;
                float _2612;
                float _2614;
                float _2616;
                float _2618;
                float _2764 = _2476;
                float _2765 = _2478;
                float _2766 = _2480;
                float _2767 = _2482;
                float _2768 = _2484;
                float _2769 = _2486;
                uint _2770 = _2493;
                uint _2779;
                bool _2780;
                for (;;)
                {
                    _2779 = texelFetch(g_lightClassification, int((((_2361 << 5u) + (_2347 << 9u)) + (_2770 << 2u)) >> 2u)).x;
                    _2780 = _2779 == 0u;
                    float frontier_phi_95_pred;
                    float frontier_phi_95_pred_1;
                    float frontier_phi_95_pred_2;
                    float frontier_phi_95_pred_3;
                    float frontier_phi_95_pred_4;
                    float frontier_phi_95_pred_5;
                    if (_2780)
                    {
                        frontier_phi_95_pred = _2765;
                        frontier_phi_95_pred_1 = _2764;
                        frontier_phi_95_pred_2 = _2769;
                        frontier_phi_95_pred_3 = _2768;
                        frontier_phi_95_pred_4 = _2767;
                        frontier_phi_95_pred_5 = _2766;
                    }
                    else
                    {
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _2936 = _2764;
                        float _2937 = _2765;
                        float _2938 = _2766;
                        float _2939 = _2767;
                        float _2940 = _2768;
                        float _2941 = _2769;
                        uint _2942 = _2779;
                        uint _2943;
                        vec4 _2968;
                        float _2969;
                        vec4 _2984;
                        vec3 _2996;
                        vec4 _3012;
                        vec4 _3028;
                        float _3075;
                        bool _3076;
                        for (;;)
                        {
                            uint _2953 = ((_2770 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2942));
                            _2943 = (_2942 + 4294967295u) & _2942;
                            uint _2955 = _2953 * 40u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            _2969 = _2968.w;
                            uint _2971 = (_2953 * 40u) + 4u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2986 = (_2953 * 40u) + 8u;
                            _2996 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x));
                            uint _2999 = (_2953 * 40u) + 16u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3015 = (_2953 * 40u) + 20u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3031 = (_2953 * 40u) + 24u;
                            vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3050 = (_2953 * 40u) + 28u;
                            vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            _3075 = fma(_1554, _3063.z, fma(_1553, _3063.y, _3063.x * _1552)) + _3063.w;
                            _3076 = !((fma(_1554, _3044.z, fma(_1553, _3044.y, _3044.x * _1552)) + _3044.w) <= 0.0);
                            float frontier_phi_101_pred;
                            float frontier_phi_101_pred_1;
                            float frontier_phi_101_pred_2;
                            float frontier_phi_101_pred_3;
                            float frontier_phi_101_pred_4;
                            float frontier_phi_101_pred_5;
                            if (_3076)
                            {
                                float _3103 = _2968.x - _1552;
                                float _3104 = _2968.y - _1553;
                                float _3105 = _2968.z - _1554;
                                float _3106 = dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105));
                                float _3109 = inversesqrt(_3106);
                                float _3110 = _3109 * _3103;
                                float _3111 = _3109 * _3104;
                                float _3112 = _3109 * _3105;
                                float _3116 = 1.0 - (_3106 / (_2969 * _2969));
                                float _4157 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3121 = sqrt(_3106) * _2984.w;
                                float _3123 = 1.39999997615814208984375 / (_3121 + 1.39999997615814208984375);
                                float _3124 = _3123 * _3123;
                                float _3125 = 1.0 - _3124;
                                float _3127 = (_3125 * dot(vec3(_3110, _3111, _3112), vec3(_403, _406, _409))) + _3124;
                                float _3130 = _3121 * _3121;
                                float _3134 = (fma(_1554, _3012.z, fma(_1553, _3012.y, _3012.x * _1552)) + _3012.w) / _3075;
                                float _3135 = (fma(_1554, _3028.z, fma(_1553, _3028.y, _3028.x * _1552)) + _3028.w) / _3075;
                                float _3139 = 1.0 - dot(vec2(_3134, _3135), vec2(_3134, _3135));
                                float _4173 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3140 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3141 = _3140 * (((isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))) * _3117) / ((_3130 * 0.699999988079071044921875) + 1.0));
                                float _3151 = dot(vec3(_403, _406, _409), vec3((-0.0) - (_1552 * _2632), (-0.0) - (_1553 * _2632), (-0.0) - (_1554 * _2632)));
                                float _4184 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3159 = (_3125 * dot(vec3(_403, _406, _409), vec3(_3110, _3111, _3112))) + _3124;
                                float _4195 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3160 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                                float _3164 = (0.5 / (((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) + 9.9999999392252902907785028219223e-09) + _3160)) * _3160;
                                float _4206 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3171 = (_3140 * _3117) * (((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 3.1415927410125732421875) / ((_3130 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_101_pred = _3171 * _2996.y;
                                frontier_phi_101_pred_1 = _3171 * _2996.x;
                                frontier_phi_101_pred_2 = _3141 * _2984.z;
                                frontier_phi_101_pred_3 = _3141 * _2984.y;
                                frontier_phi_101_pred_4 = _3141 * _2984.x;
                                frontier_phi_101_pred_5 = _3171 * _2996.z;
                            }
                            else
                            {
                                frontier_phi_101_pred = 0.0;
                                frontier_phi_101_pred_1 = 0.0;
                                frontier_phi_101_pred_2 = 0.0;
                                frontier_phi_101_pred_3 = 0.0;
                                frontier_phi_101_pred_4 = 0.0;
                                frontier_phi_101_pred_5 = 0.0;
                            }
                            _3176 = frontier_phi_101_pred;
                            _3175 = frontier_phi_101_pred_1;
                            _3180 = frontier_phi_101_pred_2;
                            _3179 = frontier_phi_101_pred_3;
                            _3178 = frontier_phi_101_pred_4;
                            _3177 = frontier_phi_101_pred_5;
                            _2926 = _3178 + _2939;
                            _2927 = _3179 + _2940;
                            _2928 = _3180 + _2941;
                            _2923 = _3175 + _2936;
                            _2924 = _3176 + _2937;
                            _2925 = _3177 + _2938;
                            if (_2943 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2943;
                                continue;
                            }
                        }
                        frontier_phi_95_pred = _2924;
                        frontier_phi_95_pred_1 = _2923;
                        frontier_phi_95_pred_2 = _2928;
                        frontier_phi_95_pred_3 = _2927;
                        frontier_phi_95_pred_4 = _2926;
                        frontier_phi_95_pred_5 = _2925;
                    }
                    _2610 = frontier_phi_95_pred;
                    _2608 = frontier_phi_95_pred_1;
                    _2618 = frontier_phi_95_pred_2;
                    _2616 = frontier_phi_95_pred_3;
                    _2614 = frontier_phi_95_pred_4;
                    _2612 = frontier_phi_95_pred_5;
                    uint _2771 = _2770 + 1u;
                    if (_2771 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2764 = _2608;
                        _2765 = _2610;
                        _2766 = _2612;
                        _2767 = _2614;
                        _2768 = _2616;
                        _2769 = _2618;
                        _2770 = _2771;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_76_77_ladder = _2618;
                frontier_phi_76_77_ladder_1 = _2614;
                frontier_phi_76_77_ladder_2 = _2612;
                frontier_phi_76_77_ladder_3 = _2610;
                frontier_phi_76_77_ladder_4 = _2608;
                frontier_phi_76_77_ladder_5 = _2616;
            }
            else
            {
                frontier_phi_76_77_ladder = _2486;
                frontier_phi_76_77_ladder_1 = _2482;
                frontier_phi_76_77_ladder_2 = _2480;
                frontier_phi_76_77_ladder_3 = _2478;
                frontier_phi_76_77_ladder_4 = _2476;
                frontier_phi_76_77_ladder_5 = _2484;
            }
            _2607 = frontier_phi_76_77_ladder_4;
            _2609 = frontier_phi_76_77_ladder_3;
            _2611 = frontier_phi_76_77_ladder_2;
            _2613 = frontier_phi_76_77_ladder_1;
            _2615 = frontier_phi_76_77_ladder_5;
            _2617 = frontier_phi_76_77_ladder;
        }
        float _2622 = isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0));
        _2380 = (_2622 * _2613) + _2019;
        _2382 = (_2622 * _2615) + _2021;
        _2384 = (_2622 * _2617) + _2023;
        _2386 = ((_2607 * 0.039999999105930328369140625) * _2622) + _2261;
        _2388 = ((_2609 * 0.039999999105930328369140625) * _2622) + _2263;
        _2390 = ((_2611 * 0.039999999105930328369140625) * _2622) + _2265;
    }
    else
    {
        _2380 = _2019;
        _2382 = _2021;
        _2384 = _2023;
        _2386 = _2261;
        _2388 = _2263;
        _2390 = _2265;
    }
    uint _2396 = _423 + uint(cbMatDynParam._m0[0u].w);
    float _2402 = (cbSceneParam._m0[72u].y * _264) * cbInstanceData._m0[_2396].x;
    float _2403 = (cbSceneParam._m0[72u].y * _266) * cbInstanceData._m0[_2396].y;
    float _2404 = (cbSceneParam._m0[72u].y * _267) * cbInstanceData._m0[_2396].z;
    float _4222 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4233 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4244 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _2421 = (((isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2380 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _447))) + ((_2386 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _1285)) * cbPerFrame._m0[3u].x)) + _2402;
    float _2423 = (_2403 + ((_2388 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1285)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2382 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _447)));
    float _2425 = (_2404 + ((_2390 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1285)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2384 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _447)));
    float _2426 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2427 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2428 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2434 = cbMtdParam._m0[2u].x * _2402;
    float _2435 = cbMtdParam._m0[2u].y * _2403;
    float _2436 = cbMtdParam._m0[2u].z * _2404;
    float _4270 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2438 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    uint _2439 = _422 + 6u;
    float _2447 = _382 / cbSceneParam._m0[86u].x;
    float _2448 = _383 / cbSceneParam._m0[86u].y;
    vec4 _2462 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2447, _2448, (log2((isnan(cbSceneParam._m0[77u].w) ? _301 : (isnan(_301) ? cbSceneParam._m0[77u].w : min(_301, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2464 = _2462.x;
    float _2465 = _2462.y;
    float _2466 = _2462.z;
    float _2467 = _2462.w;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    if (_301 > cbSceneParam._m0[78u].w)
    {
        float _2501 = isnan(_301) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _301 : min(cbSceneParam._m0[80u].w, _301));
        float _2502 = _2501 / _301;
        float _2513 = _2502 * _353;
        float _2514 = _354 * _2502;
        float _2515 = (-0.0) - _2514;
        float _2517 = _2502 * _355;
        float _2519 = (cbSceneParam._m0[77u].w * _2515) / _2501;
        float _2520 = _2519 + cbSceneParam._m0[79u].w;
        float _2521 = cbSceneParam._m0[79u].w - _2514;
        float _2527 = sqrt(((_2513 * _2513) + (_2514 * _2514)) + (_2517 * _2517));
        float _2530 = (1.0 - (cbSceneParam._m0[77u].w / _2501)) * _2527;
        float _2535 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2537 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2721;
        if (abs((_2515 - _2519) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2721 = ((((_2520 > 0.0) ? exp2(_2535 * _2520) : (2.0 - exp2(_2537 * _2520))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2530;
        }
        else
        {
            float _2665 = 1.0 / cbSceneParam._m0[80u].x;
            float _2666 = isnan(_2521) ? _2520 : (isnan(_2520) ? _2521 : max(_2520, _2521));
            float _2667 = isnan(_2521) ? _2520 : (isnan(_2520) ? _2521 : min(_2520, _2521));
            float _2676 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : min(_2666, 0.0));
            float _2677 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : min(_2667, 0.0));
            _2721 = ((abs(_2527 / _2515) * cbSceneParam._m0[80u].y) * ((((_2676 - _2677) * 2.0) - ((exp2(_2535 * (isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0)))) - exp2(_2535 * (isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0))))) * _2665)) - ((exp2(_2537 * _2676) - exp2(_2537 * _2677)) * _2665))) + (_2530 * cbSceneParam._m0[80u].z);
        }
        vec4 _2723 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2447, _2448, 1.0), 0.0);
        float _2732 = exp2((_2721 * (-1.44269502162933349609375)) * (1.0 - _2723.w));
        float _2733 = log2(_2732);
        float _2749 = log2(_2467);
        _2539 = (exp2(_2749 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2733 * cbSceneParam._m0[78u].x)) * _2723.x) / cbSceneParam._m0[78u].x)) + _2464;
        _2541 = (exp2(_2749 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2733 * cbSceneParam._m0[78u].y)) * _2723.y) / cbSceneParam._m0[78u].y)) + _2465;
        _2543 = (exp2(_2749 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2733 * cbSceneParam._m0[78u].z)) * _2723.z) / cbSceneParam._m0[78u].z)) + _2466;
        _2545 = _2732 * _2467;
    }
    else
    {
        _2539 = _2464;
        _2541 = _2465;
        _2543 = _2466;
        _2545 = _2467;
    }
    bool _2759;
    vec4 _2554;
    vec4 _2577;
    float _2579;
    float _2583;
    float _2584;
    float _2585;
    float _2588;
    float _2591;
    float _2594;
    float _2595;
    bool _2606;
    for (;;)
    {
        _2554 = cbMatDynParam._m0[0u];
        float _2556 = roundEven(_2554.y);
        bool _2557 = _2556 == 3.0;
        float _2559 = log2(_2545);
        float _2563 = exp2(_2559 * cbSceneParam._m0[78u].x);
        float _2564 = exp2(_2559 * cbSceneParam._m0[78u].y);
        float _2565 = exp2(_2559 * cbSceneParam._m0[78u].z);
        float _2566 = _2563 * _2426;
        float _2567 = _2564 * _2427;
        float _2568 = _2565 * _2428;
        float _2575 = _369 + (-0.5);
        _2577 = cbMtdParam._m0[1u];
        _2579 = _2577.y * _2575;
        float _2582 = (_2556 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2583 = _2582 * (_2557 ? _2566 : (_2566 + (cbSceneParam._m0[72u].w * _2539)));
        _2584 = _2582 * (_2557 ? _2567 : (_2567 + (cbSceneParam._m0[72u].w * _2541)));
        _2585 = _2582 * (_2557 ? _2568 : (_2568 + (cbSceneParam._m0[72u].w * _2543)));
        _2588 = ((_2434 * _2438) * _2563) * _2582;
        _2591 = ((_2435 * _2438) * _2564) * _2582;
        _2594 = ((_2436 * _2438) * _2565) * _2582;
        _2595 = _2575 * 0.999000012874603271484375;
        _2606 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2606)
        {
            if ((cbInstanceData._m0[_422 + 7u].x + _2595) < 0.5)
            {
                _2759 = true;
                break;
            }
        }
        uint _2700 = _423 + uint(_2554.w);
        if ((cbInstanceData._m0[_2700].w < 1.0) && ((cbInstanceData._m0[_2700].w + _2595) < 0.5))
        {
            _2759 = true;
            break;
        }
        if ((_2579 + 1.0) < _2577.x)
        {
            _2759 = true;
            break;
        }
        _2759 = false;
        break;
    }
    float _2914;
    if (_2759)
    {
        discard_state = true;
        _2914 = 0.0;
    }
    else
    {
        _2914 = cbInstanceData._m0[_2439].w;
    }
    SV_Target.x = _2583;
    SV_Target.y = _2584;
    SV_Target.z = _2585;
    SV_Target.w = _2914;
    SV_Target_1.x = _2588;
    SV_Target_1.y = _2591;
    SV_Target_1.z = _2594;
    SV_Target_1.w = cbInstanceData._m0[_2439].w;
    discard_exit();
}


