#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _823;
float _3073;
float _3074;
float _3075;
float _3076;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    vec4 _186 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[9u].x;
    float _193 = _186.y * cbMtdParam._m0[9u].y;
    float _194 = _186.z * cbMtdParam._m0[9u].z;
    vec4 _215 = texture(sampler2D(I_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _217 = _215.x;
    float _218 = _215.y;
    float _219 = _215.z;
    float _220 = cbMtdParam._m0[11u].w * cbMtdParam._m0[12u].x;
    float _221 = _220 * _217;
    float _222 = _220 * _218;
    float _223 = _220 * _219;
    float _224 = isnan(_222) ? _221 : (isnan(_221) ? _222 : max(_221, _222));
    float _225 = isnan(_223) ? _224 : (isnan(_224) ? _223 : max(_224, _223));
    float _228;
    float _230;
    if (_225 < 1.1920928955078125e-07)
    {
        _228 = 0.0;
        _230 = 0.0;
    }
    else
    {
        float _256 = isnan(_222) ? _221 : (isnan(_221) ? _222 : min(_221, _222));
        float _258 = _225 - (isnan(_223) ? _256 : (isnan(_256) ? _223 : min(_256, _223)));
        float _231 = _258 / _225;
        float frontier_phi_1_2_ladder;
        float frontier_phi_1_2_ladder_1;
        if (_258 < 1.1920928955078125e-07)
        {
            frontier_phi_1_2_ladder = _231;
            frontier_phi_1_2_ladder_1 = 0.0;
        }
        else
        {
            float _844;
            if (_225 == _221)
            {
                _844 = ((_220 * (_218 - _219)) / _258) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_15_10_ladder;
                if (_225 == _222)
                {
                    frontier_phi_15_10_ladder = (((_220 * (_219 - _217)) / _258) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_15_10_ladder = (((_220 * (_217 - _218)) / _258) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _844 = frontier_phi_15_10_ladder;
            }
            float _849 = (_844 < 0.0) ? (_844 + 1.0) : _844;
            frontier_phi_1_2_ladder = _231;
            frontier_phi_1_2_ladder_1 = _849 - floor(_849);
        }
        _228 = frontier_phi_1_2_ladder_1;
        _230 = frontier_phi_1_2_ladder;
    }
    float _232 = _230 + cbMtdParam._m0[11u].y;
    float _236 = fract(cbMtdParam._m0[11u].z + _228) * 6.0;
    uint _239 = uint(int(floor(_236)));
    float _241 = _236 - float(int(_239));
    float _244 = (1.0 - _232) * _225;
    float _247 = (1.0 - (_241 * _232)) * _225;
    float _251 = (1.0 - ((1.0 - _241) * _232)) * _225;
    float _260;
    float _262;
    float _263;
    if ((_239 == 0u) || (_239 == 6u))
    {
        _260 = _225;
        _262 = _251;
        _263 = _244;
    }
    else
    {
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        if (_239 == 1u)
        {
            frontier_phi_3_4_ladder = _247;
            frontier_phi_3_4_ladder_1 = _244;
            frontier_phi_3_4_ladder_2 = _225;
        }
        else
        {
            float frontier_phi_3_4_ladder_8_ladder;
            float frontier_phi_3_4_ladder_8_ladder_1;
            float frontier_phi_3_4_ladder_8_ladder_2;
            if (_239 == 2u)
            {
                frontier_phi_3_4_ladder_8_ladder = _244;
                frontier_phi_3_4_ladder_8_ladder_1 = _251;
                frontier_phi_3_4_ladder_8_ladder_2 = _225;
            }
            else
            {
                float frontier_phi_3_4_ladder_8_ladder_14_ladder;
                float frontier_phi_3_4_ladder_8_ladder_14_ladder_1;
                float frontier_phi_3_4_ladder_8_ladder_14_ladder_2;
                if (_239 == 3u)
                {
                    frontier_phi_3_4_ladder_8_ladder_14_ladder = _244;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder_1 = _225;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder_2 = _247;
                }
                else
                {
                    bool _1237 = _239 == 4u;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder = _1237 ? _251 : _225;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder_1 = _1237 ? _225 : _247;
                    frontier_phi_3_4_ladder_8_ladder_14_ladder_2 = _244;
                }
                frontier_phi_3_4_ladder_8_ladder = frontier_phi_3_4_ladder_8_ladder_14_ladder;
                frontier_phi_3_4_ladder_8_ladder_1 = frontier_phi_3_4_ladder_8_ladder_14_ladder_1;
                frontier_phi_3_4_ladder_8_ladder_2 = frontier_phi_3_4_ladder_8_ladder_14_ladder_2;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_8_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_8_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_8_ladder_2;
        }
        _260 = frontier_phi_3_4_ladder;
        _262 = frontier_phi_3_4_ladder_2;
        _263 = frontier_phi_3_4_ladder_1;
    }
    float _275 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _276 = _275 * _164;
    float _277 = _275 * _165;
    float _278 = _275 * _166;
    float _3105 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _3116 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _3127 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _297 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _339 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _349 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _339);
    float _350 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _339);
    float _351 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _339);
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _349 * _355;
    float _357 = _350 * _355;
    float _358 = _351 * _355;
    vec4 _363 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _365 = _363.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _495 = sqrt(((_349 * _349) + (_350 * _350)) + (_351 * _351));
        float _501 = (cbMatDynParam._m0[5u].x * _495) + cbMatDynParam._m0[5u].y;
        float _3138 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
        float _502 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _506 = (cbMatDynParam._m0[5u].z * _495) + cbMatDynParam._m0[5u].w;
        float _3149 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0))) - _502)) + _502) < ((_365 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _378 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _379 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _399 = fma(_278, cbSceneParam._m0[5u].z, fma(_277, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _276));
    float _402 = fma(_278, cbSceneParam._m0[6u].z, fma(_277, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _276));
    float _405 = fma(_278, cbSceneParam._m0[7u].z, fma(_277, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _276));
    uint _418 = uint(roundEven(NORMAL.w)) * 13u;
    uint _419 = _418 + 9u;
    uint _420 = _419 + uint(cbMatDynParam._m0[0u].w);
    float _426 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0)))) * cbInstanceData._m0[_420].x;
    float _427 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0)))) * cbInstanceData._m0[_420].y;
    float _428 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0)))) * cbInstanceData._m0[_420].z;
    float _3160 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
    float _3171 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0));
    float _3182 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
    vec4 _440 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _378, cbSceneParam._m0[86u].y * _379));
    float _443 = _440.x * TEXCOORD.z;
    float _444 = dot(vec3(_276, _277, _278), vec3(_356, _357, _358));
    float _447 = _444 * 2.0;
    float _452 = (_447 * _276) - _356;
    float _453 = (_447 * _277) - _357;
    float _454 = (_447 * _278) - _358;
    float _476 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _480 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _484 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _822;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _547 = fma(_484, cbModelParam._m0[26u].z, fma(_480, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _476));
        float _551 = fma(_484, cbModelParam._m0[27u].z, fma(_480, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _476));
        float _555 = fma(_484, cbModelParam._m0[28u].z, fma(_480, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _476));
        float _580 = _476 + _276;
        float _581 = _480 + _277;
        float _582 = _484 + _278;
        float _592 = fma(_582, cbModelParam._m0[26u].z, fma(_581, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _580)) - _547;
        float _593 = fma(_582, cbModelParam._m0[27u].z, fma(_581, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _580)) - _551;
        float _594 = fma(_582, cbModelParam._m0[28u].z, fma(_581, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _580)) - _555;
        float _598 = inversesqrt(dot(vec3(_592, _593, _594), vec3(_592, _593, _594)));
        float _611 = ((_598 * _592) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_547 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _612 = ((_598 * _593) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_551 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _613 = ((_598 * _594) / cbModelParam._m0[34u].z) + ((((((_555 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _616 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        vec4 _623 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        vec4 _630 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        float _650 = exp2((_616.w + (-0.5)) * 20.0) * 2.0;
        float _651 = _650 * (_616.x + (-0.5));
        float _652 = _650 * (_616.y + (-0.5));
        float _653 = _650 * (_616.z + (-0.5));
        float _660 = exp2((_623.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_623.x + (-0.5));
        float _662 = _660 * (_623.y + (-0.5));
        float _663 = _660 * (_623.z + (-0.5));
        float _670 = exp2((_630.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_630.x + (-0.5));
        float _672 = _670 * (_630.y + (-0.5));
        float _673 = _670 * (_630.z + (-0.5));
        float _680 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_637.x + (-0.5));
        float _682 = _680 * (_637.y + (-0.5));
        float _683 = _680 * (_637.z + (-0.5));
        float _684 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _685 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _687 = _651 * 0.5;
        float _688 = _661 * 0.5;
        float _689 = _671 * 0.5;
        float _690 = dot(vec3(_687, _688, _689), vec3(_687, _688, _689));
        float _695 = (_690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_690);
        float _704 = (dot(vec3(_276, _277, _278), vec3(_695 * _687, _695 * _688, _695 * _689)) + 1.0) * 0.5;
        float _3208 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _714 = sqrt(((_688 * _688) + (_687 * _687)) + (_689 * _689)) / (_684 + 9.9999997473787516355514526367188e-06);
        float _3219 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
        float _716 = _715 * 2.0;
        float _720 = (1.0 - _715) / (_715 + 1.0);
        float _3230 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
        float _730 = ((((1.0 - _721) * (_716 + 2.0)) * exp2(log2(isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0))) * (_716 + 1.0))) + _721) * _684;
        float _731 = _652 * 0.5;
        float _732 = _662 * 0.5;
        float _733 = _672 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _747 = (dot(vec3(_276, _277, _278), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3241 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _756 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_685 + 9.9999997473787516355514526367188e-06);
        float _3252 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3263 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0))) * (_758 + 1.0))) + _763) * _685;
        float _773 = _653 * 0.5;
        float _774 = _663 * 0.5;
        float _775 = _673 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _789 = (dot(vec3(_276, _277, _278), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3274 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _798 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_686 + 9.9999997473787516355514526367188e-06);
        float _3285 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3296 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))) * (_800 + 1.0))) + _805) * _686;
        _822 = _653;
        _824 = _652;
        _825 = _651;
        _826 = _663;
        _827 = _662;
        _828 = _661;
        _829 = _673;
        _830 = _672;
        _831 = _671;
        _832 = _686;
        _833 = _685;
        _834 = _684;
        _835 = cbModelParam._m0[36u].z * (isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0)));
        _836 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
        _837 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
    }
    else
    {
        _822 = _823;
        _824 = _823;
        _825 = _823;
        _826 = _823;
        _827 = _823;
        _828 = _823;
        _829 = _823;
        _830 = _823;
        _831 = _823;
        _832 = _823;
        _833 = _823;
        _834 = _823;
        _835 = 0.0;
        _836 = 0.0;
        _837 = 0.0;
    }
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _884 = fma(_484, cbModelParam._m0[30u].z, fma(_480, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _476));
        float _888 = fma(_484, cbModelParam._m0[31u].z, fma(_480, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _476));
        float _892 = fma(_484, cbModelParam._m0[32u].z, fma(_480, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _476));
        float _915 = _476 + _276;
        float _916 = _480 + _277;
        float _917 = _484 + _278;
        float _927 = fma(_917, cbModelParam._m0[30u].z, fma(_916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915)) - _884;
        float _928 = fma(_917, cbModelParam._m0[31u].z, fma(_916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915)) - _888;
        float _929 = fma(_917, cbModelParam._m0[32u].z, fma(_916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915)) - _892;
        float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
        float _946 = ((_933 * _927) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_884 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_933 * _928) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_888 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_933 * _929) / cbModelParam._m0[35u].z) + ((((((_892 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        float _983 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_950.x + (-0.5));
        float _985 = _983 * (_950.y + (-0.5));
        float _986 = _983 * (_950.z + (-0.5));
        float _993 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_957.x + (-0.5));
        float _995 = _993 * (_957.y + (-0.5));
        float _996 = _993 * (_957.z + (-0.5));
        float _1003 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_964.x + (-0.5));
        float _1005 = _1003 * (_964.y + (-0.5));
        float _1006 = _1003 * (_964.z + (-0.5));
        float _1013 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_971.x + (-0.5));
        float _1015 = _1013 * (_971.y + (-0.5));
        float _1016 = _1013 * (_971.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_276, _277, _278), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3337 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3348 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3359 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0))) * (_1047 + 1.0))) + _1052) * _1017;
        float _1062 = _985 * 0.5;
        float _1063 = _995 * 0.5;
        float _1064 = _1005 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_276, _277, _278), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3370 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3381 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3392 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) * (_1089 + 1.0))) + _1094) * _1018;
        float _1104 = _986 * 0.5;
        float _1105 = _996 * 0.5;
        float _1106 = _1006 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_276, _277, _278), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3403 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3414 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3425 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * (_1131 + 1.0))) + _1136) * _1019;
        _1153 = _986;
        _1154 = _985;
        _1155 = _984;
        _1156 = _996;
        _1157 = _995;
        _1158 = _994;
        _1159 = _1006;
        _1160 = _1005;
        _1161 = _1004;
        _1162 = _1019;
        _1163 = _1018;
        _1164 = _1017;
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _823;
        _1154 = _823;
        _1155 = _823;
        _1156 = _823;
        _1157 = _823;
        _1158 = _823;
        _1159 = _823;
        _1160 = _823;
        _1161 = _823;
        _1162 = _823;
        _1163 = _823;
        _1164 = _823;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _835)) + _835;
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _836)) + _836;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _837)) + _837;
    float _1200 = fma(_1179, cbSceneParam._m0[89u].z, fma(_1178, cbSceneParam._m0[89u].y, _1177 * cbSceneParam._m0[89u].x));
    float _1203 = fma(_1179, cbSceneParam._m0[90u].z, fma(_1178, cbSceneParam._m0[90u].y, _1177 * cbSceneParam._m0[90u].x));
    float _1206 = fma(_1179, cbSceneParam._m0[91u].z, fma(_1178, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1177));
    float _1221 = _452 * 0.5;
    float _1222 = _453 * 0.5;
    float _1223 = _454 * 0.5;
    float _1224 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1227 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1230 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1266;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1239 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_822, _826, _829, _832));
        float _1243 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_824, _827, _830, _833));
        float _1247 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_825, _828, _831, _834));
        float _1254 = dot(vec4(cbModelParam._m0[39u]), vec4(_1221, _1222, _1223, 1.0));
        _1266 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1266 = 1.0;
    }
    float _1277;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1268 = dot(vec4(cbModelParam._m0[40u]), vec4(_1221, _1222, _1223, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1281 = (_1277 * cbModelParam._m0[1u].x) + (_1266 * (1.0 - cbModelParam._m0[1u].x));
    float _1290 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1372;
    float _1374;
    float _1376;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1339 = fma(_484, cbModelParam._m0[13u].z, fma(_480, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _476)) + cbModelParam._m0[13u].w;
        float _1343 = fma(_484, cbModelParam._m0[14u].z, fma(_480, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _476)) + cbModelParam._m0[14u].w;
        float _1347 = fma(_484, cbModelParam._m0[15u].z, fma(_480, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _476)) + cbModelParam._m0[15u].w;
        float _1350 = fma(_454, cbModelParam._m0[13u].z, fma(_453, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _452));
        float _1353 = fma(_454, cbModelParam._m0[14u].z, fma(_453, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _452));
        float _1356 = fma(_454, cbModelParam._m0[15u].z, fma(_453, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _452));
        float _1382;
        if (_1350 > 0.0)
        {
            _1382 = abs((1.0 - _1339) / _1350);
        }
        else
        {
            float frontier_phi_30_28_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_30_28_ladder = abs((_1339 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_30_28_ladder = 5000.0;
            }
            _1382 = frontier_phi_30_28_ladder;
        }
        float _1588;
        if (_1353 > 0.0)
        {
            _1588 = abs((1.0 - _1343) / _1353);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1343 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1588 = frontier_phi_39_35_ladder;
        }
        float _1777;
        if (_1356 > 0.0)
        {
            _1777 = abs((1.0 - _1347) / _1356);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1347 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _1777 = frontier_phi_51_46_ladder;
        }
        float _1779 = isnan(_1588) ? _1382 : (isnan(_1382) ? _1588 : min(_1382, _1588));
        float _1780 = isnan(_1777) ? _1779 : (isnan(_1779) ? _1777 : min(_1779, _1777));
        float _1784 = (_1780 * _1350) + _1339;
        float _1785 = (_1780 * _1353) + _1343;
        float _1786 = (_1780 * _1356) + _1347;
        float _1787 = _1780 * 9.9999997473787516355514526367188e-05;
        float _1789 = (-1.0) - _1787;
        float _1791 = _1787 + 1.0;
        float frontier_phi_29_51_ladder;
        float frontier_phi_29_51_ladder_1;
        float frontier_phi_29_51_ladder_2;
        if ((_1786 > _1791) || ((_1786 < _1789) || ((_1785 > _1791) || ((_1785 < _1789) || ((_1784 < _1789) || (_1784 > _1791))))))
        {
            frontier_phi_29_51_ladder = 0.0;
            frontier_phi_29_51_ladder_1 = 0.0;
            frontier_phi_29_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1883 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1786, cbModelParam._m0[9u].z, fma(_1785, cbModelParam._m0[9u].y, _1784 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1786, cbModelParam._m0[10u].z, fma(_1785, cbModelParam._m0[10u].y, _1784 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1786, cbModelParam._m0[11u].z, fma(_1785, cbModelParam._m0[11u].y, _1784 * cbModelParam._m0[11u].x))), _1290);
            frontier_phi_29_51_ladder = _1883.z * cbModelParam._m0[1u].y;
            frontier_phi_29_51_ladder_1 = _1883.y * cbModelParam._m0[1u].y;
            frontier_phi_29_51_ladder_2 = _1883.x * cbModelParam._m0[1u].y;
        }
        _1372 = frontier_phi_29_51_ladder_2;
        _1374 = frontier_phi_29_51_ladder_1;
        _1376 = frontier_phi_29_51_ladder;
    }
    else
    {
        vec4 _1360 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_452, _453, _454), _1290);
        _1372 = _1360.x * cbModelParam._m0[1u].y;
        _1374 = _1360.y * cbModelParam._m0[1u].y;
        _1376 = _1360.z * cbModelParam._m0[1u].y;
    }
    float _1379 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1472;
    float _1474;
    float _1476;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1436 = fma(_484, cbModelParam._m0[21u].z, fma(_480, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _476)) + cbModelParam._m0[21u].w;
        float _1440 = fma(_484, cbModelParam._m0[22u].z, fma(_480, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _476)) + cbModelParam._m0[22u].w;
        float _1444 = fma(_484, cbModelParam._m0[23u].z, fma(_480, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _476)) + cbModelParam._m0[23u].w;
        float _1447 = fma(_454, cbModelParam._m0[21u].z, fma(_453, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _452));
        float _1450 = fma(_454, cbModelParam._m0[22u].z, fma(_453, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _452));
        float _1453 = fma(_454, cbModelParam._m0[23u].z, fma(_453, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _452));
        float _1593;
        if (_1447 > 0.0)
        {
            _1593 = abs((1.0 - _1436) / _1447);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1436 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _1593 = frontier_phi_41_37_ladder;
        }
        float _1804;
        if (_1450 > 0.0)
        {
            _1804 = abs((1.0 - _1440) / _1450);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1440 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _1804 = frontier_phi_53_48_ladder;
        }
        float _1955;
        if (_1453 > 0.0)
        {
            _1955 = abs((1.0 - _1444) / _1453);
        }
        else
        {
            float frontier_phi_62_59_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_62_59_ladder = abs((_1444 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_62_59_ladder = 5000.0;
            }
            _1955 = frontier_phi_62_59_ladder;
        }
        float _1957 = isnan(_1804) ? _1593 : (isnan(_1593) ? _1804 : min(_1593, _1804));
        float _1958 = isnan(_1955) ? _1957 : (isnan(_1957) ? _1955 : min(_1957, _1955));
        float _1962 = (_1958 * _1447) + _1436;
        float _1963 = (_1958 * _1450) + _1440;
        float _1964 = (_1958 * _1453) + _1444;
        float _1965 = _1958 * 9.9999997473787516355514526367188e-05;
        float _1966 = (-1.0) - _1965;
        float _1968 = _1965 + 1.0;
        float frontier_phi_38_62_ladder;
        float frontier_phi_38_62_ladder_1;
        float frontier_phi_38_62_ladder_2;
        if ((_1964 > _1968) || ((_1964 < _1966) || ((_1963 > _1968) || ((_1963 < _1966) || ((_1962 < _1966) || (_1962 > _1968))))))
        {
            frontier_phi_38_62_ladder = 0.0;
            frontier_phi_38_62_ladder_1 = 0.0;
            frontier_phi_38_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2192 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1964, cbModelParam._m0[17u].z, fma(_1963, cbModelParam._m0[17u].y, _1962 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1964, cbModelParam._m0[18u].z, fma(_1963, cbModelParam._m0[18u].y, _1962 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1964, cbModelParam._m0[19u].z, fma(_1963, cbModelParam._m0[19u].y, _1962 * cbModelParam._m0[19u].x))), _1379);
            frontier_phi_38_62_ladder = _2192.z * cbModelParam._m0[1u].z;
            frontier_phi_38_62_ladder_1 = _2192.y * cbModelParam._m0[1u].z;
            frontier_phi_38_62_ladder_2 = _2192.x * cbModelParam._m0[1u].z;
        }
        _1472 = frontier_phi_38_62_ladder_2;
        _1474 = frontier_phi_38_62_ladder_1;
        _1476 = frontier_phi_38_62_ladder;
    }
    else
    {
        vec4 _1456 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_452, _453, _454), _1379);
        _1472 = _1456.x * cbModelParam._m0[1u].z;
        _1474 = _1456.y * cbModelParam._m0[1u].z;
        _1476 = _1456.z * cbModelParam._m0[1u].z;
    }
    float _1488 = _443 * 0.01200000010430812835693359375;
    float _1490 = _1488 * ((cbModelParam._m0[1u].w * (_1472 - _1372)) + _1372);
    float _1491 = _1488 * ((cbModelParam._m0[1u].w * (_1474 - _1374)) + _1374);
    float _1492 = _1488 * ((cbModelParam._m0[1u].w * (_1476 - _1376)) + _1376);
    float _1495 = fma(_1492, cbSceneParam._m0[89u].z, fma(_1491, cbSceneParam._m0[89u].y, _1490 * cbSceneParam._m0[89u].x));
    float _1498 = fma(_1492, cbSceneParam._m0[90u].z, fma(_1491, cbSceneParam._m0[90u].y, _1490 * cbSceneParam._m0[90u].x));
    float _1501 = fma(_1492, cbSceneParam._m0[91u].z, fma(_1491, cbSceneParam._m0[91u].y, _1490 * cbSceneParam._m0[91u].x));
    uvec4 _1511 = floatBitsToUint(cbInstanceData._m0[_418 + 5u]);
    uint _1513 = _1511.x * 14u;
    uint _1514 = _1513 + 13u;
    float _1521 = _443 + (-1.0);
    float _1527 = (cbLight._m0[_1514].x * _1521) + 1.0;
    float _1528 = (cbLight._m0[_1514].y * _1521) + 1.0;
    float _1529 = (cbLight._m0[_1514].z * _1521) + 1.0;
    float _1530 = (cbLight._m0[_1514].w * _1521) + 1.0;
    uint _1531 = _1513 + 5u;
    float _1537 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
    uint _1541 = _1513 + 4u;
    float _1547 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
    uint _1551 = _1513 | 1u;
    float _1562 = dot(vec3(cbLight._m0[_1513].xyz), vec3(_276, _277, _278));
    float _1565 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_276, _277, _278));
    float _3561 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
    float _3572 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _1570 = (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * 0.3183098733425140380859375;
    float _1572 = (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * 0.3183098733425140380859375;
    float _1579 = ((cbLight._m0[_1531].x * _1537) * _1572) + ((cbLight._m0[_1541].x * _1547) * _1570);
    float _1580 = ((_1537 * cbLight._m0[_1531].y) * _1572) + ((_1547 * cbLight._m0[_1541].y) * _1570);
    float _1581 = ((_1537 * cbLight._m0[_1531].z) * _1572) + ((_1547 * cbLight._m0[_1541].z) * _1570);
    uvec4 _1585 = floatBitsToUint(cbLight._m0[_1513 + 12u]);
    bool _1587 = _1585.x == 0u;
    float _1598;
    float _1600;
    float _1602;
    if (_1587)
    {
        _1598 = _1579;
        _1600 = _1580;
        _1602 = _1581;
    }
    else
    {
        uint _1606 = _1513 + 6u;
        float _1622 = (dot(vec3(cbLight._m0[_1513 + 2u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _1623 = _1622 * _1622;
        float _3583 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1625 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
        _1598 = (((cbLight._m0[_1606].x * 0.3183098733425140380859375) * _1624) * _1625) + _1579;
        _1600 = (((cbLight._m0[_1606].y * 0.3183098733425140380859375) * _1624) * _1625) + _1580;
        _1602 = (((cbLight._m0[_1606].z * 0.3183098733425140380859375) * _1624) * _1625) + _1581;
    }
    bool _1605 = _1585.y == 0u;
    float _1643;
    float _1645;
    float _1647;
    if (_1605)
    {
        _1643 = _1598;
        _1645 = _1600;
        _1647 = _1602;
    }
    else
    {
        uint _1748 = _1513 + 7u;
        float _1764 = (dot(vec3(cbLight._m0[_1513 + 3u].xyz), vec3(_276, _277, _278)) * 0.5) + 0.5;
        float _1765 = _1764 * _1764;
        float _3599 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1767 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1643 = (((cbLight._m0[_1748].x * 0.3183098733425140380859375) * _1766) * _1767) + _1598;
        _1645 = (((cbLight._m0[_1748].y * 0.3183098733425140380859375) * _1766) * _1767) + _1600;
        _1647 = (((cbLight._m0[_1748].z * 0.3183098733425140380859375) * _1766) * _1767) + _1602;
    }
    uint _1649 = _1513 + 8u;
    float _1655 = cbLight._m0[_1513].x + _356;
    float _1656 = cbLight._m0[_1513].y + _357;
    float _1657 = cbLight._m0[_1513].z + _358;
    float _1661 = inversesqrt(dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657)));
    float _1665 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1513].xyz));
    float _3615 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1668 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _1669 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _1670 = dot(vec3(cbLight._m0[_1513].xyz), vec3(_1655 * _1661, _1656 * _1661, _1657 * _1661));
    float _3637 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1681 = (exp2(log2(1.0 - (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1687 = (0.5 / ((_1668 + 9.9999999392252902907785028219223e-09) + _1669)) * _1668;
    float _3648 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1689 = (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * 0.31831014156341552734375;
    uint _1700 = _1513 + 9u;
    float _1706 = cbLight._m0[_1551].x + _356;
    float _1707 = cbLight._m0[_1551].y + _357;
    float _1708 = cbLight._m0[_1551].z + _358;
    float _1712 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
    float _1716 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1551].xyz));
    float _3659 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1719 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _1720 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_1706 * _1712, _1707 * _1712, _1708 * _1712));
    float _3670 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1729 = (exp2(log2(1.0 - (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1733 = (0.5 / ((_1719 + 9.9999999392252902907785028219223e-09) + _1669)) * _1719;
    float _3681 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1735 = (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * 0.31831014156341552734375;
    float _1745 = (((_1729 * cbLight._m0[_1700].x) * _1735) * _1537) + (((_1681 * cbLight._m0[_1649].x) * _1689) * _1547);
    float _1746 = (((_1729 * cbLight._m0[_1700].y) * _1735) * _1537) + (((_1681 * cbLight._m0[_1649].y) * _1689) * _1547);
    float _1747 = (((_1729 * cbLight._m0[_1700].z) * _1735) * _1537) + (((_1681 * cbLight._m0[_1649].z) * _1689) * _1547);
    float _1809;
    float _1811;
    float _1813;
    if (_1587)
    {
        _1809 = _1745;
        _1811 = _1746;
        _1813 = _1747;
    }
    else
    {
        uint _1815 = _1513 + 10u;
        uint _1821 = _1513 + 2u;
        float _1827 = cbLight._m0[_1821].x + _356;
        float _1828 = cbLight._m0[_1821].y + _357;
        float _1829 = cbLight._m0[_1821].z + _358;
        float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
        float _1837 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1821].xyz));
        float _3692 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1840 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1841 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_1827 * _1833, _1828 * _1833, _1829 * _1833));
        float _3703 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1850 = (exp2(log2(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1854 = (0.5 / ((_1840 + 9.9999999392252902907785028219223e-09) + _1669)) * _1840;
        float _3714 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1856 = (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.31831014156341552734375;
        float _1857 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
        _1809 = (((_1850 * cbLight._m0[_1815].x) * _1856) * _1857) + _1745;
        _1811 = (((_1850 * cbLight._m0[_1815].y) * _1856) * _1857) + _1746;
        _1813 = (((_1850 * cbLight._m0[_1815].z) * _1856) * _1857) + _1747;
    }
    float _1892;
    float _1894;
    float _1896;
    if (_1605)
    {
        _1892 = _1809;
        _1894 = _1811;
        _1896 = _1813;
    }
    else
    {
        uint _1903 = _1513 + 11u;
        uint _1909 = _1513 + 3u;
        float _1915 = cbLight._m0[_1909].x + _356;
        float _1916 = cbLight._m0[_1909].y + _357;
        float _1917 = cbLight._m0[_1909].z + _358;
        float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
        float _1925 = dot(vec3(_276, _277, _278), vec3(cbLight._m0[_1909].xyz));
        float _3730 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1928 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1929 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_1915 * _1921, _1916 * _1921, _1917 * _1921));
        float _3741 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1938 = (exp2(log2(1.0 - (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1942 = (0.5 / ((_1928 + 9.9999999392252902907785028219223e-09) + _1669)) * _1928;
        float _3752 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1944 = (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * 0.31831014156341552734375;
        float _1945 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1892 = (((_1938 * cbLight._m0[_1903].x) * _1944) * _1945) + _1809;
        _1894 = (((_1938 * cbLight._m0[_1903].y) * _1944) * _1945) + _1811;
        _1896 = (((_1938 * cbLight._m0[_1903].z) * _1944) * _1945) + _1813;
    }
    float _2080;
    float _2082;
    float _2084;
    float _2086;
    float _2088;
    float _2090;
    if (_1511.y == 0u)
    {
        float _2020 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2021 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2020;
        float _2022 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2020;
        float _2023 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2020;
        uvec4 _2035 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2036 = _2035.x;
        uint _2047 = uint((float(_2035.y) * floor(float(uint(cbSceneParam._m0[85u].y * _379) / _2036))) + floor(float(uint(cbSceneParam._m0[85u].x * _378) / _2036)));
        float _2057 = (log2(_2023 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2058 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        uint _2061 = uint(isnan(14.0) ? _2058 : (isnan(_2058) ? 14.0 : min(_2058, 14.0)));
        uvec4 _2066 = texelFetch(g_lightClusterGridBuffer, int(((_2061 << 2u) + (_2047 << 6u)) >> 2u));
        uint _2067 = _2066.x;
        uint _2068 = _2035.z;
        float _2197;
        float _2199;
        float _2201;
        float _2203;
        float _2205;
        float _2207;
        if (((((1u << ((_2068 >> 4u) & 15u)) + 4294967295u) & _2067) == 0u) || ((_2068 & 240u) == 0u))
        {
            _2197 = 0.0;
            _2199 = 0.0;
            _2201 = 0.0;
            _2203 = 0.0;
            _2205 = 0.0;
            _2207 = 0.0;
        }
        else
        {
            float _2198;
            float _2200;
            float _2202;
            float _2204;
            float _2206;
            float _2208;
            float _2357 = 0.0;
            float _2358 = 0.0;
            float _2359 = 0.0;
            float _2360 = 0.0;
            float _2361 = 0.0;
            float _2362 = 0.0;
            uint _2363 = 0u;
            uint _2372;
            bool _2373;
            for (;;)
            {
                _2372 = texelFetch(g_lightClassification, int((((_2061 << 5u) + (_2047 << 9u)) + (_2363 << 2u)) >> 2u)).x;
                _2373 = _2372 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2373)
                {
                    frontier_phi_79_pred = _2362;
                    frontier_phi_79_pred_1 = _2361;
                    frontier_phi_79_pred_2 = _2360;
                    frontier_phi_79_pred_3 = _2359;
                    frontier_phi_79_pred_4 = _2358;
                    frontier_phi_79_pred_5 = _2357;
                }
                else
                {
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    uint _2508;
                    _2502 = _2357;
                    _2503 = _2358;
                    _2504 = _2359;
                    _2505 = _2360;
                    _2506 = _2361;
                    _2507 = _2362;
                    _2508 = _2372;
                    float _2429;
                    float _2430;
                    float _2431;
                    float _2432;
                    float _2433;
                    float _2434;
                    for (;;)
                    {
                        uint _2512 = uint(findLSB(_2508)) + (_2363 << 5u);
                        uint _2509 = (_2508 + 4294967295u) & _2508;
                        uint _2514 = _2512 * 48u;
                        vec4 _2528 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2514)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 3u)).x));
                        uint _2534 = (_2512 * 48u) + 4u;
                        vec4 _2547 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2534)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 3u)).x));
                        uint _2553 = (_2512 * 48u) + 8u;
                        vec3 _2564 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2553)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 2u)).x));
                        float _2568 = _2528.x - _2021;
                        float _2569 = _2528.y - _2022;
                        float _2570 = _2528.z - _2023;
                        float _2571 = dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570));
                        float _2574 = inversesqrt(_2571);
                        float _2583 = 1.0 - (_2571 * _2528.w);
                        float _3778 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
                        float _2584 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
                        float _2585 = sqrt(_2571) * _2547.w;
                        float _2588 = 1.39999997615814208984375 / (_2585 + 1.39999997615814208984375);
                        float _2589 = _2588 * _2588;
                        float _2592 = ((1.0 - _2589) * dot(vec3(_399, _402, _405), vec3(_2574 * _2568, _2574 * _2569, _2574 * _2570))) + _2589;
                        float _2595 = _2585 * _2585;
                        float _2599 = ((isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0))) * _2584) / ((_2595 * 0.699999988079071044921875) + 1.0);
                        float _2603 = (-0.0) - _2021;
                        float _2604 = (-0.0) - _2022;
                        float _2605 = (-0.0) - _2023;
                        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
                        float _2613 = dot(vec3(_399, _402, _405), vec3(_2609 * _2603, _2609 * _2604, _2609 * _2605));
                        float _3794 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
                        float _3805 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
                        float _2617 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
                        float _2621 = (0.5 / (((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) + 9.9999999392252902907785028219223e-09) + _2617)) * _2617;
                        float _3816 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
                        float _2630 = (((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 3.1415927410125732421875) / ((_2595 * 2.1991131305694580078125) + 3.141590118408203125)) * _2584;
                        _2432 = (_2599 * _2547.x) + _2505;
                        _2433 = (_2599 * _2547.y) + _2506;
                        _2434 = (_2599 * _2547.z) + _2507;
                        _2429 = (_2630 * _2564.x) + _2502;
                        _2430 = (_2630 * _2564.y) + _2503;
                        _2431 = (_2630 * _2564.z) + _2504;
                        if (_2509 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2502 = _2429;
                            _2503 = _2430;
                            _2504 = _2431;
                            _2505 = _2432;
                            _2506 = _2433;
                            _2507 = _2434;
                            _2508 = _2509;
                        }
                    }
                    frontier_phi_79_pred = _2434;
                    frontier_phi_79_pred_1 = _2433;
                    frontier_phi_79_pred_2 = _2432;
                    frontier_phi_79_pred_3 = _2431;
                    frontier_phi_79_pred_4 = _2430;
                    frontier_phi_79_pred_5 = _2429;
                }
                _2208 = frontier_phi_79_pred;
                _2206 = frontier_phi_79_pred_1;
                _2204 = frontier_phi_79_pred_2;
                _2202 = frontier_phi_79_pred_3;
                _2200 = frontier_phi_79_pred_4;
                _2198 = frontier_phi_79_pred_5;
                uint _2364 = _2363 + 1u;
                if (_2364 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2357 = _2198;
                    _2358 = _2200;
                    _2359 = _2202;
                    _2360 = _2204;
                    _2361 = _2206;
                    _2362 = _2208;
                    _2363 = _2364;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2197 = _2198;
            _2199 = _2200;
            _2201 = _2202;
            _2203 = _2204;
            _2205 = _2206;
            _2207 = _2208;
        }
        uvec4 _2211 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2212 = _2211.z;
        uint _2214 = (_2212 >> 8u) & 15u;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        if (((4294967295u << _2214) & _2067) == 0u)
        {
            _2328 = _2197;
            _2330 = _2199;
            _2332 = _2201;
            _2334 = _2203;
            _2336 = _2205;
            _2338 = _2207;
        }
        else
        {
            float _2353 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
            float frontier_phi_71_72_ladder;
            float frontier_phi_71_72_ladder_1;
            float frontier_phi_71_72_ladder_2;
            float frontier_phi_71_72_ladder_3;
            float frontier_phi_71_72_ladder_4;
            float frontier_phi_71_72_ladder_5;
            if (_2214 < ((_2212 >> 12u) & 15u))
            {
                float _2329;
                float _2331;
                float _2333;
                float _2335;
                float _2337;
                float _2339;
                float _2485 = _2197;
                float _2486 = _2199;
                float _2487 = _2201;
                float _2488 = _2203;
                float _2489 = _2205;
                float _2490 = _2207;
                uint _2491 = _2214;
                uint _2500;
                bool _2501;
                for (;;)
                {
                    _2500 = texelFetch(g_lightClassification, int((((_2061 << 5u) + (_2047 << 9u)) + (_2491 << 2u)) >> 2u)).x;
                    _2501 = _2500 == 0u;
                    float frontier_phi_90_pred;
                    float frontier_phi_90_pred_1;
                    float frontier_phi_90_pred_2;
                    float frontier_phi_90_pred_3;
                    float frontier_phi_90_pred_4;
                    float frontier_phi_90_pred_5;
                    if (_2501)
                    {
                        frontier_phi_90_pred = _2490;
                        frontier_phi_90_pred_1 = _2489;
                        frontier_phi_90_pred_2 = _2488;
                        frontier_phi_90_pred_3 = _2487;
                        frontier_phi_90_pred_4 = _2486;
                        frontier_phi_90_pred_5 = _2485;
                    }
                    else
                    {
                        float _2644;
                        float _2645;
                        float _2646;
                        float _2647;
                        float _2648;
                        float _2649;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2657 = _2485;
                        float _2658 = _2486;
                        float _2659 = _2487;
                        float _2660 = _2488;
                        float _2661 = _2489;
                        float _2662 = _2490;
                        uint _2663 = _2500;
                        uint _2664;
                        vec4 _2689;
                        float _2690;
                        vec4 _2705;
                        vec3 _2717;
                        vec4 _2733;
                        vec4 _2749;
                        float _2796;
                        bool _2797;
                        for (;;)
                        {
                            uint _2674 = ((_2491 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2663));
                            _2664 = (_2663 + 4294967295u) & _2663;
                            uint _2676 = _2674 * 40u;
                            _2689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 3u)).x));
                            _2690 = _2689.w;
                            uint _2692 = (_2674 * 40u) + 4u;
                            _2705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 3u)).x));
                            uint _2707 = (_2674 * 40u) + 8u;
                            _2717 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2707 + 2u)).x));
                            uint _2720 = (_2674 * 40u) + 16u;
                            _2733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 3u)).x));
                            uint _2736 = (_2674 * 40u) + 20u;
                            _2749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 3u)).x));
                            uint _2752 = (_2674 * 40u) + 24u;
                            vec4 _2765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 3u)).x));
                            uint _2771 = (_2674 * 40u) + 28u;
                            vec4 _2784 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 3u)).x));
                            _2796 = fma(_2023, _2784.z, fma(_2022, _2784.y, _2784.x * _2021)) + _2784.w;
                            _2797 = !((fma(_2023, _2765.z, fma(_2022, _2765.y, _2765.x * _2021)) + _2765.w) <= 0.0);
                            float frontier_phi_96_pred;
                            float frontier_phi_96_pred_1;
                            float frontier_phi_96_pred_2;
                            float frontier_phi_96_pred_3;
                            float frontier_phi_96_pred_4;
                            float frontier_phi_96_pred_5;
                            if (_2797)
                            {
                                float _2824 = _2689.x - _2021;
                                float _2825 = _2689.y - _2022;
                                float _2826 = _2689.z - _2023;
                                float _2827 = dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826));
                                float _2830 = inversesqrt(_2827);
                                float _2831 = _2830 * _2824;
                                float _2832 = _2830 * _2825;
                                float _2833 = _2830 * _2826;
                                float _2837 = 1.0 - (_2827 / (_2690 * _2690));
                                float _3827 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                                float _2838 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
                                float _2842 = sqrt(_2827) * _2705.w;
                                float _2844 = 1.39999997615814208984375 / (_2842 + 1.39999997615814208984375);
                                float _2845 = _2844 * _2844;
                                float _2846 = 1.0 - _2845;
                                float _2848 = (_2846 * dot(vec3(_2831, _2832, _2833), vec3(_399, _402, _405))) + _2845;
                                float _2851 = _2842 * _2842;
                                float _2855 = (fma(_2023, _2733.z, fma(_2022, _2733.y, _2733.x * _2021)) + _2733.w) / _2796;
                                float _2856 = (fma(_2023, _2749.z, fma(_2022, _2749.y, _2749.x * _2021)) + _2749.w) / _2796;
                                float _2860 = 1.0 - dot(vec2(_2855, _2856), vec2(_2855, _2856));
                                float _3843 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                                float _2861 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
                                float _2862 = _2861 * (((isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0))) * _2838) / ((_2851 * 0.699999988079071044921875) + 1.0));
                                float _2872 = dot(vec3(_399, _402, _405), vec3((-0.0) - (_2021 * _2353), (-0.0) - (_2022 * _2353), (-0.0) - (_2023 * _2353)));
                                float _3854 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                                float _2880 = (_2846 * dot(vec3(_399, _402, _405), vec3(_2831, _2832, _2833))) + _2845;
                                float _3865 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                                float _2881 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
                                float _2885 = (0.5 / (((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) + 9.9999999392252902907785028219223e-09) + _2881)) * _2881;
                                float _3876 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                                float _2892 = (_2861 * _2838) * (((isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * 3.1415927410125732421875) / ((_2851 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_96_pred = _2862 * _2705.z;
                                frontier_phi_96_pred_1 = _2862 * _2705.y;
                                frontier_phi_96_pred_2 = _2862 * _2705.x;
                                frontier_phi_96_pred_3 = _2892 * _2717.z;
                                frontier_phi_96_pred_4 = _2892 * _2717.y;
                                frontier_phi_96_pred_5 = _2892 * _2717.x;
                            }
                            else
                            {
                                frontier_phi_96_pred = 0.0;
                                frontier_phi_96_pred_1 = 0.0;
                                frontier_phi_96_pred_2 = 0.0;
                                frontier_phi_96_pred_3 = 0.0;
                                frontier_phi_96_pred_4 = 0.0;
                                frontier_phi_96_pred_5 = 0.0;
                            }
                            _2901 = frontier_phi_96_pred;
                            _2900 = frontier_phi_96_pred_1;
                            _2899 = frontier_phi_96_pred_2;
                            _2898 = frontier_phi_96_pred_3;
                            _2897 = frontier_phi_96_pred_4;
                            _2896 = frontier_phi_96_pred_5;
                            _2647 = _2899 + _2660;
                            _2648 = _2900 + _2661;
                            _2649 = _2901 + _2662;
                            _2644 = _2896 + _2657;
                            _2645 = _2897 + _2658;
                            _2646 = _2898 + _2659;
                            if (_2664 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2657 = _2644;
                                _2658 = _2645;
                                _2659 = _2646;
                                _2660 = _2647;
                                _2661 = _2648;
                                _2662 = _2649;
                                _2663 = _2664;
                                continue;
                            }
                        }
                        frontier_phi_90_pred = _2649;
                        frontier_phi_90_pred_1 = _2648;
                        frontier_phi_90_pred_2 = _2647;
                        frontier_phi_90_pred_3 = _2646;
                        frontier_phi_90_pred_4 = _2645;
                        frontier_phi_90_pred_5 = _2644;
                    }
                    _2339 = frontier_phi_90_pred;
                    _2337 = frontier_phi_90_pred_1;
                    _2335 = frontier_phi_90_pred_2;
                    _2333 = frontier_phi_90_pred_3;
                    _2331 = frontier_phi_90_pred_4;
                    _2329 = frontier_phi_90_pred_5;
                    uint _2492 = _2491 + 1u;
                    if (_2492 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2485 = _2329;
                        _2486 = _2331;
                        _2487 = _2333;
                        _2488 = _2335;
                        _2489 = _2337;
                        _2490 = _2339;
                        _2491 = _2492;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_71_72_ladder = _2335;
                frontier_phi_71_72_ladder_1 = _2339;
                frontier_phi_71_72_ladder_2 = _2337;
                frontier_phi_71_72_ladder_3 = _2333;
                frontier_phi_71_72_ladder_4 = _2331;
                frontier_phi_71_72_ladder_5 = _2329;
            }
            else
            {
                frontier_phi_71_72_ladder = _2203;
                frontier_phi_71_72_ladder_1 = _2207;
                frontier_phi_71_72_ladder_2 = _2205;
                frontier_phi_71_72_ladder_3 = _2201;
                frontier_phi_71_72_ladder_4 = _2199;
                frontier_phi_71_72_ladder_5 = _2197;
            }
            _2328 = frontier_phi_71_72_ladder_5;
            _2330 = frontier_phi_71_72_ladder_4;
            _2332 = frontier_phi_71_72_ladder_3;
            _2334 = frontier_phi_71_72_ladder;
            _2336 = frontier_phi_71_72_ladder_2;
            _2338 = frontier_phi_71_72_ladder_1;
        }
        float _2343 = isnan(1.0) ? _443 : (isnan(_443) ? 1.0 : min(_443, 1.0));
        _2080 = (_2343 * _2334) + _1643;
        _2082 = (_2343 * _2336) + _1645;
        _2084 = (_2343 * _2338) + _1647;
        _2086 = ((_2328 * 0.039999999105930328369140625) * _2343) + _1892;
        _2088 = ((_2330 * 0.039999999105930328369140625) * _2343) + _1894;
        _2090 = ((_2332 * 0.039999999105930328369140625) * _2343) + _1896;
    }
    else
    {
        _2080 = _1643;
        _2082 = _1645;
        _2084 = _1647;
        _2086 = _1892;
        _2088 = _1894;
        _2090 = _1896;
    }
    uint _2096 = _419 + uint(cbMatDynParam._m0[0u].w);
    float _2102 = (cbSceneParam._m0[72u].y * _260) * cbInstanceData._m0[_2096].x;
    float _2103 = (cbSceneParam._m0[72u].y * _262) * cbInstanceData._m0[_2096].y;
    float _2104 = (cbSceneParam._m0[72u].y * _263) * cbInstanceData._m0[_2096].z;
    float _3892 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3903 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3914 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _2121 = (((isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_2080 + ((isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))) * _443))) + ((_2086 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + _2102;
    float _2123 = (_2103 + ((_2088 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_2082 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _443)));
    float _2125 = (_2104 + ((_2090 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_2084 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _443)));
    float _2126 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2127 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2128 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2134 = cbMtdParam._m0[2u].x * _2102;
    float _2135 = cbMtdParam._m0[2u].y * _2103;
    float _2136 = cbMtdParam._m0[2u].z * _2104;
    float _3940 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2138 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    uint _2139 = _418 + 6u;
    float _2147 = _378 / cbSceneParam._m0[86u].x;
    float _2148 = _379 / cbSceneParam._m0[86u].y;
    vec4 _2162 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2147, _2148, (log2((isnan(cbSceneParam._m0[77u].w) ? _297 : (isnan(_297) ? cbSceneParam._m0[77u].w : min(_297, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2164 = _2162.x;
    float _2165 = _2162.y;
    float _2166 = _2162.z;
    float _2167 = _2162.w;
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    if (_297 > cbSceneParam._m0[78u].w)
    {
        float _2222 = isnan(_297) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _297 : min(cbSceneParam._m0[80u].w, _297));
        float _2223 = _2222 / _297;
        float _2234 = _2223 * _349;
        float _2235 = _350 * _2223;
        float _2236 = (-0.0) - _2235;
        float _2238 = _2223 * _351;
        float _2240 = (cbSceneParam._m0[77u].w * _2236) / _2222;
        float _2241 = _2240 + cbSceneParam._m0[79u].w;
        float _2242 = cbSceneParam._m0[79u].w - _2235;
        float _2248 = sqrt(((_2234 * _2234) + (_2235 * _2235)) + (_2238 * _2238));
        float _2251 = (1.0 - (cbSceneParam._m0[77u].w / _2222)) * _2248;
        float _2256 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2258 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2442;
        if (abs((_2236 - _2240) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2442 = ((((_2241 > 0.0) ? exp2(_2256 * _2241) : (2.0 - exp2(_2258 * _2241))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2251;
        }
        else
        {
            float _2386 = 1.0 / cbSceneParam._m0[80u].x;
            float _2387 = isnan(_2242) ? _2241 : (isnan(_2241) ? _2242 : max(_2241, _2242));
            float _2388 = isnan(_2242) ? _2241 : (isnan(_2241) ? _2242 : min(_2241, _2242));
            float _2397 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : min(_2387, 0.0));
            float _2398 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : min(_2388, 0.0));
            _2442 = ((abs(_2248 / _2236) * cbSceneParam._m0[80u].y) * ((((_2397 - _2398) * 2.0) - ((exp2(_2256 * (isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0)))) - exp2(_2256 * (isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0))))) * _2386)) - ((exp2(_2258 * _2397) - exp2(_2258 * _2398)) * _2386))) + (_2251 * cbSceneParam._m0[80u].z);
        }
        vec4 _2444 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2147, _2148, 1.0), 0.0);
        float _2453 = exp2((_2442 * (-1.44269502162933349609375)) * (1.0 - _2444.w));
        float _2454 = log2(_2453);
        float _2470 = log2(_2167);
        _2260 = (exp2(_2470 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2454 * cbSceneParam._m0[78u].x)) * _2444.x) / cbSceneParam._m0[78u].x)) + _2164;
        _2262 = (exp2(_2470 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2454 * cbSceneParam._m0[78u].y)) * _2444.y) / cbSceneParam._m0[78u].y)) + _2165;
        _2264 = (exp2(_2470 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2454 * cbSceneParam._m0[78u].z)) * _2444.z) / cbSceneParam._m0[78u].z)) + _2166;
        _2266 = _2453 * _2167;
    }
    else
    {
        _2260 = _2164;
        _2262 = _2165;
        _2264 = _2166;
        _2266 = _2167;
    }
    bool _2480;
    vec4 _2275;
    vec4 _2298;
    float _2300;
    float _2304;
    float _2305;
    float _2306;
    float _2309;
    float _2312;
    float _2315;
    float _2316;
    bool _2327;
    for (;;)
    {
        _2275 = cbMatDynParam._m0[0u];
        float _2277 = roundEven(_2275.y);
        bool _2278 = _2277 == 3.0;
        float _2280 = log2(_2266);
        float _2284 = exp2(_2280 * cbSceneParam._m0[78u].x);
        float _2285 = exp2(_2280 * cbSceneParam._m0[78u].y);
        float _2286 = exp2(_2280 * cbSceneParam._m0[78u].z);
        float _2287 = _2284 * _2126;
        float _2288 = _2285 * _2127;
        float _2289 = _2286 * _2128;
        float _2296 = _365 + (-0.5);
        _2298 = cbMtdParam._m0[1u];
        _2300 = _2298.y * _2296;
        float _2303 = (_2277 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2304 = _2303 * (_2278 ? _2287 : (_2287 + (cbSceneParam._m0[72u].w * _2260)));
        _2305 = _2303 * (_2278 ? _2288 : (_2288 + (cbSceneParam._m0[72u].w * _2262)));
        _2306 = _2303 * (_2278 ? _2289 : (_2289 + (cbSceneParam._m0[72u].w * _2264)));
        _2309 = ((_2134 * _2138) * _2284) * _2303;
        _2312 = ((_2135 * _2138) * _2285) * _2303;
        _2315 = ((_2136 * _2138) * _2286) * _2303;
        _2316 = _2296 * 0.999000012874603271484375;
        _2327 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2327)
        {
            if ((cbInstanceData._m0[_418 + 7u].x + _2316) < 0.5)
            {
                _2480 = true;
                break;
            }
        }
        uint _2421 = _419 + uint(_2275.w);
        if ((cbInstanceData._m0[_2421].w < 1.0) && ((cbInstanceData._m0[_2421].w + _2316) < 0.5))
        {
            _2480 = true;
            break;
        }
        if ((_2300 + 1.0) < _2298.x)
        {
            _2480 = true;
            break;
        }
        _2480 = false;
        break;
    }
    float _2635;
    if (_2480)
    {
        discard_state = true;
        _2635 = 0.0;
    }
    else
    {
        _2635 = cbInstanceData._m0[_2139].w;
    }
    SV_Target.x = _2304;
    SV_Target.y = _2305;
    SV_Target.z = _2306;
    SV_Target.w = _2635;
    SV_Target_1.x = _2309;
    SV_Target_1.y = _2312;
    SV_Target_1.z = _2315;
    SV_Target_1.w = cbInstanceData._m0[_2139].w;
    discard_exit();
}


