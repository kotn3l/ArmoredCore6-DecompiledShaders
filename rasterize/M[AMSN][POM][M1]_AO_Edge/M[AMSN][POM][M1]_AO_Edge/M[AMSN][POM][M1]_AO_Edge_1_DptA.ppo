#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 5) in vec2 TEXCOORD_4;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    float _118 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _119 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _120 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _125 = inversesqrt(dot(vec3(_118, _119, _120), vec3(_118, _119, _120)));
    float _132 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _133 = _132 * NORMAL.x;
    float _134 = _132 * NORMAL.y;
    float _135 = _132 * NORMAL.z;
    float _139 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _147;
    float _148;
    float _149;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _147 = (-0.0) - _133;
        _148 = (-0.0) - _134;
        _149 = (-0.0) - _135;
    }
    else
    {
        _147 = _133;
        _148 = _134;
        _149 = _135;
    }
    float _193 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _203 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _193);
    float _204 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _193);
    float _205 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _193);
    float _209 = dot(vec3(_203, _204, _205), vec3(_125 * _118, _125 * _119, _125 * _120));
    float _212 = dot(vec3(_203, _204, _205), vec3(_139 * TANGENT.x, _139 * TANGENT.y, _139 * TANGENT.z));
    float _215 = dot(vec3(_203, _204, _205), vec3(_147, _148, _149));
    float _221 = inversesqrt(dot(vec3(_209, _212, _215), vec3(_209, _212, _215)));
    vec4 _235 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _245 = dot(vec4(_235), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    vec4 _266 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((((cbMtdParam._m0[10u].y * _209) * _221) * _245) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((((_212 * cbMtdParam._m0[10u].y) * _221) * _245) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _266.w;
    uint _270 = uint(roundEven(NORMAL.w));
    vec4 _275 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _277 = _275.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _309 = sqrt(((_203 * _203) + (_204 * _204)) + (_205 * _205));
        float _316 = (cbMatDynParam._m0[5u].x * _309) + cbMatDynParam._m0[5u].y;
        float _388 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
        float _317 = isnan(1.0) ? _388 : (isnan(_388) ? 1.0 : min(_388, 1.0));
        float _321 = (cbMatDynParam._m0[5u].z * _309) + cbMatDynParam._m0[5u].w;
        float _399 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _399 : (isnan(_399) ? 1.0 : min(_399, 1.0))) - _317)) + _317) < ((_277 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _358;
    vec4 _287;
    float _289;
    float _290;
    bool _301;
    uint _302;
    for (;;)
    {
        float _285 = _277 + (-0.5);
        _287 = cbMtdParam._m0[1u];
        _289 = _287.y * _285;
        _290 = _285 * 0.999000012874603271484375;
        _301 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        _302 = _270 * 13u;
        if (_301)
        {
            if ((cbInstanceData._m0[_302 + 7u].x + _290) < 0.5)
            {
                _358 = true;
                break;
            }
        }
        uint _347 = (_302 + 9u) + uint(cbMatDynParam._m0[0u].w);
        if ((cbInstanceData._m0[_347].w < 1.0) && ((cbInstanceData._m0[_347].w + _290) < 0.5))
        {
            _358 = true;
            break;
        }
        if ((_289 + _268) < _287.x)
        {
            _358 = true;
            break;
        }
        _358 = false;
        break;
    }
    if (_358)
    {
        discard_state = true;
    }
    discard_exit();
}


