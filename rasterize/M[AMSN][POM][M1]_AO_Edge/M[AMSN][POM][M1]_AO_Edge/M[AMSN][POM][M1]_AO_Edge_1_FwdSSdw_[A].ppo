#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _915;
float _3309;
float _3310;
float _3311;
float _3312;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _282 = dot(vec3(_271, _272, _273), vec3(_194, _195, _196));
    float _285 = dot(vec3(_271, _272, _273), vec3(_208, _209, _210));
    float _288 = dot(vec3(_271, _272, _273), vec3(_215, _216, _217));
    float _294 = inversesqrt(dot(vec3(_282, _285, _288), vec3(_282, _285, _288)));
    vec4 _307 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _318 = dot(vec4(_307), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _326 = (((cbMtdParam._m0[10u].y * _282) * _294) * _318) + TEXCOORD.x;
    float _327 = (((_285 * cbMtdParam._m0[10u].y) * _294) * _318) + TEXCOORD.y;
    vec4 _339 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_326 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_327 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _344 = _339.w;
    float _345 = _339.x * cbMtdParam._m0[9u].x;
    float _346 = _339.y * cbMtdParam._m0[9u].y;
    float _347 = _339.z * cbMtdParam._m0[9u].z;
    vec4 _359 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _326) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _327) + cbTextureTilingScale._m0[3u].w));
    float _363 = _359.z;
    float _368 = (_359.x * 2.0) + (-1.0);
    float _370 = (_359.y * 2.0) + (-1.0);
    float _371 = dot(vec2(_368, _370), vec2(_368, _370));
    float _3321 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _376 = sqrt(1.0 - (isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))));
    float _379 = fma(_376, _215, fma(_370, _208, _368 * _194));
    float _382 = fma(_376, _216, fma(_370, _209, _368 * _195));
    float _385 = fma(_376, _217, fma(_370, _210, _368 * _196));
    float _389 = inversesqrt(dot(vec3(_379, _382, _385), vec3(_379, _382, _385)));
    float _390 = _389 * _379;
    float _391 = _389 * _382;
    float _392 = _389 * _385;
    float _394 = cbMtdParam._m0[10u].x + _359.w;
    float _398 = inversesqrt(dot(vec3(_390, _391, _392), vec3(_390, _391, _392)));
    float _399 = _398 * _390;
    float _400 = _398 * _391;
    float _401 = _398 * _392;
    float _3332 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _402 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
    float _3343 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3354 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3365 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3376 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _422 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _426 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _427 = _271 * _426;
    float _428 = _272 * _426;
    float _429 = _273 * _426;
    vec4 _434 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _436 = _434.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _595 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _601 = (cbMatDynParam._m0[5u].x * _595) + cbMatDynParam._m0[5u].y;
        float _3387 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _602 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _606 = (cbMatDynParam._m0[5u].z * _595) + cbMatDynParam._m0[5u].w;
        float _3398 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) - _602)) + _602) < ((_436 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _448 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _449 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _469 = fma(_401, cbSceneParam._m0[5u].z, fma(_400, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _399));
    float _472 = fma(_401, cbSceneParam._m0[6u].z, fma(_400, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _399));
    float _475 = fma(_401, cbSceneParam._m0[7u].z, fma(_400, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _399));
    uint _488 = uint(roundEven(NORMAL.w)) * 13u;
    uint _490 = _488 + 9u;
    uint _491 = _490 + uint(cbMatDynParam._m0[0u].w);
    float _497 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0)))) * cbInstanceData._m0[_491].x;
    float _498 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0)))) * cbInstanceData._m0[_491].y;
    float _499 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0)))) * cbInstanceData._m0[_491].z;
    float _3409 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _500 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _3420 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _501 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _3431 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    vec4 _511 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _448, cbSceneParam._m0[86u].y * _449));
    float _515 = ((isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))) * TEXCOORD.z) * _511.x;
    float _516 = dot(vec3(_399, _400, _401), vec3(_427, _428, _429));
    float _519 = _516 * 2.0;
    float _523 = (_519 * _399) - _427;
    float _524 = (_519 * _400) - _428;
    float _525 = (_519 * _401) - _429;
    float _529 = abs(dot(vec3(_427, _428, _429), vec3(_399, _400, _401)));
    float _3442 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _531 = sqrt(_402);
    float _544 = exp2((_531 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_531 * 3.0));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _914;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _640 = fma(_584, cbModelParam._m0[26u].z, fma(_580, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _576));
        float _644 = fma(_584, cbModelParam._m0[27u].z, fma(_580, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _576));
        float _648 = fma(_584, cbModelParam._m0[28u].z, fma(_580, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _576));
        float _672 = _576 + _399;
        float _673 = _580 + _400;
        float _674 = _584 + _401;
        float _684 = fma(_674, cbModelParam._m0[26u].z, fma(_673, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _672)) - _640;
        float _685 = fma(_674, cbModelParam._m0[27u].z, fma(_673, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _672)) - _644;
        float _686 = fma(_674, cbModelParam._m0[28u].z, fma(_673, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _672)) - _648;
        float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
        float _703 = ((_690 * _684) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_640 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _704 = ((_690 * _685) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_644 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _705 = ((_690 * _686) / cbModelParam._m0[34u].z) + ((((((_648 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        float _742 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_708.x + (-0.5));
        float _744 = _742 * (_708.y + (-0.5));
        float _745 = _742 * (_708.z + (-0.5));
        float _752 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_715.x + (-0.5));
        float _754 = _752 * (_715.y + (-0.5));
        float _755 = _752 * (_715.z + (-0.5));
        float _762 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_722.x + (-0.5));
        float _764 = _762 * (_722.y + (-0.5));
        float _765 = _762 * (_722.z + (-0.5));
        float _772 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _773 = _772 * (_729.x + (-0.5));
        float _774 = _772 * (_729.y + (-0.5));
        float _775 = _772 * (_729.z + (-0.5));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = _743 * 0.5;
        float _780 = _753 * 0.5;
        float _781 = _763 * 0.5;
        float _782 = dot(vec3(_779, _780, _781), vec3(_779, _780, _781));
        float _787 = (_782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_782);
        float _796 = (dot(vec3(_399, _400, _401), vec3(_787 * _779, _787 * _780, _787 * _781)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _806 = sqrt(((_780 * _780) + (_779 * _779)) + (_781 * _781)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3490 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_808 + 1.0))) + _813) * _776;
        float _823 = _744 * 0.5;
        float _824 = _754 * 0.5;
        float _825 = _764 * 0.5;
        float _826 = dot(vec3(_823, _824, _825), vec3(_823, _824, _825));
        float _831 = (_826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_826);
        float _839 = (dot(vec3(_399, _400, _401), vec3(_831 * _823, _831 * _824, _831 * _825)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _848 = sqrt(((_824 * _824) + (_823 * _823)) + (_825 * _825)) / (_777 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _850 = _849 * 2.0;
        float _854 = (1.0 - _849) / (_849 + 1.0);
        float _3523 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _864 = ((((1.0 - _855) * (_850 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_850 + 1.0))) + _855) * _777;
        float _865 = _745 * 0.5;
        float _866 = _755 * 0.5;
        float _867 = _765 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _881 = (dot(vec3(_399, _400, _401), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _890 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _3556 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_892 + 1.0))) + _897) * _778;
        _914 = _745;
        _916 = _744;
        _917 = _743;
        _918 = _755;
        _919 = _754;
        _920 = _753;
        _921 = _765;
        _922 = _764;
        _923 = _763;
        _924 = _778;
        _925 = _777;
        _926 = _776;
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
        _928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)));
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
    }
    else
    {
        _914 = _915;
        _916 = _915;
        _917 = _915;
        _918 = _915;
        _919 = _915;
        _920 = _915;
        _921 = _915;
        _922 = _915;
        _923 = _915;
        _924 = _915;
        _925 = _915;
        _926 = _915;
        _927 = 0.0;
        _928 = 0.0;
        _929 = 0.0;
    }
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _958 = fma(_584, cbModelParam._m0[30u].z, fma(_580, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _576));
        float _962 = fma(_584, cbModelParam._m0[31u].z, fma(_580, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _576));
        float _966 = fma(_584, cbModelParam._m0[32u].z, fma(_580, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _576));
        float _989 = _576 + _399;
        float _990 = _580 + _400;
        float _991 = _584 + _401;
        float _1001 = fma(_991, cbModelParam._m0[30u].z, fma(_990, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _989)) - _958;
        float _1002 = fma(_991, cbModelParam._m0[31u].z, fma(_990, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _989)) - _962;
        float _1003 = fma(_991, cbModelParam._m0[32u].z, fma(_990, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _989)) - _966;
        float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
        float _1020 = ((_1007 * _1001) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_958 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1007 * _1002) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_962 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1007 * _1003) / cbModelParam._m0[35u].z) + ((((((_966 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        float _1057 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1024.x + (-0.5));
        float _1059 = _1057 * (_1024.y + (-0.5));
        float _1060 = _1057 * (_1024.z + (-0.5));
        float _1067 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1031.x + (-0.5));
        float _1069 = _1067 * (_1031.y + (-0.5));
        float _1070 = _1067 * (_1031.z + (-0.5));
        float _1077 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1038.x + (-0.5));
        float _1079 = _1077 * (_1038.y + (-0.5));
        float _1080 = _1077 * (_1038.z + (-0.5));
        float _1087 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1045.x + (-0.5));
        float _1089 = _1087 * (_1045.y + (-0.5));
        float _1090 = _1087 * (_1045.z + (-0.5));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1058 * 0.5;
        float _1095 = _1068 * 0.5;
        float _1096 = _1078 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_399, _400, _401), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3619 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1121 + 1.0))) + _1126) * _1091;
        float _1136 = _1059 * 0.5;
        float _1137 = _1069 * 0.5;
        float _1138 = _1079 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_399, _400, _401), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3652 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1163 + 1.0))) + _1168) * _1092;
        float _1178 = _1060 * 0.5;
        float _1179 = _1070 * 0.5;
        float _1180 = _1080 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_399, _400, _401), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3685 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1205 + 1.0))) + _1210) * _1093;
        _1227 = _1060;
        _1228 = _1059;
        _1229 = _1058;
        _1230 = _1070;
        _1231 = _1069;
        _1232 = _1068;
        _1233 = _1080;
        _1234 = _1079;
        _1235 = _1078;
        _1236 = _1093;
        _1237 = _1092;
        _1238 = _1091;
        _1239 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1240 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1241 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
    }
    else
    {
        _1227 = _915;
        _1228 = _915;
        _1229 = _915;
        _1230 = _915;
        _1231 = _915;
        _1232 = _915;
        _1233 = _915;
        _1234 = _915;
        _1235 = _915;
        _1236 = _915;
        _1237 = _915;
        _1238 = _915;
        _1239 = 0.0;
        _1240 = 0.0;
        _1241 = 0.0;
    }
    float _1251 = (cbModelParam._m0[1u].x * (_1239 - _927)) + _927;
    float _1252 = (cbModelParam._m0[1u].x * (_1240 - _928)) + _928;
    float _1253 = (cbModelParam._m0[1u].x * (_1241 - _929)) + _929;
    float _1274 = fma(_1253, cbSceneParam._m0[89u].z, fma(_1252, cbSceneParam._m0[89u].y, _1251 * cbSceneParam._m0[89u].x));
    float _1277 = fma(_1253, cbSceneParam._m0[90u].z, fma(_1252, cbSceneParam._m0[90u].y, _1251 * cbSceneParam._m0[90u].x));
    float _1280 = fma(_1253, cbSceneParam._m0[91u].z, fma(_1252, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1251));
    float _1295 = _523 * 0.5;
    float _1296 = _524 * 0.5;
    float _1297 = _525 * 0.5;
    float _1298 = dot(vec4(_1295, _1296, _1297, 1.0), vec4(_1229, _1232, _1235, _1238));
    float _1301 = dot(vec4(_1295, _1296, _1297, 1.0), vec4(_1228, _1231, _1234, _1237));
    float _1304 = dot(vec4(_1295, _1296, _1297, 1.0), vec4(_1227, _1230, _1233, _1236));
    float _1338;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1311 = dot(vec4(_1295, _1296, _1297, 1.0), vec4(_914, _918, _921, _924));
        float _1315 = dot(vec4(_1295, _1296, _1297, 1.0), vec4(_916, _919, _922, _925));
        float _1319 = dot(vec4(_1295, _1296, _1297, 1.0), vec4(_917, _920, _923, _926));
        float _1326 = dot(vec4(cbModelParam._m0[39u]), vec4(_1295, _1296, _1297, 1.0));
        _1338 = dot(vec3(isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1326) ? 0.0 : (isnan(0.0) ? _1326 : max(0.0, _1326))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1338 = 1.0;
    }
    float _1349;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1340 = dot(vec4(cbModelParam._m0[40u]), vec4(_1295, _1296, _1297, 1.0));
        _1349 = dot(vec3(isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1340) ? 0.0 : (isnan(0.0) ? _1340 : max(0.0, _1340))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1349 = 1.0;
    }
    float _1353 = (_1349 * cbModelParam._m0[1u].x) + (_1338 * (1.0 - cbModelParam._m0[1u].x));
    float _1363 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _402);
    float _1364 = isnan(_1363) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1363 : min(cbModelParam._m0[25u].z, _1363));
    float _1446;
    float _1448;
    float _1450;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1413 = fma(_584, cbModelParam._m0[13u].z, fma(_580, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _576)) + cbModelParam._m0[13u].w;
        float _1417 = fma(_584, cbModelParam._m0[14u].z, fma(_580, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _576)) + cbModelParam._m0[14u].w;
        float _1421 = fma(_584, cbModelParam._m0[15u].z, fma(_580, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _576)) + cbModelParam._m0[15u].w;
        float _1424 = fma(_525, cbModelParam._m0[13u].z, fma(_524, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _523));
        float _1427 = fma(_525, cbModelParam._m0[14u].z, fma(_524, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _523));
        float _1430 = fma(_525, cbModelParam._m0[15u].z, fma(_524, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _523));
        float _1458;
        if (_1424 > 0.0)
        {
            _1458 = abs((1.0 - _1413) / _1424);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1413 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1458 = frontier_phi_19_17_ladder;
        }
        float _1685;
        if (_1427 > 0.0)
        {
            _1685 = abs((1.0 - _1417) / _1427);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1417 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1685 = frontier_phi_28_24_ladder;
        }
        float _1931;
        if (_1430 > 0.0)
        {
            _1931 = abs((1.0 - _1421) / _1430);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1421 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1931 = frontier_phi_40_35_ladder;
        }
        float _1933 = isnan(_1685) ? _1458 : (isnan(_1458) ? _1685 : min(_1458, _1685));
        float _1934 = isnan(_1931) ? _1933 : (isnan(_1933) ? _1931 : min(_1933, _1931));
        float _1938 = (_1934 * _1424) + _1413;
        float _1939 = (_1934 * _1427) + _1417;
        float _1940 = (_1934 * _1430) + _1421;
        float _1941 = _1934 * 9.9999997473787516355514526367188e-05;
        float _1943 = (-1.0) - _1941;
        float _1945 = _1941 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1940 > _1945) || ((_1940 < _1943) || ((_1939 > _1945) || ((_1939 < _1943) || ((_1938 < _1943) || (_1938 > _1945))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2064 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1940, cbModelParam._m0[9u].z, fma(_1939, cbModelParam._m0[9u].y, _1938 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1940, cbModelParam._m0[10u].z, fma(_1939, cbModelParam._m0[10u].y, _1938 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1940, cbModelParam._m0[11u].z, fma(_1939, cbModelParam._m0[11u].y, _1938 * cbModelParam._m0[11u].x))), _1364);
            frontier_phi_18_40_ladder = _2064.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2064.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2064.x * cbModelParam._m0[1u].y;
        }
        _1446 = frontier_phi_18_40_ladder_2;
        _1448 = frontier_phi_18_40_ladder_1;
        _1450 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1434 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_523, _524, _525), _1364);
        _1446 = _1434.x * cbModelParam._m0[1u].y;
        _1448 = _1434.y * cbModelParam._m0[1u].y;
        _1450 = _1434.z * cbModelParam._m0[1u].y;
    }
    float _1454 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _402);
    float _1455 = isnan(_1454) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1454 : min(cbModelParam._m0[25u].w, _1454));
    float _1548;
    float _1550;
    float _1552;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1512 = fma(_584, cbModelParam._m0[21u].z, fma(_580, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _576)) + cbModelParam._m0[21u].w;
        float _1516 = fma(_584, cbModelParam._m0[22u].z, fma(_580, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _576)) + cbModelParam._m0[22u].w;
        float _1520 = fma(_584, cbModelParam._m0[23u].z, fma(_580, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _576)) + cbModelParam._m0[23u].w;
        float _1523 = fma(_525, cbModelParam._m0[21u].z, fma(_524, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _523));
        float _1526 = fma(_525, cbModelParam._m0[22u].z, fma(_524, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _523));
        float _1529 = fma(_525, cbModelParam._m0[23u].z, fma(_524, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _523));
        float _1690;
        if (_1523 > 0.0)
        {
            _1690 = abs((1.0 - _1512) / _1523);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1512 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1690 = frontier_phi_30_26_ladder;
        }
        float _1958;
        if (_1526 > 0.0)
        {
            _1958 = abs((1.0 - _1516) / _1526);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1516 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1958 = frontier_phi_42_37_ladder;
        }
        float _2163;
        if (_1529 > 0.0)
        {
            _2163 = abs((1.0 - _1520) / _1529);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1520 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2163 = frontier_phi_51_48_ladder;
        }
        float _2165 = isnan(_1958) ? _1690 : (isnan(_1690) ? _1958 : min(_1690, _1958));
        float _2166 = isnan(_2163) ? _2165 : (isnan(_2165) ? _2163 : min(_2165, _2163));
        float _2170 = (_2166 * _1523) + _1512;
        float _2171 = (_2166 * _1526) + _1516;
        float _2172 = (_2166 * _1529) + _1520;
        float _2173 = _2166 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2173;
        float _2176 = _2173 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2172 > _2176) || ((_2172 < _2174) || ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 < _2174) || (_2170 > _2176))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2172, cbModelParam._m0[17u].z, fma(_2171, cbModelParam._m0[17u].y, _2170 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2172, cbModelParam._m0[18u].z, fma(_2171, cbModelParam._m0[18u].y, _2170 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2172, cbModelParam._m0[19u].z, fma(_2171, cbModelParam._m0[19u].y, _2170 * cbModelParam._m0[19u].x))), _1455);
            frontier_phi_27_51_ladder = _2370.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2370.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2370.x * cbModelParam._m0[1u].z;
        }
        _1548 = frontier_phi_27_51_ladder_2;
        _1550 = frontier_phi_27_51_ladder_1;
        _1552 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1532 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_523, _524, _525), _1455);
        _1548 = _1532.x * cbModelParam._m0[1u].z;
        _1550 = _1532.y * cbModelParam._m0[1u].z;
        _1552 = _1532.z * cbModelParam._m0[1u].z;
    }
    float _1564 = ((((1.0 - _544) * ((_531 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_544 * _531)) * _515;
    float _1565 = _1564 * ((cbModelParam._m0[1u].w * (_1548 - _1446)) + _1446);
    float _1566 = _1564 * ((cbModelParam._m0[1u].w * (_1550 - _1448)) + _1448);
    float _1567 = _1564 * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1570 = fma(_1567, cbSceneParam._m0[89u].z, fma(_1566, cbSceneParam._m0[89u].y, _1565 * cbSceneParam._m0[89u].x));
    float _1573 = fma(_1567, cbSceneParam._m0[90u].z, fma(_1566, cbSceneParam._m0[90u].y, _1565 * cbSceneParam._m0[90u].x));
    float _1576 = fma(_1567, cbSceneParam._m0[91u].z, fma(_1566, cbSceneParam._m0[91u].y, _1565 * cbSceneParam._m0[91u].x));
    vec4 _1584 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_448, _449));
    float _1586 = _1584.w;
    float _1598 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1586);
    float _1599 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1586);
    float _1600 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1586);
    uvec4 _1604 = floatBitsToUint(cbInstanceData._m0[_488 + 5u]);
    uint _1606 = _1604.x * 14u;
    uint _1607 = _1606 + 13u;
    float _1614 = _515 + (-1.0);
    float _1619 = (cbLight._m0[_1607].x * _1614) + 1.0;
    float _1620 = (cbLight._m0[_1607].y * _1614) + 1.0;
    float _1621 = (cbLight._m0[_1607].z * _1614) + 1.0;
    float _1622 = (cbLight._m0[_1607].w * _1614) + 1.0;
    uint _1623 = _1606 + 5u;
    float _1629 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
    uint _1633 = _1606 + 4u;
    float _1643 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
    uint _1647 = _1606 | 1u;
    float _1658 = dot(vec3(cbLight._m0[_1606].xyz), vec3(_399, _400, _401));
    float _1661 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_399, _400, _401));
    float _3821 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _3832 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1666 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 0.3183098733425140380859375;
    float _1668 = (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * 0.3183098733425140380859375;
    float _1675 = ((cbLight._m0[_1623].x * _1629) * _1668) + (((cbLight._m0[_1633].x * _1598) * _1643) * _1666);
    float _1676 = ((_1629 * cbLight._m0[_1623].y) * _1668) + (((cbLight._m0[_1633].y * _1599) * _1643) * _1666);
    float _1677 = ((_1629 * cbLight._m0[_1623].z) * _1668) + (((cbLight._m0[_1633].z * _1600) * _1643) * _1666);
    uvec4 _1682 = floatBitsToUint(cbLight._m0[_1606 + 12u]);
    bool _1684 = _1682.x == 0u;
    float _1695;
    float _1697;
    float _1699;
    if (_1684)
    {
        _1695 = _1675;
        _1697 = _1676;
        _1699 = _1677;
    }
    else
    {
        uint _1703 = _1606 + 6u;
        float _1719 = (dot(vec3(cbLight._m0[_1606 + 2u].xyz), vec3(_399, _400, _401)) * 0.5) + 0.5;
        float _1720 = _1719 * _1719;
        float _3843 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1722 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _1695 = (((cbLight._m0[_1703].x * 0.3183098733425140380859375) * _1721) * _1722) + _1675;
        _1697 = (((cbLight._m0[_1703].y * 0.3183098733425140380859375) * _1721) * _1722) + _1676;
        _1699 = (((cbLight._m0[_1703].z * 0.3183098733425140380859375) * _1721) * _1722) + _1677;
    }
    bool _1702 = _1682.y == 0u;
    float _1740;
    float _1742;
    float _1744;
    if (_1702)
    {
        _1740 = _1695;
        _1742 = _1697;
        _1744 = _1699;
    }
    else
    {
        uint _1902 = _1606 + 7u;
        float _1918 = (dot(vec3(cbLight._m0[_1606 + 3u].xyz), vec3(_399, _400, _401)) * 0.5) + 0.5;
        float _1919 = _1918 * _1918;
        float _3859 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1921 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
        _1740 = (((cbLight._m0[_1902].x * 0.3183098733425140380859375) * _1920) * _1921) + _1695;
        _1742 = (((cbLight._m0[_1902].y * 0.3183098733425140380859375) * _1920) * _1921) + _1697;
        _1744 = (((cbLight._m0[_1902].z * 0.3183098733425140380859375) * _1920) * _1921) + _1699;
    }
    uint _1747 = _1606 + 8u;
    float _1760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1606].w)) * _402) * 0.949999988079071044921875);
    float _1761 = _1760 * _1760;
    float _1762 = cbLight._m0[_1606].x + _427;
    float _1763 = cbLight._m0[_1606].y + _428;
    float _1764 = cbLight._m0[_1606].z + _429;
    float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
    float _1769 = _1768 * _1762;
    float _1770 = _1768 * _1763;
    float _1771 = _1768 * _1764;
    float _1772 = dot(vec3(_399, _400, _401), vec3(cbLight._m0[_1606].xyz));
    float _3875 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _1776 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _1777 = dot(vec3(_399, _400, _401), vec3(_1769, _1770, _1771));
    float _3897 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _1781 = dot(vec3(cbLight._m0[_1606].xyz), vec3(_1769, _1770, _1771));
    float _3908 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1785 = _1761 * _1761;
    float _1789 = ((_1780 * _1780) * (_1785 + (-1.0))) + 1.0;
    float _1800 = (exp2(log2(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1801 = 1.0 - _1761;
    float _1812 = (0.5 / (((_1776 * ((_1775 * _1801) + _1761)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _1801) + _1761) * _1775))) * _1775;
    float _3919 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1814 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1785 / ((_1789 * _1789) * 3.141590118408203125));
    uint _1828 = _1606 + 9u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1647].w)) * _402) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1647].x + _427;
    float _1842 = cbLight._m0[_1647].y + _428;
    float _1843 = cbLight._m0[_1647].z + _429;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_399, _400, _401), vec3(cbLight._m0[_1647].xyz));
    float _3930 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _1855 = dot(vec3(_399, _400, _401), vec3(_1848, _1849, _1850));
    float _3941 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _1859 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_1848, _1849, _1850));
    float _3952 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1863 = _1840 * _1840;
    float _1867 = ((_1858 * _1858) * (_1863 + (-1.0))) + 1.0;
    float _1876 = (exp2(log2(1.0 - (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1877 = 1.0 - _1840;
    float _1887 = (0.5 / (((_1776 * ((_1854 * _1877) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _1877) + _1840) * _1854))) * _1854;
    float _3963 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1889 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1863 / ((_1867 * _1867) * 3.141590118408203125));
    float _1899 = (((_1876 * cbLight._m0[_1828].x) * _1889) * _1629) + ((((cbLight._m0[_1747].x * _1598) * _1800) * _1814) * _1643);
    float _1900 = (((_1876 * cbLight._m0[_1828].y) * _1889) * _1629) + ((((cbLight._m0[_1747].y * _1599) * _1800) * _1814) * _1643);
    float _1901 = (((_1876 * cbLight._m0[_1828].z) * _1889) * _1629) + ((((cbLight._m0[_1747].z * _1600) * _1800) * _1814) * _1643);
    float _1963;
    float _1965;
    float _1967;
    if (_1684)
    {
        _1963 = _1899;
        _1965 = _1900;
        _1967 = _1901;
    }
    else
    {
        uint _1969 = _1606 + 2u;
        uint _1973 = _1606 + 10u;
        float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _402) * 0.949999988079071044921875);
        float _1988 = _1987 * _1987;
        float _1989 = cbLight._m0[_1969].x + _427;
        float _1990 = cbLight._m0[_1969].y + _428;
        float _1991 = cbLight._m0[_1969].z + _429;
        float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
        float _1996 = _1995 * _1989;
        float _1997 = _1995 * _1990;
        float _1998 = _1995 * _1991;
        float _1999 = dot(vec3(_399, _400, _401), vec3(cbLight._m0[_1969].xyz));
        float _3974 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _2003 = dot(vec3(_399, _400, _401), vec3(_1996, _1997, _1998));
        float _3985 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2006 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2007 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_1996, _1997, _1998));
        float _3996 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2011 = _1988 * _1988;
        float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
        float _2024 = (exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2025 = 1.0 - _1988;
        float _2035 = (0.5 / (((_1776 * ((_2002 * _2025) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _2025) + _1988) * _2002))) * _2002;
        float _4007 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2037 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
        float _2038 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _1963 = (((_2024 * cbLight._m0[_1973].x) * _2037) * _2038) + _1899;
        _1965 = (((_2024 * cbLight._m0[_1973].y) * _2037) * _2038) + _1900;
        _1967 = (((_2024 * cbLight._m0[_1973].z) * _2037) * _2038) + _1901;
    }
    float _2073;
    float _2075;
    float _2077;
    if (_1702)
    {
        _2073 = _1963;
        _2075 = _1965;
        _2077 = _1967;
    }
    else
    {
        uint _2084 = _1606 + 3u;
        uint _2088 = _1606 + 11u;
        float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _402) * 0.949999988079071044921875);
        float _2103 = _2102 * _2102;
        float _2104 = cbLight._m0[_2084].x + _427;
        float _2105 = cbLight._m0[_2084].y + _428;
        float _2106 = cbLight._m0[_2084].z + _429;
        float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
        float _2111 = _2110 * _2104;
        float _2112 = _2110 * _2105;
        float _2113 = _2110 * _2106;
        float _2114 = dot(vec3(_399, _400, _401), vec3(cbLight._m0[_2084].xyz));
        float _4023 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _2118 = dot(vec3(_399, _400, _401), vec3(_2111, _2112, _2113));
        float _4034 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _2122 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2111, _2112, _2113));
        float _4045 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2126 = _2103 * _2103;
        float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
        float _2139 = (exp2(log2(1.0 - (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2140 = 1.0 - _2103;
        float _2150 = (0.5 / (((_1776 * ((_2117 * _2140) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _2140) + _2103) * _2117))) * _2117;
        float _4056 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2152 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
        float _2153 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
        _2073 = (((_2139 * cbLight._m0[_2088].x) * _2152) * _2153) + _1963;
        _2075 = (((_2139 * cbLight._m0[_2088].y) * _2152) * _2153) + _1965;
        _2077 = (((_2139 * cbLight._m0[_2088].z) * _2152) * _2153) + _1967;
    }
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    if (_1604.y == 0u)
    {
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2228;
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2228;
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2228;
        uvec4 _2243 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2244 = _2243.x;
        uint _2255 = uint((float(_2243.y) * floor(float(uint(cbSceneParam._m0[85u].y * _449) / _2244))) + floor(float(uint(cbSceneParam._m0[85u].x * _448) / _2244)));
        float _2265 = (log2(_2231 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2266 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        uint _2269 = uint(isnan(14.0) ? _2266 : (isnan(_2266) ? 14.0 : min(_2266, 14.0)));
        uvec4 _2274 = texelFetch(g_lightClusterGridBuffer, int(((_2269 << 2u) + (_2255 << 6u)) >> 2u));
        uint _2275 = _2274.x;
        uint _2276 = _2243.z;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        if (((((1u << ((_2276 >> 4u) & 15u)) + 4294967295u) & _2275) == 0u) || ((_2276 & 240u) == 0u))
        {
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
        }
        else
        {
            float _2376;
            float _2378;
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            uint _2533 = 0u;
            uint _2542;
            bool _2543;
            for (;;)
            {
                _2542 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2533 << 2u)) >> 2u)).x;
                _2543 = _2542 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2543)
                {
                    frontier_phi_68_pred = _2529;
                    frontier_phi_68_pred_1 = _2532;
                    frontier_phi_68_pred_2 = _2531;
                    frontier_phi_68_pred_3 = _2530;
                    frontier_phi_68_pred_4 = _2528;
                    frontier_phi_68_pred_5 = _2527;
                }
                else
                {
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    uint _2678;
                    _2672 = _2527;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2542;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    for (;;)
                    {
                        uint _2682 = uint(findLSB(_2678)) + (_2533 << 5u);
                        uint _2679 = (_2678 + 4294967295u) & _2678;
                        uint _2684 = _2682 * 48u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 3u)).x));
                        uint _2704 = (_2682 * 48u) + 4u;
                        vec4 _2717 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 3u)).x));
                        uint _2723 = (_2682 * 48u) + 8u;
                        vec3 _2734 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x));
                        float _2738 = _2698.x - _2229;
                        float _2739 = _2698.y - _2230;
                        float _2740 = _2698.z - _2231;
                        float _2741 = dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740));
                        float _2744 = inversesqrt(_2741);
                        float _2745 = _2744 * _2738;
                        float _2746 = _2744 * _2739;
                        float _2747 = _2744 * _2740;
                        float _2748 = dot(vec3(_469, _472, _475), vec3(_2745, _2746, _2747));
                        float _2753 = 1.0 - (_2741 * _2698.w);
                        float _4082 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2754 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2755 = sqrt(_2741) * _2717.w;
                        float _2758 = 1.39999997615814208984375 / (_2755 + 1.39999997615814208984375);
                        float _2759 = _2758 * _2758;
                        float _2762 = ((1.0 - _2759) * _2748) + _2759;
                        float _2765 = _2755 * _2755;
                        float _2769 = ((isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0))) * _2754) / ((_2765 * 0.699999988079071044921875) + 1.0);
                        float _2773 = (-0.0) - _2229;
                        float _2774 = (-0.0) - _2230;
                        float _2775 = (-0.0) - _2231;
                        float _2779 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
                        float _2780 = _2779 * _2773;
                        float _2781 = _2779 * _2774;
                        float _2782 = _2779 * _2775;
                        float _2790 = exp2(log2(1.0 / ((_2765 * 3.5) + 5.0)) * 0.25);
                        float _2791 = 1.0 - _531;
                        float _2798 = sqrt(1.0 - ((1.0 - (_2791 * _2791)) * (1.0 - (_2790 * _2790))));
                        float _2799 = _2798 * _2798;
                        float _2800 = _2799 * _2799;
                        float _2801 = _2780 + _2745;
                        float _2802 = _2781 + _2746;
                        float _2803 = _2782 + _2747;
                        float _2807 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
                        float _2811 = dot(vec3(_469, _472, _475), vec3(_2780, _2781, _2782));
                        float _4098 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2814 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                        float _2815 = dot(vec3(_469, _472, _475), vec3(_2807 * _2801, _2807 * _2802, _2807 * _2803));
                        float _4109 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2818 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                        float _2822 = ((_2818 * _2818) * (_2800 + (-1.0))) + 1.0;
                        float _2823 = _2758 * _2799;
                        float _2824 = _2823 * _2823;
                        float _2827 = ((1.0 - _2824) * _2748) + _2824;
                        float _4120 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2828 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                        float _2829 = 1.0 - _2799;
                        float _2839 = (0.5 / (((_2828 * ((_2814 * _2829) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2828 * _2829) + _2799) * _2814))) * _2828;
                        float _4131 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2850 = (((_2800 * 3.1415927410125732421875) * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) / ((_2822 * _2822) * ((_2765 * 2.1991131305694580078125) + 3.141590118408203125))) * _2754;
                        _2602 = (_2769 * _2717.x) + _2675;
                        _2603 = (_2769 * _2717.y) + _2676;
                        _2604 = (_2769 * _2717.z) + _2677;
                        _2599 = (_2850 * _2734.x) + _2672;
                        _2600 = (_2850 * _2734.y) + _2673;
                        _2601 = (_2850 * _2734.z) + _2674;
                        if (_2679 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2672 = _2599;
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2679;
                        }
                    }
                    frontier_phi_68_pred = _2601;
                    frontier_phi_68_pred_1 = _2604;
                    frontier_phi_68_pred_2 = _2603;
                    frontier_phi_68_pred_3 = _2602;
                    frontier_phi_68_pred_4 = _2600;
                    frontier_phi_68_pred_5 = _2599;
                }
                _2380 = frontier_phi_68_pred;
                _2386 = frontier_phi_68_pred_1;
                _2384 = frontier_phi_68_pred_2;
                _2382 = frontier_phi_68_pred_3;
                _2378 = frontier_phi_68_pred_4;
                _2376 = frontier_phi_68_pred_5;
                uint _2534 = _2533 + 1u;
                if (_2534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2527 = _2376;
                    _2528 = _2378;
                    _2529 = _2380;
                    _2530 = _2382;
                    _2531 = _2384;
                    _2532 = _2386;
                    _2533 = _2534;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
        }
        uvec4 _2389 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2390 = _2389.z;
        uint _2392 = (_2390 >> 8u) & 15u;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        if (((4294967295u << _2392) & _2275) == 0u)
        {
            _2495 = _2375;
            _2497 = _2377;
            _2499 = _2379;
            _2501 = _2381;
            _2503 = _2383;
            _2505 = _2385;
        }
        else
        {
            float _2520 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
            float _2521 = _2520 * _2229;
            float _2522 = _2520 * _2230;
            float _2523 = _2520 * _2231;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2392 < ((_2390 >> 12u) & 15u))
            {
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2655 = _2375;
                float _2656 = _2377;
                float _2657 = _2379;
                float _2658 = _2381;
                float _2659 = _2383;
                float _2660 = _2385;
                uint _2661 = _2392;
                uint _2670;
                bool _2671;
                for (;;)
                {
                    _2670 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2661 << 2u)) >> 2u)).x;
                    _2671 = _2670 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2671)
                    {
                        frontier_phi_79_pred = _2660;
                        frontier_phi_79_pred_1 = _2659;
                        frontier_phi_79_pred_2 = _2658;
                        frontier_phi_79_pred_3 = _2657;
                        frontier_phi_79_pred_4 = _2656;
                        frontier_phi_79_pred_5 = _2655;
                    }
                    else
                    {
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _2877 = _2655;
                        float _2878 = _2656;
                        float _2879 = _2657;
                        float _2880 = _2658;
                        float _2881 = _2659;
                        float _2882 = _2660;
                        uint _2883 = _2670;
                        uint _2884;
                        vec4 _2909;
                        float _2910;
                        vec4 _2925;
                        vec3 _2937;
                        vec4 _2953;
                        vec4 _2969;
                        float _3016;
                        bool _3017;
                        for (;;)
                        {
                            uint _2894 = ((_2661 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2883));
                            _2884 = (_2883 + 4294967295u) & _2883;
                            uint _2896 = _2894 * 40u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            _2910 = _2909.w;
                            uint _2912 = (_2894 * 40u) + 4u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2927 = (_2894 * 40u) + 8u;
                            _2937 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x));
                            uint _2940 = (_2894 * 40u) + 16u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2956 = (_2894 * 40u) + 20u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2972 = (_2894 * 40u) + 24u;
                            vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2991 = (_2894 * 40u) + 28u;
                            vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            _3016 = fma(_2231, _3004.z, fma(_2230, _3004.y, _3004.x * _2229)) + _3004.w;
                            _3017 = !((fma(_2231, _2985.z, fma(_2230, _2985.y, _2985.x * _2229)) + _2985.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3017)
                            {
                                float _3044 = _2909.x - _2229;
                                float _3045 = _2909.y - _2230;
                                float _3046 = _2909.z - _2231;
                                float _3047 = dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046));
                                float _3050 = inversesqrt(_3047);
                                float _3051 = _3050 * _3044;
                                float _3052 = _3050 * _3045;
                                float _3053 = _3050 * _3046;
                                float _3057 = 1.0 - (_3047 / (_2910 * _2910));
                                float _4142 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3058 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3062 = sqrt(_3047) * _2925.w;
                                float _3064 = 1.39999997615814208984375 / (_3062 + 1.39999997615814208984375);
                                float _3065 = _3064 * _3064;
                                float _3068 = ((1.0 - _3065) * dot(vec3(_3051, _3052, _3053), vec3(_469, _472, _475))) + _3065;
                                float _3071 = _3062 * _3062;
                                float _3075 = (fma(_2231, _2953.z, fma(_2230, _2953.y, _2953.x * _2229)) + _2953.w) / _3016;
                                float _3076 = (fma(_2231, _2969.z, fma(_2230, _2969.y, _2969.x * _2229)) + _2969.w) / _3016;
                                float _3080 = 1.0 - dot(vec2(_3075, _3076), vec2(_3075, _3076));
                                float _4158 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3081 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3082 = _3081 * (((isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0))) * _3058) / ((_3071 * 0.699999988079071044921875) + 1.0));
                                float _3094 = exp2(log2(1.0 / ((_3071 * 3.5) + 5.0)) * 0.25);
                                float _3095 = 1.0 - _531;
                                float _3102 = sqrt(1.0 - ((1.0 - (_3095 * _3095)) * (1.0 - (_3094 * _3094))));
                                float _3103 = _3102 * _3102;
                                float _3104 = _3103 * _3103;
                                float _3105 = _3051 - _2521;
                                float _3106 = _3052 - _2522;
                                float _3107 = _3053 - _2523;
                                float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
                                float _3115 = dot(vec3(_469, _472, _475), vec3((-0.0) - _2521, (-0.0) - _2522, (-0.0) - _2523));
                                float _4169 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3118 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                                float _3119 = dot(vec3(_469, _472, _475), vec3(_3111 * _3105, _3111 * _3106, _3111 * _3107));
                                float _4180 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3122 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                                float _3126 = ((_3122 * _3122) * (_3104 + (-1.0))) + 1.0;
                                float _3127 = _3064 * _3103;
                                float _3128 = _3127 * _3127;
                                float _3134 = ((1.0 - _3128) * dot(vec3(_469, _472, _475), vec3(_3051, _3052, _3053))) + _3128;
                                float _4191 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                                float _3136 = 1.0 - _3103;
                                float _3146 = (0.5 / (((_3135 * ((_3118 * _3136) + _3103)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3136) + _3103) * _3118))) * _3135;
                                float _4202 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3156 = (_3081 * _3058) * (((_3104 * 3.1415927410125732421875) * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) / ((_3126 * _3126) * ((_3071 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3082 * _2925.z;
                                frontier_phi_85_pred_1 = _3082 * _2925.y;
                                frontier_phi_85_pred_2 = _3082 * _2925.x;
                                frontier_phi_85_pred_3 = _3156 * _2937.z;
                                frontier_phi_85_pred_4 = _3156 * _2937.y;
                                frontier_phi_85_pred_5 = _3156 * _2937.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3165 = frontier_phi_85_pred;
                            _3164 = frontier_phi_85_pred_1;
                            _3163 = frontier_phi_85_pred_2;
                            _3162 = frontier_phi_85_pred_3;
                            _3161 = frontier_phi_85_pred_4;
                            _3160 = frontier_phi_85_pred_5;
                            _2867 = _3163 + _2880;
                            _2868 = _3164 + _2881;
                            _2869 = _3165 + _2882;
                            _2864 = _3160 + _2877;
                            _2865 = _3161 + _2878;
                            _2866 = _3162 + _2879;
                            if (_2884 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2884;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2869;
                        frontier_phi_79_pred_1 = _2868;
                        frontier_phi_79_pred_2 = _2867;
                        frontier_phi_79_pred_3 = _2866;
                        frontier_phi_79_pred_4 = _2865;
                        frontier_phi_79_pred_5 = _2864;
                    }
                    _2506 = frontier_phi_79_pred;
                    _2504 = frontier_phi_79_pred_1;
                    _2502 = frontier_phi_79_pred_2;
                    _2500 = frontier_phi_79_pred_3;
                    _2498 = frontier_phi_79_pred_4;
                    _2496 = frontier_phi_79_pred_5;
                    uint _2662 = _2661 + 1u;
                    if (_2662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2655 = _2496;
                        _2656 = _2498;
                        _2657 = _2500;
                        _2658 = _2502;
                        _2659 = _2504;
                        _2660 = _2506;
                        _2661 = _2662;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2502;
                frontier_phi_60_61_ladder_1 = _2506;
                frontier_phi_60_61_ladder_2 = _2504;
                frontier_phi_60_61_ladder_3 = _2500;
                frontier_phi_60_61_ladder_4 = _2498;
                frontier_phi_60_61_ladder_5 = _2496;
            }
            else
            {
                frontier_phi_60_61_ladder = _2381;
                frontier_phi_60_61_ladder_1 = _2385;
                frontier_phi_60_61_ladder_2 = _2383;
                frontier_phi_60_61_ladder_3 = _2379;
                frontier_phi_60_61_ladder_4 = _2377;
                frontier_phi_60_61_ladder_5 = _2375;
            }
            _2495 = frontier_phi_60_61_ladder_5;
            _2497 = frontier_phi_60_61_ladder_4;
            _2499 = frontier_phi_60_61_ladder_3;
            _2501 = frontier_phi_60_61_ladder;
            _2503 = frontier_phi_60_61_ladder_2;
            _2505 = frontier_phi_60_61_ladder_1;
        }
        float _2510 = isnan(1.0) ? _515 : (isnan(_515) ? 1.0 : min(_515, 1.0));
        _2287 = (_2510 * _2501) + _1740;
        _2289 = (_2510 * _2503) + _1742;
        _2291 = (_2510 * _2505) + _1744;
        _2293 = ((_2495 * 0.039999999105930328369140625) * _2510) + _2073;
        _2295 = ((_2497 * 0.039999999105930328369140625) * _2510) + _2075;
        _2297 = ((_2499 * 0.039999999105930328369140625) * _2510) + _2077;
    }
    else
    {
        _2287 = _1740;
        _2289 = _1742;
        _2291 = _1744;
        _2293 = _2073;
        _2295 = _2075;
        _2297 = _2077;
    }
    float _4218 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _4229 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _4240 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _2314 = ((isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2287 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _515))) + ((_2293 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1353)) * cbPerFrame._m0[3u].x);
    float _2315 = ((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2289 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _515))) + ((_2295 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1353)) * cbPerFrame._m0[3u].x);
    float _2316 = ((isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2291 + ((isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))) * _515))) + ((_2297 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _1353)) * cbPerFrame._m0[3u].x);
    uint _2317 = _488 + 6u;
    float _2325 = _448 / cbSceneParam._m0[86u].x;
    float _2326 = _449 / cbSceneParam._m0[86u].y;
    vec4 _2340 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, (log2((isnan(cbSceneParam._m0[77u].w) ? _422 : (isnan(_422) ? cbSceneParam._m0[77u].w : min(_422, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2342 = _2340.x;
    float _2343 = _2340.y;
    float _2344 = _2340.z;
    float _2345 = _2340.w;
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    if (_422 > cbSceneParam._m0[78u].w)
    {
        float _2400 = isnan(_422) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _422 : min(cbSceneParam._m0[80u].w, _422));
        float _2401 = _2400 / _422;
        float _2412 = _2401 * _271;
        float _2413 = _272 * _2401;
        float _2414 = (-0.0) - _2413;
        float _2415 = _2401 * _273;
        float _2417 = (cbSceneParam._m0[77u].w * _2414) / _2400;
        float _2418 = _2417 + cbSceneParam._m0[79u].w;
        float _2419 = cbSceneParam._m0[79u].w - _2413;
        float _2425 = sqrt(((_2412 * _2412) + (_2413 * _2413)) + (_2415 * _2415));
        float _2428 = (1.0 - (cbSceneParam._m0[77u].w / _2400)) * _2425;
        float _2433 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2435 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2612;
        if (abs((_2414 - _2417) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2612 = ((((_2418 > 0.0) ? exp2(_2433 * _2418) : (2.0 - exp2(_2435 * _2418))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2428;
        }
        else
        {
            float _2556 = 1.0 / cbSceneParam._m0[80u].x;
            float _2557 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : max(_2418, _2419));
            float _2558 = isnan(_2419) ? _2418 : (isnan(_2418) ? _2419 : min(_2418, _2419));
            float _2567 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : min(_2557, 0.0));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            _2612 = ((abs(_2425 / _2414) * cbSceneParam._m0[80u].y) * ((((_2567 - _2568) * 2.0) - ((exp2(_2433 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0)))) - exp2(_2433 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))))) * _2556)) - ((exp2(_2435 * _2567) - exp2(_2435 * _2568)) * _2556))) + (_2428 * cbSceneParam._m0[80u].z);
        }
        vec4 _2614 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, 1.0), 0.0);
        float _2623 = exp2((_2612 * (-1.44269502162933349609375)) * (1.0 - _2614.w));
        float _2624 = log2(_2623);
        float _2640 = log2(_2345);
        _2437 = (exp2(_2640 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].x)) * _2614.x) / cbSceneParam._m0[78u].x)) + _2342;
        _2439 = (exp2(_2640 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].y)) * _2614.y) / cbSceneParam._m0[78u].y)) + _2343;
        _2441 = (exp2(_2640 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].z)) * _2614.z) / cbSceneParam._m0[78u].z)) + _2344;
        _2443 = _2623 * _2345;
    }
    else
    {
        _2437 = _2342;
        _2439 = _2343;
        _2441 = _2344;
        _2443 = _2345;
    }
    bool _2650;
    vec4 _2453;
    vec4 _2475;
    float _2477;
    float _2481;
    float _2482;
    float _2483;
    float _2484;
    bool _2494;
    for (;;)
    {
        _2453 = cbMatDynParam._m0[0u];
        float _2455 = roundEven(_2453.y);
        bool _2456 = _2455 == 3.0;
        float _2457 = log2(_2443);
        float _2464 = exp2(_2457 * cbSceneParam._m0[78u].x) * _2314;
        float _2465 = exp2(_2457 * cbSceneParam._m0[78u].y) * _2315;
        float _2466 = exp2(_2457 * cbSceneParam._m0[78u].z) * _2316;
        float _2473 = _436 + (-0.5);
        _2475 = cbMtdParam._m0[1u];
        _2477 = _2475.y * _2473;
        float _2480 = (_2455 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2481 = _2480 * (_2456 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2437)));
        _2482 = _2480 * (_2456 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2439)));
        _2483 = _2480 * (_2456 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2441)));
        _2484 = _2473 * 0.999000012874603271484375;
        _2494 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2494)
        {
            if ((cbInstanceData._m0[_488 + 7u].x + _2484) < 0.5)
            {
                _2650 = true;
                break;
            }
        }
        uint _2591 = _490 + uint(_2453.w);
        if ((cbInstanceData._m0[_2591].w < 1.0) && ((cbInstanceData._m0[_2591].w + _2484) < 0.5))
        {
            _2650 = true;
            break;
        }
        if ((_2477 + _344) < _2475.x)
        {
            _2650 = true;
            break;
        }
        _2650 = false;
        break;
    }
    float _2855;
    if (_2650)
    {
        discard_state = true;
        _2855 = 0.0;
    }
    else
    {
        _2855 = cbInstanceData._m0[_2317].w;
    }
    SV_Target.x = _2481;
    SV_Target.y = _2482;
    SV_Target.z = _2483;
    SV_Target.w = _2855;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2317].w;
    discard_exit();
}


