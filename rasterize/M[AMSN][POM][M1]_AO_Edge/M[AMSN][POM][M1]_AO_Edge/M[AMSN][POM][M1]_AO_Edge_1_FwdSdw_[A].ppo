#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _917;
float _3570;
float _3571;
float _3572;
float _3573;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    float _284 = dot(vec3(_273, _274, _275), vec3(_196, _197, _198));
    float _287 = dot(vec3(_273, _274, _275), vec3(_210, _211, _212));
    float _290 = dot(vec3(_273, _274, _275), vec3(_217, _218, _219));
    float _296 = inversesqrt(dot(vec3(_284, _287, _290), vec3(_284, _287, _290)));
    vec4 _309 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _320 = dot(vec4(_309), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _328 = (((cbMtdParam._m0[10u].y * _284) * _296) * _320) + TEXCOORD.x;
    float _329 = (((_287 * cbMtdParam._m0[10u].y) * _296) * _320) + TEXCOORD.y;
    vec4 _341 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_328 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_329 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _346 = _341.w;
    float _347 = _341.x * cbMtdParam._m0[9u].x;
    float _348 = _341.y * cbMtdParam._m0[9u].y;
    float _349 = _341.z * cbMtdParam._m0[9u].z;
    vec4 _361 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _328) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _329) + cbTextureTilingScale._m0[3u].w));
    float _365 = _361.z;
    float _370 = (_361.x * 2.0) + (-1.0);
    float _372 = (_361.y * 2.0) + (-1.0);
    float _373 = dot(vec2(_370, _372), vec2(_370, _372));
    float _3582 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _378 = sqrt(1.0 - (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))));
    float _381 = fma(_378, _217, fma(_372, _210, _370 * _196));
    float _384 = fma(_378, _218, fma(_372, _211, _370 * _197));
    float _387 = fma(_378, _219, fma(_372, _212, _370 * _198));
    float _391 = inversesqrt(dot(vec3(_381, _384, _387), vec3(_381, _384, _387)));
    float _392 = _391 * _381;
    float _393 = _391 * _384;
    float _394 = _391 * _387;
    float _396 = cbMtdParam._m0[10u].x + _361.w;
    float _400 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _401 = _400 * _392;
    float _402 = _400 * _393;
    float _403 = _400 * _394;
    float _3593 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _404 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _3604 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _3615 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3626 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3637 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _424 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _428 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _429 = _273 * _428;
    float _430 = _274 * _428;
    float _431 = _275 * _428;
    vec4 _436 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _438 = _436.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _597 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
        float _603 = (cbMatDynParam._m0[5u].x * _597) + cbMatDynParam._m0[5u].y;
        float _3648 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _604 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _608 = (cbMatDynParam._m0[5u].z * _597) + cbMatDynParam._m0[5u].w;
        float _3659 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) - _604)) + _604) < ((_438 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _450 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _451 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _471 = fma(_403, cbSceneParam._m0[5u].z, fma(_402, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _401));
    float _474 = fma(_403, cbSceneParam._m0[6u].z, fma(_402, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _401));
    float _477 = fma(_403, cbSceneParam._m0[7u].z, fma(_402, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _401));
    uint _490 = uint(roundEven(NORMAL.w)) * 13u;
    uint _492 = _490 + 9u;
    uint _493 = _492 + uint(cbMatDynParam._m0[0u].w);
    float _499 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_493].x;
    float _500 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) * cbInstanceData._m0[_493].y;
    float _501 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * cbInstanceData._m0[_493].z;
    float _3670 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _503 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _3692 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _504 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    vec4 _513 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _450, cbSceneParam._m0[86u].y * _451));
    float _517 = ((isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * TEXCOORD.z) * _513.x;
    float _518 = dot(vec3(_401, _402, _403), vec3(_429, _430, _431));
    float _521 = _518 * 2.0;
    float _525 = (_521 * _401) - _429;
    float _526 = (_521 * _402) - _430;
    float _527 = (_521 * _403) - _431;
    float _531 = abs(dot(vec3(_429, _430, _431), vec3(_401, _402, _403)));
    float _3703 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _533 = sqrt(_404);
    float _546 = exp2((_533 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_533 * 3.0));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _916;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _642 = fma(_586, cbModelParam._m0[26u].z, fma(_582, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _578));
        float _646 = fma(_586, cbModelParam._m0[27u].z, fma(_582, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _578));
        float _650 = fma(_586, cbModelParam._m0[28u].z, fma(_582, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _578));
        float _674 = _578 + _401;
        float _675 = _582 + _402;
        float _676 = _586 + _403;
        float _686 = fma(_676, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _674)) - _642;
        float _687 = fma(_676, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _674)) - _646;
        float _688 = fma(_676, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _674)) - _650;
        float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
        float _705 = ((_692 * _686) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_642 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _706 = ((_692 * _687) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_646 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _707 = ((_692 * _688) / cbModelParam._m0[34u].z) + ((((((_650 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        float _744 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_710.x + (-0.5));
        float _746 = _744 * (_710.y + (-0.5));
        float _747 = _744 * (_710.z + (-0.5));
        float _754 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_717.x + (-0.5));
        float _756 = _754 * (_717.y + (-0.5));
        float _757 = _754 * (_717.z + (-0.5));
        float _764 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_724.x + (-0.5));
        float _766 = _764 * (_724.y + (-0.5));
        float _767 = _764 * (_724.z + (-0.5));
        float _774 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_731.x + (-0.5));
        float _776 = _774 * (_731.y + (-0.5));
        float _777 = _774 * (_731.z + (-0.5));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _781 = _745 * 0.5;
        float _782 = _755 * 0.5;
        float _783 = _765 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _798 = (dot(vec3(_401, _402, _403), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _808 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3751 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_810 + 1.0))) + _815) * _778;
        float _825 = _746 * 0.5;
        float _826 = _756 * 0.5;
        float _827 = _766 * 0.5;
        float _828 = dot(vec3(_825, _826, _827), vec3(_825, _826, _827));
        float _833 = (_828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_828);
        float _841 = (dot(vec3(_401, _402, _403), vec3(_833 * _825, _833 * _826, _833 * _827)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _850 = sqrt(((_826 * _826) + (_825 * _825)) + (_827 * _827)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _852 = _851 * 2.0;
        float _856 = (1.0 - _851) / (_851 + 1.0);
        float _3784 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _866 = ((((1.0 - _857) * (_852 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_852 + 1.0))) + _857) * _779;
        float _867 = _747 * 0.5;
        float _868 = _757 * 0.5;
        float _869 = _767 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _883 = (dot(vec3(_401, _402, _403), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _892 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_780 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3817 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_894 + 1.0))) + _899) * _780;
        _916 = _747;
        _918 = _746;
        _919 = _745;
        _920 = _757;
        _921 = _756;
        _922 = _755;
        _923 = _767;
        _924 = _766;
        _925 = _765;
        _926 = _780;
        _927 = _779;
        _928 = _778;
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)));
        _931 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
    }
    else
    {
        _916 = _917;
        _918 = _917;
        _919 = _917;
        _920 = _917;
        _921 = _917;
        _922 = _917;
        _923 = _917;
        _924 = _917;
        _925 = _917;
        _926 = _917;
        _927 = _917;
        _928 = _917;
        _929 = 0.0;
        _930 = 0.0;
        _931 = 0.0;
    }
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _960 = fma(_586, cbModelParam._m0[30u].z, fma(_582, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _578));
        float _964 = fma(_586, cbModelParam._m0[31u].z, fma(_582, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _578));
        float _968 = fma(_586, cbModelParam._m0[32u].z, fma(_582, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _578));
        float _991 = _578 + _401;
        float _992 = _582 + _402;
        float _993 = _586 + _403;
        float _1003 = fma(_993, cbModelParam._m0[30u].z, fma(_992, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _991)) - _960;
        float _1004 = fma(_993, cbModelParam._m0[31u].z, fma(_992, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _991)) - _964;
        float _1005 = fma(_993, cbModelParam._m0[32u].z, fma(_992, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _991)) - _968;
        float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
        float _1022 = ((_1009 * _1003) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_960 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1009 * _1004) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_964 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1009 * _1005) / cbModelParam._m0[35u].z) + ((((((_968 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        float _1059 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1026.x + (-0.5));
        float _1061 = _1059 * (_1026.y + (-0.5));
        float _1062 = _1059 * (_1026.z + (-0.5));
        float _1069 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1033.x + (-0.5));
        float _1071 = _1069 * (_1033.y + (-0.5));
        float _1072 = _1069 * (_1033.z + (-0.5));
        float _1079 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1040.x + (-0.5));
        float _1081 = _1079 * (_1040.y + (-0.5));
        float _1082 = _1079 * (_1040.z + (-0.5));
        float _1089 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1047.x + (-0.5));
        float _1091 = _1089 * (_1047.y + (-0.5));
        float _1092 = _1089 * (_1047.z + (-0.5));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = _1060 * 0.5;
        float _1097 = _1070 * 0.5;
        float _1098 = _1080 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_401, _402, _403), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3880 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1123 + 1.0))) + _1128) * _1093;
        float _1138 = _1061 * 0.5;
        float _1139 = _1071 * 0.5;
        float _1140 = _1081 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_401, _402, _403), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3913 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1165 + 1.0))) + _1170) * _1094;
        float _1180 = _1062 * 0.5;
        float _1181 = _1072 * 0.5;
        float _1182 = _1082 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_401, _402, _403), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3946 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1207 + 1.0))) + _1212) * _1095;
        _1229 = _1062;
        _1230 = _1061;
        _1231 = _1060;
        _1232 = _1072;
        _1233 = _1071;
        _1234 = _1070;
        _1235 = _1082;
        _1236 = _1081;
        _1237 = _1080;
        _1238 = _1095;
        _1239 = _1094;
        _1240 = _1093;
        _1241 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _917;
        _1230 = _917;
        _1231 = _917;
        _1232 = _917;
        _1233 = _917;
        _1234 = _917;
        _1235 = _917;
        _1236 = _917;
        _1237 = _917;
        _1238 = _917;
        _1239 = _917;
        _1240 = _917;
        _1241 = 0.0;
        _1242 = 0.0;
        _1243 = 0.0;
    }
    float _1253 = (cbModelParam._m0[1u].x * (_1241 - _929)) + _929;
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _930)) + _930;
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _931)) + _931;
    float _1276 = fma(_1255, cbSceneParam._m0[89u].z, fma(_1254, cbSceneParam._m0[89u].y, _1253 * cbSceneParam._m0[89u].x));
    float _1279 = fma(_1255, cbSceneParam._m0[90u].z, fma(_1254, cbSceneParam._m0[90u].y, _1253 * cbSceneParam._m0[90u].x));
    float _1282 = fma(_1255, cbSceneParam._m0[91u].z, fma(_1254, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1253));
    float _1297 = _525 * 0.5;
    float _1298 = _526 * 0.5;
    float _1299 = _527 * 0.5;
    float _1300 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1303 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1306 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1229, _1232, _1235, _1238));
    float _1340;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1313 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_916, _920, _923, _926));
        float _1317 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_918, _921, _924, _927));
        float _1321 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_919, _922, _925, _928));
        float _1328 = dot(vec4(cbModelParam._m0[39u]), vec4(_1297, _1298, _1299, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1328) ? 0.0 : (isnan(0.0) ? _1328 : max(0.0, _1328))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1351;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1342 = dot(vec4(cbModelParam._m0[40u]), vec4(_1297, _1298, _1299, 1.0));
        _1351 = dot(vec3(isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1342) ? 0.0 : (isnan(0.0) ? _1342 : max(0.0, _1342))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1351 = 1.0;
    }
    float _1355 = (_1351 * cbModelParam._m0[1u].x) + (_1340 * (1.0 - cbModelParam._m0[1u].x));
    float _1365 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _404);
    float _1366 = isnan(_1365) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1365 : min(cbModelParam._m0[25u].z, _1365));
    float _1448;
    float _1450;
    float _1452;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1415 = fma(_586, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _578)) + cbModelParam._m0[13u].w;
        float _1419 = fma(_586, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _578)) + cbModelParam._m0[14u].w;
        float _1423 = fma(_586, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _578)) + cbModelParam._m0[15u].w;
        float _1426 = fma(_527, cbModelParam._m0[13u].z, fma(_526, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _525));
        float _1429 = fma(_527, cbModelParam._m0[14u].z, fma(_526, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _525));
        float _1432 = fma(_527, cbModelParam._m0[15u].z, fma(_526, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _525));
        float _1460;
        if (_1426 > 0.0)
        {
            _1460 = abs((1.0 - _1415) / _1426);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1415 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1460 = frontier_phi_19_17_ladder;
        }
        float _1634;
        if (_1429 > 0.0)
        {
            _1634 = abs((1.0 - _1419) / _1429);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1419 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1634 = frontier_phi_28_24_ladder;
        }
        float _1930;
        if (_1432 > 0.0)
        {
            _1930 = abs((1.0 - _1423) / _1432);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1423 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1930 = frontier_phi_40_35_ladder;
        }
        float _1932 = isnan(_1634) ? _1460 : (isnan(_1460) ? _1634 : min(_1460, _1634));
        float _1933 = isnan(_1930) ? _1932 : (isnan(_1932) ? _1930 : min(_1932, _1930));
        float _1937 = (_1933 * _1426) + _1415;
        float _1938 = (_1933 * _1429) + _1419;
        float _1939 = (_1933 * _1432) + _1423;
        float _1940 = _1933 * 9.9999997473787516355514526367188e-05;
        float _1942 = (-1.0) - _1940;
        float _1944 = _1940 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1939 > _1944) || ((_1939 < _1942) || ((_1938 > _1944) || ((_1938 < _1942) || ((_1937 < _1942) || (_1937 > _1944))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2084 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1939, cbModelParam._m0[9u].z, fma(_1938, cbModelParam._m0[9u].y, _1937 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1939, cbModelParam._m0[10u].z, fma(_1938, cbModelParam._m0[10u].y, _1937 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1939, cbModelParam._m0[11u].z, fma(_1938, cbModelParam._m0[11u].y, _1937 * cbModelParam._m0[11u].x))), _1366);
            frontier_phi_18_40_ladder = _2084.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2084.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2084.x * cbModelParam._m0[1u].y;
        }
        _1448 = frontier_phi_18_40_ladder_2;
        _1450 = frontier_phi_18_40_ladder_1;
        _1452 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_525, _526, _527), _1366);
        _1448 = _1436.x * cbModelParam._m0[1u].y;
        _1450 = _1436.y * cbModelParam._m0[1u].y;
        _1452 = _1436.z * cbModelParam._m0[1u].y;
    }
    float _1456 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _404);
    float _1457 = isnan(_1456) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1456 : min(cbModelParam._m0[25u].w, _1456));
    float _1550;
    float _1552;
    float _1554;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1514 = fma(_586, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _578)) + cbModelParam._m0[21u].w;
        float _1518 = fma(_586, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _578)) + cbModelParam._m0[22u].w;
        float _1522 = fma(_586, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _578)) + cbModelParam._m0[23u].w;
        float _1525 = fma(_527, cbModelParam._m0[21u].z, fma(_526, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _525));
        float _1528 = fma(_527, cbModelParam._m0[22u].z, fma(_526, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _525));
        float _1531 = fma(_527, cbModelParam._m0[23u].z, fma(_526, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _525));
        float _1639;
        if (_1525 > 0.0)
        {
            _1639 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1639 = frontier_phi_30_26_ladder;
        }
        float _1957;
        if (_1528 > 0.0)
        {
            _1957 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1957 = frontier_phi_42_37_ladder;
        }
        float _2284;
        if (_1531 > 0.0)
        {
            _2284 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2284 = frontier_phi_52_49_ladder;
        }
        float _2286 = isnan(_1957) ? _1639 : (isnan(_1639) ? _1957 : min(_1639, _1957));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1525) + _1514;
        float _2292 = (_2287 * _1528) + _1518;
        float _2293 = (_2287 * _1531) + _1522;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2294;
        float _2297 = _2294 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2293 > _2297) || ((_2293 < _2295) || ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 < _2295) || (_2291 > _2297))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2411 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2293, cbModelParam._m0[17u].z, fma(_2292, cbModelParam._m0[17u].y, _2291 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2293, cbModelParam._m0[18u].z, fma(_2292, cbModelParam._m0[18u].y, _2291 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2293, cbModelParam._m0[19u].z, fma(_2292, cbModelParam._m0[19u].y, _2291 * cbModelParam._m0[19u].x))), _1457);
            frontier_phi_27_52_ladder = _2411.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2411.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2411.x * cbModelParam._m0[1u].z;
        }
        _1550 = frontier_phi_27_52_ladder_2;
        _1552 = frontier_phi_27_52_ladder_1;
        _1554 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_525, _526, _527), _1457);
        _1550 = _1534.x * cbModelParam._m0[1u].z;
        _1552 = _1534.y * cbModelParam._m0[1u].z;
        _1554 = _1534.z * cbModelParam._m0[1u].z;
    }
    float _1566 = ((((1.0 - _546) * ((_533 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_546 * _533)) * _517;
    float _1567 = _1566 * ((cbModelParam._m0[1u].w * (_1550 - _1448)) + _1448);
    float _1568 = _1566 * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1569 = _1566 * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1572 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, _1567 * cbSceneParam._m0[91u].x));
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1617 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1621 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1625 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1626 = _1613 / _1625;
    float _1627 = _1617 / _1625;
    float _1628 = _1621 / _1625;
    float _1775;
    float _1776;
    float _1777;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1655 = ((uint(_1628 > cbSceneParam._m0[59u].y) + uint(_1628 > cbSceneParam._m0[59u].x)) + uint(_1628 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1656 = _1655 + 43u;
        uint _1664 = _1655 + 44u;
        uint _1672 = _1655 + 45u;
        uint _1680 = _1655 + 46u;
        float _1691 = fma(_1625, cbSceneParam._m0[_1656].w, fma(_1621, cbSceneParam._m0[_1656].z, fma(_1617, cbSceneParam._m0[_1656].y, _1613 * cbSceneParam._m0[_1656].x)));
        float _1695 = fma(_1625, cbSceneParam._m0[_1664].w, fma(_1621, cbSceneParam._m0[_1664].z, fma(_1617, cbSceneParam._m0[_1664].y, _1613 * cbSceneParam._m0[_1664].x)));
        float _1703 = fma(_1625, cbSceneParam._m0[_1680].w, fma(_1621, cbSceneParam._m0[_1680].z, fma(_1617, cbSceneParam._m0[_1680].y, _1613 * cbSceneParam._m0[_1680].x)));
        float _1708 = cbSceneParam._m0[33u].z * _1703;
        float _1710 = cbSceneParam._m0[33u].w * _1703;
        float _1713 = fma(_1625, cbSceneParam._m0[_1672].w, fma(_1621, cbSceneParam._m0[_1672].z, fma(_1617, cbSceneParam._m0[_1672].y, _1613 * cbSceneParam._m0[_1672].x))) / _1703;
        float _1761 = (cbSceneParam._m0[33u].x - sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628))) * cbSceneParam._m0[33u].y;
        float _4072 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1768 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1708 + _1691) / _1703, (_1710 + _1695) / _1703), _1713), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1710 + _1691) / _1703, (_1695 - _1708) / _1703), _1713), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1691 - _1708) / _1703, (_1695 - _1710) / _1703), _1713), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1691 - _1710) / _1703, (_1708 + _1695) / _1703), _1713), 0.0)).x), vec4(0.25)));
        _1775 = 1.0 - (_1768 * cbSceneParam._m0[34u].x);
        _1776 = 1.0 - (_1768 * cbSceneParam._m0[34u].y);
        _1777 = 1.0 - (_1768 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1775 = 1.0;
        _1776 = 1.0;
        _1777 = 1.0;
    }
    float _1841;
    float _1843;
    float _1845;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1829 = fma(_1625, cbSceneParam._m0[63u].w, fma(_1621, cbSceneParam._m0[63u].z, fma(_1617, cbSceneParam._m0[63u].y, _1613 * cbSceneParam._m0[63u].x)));
        float _1830 = fma(_1625, cbSceneParam._m0[60u].w, fma(_1621, cbSceneParam._m0[60u].z, fma(_1617, cbSceneParam._m0[60u].y, _1613 * cbSceneParam._m0[60u].x))) / _1829;
        float _1831 = fma(_1625, cbSceneParam._m0[61u].w, fma(_1621, cbSceneParam._m0[61u].z, fma(_1617, cbSceneParam._m0[61u].y, _1613 * cbSceneParam._m0[61u].x))) / _1829;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1830 >= cbSceneParam._m0[64u].x) && (_1831 >= cbSceneParam._m0[64u].y)) && (_1830 <= cbSceneParam._m0[64u].z)) && (_1831 <= cbSceneParam._m0[64u].w))
        {
            float _1970 = fma(_1625, cbSceneParam._m0[62u].w, fma(_1621, cbSceneParam._m0[62u].z, fma(_1617, cbSceneParam._m0[62u].y, _1613 * cbSceneParam._m0[62u].x))) / _1829;
            float _1974 = isnan(cbSceneParam._m0[41u].w) ? _1970 : (isnan(_1970) ? cbSceneParam._m0[41u].w : max(_1970, cbSceneParam._m0[41u].w));
            float _2017 = (cbSceneParam._m0[33u].x - sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628))) * cbSceneParam._m0[33u].y;
            float _4088 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
            float _2024 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1830, cbSceneParam._m0[33u].w + _1831), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1830, _1831 - cbSceneParam._m0[33u].z), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1830 - cbSceneParam._m0[33u].z, _1831 - cbSceneParam._m0[33u].w), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1830 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1831), _1974), 0.0)).x), vec4(0.25)));
            float _2028 = 1.0 - (_2024 * cbSceneParam._m0[34u].x);
            float _2029 = 1.0 - (_2024 * cbSceneParam._m0[34u].y);
            float _2030 = 1.0 - (_2024 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2029) ? _1776 : (isnan(_1776) ? _2029 : min(_1776, _2029));
            frontier_phi_39_38_ladder_1 = isnan(_2028) ? _1775 : (isnan(_1775) ? _2028 : min(_1775, _2028));
            frontier_phi_39_38_ladder_2 = isnan(_2030) ? _1777 : (isnan(_1777) ? _2030 : min(_1777, _2030));
        }
        else
        {
            frontier_phi_39_38_ladder = _1776;
            frontier_phi_39_38_ladder_1 = _1775;
            frontier_phi_39_38_ladder_2 = _1777;
        }
        _1841 = frontier_phi_39_38_ladder_1;
        _1843 = frontier_phi_39_38_ladder;
        _1845 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1841 = _1775;
        _1843 = _1776;
        _1845 = _1777;
    }
    uvec4 _1850 = floatBitsToUint(cbInstanceData._m0[_490 + 5u]);
    uint _1852 = _1850.x * 14u;
    uint _1853 = _1852 + 13u;
    float _1860 = _517 + (-1.0);
    float _1865 = (cbLight._m0[_1853].x * _1860) + 1.0;
    float _1866 = (cbLight._m0[_1853].y * _1860) + 1.0;
    float _1867 = (cbLight._m0[_1853].z * _1860) + 1.0;
    float _1868 = (cbLight._m0[_1853].w * _1860) + 1.0;
    uint _1869 = _1852 + 5u;
    float _1875 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
    uint _1879 = _1852 + 4u;
    float _1889 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
    uint _1893 = _1852 | 1u;
    float _1904 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_401, _402, _403));
    float _1907 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_401, _402, _403));
    float _4124 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _4135 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1912 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.3183098733425140380859375;
    float _1914 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * 0.3183098733425140380859375;
    float _1921 = ((cbLight._m0[_1869].x * _1875) * _1914) + (((cbLight._m0[_1879].x * _1841) * _1889) * _1912);
    float _1922 = ((_1875 * cbLight._m0[_1869].y) * _1914) + (((cbLight._m0[_1879].y * _1843) * _1889) * _1912);
    float _1923 = ((_1875 * cbLight._m0[_1869].z) * _1914) + (((cbLight._m0[_1879].z * _1845) * _1889) * _1912);
    uvec4 _1927 = floatBitsToUint(cbLight._m0[_1852 + 12u]);
    bool _1929 = _1927.x == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_1929)
    {
        _2031 = _1921;
        _2033 = _1922;
        _2035 = _1923;
    }
    else
    {
        uint _2039 = _1852 + 6u;
        float _2055 = (dot(vec3(cbLight._m0[_1852 + 2u].xyz), vec3(_401, _402, _403)) * 0.5) + 0.5;
        float _2056 = _2055 * _2055;
        float _4146 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2058 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _2031 = (((cbLight._m0[_2039].x * 0.3183098733425140380859375) * _2057) * _2058) + _1921;
        _2033 = (((cbLight._m0[_2039].y * 0.3183098733425140380859375) * _2057) * _2058) + _1922;
        _2035 = (((cbLight._m0[_2039].z * 0.3183098733425140380859375) * _2057) * _2058) + _1923;
    }
    bool _2038 = _1927.y == 0u;
    float _2093;
    float _2095;
    float _2097;
    if (_2038)
    {
        _2093 = _2031;
        _2095 = _2033;
        _2097 = _2035;
    }
    else
    {
        uint _2255 = _1852 + 7u;
        float _2271 = (dot(vec3(cbLight._m0[_1852 + 3u].xyz), vec3(_401, _402, _403)) * 0.5) + 0.5;
        float _2272 = _2271 * _2271;
        float _4162 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2273 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2274 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _2093 = (((cbLight._m0[_2255].x * 0.3183098733425140380859375) * _2273) * _2274) + _2031;
        _2095 = (((cbLight._m0[_2255].y * 0.3183098733425140380859375) * _2273) * _2274) + _2033;
        _2097 = (((cbLight._m0[_2255].z * 0.3183098733425140380859375) * _2273) * _2274) + _2035;
    }
    uint _2100 = _1852 + 8u;
    float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1852].w)) * _404) * 0.949999988079071044921875);
    float _2114 = _2113 * _2113;
    float _2115 = cbLight._m0[_1852].x + _429;
    float _2116 = cbLight._m0[_1852].y + _430;
    float _2117 = cbLight._m0[_1852].z + _431;
    float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
    float _2122 = _2121 * _2115;
    float _2123 = _2121 * _2116;
    float _2124 = _2121 * _2117;
    float _2125 = dot(vec3(_401, _402, _403), vec3(cbLight._m0[_1852].xyz));
    float _4178 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _2129 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2130 = dot(vec3(_401, _402, _403), vec3(_2122, _2123, _2124));
    float _4200 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2134 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_2122, _2123, _2124));
    float _4211 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2138 = _2114 * _2114;
    float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
    float _2153 = (exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2154 = 1.0 - _2114;
    float _2165 = (0.5 / (((_2129 * ((_2128 * _2154) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2154) + _2114) * _2128))) * _2128;
    float _4222 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
    uint _2181 = _1852 + 9u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _404) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_1893].x + _429;
    float _2195 = cbLight._m0[_1893].y + _430;
    float _2196 = cbLight._m0[_1893].z + _431;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_401, _402, _403), vec3(cbLight._m0[_1893].xyz));
    float _4233 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2208 = dot(vec3(_401, _402, _403), vec3(_2201, _2202, _2203));
    float _4244 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2201, _2202, _2203));
    float _4255 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2193 * _2193;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2229 = (exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2230 = 1.0 - _2193;
    float _2240 = (0.5 / (((_2129 * ((_2207 * _2230) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2230) + _2193) * _2207))) * _2207;
    float _4266 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2242 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    float _2252 = (((_2229 * cbLight._m0[_2181].x) * _2242) * _1875) + ((((cbLight._m0[_2100].x * _1841) * _2153) * _2167) * _1889);
    float _2253 = (((_2229 * cbLight._m0[_2181].y) * _2242) * _1875) + ((((cbLight._m0[_2100].y * _1843) * _2153) * _2167) * _1889);
    float _2254 = (((_2229 * cbLight._m0[_2181].z) * _2242) * _1875) + ((((cbLight._m0[_2100].z * _1845) * _2153) * _2167) * _1889);
    float _2310;
    float _2312;
    float _2314;
    if (_1929)
    {
        _2310 = _2252;
        _2312 = _2253;
        _2314 = _2254;
    }
    else
    {
        uint _2316 = _1852 + 2u;
        uint _2320 = _1852 + 10u;
        float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2316].w)) * _404) * 0.949999988079071044921875);
        float _2335 = _2334 * _2334;
        float _2336 = cbLight._m0[_2316].x + _429;
        float _2337 = cbLight._m0[_2316].y + _430;
        float _2338 = cbLight._m0[_2316].z + _431;
        float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
        float _2343 = _2342 * _2336;
        float _2344 = _2342 * _2337;
        float _2345 = _2342 * _2338;
        float _2346 = dot(vec3(_401, _402, _403), vec3(cbLight._m0[_2316].xyz));
        float _4277 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2350 = dot(vec3(_401, _402, _403), vec3(_2343, _2344, _2345));
        float _4288 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2354 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_2343, _2344, _2345));
        float _4299 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2358 = _2335 * _2335;
        float _2362 = ((_2353 * _2353) * (_2358 + (-1.0))) + 1.0;
        float _2371 = (exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2372 = 1.0 - _2335;
        float _2382 = (0.5 / (((_2129 * ((_2349 * _2372) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2372) + _2335) * _2349))) * _2349;
        float _4310 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2384 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2358 / ((_2362 * _2362) * 3.141590118408203125));
        float _2385 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _2310 = (((_2371 * cbLight._m0[_2320].x) * _2384) * _2385) + _2252;
        _2312 = (((_2371 * cbLight._m0[_2320].y) * _2384) * _2385) + _2253;
        _2314 = (((_2371 * cbLight._m0[_2320].z) * _2384) * _2385) + _2254;
    }
    float _2416;
    float _2418;
    float _2420;
    if (_2038)
    {
        _2416 = _2310;
        _2418 = _2312;
        _2420 = _2314;
    }
    else
    {
        uint _2427 = _1852 + 3u;
        uint _2431 = _1852 + 11u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _404) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _429;
        float _2448 = cbLight._m0[_2427].y + _430;
        float _2449 = cbLight._m0[_2427].z + _431;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_401, _402, _403), vec3(cbLight._m0[_2427].xyz));
        float _4326 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2461 = dot(vec3(_401, _402, _403), vec3(_2454, _2455, _2456));
        float _4337 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4348 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2482 = (exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2483 = 1.0 - _2446;
        float _2493 = (0.5 / (((_2129 * ((_2460 * _2483) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2483) + _2446) * _2460))) * _2460;
        float _4359 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _2416 = (((_2482 * cbLight._m0[_2431].x) * _2495) * _2496) + _2310;
        _2418 = (((_2482 * cbLight._m0[_2431].y) * _2495) * _2496) + _2312;
        _2420 = (((_2482 * cbLight._m0[_2431].z) * _2495) * _2496) + _2314;
    }
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    if (_1850.y == 0u)
    {
        uvec4 _2517 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2518 = _2517.x;
        uint _2529 = uint((float(_2517.y) * floor(float(uint(cbSceneParam._m0[85u].y * _451) / _2518))) + floor(float(uint(cbSceneParam._m0[85u].x * _450) / _2518)));
        float _2539 = (log2(_1628 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2540 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        uint _2543 = uint(isnan(14.0) ? _2540 : (isnan(_2540) ? 14.0 : min(_2540, 14.0)));
        uvec4 _2548 = texelFetch(g_lightClusterGridBuffer, int(((_2543 << 2u) + (_2529 << 6u)) >> 2u));
        uint _2549 = _2548.x;
        uint _2550 = _2517.z;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        if (((((1u << ((_2550 >> 4u) & 15u)) + 4294967295u) & _2549) == 0u) || ((_2550 & 240u) == 0u))
        {
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
        }
        else
        {
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            uint _2786 = 0u;
            uint _2795;
            bool _2796;
            for (;;)
            {
                _2795 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                _2796 = _2795 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2796)
                {
                    frontier_phi_73_pred = _2785;
                    frontier_phi_73_pred_1 = _2784;
                    frontier_phi_73_pred_2 = _2783;
                    frontier_phi_73_pred_3 = _2782;
                    frontier_phi_73_pred_4 = _2781;
                    frontier_phi_73_pred_5 = _2780;
                }
                else
                {
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    uint _2931;
                    _2925 = _2780;
                    _2926 = _2781;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2795;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    for (;;)
                    {
                        uint _2935 = uint(findLSB(_2931)) + (_2786 << 5u);
                        uint _2932 = (_2931 + 4294967295u) & _2931;
                        uint _2937 = _2935 * 48u;
                        vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 3u)).x));
                        uint _2957 = (_2935 * 48u) + 4u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 3u)).x));
                        uint _2976 = (_2935 * 48u) + 8u;
                        vec3 _2987 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x));
                        float _2991 = _2951.x - _1626;
                        float _2992 = _2951.y - _1627;
                        float _2993 = _2951.z - _1628;
                        float _2994 = dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993));
                        float _2997 = inversesqrt(_2994);
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3001 = dot(vec3(_471, _474, _477), vec3(_2998, _2999, _3000));
                        float _3006 = 1.0 - (_2994 * _2951.w);
                        float _4385 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3007 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3008 = sqrt(_2994) * _2970.w;
                        float _3011 = 1.39999997615814208984375 / (_3008 + 1.39999997615814208984375);
                        float _3012 = _3011 * _3011;
                        float _3015 = ((1.0 - _3012) * _3001) + _3012;
                        float _3018 = _3008 * _3008;
                        float _3022 = ((isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))) * _3007) / ((_3018 * 0.699999988079071044921875) + 1.0);
                        float _3026 = (-0.0) - _1626;
                        float _3027 = (-0.0) - _1627;
                        float _3028 = (-0.0) - _1628;
                        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                        float _3033 = _3032 * _3026;
                        float _3034 = _3032 * _3027;
                        float _3035 = _3032 * _3028;
                        float _3042 = exp2(log2(1.0 / ((_3018 * 3.5) + 5.0)) * 0.25);
                        float _3043 = 1.0 - _533;
                        float _3050 = sqrt(1.0 - ((1.0 - (_3043 * _3043)) * (1.0 - (_3042 * _3042))));
                        float _3051 = _3050 * _3050;
                        float _3052 = _3051 * _3051;
                        float _3053 = _3033 + _2998;
                        float _3054 = _3034 + _2999;
                        float _3055 = _3035 + _3000;
                        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
                        float _3063 = dot(vec3(_471, _474, _477), vec3(_3033, _3034, _3035));
                        float _4401 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3066 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3067 = dot(vec3(_471, _474, _477), vec3(_3059 * _3053, _3059 * _3054, _3059 * _3055));
                        float _4412 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3070 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3074 = ((_3070 * _3070) * (_3052 + (-1.0))) + 1.0;
                        float _3075 = _3011 * _3051;
                        float _3076 = _3075 * _3075;
                        float _3079 = ((1.0 - _3076) * _3001) + _3076;
                        float _4423 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3080 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3081 = 1.0 - _3051;
                        float _3091 = (0.5 / (((_3080 * ((_3066 * _3081) + _3051)) + 9.9999999392252902907785028219223e-09) + (((_3080 * _3081) + _3051) * _3066))) * _3080;
                        float _4434 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3102 = (((_3052 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3074 * _3074) * ((_3018 * 2.1991131305694580078125) + 3.141590118408203125))) * _3007;
                        _2855 = (_3022 * _2970.x) + _2928;
                        _2856 = (_3022 * _2970.y) + _2929;
                        _2857 = (_3022 * _2970.z) + _2930;
                        _2852 = (_3102 * _2987.x) + _2925;
                        _2853 = (_3102 * _2987.y) + _2926;
                        _2854 = (_3102 * _2987.z) + _2927;
                        if (_2932 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2925 = _2852;
                            _2926 = _2853;
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2932;
                        }
                    }
                    frontier_phi_73_pred = _2857;
                    frontier_phi_73_pred_1 = _2856;
                    frontier_phi_73_pred_2 = _2855;
                    frontier_phi_73_pred_3 = _2854;
                    frontier_phi_73_pred_4 = _2853;
                    frontier_phi_73_pred_5 = _2852;
                }
                _2639 = frontier_phi_73_pred;
                _2637 = frontier_phi_73_pred_1;
                _2635 = frontier_phi_73_pred_2;
                _2633 = frontier_phi_73_pred_3;
                _2631 = frontier_phi_73_pred_4;
                _2629 = frontier_phi_73_pred_5;
                uint _2787 = _2786 + 1u;
                if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2780 = _2629;
                    _2781 = _2631;
                    _2782 = _2633;
                    _2783 = _2635;
                    _2784 = _2637;
                    _2785 = _2639;
                    _2786 = _2787;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
        }
        uvec4 _2642 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2643 = _2642.z;
        uint _2645 = (_2643 >> 8u) & 15u;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((4294967295u << _2645) & _2549) == 0u)
        {
            _2748 = _2628;
            _2750 = _2630;
            _2752 = _2632;
            _2754 = _2634;
            _2756 = _2636;
            _2758 = _2638;
        }
        else
        {
            float _2773 = inversesqrt(dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628)));
            float _2774 = _2773 * _1626;
            float _2775 = _2773 * _1627;
            float _2776 = _2773 * _1628;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2645 < ((_2643 >> 12u) & 15u))
            {
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2908 = _2628;
                float _2909 = _2630;
                float _2910 = _2632;
                float _2911 = _2634;
                float _2912 = _2636;
                float _2913 = _2638;
                uint _2914 = _2645;
                uint _2923;
                bool _2924;
                for (;;)
                {
                    _2923 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_2914 << 2u)) >> 2u)).x;
                    _2924 = _2923 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2924)
                    {
                        frontier_phi_84_pred = _2912;
                        frontier_phi_84_pred_1 = _2911;
                        frontier_phi_84_pred_2 = _2910;
                        frontier_phi_84_pred_3 = _2909;
                        frontier_phi_84_pred_4 = _2908;
                        frontier_phi_84_pred_5 = _2913;
                    }
                    else
                    {
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3129 = _2908;
                        float _3130 = _2909;
                        float _3131 = _2910;
                        float _3132 = _2911;
                        float _3133 = _2912;
                        float _3134 = _2913;
                        uint _3135 = _2923;
                        uint _3136;
                        vec4 _3161;
                        float _3162;
                        vec4 _3177;
                        vec3 _3189;
                        vec4 _3205;
                        vec4 _3221;
                        float _3268;
                        bool _3269;
                        for (;;)
                        {
                            uint _3146 = ((_2914 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3135));
                            _3136 = (_3135 + 4294967295u) & _3135;
                            uint _3148 = _3146 * 40u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            _3162 = _3161.w;
                            uint _3164 = (_3146 * 40u) + 4u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3179 = (_3146 * 40u) + 8u;
                            _3189 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x));
                            uint _3192 = (_3146 * 40u) + 16u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3208 = (_3146 * 40u) + 20u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3224 = (_3146 * 40u) + 24u;
                            vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3243 = (_3146 * 40u) + 28u;
                            vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            _3268 = fma(_1628, _3256.z, fma(_1627, _3256.y, _3256.x * _1626)) + _3256.w;
                            _3269 = !((fma(_1628, _3237.z, fma(_1627, _3237.y, _3237.x * _1626)) + _3237.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3269)
                            {
                                float _3296 = _3161.x - _1626;
                                float _3297 = _3161.y - _1627;
                                float _3298 = _3161.z - _1628;
                                float _3299 = dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298));
                                float _3302 = inversesqrt(_3299);
                                float _3303 = _3302 * _3296;
                                float _3304 = _3302 * _3297;
                                float _3305 = _3302 * _3298;
                                float _3309 = 1.0 - (_3299 / (_3162 * _3162));
                                float _4445 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3314 = sqrt(_3299) * _3177.w;
                                float _3316 = 1.39999997615814208984375 / (_3314 + 1.39999997615814208984375);
                                float _3317 = _3316 * _3316;
                                float _3320 = ((1.0 - _3317) * dot(vec3(_3303, _3304, _3305), vec3(_471, _474, _477))) + _3317;
                                float _3323 = _3314 * _3314;
                                float _3327 = (fma(_1628, _3205.z, fma(_1627, _3205.y, _3205.x * _1626)) + _3205.w) / _3268;
                                float _3328 = (fma(_1628, _3221.z, fma(_1627, _3221.y, _3221.x * _1626)) + _3221.w) / _3268;
                                float _3332 = 1.0 - dot(vec2(_3327, _3328), vec2(_3327, _3328));
                                float _4461 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3334 = _3333 * (((isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0))) * _3310) / ((_3323 * 0.699999988079071044921875) + 1.0));
                                float _3346 = exp2(log2(1.0 / ((_3323 * 3.5) + 5.0)) * 0.25);
                                float _3347 = 1.0 - _533;
                                float _3354 = sqrt(1.0 - ((1.0 - (_3347 * _3347)) * (1.0 - (_3346 * _3346))));
                                float _3355 = _3354 * _3354;
                                float _3356 = _3355 * _3355;
                                float _3357 = _3303 - _2774;
                                float _3358 = _3304 - _2775;
                                float _3359 = _3305 - _2776;
                                float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                                float _3367 = dot(vec3(_471, _474, _477), vec3((-0.0) - _2774, (-0.0) - _2775, (-0.0) - _2776));
                                float _4472 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3370 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3371 = dot(vec3(_471, _474, _477), vec3(_3363 * _3357, _3363 * _3358, _3363 * _3359));
                                float _4483 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3374 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3378 = ((_3374 * _3374) * (_3356 + (-1.0))) + 1.0;
                                float _3379 = _3316 * _3355;
                                float _3380 = _3379 * _3379;
                                float _3386 = ((1.0 - _3380) * dot(vec3(_471, _474, _477), vec3(_3303, _3304, _3305))) + _3380;
                                float _4494 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3388 = 1.0 - _3355;
                                float _3398 = (0.5 / (((_3387 * ((_3370 * _3388) + _3355)) + 9.9999999392252902907785028219223e-09) + (((_3387 * _3388) + _3355) * _3370))) * _3387;
                                float _4505 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3408 = (_3333 * _3310) * (((_3356 * 3.1415927410125732421875) * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) / ((_3378 * _3378) * ((_3323 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3334 * _3177.y;
                                frontier_phi_90_pred_1 = _3334 * _3177.x;
                                frontier_phi_90_pred_2 = _3408 * _3189.z;
                                frontier_phi_90_pred_3 = _3408 * _3189.y;
                                frontier_phi_90_pred_4 = _3408 * _3189.x;
                                frontier_phi_90_pred_5 = _3334 * _3177.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3416 = frontier_phi_90_pred;
                            _3415 = frontier_phi_90_pred_1;
                            _3414 = frontier_phi_90_pred_2;
                            _3413 = frontier_phi_90_pred_3;
                            _3412 = frontier_phi_90_pred_4;
                            _3417 = frontier_phi_90_pred_5;
                            _3119 = _3415 + _3132;
                            _3120 = _3416 + _3133;
                            _3121 = _3417 + _3134;
                            _3116 = _3412 + _3129;
                            _3117 = _3413 + _3130;
                            _3118 = _3414 + _3131;
                            if (_3136 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3136;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3120;
                        frontier_phi_84_pred_1 = _3119;
                        frontier_phi_84_pred_2 = _3118;
                        frontier_phi_84_pred_3 = _3117;
                        frontier_phi_84_pred_4 = _3116;
                        frontier_phi_84_pred_5 = _3121;
                    }
                    _2757 = frontier_phi_84_pred;
                    _2755 = frontier_phi_84_pred_1;
                    _2753 = frontier_phi_84_pred_2;
                    _2751 = frontier_phi_84_pred_3;
                    _2749 = frontier_phi_84_pred_4;
                    _2759 = frontier_phi_84_pred_5;
                    uint _2915 = _2914 + 1u;
                    if (_2915 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2908 = _2749;
                        _2909 = _2751;
                        _2910 = _2753;
                        _2911 = _2755;
                        _2912 = _2757;
                        _2913 = _2759;
                        _2914 = _2915;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2759;
                frontier_phi_65_66_ladder_1 = _2755;
                frontier_phi_65_66_ladder_2 = _2757;
                frontier_phi_65_66_ladder_3 = _2751;
                frontier_phi_65_66_ladder_4 = _2749;
                frontier_phi_65_66_ladder_5 = _2753;
            }
            else
            {
                frontier_phi_65_66_ladder = _2638;
                frontier_phi_65_66_ladder_1 = _2634;
                frontier_phi_65_66_ladder_2 = _2636;
                frontier_phi_65_66_ladder_3 = _2630;
                frontier_phi_65_66_ladder_4 = _2628;
                frontier_phi_65_66_ladder_5 = _2632;
            }
            _2748 = frontier_phi_65_66_ladder_4;
            _2750 = frontier_phi_65_66_ladder_3;
            _2752 = frontier_phi_65_66_ladder_5;
            _2754 = frontier_phi_65_66_ladder_1;
            _2756 = frontier_phi_65_66_ladder_2;
            _2758 = frontier_phi_65_66_ladder;
        }
        float _2763 = isnan(1.0) ? _517 : (isnan(_517) ? 1.0 : min(_517, 1.0));
        _2561 = (_2763 * _2754) + _2093;
        _2563 = (_2763 * _2756) + _2095;
        _2565 = (_2763 * _2758) + _2097;
        _2567 = ((_2748 * 0.039999999105930328369140625) * _2763) + _2416;
        _2569 = ((_2750 * 0.039999999105930328369140625) * _2763) + _2418;
        _2571 = ((_2752 * 0.039999999105930328369140625) * _2763) + _2420;
    }
    else
    {
        _2561 = _2093;
        _2563 = _2095;
        _2565 = _2097;
        _2567 = _2416;
        _2569 = _2418;
        _2571 = _2420;
    }
    float _4521 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _4532 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _4543 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _2588 = ((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2561 + ((isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))) * _517))) + ((_2567 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1355)) * cbPerFrame._m0[3u].x);
    float _2589 = ((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2563 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _517))) + ((_2569 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1355)) * cbPerFrame._m0[3u].x);
    float _2590 = ((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2565 + ((isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))) * _517))) + ((_2571 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1355)) * cbPerFrame._m0[3u].x);
    uint _2591 = _490 + 6u;
    float _2599 = _450 / cbSceneParam._m0[86u].x;
    float _2600 = _451 / cbSceneParam._m0[86u].y;
    vec4 _2614 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, (log2((isnan(cbSceneParam._m0[77u].w) ? _424 : (isnan(_424) ? cbSceneParam._m0[77u].w : min(_424, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2616 = _2614.x;
    float _2617 = _2614.y;
    float _2618 = _2614.z;
    float _2619 = _2614.w;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    if (_424 > cbSceneParam._m0[78u].w)
    {
        float _2653 = isnan(_424) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _424 : min(cbSceneParam._m0[80u].w, _424));
        float _2654 = _2653 / _424;
        float _2665 = _2654 * _273;
        float _2666 = _274 * _2654;
        float _2667 = (-0.0) - _2666;
        float _2668 = _2654 * _275;
        float _2670 = (cbSceneParam._m0[77u].w * _2667) / _2653;
        float _2671 = _2670 + cbSceneParam._m0[79u].w;
        float _2672 = cbSceneParam._m0[79u].w - _2666;
        float _2678 = sqrt(((_2665 * _2665) + (_2666 * _2666)) + (_2668 * _2668));
        float _2681 = (1.0 - (cbSceneParam._m0[77u].w / _2653)) * _2678;
        float _2686 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2688 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2865;
        if (abs((_2667 - _2670) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2865 = ((((_2671 > 0.0) ? exp2(_2686 * _2671) : (2.0 - exp2(_2688 * _2671))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2681;
        }
        else
        {
            float _2809 = 1.0 / cbSceneParam._m0[80u].x;
            float _2810 = isnan(_2672) ? _2671 : (isnan(_2671) ? _2672 : max(_2671, _2672));
            float _2811 = isnan(_2672) ? _2671 : (isnan(_2671) ? _2672 : min(_2671, _2672));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            _2865 = ((abs(_2678 / _2667) * cbSceneParam._m0[80u].y) * ((((_2820 - _2821) * 2.0) - ((exp2(_2686 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0)))) - exp2(_2686 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0))))) * _2809)) - ((exp2(_2688 * _2820) - exp2(_2688 * _2821)) * _2809))) + (_2681 * cbSceneParam._m0[80u].z);
        }
        vec4 _2867 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, 1.0), 0.0);
        float _2876 = exp2((_2865 * (-1.44269502162933349609375)) * (1.0 - _2867.w));
        float _2877 = log2(_2876);
        float _2893 = log2(_2619);
        _2690 = (exp2(_2893 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2877 * cbSceneParam._m0[78u].x)) * _2867.x) / cbSceneParam._m0[78u].x)) + _2616;
        _2692 = (exp2(_2893 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2877 * cbSceneParam._m0[78u].y)) * _2867.y) / cbSceneParam._m0[78u].y)) + _2617;
        _2694 = (exp2(_2893 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2877 * cbSceneParam._m0[78u].z)) * _2867.z) / cbSceneParam._m0[78u].z)) + _2618;
        _2696 = _2876 * _2619;
    }
    else
    {
        _2690 = _2616;
        _2692 = _2617;
        _2694 = _2618;
        _2696 = _2619;
    }
    bool _2903;
    vec4 _2706;
    vec4 _2728;
    float _2730;
    float _2734;
    float _2735;
    float _2736;
    float _2737;
    bool _2747;
    for (;;)
    {
        _2706 = cbMatDynParam._m0[0u];
        float _2708 = roundEven(_2706.y);
        bool _2709 = _2708 == 3.0;
        float _2710 = log2(_2696);
        float _2717 = exp2(_2710 * cbSceneParam._m0[78u].x) * _2588;
        float _2718 = exp2(_2710 * cbSceneParam._m0[78u].y) * _2589;
        float _2719 = exp2(_2710 * cbSceneParam._m0[78u].z) * _2590;
        float _2726 = _438 + (-0.5);
        _2728 = cbMtdParam._m0[1u];
        _2730 = _2728.y * _2726;
        float _2733 = (_2708 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2734 = _2733 * (_2709 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2690)));
        _2735 = _2733 * (_2709 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2692)));
        _2736 = _2733 * (_2709 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2694)));
        _2737 = _2726 * 0.999000012874603271484375;
        _2747 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2747)
        {
            if ((cbInstanceData._m0[_490 + 7u].x + _2737) < 0.5)
            {
                _2903 = true;
                break;
            }
        }
        uint _2844 = _492 + uint(_2706.w);
        if ((cbInstanceData._m0[_2844].w < 1.0) && ((cbInstanceData._m0[_2844].w + _2737) < 0.5))
        {
            _2903 = true;
            break;
        }
        if ((_2730 + _346) < _2728.x)
        {
            _2903 = true;
            break;
        }
        _2903 = false;
        break;
    }
    float _3107;
    if (_2903)
    {
        discard_state = true;
        _3107 = 0.0;
    }
    else
    {
        _3107 = cbInstanceData._m0[_2591].w;
    }
    SV_Target.x = _2734;
    SV_Target.y = _2735;
    SV_Target.z = _2736;
    SV_Target.w = _3107;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2591].w;
    discard_exit();
}


