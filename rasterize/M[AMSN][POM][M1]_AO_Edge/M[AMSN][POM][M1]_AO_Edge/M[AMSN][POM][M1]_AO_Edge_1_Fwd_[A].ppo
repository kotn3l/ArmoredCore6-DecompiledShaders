#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _913;
float _3283;
float _3284;
float _3285;
float _3286;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    float _280 = dot(vec3(_269, _270, _271), vec3(_192, _193, _194));
    float _283 = dot(vec3(_269, _270, _271), vec3(_206, _207, _208));
    float _286 = dot(vec3(_269, _270, _271), vec3(_213, _214, _215));
    float _292 = inversesqrt(dot(vec3(_280, _283, _286), vec3(_280, _283, _286)));
    vec4 _305 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _316 = dot(vec4(_305), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _324 = (((cbMtdParam._m0[10u].y * _280) * _292) * _316) + TEXCOORD.x;
    float _325 = (((_283 * cbMtdParam._m0[10u].y) * _292) * _316) + TEXCOORD.y;
    vec4 _337 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_324 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_325 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _342 = _337.w;
    float _343 = _337.x * cbMtdParam._m0[9u].x;
    float _344 = _337.y * cbMtdParam._m0[9u].y;
    float _345 = _337.z * cbMtdParam._m0[9u].z;
    vec4 _357 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _324) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _325) + cbTextureTilingScale._m0[3u].w));
    float _361 = _357.z;
    float _366 = (_357.x * 2.0) + (-1.0);
    float _368 = (_357.y * 2.0) + (-1.0);
    float _369 = dot(vec2(_366, _368), vec2(_366, _368));
    float _3295 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _374 = sqrt(1.0 - (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0))));
    float _377 = fma(_374, _213, fma(_368, _206, _366 * _192));
    float _380 = fma(_374, _214, fma(_368, _207, _366 * _193));
    float _383 = fma(_374, _215, fma(_368, _208, _366 * _194));
    float _387 = inversesqrt(dot(vec3(_377, _380, _383), vec3(_377, _380, _383)));
    float _388 = _387 * _377;
    float _389 = _387 * _380;
    float _390 = _387 * _383;
    float _392 = cbMtdParam._m0[10u].x + _357.w;
    float _396 = inversesqrt(dot(vec3(_388, _389, _390), vec3(_388, _389, _390)));
    float _397 = _396 * _388;
    float _398 = _396 * _389;
    float _399 = _396 * _390;
    float _3306 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _400 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    float _3317 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3328 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3339 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3350 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _420 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _424 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _425 = _269 * _424;
    float _426 = _270 * _424;
    float _427 = _271 * _424;
    vec4 _432 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _434 = _432.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _593 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _599 = (cbMatDynParam._m0[5u].x * _593) + cbMatDynParam._m0[5u].y;
        float _3361 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _600 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _604 = (cbMatDynParam._m0[5u].z * _593) + cbMatDynParam._m0[5u].w;
        float _3372 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) - _600)) + _600) < ((_434 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _446 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _447 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _467 = fma(_399, cbSceneParam._m0[5u].z, fma(_398, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _397));
    float _470 = fma(_399, cbSceneParam._m0[6u].z, fma(_398, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _397));
    float _473 = fma(_399, cbSceneParam._m0[7u].z, fma(_398, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _397));
    uint _486 = uint(roundEven(NORMAL.w)) * 13u;
    uint _488 = _486 + 9u;
    uint _489 = _488 + uint(cbMatDynParam._m0[0u].w);
    float _495 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0)))) * cbInstanceData._m0[_489].x;
    float _496 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0)))) * cbInstanceData._m0[_489].y;
    float _497 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0)))) * cbInstanceData._m0[_489].z;
    float _3383 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    float _3394 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _499 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _3405 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _500 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    vec4 _509 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _446, cbSceneParam._m0[86u].y * _447));
    float _513 = ((isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * TEXCOORD.z) * _509.x;
    float _514 = dot(vec3(_397, _398, _399), vec3(_425, _426, _427));
    float _517 = _514 * 2.0;
    float _521 = (_517 * _397) - _425;
    float _522 = (_517 * _398) - _426;
    float _523 = (_517 * _399) - _427;
    float _527 = abs(dot(vec3(_425, _426, _427), vec3(_397, _398, _399)));
    float _3416 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _529 = sqrt(_400);
    float _542 = exp2((_529 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_529 * 3.0));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _912;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _638 = fma(_582, cbModelParam._m0[26u].z, fma(_578, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _574));
        float _642 = fma(_582, cbModelParam._m0[27u].z, fma(_578, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _574));
        float _646 = fma(_582, cbModelParam._m0[28u].z, fma(_578, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _574));
        float _670 = _574 + _397;
        float _671 = _578 + _398;
        float _672 = _582 + _399;
        float _682 = fma(_672, cbModelParam._m0[26u].z, fma(_671, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _670)) - _638;
        float _683 = fma(_672, cbModelParam._m0[27u].z, fma(_671, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _670)) - _642;
        float _684 = fma(_672, cbModelParam._m0[28u].z, fma(_671, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _670)) - _646;
        float _688 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
        float _701 = ((_688 * _682) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_638 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_688 * _683) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_642 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _703 = ((_688 * _684) / cbModelParam._m0[34u].z) + ((((((_646 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        float _740 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_706.x + (-0.5));
        float _742 = _740 * (_706.y + (-0.5));
        float _743 = _740 * (_706.z + (-0.5));
        float _750 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_713.x + (-0.5));
        float _752 = _750 * (_713.y + (-0.5));
        float _753 = _750 * (_713.z + (-0.5));
        float _760 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_720.x + (-0.5));
        float _762 = _760 * (_720.y + (-0.5));
        float _763 = _760 * (_720.z + (-0.5));
        float _770 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_727.x + (-0.5));
        float _772 = _770 * (_727.y + (-0.5));
        float _773 = _770 * (_727.z + (-0.5));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = _741 * 0.5;
        float _778 = _751 * 0.5;
        float _779 = _761 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _794 = (dot(vec3(_397, _398, _399), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _804 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3464 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_806 + 1.0))) + _811) * _774;
        float _821 = _742 * 0.5;
        float _822 = _752 * 0.5;
        float _823 = _762 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _837 = (dot(vec3(_397, _398, _399), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _846 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3497 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_848 + 1.0))) + _853) * _775;
        float _863 = _743 * 0.5;
        float _864 = _753 * 0.5;
        float _865 = _763 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _879 = (dot(vec3(_397, _398, _399), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _888 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3530 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_890 + 1.0))) + _895) * _776;
        _912 = _743;
        _914 = _742;
        _915 = _741;
        _916 = _753;
        _917 = _752;
        _918 = _751;
        _919 = _763;
        _920 = _762;
        _921 = _761;
        _922 = _776;
        _923 = _775;
        _924 = _774;
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
    }
    else
    {
        _912 = _913;
        _914 = _913;
        _915 = _913;
        _916 = _913;
        _917 = _913;
        _918 = _913;
        _919 = _913;
        _920 = _913;
        _921 = _913;
        _922 = _913;
        _923 = _913;
        _924 = _913;
        _925 = 0.0;
        _926 = 0.0;
        _927 = 0.0;
    }
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _956 = fma(_582, cbModelParam._m0[30u].z, fma(_578, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _574));
        float _960 = fma(_582, cbModelParam._m0[31u].z, fma(_578, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _574));
        float _964 = fma(_582, cbModelParam._m0[32u].z, fma(_578, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _574));
        float _987 = _574 + _397;
        float _988 = _578 + _398;
        float _989 = _582 + _399;
        float _999 = fma(_989, cbModelParam._m0[30u].z, fma(_988, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _987)) - _956;
        float _1000 = fma(_989, cbModelParam._m0[31u].z, fma(_988, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _987)) - _960;
        float _1001 = fma(_989, cbModelParam._m0[32u].z, fma(_988, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _987)) - _964;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_956 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_960 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[35u].z) + ((((((_964 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1055 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1022.x + (-0.5));
        float _1057 = _1055 * (_1022.y + (-0.5));
        float _1058 = _1055 * (_1022.z + (-0.5));
        float _1065 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1029.x + (-0.5));
        float _1067 = _1065 * (_1029.y + (-0.5));
        float _1068 = _1065 * (_1029.z + (-0.5));
        float _1075 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1036.x + (-0.5));
        float _1077 = _1075 * (_1036.y + (-0.5));
        float _1078 = _1075 * (_1036.z + (-0.5));
        float _1085 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1043.x + (-0.5));
        float _1087 = _1085 * (_1043.y + (-0.5));
        float _1088 = _1085 * (_1043.z + (-0.5));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = _1056 * 0.5;
        float _1093 = _1066 * 0.5;
        float _1094 = _1076 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_397, _398, _399), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3593 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1119 + 1.0))) + _1124) * _1089;
        float _1134 = _1057 * 0.5;
        float _1135 = _1067 * 0.5;
        float _1136 = _1077 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_397, _398, _399), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3626 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1161 + 1.0))) + _1166) * _1090;
        float _1176 = _1058 * 0.5;
        float _1177 = _1068 * 0.5;
        float _1178 = _1078 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_397, _398, _399), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3659 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1203 + 1.0))) + _1208) * _1091;
        _1225 = _1058;
        _1226 = _1057;
        _1227 = _1056;
        _1228 = _1068;
        _1229 = _1067;
        _1230 = _1066;
        _1231 = _1078;
        _1232 = _1077;
        _1233 = _1076;
        _1234 = _1091;
        _1235 = _1090;
        _1236 = _1089;
        _1237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1239 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
    }
    else
    {
        _1225 = _913;
        _1226 = _913;
        _1227 = _913;
        _1228 = _913;
        _1229 = _913;
        _1230 = _913;
        _1231 = _913;
        _1232 = _913;
        _1233 = _913;
        _1234 = _913;
        _1235 = _913;
        _1236 = _913;
        _1237 = 0.0;
        _1238 = 0.0;
        _1239 = 0.0;
    }
    float _1249 = (cbModelParam._m0[1u].x * (_1237 - _925)) + _925;
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _926)) + _926;
    float _1251 = (cbModelParam._m0[1u].x * (_1239 - _927)) + _927;
    float _1272 = fma(_1251, cbSceneParam._m0[89u].z, fma(_1250, cbSceneParam._m0[89u].y, _1249 * cbSceneParam._m0[89u].x));
    float _1275 = fma(_1251, cbSceneParam._m0[90u].z, fma(_1250, cbSceneParam._m0[90u].y, _1249 * cbSceneParam._m0[90u].x));
    float _1278 = fma(_1251, cbSceneParam._m0[91u].z, fma(_1250, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1249));
    float _1293 = _521 * 0.5;
    float _1294 = _522 * 0.5;
    float _1295 = _523 * 0.5;
    float _1296 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_1227, _1230, _1233, _1236));
    float _1299 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1302 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_1225, _1228, _1231, _1234));
    float _1336;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1309 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_912, _916, _919, _922));
        float _1313 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_914, _917, _920, _923));
        float _1317 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_915, _918, _921, _924));
        float _1324 = dot(vec4(cbModelParam._m0[39u]), vec4(_1293, _1294, _1295, 1.0));
        _1336 = dot(vec3(isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1324) ? 0.0 : (isnan(0.0) ? _1324 : max(0.0, _1324))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1336 = 1.0;
    }
    float _1347;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1338 = dot(vec4(cbModelParam._m0[40u]), vec4(_1293, _1294, _1295, 1.0));
        _1347 = dot(vec3(isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1338) ? 0.0 : (isnan(0.0) ? _1338 : max(0.0, _1338))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1347 = 1.0;
    }
    float _1351 = (_1347 * cbModelParam._m0[1u].x) + (_1336 * (1.0 - cbModelParam._m0[1u].x));
    float _1361 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _400);
    float _1362 = isnan(_1361) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1361 : min(cbModelParam._m0[25u].z, _1361));
    float _1444;
    float _1446;
    float _1448;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1411 = fma(_582, cbModelParam._m0[13u].z, fma(_578, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _574)) + cbModelParam._m0[13u].w;
        float _1415 = fma(_582, cbModelParam._m0[14u].z, fma(_578, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _574)) + cbModelParam._m0[14u].w;
        float _1419 = fma(_582, cbModelParam._m0[15u].z, fma(_578, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _574)) + cbModelParam._m0[15u].w;
        float _1422 = fma(_523, cbModelParam._m0[13u].z, fma(_522, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _521));
        float _1425 = fma(_523, cbModelParam._m0[14u].z, fma(_522, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _521));
        float _1428 = fma(_523, cbModelParam._m0[15u].z, fma(_522, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _521));
        float _1456;
        if (_1422 > 0.0)
        {
            _1456 = abs((1.0 - _1411) / _1422);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1411 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1456 = frontier_phi_19_17_ladder;
        }
        float _1662;
        if (_1425 > 0.0)
        {
            _1662 = abs((1.0 - _1415) / _1425);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1415 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1662 = frontier_phi_28_24_ladder;
        }
        float _1905;
        if (_1428 > 0.0)
        {
            _1905 = abs((1.0 - _1419) / _1428);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1419 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1905 = frontier_phi_40_35_ladder;
        }
        float _1907 = isnan(_1662) ? _1456 : (isnan(_1456) ? _1662 : min(_1456, _1662));
        float _1908 = isnan(_1905) ? _1907 : (isnan(_1907) ? _1905 : min(_1907, _1905));
        float _1912 = (_1908 * _1422) + _1411;
        float _1913 = (_1908 * _1425) + _1415;
        float _1914 = (_1908 * _1428) + _1419;
        float _1915 = _1908 * 9.9999997473787516355514526367188e-05;
        float _1917 = (-1.0) - _1915;
        float _1919 = _1915 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1914 > _1919) || ((_1914 < _1917) || ((_1913 > _1919) || ((_1913 < _1917) || ((_1912 < _1917) || (_1912 > _1919))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2038 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1914, cbModelParam._m0[9u].z, fma(_1913, cbModelParam._m0[9u].y, _1912 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1914, cbModelParam._m0[10u].z, fma(_1913, cbModelParam._m0[10u].y, _1912 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1914, cbModelParam._m0[11u].z, fma(_1913, cbModelParam._m0[11u].y, _1912 * cbModelParam._m0[11u].x))), _1362);
            frontier_phi_18_40_ladder = _2038.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2038.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2038.x * cbModelParam._m0[1u].y;
        }
        _1444 = frontier_phi_18_40_ladder_2;
        _1446 = frontier_phi_18_40_ladder_1;
        _1448 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_521, _522, _523), _1362);
        _1444 = _1432.x * cbModelParam._m0[1u].y;
        _1446 = _1432.y * cbModelParam._m0[1u].y;
        _1448 = _1432.z * cbModelParam._m0[1u].y;
    }
    float _1452 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _400);
    float _1453 = isnan(_1452) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1452 : min(cbModelParam._m0[25u].w, _1452));
    float _1546;
    float _1548;
    float _1550;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1510 = fma(_582, cbModelParam._m0[21u].z, fma(_578, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _574)) + cbModelParam._m0[21u].w;
        float _1514 = fma(_582, cbModelParam._m0[22u].z, fma(_578, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _574)) + cbModelParam._m0[22u].w;
        float _1518 = fma(_582, cbModelParam._m0[23u].z, fma(_578, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _574)) + cbModelParam._m0[23u].w;
        float _1521 = fma(_523, cbModelParam._m0[21u].z, fma(_522, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _521));
        float _1524 = fma(_523, cbModelParam._m0[22u].z, fma(_522, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _521));
        float _1527 = fma(_523, cbModelParam._m0[23u].z, fma(_522, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _521));
        float _1667;
        if (_1521 > 0.0)
        {
            _1667 = abs((1.0 - _1510) / _1521);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1510 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1667 = frontier_phi_30_26_ladder;
        }
        float _1932;
        if (_1524 > 0.0)
        {
            _1932 = abs((1.0 - _1514) / _1524);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1514 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1932 = frontier_phi_42_37_ladder;
        }
        float _2137;
        if (_1527 > 0.0)
        {
            _2137 = abs((1.0 - _1518) / _1527);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1518 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2137 = frontier_phi_51_48_ladder;
        }
        float _2139 = isnan(_1932) ? _1667 : (isnan(_1667) ? _1932 : min(_1667, _1932));
        float _2140 = isnan(_2137) ? _2139 : (isnan(_2139) ? _2137 : min(_2139, _2137));
        float _2144 = (_2140 * _1521) + _1510;
        float _2145 = (_2140 * _1524) + _1514;
        float _2146 = (_2140 * _1527) + _1518;
        float _2147 = _2140 * 9.9999997473787516355514526367188e-05;
        float _2148 = (-1.0) - _2147;
        float _2150 = _2147 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2146 > _2150) || ((_2146 < _2148) || ((_2145 > _2150) || ((_2145 < _2148) || ((_2144 < _2148) || (_2144 > _2150))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2344 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2146, cbModelParam._m0[17u].z, fma(_2145, cbModelParam._m0[17u].y, _2144 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2146, cbModelParam._m0[18u].z, fma(_2145, cbModelParam._m0[18u].y, _2144 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2146, cbModelParam._m0[19u].z, fma(_2145, cbModelParam._m0[19u].y, _2144 * cbModelParam._m0[19u].x))), _1453);
            frontier_phi_27_51_ladder = _2344.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2344.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2344.x * cbModelParam._m0[1u].z;
        }
        _1546 = frontier_phi_27_51_ladder_2;
        _1548 = frontier_phi_27_51_ladder_1;
        _1550 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1530 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_521, _522, _523), _1453);
        _1546 = _1530.x * cbModelParam._m0[1u].z;
        _1548 = _1530.y * cbModelParam._m0[1u].z;
        _1550 = _1530.z * cbModelParam._m0[1u].z;
    }
    float _1562 = ((((1.0 - _542) * ((_529 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_542 * _529)) * _513;
    float _1563 = _1562 * ((cbModelParam._m0[1u].w * (_1546 - _1444)) + _1444);
    float _1564 = _1562 * ((cbModelParam._m0[1u].w * (_1548 - _1446)) + _1446);
    float _1565 = _1562 * ((cbModelParam._m0[1u].w * (_1550 - _1448)) + _1448);
    float _1568 = fma(_1565, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1563 * cbSceneParam._m0[89u].x));
    float _1571 = fma(_1565, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1563 * cbSceneParam._m0[90u].x));
    float _1574 = fma(_1565, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, _1563 * cbSceneParam._m0[91u].x));
    uvec4 _1584 = floatBitsToUint(cbInstanceData._m0[_486 + 5u]);
    uint _1586 = _1584.x * 14u;
    uint _1587 = _1586 + 13u;
    float _1594 = _513 + (-1.0);
    float _1599 = (cbLight._m0[_1587].x * _1594) + 1.0;
    float _1600 = (cbLight._m0[_1587].y * _1594) + 1.0;
    float _1601 = (cbLight._m0[_1587].z * _1594) + 1.0;
    float _1602 = (cbLight._m0[_1587].w * _1594) + 1.0;
    uint _1603 = _1586 + 5u;
    float _1609 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
    uint _1613 = _1586 + 4u;
    float _1620 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
    uint _1624 = _1586 | 1u;
    float _1635 = dot(vec3(cbLight._m0[_1586].xyz), vec3(_397, _398, _399));
    float _1638 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_397, _398, _399));
    float _3795 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _3806 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1643 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 0.3183098733425140380859375;
    float _1645 = (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * 0.3183098733425140380859375;
    float _1652 = ((cbLight._m0[_1603].x * _1609) * _1645) + ((cbLight._m0[_1613].x * _1620) * _1643);
    float _1653 = ((_1609 * cbLight._m0[_1603].y) * _1645) + ((_1620 * cbLight._m0[_1613].y) * _1643);
    float _1654 = ((_1609 * cbLight._m0[_1603].z) * _1645) + ((_1620 * cbLight._m0[_1613].z) * _1643);
    uvec4 _1659 = floatBitsToUint(cbLight._m0[_1586 + 12u]);
    bool _1661 = _1659.x == 0u;
    float _1672;
    float _1674;
    float _1676;
    if (_1661)
    {
        _1672 = _1652;
        _1674 = _1653;
        _1676 = _1654;
    }
    else
    {
        uint _1680 = _1586 + 6u;
        float _1696 = (dot(vec3(cbLight._m0[_1586 + 2u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _1697 = _1696 * _1696;
        float _3817 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1699 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1672 = (((cbLight._m0[_1680].x * 0.3183098733425140380859375) * _1698) * _1699) + _1652;
        _1674 = (((cbLight._m0[_1680].y * 0.3183098733425140380859375) * _1698) * _1699) + _1653;
        _1676 = (((cbLight._m0[_1680].z * 0.3183098733425140380859375) * _1698) * _1699) + _1654;
    }
    bool _1679 = _1659.y == 0u;
    float _1717;
    float _1719;
    float _1721;
    if (_1679)
    {
        _1717 = _1672;
        _1719 = _1674;
        _1721 = _1676;
    }
    else
    {
        uint _1876 = _1586 + 7u;
        float _1892 = (dot(vec3(cbLight._m0[_1586 + 3u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _1893 = _1892 * _1892;
        float _3833 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1895 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _1717 = (((cbLight._m0[_1876].x * 0.3183098733425140380859375) * _1894) * _1895) + _1672;
        _1719 = (((cbLight._m0[_1876].y * 0.3183098733425140380859375) * _1894) * _1895) + _1674;
        _1721 = (((cbLight._m0[_1876].z * 0.3183098733425140380859375) * _1894) * _1895) + _1676;
    }
    uint _1724 = _1586 + 8u;
    float _1737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1586].w)) * _400) * 0.949999988079071044921875);
    float _1738 = _1737 * _1737;
    float _1739 = cbLight._m0[_1586].x + _425;
    float _1740 = cbLight._m0[_1586].y + _426;
    float _1741 = cbLight._m0[_1586].z + _427;
    float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
    float _1746 = _1745 * _1739;
    float _1747 = _1745 * _1740;
    float _1748 = _1745 * _1741;
    float _1749 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1586].xyz));
    float _3849 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1752 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _1753 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _1754 = dot(vec3(_397, _398, _399), vec3(_1746, _1747, _1748));
    float _3871 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _1758 = dot(vec3(cbLight._m0[_1586].xyz), vec3(_1746, _1747, _1748));
    float _3882 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1762 = _1738 * _1738;
    float _1766 = ((_1757 * _1757) * (_1762 + (-1.0))) + 1.0;
    float _1777 = (exp2(log2(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1778 = 1.0 - _1738;
    float _1789 = (0.5 / (((_1753 * ((_1752 * _1778) + _1738)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1778) + _1738) * _1752))) * _1752;
    float _3893 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1791 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1762 / ((_1766 * _1766) * 3.141590118408203125));
    uint _1802 = _1586 + 9u;
    float _1813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1624].w)) * _400) * 0.949999988079071044921875);
    float _1814 = _1813 * _1813;
    float _1815 = cbLight._m0[_1624].x + _425;
    float _1816 = cbLight._m0[_1624].y + _426;
    float _1817 = cbLight._m0[_1624].z + _427;
    float _1821 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
    float _1822 = _1821 * _1815;
    float _1823 = _1821 * _1816;
    float _1824 = _1821 * _1817;
    float _1825 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1624].xyz));
    float _3904 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _1829 = dot(vec3(_397, _398, _399), vec3(_1822, _1823, _1824));
    float _3915 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _1833 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_1822, _1823, _1824));
    float _3926 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1837 = _1814 * _1814;
    float _1841 = ((_1832 * _1832) * (_1837 + (-1.0))) + 1.0;
    float _1850 = (exp2(log2(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1851 = 1.0 - _1814;
    float _1861 = (0.5 / (((_1753 * ((_1828 * _1851) + _1814)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1851) + _1814) * _1828))) * _1828;
    float _3937 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1863 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1837 / ((_1841 * _1841) * 3.141590118408203125));
    float _1873 = (((_1850 * cbLight._m0[_1802].x) * _1863) * _1609) + (((_1777 * cbLight._m0[_1724].x) * _1791) * _1620);
    float _1874 = (((_1850 * cbLight._m0[_1802].y) * _1863) * _1609) + (((_1777 * cbLight._m0[_1724].y) * _1791) * _1620);
    float _1875 = (((_1850 * cbLight._m0[_1802].z) * _1863) * _1609) + (((_1777 * cbLight._m0[_1724].z) * _1791) * _1620);
    float _1937;
    float _1939;
    float _1941;
    if (_1661)
    {
        _1937 = _1873;
        _1939 = _1874;
        _1941 = _1875;
    }
    else
    {
        uint _1943 = _1586 + 2u;
        uint _1947 = _1586 + 10u;
        float _1961 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _400) * 0.949999988079071044921875);
        float _1962 = _1961 * _1961;
        float _1963 = cbLight._m0[_1943].x + _425;
        float _1964 = cbLight._m0[_1943].y + _426;
        float _1965 = cbLight._m0[_1943].z + _427;
        float _1969 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
        float _1970 = _1969 * _1963;
        float _1971 = _1969 * _1964;
        float _1972 = _1969 * _1965;
        float _1973 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1943].xyz));
        float _3948 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1976 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1977 = dot(vec3(_397, _398, _399), vec3(_1970, _1971, _1972));
        float _3959 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1980 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1981 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_1970, _1971, _1972));
        float _3970 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1985 = _1962 * _1962;
        float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
        float _1998 = (exp2(log2(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1999 = 1.0 - _1962;
        float _2009 = (0.5 / (((_1753 * ((_1976 * _1999) + _1962)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1999) + _1962) * _1976))) * _1976;
        float _3981 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2011 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
        float _2012 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1937 = (((_1998 * cbLight._m0[_1947].x) * _2011) * _2012) + _1873;
        _1939 = (((_1998 * cbLight._m0[_1947].y) * _2011) * _2012) + _1874;
        _1941 = (((_1998 * cbLight._m0[_1947].z) * _2011) * _2012) + _1875;
    }
    float _2047;
    float _2049;
    float _2051;
    if (_1679)
    {
        _2047 = _1937;
        _2049 = _1939;
        _2051 = _1941;
    }
    else
    {
        uint _2058 = _1586 + 3u;
        uint _2062 = _1586 + 11u;
        float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _400) * 0.949999988079071044921875);
        float _2077 = _2076 * _2076;
        float _2078 = cbLight._m0[_2058].x + _425;
        float _2079 = cbLight._m0[_2058].y + _426;
        float _2080 = cbLight._m0[_2058].z + _427;
        float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
        float _2085 = _2084 * _2078;
        float _2086 = _2084 * _2079;
        float _2087 = _2084 * _2080;
        float _2088 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_2058].xyz));
        float _3997 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2091 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _2092 = dot(vec3(_397, _398, _399), vec3(_2085, _2086, _2087));
        float _4008 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _2096 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2085, _2086, _2087));
        float _4019 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2100 = _2077 * _2077;
        float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
        float _2113 = (exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2114 = 1.0 - _2077;
        float _2124 = (0.5 / (((_1753 * ((_2091 * _2114) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _2114) + _2077) * _2091))) * _2091;
        float _4030 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2126 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
        float _2127 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _2047 = (((_2113 * cbLight._m0[_2062].x) * _2126) * _2127) + _1937;
        _2049 = (((_2113 * cbLight._m0[_2062].y) * _2126) * _2127) + _1939;
        _2051 = (((_2113 * cbLight._m0[_2062].z) * _2126) * _2127) + _1941;
    }
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    if (_1584.y == 0u)
    {
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2202;
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2202;
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2202;
        uvec4 _2217 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2218 = _2217.x;
        uint _2229 = uint((float(_2217.y) * floor(float(uint(cbSceneParam._m0[85u].y * _447) / _2218))) + floor(float(uint(cbSceneParam._m0[85u].x * _446) / _2218)));
        float _2239 = (log2(_2205 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2240 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        uint _2243 = uint(isnan(14.0) ? _2240 : (isnan(_2240) ? 14.0 : min(_2240, 14.0)));
        uvec4 _2248 = texelFetch(g_lightClusterGridBuffer, int(((_2243 << 2u) + (_2229 << 6u)) >> 2u));
        uint _2249 = _2248.x;
        uint _2250 = _2217.z;
        float _2349;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        if (((((1u << ((_2250 >> 4u) & 15u)) + 4294967295u) & _2249) == 0u) || ((_2250 & 240u) == 0u))
        {
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
        }
        else
        {
            float _2350;
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            uint _2507 = 0u;
            uint _2516;
            bool _2517;
            for (;;)
            {
                _2516 = texelFetch(g_lightClassification, int((((_2243 << 5u) + (_2229 << 9u)) + (_2507 << 2u)) >> 2u)).x;
                _2517 = _2516 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2517)
                {
                    frontier_phi_68_pred = _2503;
                    frontier_phi_68_pred_1 = _2506;
                    frontier_phi_68_pred_2 = _2505;
                    frontier_phi_68_pred_3 = _2504;
                    frontier_phi_68_pred_4 = _2502;
                    frontier_phi_68_pred_5 = _2501;
                }
                else
                {
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    uint _2652;
                    _2646 = _2501;
                    _2647 = _2502;
                    _2648 = _2503;
                    _2649 = _2504;
                    _2650 = _2505;
                    _2651 = _2506;
                    _2652 = _2516;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    for (;;)
                    {
                        uint _2656 = uint(findLSB(_2652)) + (_2507 << 5u);
                        uint _2653 = (_2652 + 4294967295u) & _2652;
                        uint _2658 = _2656 * 48u;
                        vec4 _2672 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2658)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 3u)).x));
                        uint _2678 = (_2656 * 48u) + 4u;
                        vec4 _2691 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2678)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 3u)).x));
                        uint _2697 = (_2656 * 48u) + 8u;
                        vec3 _2708 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2697)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 2u)).x));
                        float _2712 = _2672.x - _2203;
                        float _2713 = _2672.y - _2204;
                        float _2714 = _2672.z - _2205;
                        float _2715 = dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714));
                        float _2718 = inversesqrt(_2715);
                        float _2719 = _2718 * _2712;
                        float _2720 = _2718 * _2713;
                        float _2721 = _2718 * _2714;
                        float _2722 = dot(vec3(_467, _470, _473), vec3(_2719, _2720, _2721));
                        float _2727 = 1.0 - (_2715 * _2672.w);
                        float _4056 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2728 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2729 = sqrt(_2715) * _2691.w;
                        float _2732 = 1.39999997615814208984375 / (_2729 + 1.39999997615814208984375);
                        float _2733 = _2732 * _2732;
                        float _2736 = ((1.0 - _2733) * _2722) + _2733;
                        float _2739 = _2729 * _2729;
                        float _2743 = ((isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0))) * _2728) / ((_2739 * 0.699999988079071044921875) + 1.0);
                        float _2747 = (-0.0) - _2203;
                        float _2748 = (-0.0) - _2204;
                        float _2749 = (-0.0) - _2205;
                        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
                        float _2754 = _2753 * _2747;
                        float _2755 = _2753 * _2748;
                        float _2756 = _2753 * _2749;
                        float _2764 = exp2(log2(1.0 / ((_2739 * 3.5) + 5.0)) * 0.25);
                        float _2765 = 1.0 - _529;
                        float _2772 = sqrt(1.0 - ((1.0 - (_2765 * _2765)) * (1.0 - (_2764 * _2764))));
                        float _2773 = _2772 * _2772;
                        float _2774 = _2773 * _2773;
                        float _2775 = _2754 + _2719;
                        float _2776 = _2755 + _2720;
                        float _2777 = _2756 + _2721;
                        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
                        float _2785 = dot(vec3(_467, _470, _473), vec3(_2754, _2755, _2756));
                        float _4072 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2788 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                        float _2789 = dot(vec3(_467, _470, _473), vec3(_2781 * _2775, _2781 * _2776, _2781 * _2777));
                        float _4083 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2792 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                        float _2796 = ((_2792 * _2792) * (_2774 + (-1.0))) + 1.0;
                        float _2797 = _2732 * _2773;
                        float _2798 = _2797 * _2797;
                        float _2801 = ((1.0 - _2798) * _2722) + _2798;
                        float _4094 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2802 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                        float _2803 = 1.0 - _2773;
                        float _2813 = (0.5 / (((_2802 * ((_2788 * _2803) + _2773)) + 9.9999999392252902907785028219223e-09) + (((_2802 * _2803) + _2773) * _2788))) * _2802;
                        float _4105 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2824 = (((_2774 * 3.1415927410125732421875) * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) / ((_2796 * _2796) * ((_2739 * 2.1991131305694580078125) + 3.141590118408203125))) * _2728;
                        _2576 = (_2743 * _2691.x) + _2649;
                        _2577 = (_2743 * _2691.y) + _2650;
                        _2578 = (_2743 * _2691.z) + _2651;
                        _2573 = (_2824 * _2708.x) + _2646;
                        _2574 = (_2824 * _2708.y) + _2647;
                        _2575 = (_2824 * _2708.z) + _2648;
                        if (_2653 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2646 = _2573;
                            _2647 = _2574;
                            _2648 = _2575;
                            _2649 = _2576;
                            _2650 = _2577;
                            _2651 = _2578;
                            _2652 = _2653;
                        }
                    }
                    frontier_phi_68_pred = _2575;
                    frontier_phi_68_pred_1 = _2578;
                    frontier_phi_68_pred_2 = _2577;
                    frontier_phi_68_pred_3 = _2576;
                    frontier_phi_68_pred_4 = _2574;
                    frontier_phi_68_pred_5 = _2573;
                }
                _2354 = frontier_phi_68_pred;
                _2360 = frontier_phi_68_pred_1;
                _2358 = frontier_phi_68_pred_2;
                _2356 = frontier_phi_68_pred_3;
                _2352 = frontier_phi_68_pred_4;
                _2350 = frontier_phi_68_pred_5;
                uint _2508 = _2507 + 1u;
                if (_2508 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2501 = _2350;
                    _2502 = _2352;
                    _2503 = _2354;
                    _2504 = _2356;
                    _2505 = _2358;
                    _2506 = _2360;
                    _2507 = _2508;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
        }
        uvec4 _2363 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2364 = _2363.z;
        uint _2366 = (_2364 >> 8u) & 15u;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        if (((4294967295u << _2366) & _2249) == 0u)
        {
            _2469 = _2349;
            _2471 = _2351;
            _2473 = _2353;
            _2475 = _2355;
            _2477 = _2357;
            _2479 = _2359;
        }
        else
        {
            float _2494 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
            float _2495 = _2494 * _2203;
            float _2496 = _2494 * _2204;
            float _2497 = _2494 * _2205;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2366 < ((_2364 >> 12u) & 15u))
            {
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2629 = _2349;
                float _2630 = _2351;
                float _2631 = _2353;
                float _2632 = _2355;
                float _2633 = _2357;
                float _2634 = _2359;
                uint _2635 = _2366;
                uint _2644;
                bool _2645;
                for (;;)
                {
                    _2644 = texelFetch(g_lightClassification, int((((_2243 << 5u) + (_2229 << 9u)) + (_2635 << 2u)) >> 2u)).x;
                    _2645 = _2644 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2645)
                    {
                        frontier_phi_79_pred = _2634;
                        frontier_phi_79_pred_1 = _2633;
                        frontier_phi_79_pred_2 = _2632;
                        frontier_phi_79_pred_3 = _2631;
                        frontier_phi_79_pred_4 = _2630;
                        frontier_phi_79_pred_5 = _2629;
                    }
                    else
                    {
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _2851 = _2629;
                        float _2852 = _2630;
                        float _2853 = _2631;
                        float _2854 = _2632;
                        float _2855 = _2633;
                        float _2856 = _2634;
                        uint _2857 = _2644;
                        uint _2858;
                        vec4 _2883;
                        float _2884;
                        vec4 _2899;
                        vec3 _2911;
                        vec4 _2927;
                        vec4 _2943;
                        float _2990;
                        bool _2991;
                        for (;;)
                        {
                            uint _2868 = ((_2635 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2857));
                            _2858 = (_2857 + 4294967295u) & _2857;
                            uint _2870 = _2868 * 40u;
                            _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            _2884 = _2883.w;
                            uint _2886 = (_2868 * 40u) + 4u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2901 = (_2868 * 40u) + 8u;
                            _2911 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x));
                            uint _2914 = (_2868 * 40u) + 16u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            uint _2930 = (_2868 * 40u) + 20u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2946 = (_2868 * 40u) + 24u;
                            vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2965 = (_2868 * 40u) + 28u;
                            vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            _2990 = fma(_2205, _2978.z, fma(_2204, _2978.y, _2978.x * _2203)) + _2978.w;
                            _2991 = !((fma(_2205, _2959.z, fma(_2204, _2959.y, _2959.x * _2203)) + _2959.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2991)
                            {
                                float _3018 = _2883.x - _2203;
                                float _3019 = _2883.y - _2204;
                                float _3020 = _2883.z - _2205;
                                float _3021 = dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020));
                                float _3024 = inversesqrt(_3021);
                                float _3025 = _3024 * _3018;
                                float _3026 = _3024 * _3019;
                                float _3027 = _3024 * _3020;
                                float _3031 = 1.0 - (_3021 / (_2884 * _2884));
                                float _4116 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3032 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3036 = sqrt(_3021) * _2899.w;
                                float _3038 = 1.39999997615814208984375 / (_3036 + 1.39999997615814208984375);
                                float _3039 = _3038 * _3038;
                                float _3042 = ((1.0 - _3039) * dot(vec3(_3025, _3026, _3027), vec3(_467, _470, _473))) + _3039;
                                float _3045 = _3036 * _3036;
                                float _3049 = (fma(_2205, _2927.z, fma(_2204, _2927.y, _2927.x * _2203)) + _2927.w) / _2990;
                                float _3050 = (fma(_2205, _2943.z, fma(_2204, _2943.y, _2943.x * _2203)) + _2943.w) / _2990;
                                float _3054 = 1.0 - dot(vec2(_3049, _3050), vec2(_3049, _3050));
                                float _4132 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3055 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3056 = _3055 * (((isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))) * _3032) / ((_3045 * 0.699999988079071044921875) + 1.0));
                                float _3068 = exp2(log2(1.0 / ((_3045 * 3.5) + 5.0)) * 0.25);
                                float _3069 = 1.0 - _529;
                                float _3076 = sqrt(1.0 - ((1.0 - (_3069 * _3069)) * (1.0 - (_3068 * _3068))));
                                float _3077 = _3076 * _3076;
                                float _3078 = _3077 * _3077;
                                float _3079 = _3025 - _2495;
                                float _3080 = _3026 - _2496;
                                float _3081 = _3027 - _2497;
                                float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                                float _3089 = dot(vec3(_467, _470, _473), vec3((-0.0) - _2495, (-0.0) - _2496, (-0.0) - _2497));
                                float _4143 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3092 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                                float _3093 = dot(vec3(_467, _470, _473), vec3(_3085 * _3079, _3085 * _3080, _3085 * _3081));
                                float _4154 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3096 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3100 = ((_3096 * _3096) * (_3078 + (-1.0))) + 1.0;
                                float _3101 = _3038 * _3077;
                                float _3102 = _3101 * _3101;
                                float _3108 = ((1.0 - _3102) * dot(vec3(_467, _470, _473), vec3(_3025, _3026, _3027))) + _3102;
                                float _4165 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3109 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                                float _3110 = 1.0 - _3077;
                                float _3120 = (0.5 / (((_3109 * ((_3092 * _3110) + _3077)) + 9.9999999392252902907785028219223e-09) + (((_3109 * _3110) + _3077) * _3092))) * _3109;
                                float _4176 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3130 = (_3055 * _3032) * (((_3078 * 3.1415927410125732421875) * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) / ((_3100 * _3100) * ((_3045 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3056 * _2899.z;
                                frontier_phi_85_pred_1 = _3056 * _2899.y;
                                frontier_phi_85_pred_2 = _3056 * _2899.x;
                                frontier_phi_85_pred_3 = _3130 * _2911.z;
                                frontier_phi_85_pred_4 = _3130 * _2911.y;
                                frontier_phi_85_pred_5 = _3130 * _2911.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3139 = frontier_phi_85_pred;
                            _3138 = frontier_phi_85_pred_1;
                            _3137 = frontier_phi_85_pred_2;
                            _3136 = frontier_phi_85_pred_3;
                            _3135 = frontier_phi_85_pred_4;
                            _3134 = frontier_phi_85_pred_5;
                            _2841 = _3137 + _2854;
                            _2842 = _3138 + _2855;
                            _2843 = _3139 + _2856;
                            _2838 = _3134 + _2851;
                            _2839 = _3135 + _2852;
                            _2840 = _3136 + _2853;
                            if (_2858 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2858;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2843;
                        frontier_phi_79_pred_1 = _2842;
                        frontier_phi_79_pred_2 = _2841;
                        frontier_phi_79_pred_3 = _2840;
                        frontier_phi_79_pred_4 = _2839;
                        frontier_phi_79_pred_5 = _2838;
                    }
                    _2480 = frontier_phi_79_pred;
                    _2478 = frontier_phi_79_pred_1;
                    _2476 = frontier_phi_79_pred_2;
                    _2474 = frontier_phi_79_pred_3;
                    _2472 = frontier_phi_79_pred_4;
                    _2470 = frontier_phi_79_pred_5;
                    uint _2636 = _2635 + 1u;
                    if (_2636 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2629 = _2470;
                        _2630 = _2472;
                        _2631 = _2474;
                        _2632 = _2476;
                        _2633 = _2478;
                        _2634 = _2480;
                        _2635 = _2636;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2476;
                frontier_phi_60_61_ladder_1 = _2480;
                frontier_phi_60_61_ladder_2 = _2478;
                frontier_phi_60_61_ladder_3 = _2474;
                frontier_phi_60_61_ladder_4 = _2472;
                frontier_phi_60_61_ladder_5 = _2470;
            }
            else
            {
                frontier_phi_60_61_ladder = _2355;
                frontier_phi_60_61_ladder_1 = _2359;
                frontier_phi_60_61_ladder_2 = _2357;
                frontier_phi_60_61_ladder_3 = _2353;
                frontier_phi_60_61_ladder_4 = _2351;
                frontier_phi_60_61_ladder_5 = _2349;
            }
            _2469 = frontier_phi_60_61_ladder_5;
            _2471 = frontier_phi_60_61_ladder_4;
            _2473 = frontier_phi_60_61_ladder_3;
            _2475 = frontier_phi_60_61_ladder;
            _2477 = frontier_phi_60_61_ladder_2;
            _2479 = frontier_phi_60_61_ladder_1;
        }
        float _2484 = isnan(1.0) ? _513 : (isnan(_513) ? 1.0 : min(_513, 1.0));
        _2261 = (_2484 * _2475) + _1717;
        _2263 = (_2484 * _2477) + _1719;
        _2265 = (_2484 * _2479) + _1721;
        _2267 = ((_2469 * 0.039999999105930328369140625) * _2484) + _2047;
        _2269 = ((_2471 * 0.039999999105930328369140625) * _2484) + _2049;
        _2271 = ((_2473 * 0.039999999105930328369140625) * _2484) + _2051;
    }
    else
    {
        _2261 = _1717;
        _2263 = _1719;
        _2265 = _1721;
        _2267 = _2047;
        _2269 = _2049;
        _2271 = _2051;
    }
    float _4192 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4203 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _4214 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _2288 = ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2261 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _513))) + ((_2267 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1351)) * cbPerFrame._m0[3u].x);
    float _2289 = ((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2263 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _513))) + ((_2269 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1351)) * cbPerFrame._m0[3u].x);
    float _2290 = ((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2265 + ((isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))) * _513))) + ((_2271 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _1351)) * cbPerFrame._m0[3u].x);
    uint _2291 = _486 + 6u;
    float _2299 = _446 / cbSceneParam._m0[86u].x;
    float _2300 = _447 / cbSceneParam._m0[86u].y;
    vec4 _2314 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2299, _2300, (log2((isnan(cbSceneParam._m0[77u].w) ? _420 : (isnan(_420) ? cbSceneParam._m0[77u].w : min(_420, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2316 = _2314.x;
    float _2317 = _2314.y;
    float _2318 = _2314.z;
    float _2319 = _2314.w;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    if (_420 > cbSceneParam._m0[78u].w)
    {
        float _2374 = isnan(_420) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _420 : min(cbSceneParam._m0[80u].w, _420));
        float _2375 = _2374 / _420;
        float _2386 = _2375 * _269;
        float _2387 = _270 * _2375;
        float _2388 = (-0.0) - _2387;
        float _2389 = _2375 * _271;
        float _2391 = (cbSceneParam._m0[77u].w * _2388) / _2374;
        float _2392 = _2391 + cbSceneParam._m0[79u].w;
        float _2393 = cbSceneParam._m0[79u].w - _2387;
        float _2399 = sqrt(((_2386 * _2386) + (_2387 * _2387)) + (_2389 * _2389));
        float _2402 = (1.0 - (cbSceneParam._m0[77u].w / _2374)) * _2399;
        float _2407 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2409 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2586;
        if (abs((_2388 - _2391) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2586 = ((((_2392 > 0.0) ? exp2(_2407 * _2392) : (2.0 - exp2(_2409 * _2392))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2402;
        }
        else
        {
            float _2530 = 1.0 / cbSceneParam._m0[80u].x;
            float _2531 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : max(_2392, _2393));
            float _2532 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : min(_2392, _2393));
            float _2541 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : min(_2531, 0.0));
            float _2542 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : min(_2532, 0.0));
            _2586 = ((abs(_2399 / _2388) * cbSceneParam._m0[80u].y) * ((((_2541 - _2542) * 2.0) - ((exp2(_2407 * (isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0)))) - exp2(_2407 * (isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0))))) * _2530)) - ((exp2(_2409 * _2541) - exp2(_2409 * _2542)) * _2530))) + (_2402 * cbSceneParam._m0[80u].z);
        }
        vec4 _2588 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2299, _2300, 1.0), 0.0);
        float _2597 = exp2((_2586 * (-1.44269502162933349609375)) * (1.0 - _2588.w));
        float _2598 = log2(_2597);
        float _2614 = log2(_2319);
        _2411 = (exp2(_2614 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].x)) * _2588.x) / cbSceneParam._m0[78u].x)) + _2316;
        _2413 = (exp2(_2614 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].y)) * _2588.y) / cbSceneParam._m0[78u].y)) + _2317;
        _2415 = (exp2(_2614 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].z)) * _2588.z) / cbSceneParam._m0[78u].z)) + _2318;
        _2417 = _2597 * _2319;
    }
    else
    {
        _2411 = _2316;
        _2413 = _2317;
        _2415 = _2318;
        _2417 = _2319;
    }
    bool _2624;
    vec4 _2427;
    vec4 _2449;
    float _2451;
    float _2455;
    float _2456;
    float _2457;
    float _2458;
    bool _2468;
    for (;;)
    {
        _2427 = cbMatDynParam._m0[0u];
        float _2429 = roundEven(_2427.y);
        bool _2430 = _2429 == 3.0;
        float _2431 = log2(_2417);
        float _2438 = exp2(_2431 * cbSceneParam._m0[78u].x) * _2288;
        float _2439 = exp2(_2431 * cbSceneParam._m0[78u].y) * _2289;
        float _2440 = exp2(_2431 * cbSceneParam._m0[78u].z) * _2290;
        float _2447 = _434 + (-0.5);
        _2449 = cbMtdParam._m0[1u];
        _2451 = _2449.y * _2447;
        float _2454 = (_2429 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2455 = _2454 * (_2430 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2411)));
        _2456 = _2454 * (_2430 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2413)));
        _2457 = _2454 * (_2430 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2415)));
        _2458 = _2447 * 0.999000012874603271484375;
        _2468 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2468)
        {
            if ((cbInstanceData._m0[_486 + 7u].x + _2458) < 0.5)
            {
                _2624 = true;
                break;
            }
        }
        uint _2565 = _488 + uint(_2427.w);
        if ((cbInstanceData._m0[_2565].w < 1.0) && ((cbInstanceData._m0[_2565].w + _2458) < 0.5))
        {
            _2624 = true;
            break;
        }
        if ((_2451 + _342) < _2449.x)
        {
            _2624 = true;
            break;
        }
        _2624 = false;
        break;
    }
    float _2829;
    if (_2624)
    {
        discard_state = true;
        _2829 = 0.0;
    }
    else
    {
        _2829 = cbInstanceData._m0[_2291].w;
    }
    SV_Target.x = _2455;
    SV_Target.y = _2456;
    SV_Target.z = _2457;
    SV_Target.w = _2829;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2291].w;
    discard_exit();
}


