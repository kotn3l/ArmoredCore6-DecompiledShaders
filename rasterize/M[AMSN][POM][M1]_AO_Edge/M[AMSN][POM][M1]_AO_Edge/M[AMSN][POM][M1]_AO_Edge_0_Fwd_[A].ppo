#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _948;
float _3339;
float _3340;
float _3341;
float _3342;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _282 = dot(vec3(_271, _272, _273), vec3(_194, _195, _196));
    float _285 = dot(vec3(_271, _272, _273), vec3(_208, _209, _210));
    float _288 = dot(vec3(_271, _272, _273), vec3(_215, _216, _217));
    float _294 = inversesqrt(dot(vec3(_282, _285, _288), vec3(_282, _285, _288)));
    vec4 _307 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _318 = dot(vec4(_307), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _326 = (((cbMtdParam._m0[10u].y * _282) * _294) * _318) + TEXCOORD.x;
    float _327 = (((_285 * cbMtdParam._m0[10u].y) * _294) * _318) + TEXCOORD.y;
    vec4 _339 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_326 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_327 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _344 = _339.w;
    float _345 = _339.x * cbMtdParam._m0[9u].x;
    float _346 = _339.y * cbMtdParam._m0[9u].y;
    float _347 = _339.z * cbMtdParam._m0[9u].z;
    vec4 _359 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _361 = _359.x;
    vec4 _373 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _326) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _327) + cbTextureTilingScale._m0[3u].w));
    float _377 = _373.z;
    float _382 = (_373.x * 2.0) + (-1.0);
    float _384 = (_373.y * 2.0) + (-1.0);
    float _385 = dot(vec2(_382, _384), vec2(_382, _384));
    float _3351 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _390 = sqrt(1.0 - (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))));
    float _393 = fma(_390, _215, fma(_384, _208, _382 * _194));
    float _396 = fma(_390, _216, fma(_384, _209, _382 * _195));
    float _399 = fma(_390, _217, fma(_384, _210, _382 * _196));
    float _403 = inversesqrt(dot(vec3(_393, _396, _399), vec3(_393, _396, _399)));
    float _404 = _403 * _393;
    float _405 = _403 * _396;
    float _406 = _403 * _399;
    float _408 = cbMtdParam._m0[10u].x + _373.w;
    float _412 = inversesqrt(dot(vec3(_404, _405, _406), vec3(_404, _405, _406)));
    float _413 = _412 * _404;
    float _414 = _412 * _405;
    float _415 = _412 * _406;
    float _3362 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _416 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    float _3373 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3384 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3395 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3406 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3417 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _421 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _437 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _441 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _442 = _271 * _441;
    float _443 = _272 * _441;
    float _444 = _273 * _441;
    vec4 _449 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _451 = _449.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _628 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _634 = (cbMatDynParam._m0[5u].x * _628) + cbMatDynParam._m0[5u].y;
        float _3428 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _635 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _639 = (cbMatDynParam._m0[5u].z * _628) + cbMatDynParam._m0[5u].w;
        float _3439 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) - _635)) + _635) < ((_451 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _463 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _464 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _484 = fma(_415, cbSceneParam._m0[5u].z, fma(_414, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _413));
    float _487 = fma(_415, cbSceneParam._m0[6u].z, fma(_414, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _413));
    float _490 = fma(_415, cbSceneParam._m0[7u].z, fma(_414, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _413));
    uint _503 = uint(roundEven(NORMAL.w)) * 13u;
    uint _505 = _503 + 9u;
    uint _506 = _505 + uint(cbMatDynParam._m0[0u].w);
    float _512 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) * cbInstanceData._m0[_506].x;
    float _513 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * cbInstanceData._m0[_506].y;
    float _514 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_506].z;
    float _3450 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _3461 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _516 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _3472 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _518 = 1.0 - _421;
    float _519 = _515 * _518;
    float _520 = _516 * _518;
    float _521 = _517 * _518;
    float _526 = (_515 + (-0.039999999105930328369140625)) * _421;
    float _527 = (_516 + (-0.039999999105930328369140625)) * _421;
    float _528 = (_517 + (-0.039999999105930328369140625)) * _421;
    float _529 = _526 + 0.039999999105930328369140625;
    float _531 = _527 + 0.039999999105930328369140625;
    float _532 = _528 + 0.039999999105930328369140625;
    vec4 _541 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _463, cbSceneParam._m0[86u].y * _464));
    float _545 = ((isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * TEXCOORD.z) * _541.x;
    float _546 = dot(vec3(_413, _414, _415), vec3(_442, _443, _444));
    float _549 = _546 * 2.0;
    float _553 = (_549 * _413) - _442;
    float _554 = (_549 * _414) - _443;
    float _555 = (_549 * _415) - _444;
    float _559 = abs(dot(vec3(_442, _443, _444), vec3(_413, _414, _415)));
    float _3483 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _561 = sqrt(_416);
    float _574 = exp2((_561 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_561 * 3.0));
    float _580 = (1.0 - _574) * ((_561 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _581 = _574 * _561;
    float _609 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _947;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _673 = fma(_617, cbModelParam._m0[26u].z, fma(_613, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _609));
        float _677 = fma(_617, cbModelParam._m0[27u].z, fma(_613, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _609));
        float _681 = fma(_617, cbModelParam._m0[28u].z, fma(_613, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _609));
        float _705 = _609 + _413;
        float _706 = _613 + _414;
        float _707 = _617 + _415;
        float _717 = fma(_707, cbModelParam._m0[26u].z, fma(_706, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _705)) - _673;
        float _718 = fma(_707, cbModelParam._m0[27u].z, fma(_706, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _705)) - _677;
        float _719 = fma(_707, cbModelParam._m0[28u].z, fma(_706, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _705)) - _681;
        float _723 = inversesqrt(dot(vec3(_717, _718, _719), vec3(_717, _718, _719)));
        float _736 = ((_723 * _717) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_673 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _737 = ((_723 * _718) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_677 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _738 = ((_723 * _719) / cbModelParam._m0[34u].z) + ((((((_681 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        float _775 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_741.x + (-0.5));
        float _777 = _775 * (_741.y + (-0.5));
        float _778 = _775 * (_741.z + (-0.5));
        float _785 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_748.x + (-0.5));
        float _787 = _785 * (_748.y + (-0.5));
        float _788 = _785 * (_748.z + (-0.5));
        float _795 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_755.x + (-0.5));
        float _797 = _795 * (_755.y + (-0.5));
        float _798 = _795 * (_755.z + (-0.5));
        float _805 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_762.x + (-0.5));
        float _807 = _805 * (_762.y + (-0.5));
        float _808 = _805 * (_762.z + (-0.5));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = _776 * 0.5;
        float _813 = _786 * 0.5;
        float _814 = _796 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _829 = (dot(vec3(_413, _414, _415), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _839 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3531 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_841 + 1.0))) + _846) * _809;
        float _856 = _777 * 0.5;
        float _857 = _787 * 0.5;
        float _858 = _797 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _872 = (dot(vec3(_413, _414, _415), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _881 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3564 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_883 + 1.0))) + _888) * _810;
        float _898 = _778 * 0.5;
        float _899 = _788 * 0.5;
        float _900 = _798 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_413, _414, _415), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3597 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_925 + 1.0))) + _930) * _811;
        _947 = _778;
        _949 = _777;
        _950 = _776;
        _951 = _788;
        _952 = _787;
        _953 = _786;
        _954 = _798;
        _955 = _797;
        _956 = _796;
        _957 = _811;
        _958 = _810;
        _959 = _809;
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
        _961 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
    }
    else
    {
        _947 = _948;
        _949 = _948;
        _950 = _948;
        _951 = _948;
        _952 = _948;
        _953 = _948;
        _954 = _948;
        _955 = _948;
        _956 = _948;
        _957 = _948;
        _958 = _948;
        _959 = _948;
        _960 = 0.0;
        _961 = 0.0;
        _962 = 0.0;
    }
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _991 = fma(_617, cbModelParam._m0[30u].z, fma(_613, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _609));
        float _995 = fma(_617, cbModelParam._m0[31u].z, fma(_613, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _609));
        float _999 = fma(_617, cbModelParam._m0[32u].z, fma(_613, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _609));
        float _1022 = _609 + _413;
        float _1023 = _613 + _414;
        float _1024 = _617 + _415;
        float _1034 = fma(_1024, cbModelParam._m0[30u].z, fma(_1023, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022)) - _991;
        float _1035 = fma(_1024, cbModelParam._m0[31u].z, fma(_1023, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022)) - _995;
        float _1036 = fma(_1024, cbModelParam._m0[32u].z, fma(_1023, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022)) - _999;
        float _1040 = inversesqrt(dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036)));
        float _1053 = ((_1040 * _1034) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_991 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1040 * _1035) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_995 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1040 * _1036) / cbModelParam._m0[35u].z) + ((((((_999 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        float _1090 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1057.x + (-0.5));
        float _1092 = _1090 * (_1057.y + (-0.5));
        float _1093 = _1090 * (_1057.z + (-0.5));
        float _1100 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1064.x + (-0.5));
        float _1102 = _1100 * (_1064.y + (-0.5));
        float _1103 = _1100 * (_1064.z + (-0.5));
        float _1110 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1071.x + (-0.5));
        float _1112 = _1110 * (_1071.y + (-0.5));
        float _1113 = _1110 * (_1071.z + (-0.5));
        float _1120 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1078.x + (-0.5));
        float _1122 = _1120 * (_1078.y + (-0.5));
        float _1123 = _1120 * (_1078.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_413, _414, _415), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3660 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1154 + 1.0))) + _1159) * _1124;
        float _1169 = _1092 * 0.5;
        float _1170 = _1102 * 0.5;
        float _1171 = _1112 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_413, _414, _415), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3693 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1196 + 1.0))) + _1201) * _1125;
        float _1211 = _1093 * 0.5;
        float _1212 = _1103 * 0.5;
        float _1213 = _1113 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_413, _414, _415), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3726 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1238 + 1.0))) + _1243) * _1126;
        _1260 = _1093;
        _1261 = _1092;
        _1262 = _1091;
        _1263 = _1103;
        _1264 = _1102;
        _1265 = _1101;
        _1266 = _1113;
        _1267 = _1112;
        _1268 = _1111;
        _1269 = _1126;
        _1270 = _1125;
        _1271 = _1124;
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1274 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
    }
    else
    {
        _1260 = _948;
        _1261 = _948;
        _1262 = _948;
        _1263 = _948;
        _1264 = _948;
        _1265 = _948;
        _1266 = _948;
        _1267 = _948;
        _1268 = _948;
        _1269 = _948;
        _1270 = _948;
        _1271 = _948;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _960)) + _960;
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _961)) + _961;
    float _1286 = (cbModelParam._m0[1u].x * (_1274 - _962)) + _962;
    float _1307 = fma(_1286, cbSceneParam._m0[89u].z, fma(_1285, cbSceneParam._m0[89u].y, _1284 * cbSceneParam._m0[89u].x));
    float _1310 = fma(_1286, cbSceneParam._m0[90u].z, fma(_1285, cbSceneParam._m0[90u].y, _1284 * cbSceneParam._m0[90u].x));
    float _1313 = fma(_1286, cbSceneParam._m0[91u].z, fma(_1285, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1284));
    float _1328 = _553 * 0.5;
    float _1329 = _554 * 0.5;
    float _1330 = _555 * 0.5;
    float _1331 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1334 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1337 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1371;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1344 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_947, _951, _954, _957));
        float _1348 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_949, _952, _955, _958));
        float _1352 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_950, _953, _956, _959));
        float _1359 = dot(vec4(cbModelParam._m0[39u]), vec4(_1328, _1329, _1330, 1.0));
        _1371 = dot(vec3(isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1359) ? 0.0 : (isnan(0.0) ? _1359 : max(0.0, _1359))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1371 = 1.0;
    }
    float _1382;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1373 = dot(vec4(cbModelParam._m0[40u]), vec4(_1328, _1329, _1330, 1.0));
        _1382 = dot(vec3(isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1373) ? 0.0 : (isnan(0.0) ? _1373 : max(0.0, _1373))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1382 = 1.0;
    }
    float _1386 = (_1382 * cbModelParam._m0[1u].x) + (_1371 * (1.0 - cbModelParam._m0[1u].x));
    float _1396 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _416);
    float _1397 = isnan(_1396) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1396 : min(cbModelParam._m0[25u].z, _1396));
    float _1479;
    float _1481;
    float _1483;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1446 = fma(_617, cbModelParam._m0[13u].z, fma(_613, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _609)) + cbModelParam._m0[13u].w;
        float _1450 = fma(_617, cbModelParam._m0[14u].z, fma(_613, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _609)) + cbModelParam._m0[14u].w;
        float _1454 = fma(_617, cbModelParam._m0[15u].z, fma(_613, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _609)) + cbModelParam._m0[15u].w;
        float _1457 = fma(_555, cbModelParam._m0[13u].z, fma(_554, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _553));
        float _1460 = fma(_555, cbModelParam._m0[14u].z, fma(_554, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _553));
        float _1463 = fma(_555, cbModelParam._m0[15u].z, fma(_554, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _553));
        float _1491;
        if (_1457 > 0.0)
        {
            _1491 = abs((1.0 - _1446) / _1457);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1446 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1491 = frontier_phi_19_17_ladder;
        }
        float _1699;
        if (_1460 > 0.0)
        {
            _1699 = abs((1.0 - _1450) / _1460);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1450 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1699 = frontier_phi_28_24_ladder;
        }
        float _1953;
        if (_1463 > 0.0)
        {
            _1953 = abs((1.0 - _1454) / _1463);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1454 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1953 = frontier_phi_40_35_ladder;
        }
        float _1955 = isnan(_1699) ? _1491 : (isnan(_1491) ? _1699 : min(_1491, _1699));
        float _1956 = isnan(_1953) ? _1955 : (isnan(_1955) ? _1953 : min(_1955, _1953));
        float _1960 = (_1956 * _1457) + _1446;
        float _1961 = (_1956 * _1460) + _1450;
        float _1962 = (_1956 * _1463) + _1454;
        float _1963 = _1956 * 9.9999997473787516355514526367188e-05;
        float _1965 = (-1.0) - _1963;
        float _1967 = _1963 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1962 > _1967) || ((_1962 < _1965) || ((_1961 > _1967) || ((_1961 < _1965) || ((_1960 < _1965) || (_1960 > _1967))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2090 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1962, cbModelParam._m0[9u].z, fma(_1961, cbModelParam._m0[9u].y, _1960 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1962, cbModelParam._m0[10u].z, fma(_1961, cbModelParam._m0[10u].y, _1960 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1962, cbModelParam._m0[11u].z, fma(_1961, cbModelParam._m0[11u].y, _1960 * cbModelParam._m0[11u].x))), _1397);
            frontier_phi_18_40_ladder = _2090.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2090.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2090.x * cbModelParam._m0[1u].y;
        }
        _1479 = frontier_phi_18_40_ladder_2;
        _1481 = frontier_phi_18_40_ladder_1;
        _1483 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1467 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_553, _554, _555), _1397);
        _1479 = _1467.x * cbModelParam._m0[1u].y;
        _1481 = _1467.y * cbModelParam._m0[1u].y;
        _1483 = _1467.z * cbModelParam._m0[1u].y;
    }
    float _1487 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _416);
    float _1488 = isnan(_1487) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1487 : min(cbModelParam._m0[25u].w, _1487));
    float _1581;
    float _1583;
    float _1585;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1545 = fma(_617, cbModelParam._m0[21u].z, fma(_613, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _609)) + cbModelParam._m0[21u].w;
        float _1549 = fma(_617, cbModelParam._m0[22u].z, fma(_613, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _609)) + cbModelParam._m0[22u].w;
        float _1553 = fma(_617, cbModelParam._m0[23u].z, fma(_613, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _609)) + cbModelParam._m0[23u].w;
        float _1556 = fma(_555, cbModelParam._m0[21u].z, fma(_554, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _553));
        float _1559 = fma(_555, cbModelParam._m0[22u].z, fma(_554, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _553));
        float _1562 = fma(_555, cbModelParam._m0[23u].z, fma(_554, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _553));
        float _1704;
        if (_1556 > 0.0)
        {
            _1704 = abs((1.0 - _1545) / _1556);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1545 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1704 = frontier_phi_30_26_ladder;
        }
        float _1980;
        if (_1559 > 0.0)
        {
            _1980 = abs((1.0 - _1549) / _1559);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1549 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1980 = frontier_phi_42_37_ladder;
        }
        float _2193;
        if (_1562 > 0.0)
        {
            _2193 = abs((1.0 - _1553) / _1562);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1553 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2193 = frontier_phi_51_48_ladder;
        }
        float _2195 = isnan(_1980) ? _1704 : (isnan(_1704) ? _1980 : min(_1704, _1980));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1556) + _1545;
        float _2201 = (_2196 * _1559) + _1549;
        float _2202 = (_2196 * _1562) + _1553;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2204 = (-1.0) - _2203;
        float _2206 = _2203 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2202 > _2206) || ((_2202 < _2204) || ((_2201 > _2206) || ((_2201 < _2204) || ((_2200 < _2204) || (_2200 > _2206))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2202, cbModelParam._m0[17u].z, fma(_2201, cbModelParam._m0[17u].y, _2200 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2202, cbModelParam._m0[18u].z, fma(_2201, cbModelParam._m0[18u].y, _2200 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2202, cbModelParam._m0[19u].z, fma(_2201, cbModelParam._m0[19u].y, _2200 * cbModelParam._m0[19u].x))), _1488);
            frontier_phi_27_51_ladder = _2400.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2400.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2400.x * cbModelParam._m0[1u].z;
        }
        _1581 = frontier_phi_27_51_ladder_2;
        _1583 = frontier_phi_27_51_ladder_1;
        _1585 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1565 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_553, _554, _555), _1488);
        _1581 = _1565.x * cbModelParam._m0[1u].z;
        _1583 = _1565.y * cbModelParam._m0[1u].z;
        _1585 = _1565.z * cbModelParam._m0[1u].z;
    }
    float _1598 = (((_580 * _529) + _581) * _545) * ((cbModelParam._m0[1u].w * (_1581 - _1479)) + _1479);
    float _1600 = (((_580 * _531) + _581) * _545) * ((cbModelParam._m0[1u].w * (_1583 - _1481)) + _1481);
    float _1602 = (((_580 * _532) + _581) * _545) * ((cbModelParam._m0[1u].w * (_1585 - _1483)) + _1483);
    float _1605 = fma(_1602, cbSceneParam._m0[89u].z, fma(_1600, cbSceneParam._m0[89u].y, _1598 * cbSceneParam._m0[89u].x));
    float _1608 = fma(_1602, cbSceneParam._m0[90u].z, fma(_1600, cbSceneParam._m0[90u].y, _1598 * cbSceneParam._m0[90u].x));
    float _1611 = fma(_1602, cbSceneParam._m0[91u].z, fma(_1600, cbSceneParam._m0[91u].y, _1598 * cbSceneParam._m0[91u].x));
    uvec4 _1621 = floatBitsToUint(cbInstanceData._m0[_503 + 5u]);
    uint _1623 = _1621.x * 14u;
    uint _1624 = _1623 + 13u;
    float _1631 = _545 + (-1.0);
    float _1636 = (cbLight._m0[_1624].x * _1631) + 1.0;
    float _1637 = (cbLight._m0[_1624].y * _1631) + 1.0;
    float _1638 = (cbLight._m0[_1624].z * _1631) + 1.0;
    float _1639 = (cbLight._m0[_1624].w * _1631) + 1.0;
    uint _1640 = _1623 + 5u;
    float _1646 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
    uint _1650 = _1623 + 4u;
    float _1657 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
    uint _1661 = _1623 | 1u;
    float _1672 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_413, _414, _415));
    float _1675 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_413, _414, _415));
    float _3862 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _3873 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _1680 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.3183098733425140380859375;
    float _1682 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.3183098733425140380859375;
    float _1689 = ((cbLight._m0[_1640].x * _1646) * _1682) + ((cbLight._m0[_1650].x * _1657) * _1680);
    float _1690 = ((_1646 * cbLight._m0[_1640].y) * _1682) + ((_1657 * cbLight._m0[_1650].y) * _1680);
    float _1691 = ((_1646 * cbLight._m0[_1640].z) * _1682) + ((_1657 * cbLight._m0[_1650].z) * _1680);
    uvec4 _1696 = floatBitsToUint(cbLight._m0[_1623 + 12u]);
    bool _1698 = _1696.x == 0u;
    float _1709;
    float _1711;
    float _1713;
    if (_1698)
    {
        _1709 = _1689;
        _1711 = _1690;
        _1713 = _1691;
    }
    else
    {
        uint _1717 = _1623 + 6u;
        float _1733 = (dot(vec3(cbLight._m0[_1623 + 2u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _1734 = _1733 * _1733;
        float _3884 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1736 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _1709 = (((cbLight._m0[_1717].x * 0.3183098733425140380859375) * _1735) * _1736) + _1689;
        _1711 = (((cbLight._m0[_1717].y * 0.3183098733425140380859375) * _1735) * _1736) + _1690;
        _1713 = (((cbLight._m0[_1717].z * 0.3183098733425140380859375) * _1735) * _1736) + _1691;
    }
    bool _1716 = _1696.y == 0u;
    float _1754;
    float _1756;
    float _1758;
    if (_1716)
    {
        _1754 = _1709;
        _1756 = _1711;
        _1758 = _1713;
    }
    else
    {
        uint _1924 = _1623 + 7u;
        float _1940 = (dot(vec3(cbLight._m0[_1623 + 3u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _1941 = _1940 * _1940;
        float _3900 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1943 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
        _1754 = (((cbLight._m0[_1924].x * 0.3183098733425140380859375) * _1942) * _1943) + _1709;
        _1756 = (((cbLight._m0[_1924].y * 0.3183098733425140380859375) * _1942) * _1943) + _1711;
        _1758 = (((cbLight._m0[_1924].z * 0.3183098733425140380859375) * _1942) * _1943) + _1713;
    }
    uint _1761 = _1623 + 8u;
    float _1774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1623].w)) * _416) * 0.949999988079071044921875);
    float _1775 = _1774 * _1774;
    float _1776 = cbLight._m0[_1623].x + _442;
    float _1777 = cbLight._m0[_1623].y + _443;
    float _1778 = cbLight._m0[_1623].z + _444;
    float _1782 = inversesqrt(dot(vec3(_1776, _1777, _1778), vec3(_1776, _1777, _1778)));
    float _1783 = _1782 * _1776;
    float _1784 = _1782 * _1777;
    float _1785 = _1782 * _1778;
    float _1786 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1623].xyz));
    float _3916 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1789 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _1790 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _1791 = dot(vec3(_413, _414, _415), vec3(_1783, _1784, _1785));
    float _3938 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _1795 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_1783, _1784, _1785));
    float _3949 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1799 = _1775 * _1775;
    float _1803 = ((_1794 * _1794) * (_1799 + (-1.0))) + 1.0;
    float _1811 = exp2(log2(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * 5.0);
    float _1812 = 0.959999978542327880859375 - _526;
    float _1814 = 0.959999978542327880859375 - _527;
    float _1815 = 0.959999978542327880859375 - _528;
    float _1822 = 1.0 - _1775;
    float _1833 = (0.5 / (((_1790 * ((_1789 * _1822) + _1775)) + 9.9999999392252902907785028219223e-09) + (((_1790 * _1822) + _1775) * _1789))) * _1789;
    float _3960 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1835 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1799 / ((_1803 * _1803) * 3.141590118408203125));
    uint _1846 = _1623 + 9u;
    float _1857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1661].w)) * _416) * 0.949999988079071044921875);
    float _1858 = _1857 * _1857;
    float _1859 = cbLight._m0[_1661].x + _442;
    float _1860 = cbLight._m0[_1661].y + _443;
    float _1861 = cbLight._m0[_1661].z + _444;
    float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
    float _1866 = _1865 * _1859;
    float _1867 = _1865 * _1860;
    float _1868 = _1865 * _1861;
    float _1869 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1661].xyz));
    float _3971 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _1873 = dot(vec3(_413, _414, _415), vec3(_1866, _1867, _1868));
    float _3982 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1877 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_1866, _1867, _1868));
    float _3993 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1881 = _1858 * _1858;
    float _1885 = ((_1876 * _1876) * (_1881 + (-1.0))) + 1.0;
    float _1892 = exp2(log2(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * 5.0);
    float _1899 = 1.0 - _1858;
    float _1909 = (0.5 / (((_1790 * ((_1872 * _1899) + _1858)) + 9.9999999392252902907785028219223e-09) + (((_1790 * _1899) + _1858) * _1872))) * _1872;
    float _4004 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1911 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1881 / ((_1885 * _1885) * 3.141590118408203125));
    float _1921 = (((((_1892 * _1812) + _529) * cbLight._m0[_1846].x) * _1911) * _1646) + (((((_1811 * _1812) + _529) * cbLight._m0[_1761].x) * _1835) * _1657);
    float _1922 = (((((_1892 * _1814) + _531) * cbLight._m0[_1846].y) * _1911) * _1646) + (((((_1811 * _1814) + _531) * cbLight._m0[_1761].y) * _1835) * _1657);
    float _1923 = (((((_1892 * _1815) + _532) * cbLight._m0[_1846].z) * _1911) * _1646) + (((((_1811 * _1815) + _532) * cbLight._m0[_1761].z) * _1835) * _1657);
    float _1985;
    float _1987;
    float _1989;
    if (_1698)
    {
        _1985 = _1921;
        _1987 = _1922;
        _1989 = _1923;
    }
    else
    {
        uint _1991 = _1623 + 2u;
        uint _1995 = _1623 + 10u;
        float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _416) * 0.949999988079071044921875);
        float _2010 = _2009 * _2009;
        float _2011 = cbLight._m0[_1991].x + _442;
        float _2012 = cbLight._m0[_1991].y + _443;
        float _2013 = cbLight._m0[_1991].z + _444;
        float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
        float _2018 = _2017 * _2011;
        float _2019 = _2017 * _2012;
        float _2020 = _2017 * _2013;
        float _2021 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1991].xyz));
        float _4015 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2024 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2025 = dot(vec3(_413, _414, _415), vec3(_2018, _2019, _2020));
        float _4026 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2029 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2018, _2019, _2020));
        float _4037 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2033 = _2010 * _2010;
        float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
        float _2044 = exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0);
        float _2051 = 1.0 - _2010;
        float _2061 = (0.5 / (((_1790 * ((_2024 * _2051) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_1790 * _2051) + _2010) * _2024))) * _2024;
        float _4048 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2063 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
        float _2064 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _1985 = (((((_2044 * _1812) + _529) * cbLight._m0[_1995].x) * _2063) * _2064) + _1921;
        _1987 = (((((_2044 * _1814) + _531) * cbLight._m0[_1995].y) * _2063) * _2064) + _1922;
        _1989 = (((((_2044 * _1815) + _532) * cbLight._m0[_1995].z) * _2063) * _2064) + _1923;
    }
    float _2099;
    float _2101;
    float _2103;
    if (_1716)
    {
        _2099 = _1985;
        _2101 = _1987;
        _2103 = _1989;
    }
    else
    {
        uint _2110 = _1623 + 3u;
        uint _2114 = _1623 + 11u;
        float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _416) * 0.949999988079071044921875);
        float _2129 = _2128 * _2128;
        float _2130 = cbLight._m0[_2110].x + _442;
        float _2131 = cbLight._m0[_2110].y + _443;
        float _2132 = cbLight._m0[_2110].z + _444;
        float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
        float _2137 = _2136 * _2130;
        float _2138 = _2136 * _2131;
        float _2139 = _2136 * _2132;
        float _2140 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_2110].xyz));
        float _4064 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _2144 = dot(vec3(_413, _414, _415), vec3(_2137, _2138, _2139));
        float _4075 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2148 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2137, _2138, _2139));
        float _4086 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2152 = _2129 * _2129;
        float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
        float _2163 = exp2(log2(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * 5.0);
        float _2170 = 1.0 - _2129;
        float _2180 = (0.5 / (((_1790 * ((_2143 * _2170) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_1790 * _2170) + _2129) * _2143))) * _2143;
        float _4097 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2182 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
        float _2183 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
        _2099 = (((((_2163 * _1812) + _529) * cbLight._m0[_2114].x) * _2182) * _2183) + _1985;
        _2101 = (((((_2163 * _1814) + _531) * cbLight._m0[_2114].y) * _2182) * _2183) + _1987;
        _2103 = (((((_2163 * _1815) + _532) * cbLight._m0[_2114].z) * _2182) * _2183) + _1989;
    }
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    if (_1621.y == 0u)
    {
        float _2258 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2258;
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2258;
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2258;
        uvec4 _2273 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2274 = _2273.x;
        uint _2285 = uint((float(_2273.y) * floor(float(uint(cbSceneParam._m0[85u].y * _464) / _2274))) + floor(float(uint(cbSceneParam._m0[85u].x * _463) / _2274)));
        float _2295 = (log2(_2261 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2296 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        uint _2299 = uint(isnan(14.0) ? _2296 : (isnan(_2296) ? 14.0 : min(_2296, 14.0)));
        uvec4 _2304 = texelFetch(g_lightClusterGridBuffer, int(((_2299 << 2u) + (_2285 << 6u)) >> 2u));
        uint _2305 = _2304.x;
        uint _2306 = _2273.z;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        if (((((1u << ((_2306 >> 4u) & 15u)) + 4294967295u) & _2305) == 0u) || ((_2306 & 240u) == 0u))
        {
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
        }
        else
        {
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2557 = 0.0;
            float _2558 = 0.0;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            uint _2563 = 0u;
            uint _2572;
            bool _2573;
            for (;;)
            {
                _2572 = texelFetch(g_lightClassification, int((((_2299 << 5u) + (_2285 << 9u)) + (_2563 << 2u)) >> 2u)).x;
                _2573 = _2572 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2573)
                {
                    frontier_phi_68_pred = _2559;
                    frontier_phi_68_pred_1 = _2562;
                    frontier_phi_68_pred_2 = _2561;
                    frontier_phi_68_pred_3 = _2560;
                    frontier_phi_68_pred_4 = _2558;
                    frontier_phi_68_pred_5 = _2557;
                }
                else
                {
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    uint _2708;
                    _2702 = _2557;
                    _2703 = _2558;
                    _2704 = _2559;
                    _2705 = _2560;
                    _2706 = _2561;
                    _2707 = _2562;
                    _2708 = _2572;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    for (;;)
                    {
                        uint _2712 = uint(findLSB(_2708)) + (_2563 << 5u);
                        uint _2709 = (_2708 + 4294967295u) & _2708;
                        uint _2714 = _2712 * 48u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 3u)).x));
                        uint _2734 = (_2712 * 48u) + 4u;
                        vec4 _2747 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 3u)).x));
                        uint _2753 = (_2712 * 48u) + 8u;
                        vec3 _2764 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2753)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 2u)).x));
                        float _2768 = _2728.x - _2259;
                        float _2769 = _2728.y - _2260;
                        float _2770 = _2728.z - _2261;
                        float _2771 = dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770));
                        float _2774 = inversesqrt(_2771);
                        float _2775 = _2774 * _2768;
                        float _2776 = _2774 * _2769;
                        float _2777 = _2774 * _2770;
                        float _2778 = dot(vec3(_484, _487, _490), vec3(_2775, _2776, _2777));
                        float _2783 = 1.0 - (_2771 * _2728.w);
                        float _4123 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2784 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2785 = sqrt(_2771) * _2747.w;
                        float _2788 = 1.39999997615814208984375 / (_2785 + 1.39999997615814208984375);
                        float _2789 = _2788 * _2788;
                        float _2792 = ((1.0 - _2789) * _2778) + _2789;
                        float _2795 = _2785 * _2785;
                        float _2799 = ((isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0))) * _2784) / ((_2795 * 0.699999988079071044921875) + 1.0);
                        float _2803 = (-0.0) - _2259;
                        float _2804 = (-0.0) - _2260;
                        float _2805 = (-0.0) - _2261;
                        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
                        float _2810 = _2809 * _2803;
                        float _2811 = _2809 * _2804;
                        float _2812 = _2809 * _2805;
                        float _2820 = exp2(log2(1.0 / ((_2795 * 3.5) + 5.0)) * 0.25);
                        float _2821 = 1.0 - _561;
                        float _2828 = sqrt(1.0 - ((1.0 - (_2821 * _2821)) * (1.0 - (_2820 * _2820))));
                        float _2829 = _2828 * _2828;
                        float _2830 = _2829 * _2829;
                        float _2831 = _2810 + _2775;
                        float _2832 = _2811 + _2776;
                        float _2833 = _2812 + _2777;
                        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
                        float _2841 = dot(vec3(_484, _487, _490), vec3(_2810, _2811, _2812));
                        float _4139 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2844 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                        float _2845 = dot(vec3(_484, _487, _490), vec3(_2837 * _2831, _2837 * _2832, _2837 * _2833));
                        float _4150 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2848 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                        float _2852 = ((_2848 * _2848) * (_2830 + (-1.0))) + 1.0;
                        float _2853 = _2788 * _2829;
                        float _2854 = _2853 * _2853;
                        float _2857 = ((1.0 - _2854) * _2778) + _2854;
                        float _4161 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2858 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                        float _2859 = 1.0 - _2829;
                        float _2869 = (0.5 / (((_2858 * ((_2844 * _2859) + _2829)) + 9.9999999392252902907785028219223e-09) + (((_2858 * _2859) + _2829) * _2844))) * _2858;
                        float _4172 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2880 = (((_2830 * 3.1415927410125732421875) * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) / ((_2852 * _2852) * ((_2795 * 2.1991131305694580078125) + 3.141590118408203125))) * _2784;
                        _2632 = (_2799 * _2747.x) + _2705;
                        _2633 = (_2799 * _2747.y) + _2706;
                        _2634 = (_2799 * _2747.z) + _2707;
                        _2629 = (_2880 * _2764.x) + _2702;
                        _2630 = (_2880 * _2764.y) + _2703;
                        _2631 = (_2880 * _2764.z) + _2704;
                        if (_2709 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2702 = _2629;
                            _2703 = _2630;
                            _2704 = _2631;
                            _2705 = _2632;
                            _2706 = _2633;
                            _2707 = _2634;
                            _2708 = _2709;
                        }
                    }
                    frontier_phi_68_pred = _2631;
                    frontier_phi_68_pred_1 = _2634;
                    frontier_phi_68_pred_2 = _2633;
                    frontier_phi_68_pred_3 = _2632;
                    frontier_phi_68_pred_4 = _2630;
                    frontier_phi_68_pred_5 = _2629;
                }
                _2410 = frontier_phi_68_pred;
                _2416 = frontier_phi_68_pred_1;
                _2414 = frontier_phi_68_pred_2;
                _2412 = frontier_phi_68_pred_3;
                _2408 = frontier_phi_68_pred_4;
                _2406 = frontier_phi_68_pred_5;
                uint _2564 = _2563 + 1u;
                if (_2564 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2557 = _2406;
                    _2558 = _2408;
                    _2559 = _2410;
                    _2560 = _2412;
                    _2561 = _2414;
                    _2562 = _2416;
                    _2563 = _2564;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
        }
        uvec4 _2419 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2420 = _2419.z;
        uint _2422 = (_2420 >> 8u) & 15u;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        if (((4294967295u << _2422) & _2305) == 0u)
        {
            _2525 = _2405;
            _2527 = _2407;
            _2529 = _2409;
            _2531 = _2411;
            _2533 = _2413;
            _2535 = _2415;
        }
        else
        {
            float _2550 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
            float _2551 = _2550 * _2259;
            float _2552 = _2550 * _2260;
            float _2553 = _2550 * _2261;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2422 < ((_2420 >> 12u) & 15u))
            {
                float _2526;
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2685 = _2405;
                float _2686 = _2407;
                float _2687 = _2409;
                float _2688 = _2411;
                float _2689 = _2413;
                float _2690 = _2415;
                uint _2691 = _2422;
                uint _2700;
                bool _2701;
                for (;;)
                {
                    _2700 = texelFetch(g_lightClassification, int((((_2299 << 5u) + (_2285 << 9u)) + (_2691 << 2u)) >> 2u)).x;
                    _2701 = _2700 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2701)
                    {
                        frontier_phi_79_pred = _2690;
                        frontier_phi_79_pred_1 = _2689;
                        frontier_phi_79_pred_2 = _2688;
                        frontier_phi_79_pred_3 = _2687;
                        frontier_phi_79_pred_4 = _2686;
                        frontier_phi_79_pred_5 = _2685;
                    }
                    else
                    {
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _2907 = _2685;
                        float _2908 = _2686;
                        float _2909 = _2687;
                        float _2910 = _2688;
                        float _2911 = _2689;
                        float _2912 = _2690;
                        uint _2913 = _2700;
                        uint _2914;
                        vec4 _2939;
                        float _2940;
                        vec4 _2955;
                        vec3 _2967;
                        vec4 _2983;
                        vec4 _2999;
                        float _3046;
                        bool _3047;
                        for (;;)
                        {
                            uint _2924 = ((_2691 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2913));
                            _2914 = (_2913 + 4294967295u) & _2913;
                            uint _2926 = _2924 * 40u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            _2940 = _2939.w;
                            uint _2942 = (_2924 * 40u) + 4u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2957 = (_2924 * 40u) + 8u;
                            _2967 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x));
                            uint _2970 = (_2924 * 40u) + 16u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2986 = (_2924 * 40u) + 20u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3002 = (_2924 * 40u) + 24u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3021 = (_2924 * 40u) + 28u;
                            vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            _3046 = fma(_2261, _3034.z, fma(_2260, _3034.y, _3034.x * _2259)) + _3034.w;
                            _3047 = !((fma(_2261, _3015.z, fma(_2260, _3015.y, _3015.x * _2259)) + _3015.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3047)
                            {
                                float _3074 = _2939.x - _2259;
                                float _3075 = _2939.y - _2260;
                                float _3076 = _2939.z - _2261;
                                float _3077 = dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076));
                                float _3080 = inversesqrt(_3077);
                                float _3081 = _3080 * _3074;
                                float _3082 = _3080 * _3075;
                                float _3083 = _3080 * _3076;
                                float _3087 = 1.0 - (_3077 / (_2940 * _2940));
                                float _4183 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3092 = sqrt(_3077) * _2955.w;
                                float _3094 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                                float _3095 = _3094 * _3094;
                                float _3098 = ((1.0 - _3095) * dot(vec3(_3081, _3082, _3083), vec3(_484, _487, _490))) + _3095;
                                float _3101 = _3092 * _3092;
                                float _3105 = (fma(_2261, _2983.z, fma(_2260, _2983.y, _2983.x * _2259)) + _2983.w) / _3046;
                                float _3106 = (fma(_2261, _2999.z, fma(_2260, _2999.y, _2999.x * _2259)) + _2999.w) / _3046;
                                float _3110 = 1.0 - dot(vec2(_3105, _3106), vec2(_3105, _3106));
                                float _4199 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                                float _3112 = _3111 * (((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3088) / ((_3101 * 0.699999988079071044921875) + 1.0));
                                float _3124 = exp2(log2(1.0 / ((_3101 * 3.5) + 5.0)) * 0.25);
                                float _3125 = 1.0 - _561;
                                float _3132 = sqrt(1.0 - ((1.0 - (_3125 * _3125)) * (1.0 - (_3124 * _3124))));
                                float _3133 = _3132 * _3132;
                                float _3134 = _3133 * _3133;
                                float _3135 = _3081 - _2551;
                                float _3136 = _3082 - _2552;
                                float _3137 = _3083 - _2553;
                                float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                                float _3145 = dot(vec3(_484, _487, _490), vec3((-0.0) - _2551, (-0.0) - _2552, (-0.0) - _2553));
                                float _4210 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3148 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3149 = dot(vec3(_484, _487, _490), vec3(_3141 * _3135, _3141 * _3136, _3141 * _3137));
                                float _4221 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3152 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                                float _3156 = ((_3152 * _3152) * (_3134 + (-1.0))) + 1.0;
                                float _3157 = _3094 * _3133;
                                float _3158 = _3157 * _3157;
                                float _3164 = ((1.0 - _3158) * dot(vec3(_484, _487, _490), vec3(_3081, _3082, _3083))) + _3158;
                                float _4232 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3165 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3166 = 1.0 - _3133;
                                float _3176 = (0.5 / (((_3165 * ((_3148 * _3166) + _3133)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3133) * _3148))) * _3165;
                                float _4243 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3186 = (_3111 * _3088) * (((_3134 * 3.1415927410125732421875) * (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) / ((_3156 * _3156) * ((_3101 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3112 * _2955.z;
                                frontier_phi_85_pred_1 = _3112 * _2955.y;
                                frontier_phi_85_pred_2 = _3112 * _2955.x;
                                frontier_phi_85_pred_3 = _3186 * _2967.z;
                                frontier_phi_85_pred_4 = _3186 * _2967.y;
                                frontier_phi_85_pred_5 = _3186 * _2967.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3195 = frontier_phi_85_pred;
                            _3194 = frontier_phi_85_pred_1;
                            _3193 = frontier_phi_85_pred_2;
                            _3192 = frontier_phi_85_pred_3;
                            _3191 = frontier_phi_85_pred_4;
                            _3190 = frontier_phi_85_pred_5;
                            _2897 = _3193 + _2910;
                            _2898 = _3194 + _2911;
                            _2899 = _3195 + _2912;
                            _2894 = _3190 + _2907;
                            _2895 = _3191 + _2908;
                            _2896 = _3192 + _2909;
                            if (_2914 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2914;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2899;
                        frontier_phi_79_pred_1 = _2898;
                        frontier_phi_79_pred_2 = _2897;
                        frontier_phi_79_pred_3 = _2896;
                        frontier_phi_79_pred_4 = _2895;
                        frontier_phi_79_pred_5 = _2894;
                    }
                    _2536 = frontier_phi_79_pred;
                    _2534 = frontier_phi_79_pred_1;
                    _2532 = frontier_phi_79_pred_2;
                    _2530 = frontier_phi_79_pred_3;
                    _2528 = frontier_phi_79_pred_4;
                    _2526 = frontier_phi_79_pred_5;
                    uint _2692 = _2691 + 1u;
                    if (_2692 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2685 = _2526;
                        _2686 = _2528;
                        _2687 = _2530;
                        _2688 = _2532;
                        _2689 = _2534;
                        _2690 = _2536;
                        _2691 = _2692;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2532;
                frontier_phi_60_61_ladder_1 = _2536;
                frontier_phi_60_61_ladder_2 = _2534;
                frontier_phi_60_61_ladder_3 = _2530;
                frontier_phi_60_61_ladder_4 = _2528;
                frontier_phi_60_61_ladder_5 = _2526;
            }
            else
            {
                frontier_phi_60_61_ladder = _2411;
                frontier_phi_60_61_ladder_1 = _2415;
                frontier_phi_60_61_ladder_2 = _2413;
                frontier_phi_60_61_ladder_3 = _2409;
                frontier_phi_60_61_ladder_4 = _2407;
                frontier_phi_60_61_ladder_5 = _2405;
            }
            _2525 = frontier_phi_60_61_ladder_5;
            _2527 = frontier_phi_60_61_ladder_4;
            _2529 = frontier_phi_60_61_ladder_3;
            _2531 = frontier_phi_60_61_ladder;
            _2533 = frontier_phi_60_61_ladder_2;
            _2535 = frontier_phi_60_61_ladder_1;
        }
        float _2540 = isnan(1.0) ? _545 : (isnan(_545) ? 1.0 : min(_545, 1.0));
        _2317 = (_2540 * _2531) + _1754;
        _2319 = (_2540 * _2533) + _1756;
        _2321 = (_2540 * _2535) + _1758;
        _2323 = ((_2525 * _529) * _2540) + _2099;
        _2325 = ((_2527 * _531) * _2540) + _2101;
        _2327 = ((_2529 * _532) * _2540) + _2103;
    }
    else
    {
        _2317 = _1754;
        _2319 = _1756;
        _2321 = _1758;
        _2323 = _2099;
        _2325 = _2101;
        _2327 = _2103;
    }
    float _4259 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _4270 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _4281 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _2344 = ((isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2317 + ((isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))) * _545))) + ((_2323 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _1386)) * cbPerFrame._m0[3u].x);
    float _2345 = ((isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2319 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _545))) + ((_2325 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1386)) * cbPerFrame._m0[3u].x);
    float _2346 = ((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2321 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _545))) + ((_2327 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1386)) * cbPerFrame._m0[3u].x);
    uint _2347 = _503 + 6u;
    float _2355 = _463 / cbSceneParam._m0[86u].x;
    float _2356 = _464 / cbSceneParam._m0[86u].y;
    vec4 _2370 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2355, _2356, (log2((isnan(cbSceneParam._m0[77u].w) ? _437 : (isnan(_437) ? cbSceneParam._m0[77u].w : min(_437, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2372 = _2370.x;
    float _2373 = _2370.y;
    float _2374 = _2370.z;
    float _2375 = _2370.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_437 > cbSceneParam._m0[78u].w)
    {
        float _2430 = isnan(_437) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _437 : min(cbSceneParam._m0[80u].w, _437));
        float _2431 = _2430 / _437;
        float _2442 = _2431 * _271;
        float _2443 = _272 * _2431;
        float _2444 = (-0.0) - _2443;
        float _2445 = _2431 * _273;
        float _2447 = (cbSceneParam._m0[77u].w * _2444) / _2430;
        float _2448 = _2447 + cbSceneParam._m0[79u].w;
        float _2449 = cbSceneParam._m0[79u].w - _2443;
        float _2455 = sqrt(((_2442 * _2442) + (_2443 * _2443)) + (_2445 * _2445));
        float _2458 = (1.0 - (cbSceneParam._m0[77u].w / _2430)) * _2455;
        float _2463 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2642;
        if (abs((_2444 - _2447) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2642 = ((((_2448 > 0.0) ? exp2(_2463 * _2448) : (2.0 - exp2(_2465 * _2448))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2458;
        }
        else
        {
            float _2586 = 1.0 / cbSceneParam._m0[80u].x;
            float _2587 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : max(_2448, _2449));
            float _2588 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : min(_2448, _2449));
            float _2597 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : min(_2587, 0.0));
            float _2598 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : min(_2588, 0.0));
            _2642 = ((abs(_2455 / _2444) * cbSceneParam._m0[80u].y) * ((((_2597 - _2598) * 2.0) - ((exp2(_2463 * (isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0)))) - exp2(_2463 * (isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0))))) * _2586)) - ((exp2(_2465 * _2597) - exp2(_2465 * _2598)) * _2586))) + (_2458 * cbSceneParam._m0[80u].z);
        }
        vec4 _2644 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2355, _2356, 1.0), 0.0);
        float _2653 = exp2((_2642 * (-1.44269502162933349609375)) * (1.0 - _2644.w));
        float _2654 = log2(_2653);
        float _2670 = log2(_2375);
        _2467 = (exp2(_2670 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].x)) * _2644.x) / cbSceneParam._m0[78u].x)) + _2372;
        _2469 = (exp2(_2670 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].y)) * _2644.y) / cbSceneParam._m0[78u].y)) + _2373;
        _2471 = (exp2(_2670 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].z)) * _2644.z) / cbSceneParam._m0[78u].z)) + _2374;
        _2473 = _2653 * _2375;
    }
    else
    {
        _2467 = _2372;
        _2469 = _2373;
        _2471 = _2374;
        _2473 = _2375;
    }
    bool _2680;
    vec4 _2483;
    vec4 _2505;
    float _2507;
    float _2511;
    float _2512;
    float _2513;
    float _2514;
    bool _2524;
    for (;;)
    {
        _2483 = cbMatDynParam._m0[0u];
        float _2485 = roundEven(_2483.y);
        bool _2486 = _2485 == 3.0;
        float _2487 = log2(_2473);
        float _2494 = exp2(_2487 * cbSceneParam._m0[78u].x) * _2344;
        float _2495 = exp2(_2487 * cbSceneParam._m0[78u].y) * _2345;
        float _2496 = exp2(_2487 * cbSceneParam._m0[78u].z) * _2346;
        float _2503 = _451 + (-0.5);
        _2505 = cbMtdParam._m0[1u];
        _2507 = _2505.y * _2503;
        float _2510 = (_2485 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2511 = _2510 * (_2486 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2467)));
        _2512 = _2510 * (_2486 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2469)));
        _2513 = _2510 * (_2486 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2471)));
        _2514 = _2503 * 0.999000012874603271484375;
        _2524 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2524)
        {
            if ((cbInstanceData._m0[_503 + 7u].x + _2514) < 0.5)
            {
                _2680 = true;
                break;
            }
        }
        uint _2621 = _505 + uint(_2483.w);
        if ((cbInstanceData._m0[_2621].w < 1.0) && ((cbInstanceData._m0[_2621].w + _2514) < 0.5))
        {
            _2680 = true;
            break;
        }
        if ((_2507 + _344) < _2505.x)
        {
            _2680 = true;
            break;
        }
        _2680 = false;
        break;
    }
    float _2885;
    if (_2680)
    {
        discard_state = true;
        _2885 = 0.0;
    }
    else
    {
        _2885 = cbInstanceData._m0[_2347].w;
    }
    SV_Target.x = _2511;
    SV_Target.y = _2512;
    SV_Target.z = _2513;
    SV_Target.w = _2885;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2347].w;
    discard_exit();
}


