#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _902;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    float _278 = dot(vec3(_267, _268, _269), vec3(_190, _191, _192));
    float _281 = dot(vec3(_267, _268, _269), vec3(_204, _205, _206));
    float _284 = dot(vec3(_267, _268, _269), vec3(_211, _212, _213));
    float _290 = inversesqrt(dot(vec3(_278, _281, _284), vec3(_278, _281, _284)));
    vec4 _303 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _314 = dot(vec4(_303), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _322 = (((cbMtdParam._m0[10u].y * _278) * _290) * _314) + TEXCOORD.x;
    float _323 = (((_281 * cbMtdParam._m0[10u].y) * _290) * _314) + TEXCOORD.y;
    vec4 _335 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_322 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_323 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _340 = _335.x * cbMtdParam._m0[9u].x;
    float _341 = _335.y * cbMtdParam._m0[9u].y;
    float _342 = _335.z * cbMtdParam._m0[9u].z;
    vec4 _354 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _356 = _354.x;
    vec4 _368 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _322) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _323) + cbTextureTilingScale._m0[3u].w));
    float _372 = _368.z;
    float _377 = (_368.x * 2.0) + (-1.0);
    float _379 = (_368.y * 2.0) + (-1.0);
    float _380 = dot(vec2(_377, _379), vec2(_377, _379));
    float _3239 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _385 = sqrt(1.0 - (isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))));
    float _388 = fma(_385, _211, fma(_379, _204, _377 * _190));
    float _391 = fma(_385, _212, fma(_379, _205, _377 * _191));
    float _394 = fma(_385, _213, fma(_379, _206, _377 * _192));
    float _398 = inversesqrt(dot(vec3(_388, _391, _394), vec3(_388, _391, _394)));
    float _399 = _398 * _388;
    float _400 = _398 * _391;
    float _401 = _398 * _394;
    float _403 = cbMtdParam._m0[10u].x + _368.w;
    float _407 = inversesqrt(dot(vec3(_399, _400, _401), vec3(_399, _400, _401)));
    float _408 = _407 * _399;
    float _409 = _407 * _400;
    float _410 = _407 * _401;
    float _3250 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _411 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
    float _3261 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3272 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3283 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3294 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3305 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _416 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _432 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _436 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _437 = _267 * _436;
    float _438 = _268 * _436;
    float _439 = _269 * _436;
    float _445 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _446 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _467 = fma(_410, cbSceneParam._m0[5u].z, fma(_409, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _408));
    float _470 = fma(_410, cbSceneParam._m0[6u].z, fma(_409, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _408));
    float _473 = fma(_410, cbSceneParam._m0[7u].z, fma(_409, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _408));
    uint _486 = uint(roundEven(NORMAL.w)) * 13u;
    uint _489 = (_486 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _495 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0)))) * cbInstanceData._m0[_489].x;
    float _496 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0)))) * cbInstanceData._m0[_489].y;
    float _497 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0)))) * cbInstanceData._m0[_489].z;
    float _3316 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _499 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    float _3338 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _500 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _501 = 1.0 - _416;
    float _502 = _498 * _501;
    float _503 = _499 * _501;
    float _504 = _500 * _501;
    float _509 = (_498 + (-0.039999999105930328369140625)) * _416;
    float _510 = (_499 + (-0.039999999105930328369140625)) * _416;
    float _511 = (_500 + (-0.039999999105930328369140625)) * _416;
    float _512 = _509 + 0.039999999105930328369140625;
    float _514 = _510 + 0.039999999105930328369140625;
    float _515 = _511 + 0.039999999105930328369140625;
    vec4 _524 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _445, cbSceneParam._m0[86u].y * _446));
    float _528 = ((isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0))) * TEXCOORD.z) * _524.x;
    float _529 = dot(vec3(_408, _409, _410), vec3(_437, _438, _439));
    float _532 = _529 * 2.0;
    float _536 = (_532 * _408) - _437;
    float _537 = (_532 * _409) - _438;
    float _538 = (_532 * _410) - _439;
    float _542 = abs(dot(vec3(_437, _438, _439), vec3(_408, _409, _410)));
    float _3349 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _544 = sqrt(_411);
    float _557 = exp2((_544 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_544 * 3.0));
    float _563 = (1.0 - _557) * ((_544 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _564 = _557 * _544;
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _901;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _627 = fma(_600, cbModelParam._m0[26u].z, fma(_596, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _592));
        float _631 = fma(_600, cbModelParam._m0[27u].z, fma(_596, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _592));
        float _635 = fma(_600, cbModelParam._m0[28u].z, fma(_596, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _592));
        float _659 = _592 + _408;
        float _660 = _596 + _409;
        float _661 = _600 + _410;
        float _671 = fma(_661, cbModelParam._m0[26u].z, fma(_660, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _659)) - _627;
        float _672 = fma(_661, cbModelParam._m0[27u].z, fma(_660, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _659)) - _631;
        float _673 = fma(_661, cbModelParam._m0[28u].z, fma(_660, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _659)) - _635;
        float _677 = inversesqrt(dot(vec3(_671, _672, _673), vec3(_671, _672, _673)));
        float _690 = ((_677 * _671) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_627 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_677 * _672) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_631 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _692 = ((_677 * _673) / cbModelParam._m0[34u].z) + ((((((_635 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        float _729 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_695.x + (-0.5));
        float _731 = _729 * (_695.y + (-0.5));
        float _732 = _729 * (_695.z + (-0.5));
        float _739 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_702.x + (-0.5));
        float _741 = _739 * (_702.y + (-0.5));
        float _742 = _739 * (_702.z + (-0.5));
        float _749 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_709.x + (-0.5));
        float _751 = _749 * (_709.y + (-0.5));
        float _752 = _749 * (_709.z + (-0.5));
        float _759 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_716.x + (-0.5));
        float _761 = _759 * (_716.y + (-0.5));
        float _762 = _759 * (_716.z + (-0.5));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = _730 * 0.5;
        float _767 = _740 * 0.5;
        float _768 = _750 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _783 = (dot(vec3(_408, _409, _410), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _793 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3397 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_795 + 1.0))) + _800) * _763;
        float _810 = _731 * 0.5;
        float _811 = _741 * 0.5;
        float _812 = _751 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _826 = (dot(vec3(_408, _409, _410), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3408 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _835 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3419 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _837 = _836 * 2.0;
        float _841 = (1.0 - _836) / (_836 + 1.0);
        float _3430 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _851 = ((((1.0 - _842) * (_837 + 2.0)) * exp2(log2(isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * (_837 + 1.0))) + _842) * _764;
        float _852 = _732 * 0.5;
        float _853 = _742 * 0.5;
        float _854 = _752 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _868 = (dot(vec3(_408, _409, _410), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _877 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _879 = _878 * 2.0;
        float _883 = (1.0 - _878) / (_878 + 1.0);
        float _3463 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _893 = ((((1.0 - _884) * (_879 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_879 + 1.0))) + _884) * _765;
        _901 = _732;
        _903 = _731;
        _904 = _730;
        _905 = _742;
        _906 = _741;
        _907 = _740;
        _908 = _752;
        _909 = _751;
        _910 = _750;
        _911 = _765;
        _912 = _764;
        _913 = _763;
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0)));
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)));
    }
    else
    {
        _901 = _902;
        _903 = _902;
        _904 = _902;
        _905 = _902;
        _906 = _902;
        _907 = _902;
        _908 = _902;
        _909 = _902;
        _910 = _902;
        _911 = _902;
        _912 = _902;
        _913 = _902;
        _914 = 0.0;
        _915 = 0.0;
        _916 = 0.0;
    }
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _942 = fma(_600, cbModelParam._m0[30u].z, fma(_596, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _592));
        float _946 = fma(_600, cbModelParam._m0[31u].z, fma(_596, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _592));
        float _950 = fma(_600, cbModelParam._m0[32u].z, fma(_596, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _592));
        float _973 = _592 + _408;
        float _974 = _596 + _409;
        float _975 = _600 + _410;
        float _985 = fma(_975, cbModelParam._m0[30u].z, fma(_974, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _973)) - _942;
        float _986 = fma(_975, cbModelParam._m0[31u].z, fma(_974, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _973)) - _946;
        float _987 = fma(_975, cbModelParam._m0[32u].z, fma(_974, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _973)) - _950;
        float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
        float _1004 = ((_991 * _985) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_942 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_991 * _986) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_946 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_991 * _987) / cbModelParam._m0[35u].z) + ((((((_950 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        float _1041 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1008.x + (-0.5));
        float _1043 = _1041 * (_1008.y + (-0.5));
        float _1044 = _1041 * (_1008.z + (-0.5));
        float _1051 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1015.x + (-0.5));
        float _1053 = _1051 * (_1015.y + (-0.5));
        float _1054 = _1051 * (_1015.z + (-0.5));
        float _1061 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1022.x + (-0.5));
        float _1063 = _1061 * (_1022.y + (-0.5));
        float _1064 = _1061 * (_1022.z + (-0.5));
        float _1071 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1029.x + (-0.5));
        float _1073 = _1071 * (_1029.y + (-0.5));
        float _1074 = _1071 * (_1029.z + (-0.5));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = _1042 * 0.5;
        float _1079 = _1052 * 0.5;
        float _1080 = _1062 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_408, _409, _410), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3526 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_1105 + 1.0))) + _1110) * _1075;
        float _1120 = _1043 * 0.5;
        float _1121 = _1053 * 0.5;
        float _1122 = _1063 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_408, _409, _410), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3559 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_1147 + 1.0))) + _1152) * _1076;
        float _1162 = _1044 * 0.5;
        float _1163 = _1054 * 0.5;
        float _1164 = _1064 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_408, _409, _410), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3592 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1189 + 1.0))) + _1194) * _1077;
        _1211 = _1044;
        _1212 = _1043;
        _1213 = _1042;
        _1214 = _1054;
        _1215 = _1053;
        _1216 = _1052;
        _1217 = _1064;
        _1218 = _1063;
        _1219 = _1062;
        _1220 = _1077;
        _1221 = _1076;
        _1222 = _1075;
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
    }
    else
    {
        _1211 = _902;
        _1212 = _902;
        _1213 = _902;
        _1214 = _902;
        _1215 = _902;
        _1216 = _902;
        _1217 = _902;
        _1218 = _902;
        _1219 = _902;
        _1220 = _902;
        _1221 = _902;
        _1222 = _902;
        _1223 = 0.0;
        _1224 = 0.0;
        _1225 = 0.0;
    }
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _914)) + _914;
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _915)) + _915;
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _916)) + _916;
    float _1258 = fma(_1237, cbSceneParam._m0[89u].z, fma(_1236, cbSceneParam._m0[89u].y, _1235 * cbSceneParam._m0[89u].x));
    float _1261 = fma(_1237, cbSceneParam._m0[90u].z, fma(_1236, cbSceneParam._m0[90u].y, _1235 * cbSceneParam._m0[90u].x));
    float _1264 = fma(_1237, cbSceneParam._m0[91u].z, fma(_1236, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1235));
    float _1279 = _536 * 0.5;
    float _1280 = _537 * 0.5;
    float _1281 = _538 * 0.5;
    float _1282 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1285 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1288 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1322;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1295 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_901, _905, _908, _911));
        float _1299 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_903, _906, _909, _912));
        float _1303 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_904, _907, _910, _913));
        float _1310 = dot(vec4(cbModelParam._m0[39u]), vec4(_1279, _1280, _1281, 1.0));
        _1322 = dot(vec3(isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1310) ? 0.0 : (isnan(0.0) ? _1310 : max(0.0, _1310))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1322 = 1.0;
    }
    float _1333;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1324 = dot(vec4(cbModelParam._m0[40u]), vec4(_1279, _1280, _1281, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1324) ? 0.0 : (isnan(0.0) ? _1324 : max(0.0, _1324))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1337 = (_1333 * cbModelParam._m0[1u].x) + (_1322 * (1.0 - cbModelParam._m0[1u].x));
    float _1347 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _411);
    float _1348 = isnan(_1347) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1347 : min(cbModelParam._m0[25u].z, _1347));
    float _1430;
    float _1432;
    float _1434;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1397 = fma(_600, cbModelParam._m0[13u].z, fma(_596, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _592)) + cbModelParam._m0[13u].w;
        float _1401 = fma(_600, cbModelParam._m0[14u].z, fma(_596, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _592)) + cbModelParam._m0[14u].w;
        float _1405 = fma(_600, cbModelParam._m0[15u].z, fma(_596, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _592)) + cbModelParam._m0[15u].w;
        float _1408 = fma(_538, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _536));
        float _1411 = fma(_538, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _536));
        float _1414 = fma(_538, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _536));
        float _1442;
        if (_1408 > 0.0)
        {
            _1442 = abs((1.0 - _1397) / _1408);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1397 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1442 = frontier_phi_16_14_ladder;
        }
        float _1650;
        if (_1411 > 0.0)
        {
            _1650 = abs((1.0 - _1401) / _1411);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1401 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1650 = frontier_phi_25_21_ladder;
        }
        float _1904;
        if (_1414 > 0.0)
        {
            _1904 = abs((1.0 - _1405) / _1414);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1405 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1904 = frontier_phi_37_32_ladder;
        }
        float _1906 = isnan(_1650) ? _1442 : (isnan(_1442) ? _1650 : min(_1442, _1650));
        float _1907 = isnan(_1904) ? _1906 : (isnan(_1906) ? _1904 : min(_1906, _1904));
        float _1911 = (_1907 * _1408) + _1397;
        float _1912 = (_1907 * _1411) + _1401;
        float _1913 = (_1907 * _1414) + _1405;
        float _1914 = _1907 * 9.9999997473787516355514526367188e-05;
        float _1916 = (-1.0) - _1914;
        float _1918 = _1914 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1913 > _1918) || ((_1913 < _1916) || ((_1912 > _1918) || ((_1912 < _1916) || ((_1911 < _1916) || (_1911 > _1918))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2041 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1913, cbModelParam._m0[9u].z, fma(_1912, cbModelParam._m0[9u].y, _1911 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1913, cbModelParam._m0[10u].z, fma(_1912, cbModelParam._m0[10u].y, _1911 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1913, cbModelParam._m0[11u].z, fma(_1912, cbModelParam._m0[11u].y, _1911 * cbModelParam._m0[11u].x))), _1348);
            frontier_phi_15_37_ladder = _2041.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2041.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2041.x * cbModelParam._m0[1u].y;
        }
        _1430 = frontier_phi_15_37_ladder_2;
        _1432 = frontier_phi_15_37_ladder_1;
        _1434 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_536, _537, _538), _1348);
        _1430 = _1418.x * cbModelParam._m0[1u].y;
        _1432 = _1418.y * cbModelParam._m0[1u].y;
        _1434 = _1418.z * cbModelParam._m0[1u].y;
    }
    float _1438 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _411);
    float _1439 = isnan(_1438) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1438 : min(cbModelParam._m0[25u].w, _1438));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1496 = fma(_600, cbModelParam._m0[21u].z, fma(_596, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _592)) + cbModelParam._m0[21u].w;
        float _1500 = fma(_600, cbModelParam._m0[22u].z, fma(_596, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _592)) + cbModelParam._m0[22u].w;
        float _1504 = fma(_600, cbModelParam._m0[23u].z, fma(_596, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _592)) + cbModelParam._m0[23u].w;
        float _1507 = fma(_538, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _536));
        float _1510 = fma(_538, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _536));
        float _1513 = fma(_538, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _536));
        float _1655;
        if (_1507 > 0.0)
        {
            _1655 = abs((1.0 - _1496) / _1507);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1496 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1655 = frontier_phi_27_23_ladder;
        }
        float _1931;
        if (_1510 > 0.0)
        {
            _1931 = abs((1.0 - _1500) / _1510);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1500 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1931 = frontier_phi_39_34_ladder;
        }
        float _2144;
        if (_1513 > 0.0)
        {
            _2144 = abs((1.0 - _1504) / _1513);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1504 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2144 = frontier_phi_48_45_ladder;
        }
        float _2146 = isnan(_1931) ? _1655 : (isnan(_1655) ? _1931 : min(_1655, _1931));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1507) + _1496;
        float _2152 = (_2147 * _1510) + _1500;
        float _2153 = (_2147 * _1513) + _1504;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2155 = (-1.0) - _2154;
        float _2157 = _2154 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2153 > _2157) || ((_2153 < _2155) || ((_2152 > _2157) || ((_2152 < _2155) || ((_2151 < _2155) || (_2151 > _2157))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2153, cbModelParam._m0[17u].z, fma(_2152, cbModelParam._m0[17u].y, _2151 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2153, cbModelParam._m0[18u].z, fma(_2152, cbModelParam._m0[18u].y, _2151 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2153, cbModelParam._m0[19u].z, fma(_2152, cbModelParam._m0[19u].y, _2151 * cbModelParam._m0[19u].x))), _1439);
            frontier_phi_24_48_ladder = _2351.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2351.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2351.x * cbModelParam._m0[1u].z;
        }
        _1532 = frontier_phi_24_48_ladder_2;
        _1534 = frontier_phi_24_48_ladder_1;
        _1536 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1516 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_536, _537, _538), _1439);
        _1532 = _1516.x * cbModelParam._m0[1u].z;
        _1534 = _1516.y * cbModelParam._m0[1u].z;
        _1536 = _1516.z * cbModelParam._m0[1u].z;
    }
    float _1549 = (((_563 * _512) + _564) * _528) * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1551 = (((_563 * _514) + _564) * _528) * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1553 = (((_563 * _515) + _564) * _528) * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1556 = fma(_1553, cbSceneParam._m0[89u].z, fma(_1551, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1559 = fma(_1553, cbSceneParam._m0[90u].z, fma(_1551, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1562 = fma(_1553, cbSceneParam._m0[91u].z, fma(_1551, cbSceneParam._m0[91u].y, _1549 * cbSceneParam._m0[91u].x));
    uvec4 _1572 = floatBitsToUint(cbInstanceData._m0[_486 + 5u]);
    uint _1574 = _1572.x * 14u;
    uint _1575 = _1574 + 13u;
    float _1582 = _528 + (-1.0);
    float _1587 = (cbLight._m0[_1575].x * _1582) + 1.0;
    float _1588 = (cbLight._m0[_1575].y * _1582) + 1.0;
    float _1589 = (cbLight._m0[_1575].z * _1582) + 1.0;
    float _1590 = (cbLight._m0[_1575].w * _1582) + 1.0;
    uint _1591 = _1574 + 5u;
    float _1597 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
    uint _1601 = _1574 + 4u;
    float _1608 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
    uint _1612 = _1574 | 1u;
    float _1623 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_408, _409, _410));
    float _1626 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_408, _409, _410));
    float _3728 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _3739 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1631 = (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.3183098733425140380859375;
    float _1633 = (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * 0.3183098733425140380859375;
    float _1640 = ((cbLight._m0[_1591].x * _1597) * _1633) + ((cbLight._m0[_1601].x * _1608) * _1631);
    float _1641 = ((_1597 * cbLight._m0[_1591].y) * _1633) + ((_1608 * cbLight._m0[_1601].y) * _1631);
    float _1642 = ((_1597 * cbLight._m0[_1591].z) * _1633) + ((_1608 * cbLight._m0[_1601].z) * _1631);
    uvec4 _1647 = floatBitsToUint(cbLight._m0[_1574 + 12u]);
    bool _1649 = _1647.x == 0u;
    float _1660;
    float _1662;
    float _1664;
    if (_1649)
    {
        _1660 = _1640;
        _1662 = _1641;
        _1664 = _1642;
    }
    else
    {
        uint _1668 = _1574 + 6u;
        float _1684 = (dot(vec3(cbLight._m0[_1574 + 2u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _1685 = _1684 * _1684;
        float _3750 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1687 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _1660 = (((cbLight._m0[_1668].x * 0.3183098733425140380859375) * _1686) * _1687) + _1640;
        _1662 = (((cbLight._m0[_1668].y * 0.3183098733425140380859375) * _1686) * _1687) + _1641;
        _1664 = (((cbLight._m0[_1668].z * 0.3183098733425140380859375) * _1686) * _1687) + _1642;
    }
    bool _1667 = _1647.y == 0u;
    float _1705;
    float _1707;
    float _1709;
    if (_1667)
    {
        _1705 = _1660;
        _1707 = _1662;
        _1709 = _1664;
    }
    else
    {
        uint _1875 = _1574 + 7u;
        float _1891 = (dot(vec3(cbLight._m0[_1574 + 3u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _1892 = _1891 * _1891;
        float _3766 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1894 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _1705 = (((cbLight._m0[_1875].x * 0.3183098733425140380859375) * _1893) * _1894) + _1660;
        _1707 = (((cbLight._m0[_1875].y * 0.3183098733425140380859375) * _1893) * _1894) + _1662;
        _1709 = (((cbLight._m0[_1875].z * 0.3183098733425140380859375) * _1893) * _1894) + _1664;
    }
    uint _1712 = _1574 + 8u;
    float _1725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1574].w)) * _411) * 0.949999988079071044921875);
    float _1726 = _1725 * _1725;
    float _1727 = cbLight._m0[_1574].x + _437;
    float _1728 = cbLight._m0[_1574].y + _438;
    float _1729 = cbLight._m0[_1574].z + _439;
    float _1733 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
    float _1734 = _1733 * _1727;
    float _1735 = _1733 * _1728;
    float _1736 = _1733 * _1729;
    float _1737 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1574].xyz));
    float _3782 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1740 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _1741 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _1742 = dot(vec3(_408, _409, _410), vec3(_1734, _1735, _1736));
    float _3804 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _1746 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_1734, _1735, _1736));
    float _3815 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1750 = _1726 * _1726;
    float _1754 = ((_1745 * _1745) * (_1750 + (-1.0))) + 1.0;
    float _1762 = exp2(log2(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * 5.0);
    float _1763 = 0.959999978542327880859375 - _509;
    float _1765 = 0.959999978542327880859375 - _510;
    float _1766 = 0.959999978542327880859375 - _511;
    float _1773 = 1.0 - _1726;
    float _1784 = (0.5 / (((_1741 * ((_1740 * _1773) + _1726)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _1773) + _1726) * _1740))) * _1740;
    float _3826 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1786 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1750 / ((_1754 * _1754) * 3.141590118408203125));
    uint _1797 = _1574 + 9u;
    float _1808 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1612].w)) * _411) * 0.949999988079071044921875);
    float _1809 = _1808 * _1808;
    float _1810 = cbLight._m0[_1612].x + _437;
    float _1811 = cbLight._m0[_1612].y + _438;
    float _1812 = cbLight._m0[_1612].z + _439;
    float _1816 = inversesqrt(dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812)));
    float _1817 = _1816 * _1810;
    float _1818 = _1816 * _1811;
    float _1819 = _1816 * _1812;
    float _1820 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1612].xyz));
    float _3837 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _1824 = dot(vec3(_408, _409, _410), vec3(_1817, _1818, _1819));
    float _3848 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _1828 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_1817, _1818, _1819));
    float _3859 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1832 = _1809 * _1809;
    float _1836 = ((_1827 * _1827) * (_1832 + (-1.0))) + 1.0;
    float _1843 = exp2(log2(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * 5.0);
    float _1850 = 1.0 - _1809;
    float _1860 = (0.5 / (((_1741 * ((_1823 * _1850) + _1809)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _1850) + _1809) * _1823))) * _1823;
    float _3870 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1862 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1832 / ((_1836 * _1836) * 3.141590118408203125));
    float _1872 = (((((_1843 * _1763) + _512) * cbLight._m0[_1797].x) * _1862) * _1597) + (((((_1762 * _1763) + _512) * cbLight._m0[_1712].x) * _1786) * _1608);
    float _1873 = (((((_1843 * _1765) + _514) * cbLight._m0[_1797].y) * _1862) * _1597) + (((((_1762 * _1765) + _514) * cbLight._m0[_1712].y) * _1786) * _1608);
    float _1874 = (((((_1843 * _1766) + _515) * cbLight._m0[_1797].z) * _1862) * _1597) + (((((_1762 * _1766) + _515) * cbLight._m0[_1712].z) * _1786) * _1608);
    float _1936;
    float _1938;
    float _1940;
    if (_1649)
    {
        _1936 = _1872;
        _1938 = _1873;
        _1940 = _1874;
    }
    else
    {
        uint _1942 = _1574 + 2u;
        uint _1946 = _1574 + 10u;
        float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _411) * 0.949999988079071044921875);
        float _1961 = _1960 * _1960;
        float _1962 = cbLight._m0[_1942].x + _437;
        float _1963 = cbLight._m0[_1942].y + _438;
        float _1964 = cbLight._m0[_1942].z + _439;
        float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
        float _1969 = _1968 * _1962;
        float _1970 = _1968 * _1963;
        float _1971 = _1968 * _1964;
        float _1972 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1942].xyz));
        float _3881 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1975 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1976 = dot(vec3(_408, _409, _410), vec3(_1969, _1970, _1971));
        float _3892 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1979 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1980 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_1969, _1970, _1971));
        float _3903 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1984 = _1961 * _1961;
        float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
        float _1995 = exp2(log2(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * 5.0);
        float _2002 = 1.0 - _1961;
        float _2012 = (0.5 / (((_1741 * ((_1975 * _2002) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _2002) + _1961) * _1975))) * _1975;
        float _3914 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2014 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
        float _2015 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _1936 = (((((_1995 * _1763) + _512) * cbLight._m0[_1946].x) * _2014) * _2015) + _1872;
        _1938 = (((((_1995 * _1765) + _514) * cbLight._m0[_1946].y) * _2014) * _2015) + _1873;
        _1940 = (((((_1995 * _1766) + _515) * cbLight._m0[_1946].z) * _2014) * _2015) + _1874;
    }
    float _2050;
    float _2052;
    float _2054;
    if (_1667)
    {
        _2050 = _1936;
        _2052 = _1938;
        _2054 = _1940;
    }
    else
    {
        uint _2061 = _1574 + 3u;
        uint _2065 = _1574 + 11u;
        float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _411) * 0.949999988079071044921875);
        float _2080 = _2079 * _2079;
        float _2081 = cbLight._m0[_2061].x + _437;
        float _2082 = cbLight._m0[_2061].y + _438;
        float _2083 = cbLight._m0[_2061].z + _439;
        float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
        float _2088 = _2087 * _2081;
        float _2089 = _2087 * _2082;
        float _2090 = _2087 * _2083;
        float _2091 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2061].xyz));
        float _3930 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2094 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _2095 = dot(vec3(_408, _409, _410), vec3(_2088, _2089, _2090));
        float _3941 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _2099 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2088, _2089, _2090));
        float _3952 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2103 = _2080 * _2080;
        float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
        float _2114 = exp2(log2(1.0 - (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * 5.0);
        float _2121 = 1.0 - _2080;
        float _2131 = (0.5 / (((_1741 * ((_2094 * _2121) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _2121) + _2080) * _2094))) * _2094;
        float _3963 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2133 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
        float _2134 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _2050 = (((((_2114 * _1763) + _512) * cbLight._m0[_2065].x) * _2133) * _2134) + _1936;
        _2052 = (((((_2114 * _1765) + _514) * cbLight._m0[_2065].y) * _2133) * _2134) + _1938;
        _2054 = (((((_2114 * _1766) + _515) * cbLight._m0[_2065].z) * _2133) * _2134) + _1940;
    }
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    if (_1572.y == 0u)
    {
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2209;
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2209;
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2209;
        uvec4 _2224 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2225 = _2224.x;
        uint _2236 = uint((float(_2224.y) * floor(float(uint(cbSceneParam._m0[85u].y * _446) / _2225))) + floor(float(uint(cbSceneParam._m0[85u].x * _445) / _2225)));
        float _2246 = (log2(_2212 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2247 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        uint _2250 = uint(isnan(14.0) ? _2247 : (isnan(_2247) ? 14.0 : min(_2247, 14.0)));
        uvec4 _2255 = texelFetch(g_lightClusterGridBuffer, int(((_2250 << 2u) + (_2236 << 6u)) >> 2u));
        uint _2256 = _2255.x;
        uint _2257 = _2224.z;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        if (((((1u << ((_2257 >> 4u) & 15u)) + 4294967295u) & _2256) == 0u) || ((_2257 & 240u) == 0u))
        {
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
            _2366 = 0.0;
        }
        else
        {
            float _2357;
            float _2359;
            float _2361;
            float _2363;
            float _2365;
            float _2367;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            uint _2506 = 0u;
            uint _2515;
            bool _2516;
            for (;;)
            {
                _2515 = texelFetch(g_lightClassification, int((((_2250 << 5u) + (_2236 << 9u)) + (_2506 << 2u)) >> 2u)).x;
                _2516 = _2515 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2516)
                {
                    frontier_phi_63_pred = _2505;
                    frontier_phi_63_pred_1 = _2504;
                    frontier_phi_63_pred_2 = _2503;
                    frontier_phi_63_pred_3 = _2502;
                    frontier_phi_63_pred_4 = _2501;
                    frontier_phi_63_pred_5 = _2500;
                }
                else
                {
                    float _2624;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    uint _2630;
                    _2624 = _2500;
                    _2625 = _2501;
                    _2626 = _2502;
                    _2627 = _2503;
                    _2628 = _2504;
                    _2629 = _2505;
                    _2630 = _2515;
                    float _2556;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    for (;;)
                    {
                        uint _2634 = uint(findLSB(_2630)) + (_2506 << 5u);
                        uint _2631 = (_2630 + 4294967295u) & _2630;
                        uint _2636 = _2634 * 48u;
                        vec4 _2650 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2636)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 3u)).x));
                        uint _2656 = (_2634 * 48u) + 4u;
                        vec4 _2669 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2656)).x, texelFetch(g_PointLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2656 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2656 + 3u)).x));
                        uint _2675 = (_2634 * 48u) + 8u;
                        vec3 _2686 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 2u)).x));
                        float _2690 = _2650.x - _2210;
                        float _2691 = _2650.y - _2211;
                        float _2692 = _2650.z - _2212;
                        float _2693 = dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692));
                        float _2696 = inversesqrt(_2693);
                        float _2697 = _2696 * _2690;
                        float _2698 = _2696 * _2691;
                        float _2699 = _2696 * _2692;
                        float _2700 = dot(vec3(_467, _470, _473), vec3(_2697, _2698, _2699));
                        float _2705 = 1.0 - (_2693 * _2650.w);
                        float _3989 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                        float _2706 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                        float _2707 = sqrt(_2693) * _2669.w;
                        float _2710 = 1.39999997615814208984375 / (_2707 + 1.39999997615814208984375);
                        float _2711 = _2710 * _2710;
                        float _2714 = ((1.0 - _2711) * _2700) + _2711;
                        float _2717 = _2707 * _2707;
                        float _2721 = ((isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0))) * _2706) / ((_2717 * 0.699999988079071044921875) + 1.0);
                        float _2725 = (-0.0) - _2210;
                        float _2726 = (-0.0) - _2211;
                        float _2727 = (-0.0) - _2212;
                        float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
                        float _2732 = _2731 * _2725;
                        float _2733 = _2731 * _2726;
                        float _2734 = _2731 * _2727;
                        float _2742 = exp2(log2(1.0 / ((_2717 * 3.5) + 5.0)) * 0.25);
                        float _2743 = 1.0 - _544;
                        float _2750 = sqrt(1.0 - ((1.0 - (_2743 * _2743)) * (1.0 - (_2742 * _2742))));
                        float _2751 = _2750 * _2750;
                        float _2752 = _2751 * _2751;
                        float _2753 = _2732 + _2697;
                        float _2754 = _2733 + _2698;
                        float _2755 = _2734 + _2699;
                        float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
                        float _2763 = dot(vec3(_467, _470, _473), vec3(_2732, _2733, _2734));
                        float _4005 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2766 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                        float _2767 = dot(vec3(_467, _470, _473), vec3(_2759 * _2753, _2759 * _2754, _2759 * _2755));
                        float _4016 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2770 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                        float _2774 = ((_2770 * _2770) * (_2752 + (-1.0))) + 1.0;
                        float _2775 = _2710 * _2751;
                        float _2776 = _2775 * _2775;
                        float _2779 = ((1.0 - _2776) * _2700) + _2776;
                        float _4027 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2780 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                        float _2781 = 1.0 - _2751;
                        float _2791 = (0.5 / (((_2780 * ((_2766 * _2781) + _2751)) + 9.9999999392252902907785028219223e-09) + (((_2780 * _2781) + _2751) * _2766))) * _2780;
                        float _4038 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2802 = (((_2752 * 3.1415927410125732421875) * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) / ((_2774 * _2774) * ((_2717 * 2.1991131305694580078125) + 3.141590118408203125))) * _2706;
                        _2559 = (_2721 * _2669.x) + _2627;
                        _2560 = (_2721 * _2669.y) + _2628;
                        _2561 = (_2721 * _2669.z) + _2629;
                        _2556 = (_2802 * _2686.x) + _2624;
                        _2557 = (_2802 * _2686.y) + _2625;
                        _2558 = (_2802 * _2686.z) + _2626;
                        if (_2631 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2624 = _2556;
                            _2625 = _2557;
                            _2626 = _2558;
                            _2627 = _2559;
                            _2628 = _2560;
                            _2629 = _2561;
                            _2630 = _2631;
                        }
                    }
                    frontier_phi_63_pred = _2561;
                    frontier_phi_63_pred_1 = _2560;
                    frontier_phi_63_pred_2 = _2559;
                    frontier_phi_63_pred_3 = _2558;
                    frontier_phi_63_pred_4 = _2557;
                    frontier_phi_63_pred_5 = _2556;
                }
                _2367 = frontier_phi_63_pred;
                _2365 = frontier_phi_63_pred_1;
                _2363 = frontier_phi_63_pred_2;
                _2361 = frontier_phi_63_pred_3;
                _2359 = frontier_phi_63_pred_4;
                _2357 = frontier_phi_63_pred_5;
                uint _2507 = _2506 + 1u;
                if (_2507 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2500 = _2357;
                    _2501 = _2359;
                    _2502 = _2361;
                    _2503 = _2363;
                    _2504 = _2365;
                    _2505 = _2367;
                    _2506 = _2507;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
            _2366 = _2367;
        }
        uvec4 _2370 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2371 = _2370.z;
        uint _2373 = (_2371 >> 8u) & 15u;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        if (((4294967295u << _2373) & _2256) == 0u)
        {
            _2468 = _2356;
            _2470 = _2358;
            _2472 = _2360;
            _2474 = _2362;
            _2476 = _2364;
            _2478 = _2366;
        }
        else
        {
            float _2493 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
            float _2494 = _2493 * _2210;
            float _2495 = _2493 * _2211;
            float _2496 = _2493 * _2212;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2373 < ((_2371 >> 12u) & 15u))
            {
                float _2469;
                float _2471;
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2607 = _2356;
                float _2608 = _2358;
                float _2609 = _2360;
                float _2610 = _2362;
                float _2611 = _2364;
                float _2612 = _2366;
                uint _2613 = _2373;
                uint _2622;
                bool _2623;
                for (;;)
                {
                    _2622 = texelFetch(g_lightClassification, int((((_2250 << 5u) + (_2236 << 9u)) + (_2613 << 2u)) >> 2u)).x;
                    _2623 = _2622 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2623)
                    {
                        frontier_phi_69_pred = _2612;
                        frontier_phi_69_pred_1 = _2611;
                        frontier_phi_69_pred_2 = _2610;
                        frontier_phi_69_pred_3 = _2609;
                        frontier_phi_69_pred_4 = _2608;
                        frontier_phi_69_pred_5 = _2607;
                    }
                    else
                    {
                        float _2807;
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _2820 = _2607;
                        float _2821 = _2608;
                        float _2822 = _2609;
                        float _2823 = _2610;
                        float _2824 = _2611;
                        float _2825 = _2612;
                        uint _2826 = _2622;
                        uint _2827;
                        vec4 _2852;
                        float _2853;
                        vec4 _2868;
                        vec3 _2880;
                        vec4 _2896;
                        vec4 _2912;
                        float _2959;
                        bool _2960;
                        for (;;)
                        {
                            uint _2837 = ((_2613 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2826));
                            _2827 = (_2826 + 4294967295u) & _2826;
                            uint _2839 = _2837 * 40u;
                            _2852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 3u)).x));
                            _2853 = _2852.w;
                            uint _2855 = (_2837 * 40u) + 4u;
                            _2868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 3u)).x));
                            uint _2870 = (_2837 * 40u) + 8u;
                            _2880 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x));
                            uint _2883 = (_2837 * 40u) + 16u;
                            _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            uint _2899 = (_2837 * 40u) + 20u;
                            _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            uint _2915 = (_2837 * 40u) + 24u;
                            vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            uint _2934 = (_2837 * 40u) + 28u;
                            vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            _2959 = fma(_2212, _2947.z, fma(_2211, _2947.y, _2947.x * _2210)) + _2947.w;
                            _2960 = !((fma(_2212, _2928.z, fma(_2211, _2928.y, _2928.x * _2210)) + _2928.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2960)
                            {
                                float _2987 = _2852.x - _2210;
                                float _2988 = _2852.y - _2211;
                                float _2989 = _2852.z - _2212;
                                float _2990 = dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989));
                                float _2993 = inversesqrt(_2990);
                                float _2994 = _2993 * _2987;
                                float _2995 = _2993 * _2988;
                                float _2996 = _2993 * _2989;
                                float _3000 = 1.0 - (_2990 / (_2853 * _2853));
                                float _4049 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3001 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _3005 = sqrt(_2990) * _2868.w;
                                float _3007 = 1.39999997615814208984375 / (_3005 + 1.39999997615814208984375);
                                float _3008 = _3007 * _3007;
                                float _3011 = ((1.0 - _3008) * dot(vec3(_2994, _2995, _2996), vec3(_467, _470, _473))) + _3008;
                                float _3014 = _3005 * _3005;
                                float _3018 = (fma(_2212, _2896.z, fma(_2211, _2896.y, _2896.x * _2210)) + _2896.w) / _2959;
                                float _3019 = (fma(_2212, _2912.z, fma(_2211, _2912.y, _2912.x * _2210)) + _2912.w) / _2959;
                                float _3023 = 1.0 - dot(vec2(_3018, _3019), vec2(_3018, _3019));
                                float _4065 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3024 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3025 = _3024 * (((isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0))) * _3001) / ((_3014 * 0.699999988079071044921875) + 1.0));
                                float _3037 = exp2(log2(1.0 / ((_3014 * 3.5) + 5.0)) * 0.25);
                                float _3038 = 1.0 - _544;
                                float _3045 = sqrt(1.0 - ((1.0 - (_3038 * _3038)) * (1.0 - (_3037 * _3037))));
                                float _3046 = _3045 * _3045;
                                float _3047 = _3046 * _3046;
                                float _3048 = _2994 - _2494;
                                float _3049 = _2995 - _2495;
                                float _3050 = _2996 - _2496;
                                float _3054 = inversesqrt(dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050)));
                                float _3058 = dot(vec3(_467, _470, _473), vec3((-0.0) - _2494, (-0.0) - _2495, (-0.0) - _2496));
                                float _4076 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3061 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3062 = dot(vec3(_467, _470, _473), vec3(_3054 * _3048, _3054 * _3049, _3054 * _3050));
                                float _4087 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3065 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3069 = ((_3065 * _3065) * (_3047 + (-1.0))) + 1.0;
                                float _3070 = _3007 * _3046;
                                float _3071 = _3070 * _3070;
                                float _3077 = ((1.0 - _3071) * dot(vec3(_467, _470, _473), vec3(_2994, _2995, _2996))) + _3071;
                                float _4098 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3078 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                                float _3079 = 1.0 - _3046;
                                float _3089 = (0.5 / (((_3078 * ((_3061 * _3079) + _3046)) + 9.9999999392252902907785028219223e-09) + (((_3078 * _3079) + _3046) * _3061))) * _3078;
                                float _4109 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3099 = (_3024 * _3001) * (((_3047 * 3.1415927410125732421875) * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) / ((_3069 * _3069) * ((_3014 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3025 * _2868.z;
                                frontier_phi_75_pred_1 = _3025 * _2868.y;
                                frontier_phi_75_pred_2 = _3025 * _2868.x;
                                frontier_phi_75_pred_3 = _3099 * _2880.z;
                                frontier_phi_75_pred_4 = _3099 * _2880.y;
                                frontier_phi_75_pred_5 = _3099 * _2880.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3108 = frontier_phi_75_pred;
                            _3107 = frontier_phi_75_pred_1;
                            _3106 = frontier_phi_75_pred_2;
                            _3105 = frontier_phi_75_pred_3;
                            _3104 = frontier_phi_75_pred_4;
                            _3103 = frontier_phi_75_pred_5;
                            _2810 = _3106 + _2823;
                            _2811 = _3107 + _2824;
                            _2812 = _3108 + _2825;
                            _2807 = _3103 + _2820;
                            _2808 = _3104 + _2821;
                            _2809 = _3105 + _2822;
                            if (_2827 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2820 = _2807;
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2827;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2812;
                        frontier_phi_69_pred_1 = _2811;
                        frontier_phi_69_pred_2 = _2810;
                        frontier_phi_69_pred_3 = _2809;
                        frontier_phi_69_pred_4 = _2808;
                        frontier_phi_69_pred_5 = _2807;
                    }
                    _2479 = frontier_phi_69_pred;
                    _2477 = frontier_phi_69_pred_1;
                    _2475 = frontier_phi_69_pred_2;
                    _2473 = frontier_phi_69_pred_3;
                    _2471 = frontier_phi_69_pred_4;
                    _2469 = frontier_phi_69_pred_5;
                    uint _2614 = _2613 + 1u;
                    if (_2614 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2607 = _2469;
                        _2608 = _2471;
                        _2609 = _2473;
                        _2610 = _2475;
                        _2611 = _2477;
                        _2612 = _2479;
                        _2613 = _2614;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2479;
                frontier_phi_57_58_ladder_1 = _2477;
                frontier_phi_57_58_ladder_2 = _2475;
                frontier_phi_57_58_ladder_3 = _2473;
                frontier_phi_57_58_ladder_4 = _2471;
                frontier_phi_57_58_ladder_5 = _2469;
            }
            else
            {
                frontier_phi_57_58_ladder = _2366;
                frontier_phi_57_58_ladder_1 = _2364;
                frontier_phi_57_58_ladder_2 = _2362;
                frontier_phi_57_58_ladder_3 = _2360;
                frontier_phi_57_58_ladder_4 = _2358;
                frontier_phi_57_58_ladder_5 = _2356;
            }
            _2468 = frontier_phi_57_58_ladder_5;
            _2470 = frontier_phi_57_58_ladder_4;
            _2472 = frontier_phi_57_58_ladder_3;
            _2474 = frontier_phi_57_58_ladder_2;
            _2476 = frontier_phi_57_58_ladder_1;
            _2478 = frontier_phi_57_58_ladder;
        }
        float _2483 = isnan(1.0) ? _528 : (isnan(_528) ? 1.0 : min(_528, 1.0));
        _2268 = (_2483 * _2474) + _1705;
        _2270 = (_2483 * _2476) + _1707;
        _2272 = (_2483 * _2478) + _1709;
        _2274 = ((_2468 * _512) * _2483) + _2050;
        _2276 = ((_2470 * _514) * _2483) + _2052;
        _2278 = ((_2472 * _515) * _2483) + _2054;
    }
    else
    {
        _2268 = _1705;
        _2270 = _1707;
        _2272 = _1709;
        _2274 = _2050;
        _2276 = _2052;
        _2278 = _2054;
    }
    float _4125 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _4136 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _4147 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    uint _2298 = _486 + 6u;
    float _2306 = _445 / cbSceneParam._m0[86u].x;
    float _2307 = _446 / cbSceneParam._m0[86u].y;
    vec4 _2321 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, (log2((isnan(cbSceneParam._m0[77u].w) ? _432 : (isnan(_432) ? cbSceneParam._m0[77u].w : min(_432, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2323 = _2321.x;
    float _2324 = _2321.y;
    float _2325 = _2321.z;
    float _2326 = _2321.w;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_432 > cbSceneParam._m0[78u].w)
    {
        float _2381 = isnan(_432) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _432 : min(cbSceneParam._m0[80u].w, _432));
        float _2382 = _2381 / _432;
        float _2393 = _2382 * _267;
        float _2394 = _268 * _2382;
        float _2395 = (-0.0) - _2394;
        float _2396 = _2382 * _269;
        float _2398 = (cbSceneParam._m0[77u].w * _2395) / _2381;
        float _2399 = _2398 + cbSceneParam._m0[79u].w;
        float _2400 = cbSceneParam._m0[79u].w - _2394;
        float _2406 = sqrt(((_2393 * _2393) + (_2394 * _2394)) + (_2396 * _2396));
        float _2409 = (1.0 - (cbSceneParam._m0[77u].w / _2381)) * _2406;
        float _2414 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2416 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2569;
        if (abs((_2395 - _2398) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2569 = ((((_2399 > 0.0) ? exp2(_2414 * _2399) : (2.0 - exp2(_2416 * _2399))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2409;
        }
        else
        {
            float _2529 = 1.0 / cbSceneParam._m0[80u].x;
            float _2530 = isnan(_2400) ? _2399 : (isnan(_2399) ? _2400 : max(_2399, _2400));
            float _2531 = isnan(_2400) ? _2399 : (isnan(_2399) ? _2400 : min(_2399, _2400));
            float _2540 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : min(_2530, 0.0));
            float _2541 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : min(_2531, 0.0));
            _2569 = ((abs(_2406 / _2395) * cbSceneParam._m0[80u].y) * ((((_2540 - _2541) * 2.0) - ((exp2(_2414 * (isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0)))) - exp2(_2414 * (isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0))))) * _2529)) - ((exp2(_2416 * _2540) - exp2(_2416 * _2541)) * _2529))) + (_2409 * cbSceneParam._m0[80u].z);
        }
        vec4 _2571 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, 1.0), 0.0);
        float _2580 = exp2((_2569 * (-1.44269502162933349609375)) * (1.0 - _2571.w));
        float _2581 = log2(_2580);
        float _2597 = log2(_2326);
        _2418 = (exp2(_2597 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2581 * cbSceneParam._m0[78u].x)) * _2571.x) / cbSceneParam._m0[78u].x)) + _2323;
        _2420 = (exp2(_2597 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2581 * cbSceneParam._m0[78u].y)) * _2571.y) / cbSceneParam._m0[78u].y)) + _2324;
        _2422 = (exp2(_2597 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2581 * cbSceneParam._m0[78u].z)) * _2571.z) / cbSceneParam._m0[78u].z)) + _2325;
        _2424 = _2580 * _2326;
    }
    else
    {
        _2418 = _2323;
        _2420 = _2324;
        _2422 = _2325;
        _2424 = _2326;
    }
    float _2436 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2437 = _2436 == 3.0;
    float _2438 = log2(_2424);
    float _2445 = exp2(_2438 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2268 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _528))) + ((_2274 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1337)) * cbPerFrame._m0[3u].x));
    float _2446 = exp2(_2438 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2270 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _528))) + ((_2276 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1337)) * cbPerFrame._m0[3u].x));
    float _2447 = exp2(_2438 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2272 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _528))) + ((_2278 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1337)) * cbPerFrame._m0[3u].x));
    float _2456 = (_2436 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2456 * (_2437 ? _2445 : (_2445 + (cbSceneParam._m0[72u].w * _2418)));
    SV_Target.y = _2456 * (_2437 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2420)));
    SV_Target.z = _2456 * (_2437 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2422)));
    SV_Target.w = cbInstanceData._m0[_2298].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2298].w;
}


