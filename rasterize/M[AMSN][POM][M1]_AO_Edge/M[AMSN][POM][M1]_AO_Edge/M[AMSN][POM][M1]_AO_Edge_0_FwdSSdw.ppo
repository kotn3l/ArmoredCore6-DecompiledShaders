#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _904;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    float _280 = dot(vec3(_269, _270, _271), vec3(_192, _193, _194));
    float _283 = dot(vec3(_269, _270, _271), vec3(_206, _207, _208));
    float _286 = dot(vec3(_269, _270, _271), vec3(_213, _214, _215));
    float _292 = inversesqrt(dot(vec3(_280, _283, _286), vec3(_280, _283, _286)));
    vec4 _305 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _316 = dot(vec4(_305), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _324 = (((cbMtdParam._m0[10u].y * _280) * _292) * _316) + TEXCOORD.x;
    float _325 = (((_283 * cbMtdParam._m0[10u].y) * _292) * _316) + TEXCOORD.y;
    vec4 _337 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_324 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_325 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _342 = _337.x * cbMtdParam._m0[9u].x;
    float _343 = _337.y * cbMtdParam._m0[9u].y;
    float _344 = _337.z * cbMtdParam._m0[9u].z;
    vec4 _356 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _358 = _356.x;
    vec4 _370 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _324) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _325) + cbTextureTilingScale._m0[3u].w));
    float _374 = _370.z;
    float _379 = (_370.x * 2.0) + (-1.0);
    float _381 = (_370.y * 2.0) + (-1.0);
    float _382 = dot(vec2(_379, _381), vec2(_379, _381));
    float _3265 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _387 = sqrt(1.0 - (isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0))));
    float _390 = fma(_387, _213, fma(_381, _206, _379 * _192));
    float _393 = fma(_387, _214, fma(_381, _207, _379 * _193));
    float _396 = fma(_387, _215, fma(_381, _208, _379 * _194));
    float _400 = inversesqrt(dot(vec3(_390, _393, _396), vec3(_390, _393, _396)));
    float _401 = _400 * _390;
    float _402 = _400 * _393;
    float _403 = _400 * _396;
    float _405 = cbMtdParam._m0[10u].x + _370.w;
    float _409 = inversesqrt(dot(vec3(_401, _402, _403), vec3(_401, _402, _403)));
    float _410 = _409 * _401;
    float _411 = _409 * _402;
    float _412 = _409 * _403;
    float _3276 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _413 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    float _3287 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3298 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3309 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3320 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3331 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _418 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _434 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _438 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _439 = _269 * _438;
    float _440 = _270 * _438;
    float _441 = _271 * _438;
    float _447 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _448 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _469 = fma(_412, cbSceneParam._m0[5u].z, fma(_411, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _410));
    float _472 = fma(_412, cbSceneParam._m0[6u].z, fma(_411, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _410));
    float _475 = fma(_412, cbSceneParam._m0[7u].z, fma(_411, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _410));
    uint _488 = uint(roundEven(NORMAL.w)) * 13u;
    uint _491 = (_488 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _497 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_491].x;
    float _498 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) * cbInstanceData._m0[_491].y;
    float _499 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) * cbInstanceData._m0[_491].z;
    float _3342 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _500 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _501 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _3364 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _503 = 1.0 - _418;
    float _504 = _500 * _503;
    float _505 = _501 * _503;
    float _506 = _502 * _503;
    float _511 = (_500 + (-0.039999999105930328369140625)) * _418;
    float _512 = (_501 + (-0.039999999105930328369140625)) * _418;
    float _513 = (_502 + (-0.039999999105930328369140625)) * _418;
    float _514 = _511 + 0.039999999105930328369140625;
    float _516 = _512 + 0.039999999105930328369140625;
    float _517 = _513 + 0.039999999105930328369140625;
    vec4 _526 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _447, cbSceneParam._m0[86u].y * _448));
    float _530 = ((isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0))) * TEXCOORD.z) * _526.x;
    float _531 = dot(vec3(_410, _411, _412), vec3(_439, _440, _441));
    float _534 = _531 * 2.0;
    float _538 = (_534 * _410) - _439;
    float _539 = (_534 * _411) - _440;
    float _540 = (_534 * _412) - _441;
    float _544 = abs(dot(vec3(_439, _440, _441), vec3(_410, _411, _412)));
    float _3375 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _546 = sqrt(_413);
    float _559 = exp2((_546 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_546 * 3.0));
    float _565 = (1.0 - _559) * ((_546 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _566 = _559 * _546;
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _903;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _629 = fma(_602, cbModelParam._m0[26u].z, fma(_598, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _594));
        float _633 = fma(_602, cbModelParam._m0[27u].z, fma(_598, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _594));
        float _637 = fma(_602, cbModelParam._m0[28u].z, fma(_598, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _594));
        float _661 = _594 + _410;
        float _662 = _598 + _411;
        float _663 = _602 + _412;
        float _673 = fma(_663, cbModelParam._m0[26u].z, fma(_662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _661)) - _629;
        float _674 = fma(_663, cbModelParam._m0[27u].z, fma(_662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _661)) - _633;
        float _675 = fma(_663, cbModelParam._m0[28u].z, fma(_662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _661)) - _637;
        float _679 = inversesqrt(dot(vec3(_673, _674, _675), vec3(_673, _674, _675)));
        float _692 = ((_679 * _673) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_629 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _693 = ((_679 * _674) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_633 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _694 = ((_679 * _675) / cbModelParam._m0[34u].z) + ((((((_637 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        float _731 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_697.x + (-0.5));
        float _733 = _731 * (_697.y + (-0.5));
        float _734 = _731 * (_697.z + (-0.5));
        float _741 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_704.x + (-0.5));
        float _743 = _741 * (_704.y + (-0.5));
        float _744 = _741 * (_704.z + (-0.5));
        float _751 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_711.x + (-0.5));
        float _753 = _751 * (_711.y + (-0.5));
        float _754 = _751 * (_711.z + (-0.5));
        float _761 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_718.x + (-0.5));
        float _763 = _761 * (_718.y + (-0.5));
        float _764 = _761 * (_718.z + (-0.5));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = _732 * 0.5;
        float _769 = _742 * 0.5;
        float _770 = _752 * 0.5;
        float _771 = dot(vec3(_768, _769, _770), vec3(_768, _769, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _785 = (dot(vec3(_410, _411, _412), vec3(_776 * _768, _776 * _769, _776 * _770)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _795 = sqrt(((_769 * _769) + (_768 * _768)) + (_770 * _770)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _797 = _796 * 2.0;
        float _801 = (1.0 - _796) / (_796 + 1.0);
        float _3423 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _811 = ((((1.0 - _802) * (_797 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_797 + 1.0))) + _802) * _765;
        float _812 = _733 * 0.5;
        float _813 = _743 * 0.5;
        float _814 = _753 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _828 = (dot(vec3(_410, _411, _412), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _837 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3456 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_839 + 1.0))) + _844) * _766;
        float _854 = _734 * 0.5;
        float _855 = _744 * 0.5;
        float _856 = _754 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _870 = (dot(vec3(_410, _411, _412), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _879 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3489 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_881 + 1.0))) + _886) * _767;
        _903 = _734;
        _905 = _733;
        _906 = _732;
        _907 = _744;
        _908 = _743;
        _909 = _742;
        _910 = _754;
        _911 = _753;
        _912 = _752;
        _913 = _767;
        _914 = _766;
        _915 = _765;
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0)));
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
    }
    else
    {
        _903 = _904;
        _905 = _904;
        _906 = _904;
        _907 = _904;
        _908 = _904;
        _909 = _904;
        _910 = _904;
        _911 = _904;
        _912 = _904;
        _913 = _904;
        _914 = _904;
        _915 = _904;
        _916 = 0.0;
        _917 = 0.0;
        _918 = 0.0;
    }
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _944 = fma(_602, cbModelParam._m0[30u].z, fma(_598, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _594));
        float _948 = fma(_602, cbModelParam._m0[31u].z, fma(_598, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _594));
        float _952 = fma(_602, cbModelParam._m0[32u].z, fma(_598, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _594));
        float _975 = _594 + _410;
        float _976 = _598 + _411;
        float _977 = _602 + _412;
        float _987 = fma(_977, cbModelParam._m0[30u].z, fma(_976, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _975)) - _944;
        float _988 = fma(_977, cbModelParam._m0[31u].z, fma(_976, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _975)) - _948;
        float _989 = fma(_977, cbModelParam._m0[32u].z, fma(_976, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _975)) - _952;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_944 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_948 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[35u].z) + ((((((_952 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1043 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1010.x + (-0.5));
        float _1045 = _1043 * (_1010.y + (-0.5));
        float _1046 = _1043 * (_1010.z + (-0.5));
        float _1053 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1017.x + (-0.5));
        float _1055 = _1053 * (_1017.y + (-0.5));
        float _1056 = _1053 * (_1017.z + (-0.5));
        float _1063 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1024.x + (-0.5));
        float _1065 = _1063 * (_1024.y + (-0.5));
        float _1066 = _1063 * (_1024.z + (-0.5));
        float _1073 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1031.x + (-0.5));
        float _1075 = _1073 * (_1031.y + (-0.5));
        float _1076 = _1073 * (_1031.z + (-0.5));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = _1044 * 0.5;
        float _1081 = _1054 * 0.5;
        float _1082 = _1064 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_410, _411, _412), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3552 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1107 + 1.0))) + _1112) * _1077;
        float _1122 = _1045 * 0.5;
        float _1123 = _1055 * 0.5;
        float _1124 = _1065 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_410, _411, _412), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3585 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1149 + 1.0))) + _1154) * _1078;
        float _1164 = _1046 * 0.5;
        float _1165 = _1056 * 0.5;
        float _1166 = _1066 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_410, _411, _412), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3618 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1191 + 1.0))) + _1196) * _1079;
        _1213 = _1046;
        _1214 = _1045;
        _1215 = _1044;
        _1216 = _1056;
        _1217 = _1055;
        _1218 = _1054;
        _1219 = _1066;
        _1220 = _1065;
        _1221 = _1064;
        _1222 = _1079;
        _1223 = _1078;
        _1224 = _1077;
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
    }
    else
    {
        _1213 = _904;
        _1214 = _904;
        _1215 = _904;
        _1216 = _904;
        _1217 = _904;
        _1218 = _904;
        _1219 = _904;
        _1220 = _904;
        _1221 = _904;
        _1222 = _904;
        _1223 = _904;
        _1224 = _904;
        _1225 = 0.0;
        _1226 = 0.0;
        _1227 = 0.0;
    }
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _916)) + _916;
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _917)) + _917;
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _918)) + _918;
    float _1260 = fma(_1239, cbSceneParam._m0[89u].z, fma(_1238, cbSceneParam._m0[89u].y, _1237 * cbSceneParam._m0[89u].x));
    float _1263 = fma(_1239, cbSceneParam._m0[90u].z, fma(_1238, cbSceneParam._m0[90u].y, _1237 * cbSceneParam._m0[90u].x));
    float _1266 = fma(_1239, cbSceneParam._m0[91u].z, fma(_1238, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1237));
    float _1281 = _538 * 0.5;
    float _1282 = _539 * 0.5;
    float _1283 = _540 * 0.5;
    float _1284 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1287 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1290 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1324;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1297 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_903, _907, _910, _913));
        float _1301 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_905, _908, _911, _914));
        float _1305 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_906, _909, _912, _915));
        float _1312 = dot(vec4(cbModelParam._m0[39u]), vec4(_1281, _1282, _1283, 1.0));
        _1324 = dot(vec3(isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1312) ? 0.0 : (isnan(0.0) ? _1312 : max(0.0, _1312))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1324 = 1.0;
    }
    float _1335;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1326 = dot(vec4(cbModelParam._m0[40u]), vec4(_1281, _1282, _1283, 1.0));
        _1335 = dot(vec3(isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1326) ? 0.0 : (isnan(0.0) ? _1326 : max(0.0, _1326))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1335 = 1.0;
    }
    float _1339 = (_1335 * cbModelParam._m0[1u].x) + (_1324 * (1.0 - cbModelParam._m0[1u].x));
    float _1349 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _413);
    float _1350 = isnan(_1349) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1349 : min(cbModelParam._m0[25u].z, _1349));
    float _1432;
    float _1434;
    float _1436;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1399 = fma(_602, cbModelParam._m0[13u].z, fma(_598, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _594)) + cbModelParam._m0[13u].w;
        float _1403 = fma(_602, cbModelParam._m0[14u].z, fma(_598, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _594)) + cbModelParam._m0[14u].w;
        float _1407 = fma(_602, cbModelParam._m0[15u].z, fma(_598, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _594)) + cbModelParam._m0[15u].w;
        float _1410 = fma(_540, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538));
        float _1413 = fma(_540, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538));
        float _1416 = fma(_540, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538));
        float _1444;
        if (_1410 > 0.0)
        {
            _1444 = abs((1.0 - _1399) / _1410);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1399 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1444 = frontier_phi_16_14_ladder;
        }
        float _1673;
        if (_1413 > 0.0)
        {
            _1673 = abs((1.0 - _1403) / _1413);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1403 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1673 = frontier_phi_25_21_ladder;
        }
        float _1930;
        if (_1416 > 0.0)
        {
            _1930 = abs((1.0 - _1407) / _1416);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1407 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1930 = frontier_phi_37_32_ladder;
        }
        float _1932 = isnan(_1673) ? _1444 : (isnan(_1444) ? _1673 : min(_1444, _1673));
        float _1933 = isnan(_1930) ? _1932 : (isnan(_1932) ? _1930 : min(_1932, _1930));
        float _1937 = (_1933 * _1410) + _1399;
        float _1938 = (_1933 * _1413) + _1403;
        float _1939 = (_1933 * _1416) + _1407;
        float _1940 = _1933 * 9.9999997473787516355514526367188e-05;
        float _1942 = (-1.0) - _1940;
        float _1944 = _1940 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1939 > _1944) || ((_1939 < _1942) || ((_1938 > _1944) || ((_1938 < _1942) || ((_1937 < _1942) || (_1937 > _1944))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2067 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1939, cbModelParam._m0[9u].z, fma(_1938, cbModelParam._m0[9u].y, _1937 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1939, cbModelParam._m0[10u].z, fma(_1938, cbModelParam._m0[10u].y, _1937 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1939, cbModelParam._m0[11u].z, fma(_1938, cbModelParam._m0[11u].y, _1937 * cbModelParam._m0[11u].x))), _1350);
            frontier_phi_15_37_ladder = _2067.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2067.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2067.x * cbModelParam._m0[1u].y;
        }
        _1432 = frontier_phi_15_37_ladder_2;
        _1434 = frontier_phi_15_37_ladder_1;
        _1436 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_538, _539, _540), _1350);
        _1432 = _1420.x * cbModelParam._m0[1u].y;
        _1434 = _1420.y * cbModelParam._m0[1u].y;
        _1436 = _1420.z * cbModelParam._m0[1u].y;
    }
    float _1440 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _413);
    float _1441 = isnan(_1440) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1440 : min(cbModelParam._m0[25u].w, _1440));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1498 = fma(_602, cbModelParam._m0[21u].z, fma(_598, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _594)) + cbModelParam._m0[21u].w;
        float _1502 = fma(_602, cbModelParam._m0[22u].z, fma(_598, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _594)) + cbModelParam._m0[22u].w;
        float _1506 = fma(_602, cbModelParam._m0[23u].z, fma(_598, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _594)) + cbModelParam._m0[23u].w;
        float _1509 = fma(_540, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538));
        float _1512 = fma(_540, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538));
        float _1515 = fma(_540, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538));
        float _1678;
        if (_1509 > 0.0)
        {
            _1678 = abs((1.0 - _1498) / _1509);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1498 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1678 = frontier_phi_27_23_ladder;
        }
        float _1957;
        if (_1512 > 0.0)
        {
            _1957 = abs((1.0 - _1502) / _1512);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1502 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1957 = frontier_phi_39_34_ladder;
        }
        float _2170;
        if (_1515 > 0.0)
        {
            _2170 = abs((1.0 - _1506) / _1515);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1506 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2170 = frontier_phi_48_45_ladder;
        }
        float _2172 = isnan(_1957) ? _1678 : (isnan(_1678) ? _1957 : min(_1678, _1957));
        float _2173 = isnan(_2170) ? _2172 : (isnan(_2172) ? _2170 : min(_2172, _2170));
        float _2177 = (_2173 * _1509) + _1498;
        float _2178 = (_2173 * _1512) + _1502;
        float _2179 = (_2173 * _1515) + _1506;
        float _2180 = _2173 * 9.9999997473787516355514526367188e-05;
        float _2181 = (-1.0) - _2180;
        float _2183 = _2180 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2179 > _2183) || ((_2179 < _2181) || ((_2178 > _2183) || ((_2178 < _2181) || ((_2177 < _2181) || (_2177 > _2183))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2179, cbModelParam._m0[17u].z, fma(_2178, cbModelParam._m0[17u].y, _2177 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2179, cbModelParam._m0[18u].z, fma(_2178, cbModelParam._m0[18u].y, _2177 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2179, cbModelParam._m0[19u].z, fma(_2178, cbModelParam._m0[19u].y, _2177 * cbModelParam._m0[19u].x))), _1441);
            frontier_phi_24_48_ladder = _2377.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2377.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2377.x * cbModelParam._m0[1u].z;
        }
        _1534 = frontier_phi_24_48_ladder_2;
        _1536 = frontier_phi_24_48_ladder_1;
        _1538 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1518 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_538, _539, _540), _1441);
        _1534 = _1518.x * cbModelParam._m0[1u].z;
        _1536 = _1518.y * cbModelParam._m0[1u].z;
        _1538 = _1518.z * cbModelParam._m0[1u].z;
    }
    float _1551 = (((_565 * _514) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1553 = (((_565 * _516) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1555 = (((_565 * _517) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1538 - _1436)) + _1436);
    float _1558 = fma(_1555, cbSceneParam._m0[89u].z, fma(_1553, cbSceneParam._m0[89u].y, _1551 * cbSceneParam._m0[89u].x));
    float _1561 = fma(_1555, cbSceneParam._m0[90u].z, fma(_1553, cbSceneParam._m0[90u].y, _1551 * cbSceneParam._m0[90u].x));
    float _1564 = fma(_1555, cbSceneParam._m0[91u].z, fma(_1553, cbSceneParam._m0[91u].y, _1551 * cbSceneParam._m0[91u].x));
    vec4 _1572 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_447, _448));
    float _1574 = _1572.w;
    float _1586 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1574);
    float _1587 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1574);
    float _1588 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1574);
    uvec4 _1592 = floatBitsToUint(cbInstanceData._m0[_488 + 5u]);
    uint _1594 = _1592.x * 14u;
    uint _1595 = _1594 + 13u;
    float _1602 = _530 + (-1.0);
    float _1607 = (cbLight._m0[_1595].x * _1602) + 1.0;
    float _1608 = (cbLight._m0[_1595].y * _1602) + 1.0;
    float _1609 = (cbLight._m0[_1595].z * _1602) + 1.0;
    float _1610 = (cbLight._m0[_1595].w * _1602) + 1.0;
    uint _1611 = _1594 + 5u;
    float _1617 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
    uint _1621 = _1594 + 4u;
    float _1631 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
    uint _1635 = _1594 | 1u;
    float _1646 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_410, _411, _412));
    float _1649 = dot(vec3(cbLight._m0[_1635].xyz), vec3(_410, _411, _412));
    float _3754 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _3765 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1654 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.3183098733425140380859375;
    float _1656 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * 0.3183098733425140380859375;
    float _1663 = ((cbLight._m0[_1611].x * _1617) * _1656) + (((cbLight._m0[_1621].x * _1586) * _1631) * _1654);
    float _1664 = ((_1617 * cbLight._m0[_1611].y) * _1656) + (((cbLight._m0[_1621].y * _1587) * _1631) * _1654);
    float _1665 = ((_1617 * cbLight._m0[_1611].z) * _1656) + (((cbLight._m0[_1621].z * _1588) * _1631) * _1654);
    uvec4 _1670 = floatBitsToUint(cbLight._m0[_1594 + 12u]);
    bool _1672 = _1670.x == 0u;
    float _1683;
    float _1685;
    float _1687;
    if (_1672)
    {
        _1683 = _1663;
        _1685 = _1664;
        _1687 = _1665;
    }
    else
    {
        uint _1691 = _1594 + 6u;
        float _1707 = (dot(vec3(cbLight._m0[_1594 + 2u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _1708 = _1707 * _1707;
        float _3776 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1710 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
        _1683 = (((cbLight._m0[_1691].x * 0.3183098733425140380859375) * _1709) * _1710) + _1663;
        _1685 = (((cbLight._m0[_1691].y * 0.3183098733425140380859375) * _1709) * _1710) + _1664;
        _1687 = (((cbLight._m0[_1691].z * 0.3183098733425140380859375) * _1709) * _1710) + _1665;
    }
    bool _1690 = _1670.y == 0u;
    float _1728;
    float _1730;
    float _1732;
    if (_1690)
    {
        _1728 = _1683;
        _1730 = _1685;
        _1732 = _1687;
    }
    else
    {
        uint _1901 = _1594 + 7u;
        float _1917 = (dot(vec3(cbLight._m0[_1594 + 3u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _1918 = _1917 * _1917;
        float _3792 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1920 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _1728 = (((cbLight._m0[_1901].x * 0.3183098733425140380859375) * _1919) * _1920) + _1683;
        _1730 = (((cbLight._m0[_1901].y * 0.3183098733425140380859375) * _1919) * _1920) + _1685;
        _1732 = (((cbLight._m0[_1901].z * 0.3183098733425140380859375) * _1919) * _1920) + _1687;
    }
    uint _1735 = _1594 + 8u;
    float _1748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1594].w)) * _413) * 0.949999988079071044921875);
    float _1749 = _1748 * _1748;
    float _1750 = cbLight._m0[_1594].x + _439;
    float _1751 = cbLight._m0[_1594].y + _440;
    float _1752 = cbLight._m0[_1594].z + _441;
    float _1756 = inversesqrt(dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752)));
    float _1757 = _1756 * _1750;
    float _1758 = _1756 * _1751;
    float _1759 = _1756 * _1752;
    float _1760 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1594].xyz));
    float _3808 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1763 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _1764 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _1765 = dot(vec3(_410, _411, _412), vec3(_1757, _1758, _1759));
    float _3830 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _1769 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_1757, _1758, _1759));
    float _3841 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1773 = _1749 * _1749;
    float _1777 = ((_1768 * _1768) * (_1773 + (-1.0))) + 1.0;
    float _1785 = exp2(log2(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * 5.0);
    float _1786 = 0.959999978542327880859375 - _511;
    float _1788 = 0.959999978542327880859375 - _512;
    float _1789 = 0.959999978542327880859375 - _513;
    float _1796 = 1.0 - _1749;
    float _1807 = (0.5 / (((_1764 * ((_1763 * _1796) + _1749)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _1796) + _1749) * _1763))) * _1763;
    float _3852 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1809 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1773 / ((_1777 * _1777) * 3.141590118408203125));
    uint _1823 = _1594 + 9u;
    float _1834 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1635].w)) * _413) * 0.949999988079071044921875);
    float _1835 = _1834 * _1834;
    float _1836 = cbLight._m0[_1635].x + _439;
    float _1837 = cbLight._m0[_1635].y + _440;
    float _1838 = cbLight._m0[_1635].z + _441;
    float _1842 = inversesqrt(dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838)));
    float _1843 = _1842 * _1836;
    float _1844 = _1842 * _1837;
    float _1845 = _1842 * _1838;
    float _1846 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1635].xyz));
    float _3863 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1849 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1850 = dot(vec3(_410, _411, _412), vec3(_1843, _1844, _1845));
    float _3874 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1854 = dot(vec3(cbLight._m0[_1635].xyz), vec3(_1843, _1844, _1845));
    float _3885 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1858 = _1835 * _1835;
    float _1862 = ((_1853 * _1853) * (_1858 + (-1.0))) + 1.0;
    float _1869 = exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0);
    float _1876 = 1.0 - _1835;
    float _1886 = (0.5 / (((_1764 * ((_1849 * _1876) + _1835)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _1876) + _1835) * _1849))) * _1849;
    float _3896 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1888 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1858 / ((_1862 * _1862) * 3.141590118408203125));
    float _1898 = (((((_1869 * _1786) + _514) * cbLight._m0[_1823].x) * _1888) * _1617) + ((((cbLight._m0[_1735].x * _1586) * ((_1785 * _1786) + _514)) * _1809) * _1631);
    float _1899 = (((((_1869 * _1788) + _516) * cbLight._m0[_1823].y) * _1888) * _1617) + ((((cbLight._m0[_1735].y * _1587) * ((_1785 * _1788) + _516)) * _1809) * _1631);
    float _1900 = (((((_1869 * _1789) + _517) * cbLight._m0[_1823].z) * _1888) * _1617) + ((((cbLight._m0[_1735].z * _1588) * ((_1785 * _1789) + _517)) * _1809) * _1631);
    float _1962;
    float _1964;
    float _1966;
    if (_1672)
    {
        _1962 = _1898;
        _1964 = _1899;
        _1966 = _1900;
    }
    else
    {
        uint _1968 = _1594 + 2u;
        uint _1972 = _1594 + 10u;
        float _1986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _413) * 0.949999988079071044921875);
        float _1987 = _1986 * _1986;
        float _1988 = cbLight._m0[_1968].x + _439;
        float _1989 = cbLight._m0[_1968].y + _440;
        float _1990 = cbLight._m0[_1968].z + _441;
        float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
        float _1995 = _1994 * _1988;
        float _1996 = _1994 * _1989;
        float _1997 = _1994 * _1990;
        float _1998 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1968].xyz));
        float _3907 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2001 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _2002 = dot(vec3(_410, _411, _412), vec3(_1995, _1996, _1997));
        float _3918 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2005 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _2006 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_1995, _1996, _1997));
        float _3929 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2010 = _1987 * _1987;
        float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
        float _2021 = exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0);
        float _2028 = 1.0 - _1987;
        float _2038 = (0.5 / (((_1764 * ((_2001 * _2028) + _1987)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _2028) + _1987) * _2001))) * _2001;
        float _3940 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2040 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
        float _2041 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
        _1962 = (((((_2021 * _1786) + _514) * cbLight._m0[_1972].x) * _2040) * _2041) + _1898;
        _1964 = (((((_2021 * _1788) + _516) * cbLight._m0[_1972].y) * _2040) * _2041) + _1899;
        _1966 = (((((_2021 * _1789) + _517) * cbLight._m0[_1972].z) * _2040) * _2041) + _1900;
    }
    float _2076;
    float _2078;
    float _2080;
    if (_1690)
    {
        _2076 = _1962;
        _2078 = _1964;
        _2080 = _1966;
    }
    else
    {
        uint _2087 = _1594 + 3u;
        uint _2091 = _1594 + 11u;
        float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _413) * 0.949999988079071044921875);
        float _2106 = _2105 * _2105;
        float _2107 = cbLight._m0[_2087].x + _439;
        float _2108 = cbLight._m0[_2087].y + _440;
        float _2109 = cbLight._m0[_2087].z + _441;
        float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
        float _2114 = _2113 * _2107;
        float _2115 = _2113 * _2108;
        float _2116 = _2113 * _2109;
        float _2117 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2087].xyz));
        float _3956 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _2121 = dot(vec3(_410, _411, _412), vec3(_2114, _2115, _2116));
        float _3967 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _2125 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2114, _2115, _2116));
        float _3978 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2129 = _2106 * _2106;
        float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
        float _2140 = exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0);
        float _2147 = 1.0 - _2106;
        float _2157 = (0.5 / (((_1764 * ((_2120 * _2147) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _2147) + _2106) * _2120))) * _2120;
        float _3989 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2159 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
        float _2160 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _2076 = (((((_2140 * _1786) + _514) * cbLight._m0[_2091].x) * _2159) * _2160) + _1962;
        _2078 = (((((_2140 * _1788) + _516) * cbLight._m0[_2091].y) * _2159) * _2160) + _1964;
        _2080 = (((((_2140 * _1789) + _517) * cbLight._m0[_2091].z) * _2159) * _2160) + _1966;
    }
    float _2294;
    float _2296;
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    if (_1592.y == 0u)
    {
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2235;
        float _2237 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2235;
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2235;
        uvec4 _2250 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2251 = _2250.x;
        uint _2262 = uint((float(_2250.y) * floor(float(uint(cbSceneParam._m0[85u].y * _448) / _2251))) + floor(float(uint(cbSceneParam._m0[85u].x * _447) / _2251)));
        float _2272 = (log2(_2238 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2273 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        uint _2276 = uint(isnan(14.0) ? _2273 : (isnan(_2273) ? 14.0 : min(_2273, 14.0)));
        uvec4 _2281 = texelFetch(g_lightClusterGridBuffer, int(((_2276 << 2u) + (_2262 << 6u)) >> 2u));
        uint _2282 = _2281.x;
        uint _2283 = _2250.z;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        if (((((1u << ((_2283 >> 4u) & 15u)) + 4294967295u) & _2282) == 0u) || ((_2283 & 240u) == 0u))
        {
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
        }
        else
        {
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2391;
            float _2393;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            uint _2532 = 0u;
            uint _2541;
            bool _2542;
            for (;;)
            {
                _2541 = texelFetch(g_lightClassification, int((((_2276 << 5u) + (_2262 << 9u)) + (_2532 << 2u)) >> 2u)).x;
                _2542 = _2541 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2542)
                {
                    frontier_phi_63_pred = _2531;
                    frontier_phi_63_pred_1 = _2530;
                    frontier_phi_63_pred_2 = _2529;
                    frontier_phi_63_pred_3 = _2528;
                    frontier_phi_63_pred_4 = _2527;
                    frontier_phi_63_pred_5 = _2526;
                }
                else
                {
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    uint _2656;
                    _2650 = _2526;
                    _2651 = _2527;
                    _2652 = _2528;
                    _2653 = _2529;
                    _2654 = _2530;
                    _2655 = _2531;
                    _2656 = _2541;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    for (;;)
                    {
                        uint _2660 = uint(findLSB(_2656)) + (_2532 << 5u);
                        uint _2657 = (_2656 + 4294967295u) & _2656;
                        uint _2662 = _2660 * 48u;
                        vec4 _2676 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2662)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 3u)).x));
                        uint _2682 = (_2660 * 48u) + 4u;
                        vec4 _2695 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2682)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 3u)).x));
                        uint _2701 = (_2660 * 48u) + 8u;
                        vec3 _2712 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2701)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 2u)).x));
                        float _2716 = _2676.x - _2236;
                        float _2717 = _2676.y - _2237;
                        float _2718 = _2676.z - _2238;
                        float _2719 = dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718));
                        float _2722 = inversesqrt(_2719);
                        float _2723 = _2722 * _2716;
                        float _2724 = _2722 * _2717;
                        float _2725 = _2722 * _2718;
                        float _2726 = dot(vec3(_469, _472, _475), vec3(_2723, _2724, _2725));
                        float _2731 = 1.0 - (_2719 * _2676.w);
                        float _4015 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2732 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2733 = sqrt(_2719) * _2695.w;
                        float _2736 = 1.39999997615814208984375 / (_2733 + 1.39999997615814208984375);
                        float _2737 = _2736 * _2736;
                        float _2740 = ((1.0 - _2737) * _2726) + _2737;
                        float _2743 = _2733 * _2733;
                        float _2747 = ((isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0))) * _2732) / ((_2743 * 0.699999988079071044921875) + 1.0);
                        float _2751 = (-0.0) - _2236;
                        float _2752 = (-0.0) - _2237;
                        float _2753 = (-0.0) - _2238;
                        float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
                        float _2758 = _2757 * _2751;
                        float _2759 = _2757 * _2752;
                        float _2760 = _2757 * _2753;
                        float _2768 = exp2(log2(1.0 / ((_2743 * 3.5) + 5.0)) * 0.25);
                        float _2769 = 1.0 - _546;
                        float _2776 = sqrt(1.0 - ((1.0 - (_2769 * _2769)) * (1.0 - (_2768 * _2768))));
                        float _2777 = _2776 * _2776;
                        float _2778 = _2777 * _2777;
                        float _2779 = _2758 + _2723;
                        float _2780 = _2759 + _2724;
                        float _2781 = _2760 + _2725;
                        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
                        float _2789 = dot(vec3(_469, _472, _475), vec3(_2758, _2759, _2760));
                        float _4031 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2792 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2793 = dot(vec3(_469, _472, _475), vec3(_2785 * _2779, _2785 * _2780, _2785 * _2781));
                        float _4042 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2796 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                        float _2800 = ((_2796 * _2796) * (_2778 + (-1.0))) + 1.0;
                        float _2801 = _2736 * _2777;
                        float _2802 = _2801 * _2801;
                        float _2805 = ((1.0 - _2802) * _2726) + _2802;
                        float _4053 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                        float _2806 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                        float _2807 = 1.0 - _2777;
                        float _2817 = (0.5 / (((_2806 * ((_2792 * _2807) + _2777)) + 9.9999999392252902907785028219223e-09) + (((_2806 * _2807) + _2777) * _2792))) * _2806;
                        float _4064 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2828 = (((_2778 * 3.1415927410125732421875) * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) / ((_2800 * _2800) * ((_2743 * 2.1991131305694580078125) + 3.141590118408203125))) * _2732;
                        _2585 = (_2747 * _2695.x) + _2653;
                        _2586 = (_2747 * _2695.y) + _2654;
                        _2587 = (_2747 * _2695.z) + _2655;
                        _2582 = (_2828 * _2712.x) + _2650;
                        _2583 = (_2828 * _2712.y) + _2651;
                        _2584 = (_2828 * _2712.z) + _2652;
                        if (_2657 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2650 = _2582;
                            _2651 = _2583;
                            _2652 = _2584;
                            _2653 = _2585;
                            _2654 = _2586;
                            _2655 = _2587;
                            _2656 = _2657;
                        }
                    }
                    frontier_phi_63_pred = _2587;
                    frontier_phi_63_pred_1 = _2586;
                    frontier_phi_63_pred_2 = _2585;
                    frontier_phi_63_pred_3 = _2584;
                    frontier_phi_63_pred_4 = _2583;
                    frontier_phi_63_pred_5 = _2582;
                }
                _2393 = frontier_phi_63_pred;
                _2391 = frontier_phi_63_pred_1;
                _2389 = frontier_phi_63_pred_2;
                _2387 = frontier_phi_63_pred_3;
                _2385 = frontier_phi_63_pred_4;
                _2383 = frontier_phi_63_pred_5;
                uint _2533 = _2532 + 1u;
                if (_2533 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2526 = _2383;
                    _2527 = _2385;
                    _2528 = _2387;
                    _2529 = _2389;
                    _2530 = _2391;
                    _2531 = _2393;
                    _2532 = _2533;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
        }
        uvec4 _2396 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2397 = _2396.z;
        uint _2399 = (_2397 >> 8u) & 15u;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        if (((4294967295u << _2399) & _2282) == 0u)
        {
            _2494 = _2382;
            _2496 = _2384;
            _2498 = _2386;
            _2500 = _2388;
            _2502 = _2390;
            _2504 = _2392;
        }
        else
        {
            float _2519 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
            float _2520 = _2519 * _2236;
            float _2521 = _2519 * _2237;
            float _2522 = _2519 * _2238;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2399 < ((_2397 >> 12u) & 15u))
            {
                float _2495;
                float _2497;
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2633 = _2382;
                float _2634 = _2384;
                float _2635 = _2386;
                float _2636 = _2388;
                float _2637 = _2390;
                float _2638 = _2392;
                uint _2639 = _2399;
                uint _2648;
                bool _2649;
                for (;;)
                {
                    _2648 = texelFetch(g_lightClassification, int((((_2276 << 5u) + (_2262 << 9u)) + (_2639 << 2u)) >> 2u)).x;
                    _2649 = _2648 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2649)
                    {
                        frontier_phi_69_pred = _2638;
                        frontier_phi_69_pred_1 = _2637;
                        frontier_phi_69_pred_2 = _2636;
                        frontier_phi_69_pred_3 = _2635;
                        frontier_phi_69_pred_4 = _2634;
                        frontier_phi_69_pred_5 = _2633;
                    }
                    else
                    {
                        float _2833;
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _2846 = _2633;
                        float _2847 = _2634;
                        float _2848 = _2635;
                        float _2849 = _2636;
                        float _2850 = _2637;
                        float _2851 = _2638;
                        uint _2852 = _2648;
                        uint _2853;
                        vec4 _2878;
                        float _2879;
                        vec4 _2894;
                        vec3 _2906;
                        vec4 _2922;
                        vec4 _2938;
                        float _2985;
                        bool _2986;
                        for (;;)
                        {
                            uint _2863 = ((_2639 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2852));
                            _2853 = (_2852 + 4294967295u) & _2852;
                            uint _2865 = _2863 * 40u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            _2879 = _2878.w;
                            uint _2881 = (_2863 * 40u) + 4u;
                            _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            uint _2896 = (_2863 * 40u) + 8u;
                            _2906 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x));
                            uint _2909 = (_2863 * 40u) + 16u;
                            _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            uint _2925 = (_2863 * 40u) + 20u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            uint _2941 = (_2863 * 40u) + 24u;
                            vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2960 = (_2863 * 40u) + 28u;
                            vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            _2985 = fma(_2238, _2973.z, fma(_2237, _2973.y, _2973.x * _2236)) + _2973.w;
                            _2986 = !((fma(_2238, _2954.z, fma(_2237, _2954.y, _2954.x * _2236)) + _2954.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2986)
                            {
                                float _3013 = _2878.x - _2236;
                                float _3014 = _2878.y - _2237;
                                float _3015 = _2878.z - _2238;
                                float _3016 = dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015));
                                float _3019 = inversesqrt(_3016);
                                float _3020 = _3019 * _3013;
                                float _3021 = _3019 * _3014;
                                float _3022 = _3019 * _3015;
                                float _3026 = 1.0 - (_3016 / (_2879 * _2879));
                                float _4075 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3027 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3031 = sqrt(_3016) * _2894.w;
                                float _3033 = 1.39999997615814208984375 / (_3031 + 1.39999997615814208984375);
                                float _3034 = _3033 * _3033;
                                float _3037 = ((1.0 - _3034) * dot(vec3(_3020, _3021, _3022), vec3(_469, _472, _475))) + _3034;
                                float _3040 = _3031 * _3031;
                                float _3044 = (fma(_2238, _2922.z, fma(_2237, _2922.y, _2922.x * _2236)) + _2922.w) / _2985;
                                float _3045 = (fma(_2238, _2938.z, fma(_2237, _2938.y, _2938.x * _2236)) + _2938.w) / _2985;
                                float _3049 = 1.0 - dot(vec2(_3044, _3045), vec2(_3044, _3045));
                                float _4091 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3051 = _3050 * (((isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0))) * _3027) / ((_3040 * 0.699999988079071044921875) + 1.0));
                                float _3063 = exp2(log2(1.0 / ((_3040 * 3.5) + 5.0)) * 0.25);
                                float _3064 = 1.0 - _546;
                                float _3071 = sqrt(1.0 - ((1.0 - (_3064 * _3064)) * (1.0 - (_3063 * _3063))));
                                float _3072 = _3071 * _3071;
                                float _3073 = _3072 * _3072;
                                float _3074 = _3020 - _2520;
                                float _3075 = _3021 - _2521;
                                float _3076 = _3022 - _2522;
                                float _3080 = inversesqrt(dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076)));
                                float _3084 = dot(vec3(_469, _472, _475), vec3((-0.0) - _2520, (-0.0) - _2521, (-0.0) - _2522));
                                float _4102 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3087 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3088 = dot(vec3(_469, _472, _475), vec3(_3080 * _3074, _3080 * _3075, _3080 * _3076));
                                float _4113 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                                float _3091 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                                float _3095 = ((_3091 * _3091) * (_3073 + (-1.0))) + 1.0;
                                float _3096 = _3033 * _3072;
                                float _3097 = _3096 * _3096;
                                float _3103 = ((1.0 - _3097) * dot(vec3(_469, _472, _475), vec3(_3020, _3021, _3022))) + _3097;
                                float _4124 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3104 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                                float _3105 = 1.0 - _3072;
                                float _3115 = (0.5 / (((_3104 * ((_3087 * _3105) + _3072)) + 9.9999999392252902907785028219223e-09) + (((_3104 * _3105) + _3072) * _3087))) * _3104;
                                float _4135 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3125 = (_3050 * _3027) * (((_3073 * 3.1415927410125732421875) * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) / ((_3095 * _3095) * ((_3040 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3051 * _2894.z;
                                frontier_phi_75_pred_1 = _3051 * _2894.y;
                                frontier_phi_75_pred_2 = _3051 * _2894.x;
                                frontier_phi_75_pred_3 = _3125 * _2906.z;
                                frontier_phi_75_pred_4 = _3125 * _2906.y;
                                frontier_phi_75_pred_5 = _3125 * _2906.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3134 = frontier_phi_75_pred;
                            _3133 = frontier_phi_75_pred_1;
                            _3132 = frontier_phi_75_pred_2;
                            _3131 = frontier_phi_75_pred_3;
                            _3130 = frontier_phi_75_pred_4;
                            _3129 = frontier_phi_75_pred_5;
                            _2836 = _3132 + _2849;
                            _2837 = _3133 + _2850;
                            _2838 = _3134 + _2851;
                            _2833 = _3129 + _2846;
                            _2834 = _3130 + _2847;
                            _2835 = _3131 + _2848;
                            if (_2853 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2853;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2838;
                        frontier_phi_69_pred_1 = _2837;
                        frontier_phi_69_pred_2 = _2836;
                        frontier_phi_69_pred_3 = _2835;
                        frontier_phi_69_pred_4 = _2834;
                        frontier_phi_69_pred_5 = _2833;
                    }
                    _2505 = frontier_phi_69_pred;
                    _2503 = frontier_phi_69_pred_1;
                    _2501 = frontier_phi_69_pred_2;
                    _2499 = frontier_phi_69_pred_3;
                    _2497 = frontier_phi_69_pred_4;
                    _2495 = frontier_phi_69_pred_5;
                    uint _2640 = _2639 + 1u;
                    if (_2640 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2633 = _2495;
                        _2634 = _2497;
                        _2635 = _2499;
                        _2636 = _2501;
                        _2637 = _2503;
                        _2638 = _2505;
                        _2639 = _2640;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2505;
                frontier_phi_57_58_ladder_1 = _2503;
                frontier_phi_57_58_ladder_2 = _2501;
                frontier_phi_57_58_ladder_3 = _2499;
                frontier_phi_57_58_ladder_4 = _2497;
                frontier_phi_57_58_ladder_5 = _2495;
            }
            else
            {
                frontier_phi_57_58_ladder = _2392;
                frontier_phi_57_58_ladder_1 = _2390;
                frontier_phi_57_58_ladder_2 = _2388;
                frontier_phi_57_58_ladder_3 = _2386;
                frontier_phi_57_58_ladder_4 = _2384;
                frontier_phi_57_58_ladder_5 = _2382;
            }
            _2494 = frontier_phi_57_58_ladder_5;
            _2496 = frontier_phi_57_58_ladder_4;
            _2498 = frontier_phi_57_58_ladder_3;
            _2500 = frontier_phi_57_58_ladder_2;
            _2502 = frontier_phi_57_58_ladder_1;
            _2504 = frontier_phi_57_58_ladder;
        }
        float _2509 = isnan(1.0) ? _530 : (isnan(_530) ? 1.0 : min(_530, 1.0));
        _2294 = (_2509 * _2500) + _1728;
        _2296 = (_2509 * _2502) + _1730;
        _2298 = (_2509 * _2504) + _1732;
        _2300 = ((_2494 * _514) * _2509) + _2076;
        _2302 = ((_2496 * _516) * _2509) + _2078;
        _2304 = ((_2498 * _517) * _2509) + _2080;
    }
    else
    {
        _2294 = _1728;
        _2296 = _1730;
        _2298 = _1732;
        _2300 = _2076;
        _2302 = _2078;
        _2304 = _2080;
    }
    float _4151 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _4162 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _4173 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    uint _2324 = _488 + 6u;
    float _2332 = _447 / cbSceneParam._m0[86u].x;
    float _2333 = _448 / cbSceneParam._m0[86u].y;
    vec4 _2347 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, (log2((isnan(cbSceneParam._m0[77u].w) ? _434 : (isnan(_434) ? cbSceneParam._m0[77u].w : min(_434, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2349 = _2347.x;
    float _2350 = _2347.y;
    float _2351 = _2347.z;
    float _2352 = _2347.w;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_434 > cbSceneParam._m0[78u].w)
    {
        float _2407 = isnan(_434) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _434 : min(cbSceneParam._m0[80u].w, _434));
        float _2408 = _2407 / _434;
        float _2419 = _2408 * _269;
        float _2420 = _270 * _2408;
        float _2421 = (-0.0) - _2420;
        float _2422 = _2408 * _271;
        float _2424 = (cbSceneParam._m0[77u].w * _2421) / _2407;
        float _2425 = _2424 + cbSceneParam._m0[79u].w;
        float _2426 = cbSceneParam._m0[79u].w - _2420;
        float _2432 = sqrt(((_2419 * _2419) + (_2420 * _2420)) + (_2422 * _2422));
        float _2435 = (1.0 - (cbSceneParam._m0[77u].w / _2407)) * _2432;
        float _2440 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2442 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2595;
        if (abs((_2421 - _2424) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2595 = ((((_2425 > 0.0) ? exp2(_2440 * _2425) : (2.0 - exp2(_2442 * _2425))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2435;
        }
        else
        {
            float _2555 = 1.0 / cbSceneParam._m0[80u].x;
            float _2556 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : max(_2425, _2426));
            float _2557 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : min(_2425, _2426));
            float _2566 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : min(_2556, 0.0));
            float _2567 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : min(_2557, 0.0));
            _2595 = ((abs(_2432 / _2421) * cbSceneParam._m0[80u].y) * ((((_2566 - _2567) * 2.0) - ((exp2(_2440 * (isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0)))) - exp2(_2440 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0))))) * _2555)) - ((exp2(_2442 * _2566) - exp2(_2442 * _2567)) * _2555))) + (_2435 * cbSceneParam._m0[80u].z);
        }
        vec4 _2597 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, 1.0), 0.0);
        float _2606 = exp2((_2595 * (-1.44269502162933349609375)) * (1.0 - _2597.w));
        float _2607 = log2(_2606);
        float _2623 = log2(_2352);
        _2444 = (exp2(_2623 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2607 * cbSceneParam._m0[78u].x)) * _2597.x) / cbSceneParam._m0[78u].x)) + _2349;
        _2446 = (exp2(_2623 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2607 * cbSceneParam._m0[78u].y)) * _2597.y) / cbSceneParam._m0[78u].y)) + _2350;
        _2448 = (exp2(_2623 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2607 * cbSceneParam._m0[78u].z)) * _2597.z) / cbSceneParam._m0[78u].z)) + _2351;
        _2450 = _2606 * _2352;
    }
    else
    {
        _2444 = _2349;
        _2446 = _2350;
        _2448 = _2351;
        _2450 = _2352;
    }
    float _2462 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2463 = _2462 == 3.0;
    float _2464 = log2(_2450);
    float _2471 = exp2(_2464 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2294 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _530))) + ((_2300 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1339)) * cbPerFrame._m0[3u].x));
    float _2472 = exp2(_2464 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2296 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _530))) + ((_2302 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1339)) * cbPerFrame._m0[3u].x));
    float _2473 = exp2(_2464 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2298 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _530))) + ((_2304 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1339)) * cbPerFrame._m0[3u].x));
    float _2482 = (_2462 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2482 * (_2463 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2444)));
    SV_Target.y = _2482 * (_2463 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2446)));
    SV_Target.z = _2482 * (_2463 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2448)));
    SV_Target.w = cbInstanceData._m0[_2324].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2324].w;
}


