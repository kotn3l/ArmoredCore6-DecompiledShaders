#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _952;
float _3626;
float _3627;
float _3628;
float _3629;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    float _286 = dot(vec3(_275, _276, _277), vec3(_198, _199, _200));
    float _289 = dot(vec3(_275, _276, _277), vec3(_212, _213, _214));
    float _292 = dot(vec3(_275, _276, _277), vec3(_219, _220, _221));
    float _298 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    vec4 _311 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _322 = dot(vec4(_311), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _330 = (((cbMtdParam._m0[10u].y * _286) * _298) * _322) + TEXCOORD.x;
    float _331 = (((_289 * cbMtdParam._m0[10u].y) * _298) * _322) + TEXCOORD.y;
    vec4 _343 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_330 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_331 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _348 = _343.w;
    float _349 = _343.x * cbMtdParam._m0[9u].x;
    float _350 = _343.y * cbMtdParam._m0[9u].y;
    float _351 = _343.z * cbMtdParam._m0[9u].z;
    vec4 _363 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _365 = _363.x;
    vec4 _377 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _330) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _331) + cbTextureTilingScale._m0[3u].w));
    float _381 = _377.z;
    float _386 = (_377.x * 2.0) + (-1.0);
    float _388 = (_377.y * 2.0) + (-1.0);
    float _389 = dot(vec2(_386, _388), vec2(_386, _388));
    float _3638 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _394 = sqrt(1.0 - (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))));
    float _397 = fma(_394, _219, fma(_388, _212, _386 * _198));
    float _400 = fma(_394, _220, fma(_388, _213, _386 * _199));
    float _403 = fma(_394, _221, fma(_388, _214, _386 * _200));
    float _407 = inversesqrt(dot(vec3(_397, _400, _403), vec3(_397, _400, _403)));
    float _408 = _407 * _397;
    float _409 = _407 * _400;
    float _410 = _407 * _403;
    float _412 = cbMtdParam._m0[10u].x + _377.w;
    float _416 = inversesqrt(dot(vec3(_408, _409, _410), vec3(_408, _409, _410)));
    float _417 = _416 * _408;
    float _418 = _416 * _409;
    float _419 = _416 * _410;
    float _3649 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _420 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _3671 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3682 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _3693 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3704 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _425 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _441 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _445 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _446 = _275 * _445;
    float _447 = _276 * _445;
    float _448 = _277 * _445;
    vec4 _453 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _455 = _453.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _632 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
        float _638 = (cbMatDynParam._m0[5u].x * _632) + cbMatDynParam._m0[5u].y;
        float _3715 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _639 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _643 = (cbMatDynParam._m0[5u].z * _632) + cbMatDynParam._m0[5u].w;
        float _3726 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) - _639)) + _639) < ((_455 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _467 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _468 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _488 = fma(_419, cbSceneParam._m0[5u].z, fma(_418, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _417));
    float _491 = fma(_419, cbSceneParam._m0[6u].z, fma(_418, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _417));
    float _494 = fma(_419, cbSceneParam._m0[7u].z, fma(_418, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _417));
    uint _507 = uint(roundEven(NORMAL.w)) * 13u;
    uint _509 = _507 + 9u;
    uint _510 = _509 + uint(cbMatDynParam._m0[0u].w);
    float _516 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) * cbInstanceData._m0[_510].x;
    float _517 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * cbInstanceData._m0[_510].y;
    float _518 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * cbInstanceData._m0[_510].z;
    float _3737 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _519 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _520 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _521 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _522 = 1.0 - _425;
    float _523 = _519 * _522;
    float _524 = _520 * _522;
    float _525 = _521 * _522;
    float _530 = (_519 + (-0.039999999105930328369140625)) * _425;
    float _531 = (_520 + (-0.039999999105930328369140625)) * _425;
    float _532 = (_521 + (-0.039999999105930328369140625)) * _425;
    float _533 = _530 + 0.039999999105930328369140625;
    float _535 = _531 + 0.039999999105930328369140625;
    float _536 = _532 + 0.039999999105930328369140625;
    vec4 _545 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _467, cbSceneParam._m0[86u].y * _468));
    float _549 = ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * TEXCOORD.z) * _545.x;
    float _550 = dot(vec3(_417, _418, _419), vec3(_446, _447, _448));
    float _553 = _550 * 2.0;
    float _557 = (_553 * _417) - _446;
    float _558 = (_553 * _418) - _447;
    float _559 = (_553 * _419) - _448;
    float _563 = abs(dot(vec3(_446, _447, _448), vec3(_417, _418, _419)));
    float _3770 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _565 = sqrt(_420);
    float _578 = exp2((_565 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_565 * 3.0));
    float _584 = (1.0 - _578) * ((_565 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _585 = _578 * _565;
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _951;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _677 = fma(_621, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _613));
        float _681 = fma(_621, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _613));
        float _685 = fma(_621, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _613));
        float _709 = _613 + _417;
        float _710 = _617 + _418;
        float _711 = _621 + _419;
        float _721 = fma(_711, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _709)) - _677;
        float _722 = fma(_711, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _709)) - _681;
        float _723 = fma(_711, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _709)) - _685;
        float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
        float _740 = ((_727 * _721) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_677 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _741 = ((_727 * _722) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_681 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _742 = ((_727 * _723) / cbModelParam._m0[34u].z) + ((((((_685 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        float _779 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_745.x + (-0.5));
        float _781 = _779 * (_745.y + (-0.5));
        float _782 = _779 * (_745.z + (-0.5));
        float _789 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_752.x + (-0.5));
        float _791 = _789 * (_752.y + (-0.5));
        float _792 = _789 * (_752.z + (-0.5));
        float _799 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_759.x + (-0.5));
        float _801 = _799 * (_759.y + (-0.5));
        float _802 = _799 * (_759.z + (-0.5));
        float _809 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_766.x + (-0.5));
        float _811 = _809 * (_766.y + (-0.5));
        float _812 = _809 * (_766.z + (-0.5));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = _780 * 0.5;
        float _817 = _790 * 0.5;
        float _818 = _800 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _833 = (dot(vec3(_417, _418, _419), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _843 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3818 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_845 + 1.0))) + _850) * _813;
        float _860 = _781 * 0.5;
        float _861 = _791 * 0.5;
        float _862 = _801 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _876 = (dot(vec3(_417, _418, _419), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _885 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_814 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3851 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_887 + 1.0))) + _892) * _814;
        float _902 = _782 * 0.5;
        float _903 = _792 * 0.5;
        float _904 = _802 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_417, _418, _419), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3884 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_929 + 1.0))) + _934) * _815;
        _951 = _782;
        _953 = _781;
        _954 = _780;
        _955 = _792;
        _956 = _791;
        _957 = _790;
        _958 = _802;
        _959 = _801;
        _960 = _800;
        _961 = _815;
        _962 = _814;
        _963 = _813;
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
        _965 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
    }
    else
    {
        _951 = _952;
        _953 = _952;
        _954 = _952;
        _955 = _952;
        _956 = _952;
        _957 = _952;
        _958 = _952;
        _959 = _952;
        _960 = _952;
        _961 = _952;
        _962 = _952;
        _963 = _952;
        _964 = 0.0;
        _965 = 0.0;
        _966 = 0.0;
    }
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _995 = fma(_621, cbModelParam._m0[30u].z, fma(_617, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _613));
        float _999 = fma(_621, cbModelParam._m0[31u].z, fma(_617, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _613));
        float _1003 = fma(_621, cbModelParam._m0[32u].z, fma(_617, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _613));
        float _1026 = _613 + _417;
        float _1027 = _617 + _418;
        float _1028 = _621 + _419;
        float _1038 = fma(_1028, cbModelParam._m0[30u].z, fma(_1027, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1026)) - _995;
        float _1039 = fma(_1028, cbModelParam._m0[31u].z, fma(_1027, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1026)) - _999;
        float _1040 = fma(_1028, cbModelParam._m0[32u].z, fma(_1027, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1026)) - _1003;
        float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
        float _1057 = ((_1044 * _1038) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_995 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1044 * _1039) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_999 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1044 * _1040) / cbModelParam._m0[35u].z) + ((((((_1003 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        float _1094 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1061.x + (-0.5));
        float _1096 = _1094 * (_1061.y + (-0.5));
        float _1097 = _1094 * (_1061.z + (-0.5));
        float _1104 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1068.x + (-0.5));
        float _1106 = _1104 * (_1068.y + (-0.5));
        float _1107 = _1104 * (_1068.z + (-0.5));
        float _1114 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1075.x + (-0.5));
        float _1116 = _1114 * (_1075.y + (-0.5));
        float _1117 = _1114 * (_1075.z + (-0.5));
        float _1124 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1082.x + (-0.5));
        float _1126 = _1124 * (_1082.y + (-0.5));
        float _1127 = _1124 * (_1082.z + (-0.5));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = _1095 * 0.5;
        float _1132 = _1105 * 0.5;
        float _1133 = _1115 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_417, _418, _419), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3947 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1158 + 1.0))) + _1163) * _1128;
        float _1173 = _1096 * 0.5;
        float _1174 = _1106 * 0.5;
        float _1175 = _1116 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_417, _418, _419), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3980 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1200 + 1.0))) + _1205) * _1129;
        float _1215 = _1097 * 0.5;
        float _1216 = _1107 * 0.5;
        float _1217 = _1117 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_417, _418, _419), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _4013 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1242 + 1.0))) + _1247) * _1130;
        _1264 = _1097;
        _1265 = _1096;
        _1266 = _1095;
        _1267 = _1107;
        _1268 = _1106;
        _1269 = _1105;
        _1270 = _1117;
        _1271 = _1116;
        _1272 = _1115;
        _1273 = _1130;
        _1274 = _1129;
        _1275 = _1128;
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
    }
    else
    {
        _1264 = _952;
        _1265 = _952;
        _1266 = _952;
        _1267 = _952;
        _1268 = _952;
        _1269 = _952;
        _1270 = _952;
        _1271 = _952;
        _1272 = _952;
        _1273 = _952;
        _1274 = _952;
        _1275 = _952;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
    }
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _964)) + _964;
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _965)) + _965;
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _966)) + _966;
    float _1311 = fma(_1290, cbSceneParam._m0[89u].z, fma(_1289, cbSceneParam._m0[89u].y, _1288 * cbSceneParam._m0[89u].x));
    float _1314 = fma(_1290, cbSceneParam._m0[90u].z, fma(_1289, cbSceneParam._m0[90u].y, _1288 * cbSceneParam._m0[90u].x));
    float _1317 = fma(_1290, cbSceneParam._m0[91u].z, fma(_1289, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1288));
    float _1332 = _557 * 0.5;
    float _1333 = _558 * 0.5;
    float _1334 = _559 * 0.5;
    float _1335 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1338 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1341 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1375;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1348 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_951, _955, _958, _961));
        float _1352 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_953, _956, _959, _962));
        float _1356 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_954, _957, _960, _963));
        float _1363 = dot(vec4(cbModelParam._m0[39u]), vec4(_1332, _1333, _1334, 1.0));
        _1375 = dot(vec3(isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1363) ? 0.0 : (isnan(0.0) ? _1363 : max(0.0, _1363))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1375 = 1.0;
    }
    float _1386;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1377 = dot(vec4(cbModelParam._m0[40u]), vec4(_1332, _1333, _1334, 1.0));
        _1386 = dot(vec3(isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1377) ? 0.0 : (isnan(0.0) ? _1377 : max(0.0, _1377))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1386 = 1.0;
    }
    float _1390 = (_1386 * cbModelParam._m0[1u].x) + (_1375 * (1.0 - cbModelParam._m0[1u].x));
    float _1400 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _420);
    float _1401 = isnan(_1400) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1400 : min(cbModelParam._m0[25u].z, _1400));
    float _1483;
    float _1485;
    float _1487;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1450 = fma(_621, cbModelParam._m0[13u].z, fma(_617, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613)) + cbModelParam._m0[13u].w;
        float _1454 = fma(_621, cbModelParam._m0[14u].z, fma(_617, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613)) + cbModelParam._m0[14u].w;
        float _1458 = fma(_621, cbModelParam._m0[15u].z, fma(_617, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613)) + cbModelParam._m0[15u].w;
        float _1461 = fma(_559, cbModelParam._m0[13u].z, fma(_558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _557));
        float _1464 = fma(_559, cbModelParam._m0[14u].z, fma(_558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _557));
        float _1467 = fma(_559, cbModelParam._m0[15u].z, fma(_558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _557));
        float _1495;
        if (_1461 > 0.0)
        {
            _1495 = abs((1.0 - _1450) / _1461);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1450 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1495 = frontier_phi_19_17_ladder;
        }
        float _1671;
        if (_1464 > 0.0)
        {
            _1671 = abs((1.0 - _1454) / _1464);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1454 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1671 = frontier_phi_28_24_ladder;
        }
        float _1967;
        if (_1467 > 0.0)
        {
            _1967 = abs((1.0 - _1458) / _1467);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1458 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1967 = frontier_phi_40_35_ladder;
        }
        float _1969 = isnan(_1671) ? _1495 : (isnan(_1495) ? _1671 : min(_1495, _1671));
        float _1970 = isnan(_1967) ? _1969 : (isnan(_1969) ? _1967 : min(_1969, _1967));
        float _1974 = (_1970 * _1461) + _1450;
        float _1975 = (_1970 * _1464) + _1454;
        float _1976 = (_1970 * _1467) + _1458;
        float _1977 = _1970 * 9.9999997473787516355514526367188e-05;
        float _1979 = (-1.0) - _1977;
        float _1981 = _1977 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1976 > _1981) || ((_1976 < _1979) || ((_1975 > _1981) || ((_1975 < _1979) || ((_1974 < _1979) || (_1974 > _1981))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2121 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1976, cbModelParam._m0[9u].z, fma(_1975, cbModelParam._m0[9u].y, _1974 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1976, cbModelParam._m0[10u].z, fma(_1975, cbModelParam._m0[10u].y, _1974 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1976, cbModelParam._m0[11u].z, fma(_1975, cbModelParam._m0[11u].y, _1974 * cbModelParam._m0[11u].x))), _1401);
            frontier_phi_18_40_ladder = _2121.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2121.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2121.x * cbModelParam._m0[1u].y;
        }
        _1483 = frontier_phi_18_40_ladder_2;
        _1485 = frontier_phi_18_40_ladder_1;
        _1487 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1471 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_557, _558, _559), _1401);
        _1483 = _1471.x * cbModelParam._m0[1u].y;
        _1485 = _1471.y * cbModelParam._m0[1u].y;
        _1487 = _1471.z * cbModelParam._m0[1u].y;
    }
    float _1491 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _420);
    float _1492 = isnan(_1491) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1491 : min(cbModelParam._m0[25u].w, _1491));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1549 = fma(_621, cbModelParam._m0[21u].z, fma(_617, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613)) + cbModelParam._m0[21u].w;
        float _1553 = fma(_621, cbModelParam._m0[22u].z, fma(_617, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613)) + cbModelParam._m0[22u].w;
        float _1557 = fma(_621, cbModelParam._m0[23u].z, fma(_617, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613)) + cbModelParam._m0[23u].w;
        float _1560 = fma(_559, cbModelParam._m0[21u].z, fma(_558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _557));
        float _1563 = fma(_559, cbModelParam._m0[22u].z, fma(_558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _557));
        float _1566 = fma(_559, cbModelParam._m0[23u].z, fma(_558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _557));
        float _1676;
        if (_1560 > 0.0)
        {
            _1676 = abs((1.0 - _1549) / _1560);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1549 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1676 = frontier_phi_30_26_ladder;
        }
        float _1994;
        if (_1563 > 0.0)
        {
            _1994 = abs((1.0 - _1553) / _1563);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1553 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1994 = frontier_phi_42_37_ladder;
        }
        float _2332;
        if (_1566 > 0.0)
        {
            _2332 = abs((1.0 - _1557) / _1566);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1557 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2332 = frontier_phi_52_49_ladder;
        }
        float _2334 = isnan(_1994) ? _1676 : (isnan(_1676) ? _1994 : min(_1676, _1994));
        float _2335 = isnan(_2332) ? _2334 : (isnan(_2334) ? _2332 : min(_2334, _2332));
        float _2339 = (_2335 * _1560) + _1549;
        float _2340 = (_2335 * _1563) + _1553;
        float _2341 = (_2335 * _1566) + _1557;
        float _2342 = _2335 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2342;
        float _2345 = _2342 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2341 > _2345) || ((_2341 < _2343) || ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 < _2343) || (_2339 > _2345))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2463 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2341, cbModelParam._m0[17u].z, fma(_2340, cbModelParam._m0[17u].y, _2339 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2341, cbModelParam._m0[18u].z, fma(_2340, cbModelParam._m0[18u].y, _2339 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2341, cbModelParam._m0[19u].z, fma(_2340, cbModelParam._m0[19u].y, _2339 * cbModelParam._m0[19u].x))), _1492);
            frontier_phi_27_52_ladder = _2463.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2463.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2463.x * cbModelParam._m0[1u].z;
        }
        _1585 = frontier_phi_27_52_ladder_2;
        _1587 = frontier_phi_27_52_ladder_1;
        _1589 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_557, _558, _559), _1492);
        _1585 = _1569.x * cbModelParam._m0[1u].z;
        _1587 = _1569.y * cbModelParam._m0[1u].z;
        _1589 = _1569.z * cbModelParam._m0[1u].z;
    }
    float _1602 = (((_584 * _533) + _585) * _549) * ((cbModelParam._m0[1u].w * (_1585 - _1483)) + _1483);
    float _1604 = (((_584 * _535) + _585) * _549) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1606 = (((_584 * _536) + _585) * _549) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1609 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1602 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1602 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, _1602 * cbSceneParam._m0[91u].x));
    float _1650 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1654 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1658 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1662 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1663 = _1650 / _1662;
    float _1664 = _1654 / _1662;
    float _1665 = _1658 / _1662;
    float _1812;
    float _1813;
    float _1814;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1692 = ((uint(_1665 > cbSceneParam._m0[59u].y) + uint(_1665 > cbSceneParam._m0[59u].x)) + uint(_1665 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1693 = _1692 + 43u;
        uint _1701 = _1692 + 44u;
        uint _1709 = _1692 + 45u;
        uint _1717 = _1692 + 46u;
        float _1728 = fma(_1662, cbSceneParam._m0[_1693].w, fma(_1658, cbSceneParam._m0[_1693].z, fma(_1654, cbSceneParam._m0[_1693].y, _1650 * cbSceneParam._m0[_1693].x)));
        float _1732 = fma(_1662, cbSceneParam._m0[_1701].w, fma(_1658, cbSceneParam._m0[_1701].z, fma(_1654, cbSceneParam._m0[_1701].y, _1650 * cbSceneParam._m0[_1701].x)));
        float _1740 = fma(_1662, cbSceneParam._m0[_1717].w, fma(_1658, cbSceneParam._m0[_1717].z, fma(_1654, cbSceneParam._m0[_1717].y, _1650 * cbSceneParam._m0[_1717].x)));
        float _1745 = cbSceneParam._m0[33u].z * _1740;
        float _1747 = cbSceneParam._m0[33u].w * _1740;
        float _1750 = fma(_1662, cbSceneParam._m0[_1709].w, fma(_1658, cbSceneParam._m0[_1709].z, fma(_1654, cbSceneParam._m0[_1709].y, _1650 * cbSceneParam._m0[_1709].x))) / _1740;
        float _1798 = (cbSceneParam._m0[33u].x - sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665))) * cbSceneParam._m0[33u].y;
        float _4139 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1805 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1745 + _1728) / _1740, (_1747 + _1732) / _1740), _1750), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1747 + _1728) / _1740, (_1732 - _1745) / _1740), _1750), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1728 - _1745) / _1740, (_1732 - _1747) / _1740), _1750), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1728 - _1747) / _1740, (_1745 + _1732) / _1740), _1750), 0.0)).x), vec4(0.25)));
        _1812 = 1.0 - (_1805 * cbSceneParam._m0[34u].x);
        _1813 = 1.0 - (_1805 * cbSceneParam._m0[34u].y);
        _1814 = 1.0 - (_1805 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1812 = 1.0;
        _1813 = 1.0;
        _1814 = 1.0;
    }
    float _1878;
    float _1880;
    float _1882;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1866 = fma(_1662, cbSceneParam._m0[63u].w, fma(_1658, cbSceneParam._m0[63u].z, fma(_1654, cbSceneParam._m0[63u].y, _1650 * cbSceneParam._m0[63u].x)));
        float _1867 = fma(_1662, cbSceneParam._m0[60u].w, fma(_1658, cbSceneParam._m0[60u].z, fma(_1654, cbSceneParam._m0[60u].y, _1650 * cbSceneParam._m0[60u].x))) / _1866;
        float _1868 = fma(_1662, cbSceneParam._m0[61u].w, fma(_1658, cbSceneParam._m0[61u].z, fma(_1654, cbSceneParam._m0[61u].y, _1650 * cbSceneParam._m0[61u].x))) / _1866;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1867 >= cbSceneParam._m0[64u].x) && (_1868 >= cbSceneParam._m0[64u].y)) && (_1867 <= cbSceneParam._m0[64u].z)) && (_1868 <= cbSceneParam._m0[64u].w))
        {
            float _2007 = fma(_1662, cbSceneParam._m0[62u].w, fma(_1658, cbSceneParam._m0[62u].z, fma(_1654, cbSceneParam._m0[62u].y, _1650 * cbSceneParam._m0[62u].x))) / _1866;
            float _2011 = isnan(cbSceneParam._m0[41u].w) ? _2007 : (isnan(_2007) ? cbSceneParam._m0[41u].w : max(_2007, cbSceneParam._m0[41u].w));
            float _2054 = (cbSceneParam._m0[33u].x - sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665))) * cbSceneParam._m0[33u].y;
            float _4155 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
            float _2061 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1867, cbSceneParam._m0[33u].w + _1868), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1867, _1868 - cbSceneParam._m0[33u].z), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1867 - cbSceneParam._m0[33u].z, _1868 - cbSceneParam._m0[33u].w), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1867 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1868), _2011), 0.0)).x), vec4(0.25)));
            float _2065 = 1.0 - (_2061 * cbSceneParam._m0[34u].x);
            float _2066 = 1.0 - (_2061 * cbSceneParam._m0[34u].y);
            float _2067 = 1.0 - (_2061 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2066) ? _1813 : (isnan(_1813) ? _2066 : min(_1813, _2066));
            frontier_phi_39_38_ladder_1 = isnan(_2065) ? _1812 : (isnan(_1812) ? _2065 : min(_1812, _2065));
            frontier_phi_39_38_ladder_2 = isnan(_2067) ? _1814 : (isnan(_1814) ? _2067 : min(_1814, _2067));
        }
        else
        {
            frontier_phi_39_38_ladder = _1813;
            frontier_phi_39_38_ladder_1 = _1812;
            frontier_phi_39_38_ladder_2 = _1814;
        }
        _1878 = frontier_phi_39_38_ladder_1;
        _1880 = frontier_phi_39_38_ladder;
        _1882 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1878 = _1812;
        _1880 = _1813;
        _1882 = _1814;
    }
    uvec4 _1887 = floatBitsToUint(cbInstanceData._m0[_507 + 5u]);
    uint _1889 = _1887.x * 14u;
    uint _1890 = _1889 + 13u;
    float _1897 = _549 + (-1.0);
    float _1902 = (cbLight._m0[_1890].x * _1897) + 1.0;
    float _1903 = (cbLight._m0[_1890].y * _1897) + 1.0;
    float _1904 = (cbLight._m0[_1890].z * _1897) + 1.0;
    float _1905 = (cbLight._m0[_1890].w * _1897) + 1.0;
    uint _1906 = _1889 + 5u;
    float _1912 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
    uint _1916 = _1889 + 4u;
    float _1926 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
    uint _1930 = _1889 | 1u;
    float _1941 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_417, _418, _419));
    float _1944 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_417, _418, _419));
    float _4191 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _4202 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1949 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * 0.3183098733425140380859375;
    float _1951 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * 0.3183098733425140380859375;
    float _1958 = ((cbLight._m0[_1906].x * _1912) * _1951) + (((cbLight._m0[_1916].x * _1878) * _1926) * _1949);
    float _1959 = ((_1912 * cbLight._m0[_1906].y) * _1951) + (((cbLight._m0[_1916].y * _1880) * _1926) * _1949);
    float _1960 = ((_1912 * cbLight._m0[_1906].z) * _1951) + (((cbLight._m0[_1916].z * _1882) * _1926) * _1949);
    uvec4 _1964 = floatBitsToUint(cbLight._m0[_1889 + 12u]);
    bool _1966 = _1964.x == 0u;
    float _2068;
    float _2070;
    float _2072;
    if (_1966)
    {
        _2068 = _1958;
        _2070 = _1959;
        _2072 = _1960;
    }
    else
    {
        uint _2076 = _1889 + 6u;
        float _2092 = (dot(vec3(cbLight._m0[_1889 + 2u].xyz), vec3(_417, _418, _419)) * 0.5) + 0.5;
        float _2093 = _2092 * _2092;
        float _4213 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2094 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2095 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2068 = (((cbLight._m0[_2076].x * 0.3183098733425140380859375) * _2094) * _2095) + _1958;
        _2070 = (((cbLight._m0[_2076].y * 0.3183098733425140380859375) * _2094) * _2095) + _1959;
        _2072 = (((cbLight._m0[_2076].z * 0.3183098733425140380859375) * _2094) * _2095) + _1960;
    }
    bool _2075 = _1964.y == 0u;
    float _2130;
    float _2132;
    float _2134;
    if (_2075)
    {
        _2130 = _2068;
        _2132 = _2070;
        _2134 = _2072;
    }
    else
    {
        uint _2303 = _1889 + 7u;
        float _2319 = (dot(vec3(cbLight._m0[_1889 + 3u].xyz), vec3(_417, _418, _419)) * 0.5) + 0.5;
        float _2320 = _2319 * _2319;
        float _4229 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2321 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2322 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2130 = (((cbLight._m0[_2303].x * 0.3183098733425140380859375) * _2321) * _2322) + _2068;
        _2132 = (((cbLight._m0[_2303].y * 0.3183098733425140380859375) * _2321) * _2322) + _2070;
        _2134 = (((cbLight._m0[_2303].z * 0.3183098733425140380859375) * _2321) * _2322) + _2072;
    }
    uint _2137 = _1889 + 8u;
    float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1889].w)) * _420) * 0.949999988079071044921875);
    float _2151 = _2150 * _2150;
    float _2152 = cbLight._m0[_1889].x + _446;
    float _2153 = cbLight._m0[_1889].y + _447;
    float _2154 = cbLight._m0[_1889].z + _448;
    float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
    float _2159 = _2158 * _2152;
    float _2160 = _2158 * _2153;
    float _2161 = _2158 * _2154;
    float _2162 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_1889].xyz));
    float _4245 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _4256 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _2166 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2167 = dot(vec3(_417, _418, _419), vec3(_2159, _2160, _2161));
    float _4267 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2171 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_2159, _2160, _2161));
    float _4278 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2175 = _2151 * _2151;
    float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
    float _2187 = exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0);
    float _2188 = 0.959999978542327880859375 - _530;
    float _2190 = 0.959999978542327880859375 - _531;
    float _2191 = 0.959999978542327880859375 - _532;
    float _2198 = 1.0 - _2151;
    float _2209 = (0.5 / (((_2166 * ((_2165 * _2198) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2198) + _2151) * _2165))) * _2165;
    float _4289 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2211 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
    uint _2225 = _1889 + 9u;
    float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _420) * 0.949999988079071044921875);
    float _2237 = _2236 * _2236;
    float _2238 = cbLight._m0[_1930].x + _446;
    float _2239 = cbLight._m0[_1930].y + _447;
    float _2240 = cbLight._m0[_1930].z + _448;
    float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
    float _2245 = _2244 * _2238;
    float _2246 = _2244 * _2239;
    float _2247 = _2244 * _2240;
    float _2248 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_1930].xyz));
    float _4300 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2252 = dot(vec3(_417, _418, _419), vec3(_2245, _2246, _2247));
    float _4311 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2256 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2245, _2246, _2247));
    float _4322 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2260 = _2237 * _2237;
    float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
    float _2271 = exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0);
    float _2278 = 1.0 - _2237;
    float _2288 = (0.5 / (((_2166 * ((_2251 * _2278) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2278) + _2237) * _2251))) * _2251;
    float _4333 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2290 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
    float _2300 = (((((_2271 * _2188) + _533) * cbLight._m0[_2225].x) * _2290) * _1912) + ((((cbLight._m0[_2137].x * _1878) * ((_2187 * _2188) + _533)) * _2211) * _1926);
    float _2301 = (((((_2271 * _2190) + _535) * cbLight._m0[_2225].y) * _2290) * _1912) + ((((cbLight._m0[_2137].y * _1880) * ((_2187 * _2190) + _535)) * _2211) * _1926);
    float _2302 = (((((_2271 * _2191) + _536) * cbLight._m0[_2225].z) * _2290) * _1912) + ((((cbLight._m0[_2137].z * _1882) * ((_2187 * _2191) + _536)) * _2211) * _1926);
    float _2358;
    float _2360;
    float _2362;
    if (_1966)
    {
        _2358 = _2300;
        _2360 = _2301;
        _2362 = _2302;
    }
    else
    {
        uint _2364 = _1889 + 2u;
        uint _2368 = _1889 + 10u;
        float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _420) * 0.949999988079071044921875);
        float _2383 = _2382 * _2382;
        float _2384 = cbLight._m0[_2364].x + _446;
        float _2385 = cbLight._m0[_2364].y + _447;
        float _2386 = cbLight._m0[_2364].z + _448;
        float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
        float _2391 = _2390 * _2384;
        float _2392 = _2390 * _2385;
        float _2393 = _2390 * _2386;
        float _2394 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_2364].xyz));
        float _4344 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2398 = dot(vec3(_417, _418, _419), vec3(_2391, _2392, _2393));
        float _4355 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2402 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2391, _2392, _2393));
        float _4366 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2406 = _2383 * _2383;
        float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
        float _2417 = exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0);
        float _2424 = 1.0 - _2383;
        float _2434 = (0.5 / (((_2166 * ((_2397 * _2424) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2424) + _2383) * _2397))) * _2397;
        float _4377 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2436 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
        float _2437 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2358 = (((((_2417 * _2188) + _533) * cbLight._m0[_2368].x) * _2436) * _2437) + _2300;
        _2360 = (((((_2417 * _2190) + _535) * cbLight._m0[_2368].y) * _2436) * _2437) + _2301;
        _2362 = (((((_2417 * _2191) + _536) * cbLight._m0[_2368].z) * _2436) * _2437) + _2302;
    }
    float _2468;
    float _2470;
    float _2472;
    if (_2075)
    {
        _2468 = _2358;
        _2470 = _2360;
        _2472 = _2362;
    }
    else
    {
        uint _2479 = _1889 + 3u;
        uint _2483 = _1889 + 11u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _420) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _446;
        float _2500 = cbLight._m0[_2479].y + _447;
        float _2501 = cbLight._m0[_2479].z + _448;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_2479].xyz));
        float _4393 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2513 = dot(vec3(_417, _418, _419), vec3(_2506, _2507, _2508));
        float _4404 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4415 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) * 5.0);
        float _2539 = 1.0 - _2498;
        float _2549 = (0.5 / (((_2166 * ((_2512 * _2539) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2539) + _2498) * _2512))) * _2512;
        float _4426 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2551 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2552 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2468 = (((((_2532 * _2188) + _533) * cbLight._m0[_2483].x) * _2551) * _2552) + _2358;
        _2470 = (((((_2532 * _2190) + _535) * cbLight._m0[_2483].y) * _2551) * _2552) + _2360;
        _2472 = (((((_2532 * _2191) + _536) * cbLight._m0[_2483].z) * _2551) * _2552) + _2362;
    }
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    if (_1887.y == 0u)
    {
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.x;
        uint _2585 = uint((float(_2573.y) * floor(float(uint(cbSceneParam._m0[85u].y * _468) / _2574))) + floor(float(uint(cbSceneParam._m0[85u].x * _467) / _2574)));
        float _2595 = (log2(_1665 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2596 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        uint _2599 = uint(isnan(14.0) ? _2596 : (isnan(_2596) ? 14.0 : min(_2596, 14.0)));
        uvec4 _2604 = texelFetch(g_lightClusterGridBuffer, int(((_2599 << 2u) + (_2585 << 6u)) >> 2u));
        uint _2605 = _2604.x;
        uint _2606 = _2573.z;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        if (((((1u << ((_2606 >> 4u) & 15u)) + 4294967295u) & _2605) == 0u) || ((_2606 & 240u) == 0u))
        {
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
        }
        else
        {
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            uint _2842 = 0u;
            uint _2851;
            bool _2852;
            for (;;)
            {
                _2851 = texelFetch(g_lightClassification, int((((_2599 << 5u) + (_2585 << 9u)) + (_2842 << 2u)) >> 2u)).x;
                _2852 = _2851 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2852)
                {
                    frontier_phi_73_pred = _2841;
                    frontier_phi_73_pred_1 = _2840;
                    frontier_phi_73_pred_2 = _2839;
                    frontier_phi_73_pred_3 = _2838;
                    frontier_phi_73_pred_4 = _2837;
                    frontier_phi_73_pred_5 = _2836;
                }
                else
                {
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    uint _2987;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2851;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    for (;;)
                    {
                        uint _2991 = uint(findLSB(_2987)) + (_2842 << 5u);
                        uint _2988 = (_2987 + 4294967295u) & _2987;
                        uint _2993 = _2991 * 48u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2993)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 3u)).x));
                        uint _3013 = (_2991 * 48u) + 4u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3032 = (_2991 * 48u) + 8u;
                        vec3 _3043 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x));
                        float _3047 = _3007.x - _1663;
                        float _3048 = _3007.y - _1664;
                        float _3049 = _3007.z - _1665;
                        float _3050 = dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049));
                        float _3053 = inversesqrt(_3050);
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3057 = dot(vec3(_488, _491, _494), vec3(_3054, _3055, _3056));
                        float _3062 = 1.0 - (_3050 * _3007.w);
                        float _4452 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3064 = sqrt(_3050) * _3026.w;
                        float _3067 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _3057) + _3068;
                        float _3074 = _3064 * _3064;
                        float _3078 = ((isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))) * _3063) / ((_3074 * 0.699999988079071044921875) + 1.0);
                        float _3082 = (-0.0) - _1663;
                        float _3083 = (-0.0) - _1664;
                        float _3084 = (-0.0) - _1665;
                        float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3098 = exp2(log2(1.0 / ((_3074 * 3.5) + 5.0)) * 0.25);
                        float _3099 = 1.0 - _565;
                        float _3106 = sqrt(1.0 - ((1.0 - (_3099 * _3099)) * (1.0 - (_3098 * _3098))));
                        float _3107 = _3106 * _3106;
                        float _3108 = _3107 * _3107;
                        float _3109 = _3089 + _3054;
                        float _3110 = _3090 + _3055;
                        float _3111 = _3091 + _3056;
                        float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                        float _3119 = dot(vec3(_488, _491, _494), vec3(_3089, _3090, _3091));
                        float _4468 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3122 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3123 = dot(vec3(_488, _491, _494), vec3(_3115 * _3109, _3115 * _3110, _3115 * _3111));
                        float _4479 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3126 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3130 = ((_3126 * _3126) * (_3108 + (-1.0))) + 1.0;
                        float _3131 = _3067 * _3107;
                        float _3132 = _3131 * _3131;
                        float _3135 = ((1.0 - _3132) * _3057) + _3132;
                        float _4490 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3136 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3137 = 1.0 - _3107;
                        float _3147 = (0.5 / (((_3136 * ((_3122 * _3137) + _3107)) + 9.9999999392252902907785028219223e-09) + (((_3136 * _3137) + _3107) * _3122))) * _3136;
                        float _4501 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3158 = (((_3108 * 3.1415927410125732421875) * (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) / ((_3130 * _3130) * ((_3074 * 2.1991131305694580078125) + 3.141590118408203125))) * _3063;
                        _2911 = (_3078 * _3026.x) + _2984;
                        _2912 = (_3078 * _3026.y) + _2985;
                        _2913 = (_3078 * _3026.z) + _2986;
                        _2908 = (_3158 * _3043.x) + _2981;
                        _2909 = (_3158 * _3043.y) + _2982;
                        _2910 = (_3158 * _3043.z) + _2983;
                        if (_2988 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2988;
                        }
                    }
                    frontier_phi_73_pred = _2913;
                    frontier_phi_73_pred_1 = _2912;
                    frontier_phi_73_pred_2 = _2911;
                    frontier_phi_73_pred_3 = _2910;
                    frontier_phi_73_pred_4 = _2909;
                    frontier_phi_73_pred_5 = _2908;
                }
                _2695 = frontier_phi_73_pred;
                _2693 = frontier_phi_73_pred_1;
                _2691 = frontier_phi_73_pred_2;
                _2689 = frontier_phi_73_pred_3;
                _2687 = frontier_phi_73_pred_4;
                _2685 = frontier_phi_73_pred_5;
                uint _2843 = _2842 + 1u;
                if (_2843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2836 = _2685;
                    _2837 = _2687;
                    _2838 = _2689;
                    _2839 = _2691;
                    _2840 = _2693;
                    _2841 = _2695;
                    _2842 = _2843;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
        }
        uvec4 _2698 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2699 = _2698.z;
        uint _2701 = (_2699 >> 8u) & 15u;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        if (((4294967295u << _2701) & _2605) == 0u)
        {
            _2804 = _2684;
            _2806 = _2686;
            _2808 = _2688;
            _2810 = _2690;
            _2812 = _2692;
            _2814 = _2694;
        }
        else
        {
            float _2829 = inversesqrt(dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665)));
            float _2830 = _2829 * _1663;
            float _2831 = _2829 * _1664;
            float _2832 = _2829 * _1665;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2701 < ((_2699 >> 12u) & 15u))
            {
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2964 = _2684;
                float _2965 = _2686;
                float _2966 = _2688;
                float _2967 = _2690;
                float _2968 = _2692;
                float _2969 = _2694;
                uint _2970 = _2701;
                uint _2979;
                bool _2980;
                for (;;)
                {
                    _2979 = texelFetch(g_lightClassification, int((((_2599 << 5u) + (_2585 << 9u)) + (_2970 << 2u)) >> 2u)).x;
                    _2980 = _2979 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2980)
                    {
                        frontier_phi_84_pred = _2968;
                        frontier_phi_84_pred_1 = _2967;
                        frontier_phi_84_pred_2 = _2966;
                        frontier_phi_84_pred_3 = _2965;
                        frontier_phi_84_pred_4 = _2964;
                        frontier_phi_84_pred_5 = _2969;
                    }
                    else
                    {
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3185 = _2964;
                        float _3186 = _2965;
                        float _3187 = _2966;
                        float _3188 = _2967;
                        float _3189 = _2968;
                        float _3190 = _2969;
                        uint _3191 = _2979;
                        uint _3192;
                        vec4 _3217;
                        float _3218;
                        vec4 _3233;
                        vec3 _3245;
                        vec4 _3261;
                        vec4 _3277;
                        float _3324;
                        bool _3325;
                        for (;;)
                        {
                            uint _3202 = ((_2970 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3191));
                            _3192 = (_3191 + 4294967295u) & _3191;
                            uint _3204 = _3202 * 40u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            _3218 = _3217.w;
                            uint _3220 = (_3202 * 40u) + 4u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3235 = (_3202 * 40u) + 8u;
                            _3245 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x));
                            uint _3248 = (_3202 * 40u) + 16u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3264 = (_3202 * 40u) + 20u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3280 = (_3202 * 40u) + 24u;
                            vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3299 = (_3202 * 40u) + 28u;
                            vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            _3324 = fma(_1665, _3312.z, fma(_1664, _3312.y, _3312.x * _1663)) + _3312.w;
                            _3325 = !((fma(_1665, _3293.z, fma(_1664, _3293.y, _3293.x * _1663)) + _3293.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3325)
                            {
                                float _3352 = _3217.x - _1663;
                                float _3353 = _3217.y - _1664;
                                float _3354 = _3217.z - _1665;
                                float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                                float _3358 = inversesqrt(_3355);
                                float _3359 = _3358 * _3352;
                                float _3360 = _3358 * _3353;
                                float _3361 = _3358 * _3354;
                                float _3365 = 1.0 - (_3355 / (_3218 * _3218));
                                float _4512 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3370 = sqrt(_3355) * _3233.w;
                                float _3372 = 1.39999997615814208984375 / (_3370 + 1.39999997615814208984375);
                                float _3373 = _3372 * _3372;
                                float _3376 = ((1.0 - _3373) * dot(vec3(_3359, _3360, _3361), vec3(_488, _491, _494))) + _3373;
                                float _3379 = _3370 * _3370;
                                float _3383 = (fma(_1665, _3261.z, fma(_1664, _3261.y, _3261.x * _1663)) + _3261.w) / _3324;
                                float _3384 = (fma(_1665, _3277.z, fma(_1664, _3277.y, _3277.x * _1663)) + _3277.w) / _3324;
                                float _3388 = 1.0 - dot(vec2(_3383, _3384), vec2(_3383, _3384));
                                float _4528 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3390 = _3389 * (((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3366) / ((_3379 * 0.699999988079071044921875) + 1.0));
                                float _3402 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                                float _3403 = 1.0 - _565;
                                float _3410 = sqrt(1.0 - ((1.0 - (_3403 * _3403)) * (1.0 - (_3402 * _3402))));
                                float _3411 = _3410 * _3410;
                                float _3412 = _3411 * _3411;
                                float _3413 = _3359 - _2830;
                                float _3414 = _3360 - _2831;
                                float _3415 = _3361 - _2832;
                                float _3419 = inversesqrt(dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415)));
                                float _3423 = dot(vec3(_488, _491, _494), vec3((-0.0) - _2830, (-0.0) - _2831, (-0.0) - _2832));
                                float _4539 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3427 = dot(vec3(_488, _491, _494), vec3(_3419 * _3413, _3419 * _3414, _3419 * _3415));
                                float _4550 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3430 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3434 = ((_3430 * _3430) * (_3412 + (-1.0))) + 1.0;
                                float _3435 = _3372 * _3411;
                                float _3436 = _3435 * _3435;
                                float _3442 = ((1.0 - _3436) * dot(vec3(_488, _491, _494), vec3(_3359, _3360, _3361))) + _3436;
                                float _4561 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3444 = 1.0 - _3411;
                                float _3454 = (0.5 / (((_3443 * ((_3426 * _3444) + _3411)) + 9.9999999392252902907785028219223e-09) + (((_3443 * _3444) + _3411) * _3426))) * _3443;
                                float _4572 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3464 = (_3389 * _3366) * (((_3412 * 3.1415927410125732421875) * (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) / ((_3434 * _3434) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3390 * _3233.y;
                                frontier_phi_90_pred_1 = _3390 * _3233.x;
                                frontier_phi_90_pred_2 = _3464 * _3245.z;
                                frontier_phi_90_pred_3 = _3464 * _3245.y;
                                frontier_phi_90_pred_4 = _3464 * _3245.x;
                                frontier_phi_90_pred_5 = _3390 * _3233.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3472 = frontier_phi_90_pred;
                            _3471 = frontier_phi_90_pred_1;
                            _3470 = frontier_phi_90_pred_2;
                            _3469 = frontier_phi_90_pred_3;
                            _3468 = frontier_phi_90_pred_4;
                            _3473 = frontier_phi_90_pred_5;
                            _3175 = _3471 + _3188;
                            _3176 = _3472 + _3189;
                            _3177 = _3473 + _3190;
                            _3172 = _3468 + _3185;
                            _3173 = _3469 + _3186;
                            _3174 = _3470 + _3187;
                            if (_3192 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3192;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3176;
                        frontier_phi_84_pred_1 = _3175;
                        frontier_phi_84_pred_2 = _3174;
                        frontier_phi_84_pred_3 = _3173;
                        frontier_phi_84_pred_4 = _3172;
                        frontier_phi_84_pred_5 = _3177;
                    }
                    _2813 = frontier_phi_84_pred;
                    _2811 = frontier_phi_84_pred_1;
                    _2809 = frontier_phi_84_pred_2;
                    _2807 = frontier_phi_84_pred_3;
                    _2805 = frontier_phi_84_pred_4;
                    _2815 = frontier_phi_84_pred_5;
                    uint _2971 = _2970 + 1u;
                    if (_2971 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2964 = _2805;
                        _2965 = _2807;
                        _2966 = _2809;
                        _2967 = _2811;
                        _2968 = _2813;
                        _2969 = _2815;
                        _2970 = _2971;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2815;
                frontier_phi_65_66_ladder_1 = _2811;
                frontier_phi_65_66_ladder_2 = _2813;
                frontier_phi_65_66_ladder_3 = _2807;
                frontier_phi_65_66_ladder_4 = _2805;
                frontier_phi_65_66_ladder_5 = _2809;
            }
            else
            {
                frontier_phi_65_66_ladder = _2694;
                frontier_phi_65_66_ladder_1 = _2690;
                frontier_phi_65_66_ladder_2 = _2692;
                frontier_phi_65_66_ladder_3 = _2686;
                frontier_phi_65_66_ladder_4 = _2684;
                frontier_phi_65_66_ladder_5 = _2688;
            }
            _2804 = frontier_phi_65_66_ladder_4;
            _2806 = frontier_phi_65_66_ladder_3;
            _2808 = frontier_phi_65_66_ladder_5;
            _2810 = frontier_phi_65_66_ladder_1;
            _2812 = frontier_phi_65_66_ladder_2;
            _2814 = frontier_phi_65_66_ladder;
        }
        float _2819 = isnan(1.0) ? _549 : (isnan(_549) ? 1.0 : min(_549, 1.0));
        _2617 = (_2819 * _2810) + _2130;
        _2619 = (_2819 * _2812) + _2132;
        _2621 = (_2819 * _2814) + _2134;
        _2623 = ((_2804 * _533) * _2819) + _2468;
        _2625 = ((_2806 * _535) * _2819) + _2470;
        _2627 = ((_2808 * _536) * _2819) + _2472;
    }
    else
    {
        _2617 = _2130;
        _2619 = _2132;
        _2621 = _2134;
        _2623 = _2468;
        _2625 = _2470;
        _2627 = _2472;
    }
    float _4588 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4599 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _4610 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _2644 = ((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2617 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _549))) + ((_2623 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1390)) * cbPerFrame._m0[3u].x);
    float _2645 = ((isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2619 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _549))) + ((_2625 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1390)) * cbPerFrame._m0[3u].x);
    float _2646 = ((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2621 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _549))) + ((_2627 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1390)) * cbPerFrame._m0[3u].x);
    uint _2647 = _507 + 6u;
    float _2655 = _467 / cbSceneParam._m0[86u].x;
    float _2656 = _468 / cbSceneParam._m0[86u].y;
    vec4 _2670 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, (log2((isnan(cbSceneParam._m0[77u].w) ? _441 : (isnan(_441) ? cbSceneParam._m0[77u].w : min(_441, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2672 = _2670.x;
    float _2673 = _2670.y;
    float _2674 = _2670.z;
    float _2675 = _2670.w;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_441 > cbSceneParam._m0[78u].w)
    {
        float _2709 = isnan(_441) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _441 : min(cbSceneParam._m0[80u].w, _441));
        float _2710 = _2709 / _441;
        float _2721 = _2710 * _275;
        float _2722 = _276 * _2710;
        float _2723 = (-0.0) - _2722;
        float _2724 = _2710 * _277;
        float _2726 = (cbSceneParam._m0[77u].w * _2723) / _2709;
        float _2727 = _2726 + cbSceneParam._m0[79u].w;
        float _2728 = cbSceneParam._m0[79u].w - _2722;
        float _2734 = sqrt(((_2721 * _2721) + (_2722 * _2722)) + (_2724 * _2724));
        float _2737 = (1.0 - (cbSceneParam._m0[77u].w / _2709)) * _2734;
        float _2742 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2744 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2921;
        if (abs((_2723 - _2726) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2921 = ((((_2727 > 0.0) ? exp2(_2742 * _2727) : (2.0 - exp2(_2744 * _2727))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2737;
        }
        else
        {
            float _2865 = 1.0 / cbSceneParam._m0[80u].x;
            float _2866 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : max(_2727, _2728));
            float _2867 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : min(_2727, _2728));
            float _2876 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : min(_2866, 0.0));
            float _2877 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : min(_2867, 0.0));
            _2921 = ((abs(_2734 / _2723) * cbSceneParam._m0[80u].y) * ((((_2876 - _2877) * 2.0) - ((exp2(_2742 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0)))) - exp2(_2742 * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))))) * _2865)) - ((exp2(_2744 * _2876) - exp2(_2744 * _2877)) * _2865))) + (_2737 * cbSceneParam._m0[80u].z);
        }
        vec4 _2923 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, 1.0), 0.0);
        float _2932 = exp2((_2921 * (-1.44269502162933349609375)) * (1.0 - _2923.w));
        float _2933 = log2(_2932);
        float _2949 = log2(_2675);
        _2746 = (exp2(_2949 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].x)) * _2923.x) / cbSceneParam._m0[78u].x)) + _2672;
        _2748 = (exp2(_2949 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].y)) * _2923.y) / cbSceneParam._m0[78u].y)) + _2673;
        _2750 = (exp2(_2949 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].z)) * _2923.z) / cbSceneParam._m0[78u].z)) + _2674;
        _2752 = _2932 * _2675;
    }
    else
    {
        _2746 = _2672;
        _2748 = _2673;
        _2750 = _2674;
        _2752 = _2675;
    }
    bool _2959;
    vec4 _2762;
    vec4 _2784;
    float _2786;
    float _2790;
    float _2791;
    float _2792;
    float _2793;
    bool _2803;
    for (;;)
    {
        _2762 = cbMatDynParam._m0[0u];
        float _2764 = roundEven(_2762.y);
        bool _2765 = _2764 == 3.0;
        float _2766 = log2(_2752);
        float _2773 = exp2(_2766 * cbSceneParam._m0[78u].x) * _2644;
        float _2774 = exp2(_2766 * cbSceneParam._m0[78u].y) * _2645;
        float _2775 = exp2(_2766 * cbSceneParam._m0[78u].z) * _2646;
        float _2782 = _455 + (-0.5);
        _2784 = cbMtdParam._m0[1u];
        _2786 = _2784.y * _2782;
        float _2789 = (_2764 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2790 = _2789 * (_2765 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2746)));
        _2791 = _2789 * (_2765 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2748)));
        _2792 = _2789 * (_2765 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2750)));
        _2793 = _2782 * 0.999000012874603271484375;
        _2803 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2803)
        {
            if ((cbInstanceData._m0[_507 + 7u].x + _2793) < 0.5)
            {
                _2959 = true;
                break;
            }
        }
        uint _2900 = _509 + uint(_2762.w);
        if ((cbInstanceData._m0[_2900].w < 1.0) && ((cbInstanceData._m0[_2900].w + _2793) < 0.5))
        {
            _2959 = true;
            break;
        }
        if ((_2786 + _348) < _2784.x)
        {
            _2959 = true;
            break;
        }
        _2959 = false;
        break;
    }
    float _3163;
    if (_2959)
    {
        discard_state = true;
        _3163 = 0.0;
    }
    else
    {
        _3163 = cbInstanceData._m0[_2647].w;
    }
    SV_Target.x = _2790;
    SV_Target.y = _2791;
    SV_Target.z = _2792;
    SV_Target.w = _3163;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2647].w;
    discard_exit();
}


