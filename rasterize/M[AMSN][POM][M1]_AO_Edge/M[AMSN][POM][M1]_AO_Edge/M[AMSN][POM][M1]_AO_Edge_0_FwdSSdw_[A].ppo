#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _950;
float _3365;
float _3366;
float _3367;
float _3368;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    float _284 = dot(vec3(_273, _274, _275), vec3(_196, _197, _198));
    float _287 = dot(vec3(_273, _274, _275), vec3(_210, _211, _212));
    float _290 = dot(vec3(_273, _274, _275), vec3(_217, _218, _219));
    float _296 = inversesqrt(dot(vec3(_284, _287, _290), vec3(_284, _287, _290)));
    vec4 _309 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _320 = dot(vec4(_309), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _328 = (((cbMtdParam._m0[10u].y * _284) * _296) * _320) + TEXCOORD.x;
    float _329 = (((_287 * cbMtdParam._m0[10u].y) * _296) * _320) + TEXCOORD.y;
    vec4 _341 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_328 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_329 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _346 = _341.w;
    float _347 = _341.x * cbMtdParam._m0[9u].x;
    float _348 = _341.y * cbMtdParam._m0[9u].y;
    float _349 = _341.z * cbMtdParam._m0[9u].z;
    vec4 _361 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _363 = _361.x;
    vec4 _375 = texture(sampler2D(M_AMSN_POM_M1_AO_Edge_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _328) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _329) + cbTextureTilingScale._m0[3u].w));
    float _379 = _375.z;
    float _384 = (_375.x * 2.0) + (-1.0);
    float _386 = (_375.y * 2.0) + (-1.0);
    float _387 = dot(vec2(_384, _386), vec2(_384, _386));
    float _3377 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _392 = sqrt(1.0 - (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))));
    float _395 = fma(_392, _217, fma(_386, _210, _384 * _196));
    float _398 = fma(_392, _218, fma(_386, _211, _384 * _197));
    float _401 = fma(_392, _219, fma(_386, _212, _384 * _198));
    float _405 = inversesqrt(dot(vec3(_395, _398, _401), vec3(_395, _398, _401)));
    float _406 = _405 * _395;
    float _407 = _405 * _398;
    float _408 = _405 * _401;
    float _410 = cbMtdParam._m0[10u].x + _375.w;
    float _414 = inversesqrt(dot(vec3(_406, _407, _408), vec3(_406, _407, _408)));
    float _415 = _414 * _406;
    float _416 = _414 * _407;
    float _417 = _414 * _408;
    float _3388 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _418 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _3399 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3410 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3421 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3432 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3443 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _423 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _439 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _443 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _444 = _273 * _443;
    float _445 = _274 * _443;
    float _446 = _275 * _443;
    vec4 _451 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _453 = _451.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _630 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
        float _636 = (cbMatDynParam._m0[5u].x * _630) + cbMatDynParam._m0[5u].y;
        float _3454 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _637 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _641 = (cbMatDynParam._m0[5u].z * _630) + cbMatDynParam._m0[5u].w;
        float _3465 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) - _637)) + _637) < ((_453 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _465 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _466 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _486 = fma(_417, cbSceneParam._m0[5u].z, fma(_416, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _415));
    float _489 = fma(_417, cbSceneParam._m0[6u].z, fma(_416, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _415));
    float _492 = fma(_417, cbSceneParam._m0[7u].z, fma(_416, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _415));
    uint _505 = uint(roundEven(NORMAL.w)) * 13u;
    uint _507 = _505 + 9u;
    uint _508 = _507 + uint(cbMatDynParam._m0[0u].w);
    float _514 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) * cbInstanceData._m0[_508].x;
    float _515 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * cbInstanceData._m0[_508].y;
    float _516 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * cbInstanceData._m0[_508].z;
    float _3476 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _3487 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _518 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _519 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _520 = 1.0 - _423;
    float _521 = _517 * _520;
    float _522 = _518 * _520;
    float _523 = _519 * _520;
    float _528 = (_517 + (-0.039999999105930328369140625)) * _423;
    float _529 = (_518 + (-0.039999999105930328369140625)) * _423;
    float _530 = (_519 + (-0.039999999105930328369140625)) * _423;
    float _531 = _528 + 0.039999999105930328369140625;
    float _533 = _529 + 0.039999999105930328369140625;
    float _534 = _530 + 0.039999999105930328369140625;
    vec4 _543 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _465, cbSceneParam._m0[86u].y * _466));
    float _547 = ((isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * TEXCOORD.z) * _543.x;
    float _548 = dot(vec3(_415, _416, _417), vec3(_444, _445, _446));
    float _551 = _548 * 2.0;
    float _555 = (_551 * _415) - _444;
    float _556 = (_551 * _416) - _445;
    float _557 = (_551 * _417) - _446;
    float _561 = abs(dot(vec3(_444, _445, _446), vec3(_415, _416, _417)));
    float _3509 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _563 = sqrt(_418);
    float _576 = exp2((_563 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_563 * 3.0));
    float _582 = (1.0 - _576) * ((_563 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _583 = _576 * _563;
    float _611 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _949;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _675 = fma(_619, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611));
        float _679 = fma(_619, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611));
        float _683 = fma(_619, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611));
        float _707 = _611 + _415;
        float _708 = _615 + _416;
        float _709 = _619 + _417;
        float _719 = fma(_709, cbModelParam._m0[26u].z, fma(_708, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _707)) - _675;
        float _720 = fma(_709, cbModelParam._m0[27u].z, fma(_708, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _707)) - _679;
        float _721 = fma(_709, cbModelParam._m0[28u].z, fma(_708, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _707)) - _683;
        float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
        float _738 = ((_725 * _719) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_675 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _739 = ((_725 * _720) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_679 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _740 = ((_725 * _721) / cbModelParam._m0[34u].z) + ((((((_683 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        float _777 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_743.x + (-0.5));
        float _779 = _777 * (_743.y + (-0.5));
        float _780 = _777 * (_743.z + (-0.5));
        float _787 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_750.x + (-0.5));
        float _789 = _787 * (_750.y + (-0.5));
        float _790 = _787 * (_750.z + (-0.5));
        float _797 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_757.x + (-0.5));
        float _799 = _797 * (_757.y + (-0.5));
        float _800 = _797 * (_757.z + (-0.5));
        float _807 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_764.x + (-0.5));
        float _809 = _807 * (_764.y + (-0.5));
        float _810 = _807 * (_764.z + (-0.5));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = _778 * 0.5;
        float _815 = _788 * 0.5;
        float _816 = _798 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _831 = (dot(vec3(_415, _416, _417), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _841 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3557 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_843 + 1.0))) + _848) * _811;
        float _858 = _779 * 0.5;
        float _859 = _789 * 0.5;
        float _860 = _799 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _874 = (dot(vec3(_415, _416, _417), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _883 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3590 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_885 + 1.0))) + _890) * _812;
        float _900 = _780 * 0.5;
        float _901 = _790 * 0.5;
        float _902 = _800 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_415, _416, _417), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3623 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_927 + 1.0))) + _932) * _813;
        _949 = _780;
        _951 = _779;
        _952 = _778;
        _953 = _790;
        _954 = _789;
        _955 = _788;
        _956 = _800;
        _957 = _799;
        _958 = _798;
        _959 = _813;
        _960 = _812;
        _961 = _811;
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
    }
    else
    {
        _949 = _950;
        _951 = _950;
        _952 = _950;
        _953 = _950;
        _954 = _950;
        _955 = _950;
        _956 = _950;
        _957 = _950;
        _958 = _950;
        _959 = _950;
        _960 = _950;
        _961 = _950;
        _962 = 0.0;
        _963 = 0.0;
        _964 = 0.0;
    }
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _993 = fma(_619, cbModelParam._m0[30u].z, fma(_615, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _611));
        float _997 = fma(_619, cbModelParam._m0[31u].z, fma(_615, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _611));
        float _1001 = fma(_619, cbModelParam._m0[32u].z, fma(_615, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _611));
        float _1024 = _611 + _415;
        float _1025 = _615 + _416;
        float _1026 = _619 + _417;
        float _1036 = fma(_1026, cbModelParam._m0[30u].z, fma(_1025, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024)) - _993;
        float _1037 = fma(_1026, cbModelParam._m0[31u].z, fma(_1025, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024)) - _997;
        float _1038 = fma(_1026, cbModelParam._m0[32u].z, fma(_1025, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024)) - _1001;
        float _1042 = inversesqrt(dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038)));
        float _1055 = ((_1042 * _1036) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_993 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1042 * _1037) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_997 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1042 * _1038) / cbModelParam._m0[35u].z) + ((((((_1001 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        float _1092 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1059.x + (-0.5));
        float _1094 = _1092 * (_1059.y + (-0.5));
        float _1095 = _1092 * (_1059.z + (-0.5));
        float _1102 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1066.x + (-0.5));
        float _1104 = _1102 * (_1066.y + (-0.5));
        float _1105 = _1102 * (_1066.z + (-0.5));
        float _1112 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1073.x + (-0.5));
        float _1114 = _1112 * (_1073.y + (-0.5));
        float _1115 = _1112 * (_1073.z + (-0.5));
        float _1122 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1080.x + (-0.5));
        float _1124 = _1122 * (_1080.y + (-0.5));
        float _1125 = _1122 * (_1080.z + (-0.5));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = _1093 * 0.5;
        float _1130 = _1103 * 0.5;
        float _1131 = _1113 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_415, _416, _417), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3686 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1156 + 1.0))) + _1161) * _1126;
        float _1171 = _1094 * 0.5;
        float _1172 = _1104 * 0.5;
        float _1173 = _1114 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_415, _416, _417), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3719 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1198 + 1.0))) + _1203) * _1127;
        float _1213 = _1095 * 0.5;
        float _1214 = _1105 * 0.5;
        float _1215 = _1115 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_415, _416, _417), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3752 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1240 + 1.0))) + _1245) * _1128;
        _1262 = _1095;
        _1263 = _1094;
        _1264 = _1093;
        _1265 = _1105;
        _1266 = _1104;
        _1267 = _1103;
        _1268 = _1115;
        _1269 = _1114;
        _1270 = _1113;
        _1271 = _1128;
        _1272 = _1127;
        _1273 = _1126;
        _1274 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1275 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
    }
    else
    {
        _1262 = _950;
        _1263 = _950;
        _1264 = _950;
        _1265 = _950;
        _1266 = _950;
        _1267 = _950;
        _1268 = _950;
        _1269 = _950;
        _1270 = _950;
        _1271 = _950;
        _1272 = _950;
        _1273 = _950;
        _1274 = 0.0;
        _1275 = 0.0;
        _1276 = 0.0;
    }
    float _1286 = (cbModelParam._m0[1u].x * (_1274 - _962)) + _962;
    float _1287 = (cbModelParam._m0[1u].x * (_1275 - _963)) + _963;
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _964)) + _964;
    float _1309 = fma(_1288, cbSceneParam._m0[89u].z, fma(_1287, cbSceneParam._m0[89u].y, _1286 * cbSceneParam._m0[89u].x));
    float _1312 = fma(_1288, cbSceneParam._m0[90u].z, fma(_1287, cbSceneParam._m0[90u].y, _1286 * cbSceneParam._m0[90u].x));
    float _1315 = fma(_1288, cbSceneParam._m0[91u].z, fma(_1287, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1286));
    float _1330 = _555 * 0.5;
    float _1331 = _556 * 0.5;
    float _1332 = _557 * 0.5;
    float _1333 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1336 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1339 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1373;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1346 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_949, _953, _956, _959));
        float _1350 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_951, _954, _957, _960));
        float _1354 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_952, _955, _958, _961));
        float _1361 = dot(vec4(cbModelParam._m0[39u]), vec4(_1330, _1331, _1332, 1.0));
        _1373 = dot(vec3(isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1361) ? 0.0 : (isnan(0.0) ? _1361 : max(0.0, _1361))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1373 = 1.0;
    }
    float _1384;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1375 = dot(vec4(cbModelParam._m0[40u]), vec4(_1330, _1331, _1332, 1.0));
        _1384 = dot(vec3(isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1375) ? 0.0 : (isnan(0.0) ? _1375 : max(0.0, _1375))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1384 = 1.0;
    }
    float _1388 = (_1384 * cbModelParam._m0[1u].x) + (_1373 * (1.0 - cbModelParam._m0[1u].x));
    float _1398 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _418);
    float _1399 = isnan(_1398) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1398 : min(cbModelParam._m0[25u].z, _1398));
    float _1481;
    float _1483;
    float _1485;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1448 = fma(_619, cbModelParam._m0[13u].z, fma(_615, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611)) + cbModelParam._m0[13u].w;
        float _1452 = fma(_619, cbModelParam._m0[14u].z, fma(_615, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611)) + cbModelParam._m0[14u].w;
        float _1456 = fma(_619, cbModelParam._m0[15u].z, fma(_615, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611)) + cbModelParam._m0[15u].w;
        float _1459 = fma(_557, cbModelParam._m0[13u].z, fma(_556, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _555));
        float _1462 = fma(_557, cbModelParam._m0[14u].z, fma(_556, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _555));
        float _1465 = fma(_557, cbModelParam._m0[15u].z, fma(_556, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _555));
        float _1493;
        if (_1459 > 0.0)
        {
            _1493 = abs((1.0 - _1448) / _1459);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1448 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1493 = frontier_phi_19_17_ladder;
        }
        float _1722;
        if (_1462 > 0.0)
        {
            _1722 = abs((1.0 - _1452) / _1462);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1452 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1722 = frontier_phi_28_24_ladder;
        }
        float _1979;
        if (_1465 > 0.0)
        {
            _1979 = abs((1.0 - _1456) / _1465);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1456 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1979 = frontier_phi_40_35_ladder;
        }
        float _1981 = isnan(_1722) ? _1493 : (isnan(_1493) ? _1722 : min(_1493, _1722));
        float _1982 = isnan(_1979) ? _1981 : (isnan(_1981) ? _1979 : min(_1981, _1979));
        float _1986 = (_1982 * _1459) + _1448;
        float _1987 = (_1982 * _1462) + _1452;
        float _1988 = (_1982 * _1465) + _1456;
        float _1989 = _1982 * 9.9999997473787516355514526367188e-05;
        float _1991 = (-1.0) - _1989;
        float _1993 = _1989 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1988 > _1993) || ((_1988 < _1991) || ((_1987 > _1993) || ((_1987 < _1991) || ((_1986 < _1991) || (_1986 > _1993))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2116 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1988, cbModelParam._m0[9u].z, fma(_1987, cbModelParam._m0[9u].y, _1986 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1988, cbModelParam._m0[10u].z, fma(_1987, cbModelParam._m0[10u].y, _1986 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1988, cbModelParam._m0[11u].z, fma(_1987, cbModelParam._m0[11u].y, _1986 * cbModelParam._m0[11u].x))), _1399);
            frontier_phi_18_40_ladder = _2116.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2116.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2116.x * cbModelParam._m0[1u].y;
        }
        _1481 = frontier_phi_18_40_ladder_2;
        _1483 = frontier_phi_18_40_ladder_1;
        _1485 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1469 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_555, _556, _557), _1399);
        _1481 = _1469.x * cbModelParam._m0[1u].y;
        _1483 = _1469.y * cbModelParam._m0[1u].y;
        _1485 = _1469.z * cbModelParam._m0[1u].y;
    }
    float _1489 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _418);
    float _1490 = isnan(_1489) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1489 : min(cbModelParam._m0[25u].w, _1489));
    float _1583;
    float _1585;
    float _1587;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1547 = fma(_619, cbModelParam._m0[21u].z, fma(_615, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611)) + cbModelParam._m0[21u].w;
        float _1551 = fma(_619, cbModelParam._m0[22u].z, fma(_615, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611)) + cbModelParam._m0[22u].w;
        float _1555 = fma(_619, cbModelParam._m0[23u].z, fma(_615, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611)) + cbModelParam._m0[23u].w;
        float _1558 = fma(_557, cbModelParam._m0[21u].z, fma(_556, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _555));
        float _1561 = fma(_557, cbModelParam._m0[22u].z, fma(_556, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _555));
        float _1564 = fma(_557, cbModelParam._m0[23u].z, fma(_556, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _555));
        float _1727;
        if (_1558 > 0.0)
        {
            _1727 = abs((1.0 - _1547) / _1558);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1547 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1727 = frontier_phi_30_26_ladder;
        }
        float _2006;
        if (_1561 > 0.0)
        {
            _2006 = abs((1.0 - _1551) / _1561);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1551 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2006 = frontier_phi_42_37_ladder;
        }
        float _2219;
        if (_1564 > 0.0)
        {
            _2219 = abs((1.0 - _1555) / _1564);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1555 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2219 = frontier_phi_51_48_ladder;
        }
        float _2221 = isnan(_2006) ? _1727 : (isnan(_1727) ? _2006 : min(_1727, _2006));
        float _2222 = isnan(_2219) ? _2221 : (isnan(_2221) ? _2219 : min(_2221, _2219));
        float _2226 = (_2222 * _1558) + _1547;
        float _2227 = (_2222 * _1561) + _1551;
        float _2228 = (_2222 * _1564) + _1555;
        float _2229 = _2222 * 9.9999997473787516355514526367188e-05;
        float _2230 = (-1.0) - _2229;
        float _2232 = _2229 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2228 > _2232) || ((_2228 < _2230) || ((_2227 > _2232) || ((_2227 < _2230) || ((_2226 < _2230) || (_2226 > _2232))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2228, cbModelParam._m0[17u].z, fma(_2227, cbModelParam._m0[17u].y, _2226 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2228, cbModelParam._m0[18u].z, fma(_2227, cbModelParam._m0[18u].y, _2226 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2228, cbModelParam._m0[19u].z, fma(_2227, cbModelParam._m0[19u].y, _2226 * cbModelParam._m0[19u].x))), _1490);
            frontier_phi_27_51_ladder = _2426.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2426.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2426.x * cbModelParam._m0[1u].z;
        }
        _1583 = frontier_phi_27_51_ladder_2;
        _1585 = frontier_phi_27_51_ladder_1;
        _1587 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1567 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_555, _556, _557), _1490);
        _1583 = _1567.x * cbModelParam._m0[1u].z;
        _1585 = _1567.y * cbModelParam._m0[1u].z;
        _1587 = _1567.z * cbModelParam._m0[1u].z;
    }
    float _1600 = (((_582 * _531) + _583) * _547) * ((cbModelParam._m0[1u].w * (_1583 - _1481)) + _1481);
    float _1602 = (((_582 * _533) + _583) * _547) * ((cbModelParam._m0[1u].w * (_1585 - _1483)) + _1483);
    float _1604 = (((_582 * _534) + _583) * _547) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1607 = fma(_1604, cbSceneParam._m0[89u].z, fma(_1602, cbSceneParam._m0[89u].y, _1600 * cbSceneParam._m0[89u].x));
    float _1610 = fma(_1604, cbSceneParam._m0[90u].z, fma(_1602, cbSceneParam._m0[90u].y, _1600 * cbSceneParam._m0[90u].x));
    float _1613 = fma(_1604, cbSceneParam._m0[91u].z, fma(_1602, cbSceneParam._m0[91u].y, _1600 * cbSceneParam._m0[91u].x));
    vec4 _1621 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_465, _466));
    float _1623 = _1621.w;
    float _1635 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1623);
    float _1636 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1623);
    float _1637 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1623);
    uvec4 _1641 = floatBitsToUint(cbInstanceData._m0[_505 + 5u]);
    uint _1643 = _1641.x * 14u;
    uint _1644 = _1643 + 13u;
    float _1651 = _547 + (-1.0);
    float _1656 = (cbLight._m0[_1644].x * _1651) + 1.0;
    float _1657 = (cbLight._m0[_1644].y * _1651) + 1.0;
    float _1658 = (cbLight._m0[_1644].z * _1651) + 1.0;
    float _1659 = (cbLight._m0[_1644].w * _1651) + 1.0;
    uint _1660 = _1643 + 5u;
    float _1666 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
    uint _1670 = _1643 + 4u;
    float _1680 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
    uint _1684 = _1643 | 1u;
    float _1695 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_415, _416, _417));
    float _1698 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_415, _416, _417));
    float _3888 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _3899 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1703 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 0.3183098733425140380859375;
    float _1705 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.3183098733425140380859375;
    float _1712 = ((cbLight._m0[_1660].x * _1666) * _1705) + (((cbLight._m0[_1670].x * _1635) * _1680) * _1703);
    float _1713 = ((_1666 * cbLight._m0[_1660].y) * _1705) + (((cbLight._m0[_1670].y * _1636) * _1680) * _1703);
    float _1714 = ((_1666 * cbLight._m0[_1660].z) * _1705) + (((cbLight._m0[_1670].z * _1637) * _1680) * _1703);
    uvec4 _1719 = floatBitsToUint(cbLight._m0[_1643 + 12u]);
    bool _1721 = _1719.x == 0u;
    float _1732;
    float _1734;
    float _1736;
    if (_1721)
    {
        _1732 = _1712;
        _1734 = _1713;
        _1736 = _1714;
    }
    else
    {
        uint _1740 = _1643 + 6u;
        float _1756 = (dot(vec3(cbLight._m0[_1643 + 2u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _1757 = _1756 * _1756;
        float _3910 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1759 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _1732 = (((cbLight._m0[_1740].x * 0.3183098733425140380859375) * _1758) * _1759) + _1712;
        _1734 = (((cbLight._m0[_1740].y * 0.3183098733425140380859375) * _1758) * _1759) + _1713;
        _1736 = (((cbLight._m0[_1740].z * 0.3183098733425140380859375) * _1758) * _1759) + _1714;
    }
    bool _1739 = _1719.y == 0u;
    float _1777;
    float _1779;
    float _1781;
    if (_1739)
    {
        _1777 = _1732;
        _1779 = _1734;
        _1781 = _1736;
    }
    else
    {
        uint _1950 = _1643 + 7u;
        float _1966 = (dot(vec3(cbLight._m0[_1643 + 3u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _1967 = _1966 * _1966;
        float _3926 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1968 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1969 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _1777 = (((cbLight._m0[_1950].x * 0.3183098733425140380859375) * _1968) * _1969) + _1732;
        _1779 = (((cbLight._m0[_1950].y * 0.3183098733425140380859375) * _1968) * _1969) + _1734;
        _1781 = (((cbLight._m0[_1950].z * 0.3183098733425140380859375) * _1968) * _1969) + _1736;
    }
    uint _1784 = _1643 + 8u;
    float _1797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1643].w)) * _418) * 0.949999988079071044921875);
    float _1798 = _1797 * _1797;
    float _1799 = cbLight._m0[_1643].x + _444;
    float _1800 = cbLight._m0[_1643].y + _445;
    float _1801 = cbLight._m0[_1643].z + _446;
    float _1805 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
    float _1806 = _1805 * _1799;
    float _1807 = _1805 * _1800;
    float _1808 = _1805 * _1801;
    float _1809 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1643].xyz));
    float _3942 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _1813 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _1814 = dot(vec3(_415, _416, _417), vec3(_1806, _1807, _1808));
    float _3964 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _1818 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_1806, _1807, _1808));
    float _3975 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1822 = _1798 * _1798;
    float _1826 = ((_1817 * _1817) * (_1822 + (-1.0))) + 1.0;
    float _1834 = exp2(log2(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * 5.0);
    float _1835 = 0.959999978542327880859375 - _528;
    float _1837 = 0.959999978542327880859375 - _529;
    float _1838 = 0.959999978542327880859375 - _530;
    float _1845 = 1.0 - _1798;
    float _1856 = (0.5 / (((_1813 * ((_1812 * _1845) + _1798)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _1845) + _1798) * _1812))) * _1812;
    float _3986 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1858 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1822 / ((_1826 * _1826) * 3.141590118408203125));
    uint _1872 = _1643 + 9u;
    float _1883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1684].w)) * _418) * 0.949999988079071044921875);
    float _1884 = _1883 * _1883;
    float _1885 = cbLight._m0[_1684].x + _444;
    float _1886 = cbLight._m0[_1684].y + _445;
    float _1887 = cbLight._m0[_1684].z + _446;
    float _1891 = inversesqrt(dot(vec3(_1885, _1886, _1887), vec3(_1885, _1886, _1887)));
    float _1892 = _1891 * _1885;
    float _1893 = _1891 * _1886;
    float _1894 = _1891 * _1887;
    float _1895 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1684].xyz));
    float _3997 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1899 = dot(vec3(_415, _416, _417), vec3(_1892, _1893, _1894));
    float _4008 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1903 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_1892, _1893, _1894));
    float _4019 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1907 = _1884 * _1884;
    float _1911 = ((_1902 * _1902) * (_1907 + (-1.0))) + 1.0;
    float _1918 = exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0);
    float _1925 = 1.0 - _1884;
    float _1935 = (0.5 / (((_1813 * ((_1898 * _1925) + _1884)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _1925) + _1884) * _1898))) * _1898;
    float _4030 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1937 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1907 / ((_1911 * _1911) * 3.141590118408203125));
    float _1947 = (((((_1918 * _1835) + _531) * cbLight._m0[_1872].x) * _1937) * _1666) + ((((cbLight._m0[_1784].x * _1635) * ((_1834 * _1835) + _531)) * _1858) * _1680);
    float _1948 = (((((_1918 * _1837) + _533) * cbLight._m0[_1872].y) * _1937) * _1666) + ((((cbLight._m0[_1784].y * _1636) * ((_1834 * _1837) + _533)) * _1858) * _1680);
    float _1949 = (((((_1918 * _1838) + _534) * cbLight._m0[_1872].z) * _1937) * _1666) + ((((cbLight._m0[_1784].z * _1637) * ((_1834 * _1838) + _534)) * _1858) * _1680);
    float _2011;
    float _2013;
    float _2015;
    if (_1721)
    {
        _2011 = _1947;
        _2013 = _1948;
        _2015 = _1949;
    }
    else
    {
        uint _2017 = _1643 + 2u;
        uint _2021 = _1643 + 10u;
        float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _418) * 0.949999988079071044921875);
        float _2036 = _2035 * _2035;
        float _2037 = cbLight._m0[_2017].x + _444;
        float _2038 = cbLight._m0[_2017].y + _445;
        float _2039 = cbLight._m0[_2017].z + _446;
        float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
        float _2044 = _2043 * _2037;
        float _2045 = _2043 * _2038;
        float _2046 = _2043 * _2039;
        float _2047 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2017].xyz));
        float _4041 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2051 = dot(vec3(_415, _416, _417), vec3(_2044, _2045, _2046));
        float _4052 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _2055 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2044, _2045, _2046));
        float _4063 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2059 = _2036 * _2036;
        float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
        float _2070 = exp2(log2(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * 5.0);
        float _2077 = 1.0 - _2036;
        float _2087 = (0.5 / (((_1813 * ((_2050 * _2077) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _2077) + _2036) * _2050))) * _2050;
        float _4074 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2089 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
        float _2090 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _2011 = (((((_2070 * _1835) + _531) * cbLight._m0[_2021].x) * _2089) * _2090) + _1947;
        _2013 = (((((_2070 * _1837) + _533) * cbLight._m0[_2021].y) * _2089) * _2090) + _1948;
        _2015 = (((((_2070 * _1838) + _534) * cbLight._m0[_2021].z) * _2089) * _2090) + _1949;
    }
    float _2125;
    float _2127;
    float _2129;
    if (_1739)
    {
        _2125 = _2011;
        _2127 = _2013;
        _2129 = _2015;
    }
    else
    {
        uint _2136 = _1643 + 3u;
        uint _2140 = _1643 + 11u;
        float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _418) * 0.949999988079071044921875);
        float _2155 = _2154 * _2154;
        float _2156 = cbLight._m0[_2136].x + _444;
        float _2157 = cbLight._m0[_2136].y + _445;
        float _2158 = cbLight._m0[_2136].z + _446;
        float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
        float _2163 = _2162 * _2156;
        float _2164 = _2162 * _2157;
        float _2165 = _2162 * _2158;
        float _2166 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2136].xyz));
        float _4090 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2170 = dot(vec3(_415, _416, _417), vec3(_2163, _2164, _2165));
        float _4101 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2174 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2163, _2164, _2165));
        float _4112 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2178 = _2155 * _2155;
        float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
        float _2189 = exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0);
        float _2196 = 1.0 - _2155;
        float _2206 = (0.5 / (((_1813 * ((_2169 * _2196) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _2196) + _2155) * _2169))) * _2169;
        float _4123 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2208 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
        float _2209 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _2125 = (((((_2189 * _1835) + _531) * cbLight._m0[_2140].x) * _2208) * _2209) + _2011;
        _2127 = (((((_2189 * _1837) + _533) * cbLight._m0[_2140].y) * _2208) * _2209) + _2013;
        _2129 = (((((_2189 * _1838) + _534) * cbLight._m0[_2140].z) * _2208) * _2209) + _2015;
    }
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    if (_1641.y == 0u)
    {
        float _2284 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2285 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2284;
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2284;
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2284;
        uvec4 _2299 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2300 = _2299.x;
        uint _2311 = uint((float(_2299.y) * floor(float(uint(cbSceneParam._m0[85u].y * _466) / _2300))) + floor(float(uint(cbSceneParam._m0[85u].x * _465) / _2300)));
        float _2321 = (log2(_2287 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2322 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        uint _2325 = uint(isnan(14.0) ? _2322 : (isnan(_2322) ? 14.0 : min(_2322, 14.0)));
        uvec4 _2330 = texelFetch(g_lightClusterGridBuffer, int(((_2325 << 2u) + (_2311 << 6u)) >> 2u));
        uint _2331 = _2330.x;
        uint _2332 = _2299.z;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        if (((((1u << ((_2332 >> 4u) & 15u)) + 4294967295u) & _2331) == 0u) || ((_2332 & 240u) == 0u))
        {
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
        }
        else
        {
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            uint _2589 = 0u;
            uint _2598;
            bool _2599;
            for (;;)
            {
                _2598 = texelFetch(g_lightClassification, int((((_2325 << 5u) + (_2311 << 9u)) + (_2589 << 2u)) >> 2u)).x;
                _2599 = _2598 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2599)
                {
                    frontier_phi_68_pred = _2585;
                    frontier_phi_68_pred_1 = _2588;
                    frontier_phi_68_pred_2 = _2587;
                    frontier_phi_68_pred_3 = _2586;
                    frontier_phi_68_pred_4 = _2584;
                    frontier_phi_68_pred_5 = _2583;
                }
                else
                {
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    uint _2734;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2598;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    for (;;)
                    {
                        uint _2738 = uint(findLSB(_2734)) + (_2589 << 5u);
                        uint _2735 = (_2734 + 4294967295u) & _2734;
                        uint _2740 = _2738 * 48u;
                        vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2740)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 3u)).x));
                        uint _2760 = (_2738 * 48u) + 4u;
                        vec4 _2773 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 3u)).x));
                        uint _2779 = (_2738 * 48u) + 8u;
                        vec3 _2790 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2779)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 2u)).x));
                        float _2794 = _2754.x - _2285;
                        float _2795 = _2754.y - _2286;
                        float _2796 = _2754.z - _2287;
                        float _2797 = dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796));
                        float _2800 = inversesqrt(_2797);
                        float _2801 = _2800 * _2794;
                        float _2802 = _2800 * _2795;
                        float _2803 = _2800 * _2796;
                        float _2804 = dot(vec3(_486, _489, _492), vec3(_2801, _2802, _2803));
                        float _2809 = 1.0 - (_2797 * _2754.w);
                        float _4149 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2810 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                        float _2811 = sqrt(_2797) * _2773.w;
                        float _2814 = 1.39999997615814208984375 / (_2811 + 1.39999997615814208984375);
                        float _2815 = _2814 * _2814;
                        float _2818 = ((1.0 - _2815) * _2804) + _2815;
                        float _2821 = _2811 * _2811;
                        float _2825 = ((isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))) * _2810) / ((_2821 * 0.699999988079071044921875) + 1.0);
                        float _2829 = (-0.0) - _2285;
                        float _2830 = (-0.0) - _2286;
                        float _2831 = (-0.0) - _2287;
                        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
                        float _2836 = _2835 * _2829;
                        float _2837 = _2835 * _2830;
                        float _2838 = _2835 * _2831;
                        float _2846 = exp2(log2(1.0 / ((_2821 * 3.5) + 5.0)) * 0.25);
                        float _2847 = 1.0 - _563;
                        float _2854 = sqrt(1.0 - ((1.0 - (_2847 * _2847)) * (1.0 - (_2846 * _2846))));
                        float _2855 = _2854 * _2854;
                        float _2856 = _2855 * _2855;
                        float _2857 = _2836 + _2801;
                        float _2858 = _2837 + _2802;
                        float _2859 = _2838 + _2803;
                        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
                        float _2867 = dot(vec3(_486, _489, _492), vec3(_2836, _2837, _2838));
                        float _4165 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2870 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2871 = dot(vec3(_486, _489, _492), vec3(_2863 * _2857, _2863 * _2858, _2863 * _2859));
                        float _4176 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2874 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2878 = ((_2874 * _2874) * (_2856 + (-1.0))) + 1.0;
                        float _2879 = _2814 * _2855;
                        float _2880 = _2879 * _2879;
                        float _2883 = ((1.0 - _2880) * _2804) + _2880;
                        float _4187 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2884 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2885 = 1.0 - _2855;
                        float _2895 = (0.5 / (((_2884 * ((_2870 * _2885) + _2855)) + 9.9999999392252902907785028219223e-09) + (((_2884 * _2885) + _2855) * _2870))) * _2884;
                        float _4198 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2906 = (((_2856 * 3.1415927410125732421875) * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) / ((_2878 * _2878) * ((_2821 * 2.1991131305694580078125) + 3.141590118408203125))) * _2810;
                        _2658 = (_2825 * _2773.x) + _2731;
                        _2659 = (_2825 * _2773.y) + _2732;
                        _2660 = (_2825 * _2773.z) + _2733;
                        _2655 = (_2906 * _2790.x) + _2728;
                        _2656 = (_2906 * _2790.y) + _2729;
                        _2657 = (_2906 * _2790.z) + _2730;
                        if (_2735 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2660;
                            _2734 = _2735;
                        }
                    }
                    frontier_phi_68_pred = _2657;
                    frontier_phi_68_pred_1 = _2660;
                    frontier_phi_68_pred_2 = _2659;
                    frontier_phi_68_pred_3 = _2658;
                    frontier_phi_68_pred_4 = _2656;
                    frontier_phi_68_pred_5 = _2655;
                }
                _2436 = frontier_phi_68_pred;
                _2442 = frontier_phi_68_pred_1;
                _2440 = frontier_phi_68_pred_2;
                _2438 = frontier_phi_68_pred_3;
                _2434 = frontier_phi_68_pred_4;
                _2432 = frontier_phi_68_pred_5;
                uint _2590 = _2589 + 1u;
                if (_2590 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2583 = _2432;
                    _2584 = _2434;
                    _2585 = _2436;
                    _2586 = _2438;
                    _2587 = _2440;
                    _2588 = _2442;
                    _2589 = _2590;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
        }
        uvec4 _2445 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2446 = _2445.z;
        uint _2448 = (_2446 >> 8u) & 15u;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        if (((4294967295u << _2448) & _2331) == 0u)
        {
            _2551 = _2431;
            _2553 = _2433;
            _2555 = _2435;
            _2557 = _2437;
            _2559 = _2439;
            _2561 = _2441;
        }
        else
        {
            float _2576 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
            float _2577 = _2576 * _2285;
            float _2578 = _2576 * _2286;
            float _2579 = _2576 * _2287;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2448 < ((_2446 >> 12u) & 15u))
            {
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2711 = _2431;
                float _2712 = _2433;
                float _2713 = _2435;
                float _2714 = _2437;
                float _2715 = _2439;
                float _2716 = _2441;
                uint _2717 = _2448;
                uint _2726;
                bool _2727;
                for (;;)
                {
                    _2726 = texelFetch(g_lightClassification, int((((_2325 << 5u) + (_2311 << 9u)) + (_2717 << 2u)) >> 2u)).x;
                    _2727 = _2726 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2727)
                    {
                        frontier_phi_79_pred = _2716;
                        frontier_phi_79_pred_1 = _2715;
                        frontier_phi_79_pred_2 = _2714;
                        frontier_phi_79_pred_3 = _2713;
                        frontier_phi_79_pred_4 = _2712;
                        frontier_phi_79_pred_5 = _2711;
                    }
                    else
                    {
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _2933 = _2711;
                        float _2934 = _2712;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        float _2937 = _2715;
                        float _2938 = _2716;
                        uint _2939 = _2726;
                        uint _2940;
                        vec4 _2965;
                        float _2966;
                        vec4 _2981;
                        vec3 _2993;
                        vec4 _3009;
                        vec4 _3025;
                        float _3072;
                        bool _3073;
                        for (;;)
                        {
                            uint _2950 = ((_2717 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2939));
                            _2940 = (_2939 + 4294967295u) & _2939;
                            uint _2952 = _2950 * 40u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            _2966 = _2965.w;
                            uint _2968 = (_2950 * 40u) + 4u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2983 = (_2950 * 40u) + 8u;
                            _2993 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x));
                            uint _2996 = (_2950 * 40u) + 16u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3012 = (_2950 * 40u) + 20u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3028 = (_2950 * 40u) + 24u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3047 = (_2950 * 40u) + 28u;
                            vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            _3072 = fma(_2287, _3060.z, fma(_2286, _3060.y, _3060.x * _2285)) + _3060.w;
                            _3073 = !((fma(_2287, _3041.z, fma(_2286, _3041.y, _3041.x * _2285)) + _3041.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3073)
                            {
                                float _3100 = _2965.x - _2285;
                                float _3101 = _2965.y - _2286;
                                float _3102 = _2965.z - _2287;
                                float _3103 = dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102));
                                float _3106 = inversesqrt(_3103);
                                float _3107 = _3106 * _3100;
                                float _3108 = _3106 * _3101;
                                float _3109 = _3106 * _3102;
                                float _3113 = 1.0 - (_3103 / (_2966 * _2966));
                                float _4209 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3114 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3118 = sqrt(_3103) * _2981.w;
                                float _3120 = 1.39999997615814208984375 / (_3118 + 1.39999997615814208984375);
                                float _3121 = _3120 * _3120;
                                float _3124 = ((1.0 - _3121) * dot(vec3(_3107, _3108, _3109), vec3(_486, _489, _492))) + _3121;
                                float _3127 = _3118 * _3118;
                                float _3131 = (fma(_2287, _3009.z, fma(_2286, _3009.y, _3009.x * _2285)) + _3009.w) / _3072;
                                float _3132 = (fma(_2287, _3025.z, fma(_2286, _3025.y, _3025.x * _2285)) + _3025.w) / _3072;
                                float _3136 = 1.0 - dot(vec2(_3131, _3132), vec2(_3131, _3132));
                                float _4225 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3138 = _3137 * (((isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))) * _3114) / ((_3127 * 0.699999988079071044921875) + 1.0));
                                float _3150 = exp2(log2(1.0 / ((_3127 * 3.5) + 5.0)) * 0.25);
                                float _3151 = 1.0 - _563;
                                float _3158 = sqrt(1.0 - ((1.0 - (_3151 * _3151)) * (1.0 - (_3150 * _3150))));
                                float _3159 = _3158 * _3158;
                                float _3160 = _3159 * _3159;
                                float _3161 = _3107 - _2577;
                                float _3162 = _3108 - _2578;
                                float _3163 = _3109 - _2579;
                                float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                                float _3171 = dot(vec3(_486, _489, _492), vec3((-0.0) - _2577, (-0.0) - _2578, (-0.0) - _2579));
                                float _4236 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3174 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3175 = dot(vec3(_486, _489, _492), vec3(_3167 * _3161, _3167 * _3162, _3167 * _3163));
                                float _4247 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3178 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3182 = ((_3178 * _3178) * (_3160 + (-1.0))) + 1.0;
                                float _3183 = _3120 * _3159;
                                float _3184 = _3183 * _3183;
                                float _3190 = ((1.0 - _3184) * dot(vec3(_486, _489, _492), vec3(_3107, _3108, _3109))) + _3184;
                                float _4258 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3191 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3192 = 1.0 - _3159;
                                float _3202 = (0.5 / (((_3191 * ((_3174 * _3192) + _3159)) + 9.9999999392252902907785028219223e-09) + (((_3191 * _3192) + _3159) * _3174))) * _3191;
                                float _4269 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3212 = (_3137 * _3114) * (((_3160 * 3.1415927410125732421875) * (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) / ((_3182 * _3182) * ((_3127 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3138 * _2981.z;
                                frontier_phi_85_pred_1 = _3138 * _2981.y;
                                frontier_phi_85_pred_2 = _3138 * _2981.x;
                                frontier_phi_85_pred_3 = _3212 * _2993.z;
                                frontier_phi_85_pred_4 = _3212 * _2993.y;
                                frontier_phi_85_pred_5 = _3212 * _2993.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3221 = frontier_phi_85_pred;
                            _3220 = frontier_phi_85_pred_1;
                            _3219 = frontier_phi_85_pred_2;
                            _3218 = frontier_phi_85_pred_3;
                            _3217 = frontier_phi_85_pred_4;
                            _3216 = frontier_phi_85_pred_5;
                            _2923 = _3219 + _2936;
                            _2924 = _3220 + _2937;
                            _2925 = _3221 + _2938;
                            _2920 = _3216 + _2933;
                            _2921 = _3217 + _2934;
                            _2922 = _3218 + _2935;
                            if (_2940 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2940;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2925;
                        frontier_phi_79_pred_1 = _2924;
                        frontier_phi_79_pred_2 = _2923;
                        frontier_phi_79_pred_3 = _2922;
                        frontier_phi_79_pred_4 = _2921;
                        frontier_phi_79_pred_5 = _2920;
                    }
                    _2562 = frontier_phi_79_pred;
                    _2560 = frontier_phi_79_pred_1;
                    _2558 = frontier_phi_79_pred_2;
                    _2556 = frontier_phi_79_pred_3;
                    _2554 = frontier_phi_79_pred_4;
                    _2552 = frontier_phi_79_pred_5;
                    uint _2718 = _2717 + 1u;
                    if (_2718 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2711 = _2552;
                        _2712 = _2554;
                        _2713 = _2556;
                        _2714 = _2558;
                        _2715 = _2560;
                        _2716 = _2562;
                        _2717 = _2718;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2558;
                frontier_phi_60_61_ladder_1 = _2562;
                frontier_phi_60_61_ladder_2 = _2560;
                frontier_phi_60_61_ladder_3 = _2556;
                frontier_phi_60_61_ladder_4 = _2554;
                frontier_phi_60_61_ladder_5 = _2552;
            }
            else
            {
                frontier_phi_60_61_ladder = _2437;
                frontier_phi_60_61_ladder_1 = _2441;
                frontier_phi_60_61_ladder_2 = _2439;
                frontier_phi_60_61_ladder_3 = _2435;
                frontier_phi_60_61_ladder_4 = _2433;
                frontier_phi_60_61_ladder_5 = _2431;
            }
            _2551 = frontier_phi_60_61_ladder_5;
            _2553 = frontier_phi_60_61_ladder_4;
            _2555 = frontier_phi_60_61_ladder_3;
            _2557 = frontier_phi_60_61_ladder;
            _2559 = frontier_phi_60_61_ladder_2;
            _2561 = frontier_phi_60_61_ladder_1;
        }
        float _2566 = isnan(1.0) ? _547 : (isnan(_547) ? 1.0 : min(_547, 1.0));
        _2343 = (_2566 * _2557) + _1777;
        _2345 = (_2566 * _2559) + _1779;
        _2347 = (_2566 * _2561) + _1781;
        _2349 = ((_2551 * _531) * _2566) + _2125;
        _2351 = ((_2553 * _533) * _2566) + _2127;
        _2353 = ((_2555 * _534) * _2566) + _2129;
    }
    else
    {
        _2343 = _1777;
        _2345 = _1779;
        _2347 = _1781;
        _2349 = _2125;
        _2351 = _2127;
        _2353 = _2129;
    }
    float _4285 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _4296 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _4307 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _2370 = ((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2343 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _547))) + ((_2349 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _1388)) * cbPerFrame._m0[3u].x);
    float _2371 = ((isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2345 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _547))) + ((_2351 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1388)) * cbPerFrame._m0[3u].x);
    float _2372 = ((isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2347 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _547))) + ((_2353 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1388)) * cbPerFrame._m0[3u].x);
    uint _2373 = _505 + 6u;
    float _2381 = _465 / cbSceneParam._m0[86u].x;
    float _2382 = _466 / cbSceneParam._m0[86u].y;
    vec4 _2396 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2381, _2382, (log2((isnan(cbSceneParam._m0[77u].w) ? _439 : (isnan(_439) ? cbSceneParam._m0[77u].w : min(_439, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2398 = _2396.x;
    float _2399 = _2396.y;
    float _2400 = _2396.z;
    float _2401 = _2396.w;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    if (_439 > cbSceneParam._m0[78u].w)
    {
        float _2456 = isnan(_439) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _439 : min(cbSceneParam._m0[80u].w, _439));
        float _2457 = _2456 / _439;
        float _2468 = _2457 * _273;
        float _2469 = _274 * _2457;
        float _2470 = (-0.0) - _2469;
        float _2471 = _2457 * _275;
        float _2473 = (cbSceneParam._m0[77u].w * _2470) / _2456;
        float _2474 = _2473 + cbSceneParam._m0[79u].w;
        float _2475 = cbSceneParam._m0[79u].w - _2469;
        float _2481 = sqrt(((_2468 * _2468) + (_2469 * _2469)) + (_2471 * _2471));
        float _2484 = (1.0 - (cbSceneParam._m0[77u].w / _2456)) * _2481;
        float _2489 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2491 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2668;
        if (abs((_2470 - _2473) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2668 = ((((_2474 > 0.0) ? exp2(_2489 * _2474) : (2.0 - exp2(_2491 * _2474))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2484;
        }
        else
        {
            float _2612 = 1.0 / cbSceneParam._m0[80u].x;
            float _2613 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : max(_2474, _2475));
            float _2614 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : min(_2474, _2475));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            float _2624 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : min(_2614, 0.0));
            _2668 = ((abs(_2481 / _2470) * cbSceneParam._m0[80u].y) * ((((_2623 - _2624) * 2.0) - ((exp2(_2489 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0)))) - exp2(_2489 * (isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0))))) * _2612)) - ((exp2(_2491 * _2623) - exp2(_2491 * _2624)) * _2612))) + (_2484 * cbSceneParam._m0[80u].z);
        }
        vec4 _2670 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2381, _2382, 1.0), 0.0);
        float _2679 = exp2((_2668 * (-1.44269502162933349609375)) * (1.0 - _2670.w));
        float _2680 = log2(_2679);
        float _2696 = log2(_2401);
        _2493 = (exp2(_2696 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].x)) * _2670.x) / cbSceneParam._m0[78u].x)) + _2398;
        _2495 = (exp2(_2696 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].y)) * _2670.y) / cbSceneParam._m0[78u].y)) + _2399;
        _2497 = (exp2(_2696 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].z)) * _2670.z) / cbSceneParam._m0[78u].z)) + _2400;
        _2499 = _2679 * _2401;
    }
    else
    {
        _2493 = _2398;
        _2495 = _2399;
        _2497 = _2400;
        _2499 = _2401;
    }
    bool _2706;
    vec4 _2509;
    vec4 _2531;
    float _2533;
    float _2537;
    float _2538;
    float _2539;
    float _2540;
    bool _2550;
    for (;;)
    {
        _2509 = cbMatDynParam._m0[0u];
        float _2511 = roundEven(_2509.y);
        bool _2512 = _2511 == 3.0;
        float _2513 = log2(_2499);
        float _2520 = exp2(_2513 * cbSceneParam._m0[78u].x) * _2370;
        float _2521 = exp2(_2513 * cbSceneParam._m0[78u].y) * _2371;
        float _2522 = exp2(_2513 * cbSceneParam._m0[78u].z) * _2372;
        float _2529 = _453 + (-0.5);
        _2531 = cbMtdParam._m0[1u];
        _2533 = _2531.y * _2529;
        float _2536 = (_2511 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2537 = _2536 * (_2512 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2493)));
        _2538 = _2536 * (_2512 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2495)));
        _2539 = _2536 * (_2512 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2497)));
        _2540 = _2529 * 0.999000012874603271484375;
        _2550 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2550)
        {
            if ((cbInstanceData._m0[_505 + 7u].x + _2540) < 0.5)
            {
                _2706 = true;
                break;
            }
        }
        uint _2647 = _507 + uint(_2509.w);
        if ((cbInstanceData._m0[_2647].w < 1.0) && ((cbInstanceData._m0[_2647].w + _2540) < 0.5))
        {
            _2706 = true;
            break;
        }
        if ((_2533 + _346) < _2531.x)
        {
            _2706 = true;
            break;
        }
        _2706 = false;
        break;
    }
    float _2911;
    if (_2706)
    {
        discard_state = true;
        _2911 = 0.0;
    }
    else
    {
        _2911 = cbInstanceData._m0[_2373].w;
    }
    SV_Target.x = _2537;
    SV_Target.y = _2538;
    SV_Target.z = _2539;
    SV_Target.w = _2911;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2373].w;
    discard_exit();
}


