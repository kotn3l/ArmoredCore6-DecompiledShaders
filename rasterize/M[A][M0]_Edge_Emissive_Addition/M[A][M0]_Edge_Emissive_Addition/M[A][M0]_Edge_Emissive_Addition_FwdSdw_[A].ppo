#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Emissive_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Edge_Emissive_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _780;
float _3253;
float _3254;
float _3255;
float _3256;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    float _179;
    float _180;
    float _181;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
    }
    else
    {
        _179 = _172;
        _180 = _173;
        _181 = _174;
    }
    vec4 _201 = texture(sampler2D(M_A_M0_Edge_Emissive_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _206 = _201.z;
    float _207 = _201.x * cbMtdParam._m0[9u].x;
    float _208 = _201.y * cbMtdParam._m0[9u].y;
    float _209 = _206 * cbMtdParam._m0[9u].z;
    vec4 _231 = texture(sampler2D(M_A_M0_Edge_Emissive_Addition_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _239 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _240 = _239 * _179;
    float _241 = _239 * _180;
    float _242 = _239 * _181;
    float _3265 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _3276 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _3287 = isnan(0.0) ? _209 : (isnan(_209) ? 0.0 : max(_209, 0.0));
    float _262 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _303 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _313 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _303);
    float _314 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _303);
    float _315 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _303);
    float _319 = inversesqrt(dot(vec3(_313, _314, _315), vec3(_313, _314, _315)));
    float _320 = _313 * _319;
    float _321 = _314 * _319;
    float _322 = _315 * _319;
    vec4 _327 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _329 = _327.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _459 = sqrt(((_313 * _313) + (_314 * _314)) + (_315 * _315));
        float _465 = (cbMatDynParam._m0[5u].x * _459) + cbMatDynParam._m0[5u].y;
        float _3298 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
        float _466 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
        float _470 = (cbMatDynParam._m0[5u].z * _459) + cbMatDynParam._m0[5u].w;
        float _3309 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) - _466)) + _466) < ((_329 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _341 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _342 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _362 = fma(_242, cbSceneParam._m0[5u].z, fma(_241, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _240));
    float _365 = fma(_242, cbSceneParam._m0[6u].z, fma(_241, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _240));
    float _368 = fma(_242, cbSceneParam._m0[7u].z, fma(_241, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _240));
    uint _381 = uint(roundEven(NORMAL.w)) * 13u;
    uint _383 = _381 + 9u;
    uint _384 = _383 + uint(cbMatDynParam._m0[0u].w);
    float _390 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0)))) * cbInstanceData._m0[_384].x;
    float _391 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0)))) * cbInstanceData._m0[_384].y;
    float _392 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0)))) * cbInstanceData._m0[_384].z;
    float _3320 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _393 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _3331 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _394 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _395 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    vec4 _404 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _341, cbSceneParam._m0[86u].y * _342));
    float _407 = _404.x * TEXCOORD.z;
    float _408 = dot(vec3(_240, _241, _242), vec3(_320, _321, _322));
    float _411 = _408 * 2.0;
    float _416 = (_411 * _240) - _320;
    float _417 = (_411 * _241) - _321;
    float _418 = (_411 * _242) - _322;
    float _440 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _444 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _448 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _779;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _504 = fma(_448, cbModelParam._m0[26u].z, fma(_444, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _440));
        float _508 = fma(_448, cbModelParam._m0[27u].z, fma(_444, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _440));
        float _512 = fma(_448, cbModelParam._m0[28u].z, fma(_444, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _440));
        float _537 = _440 + _240;
        float _538 = _444 + _241;
        float _539 = _448 + _242;
        float _549 = fma(_539, cbModelParam._m0[26u].z, fma(_538, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537)) - _504;
        float _550 = fma(_539, cbModelParam._m0[27u].z, fma(_538, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537)) - _508;
        float _551 = fma(_539, cbModelParam._m0[28u].z, fma(_538, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537)) - _512;
        float _555 = inversesqrt(dot(vec3(_549, _550, _551), vec3(_549, _550, _551)));
        float _568 = ((_555 * _549) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_504 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _569 = ((_555 * _550) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_508 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _570 = ((_555 * _551) / cbModelParam._m0[34u].z) + ((((((_512 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _573 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_568, _569, _570), 0.0);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_568, _569, _570), 0.0);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_568, _569, _570), 0.0);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_568, _569, _570), 0.0);
        float _607 = exp2((_573.w + (-0.5)) * 20.0) * 2.0;
        float _608 = _607 * (_573.x + (-0.5));
        float _609 = _607 * (_573.y + (-0.5));
        float _610 = _607 * (_573.z + (-0.5));
        float _617 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _618 = _617 * (_580.x + (-0.5));
        float _619 = _617 * (_580.y + (-0.5));
        float _620 = _617 * (_580.z + (-0.5));
        float _627 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _628 = _627 * (_587.x + (-0.5));
        float _629 = _627 * (_587.y + (-0.5));
        float _630 = _627 * (_587.z + (-0.5));
        float _637 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _638 = _637 * (_594.x + (-0.5));
        float _639 = _637 * (_594.y + (-0.5));
        float _640 = _637 * (_594.z + (-0.5));
        float _641 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _642 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _643 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _644 = _608 * 0.5;
        float _645 = _618 * 0.5;
        float _646 = _628 * 0.5;
        float _647 = dot(vec3(_644, _645, _646), vec3(_644, _645, _646));
        float _652 = (_647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_647);
        float _661 = (dot(vec3(_240, _241, _242), vec3(_652 * _644, _652 * _645, _652 * _646)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _671 = sqrt(((_645 * _645) + (_644 * _644)) + (_646 * _646)) / (_641 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _672 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _673 = _672 * 2.0;
        float _677 = (1.0 - _672) / (_672 + 1.0);
        float _3390 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _687 = ((((1.0 - _678) * (_673 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_673 + 1.0))) + _678) * _641;
        float _688 = _609 * 0.5;
        float _689 = _619 * 0.5;
        float _690 = _629 * 0.5;
        float _691 = dot(vec3(_688, _689, _690), vec3(_688, _689, _690));
        float _696 = (_691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_691);
        float _704 = (dot(vec3(_240, _241, _242), vec3(_696 * _688, _696 * _689, _696 * _690)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _713 = sqrt(((_689 * _689) + (_688 * _688)) + (_690 * _690)) / (_642 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _715 = _714 * 2.0;
        float _719 = (1.0 - _714) / (_714 + 1.0);
        float _3423 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _729 = ((((1.0 - _720) * (_715 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_715 + 1.0))) + _720) * _642;
        float _730 = _610 * 0.5;
        float _731 = _620 * 0.5;
        float _732 = _630 * 0.5;
        float _733 = dot(vec3(_730, _731, _732), vec3(_730, _731, _732));
        float _738 = (_733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_733);
        float _746 = (dot(vec3(_240, _241, _242), vec3(_738 * _730, _738 * _731, _738 * _732)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _755 = sqrt(((_731 * _731) + (_730 * _730)) + (_732 * _732)) / (_643 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _757 = _756 * 2.0;
        float _761 = (1.0 - _756) / (_756 + 1.0);
        float _3456 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _771 = ((((1.0 - _762) * (_757 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_757 + 1.0))) + _762) * _643;
        _779 = _610;
        _781 = _609;
        _782 = _608;
        _783 = _620;
        _784 = _619;
        _785 = _618;
        _786 = _630;
        _787 = _629;
        _788 = _628;
        _789 = _643;
        _790 = _642;
        _791 = _641;
        _792 = cbModelParam._m0[36u].z * (isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0)));
        _793 = cbModelParam._m0[36u].z * (isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0)));
        _794 = cbModelParam._m0[36u].z * (isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)));
    }
    else
    {
        _779 = _780;
        _781 = _780;
        _782 = _780;
        _783 = _780;
        _784 = _780;
        _785 = _780;
        _786 = _780;
        _787 = _780;
        _788 = _780;
        _789 = _780;
        _790 = _780;
        _791 = _780;
        _792 = 0.0;
        _793 = 0.0;
        _794 = 0.0;
    }
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _823 = fma(_448, cbModelParam._m0[30u].z, fma(_444, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _440));
        float _827 = fma(_448, cbModelParam._m0[31u].z, fma(_444, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _440));
        float _831 = fma(_448, cbModelParam._m0[32u].z, fma(_444, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _440));
        float _854 = _440 + _240;
        float _855 = _444 + _241;
        float _856 = _448 + _242;
        float _866 = fma(_856, cbModelParam._m0[30u].z, fma(_855, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _854)) - _823;
        float _867 = fma(_856, cbModelParam._m0[31u].z, fma(_855, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _854)) - _827;
        float _868 = fma(_856, cbModelParam._m0[32u].z, fma(_855, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _854)) - _831;
        float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
        float _885 = ((_872 * _866) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_823 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_872 * _867) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_827 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_872 * _868) / cbModelParam._m0[35u].z) + ((((((_831 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        float _922 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_889.x + (-0.5));
        float _924 = _922 * (_889.y + (-0.5));
        float _925 = _922 * (_889.z + (-0.5));
        float _932 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_896.x + (-0.5));
        float _934 = _932 * (_896.y + (-0.5));
        float _935 = _932 * (_896.z + (-0.5));
        float _942 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_903.x + (-0.5));
        float _944 = _942 * (_903.y + (-0.5));
        float _945 = _942 * (_903.z + (-0.5));
        float _952 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_910.x + (-0.5));
        float _954 = _952 * (_910.y + (-0.5));
        float _955 = _952 * (_910.z + (-0.5));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = _923 * 0.5;
        float _960 = _933 * 0.5;
        float _961 = _943 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_240, _241, _242), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3519 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_986 + 1.0))) + _991) * _956;
        float _1001 = _924 * 0.5;
        float _1002 = _934 * 0.5;
        float _1003 = _944 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_240, _241, _242), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3552 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1028 + 1.0))) + _1033) * _957;
        float _1043 = _925 * 0.5;
        float _1044 = _935 * 0.5;
        float _1045 = _945 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_240, _241, _242), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3585 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1070 + 1.0))) + _1075) * _958;
        _1092 = _925;
        _1093 = _924;
        _1094 = _923;
        _1095 = _935;
        _1096 = _934;
        _1097 = _933;
        _1098 = _945;
        _1099 = _944;
        _1100 = _943;
        _1101 = _958;
        _1102 = _957;
        _1103 = _956;
        _1104 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1105 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
        _1106 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
    }
    else
    {
        _1092 = _780;
        _1093 = _780;
        _1094 = _780;
        _1095 = _780;
        _1096 = _780;
        _1097 = _780;
        _1098 = _780;
        _1099 = _780;
        _1100 = _780;
        _1101 = _780;
        _1102 = _780;
        _1103 = _780;
        _1104 = 0.0;
        _1105 = 0.0;
        _1106 = 0.0;
    }
    float _1116 = (cbModelParam._m0[1u].x * (_1104 - _792)) + _792;
    float _1117 = (cbModelParam._m0[1u].x * (_1105 - _793)) + _793;
    float _1118 = (cbModelParam._m0[1u].x * (_1106 - _794)) + _794;
    float _1139 = fma(_1118, cbSceneParam._m0[89u].z, fma(_1117, cbSceneParam._m0[89u].y, _1116 * cbSceneParam._m0[89u].x));
    float _1142 = fma(_1118, cbSceneParam._m0[90u].z, fma(_1117, cbSceneParam._m0[90u].y, _1116 * cbSceneParam._m0[90u].x));
    float _1145 = fma(_1118, cbSceneParam._m0[91u].z, fma(_1117, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1116));
    float _1160 = _416 * 0.5;
    float _1161 = _417 * 0.5;
    float _1162 = _418 * 0.5;
    float _1163 = dot(vec4(_1160, _1161, _1162, 1.0), vec4(_1094, _1097, _1100, _1103));
    float _1166 = dot(vec4(_1160, _1161, _1162, 1.0), vec4(_1093, _1096, _1099, _1102));
    float _1169 = dot(vec4(_1160, _1161, _1162, 1.0), vec4(_1092, _1095, _1098, _1101));
    float _1203;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1176 = dot(vec4(_1160, _1161, _1162, 1.0), vec4(_779, _783, _786, _789));
        float _1180 = dot(vec4(_1160, _1161, _1162, 1.0), vec4(_781, _784, _787, _790));
        float _1184 = dot(vec4(_1160, _1161, _1162, 1.0), vec4(_782, _785, _788, _791));
        float _1191 = dot(vec4(cbModelParam._m0[39u]), vec4(_1160, _1161, _1162, 1.0));
        _1203 = dot(vec3(isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)), isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)), isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1191) ? 0.0 : (isnan(0.0) ? _1191 : max(0.0, _1191))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1203 = 1.0;
    }
    float _1214;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1205 = dot(vec4(cbModelParam._m0[40u]), vec4(_1160, _1161, _1162, 1.0));
        _1214 = dot(vec3(isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)), isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1205) ? 0.0 : (isnan(0.0) ? _1205 : max(0.0, _1205))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1214 = 1.0;
    }
    float _1218 = (_1214 * cbModelParam._m0[1u].x) + (_1203 * (1.0 - cbModelParam._m0[1u].x));
    float _1227 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1309;
    float _1311;
    float _1313;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1276 = fma(_448, cbModelParam._m0[13u].z, fma(_444, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _440)) + cbModelParam._m0[13u].w;
        float _1280 = fma(_448, cbModelParam._m0[14u].z, fma(_444, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _440)) + cbModelParam._m0[14u].w;
        float _1284 = fma(_448, cbModelParam._m0[15u].z, fma(_444, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _440)) + cbModelParam._m0[15u].w;
        float _1287 = fma(_418, cbModelParam._m0[13u].z, fma(_417, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _416));
        float _1290 = fma(_418, cbModelParam._m0[14u].z, fma(_417, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _416));
        float _1293 = fma(_418, cbModelParam._m0[15u].z, fma(_417, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _416));
        float _1319;
        if (_1287 > 0.0)
        {
            _1319 = abs((1.0 - _1276) / _1287);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1287 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1276 + 1.0) / _1287);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1319 = frontier_phi_19_17_ladder;
        }
        float _1493;
        if (_1290 > 0.0)
        {
            _1493 = abs((1.0 - _1280) / _1290);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1290 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1280 + 1.0) / _1290);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1493 = frontier_phi_28_24_ladder;
        }
        float _1790;
        if (_1293 > 0.0)
        {
            _1790 = abs((1.0 - _1284) / _1293);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1293 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1284 + 1.0) / _1293);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1790 = frontier_phi_40_35_ladder;
        }
        float _1792 = isnan(_1493) ? _1319 : (isnan(_1319) ? _1493 : min(_1319, _1493));
        float _1793 = isnan(_1790) ? _1792 : (isnan(_1792) ? _1790 : min(_1792, _1790));
        float _1797 = (_1793 * _1287) + _1276;
        float _1798 = (_1793 * _1290) + _1280;
        float _1799 = (_1793 * _1293) + _1284;
        float _1800 = _1793 * 9.9999997473787516355514526367188e-05;
        float _1802 = (-1.0) - _1800;
        float _1804 = _1800 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1799 > _1804) || ((_1799 < _1802) || ((_1798 > _1804) || ((_1798 < _1802) || ((_1797 < _1802) || (_1797 > _1804))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1944 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1799, cbModelParam._m0[9u].z, fma(_1798, cbModelParam._m0[9u].y, _1797 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1799, cbModelParam._m0[10u].z, fma(_1798, cbModelParam._m0[10u].y, _1797 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1799, cbModelParam._m0[11u].z, fma(_1798, cbModelParam._m0[11u].y, _1797 * cbModelParam._m0[11u].x))), _1227);
            frontier_phi_18_40_ladder = _1944.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1944.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1944.x * cbModelParam._m0[1u].y;
        }
        _1309 = frontier_phi_18_40_ladder_2;
        _1311 = frontier_phi_18_40_ladder_1;
        _1313 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1297 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_416, _417, _418), _1227);
        _1309 = _1297.x * cbModelParam._m0[1u].y;
        _1311 = _1297.y * cbModelParam._m0[1u].y;
        _1313 = _1297.z * cbModelParam._m0[1u].y;
    }
    float _1316 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1409;
    float _1411;
    float _1413;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1373 = fma(_448, cbModelParam._m0[21u].z, fma(_444, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _440)) + cbModelParam._m0[21u].w;
        float _1377 = fma(_448, cbModelParam._m0[22u].z, fma(_444, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _440)) + cbModelParam._m0[22u].w;
        float _1381 = fma(_448, cbModelParam._m0[23u].z, fma(_444, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _440)) + cbModelParam._m0[23u].w;
        float _1384 = fma(_418, cbModelParam._m0[21u].z, fma(_417, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _416));
        float _1387 = fma(_418, cbModelParam._m0[22u].z, fma(_417, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _416));
        float _1390 = fma(_418, cbModelParam._m0[23u].z, fma(_417, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _416));
        float _1498;
        if (_1384 > 0.0)
        {
            _1498 = abs((1.0 - _1373) / _1384);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1373 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1498 = frontier_phi_30_26_ladder;
        }
        float _1817;
        if (_1387 > 0.0)
        {
            _1817 = abs((1.0 - _1377) / _1387);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1377 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1817 = frontier_phi_42_37_ladder;
        }
        float _2090;
        if (_1390 > 0.0)
        {
            _2090 = abs((1.0 - _1381) / _1390);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1381 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2090 = frontier_phi_52_49_ladder;
        }
        float _2092 = isnan(_1817) ? _1498 : (isnan(_1498) ? _1817 : min(_1498, _1817));
        float _2093 = isnan(_2090) ? _2092 : (isnan(_2092) ? _2090 : min(_2092, _2090));
        float _2097 = (_2093 * _1384) + _1373;
        float _2098 = (_2093 * _1387) + _1377;
        float _2099 = (_2093 * _1390) + _1381;
        float _2100 = _2093 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2100;
        float _2103 = _2100 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2099 > _2103) || ((_2099 < _2101) || ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 < _2101) || (_2097 > _2103))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2190 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2099, cbModelParam._m0[17u].z, fma(_2098, cbModelParam._m0[17u].y, _2097 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2099, cbModelParam._m0[18u].z, fma(_2098, cbModelParam._m0[18u].y, _2097 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2099, cbModelParam._m0[19u].z, fma(_2098, cbModelParam._m0[19u].y, _2097 * cbModelParam._m0[19u].x))), _1316);
            frontier_phi_27_52_ladder = _2190.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2190.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2190.x * cbModelParam._m0[1u].z;
        }
        _1409 = frontier_phi_27_52_ladder_2;
        _1411 = frontier_phi_27_52_ladder_1;
        _1413 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1393 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_416, _417, _418), _1316);
        _1409 = _1393.x * cbModelParam._m0[1u].z;
        _1411 = _1393.y * cbModelParam._m0[1u].z;
        _1413 = _1393.z * cbModelParam._m0[1u].z;
    }
    float _1425 = _407 * 0.01200000010430812835693359375;
    float _1427 = _1425 * ((cbModelParam._m0[1u].w * (_1409 - _1309)) + _1309);
    float _1428 = _1425 * ((cbModelParam._m0[1u].w * (_1411 - _1311)) + _1311);
    float _1429 = _1425 * ((cbModelParam._m0[1u].w * (_1413 - _1313)) + _1313);
    float _1432 = fma(_1429, cbSceneParam._m0[89u].z, fma(_1428, cbSceneParam._m0[89u].y, _1427 * cbSceneParam._m0[89u].x));
    float _1435 = fma(_1429, cbSceneParam._m0[90u].z, fma(_1428, cbSceneParam._m0[90u].y, _1427 * cbSceneParam._m0[90u].x));
    float _1438 = fma(_1429, cbSceneParam._m0[91u].z, fma(_1428, cbSceneParam._m0[91u].y, _1427 * cbSceneParam._m0[91u].x));
    float _1472 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1476 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1480 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1484 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1485 = _1472 / _1484;
    float _1486 = _1476 / _1484;
    float _1487 = _1480 / _1484;
    float _1634;
    float _1635;
    float _1636;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1514 = ((uint(_1487 > cbSceneParam._m0[59u].y) + uint(_1487 > cbSceneParam._m0[59u].x)) + uint(_1487 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1515 = _1514 + 43u;
        uint _1523 = _1514 + 44u;
        uint _1531 = _1514 + 45u;
        uint _1539 = _1514 + 46u;
        float _1550 = fma(_1484, cbSceneParam._m0[_1515].w, fma(_1480, cbSceneParam._m0[_1515].z, fma(_1476, cbSceneParam._m0[_1515].y, _1472 * cbSceneParam._m0[_1515].x)));
        float _1554 = fma(_1484, cbSceneParam._m0[_1523].w, fma(_1480, cbSceneParam._m0[_1523].z, fma(_1476, cbSceneParam._m0[_1523].y, _1472 * cbSceneParam._m0[_1523].x)));
        float _1562 = fma(_1484, cbSceneParam._m0[_1539].w, fma(_1480, cbSceneParam._m0[_1539].z, fma(_1476, cbSceneParam._m0[_1539].y, _1472 * cbSceneParam._m0[_1539].x)));
        float _1567 = cbSceneParam._m0[33u].z * _1562;
        float _1569 = cbSceneParam._m0[33u].w * _1562;
        float _1572 = fma(_1484, cbSceneParam._m0[_1531].w, fma(_1480, cbSceneParam._m0[_1531].z, fma(_1476, cbSceneParam._m0[_1531].y, _1472 * cbSceneParam._m0[_1531].x))) / _1562;
        float _1620 = (cbSceneParam._m0[33u].x - sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487))) * cbSceneParam._m0[33u].y;
        float _3711 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1627 = (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1567 + _1550) / _1562, (_1569 + _1554) / _1562), _1572), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1569 + _1550) / _1562, (_1554 - _1567) / _1562), _1572), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1550 - _1567) / _1562, (_1554 - _1569) / _1562), _1572), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1550 - _1569) / _1562, (_1567 + _1554) / _1562), _1572), 0.0)).x), vec4(0.25)));
        _1634 = 1.0 - (_1627 * cbSceneParam._m0[34u].x);
        _1635 = 1.0 - (_1627 * cbSceneParam._m0[34u].y);
        _1636 = 1.0 - (_1627 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1634 = 1.0;
        _1635 = 1.0;
        _1636 = 1.0;
    }
    float _1700;
    float _1702;
    float _1704;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1688 = fma(_1484, cbSceneParam._m0[63u].w, fma(_1480, cbSceneParam._m0[63u].z, fma(_1476, cbSceneParam._m0[63u].y, _1472 * cbSceneParam._m0[63u].x)));
        float _1689 = fma(_1484, cbSceneParam._m0[60u].w, fma(_1480, cbSceneParam._m0[60u].z, fma(_1476, cbSceneParam._m0[60u].y, _1472 * cbSceneParam._m0[60u].x))) / _1688;
        float _1690 = fma(_1484, cbSceneParam._m0[61u].w, fma(_1480, cbSceneParam._m0[61u].z, fma(_1476, cbSceneParam._m0[61u].y, _1472 * cbSceneParam._m0[61u].x))) / _1688;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1689 >= cbSceneParam._m0[64u].x) && (_1690 >= cbSceneParam._m0[64u].y)) && (_1689 <= cbSceneParam._m0[64u].z)) && (_1690 <= cbSceneParam._m0[64u].w))
        {
            float _1830 = fma(_1484, cbSceneParam._m0[62u].w, fma(_1480, cbSceneParam._m0[62u].z, fma(_1476, cbSceneParam._m0[62u].y, _1472 * cbSceneParam._m0[62u].x))) / _1688;
            float _1834 = isnan(cbSceneParam._m0[41u].w) ? _1830 : (isnan(_1830) ? cbSceneParam._m0[41u].w : max(_1830, cbSceneParam._m0[41u].w));
            float _1877 = (cbSceneParam._m0[33u].x - sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487))) * cbSceneParam._m0[33u].y;
            float _3727 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
            float _1884 = (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1689, cbSceneParam._m0[33u].w + _1690), _1834), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1689, _1690 - cbSceneParam._m0[33u].z), _1834), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1689 - cbSceneParam._m0[33u].z, _1690 - cbSceneParam._m0[33u].w), _1834), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1689 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1690), _1834), 0.0)).x), vec4(0.25)));
            float _1888 = 1.0 - (_1884 * cbSceneParam._m0[34u].x);
            float _1889 = 1.0 - (_1884 * cbSceneParam._m0[34u].y);
            float _1890 = 1.0 - (_1884 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1889) ? _1635 : (isnan(_1635) ? _1889 : min(_1635, _1889));
            frontier_phi_39_38_ladder_1 = isnan(_1888) ? _1634 : (isnan(_1634) ? _1888 : min(_1634, _1888));
            frontier_phi_39_38_ladder_2 = isnan(_1890) ? _1636 : (isnan(_1636) ? _1890 : min(_1636, _1890));
        }
        else
        {
            frontier_phi_39_38_ladder = _1635;
            frontier_phi_39_38_ladder_1 = _1634;
            frontier_phi_39_38_ladder_2 = _1636;
        }
        _1700 = frontier_phi_39_38_ladder_1;
        _1702 = frontier_phi_39_38_ladder;
        _1704 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1700 = _1634;
        _1702 = _1635;
        _1704 = _1636;
    }
    uvec4 _1709 = floatBitsToUint(cbInstanceData._m0[_381 + 5u]);
    uint _1711 = _1709.x * 14u;
    uint _1712 = _1711 + 13u;
    float _1719 = _407 + (-1.0);
    float _1725 = (cbLight._m0[_1712].x * _1719) + 1.0;
    float _1726 = (cbLight._m0[_1712].y * _1719) + 1.0;
    float _1727 = (cbLight._m0[_1712].z * _1719) + 1.0;
    float _1728 = (cbLight._m0[_1712].w * _1719) + 1.0;
    uint _1729 = _1711 + 5u;
    float _1735 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
    uint _1739 = _1711 + 4u;
    float _1749 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    uint _1753 = _1711 | 1u;
    float _1764 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_240, _241, _242));
    float _1767 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_240, _241, _242));
    float _3763 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _3774 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1772 = (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * 0.3183098733425140380859375;
    float _1774 = (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 0.3183098733425140380859375;
    float _1781 = ((cbLight._m0[_1729].x * _1735) * _1774) + (((cbLight._m0[_1739].x * _1700) * _1749) * _1772);
    float _1782 = ((_1735 * cbLight._m0[_1729].y) * _1774) + (((cbLight._m0[_1739].y * _1702) * _1749) * _1772);
    float _1783 = ((_1735 * cbLight._m0[_1729].z) * _1774) + (((cbLight._m0[_1739].z * _1704) * _1749) * _1772);
    uvec4 _1787 = floatBitsToUint(cbLight._m0[_1711 + 12u]);
    bool _1789 = _1787.x == 0u;
    float _1891;
    float _1893;
    float _1895;
    if (_1789)
    {
        _1891 = _1781;
        _1893 = _1782;
        _1895 = _1783;
    }
    else
    {
        uint _1899 = _1711 + 6u;
        float _1915 = (dot(vec3(cbLight._m0[_1711 + 2u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _1916 = _1915 * _1915;
        float _3785 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1917 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1918 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _1891 = (((cbLight._m0[_1899].x * 0.3183098733425140380859375) * _1917) * _1918) + _1781;
        _1893 = (((cbLight._m0[_1899].y * 0.3183098733425140380859375) * _1917) * _1918) + _1782;
        _1895 = (((cbLight._m0[_1899].z * 0.3183098733425140380859375) * _1917) * _1918) + _1783;
    }
    bool _1898 = _1787.y == 0u;
    float _1953;
    float _1955;
    float _1957;
    if (_1898)
    {
        _1953 = _1891;
        _1955 = _1893;
        _1957 = _1895;
    }
    else
    {
        uint _2061 = _1711 + 7u;
        float _2077 = (dot(vec3(cbLight._m0[_1711 + 3u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _2078 = _2077 * _2077;
        float _3801 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2079 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _2080 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _1953 = (((cbLight._m0[_2061].x * 0.3183098733425140380859375) * _2079) * _2080) + _1891;
        _1955 = (((cbLight._m0[_2061].y * 0.3183098733425140380859375) * _2079) * _2080) + _1893;
        _1957 = (((cbLight._m0[_2061].z * 0.3183098733425140380859375) * _2079) * _2080) + _1895;
    }
    uint _1959 = _1711 + 8u;
    float _1965 = cbLight._m0[_1711].x + _320;
    float _1966 = cbLight._m0[_1711].y + _321;
    float _1967 = cbLight._m0[_1711].z + _322;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1975 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1711].xyz));
    float _3817 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _1979 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_1965 * _1971, _1966 * _1971, _1967 * _1971));
    float _3839 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1991 = (exp2(log2(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1997 = (0.5 / ((_1978 + 9.9999999392252902907785028219223e-09) + _1979)) * _1978;
    float _3850 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _1999 = (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * 0.31831014156341552734375;
    uint _2013 = _1711 + 9u;
    float _2019 = cbLight._m0[_1753].x + _320;
    float _2020 = cbLight._m0[_1753].y + _321;
    float _2021 = cbLight._m0[_1753].z + _322;
    float _2025 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
    float _2029 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1753].xyz));
    float _3861 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_2019 * _2025, _2020 * _2025, _2021 * _2025));
    float _3872 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2042 = (exp2(log2(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2046 = (0.5 / ((_2032 + 9.9999999392252902907785028219223e-09) + _1979)) * _2032;
    float _3883 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2048 = (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * 0.31831014156341552734375;
    float _2058 = (((_2042 * cbLight._m0[_2013].x) * _2048) * _1735) + ((((cbLight._m0[_1959].x * _1700) * _1991) * _1999) * _1749);
    float _2059 = (((_2042 * cbLight._m0[_2013].y) * _2048) * _1735) + ((((cbLight._m0[_1959].y * _1702) * _1991) * _1999) * _1749);
    float _2060 = (((_2042 * cbLight._m0[_2013].z) * _2048) * _1735) + ((((cbLight._m0[_1959].z * _1704) * _1991) * _1999) * _1749);
    float _2116;
    float _2118;
    float _2120;
    if (_1789)
    {
        _2116 = _2058;
        _2118 = _2059;
        _2120 = _2060;
    }
    else
    {
        uint _2122 = _1711 + 10u;
        uint _2128 = _1711 + 2u;
        float _2134 = cbLight._m0[_2128].x + _320;
        float _2135 = cbLight._m0[_2128].y + _321;
        float _2136 = cbLight._m0[_2128].z + _322;
        float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
        float _2144 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_2128].xyz));
        float _3894 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _2148 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2134 * _2140, _2135 * _2140, _2136 * _2140));
        float _3905 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2157 = (exp2(log2(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2161 = (0.5 / ((_2147 + 9.9999999392252902907785028219223e-09) + _1979)) * _2147;
        float _3916 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * 0.31831014156341552734375;
        float _2164 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _2116 = (((_2157 * cbLight._m0[_2122].x) * _2163) * _2164) + _2058;
        _2118 = (((_2157 * cbLight._m0[_2122].y) * _2163) * _2164) + _2059;
        _2120 = (((_2157 * cbLight._m0[_2122].z) * _2163) * _2164) + _2060;
    }
    float _2195;
    float _2197;
    float _2199;
    if (_1898)
    {
        _2195 = _2116;
        _2197 = _2118;
        _2199 = _2120;
    }
    else
    {
        uint _2206 = _1711 + 11u;
        uint _2212 = _1711 + 3u;
        float _2218 = cbLight._m0[_2212].x + _320;
        float _2219 = cbLight._m0[_2212].y + _321;
        float _2220 = cbLight._m0[_2212].z + _322;
        float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
        float _2228 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_2212].xyz));
        float _3932 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _2232 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2218 * _2224, _2219 * _2224, _2220 * _2224));
        float _3943 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2241 = (exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2245 = (0.5 / ((_2231 + 9.9999999392252902907785028219223e-09) + _1979)) * _2231;
        float _3954 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2247 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * 0.31831014156341552734375;
        float _2248 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _2195 = (((_2241 * cbLight._m0[_2206].x) * _2247) * _2248) + _2116;
        _2197 = (((_2241 * cbLight._m0[_2206].y) * _2247) * _2248) + _2118;
        _2199 = (((_2241 * cbLight._m0[_2206].z) * _2247) * _2248) + _2120;
    }
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    if (_1709.y == 0u)
    {
        uvec4 _2269 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2270 = _2269.x;
        uint _2281 = uint((float(_2269.y) * floor(float(uint(cbSceneParam._m0[85u].y * _342) / _2270))) + floor(float(uint(cbSceneParam._m0[85u].x * _341) / _2270)));
        float _2291 = (log2(_1487 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2292 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        uint _2295 = uint(isnan(14.0) ? _2292 : (isnan(_2292) ? 14.0 : min(_2292, 14.0)));
        uvec4 _2300 = texelFetch(g_lightClusterGridBuffer, int(((_2295 << 2u) + (_2281 << 6u)) >> 2u));
        uint _2301 = _2300.x;
        uint _2302 = _2269.z;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        if (((((1u << ((_2302 >> 4u) & 15u)) + 4294967295u) & _2301) == 0u) || ((_2302 & 240u) == 0u))
        {
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
        }
        else
        {
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2556 = 0.0;
            float _2557 = 0.0;
            float _2558 = 0.0;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            uint _2562 = 0u;
            uint _2571;
            bool _2572;
            for (;;)
            {
                _2571 = texelFetch(g_lightClassification, int((((_2295 << 5u) + (_2281 << 9u)) + (_2562 << 2u)) >> 2u)).x;
                _2572 = _2571 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2572)
                {
                    frontier_phi_73_pred = _2561;
                    frontier_phi_73_pred_1 = _2560;
                    frontier_phi_73_pred_2 = _2559;
                    frontier_phi_73_pred_3 = _2558;
                    frontier_phi_73_pred_4 = _2557;
                    frontier_phi_73_pred_5 = _2556;
                }
                else
                {
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    uint _2707;
                    _2701 = _2556;
                    _2702 = _2557;
                    _2703 = _2558;
                    _2704 = _2559;
                    _2705 = _2560;
                    _2706 = _2561;
                    _2707 = _2571;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    for (;;)
                    {
                        uint _2711 = uint(findLSB(_2707)) + (_2562 << 5u);
                        uint _2708 = (_2707 + 4294967295u) & _2707;
                        uint _2713 = _2711 * 48u;
                        vec4 _2727 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 3u)).x));
                        uint _2733 = (_2711 * 48u) + 4u;
                        vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2733)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 3u)).x));
                        uint _2752 = (_2711 * 48u) + 8u;
                        vec3 _2763 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x));
                        float _2767 = _2727.x - _1485;
                        float _2768 = _2727.y - _1486;
                        float _2769 = _2727.z - _1487;
                        float _2770 = dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769));
                        float _2773 = inversesqrt(_2770);
                        float _2782 = 1.0 - (_2770 * _2727.w);
                        float _3980 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2783 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                        float _2784 = sqrt(_2770) * _2746.w;
                        float _2787 = 1.39999997615814208984375 / (_2784 + 1.39999997615814208984375);
                        float _2788 = _2787 * _2787;
                        float _2791 = ((1.0 - _2788) * dot(vec3(_362, _365, _368), vec3(_2773 * _2767, _2773 * _2768, _2773 * _2769))) + _2788;
                        float _2794 = _2784 * _2784;
                        float _2798 = ((isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0))) * _2783) / ((_2794 * 0.699999988079071044921875) + 1.0);
                        float _2802 = (-0.0) - _1485;
                        float _2803 = (-0.0) - _1486;
                        float _2804 = (-0.0) - _1487;
                        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
                        float _2812 = dot(vec3(_362, _365, _368), vec3(_2808 * _2802, _2808 * _2803, _2808 * _2804));
                        float _3996 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _4007 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2816 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                        float _2820 = (0.5 / (((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) + 9.9999999392252902907785028219223e-09) + _2816)) * _2816;
                        float _4018 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2829 = (((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 3.1415927410125732421875) / ((_2794 * 2.1991131305694580078125) + 3.141590118408203125)) * _2783;
                        _2631 = (_2798 * _2746.x) + _2704;
                        _2632 = (_2798 * _2746.y) + _2705;
                        _2633 = (_2798 * _2746.z) + _2706;
                        _2628 = (_2829 * _2763.x) + _2701;
                        _2629 = (_2829 * _2763.y) + _2702;
                        _2630 = (_2829 * _2763.z) + _2703;
                        if (_2708 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2701 = _2628;
                            _2702 = _2629;
                            _2703 = _2630;
                            _2704 = _2631;
                            _2705 = _2632;
                            _2706 = _2633;
                            _2707 = _2708;
                        }
                    }
                    frontier_phi_73_pred = _2633;
                    frontier_phi_73_pred_1 = _2632;
                    frontier_phi_73_pred_2 = _2631;
                    frontier_phi_73_pred_3 = _2630;
                    frontier_phi_73_pred_4 = _2629;
                    frontier_phi_73_pred_5 = _2628;
                }
                _2416 = frontier_phi_73_pred;
                _2414 = frontier_phi_73_pred_1;
                _2412 = frontier_phi_73_pred_2;
                _2410 = frontier_phi_73_pred_3;
                _2408 = frontier_phi_73_pred_4;
                _2406 = frontier_phi_73_pred_5;
                uint _2563 = _2562 + 1u;
                if (_2563 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2556 = _2406;
                    _2557 = _2408;
                    _2558 = _2410;
                    _2559 = _2412;
                    _2560 = _2414;
                    _2561 = _2416;
                    _2562 = _2563;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
        }
        uvec4 _2419 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2420 = _2419.z;
        uint _2422 = (_2420 >> 8u) & 15u;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        if (((4294967295u << _2422) & _2301) == 0u)
        {
            _2527 = _2405;
            _2529 = _2407;
            _2531 = _2409;
            _2533 = _2411;
            _2535 = _2413;
            _2537 = _2415;
        }
        else
        {
            float _2552 = inversesqrt(dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2422 < ((_2420 >> 12u) & 15u))
            {
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2538;
                float _2684 = _2405;
                float _2685 = _2407;
                float _2686 = _2409;
                float _2687 = _2411;
                float _2688 = _2413;
                float _2689 = _2415;
                uint _2690 = _2422;
                uint _2699;
                bool _2700;
                for (;;)
                {
                    _2699 = texelFetch(g_lightClassification, int((((_2295 << 5u) + (_2281 << 9u)) + (_2690 << 2u)) >> 2u)).x;
                    _2700 = _2699 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2700)
                    {
                        frontier_phi_84_pred = _2688;
                        frontier_phi_84_pred_1 = _2687;
                        frontier_phi_84_pred_2 = _2686;
                        frontier_phi_84_pred_3 = _2685;
                        frontier_phi_84_pred_4 = _2684;
                        frontier_phi_84_pred_5 = _2689;
                    }
                    else
                    {
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _2856 = _2684;
                        float _2857 = _2685;
                        float _2858 = _2686;
                        float _2859 = _2687;
                        float _2860 = _2688;
                        float _2861 = _2689;
                        uint _2862 = _2699;
                        uint _2863;
                        vec4 _2888;
                        float _2889;
                        vec4 _2904;
                        vec3 _2916;
                        vec4 _2932;
                        vec4 _2948;
                        float _2995;
                        bool _2996;
                        for (;;)
                        {
                            uint _2873 = ((_2690 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2862));
                            _2863 = (_2862 + 4294967295u) & _2862;
                            uint _2875 = _2873 * 40u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            _2889 = _2888.w;
                            uint _2891 = (_2873 * 40u) + 4u;
                            _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2906 = (_2873 * 40u) + 8u;
                            _2916 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x));
                            uint _2919 = (_2873 * 40u) + 16u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2935 = (_2873 * 40u) + 20u;
                            _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            uint _2951 = (_2873 * 40u) + 24u;
                            vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2970 = (_2873 * 40u) + 28u;
                            vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            _2995 = fma(_1487, _2983.z, fma(_1486, _2983.y, _2983.x * _1485)) + _2983.w;
                            _2996 = !((fma(_1487, _2964.z, fma(_1486, _2964.y, _2964.x * _1485)) + _2964.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_2996)
                            {
                                float _3023 = _2888.x - _1485;
                                float _3024 = _2888.y - _1486;
                                float _3025 = _2888.z - _1487;
                                float _3026 = dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025));
                                float _3029 = inversesqrt(_3026);
                                float _3030 = _3029 * _3023;
                                float _3031 = _3029 * _3024;
                                float _3032 = _3029 * _3025;
                                float _3036 = 1.0 - (_3026 / (_2889 * _2889));
                                float _4029 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3037 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                                float _3041 = sqrt(_3026) * _2904.w;
                                float _3043 = 1.39999997615814208984375 / (_3041 + 1.39999997615814208984375);
                                float _3044 = _3043 * _3043;
                                float _3045 = 1.0 - _3044;
                                float _3047 = (_3045 * dot(vec3(_3030, _3031, _3032), vec3(_362, _365, _368))) + _3044;
                                float _3050 = _3041 * _3041;
                                float _3054 = (fma(_1487, _2932.z, fma(_1486, _2932.y, _2932.x * _1485)) + _2932.w) / _2995;
                                float _3055 = (fma(_1487, _2948.z, fma(_1486, _2948.y, _2948.x * _1485)) + _2948.w) / _2995;
                                float _3059 = 1.0 - dot(vec2(_3054, _3055), vec2(_3054, _3055));
                                float _4045 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3060 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                                float _3061 = _3060 * (((isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))) * _3037) / ((_3050 * 0.699999988079071044921875) + 1.0));
                                float _3071 = dot(vec3(_362, _365, _368), vec3((-0.0) - (_1485 * _2552), (-0.0) - (_1486 * _2552), (-0.0) - (_1487 * _2552)));
                                float _4056 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3079 = (_3045 * dot(vec3(_362, _365, _368), vec3(_3030, _3031, _3032))) + _3044;
                                float _4067 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3080 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3084 = (0.5 / (((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) + 9.9999999392252902907785028219223e-09) + _3080)) * _3080;
                                float _4078 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3091 = (_3060 * _3037) * (((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 3.1415927410125732421875) / ((_3050 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3061 * _2904.y;
                                frontier_phi_90_pred_1 = _3061 * _2904.x;
                                frontier_phi_90_pred_2 = _3091 * _2916.z;
                                frontier_phi_90_pred_3 = _3091 * _2916.y;
                                frontier_phi_90_pred_4 = _3091 * _2916.x;
                                frontier_phi_90_pred_5 = _3061 * _2904.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3099 = frontier_phi_90_pred;
                            _3098 = frontier_phi_90_pred_1;
                            _3097 = frontier_phi_90_pred_2;
                            _3096 = frontier_phi_90_pred_3;
                            _3095 = frontier_phi_90_pred_4;
                            _3100 = frontier_phi_90_pred_5;
                            _2846 = _3098 + _2859;
                            _2847 = _3099 + _2860;
                            _2848 = _3100 + _2861;
                            _2843 = _3095 + _2856;
                            _2844 = _3096 + _2857;
                            _2845 = _3097 + _2858;
                            if (_2863 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2863;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2847;
                        frontier_phi_84_pred_1 = _2846;
                        frontier_phi_84_pred_2 = _2845;
                        frontier_phi_84_pred_3 = _2844;
                        frontier_phi_84_pred_4 = _2843;
                        frontier_phi_84_pred_5 = _2848;
                    }
                    _2536 = frontier_phi_84_pred;
                    _2534 = frontier_phi_84_pred_1;
                    _2532 = frontier_phi_84_pred_2;
                    _2530 = frontier_phi_84_pred_3;
                    _2528 = frontier_phi_84_pred_4;
                    _2538 = frontier_phi_84_pred_5;
                    uint _2691 = _2690 + 1u;
                    if (_2691 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2684 = _2528;
                        _2685 = _2530;
                        _2686 = _2532;
                        _2687 = _2534;
                        _2688 = _2536;
                        _2689 = _2538;
                        _2690 = _2691;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2538;
                frontier_phi_65_66_ladder_1 = _2534;
                frontier_phi_65_66_ladder_2 = _2536;
                frontier_phi_65_66_ladder_3 = _2530;
                frontier_phi_65_66_ladder_4 = _2528;
                frontier_phi_65_66_ladder_5 = _2532;
            }
            else
            {
                frontier_phi_65_66_ladder = _2415;
                frontier_phi_65_66_ladder_1 = _2411;
                frontier_phi_65_66_ladder_2 = _2413;
                frontier_phi_65_66_ladder_3 = _2407;
                frontier_phi_65_66_ladder_4 = _2405;
                frontier_phi_65_66_ladder_5 = _2409;
            }
            _2527 = frontier_phi_65_66_ladder_4;
            _2529 = frontier_phi_65_66_ladder_3;
            _2531 = frontier_phi_65_66_ladder_5;
            _2533 = frontier_phi_65_66_ladder_1;
            _2535 = frontier_phi_65_66_ladder_2;
            _2537 = frontier_phi_65_66_ladder;
        }
        float _2542 = isnan(1.0) ? _407 : (isnan(_407) ? 1.0 : min(_407, 1.0));
        _2313 = (_2542 * _2533) + _1953;
        _2315 = (_2542 * _2535) + _1955;
        _2317 = (_2542 * _2537) + _1957;
        _2319 = ((_2527 * 0.039999999105930328369140625) * _2542) + _2195;
        _2321 = ((_2529 * 0.039999999105930328369140625) * _2542) + _2197;
        _2323 = ((_2531 * 0.039999999105930328369140625) * _2542) + _2199;
    }
    else
    {
        _2313 = _1953;
        _2315 = _1955;
        _2317 = _1957;
        _2319 = _2195;
        _2321 = _2197;
        _2323 = _2199;
    }
    uint _2329 = _383 + uint(cbMatDynParam._m0[0u].w);
    float _4094 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _4105 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _4116 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _2360 = (((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2313 + ((isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0))) * _407))) + ((_2319 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _1218)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _231.x) * cbInstanceData._m0[_2329].x);
    float _2362 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _231.y) * cbInstanceData._m0[_2329].y) + ((_2321 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _1218)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2315 + ((isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))) * _407)));
    float _2364 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _231.z) * cbInstanceData._m0[_2329].z) + ((_2323 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _1218)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2317 + ((isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))) * _407)));
    float _2365 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2366 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2367 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    uint _2368 = _381 + 6u;
    float _2376 = _341 / cbSceneParam._m0[86u].x;
    float _2377 = _342 / cbSceneParam._m0[86u].y;
    vec4 _2391 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, (log2((isnan(cbSceneParam._m0[77u].w) ? _262 : (isnan(_262) ? cbSceneParam._m0[77u].w : min(_262, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2393 = _2391.x;
    float _2394 = _2391.y;
    float _2395 = _2391.z;
    float _2396 = _2391.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_262 > cbSceneParam._m0[78u].w)
    {
        float _2430 = isnan(_262) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _262 : min(cbSceneParam._m0[80u].w, _262));
        float _2431 = _2430 / _262;
        float _2442 = _2431 * _313;
        float _2443 = _314 * _2431;
        float _2444 = (-0.0) - _2443;
        float _2445 = _2431 * _315;
        float _2447 = (cbSceneParam._m0[77u].w * _2444) / _2430;
        float _2448 = _2447 + cbSceneParam._m0[79u].w;
        float _2449 = cbSceneParam._m0[79u].w - _2443;
        float _2455 = sqrt(((_2442 * _2442) + (_2443 * _2443)) + (_2445 * _2445));
        float _2458 = (1.0 - (cbSceneParam._m0[77u].w / _2430)) * _2455;
        float _2463 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2641;
        if (abs((_2444 - _2447) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2641 = ((((_2448 > 0.0) ? exp2(_2463 * _2448) : (2.0 - exp2(_2465 * _2448))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2458;
        }
        else
        {
            float _2585 = 1.0 / cbSceneParam._m0[80u].x;
            float _2586 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : max(_2448, _2449));
            float _2587 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : min(_2448, _2449));
            float _2596 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : min(_2586, 0.0));
            float _2597 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : min(_2587, 0.0));
            _2641 = ((abs(_2455 / _2444) * cbSceneParam._m0[80u].y) * ((((_2596 - _2597) * 2.0) - ((exp2(_2463 * (isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0)))) - exp2(_2463 * (isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0))))) * _2585)) - ((exp2(_2465 * _2596) - exp2(_2465 * _2597)) * _2585))) + (_2458 * cbSceneParam._m0[80u].z);
        }
        vec4 _2643 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, 1.0), 0.0);
        float _2652 = exp2((_2641 * (-1.44269502162933349609375)) * (1.0 - _2643.w));
        float _2653 = log2(_2652);
        float _2669 = log2(_2396);
        _2467 = (exp2(_2669 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].x)) * _2643.x) / cbSceneParam._m0[78u].x)) + _2393;
        _2469 = (exp2(_2669 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].y)) * _2643.y) / cbSceneParam._m0[78u].y)) + _2394;
        _2471 = (exp2(_2669 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].z)) * _2643.z) / cbSceneParam._m0[78u].z)) + _2395;
        _2473 = _2652 * _2396;
    }
    else
    {
        _2467 = _2393;
        _2469 = _2394;
        _2471 = _2395;
        _2473 = _2396;
    }
    bool _2679;
    vec4 _2483;
    vec4 _2506;
    float _2508;
    float _2512;
    float _2513;
    float _2514;
    float _2515;
    bool _2526;
    for (;;)
    {
        _2483 = cbMatDynParam._m0[0u];
        float _2485 = roundEven(_2483.y);
        bool _2486 = _2485 == 3.0;
        float _2488 = log2(_2473);
        float _2495 = exp2(_2488 * cbSceneParam._m0[78u].x) * _2365;
        float _2496 = exp2(_2488 * cbSceneParam._m0[78u].y) * _2366;
        float _2497 = exp2(_2488 * cbSceneParam._m0[78u].z) * _2367;
        float _2504 = _329 + (-0.5);
        _2506 = cbMtdParam._m0[1u];
        _2508 = _2506.y * _2504;
        float _2511 = (_2485 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2512 = _2511 * (_2486 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2467)));
        _2513 = _2511 * (_2486 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2469)));
        _2514 = _2511 * (_2486 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2471)));
        _2515 = _2504 * 0.999000012874603271484375;
        _2526 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2526)
        {
            if ((cbInstanceData._m0[_381 + 7u].x + _2515) < 0.5)
            {
                _2679 = true;
                break;
            }
        }
        uint _2620 = _383 + uint(_2483.w);
        if ((cbInstanceData._m0[_2620].w < 1.0) && ((cbInstanceData._m0[_2620].w + _2515) < 0.5))
        {
            _2679 = true;
            break;
        }
        if ((_2508 + _206) < _2506.x)
        {
            _2679 = true;
            break;
        }
        _2679 = false;
        break;
    }
    float _2834;
    if (_2679)
    {
        discard_state = true;
        _2834 = 0.0;
    }
    else
    {
        _2834 = cbInstanceData._m0[_2368].w;
    }
    SV_Target.x = _2512;
    SV_Target.y = _2513;
    SV_Target.z = _2514;
    SV_Target.w = _2834;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2368].w;
    discard_exit();
}


