#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_Emissive_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_Edge_Emissive_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _778;
float _2991;
float _2992;
float _2993;
float _2994;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _199 = texture(sampler2D(M_A_M0_Edge_Emissive_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _204 = _199.z;
    float _205 = _199.x * cbMtdParam._m0[9u].x;
    float _206 = _199.y * cbMtdParam._m0[9u].y;
    float _207 = _204 * cbMtdParam._m0[9u].z;
    vec4 _229 = texture(sampler2D(M_A_M0_Edge_Emissive_Addition_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _237 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _238 = _237 * _177;
    float _239 = _237 * _178;
    float _240 = _237 * _179;
    float _3003 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _3014 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _3025 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _260 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _301 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _311 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _301);
    float _312 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _301);
    float _313 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _301);
    float _317 = inversesqrt(dot(vec3(_311, _312, _313), vec3(_311, _312, _313)));
    float _318 = _311 * _317;
    float _319 = _312 * _317;
    float _320 = _313 * _317;
    vec4 _325 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _327 = _325.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _457 = sqrt(((_311 * _311) + (_312 * _312)) + (_313 * _313));
        float _463 = (cbMatDynParam._m0[5u].x * _457) + cbMatDynParam._m0[5u].y;
        float _3036 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
        float _464 = isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0));
        float _468 = (cbMatDynParam._m0[5u].z * _457) + cbMatDynParam._m0[5u].w;
        float _3047 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0))) - _464)) + _464) < ((_327 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _339 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _340 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _360 = fma(_240, cbSceneParam._m0[5u].z, fma(_239, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _238));
    float _363 = fma(_240, cbSceneParam._m0[6u].z, fma(_239, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _238));
    float _366 = fma(_240, cbSceneParam._m0[7u].z, fma(_239, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _238));
    uint _379 = uint(roundEven(NORMAL.w)) * 13u;
    uint _381 = _379 + 9u;
    uint _382 = _381 + uint(cbMatDynParam._m0[0u].w);
    float _388 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0)))) * cbInstanceData._m0[_382].x;
    float _389 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0)))) * cbInstanceData._m0[_382].y;
    float _390 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0)))) * cbInstanceData._m0[_382].z;
    float _3058 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _391 = isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0));
    float _3069 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _392 = isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0));
    float _3080 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _393 = isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0));
    vec4 _402 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _339, cbSceneParam._m0[86u].y * _340));
    float _405 = _402.x * TEXCOORD.z;
    float _406 = dot(vec3(_238, _239, _240), vec3(_318, _319, _320));
    float _409 = _406 * 2.0;
    float _414 = (_409 * _238) - _318;
    float _415 = (_409 * _239) - _319;
    float _416 = (_409 * _240) - _320;
    float _438 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _442 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _446 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _777;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _502 = fma(_446, cbModelParam._m0[26u].z, fma(_442, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _438));
        float _506 = fma(_446, cbModelParam._m0[27u].z, fma(_442, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _438));
        float _510 = fma(_446, cbModelParam._m0[28u].z, fma(_442, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _438));
        float _535 = _438 + _238;
        float _536 = _442 + _239;
        float _537 = _446 + _240;
        float _547 = fma(_537, cbModelParam._m0[26u].z, fma(_536, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _535)) - _502;
        float _548 = fma(_537, cbModelParam._m0[27u].z, fma(_536, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _535)) - _506;
        float _549 = fma(_537, cbModelParam._m0[28u].z, fma(_536, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _535)) - _510;
        float _553 = inversesqrt(dot(vec3(_547, _548, _549), vec3(_547, _548, _549)));
        float _566 = ((_553 * _547) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_502 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _567 = ((_553 * _548) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_506 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _568 = ((_553 * _549) / cbModelParam._m0[34u].z) + ((((((_510 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _571 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_566, _567, _568), 0.0);
        vec4 _578 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_566, _567, _568), 0.0);
        vec4 _585 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_566, _567, _568), 0.0);
        vec4 _592 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_566, _567, _568), 0.0);
        float _605 = exp2((_571.w + (-0.5)) * 20.0) * 2.0;
        float _606 = _605 * (_571.x + (-0.5));
        float _607 = _605 * (_571.y + (-0.5));
        float _608 = _605 * (_571.z + (-0.5));
        float _615 = exp2((_578.w + (-0.5)) * 20.0) * 2.0;
        float _616 = _615 * (_578.x + (-0.5));
        float _617 = _615 * (_578.y + (-0.5));
        float _618 = _615 * (_578.z + (-0.5));
        float _625 = exp2((_585.w + (-0.5)) * 20.0) * 2.0;
        float _626 = _625 * (_585.x + (-0.5));
        float _627 = _625 * (_585.y + (-0.5));
        float _628 = _625 * (_585.z + (-0.5));
        float _635 = exp2((_592.w + (-0.5)) * 20.0) * 2.0;
        float _636 = _635 * (_592.x + (-0.5));
        float _637 = _635 * (_592.y + (-0.5));
        float _638 = _635 * (_592.z + (-0.5));
        float _639 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _640 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _641 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _642 = _606 * 0.5;
        float _643 = _616 * 0.5;
        float _644 = _626 * 0.5;
        float _645 = dot(vec3(_642, _643, _644), vec3(_642, _643, _644));
        float _650 = (_645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_645);
        float _659 = (dot(vec3(_238, _239, _240), vec3(_650 * _642, _650 * _643, _650 * _644)) + 1.0) * 0.5;
        float _3106 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _669 = sqrt(((_643 * _643) + (_642 * _642)) + (_644 * _644)) / (_639 + 9.9999997473787516355514526367188e-06);
        float _3117 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _670 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
        float _671 = _670 * 2.0;
        float _675 = (1.0 - _670) / (_670 + 1.0);
        float _3128 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _676 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
        float _685 = ((((1.0 - _676) * (_671 + 2.0)) * exp2(log2(isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0))) * (_671 + 1.0))) + _676) * _639;
        float _686 = _607 * 0.5;
        float _687 = _617 * 0.5;
        float _688 = _627 * 0.5;
        float _689 = dot(vec3(_686, _687, _688), vec3(_686, _687, _688));
        float _694 = (_689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_689);
        float _702 = (dot(vec3(_238, _239, _240), vec3(_694 * _686, _694 * _687, _694 * _688)) + 1.0) * 0.5;
        float _3139 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _711 = sqrt(((_687 * _687) + (_686 * _686)) + (_688 * _688)) / (_640 + 9.9999997473787516355514526367188e-06);
        float _3150 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _712 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
        float _713 = _712 * 2.0;
        float _717 = (1.0 - _712) / (_712 + 1.0);
        float _3161 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
        float _727 = ((((1.0 - _718) * (_713 + 2.0)) * exp2(log2(isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0))) * (_713 + 1.0))) + _718) * _640;
        float _728 = _608 * 0.5;
        float _729 = _618 * 0.5;
        float _730 = _628 * 0.5;
        float _731 = dot(vec3(_728, _729, _730), vec3(_728, _729, _730));
        float _736 = (_731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_731);
        float _744 = (dot(vec3(_238, _239, _240), vec3(_736 * _728, _736 * _729, _736 * _730)) + 1.0) * 0.5;
        float _3172 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _753 = sqrt(((_729 * _729) + (_728 * _728)) + (_730 * _730)) / (_641 + 9.9999997473787516355514526367188e-06);
        float _3183 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
        float _755 = _754 * 2.0;
        float _759 = (1.0 - _754) / (_754 + 1.0);
        float _3194 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
        float _769 = ((((1.0 - _760) * (_755 + 2.0)) * exp2(log2(isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0))) * (_755 + 1.0))) + _760) * _641;
        _777 = _608;
        _779 = _607;
        _780 = _606;
        _781 = _618;
        _782 = _617;
        _783 = _616;
        _784 = _628;
        _785 = _627;
        _786 = _626;
        _787 = _641;
        _788 = _640;
        _789 = _639;
        _790 = cbModelParam._m0[36u].z * (isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0)));
        _791 = cbModelParam._m0[36u].z * (isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0)));
        _792 = cbModelParam._m0[36u].z * (isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0)));
    }
    else
    {
        _777 = _778;
        _779 = _778;
        _780 = _778;
        _781 = _778;
        _782 = _778;
        _783 = _778;
        _784 = _778;
        _785 = _778;
        _786 = _778;
        _787 = _778;
        _788 = _778;
        _789 = _778;
        _790 = 0.0;
        _791 = 0.0;
        _792 = 0.0;
    }
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _821 = fma(_446, cbModelParam._m0[30u].z, fma(_442, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _438));
        float _825 = fma(_446, cbModelParam._m0[31u].z, fma(_442, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _438));
        float _829 = fma(_446, cbModelParam._m0[32u].z, fma(_442, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _438));
        float _852 = _438 + _238;
        float _853 = _442 + _239;
        float _854 = _446 + _240;
        float _864 = fma(_854, cbModelParam._m0[30u].z, fma(_853, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _852)) - _821;
        float _865 = fma(_854, cbModelParam._m0[31u].z, fma(_853, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _852)) - _825;
        float _866 = fma(_854, cbModelParam._m0[32u].z, fma(_853, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _852)) - _829;
        float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
        float _883 = ((_870 * _864) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_821 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_870 * _865) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_825 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_870 * _866) / cbModelParam._m0[35u].z) + ((((((_829 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        float _920 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_887.x + (-0.5));
        float _922 = _920 * (_887.y + (-0.5));
        float _923 = _920 * (_887.z + (-0.5));
        float _930 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_894.x + (-0.5));
        float _932 = _930 * (_894.y + (-0.5));
        float _933 = _930 * (_894.z + (-0.5));
        float _940 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_901.x + (-0.5));
        float _942 = _940 * (_901.y + (-0.5));
        float _943 = _940 * (_901.z + (-0.5));
        float _950 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_908.x + (-0.5));
        float _952 = _950 * (_908.y + (-0.5));
        float _953 = _950 * (_908.z + (-0.5));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = _921 * 0.5;
        float _958 = _931 * 0.5;
        float _959 = _941 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_238, _239, _240), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3235 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3246 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3257 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0))) * (_984 + 1.0))) + _989) * _954;
        float _999 = _922 * 0.5;
        float _1000 = _932 * 0.5;
        float _1001 = _942 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_238, _239, _240), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3268 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3279 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3290 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))) * (_1026 + 1.0))) + _1031) * _955;
        float _1041 = _923 * 0.5;
        float _1042 = _933 * 0.5;
        float _1043 = _943 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_238, _239, _240), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3301 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3312 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3323 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * (_1068 + 1.0))) + _1073) * _956;
        _1090 = _923;
        _1091 = _922;
        _1092 = _921;
        _1093 = _933;
        _1094 = _932;
        _1095 = _931;
        _1096 = _943;
        _1097 = _942;
        _1098 = _941;
        _1099 = _956;
        _1100 = _955;
        _1101 = _954;
        _1102 = cbModelParam._m0[36u].w * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1103 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1104 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
    }
    else
    {
        _1090 = _778;
        _1091 = _778;
        _1092 = _778;
        _1093 = _778;
        _1094 = _778;
        _1095 = _778;
        _1096 = _778;
        _1097 = _778;
        _1098 = _778;
        _1099 = _778;
        _1100 = _778;
        _1101 = _778;
        _1102 = 0.0;
        _1103 = 0.0;
        _1104 = 0.0;
    }
    float _1114 = (cbModelParam._m0[1u].x * (_1102 - _790)) + _790;
    float _1115 = (cbModelParam._m0[1u].x * (_1103 - _791)) + _791;
    float _1116 = (cbModelParam._m0[1u].x * (_1104 - _792)) + _792;
    float _1137 = fma(_1116, cbSceneParam._m0[89u].z, fma(_1115, cbSceneParam._m0[89u].y, _1114 * cbSceneParam._m0[89u].x));
    float _1140 = fma(_1116, cbSceneParam._m0[90u].z, fma(_1115, cbSceneParam._m0[90u].y, _1114 * cbSceneParam._m0[90u].x));
    float _1143 = fma(_1116, cbSceneParam._m0[91u].z, fma(_1115, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1114));
    float _1158 = _414 * 0.5;
    float _1159 = _415 * 0.5;
    float _1160 = _416 * 0.5;
    float _1161 = dot(vec4(_1158, _1159, _1160, 1.0), vec4(_1092, _1095, _1098, _1101));
    float _1164 = dot(vec4(_1158, _1159, _1160, 1.0), vec4(_1091, _1094, _1097, _1100));
    float _1167 = dot(vec4(_1158, _1159, _1160, 1.0), vec4(_1090, _1093, _1096, _1099));
    float _1201;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1174 = dot(vec4(_1158, _1159, _1160, 1.0), vec4(_777, _781, _784, _787));
        float _1178 = dot(vec4(_1158, _1159, _1160, 1.0), vec4(_779, _782, _785, _788));
        float _1182 = dot(vec4(_1158, _1159, _1160, 1.0), vec4(_780, _783, _786, _789));
        float _1189 = dot(vec4(cbModelParam._m0[39u]), vec4(_1158, _1159, _1160, 1.0));
        _1201 = dot(vec3(isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)), isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)), isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1189) ? 0.0 : (isnan(0.0) ? _1189 : max(0.0, _1189))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1201 = 1.0;
    }
    float _1212;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1203 = dot(vec4(cbModelParam._m0[40u]), vec4(_1158, _1159, _1160, 1.0));
        _1212 = dot(vec3(isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)), isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1203) ? 0.0 : (isnan(0.0) ? _1203 : max(0.0, _1203))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1212 = 1.0;
    }
    float _1216 = (_1212 * cbModelParam._m0[1u].x) + (_1201 * (1.0 - cbModelParam._m0[1u].x));
    float _1225 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1307;
    float _1309;
    float _1311;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1274 = fma(_446, cbModelParam._m0[13u].z, fma(_442, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _438)) + cbModelParam._m0[13u].w;
        float _1278 = fma(_446, cbModelParam._m0[14u].z, fma(_442, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _438)) + cbModelParam._m0[14u].w;
        float _1282 = fma(_446, cbModelParam._m0[15u].z, fma(_442, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _438)) + cbModelParam._m0[15u].w;
        float _1285 = fma(_416, cbModelParam._m0[13u].z, fma(_415, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _414));
        float _1288 = fma(_416, cbModelParam._m0[14u].z, fma(_415, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _414));
        float _1291 = fma(_416, cbModelParam._m0[15u].z, fma(_415, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _414));
        float _1317;
        if (_1285 > 0.0)
        {
            _1317 = abs((1.0 - _1274) / _1285);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1285 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1274 + 1.0) / _1285);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1317 = frontier_phi_19_17_ladder;
        }
        float _1545;
        if (_1288 > 0.0)
        {
            _1545 = abs((1.0 - _1278) / _1288);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1288 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1278 + 1.0) / _1288);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1545 = frontier_phi_28_24_ladder;
        }
        float _1737;
        if (_1291 > 0.0)
        {
            _1737 = abs((1.0 - _1282) / _1291);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1291 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1282 + 1.0) / _1291);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1737 = frontier_phi_40_35_ladder;
        }
        float _1739 = isnan(_1545) ? _1317 : (isnan(_1317) ? _1545 : min(_1317, _1545));
        float _1740 = isnan(_1737) ? _1739 : (isnan(_1739) ? _1737 : min(_1739, _1737));
        float _1744 = (_1740 * _1285) + _1274;
        float _1745 = (_1740 * _1288) + _1278;
        float _1746 = (_1740 * _1291) + _1282;
        float _1747 = _1740 * 9.9999997473787516355514526367188e-05;
        float _1749 = (-1.0) - _1747;
        float _1751 = _1747 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1746 > _1751) || ((_1746 < _1749) || ((_1745 > _1751) || ((_1745 < _1749) || ((_1744 < _1749) || (_1744 > _1751))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1843 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1746, cbModelParam._m0[9u].z, fma(_1745, cbModelParam._m0[9u].y, _1744 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1746, cbModelParam._m0[10u].z, fma(_1745, cbModelParam._m0[10u].y, _1744 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1746, cbModelParam._m0[11u].z, fma(_1745, cbModelParam._m0[11u].y, _1744 * cbModelParam._m0[11u].x))), _1225);
            frontier_phi_18_40_ladder = _1843.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1843.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1843.x * cbModelParam._m0[1u].y;
        }
        _1307 = frontier_phi_18_40_ladder_2;
        _1309 = frontier_phi_18_40_ladder_1;
        _1311 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1295 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_414, _415, _416), _1225);
        _1307 = _1295.x * cbModelParam._m0[1u].y;
        _1309 = _1295.y * cbModelParam._m0[1u].y;
        _1311 = _1295.z * cbModelParam._m0[1u].y;
    }
    float _1314 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1407;
    float _1409;
    float _1411;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1371 = fma(_446, cbModelParam._m0[21u].z, fma(_442, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _438)) + cbModelParam._m0[21u].w;
        float _1375 = fma(_446, cbModelParam._m0[22u].z, fma(_442, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _438)) + cbModelParam._m0[22u].w;
        float _1379 = fma(_446, cbModelParam._m0[23u].z, fma(_442, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _438)) + cbModelParam._m0[23u].w;
        float _1382 = fma(_416, cbModelParam._m0[21u].z, fma(_415, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _414));
        float _1385 = fma(_416, cbModelParam._m0[22u].z, fma(_415, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _414));
        float _1388 = fma(_416, cbModelParam._m0[23u].z, fma(_415, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _414));
        float _1550;
        if (_1382 > 0.0)
        {
            _1550 = abs((1.0 - _1371) / _1382);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1371 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1550 = frontier_phi_30_26_ladder;
        }
        float _1764;
        if (_1385 > 0.0)
        {
            _1764 = abs((1.0 - _1375) / _1385);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1375 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1764 = frontier_phi_42_37_ladder;
        }
        float _1915;
        if (_1388 > 0.0)
        {
            _1915 = abs((1.0 - _1379) / _1388);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1379 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1915 = frontier_phi_51_48_ladder;
        }
        float _1917 = isnan(_1764) ? _1550 : (isnan(_1550) ? _1764 : min(_1550, _1764));
        float _1918 = isnan(_1915) ? _1917 : (isnan(_1917) ? _1915 : min(_1917, _1915));
        float _1922 = (_1918 * _1382) + _1371;
        float _1923 = (_1918 * _1385) + _1375;
        float _1924 = (_1918 * _1388) + _1379;
        float _1925 = _1918 * 9.9999997473787516355514526367188e-05;
        float _1926 = (-1.0) - _1925;
        float _1928 = _1925 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1924 > _1928) || ((_1924 < _1926) || ((_1923 > _1928) || ((_1923 < _1926) || ((_1922 < _1926) || (_1922 > _1928))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2147 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1924, cbModelParam._m0[17u].z, fma(_1923, cbModelParam._m0[17u].y, _1922 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1924, cbModelParam._m0[18u].z, fma(_1923, cbModelParam._m0[18u].y, _1922 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1924, cbModelParam._m0[19u].z, fma(_1923, cbModelParam._m0[19u].y, _1922 * cbModelParam._m0[19u].x))), _1314);
            frontier_phi_27_51_ladder = _2147.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2147.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2147.x * cbModelParam._m0[1u].z;
        }
        _1407 = frontier_phi_27_51_ladder_2;
        _1409 = frontier_phi_27_51_ladder_1;
        _1411 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1391 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_414, _415, _416), _1314);
        _1407 = _1391.x * cbModelParam._m0[1u].z;
        _1409 = _1391.y * cbModelParam._m0[1u].z;
        _1411 = _1391.z * cbModelParam._m0[1u].z;
    }
    float _1423 = _405 * 0.01200000010430812835693359375;
    float _1425 = _1423 * ((cbModelParam._m0[1u].w * (_1407 - _1307)) + _1307);
    float _1426 = _1423 * ((cbModelParam._m0[1u].w * (_1409 - _1309)) + _1309);
    float _1427 = _1423 * ((cbModelParam._m0[1u].w * (_1411 - _1311)) + _1311);
    float _1430 = fma(_1427, cbSceneParam._m0[89u].z, fma(_1426, cbSceneParam._m0[89u].y, _1425 * cbSceneParam._m0[89u].x));
    float _1433 = fma(_1427, cbSceneParam._m0[90u].z, fma(_1426, cbSceneParam._m0[90u].y, _1425 * cbSceneParam._m0[90u].x));
    float _1436 = fma(_1427, cbSceneParam._m0[91u].z, fma(_1426, cbSceneParam._m0[91u].y, _1425 * cbSceneParam._m0[91u].x));
    vec4 _1444 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_339, _340));
    float _1446 = _1444.w;
    float _1458 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1446);
    float _1459 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1446);
    float _1460 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1446);
    uvec4 _1464 = floatBitsToUint(cbInstanceData._m0[_379 + 5u]);
    uint _1466 = _1464.x * 14u;
    uint _1467 = _1466 + 13u;
    float _1474 = _405 + (-1.0);
    float _1480 = (cbLight._m0[_1467].x * _1474) + 1.0;
    float _1481 = (cbLight._m0[_1467].y * _1474) + 1.0;
    float _1482 = (cbLight._m0[_1467].z * _1474) + 1.0;
    float _1483 = (cbLight._m0[_1467].w * _1474) + 1.0;
    uint _1484 = _1466 + 5u;
    float _1490 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
    uint _1494 = _1466 + 4u;
    float _1504 = isnan(1.0) ? _1480 : (isnan(_1480) ? 1.0 : min(_1480, 1.0));
    uint _1508 = _1466 | 1u;
    float _1519 = dot(vec3(cbLight._m0[_1466].xyz), vec3(_238, _239, _240));
    float _1522 = dot(vec3(cbLight._m0[_1508].xyz), vec3(_238, _239, _240));
    float _3459 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
    float _3470 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
    float _1527 = (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * 0.3183098733425140380859375;
    float _1529 = (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * 0.3183098733425140380859375;
    float _1536 = ((cbLight._m0[_1484].x * _1490) * _1529) + (((cbLight._m0[_1494].x * _1458) * _1504) * _1527);
    float _1537 = ((_1490 * cbLight._m0[_1484].y) * _1529) + (((cbLight._m0[_1494].y * _1459) * _1504) * _1527);
    float _1538 = ((_1490 * cbLight._m0[_1484].z) * _1529) + (((cbLight._m0[_1494].z * _1460) * _1504) * _1527);
    uvec4 _1542 = floatBitsToUint(cbLight._m0[_1466 + 12u]);
    bool _1544 = _1542.x == 0u;
    float _1555;
    float _1557;
    float _1559;
    if (_1544)
    {
        _1555 = _1536;
        _1557 = _1537;
        _1559 = _1538;
    }
    else
    {
        uint _1563 = _1466 + 6u;
        float _1579 = (dot(vec3(cbLight._m0[_1466 + 2u].xyz), vec3(_238, _239, _240)) * 0.5) + 0.5;
        float _1580 = _1579 * _1579;
        float _3481 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1582 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
        _1555 = (((cbLight._m0[_1563].x * 0.3183098733425140380859375) * _1581) * _1582) + _1536;
        _1557 = (((cbLight._m0[_1563].y * 0.3183098733425140380859375) * _1581) * _1582) + _1537;
        _1559 = (((cbLight._m0[_1563].z * 0.3183098733425140380859375) * _1581) * _1582) + _1538;
    }
    bool _1562 = _1542.y == 0u;
    float _1600;
    float _1602;
    float _1604;
    if (_1562)
    {
        _1600 = _1555;
        _1602 = _1557;
        _1604 = _1559;
    }
    else
    {
        uint _1708 = _1466 + 7u;
        float _1724 = (dot(vec3(cbLight._m0[_1466 + 3u].xyz), vec3(_238, _239, _240)) * 0.5) + 0.5;
        float _1725 = _1724 * _1724;
        float _3497 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1727 = isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0));
        _1600 = (((cbLight._m0[_1708].x * 0.3183098733425140380859375) * _1726) * _1727) + _1555;
        _1602 = (((cbLight._m0[_1708].y * 0.3183098733425140380859375) * _1726) * _1727) + _1557;
        _1604 = (((cbLight._m0[_1708].z * 0.3183098733425140380859375) * _1726) * _1727) + _1559;
    }
    uint _1606 = _1466 + 8u;
    float _1612 = cbLight._m0[_1466].x + _318;
    float _1613 = cbLight._m0[_1466].y + _319;
    float _1614 = cbLight._m0[_1466].z + _320;
    float _1618 = inversesqrt(dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614)));
    float _1622 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1466].xyz));
    float _3513 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _1625 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _1626 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _1627 = dot(vec3(cbLight._m0[_1466].xyz), vec3(_1612 * _1618, _1613 * _1618, _1614 * _1618));
    float _3535 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1638 = (exp2(log2(1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1644 = (0.5 / ((_1625 + 9.9999999392252902907785028219223e-09) + _1626)) * _1625;
    float _3546 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1646 = (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * 0.31831014156341552734375;
    uint _1660 = _1466 + 9u;
    float _1666 = cbLight._m0[_1508].x + _318;
    float _1667 = cbLight._m0[_1508].y + _319;
    float _1668 = cbLight._m0[_1508].z + _320;
    float _1672 = inversesqrt(dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668)));
    float _1676 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1508].xyz));
    float _3557 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1679 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _1680 = dot(vec3(cbLight._m0[_1508].xyz), vec3(_1666 * _1672, _1667 * _1672, _1668 * _1672));
    float _3568 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1689 = (exp2(log2(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1693 = (0.5 / ((_1679 + 9.9999999392252902907785028219223e-09) + _1626)) * _1679;
    float _3579 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1695 = (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * 0.31831014156341552734375;
    float _1705 = (((_1689 * cbLight._m0[_1660].x) * _1695) * _1490) + ((((cbLight._m0[_1606].x * _1458) * _1638) * _1646) * _1504);
    float _1706 = (((_1689 * cbLight._m0[_1660].y) * _1695) * _1490) + ((((cbLight._m0[_1606].y * _1459) * _1638) * _1646) * _1504);
    float _1707 = (((_1689 * cbLight._m0[_1660].z) * _1695) * _1490) + ((((cbLight._m0[_1606].z * _1460) * _1638) * _1646) * _1504);
    float _1769;
    float _1771;
    float _1773;
    if (_1544)
    {
        _1769 = _1705;
        _1771 = _1706;
        _1773 = _1707;
    }
    else
    {
        uint _1775 = _1466 + 10u;
        uint _1781 = _1466 + 2u;
        float _1787 = cbLight._m0[_1781].x + _318;
        float _1788 = cbLight._m0[_1781].y + _319;
        float _1789 = cbLight._m0[_1781].z + _320;
        float _1793 = inversesqrt(dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789)));
        float _1797 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1781].xyz));
        float _3590 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1800 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1801 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_1787 * _1793, _1788 * _1793, _1789 * _1793));
        float _3601 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1810 = (exp2(log2(1.0 - (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1814 = (0.5 / ((_1800 + 9.9999999392252902907785028219223e-09) + _1626)) * _1800;
        float _3612 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1816 = (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * 0.31831014156341552734375;
        float _1817 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
        _1769 = (((_1810 * cbLight._m0[_1775].x) * _1816) * _1817) + _1705;
        _1771 = (((_1810 * cbLight._m0[_1775].y) * _1816) * _1817) + _1706;
        _1773 = (((_1810 * cbLight._m0[_1775].z) * _1816) * _1817) + _1707;
    }
    float _1852;
    float _1854;
    float _1856;
    if (_1562)
    {
        _1852 = _1769;
        _1854 = _1771;
        _1856 = _1773;
    }
    else
    {
        uint _1863 = _1466 + 11u;
        uint _1869 = _1466 + 3u;
        float _1875 = cbLight._m0[_1869].x + _318;
        float _1876 = cbLight._m0[_1869].y + _319;
        float _1877 = cbLight._m0[_1869].z + _320;
        float _1881 = inversesqrt(dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877)));
        float _1885 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1869].xyz));
        float _3628 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1888 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1889 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_1875 * _1881, _1876 * _1881, _1877 * _1881));
        float _3639 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1898 = (exp2(log2(1.0 - (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1902 = (0.5 / ((_1888 + 9.9999999392252902907785028219223e-09) + _1626)) * _1888;
        float _3650 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1904 = (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * 0.31831014156341552734375;
        float _1905 = isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0));
        _1852 = (((_1898 * cbLight._m0[_1863].x) * _1904) * _1905) + _1769;
        _1854 = (((_1898 * cbLight._m0[_1863].y) * _1904) * _1905) + _1771;
        _1856 = (((_1898 * cbLight._m0[_1863].z) * _1904) * _1905) + _1773;
    }
    float _2039;
    float _2041;
    float _2043;
    float _2045;
    float _2047;
    float _2049;
    if (_1464.y == 0u)
    {
        float _1980 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1981 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1980;
        float _1982 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1980;
        float _1983 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1980;
        uvec4 _1995 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1996 = _1995.x;
        uint _2007 = uint((float(_1995.y) * floor(float(uint(cbSceneParam._m0[85u].y * _340) / _1996))) + floor(float(uint(cbSceneParam._m0[85u].x * _339) / _1996)));
        float _2017 = (log2(_1983 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2018 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        uint _2021 = uint(isnan(14.0) ? _2018 : (isnan(_2018) ? 14.0 : min(_2018, 14.0)));
        uvec4 _2026 = texelFetch(g_lightClusterGridBuffer, int(((_2021 << 2u) + (_2007 << 6u)) >> 2u));
        uint _2027 = _2026.x;
        uint _2028 = _1995.z;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        float _2160;
        float _2162;
        if (((((1u << ((_2028 >> 4u) & 15u)) + 4294967295u) & _2027) == 0u) || ((_2028 & 240u) == 0u))
        {
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
            _2160 = 0.0;
            _2162 = 0.0;
        }
        else
        {
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2161;
            float _2163;
            float _2303 = 0.0;
            float _2304 = 0.0;
            float _2305 = 0.0;
            float _2306 = 0.0;
            float _2307 = 0.0;
            float _2308 = 0.0;
            uint _2309 = 0u;
            uint _2318;
            bool _2319;
            for (;;)
            {
                _2318 = texelFetch(g_lightClassification, int((((_2021 << 5u) + (_2007 << 9u)) + (_2309 << 2u)) >> 2u)).x;
                _2319 = _2318 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2319)
                {
                    frontier_phi_68_pred = _2305;
                    frontier_phi_68_pred_1 = _2308;
                    frontier_phi_68_pred_2 = _2307;
                    frontier_phi_68_pred_3 = _2306;
                    frontier_phi_68_pred_4 = _2304;
                    frontier_phi_68_pred_5 = _2303;
                }
                else
                {
                    float _2448;
                    float _2449;
                    float _2450;
                    float _2451;
                    float _2452;
                    float _2453;
                    uint _2454;
                    _2448 = _2303;
                    _2449 = _2304;
                    _2450 = _2305;
                    _2451 = _2306;
                    _2452 = _2307;
                    _2453 = _2308;
                    _2454 = _2318;
                    float _2375;
                    float _2376;
                    float _2377;
                    float _2378;
                    float _2379;
                    float _2380;
                    for (;;)
                    {
                        uint _2458 = uint(findLSB(_2454)) + (_2309 << 5u);
                        uint _2455 = (_2454 + 4294967295u) & _2454;
                        uint _2460 = _2458 * 48u;
                        vec4 _2474 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2460)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 3u)).x));
                        uint _2480 = (_2458 * 48u) + 4u;
                        vec4 _2493 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2480)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 3u)).x));
                        uint _2499 = (_2458 * 48u) + 8u;
                        vec3 _2510 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2499)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 2u)).x));
                        float _2514 = _2474.x - _1981;
                        float _2515 = _2474.y - _1982;
                        float _2516 = _2474.z - _1983;
                        float _2517 = dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516));
                        float _2520 = inversesqrt(_2517);
                        float _2529 = 1.0 - (_2517 * _2474.w);
                        float _3676 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
                        float _2530 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
                        float _2531 = sqrt(_2517) * _2493.w;
                        float _2534 = 1.39999997615814208984375 / (_2531 + 1.39999997615814208984375);
                        float _2535 = _2534 * _2534;
                        float _2538 = ((1.0 - _2535) * dot(vec3(_360, _363, _366), vec3(_2520 * _2514, _2520 * _2515, _2520 * _2516))) + _2535;
                        float _2541 = _2531 * _2531;
                        float _2545 = ((isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0))) * _2530) / ((_2541 * 0.699999988079071044921875) + 1.0);
                        float _2549 = (-0.0) - _1981;
                        float _2550 = (-0.0) - _1982;
                        float _2551 = (-0.0) - _1983;
                        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
                        float _2559 = dot(vec3(_360, _363, _366), vec3(_2555 * _2549, _2555 * _2550, _2555 * _2551));
                        float _3692 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
                        float _3703 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
                        float _2563 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
                        float _2567 = (0.5 / (((isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) + 9.9999999392252902907785028219223e-09) + _2563)) * _2563;
                        float _3714 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
                        float _2576 = (((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 3.1415927410125732421875) / ((_2541 * 2.1991131305694580078125) + 3.141590118408203125)) * _2530;
                        _2378 = (_2545 * _2493.x) + _2451;
                        _2379 = (_2545 * _2493.y) + _2452;
                        _2380 = (_2545 * _2493.z) + _2453;
                        _2375 = (_2576 * _2510.x) + _2448;
                        _2376 = (_2576 * _2510.y) + _2449;
                        _2377 = (_2576 * _2510.z) + _2450;
                        if (_2455 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2448 = _2375;
                            _2449 = _2376;
                            _2450 = _2377;
                            _2451 = _2378;
                            _2452 = _2379;
                            _2453 = _2380;
                            _2454 = _2455;
                        }
                    }
                    frontier_phi_68_pred = _2377;
                    frontier_phi_68_pred_1 = _2380;
                    frontier_phi_68_pred_2 = _2379;
                    frontier_phi_68_pred_3 = _2378;
                    frontier_phi_68_pred_4 = _2376;
                    frontier_phi_68_pred_5 = _2375;
                }
                _2157 = frontier_phi_68_pred;
                _2163 = frontier_phi_68_pred_1;
                _2161 = frontier_phi_68_pred_2;
                _2159 = frontier_phi_68_pred_3;
                _2155 = frontier_phi_68_pred_4;
                _2153 = frontier_phi_68_pred_5;
                uint _2310 = _2309 + 1u;
                if (_2310 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2303 = _2153;
                    _2304 = _2155;
                    _2305 = _2157;
                    _2306 = _2159;
                    _2307 = _2161;
                    _2308 = _2163;
                    _2309 = _2310;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
            _2160 = _2161;
            _2162 = _2163;
        }
        uvec4 _2166 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2167 = _2166.z;
        uint _2169 = (_2167 >> 8u) & 15u;
        float _2274;
        float _2276;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        if (((4294967295u << _2169) & _2027) == 0u)
        {
            _2274 = _2152;
            _2276 = _2154;
            _2278 = _2156;
            _2280 = _2158;
            _2282 = _2160;
            _2284 = _2162;
        }
        else
        {
            float _2299 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2169 < ((_2167 >> 12u) & 15u))
            {
                float _2275;
                float _2277;
                float _2279;
                float _2281;
                float _2283;
                float _2285;
                float _2431 = _2152;
                float _2432 = _2154;
                float _2433 = _2156;
                float _2434 = _2158;
                float _2435 = _2160;
                float _2436 = _2162;
                uint _2437 = _2169;
                uint _2446;
                bool _2447;
                for (;;)
                {
                    _2446 = texelFetch(g_lightClassification, int((((_2021 << 5u) + (_2007 << 9u)) + (_2437 << 2u)) >> 2u)).x;
                    _2447 = _2446 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2447)
                    {
                        frontier_phi_79_pred = _2436;
                        frontier_phi_79_pred_1 = _2435;
                        frontier_phi_79_pred_2 = _2434;
                        frontier_phi_79_pred_3 = _2433;
                        frontier_phi_79_pred_4 = _2432;
                        frontier_phi_79_pred_5 = _2431;
                    }
                    else
                    {
                        float _2590;
                        float _2591;
                        float _2592;
                        float _2593;
                        float _2594;
                        float _2595;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2603 = _2431;
                        float _2604 = _2432;
                        float _2605 = _2433;
                        float _2606 = _2434;
                        float _2607 = _2435;
                        float _2608 = _2436;
                        uint _2609 = _2446;
                        uint _2610;
                        vec4 _2635;
                        float _2636;
                        vec4 _2651;
                        vec3 _2663;
                        vec4 _2679;
                        vec4 _2695;
                        float _2742;
                        bool _2743;
                        for (;;)
                        {
                            uint _2620 = ((_2437 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2609));
                            _2610 = (_2609 + 4294967295u) & _2609;
                            uint _2622 = _2620 * 40u;
                            _2635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 3u)).x));
                            _2636 = _2635.w;
                            uint _2638 = (_2620 * 40u) + 4u;
                            _2651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 3u)).x));
                            uint _2653 = (_2620 * 40u) + 8u;
                            _2663 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 2u)).x));
                            uint _2666 = (_2620 * 40u) + 16u;
                            _2679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 3u)).x));
                            uint _2682 = (_2620 * 40u) + 20u;
                            _2695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 3u)).x));
                            uint _2698 = (_2620 * 40u) + 24u;
                            vec4 _2711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 3u)).x));
                            uint _2717 = (_2620 * 40u) + 28u;
                            vec4 _2730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 3u)).x));
                            _2742 = fma(_1983, _2730.z, fma(_1982, _2730.y, _2730.x * _1981)) + _2730.w;
                            _2743 = !((fma(_1983, _2711.z, fma(_1982, _2711.y, _2711.x * _1981)) + _2711.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2743)
                            {
                                float _2770 = _2635.x - _1981;
                                float _2771 = _2635.y - _1982;
                                float _2772 = _2635.z - _1983;
                                float _2773 = dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772));
                                float _2776 = inversesqrt(_2773);
                                float _2777 = _2776 * _2770;
                                float _2778 = _2776 * _2771;
                                float _2779 = _2776 * _2772;
                                float _2783 = 1.0 - (_2773 / (_2636 * _2636));
                                float _3725 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                                float _2784 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
                                float _2788 = sqrt(_2773) * _2651.w;
                                float _2790 = 1.39999997615814208984375 / (_2788 + 1.39999997615814208984375);
                                float _2791 = _2790 * _2790;
                                float _2792 = 1.0 - _2791;
                                float _2794 = (_2792 * dot(vec3(_2777, _2778, _2779), vec3(_360, _363, _366))) + _2791;
                                float _2797 = _2788 * _2788;
                                float _2801 = (fma(_1983, _2679.z, fma(_1982, _2679.y, _2679.x * _1981)) + _2679.w) / _2742;
                                float _2802 = (fma(_1983, _2695.z, fma(_1982, _2695.y, _2695.x * _1981)) + _2695.w) / _2742;
                                float _2806 = 1.0 - dot(vec2(_2801, _2802), vec2(_2801, _2802));
                                float _3741 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                                float _2807 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
                                float _2808 = _2807 * (((isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0))) * _2784) / ((_2797 * 0.699999988079071044921875) + 1.0));
                                float _2818 = dot(vec3(_360, _363, _366), vec3((-0.0) - (_1981 * _2299), (-0.0) - (_1982 * _2299), (-0.0) - (_1983 * _2299)));
                                float _3752 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                                float _2826 = (_2792 * dot(vec3(_360, _363, _366), vec3(_2777, _2778, _2779))) + _2791;
                                float _3763 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                                float _2827 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
                                float _2831 = (0.5 / (((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) + 9.9999999392252902907785028219223e-09) + _2827)) * _2827;
                                float _3774 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                                float _2838 = (_2807 * _2784) * (((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 3.1415927410125732421875) / ((_2797 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2808 * _2651.z;
                                frontier_phi_85_pred_1 = _2808 * _2651.y;
                                frontier_phi_85_pred_2 = _2808 * _2651.x;
                                frontier_phi_85_pred_3 = _2838 * _2663.z;
                                frontier_phi_85_pred_4 = _2838 * _2663.y;
                                frontier_phi_85_pred_5 = _2838 * _2663.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2847 = frontier_phi_85_pred;
                            _2846 = frontier_phi_85_pred_1;
                            _2845 = frontier_phi_85_pred_2;
                            _2844 = frontier_phi_85_pred_3;
                            _2843 = frontier_phi_85_pred_4;
                            _2842 = frontier_phi_85_pred_5;
                            _2593 = _2845 + _2606;
                            _2594 = _2846 + _2607;
                            _2595 = _2847 + _2608;
                            _2590 = _2842 + _2603;
                            _2591 = _2843 + _2604;
                            _2592 = _2844 + _2605;
                            if (_2610 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2603 = _2590;
                                _2604 = _2591;
                                _2605 = _2592;
                                _2606 = _2593;
                                _2607 = _2594;
                                _2608 = _2595;
                                _2609 = _2610;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2595;
                        frontier_phi_79_pred_1 = _2594;
                        frontier_phi_79_pred_2 = _2593;
                        frontier_phi_79_pred_3 = _2592;
                        frontier_phi_79_pred_4 = _2591;
                        frontier_phi_79_pred_5 = _2590;
                    }
                    _2285 = frontier_phi_79_pred;
                    _2283 = frontier_phi_79_pred_1;
                    _2281 = frontier_phi_79_pred_2;
                    _2279 = frontier_phi_79_pred_3;
                    _2277 = frontier_phi_79_pred_4;
                    _2275 = frontier_phi_79_pred_5;
                    uint _2438 = _2437 + 1u;
                    if (_2438 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2431 = _2275;
                        _2432 = _2277;
                        _2433 = _2279;
                        _2434 = _2281;
                        _2435 = _2283;
                        _2436 = _2285;
                        _2437 = _2438;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2281;
                frontier_phi_60_61_ladder_1 = _2285;
                frontier_phi_60_61_ladder_2 = _2283;
                frontier_phi_60_61_ladder_3 = _2279;
                frontier_phi_60_61_ladder_4 = _2277;
                frontier_phi_60_61_ladder_5 = _2275;
            }
            else
            {
                frontier_phi_60_61_ladder = _2158;
                frontier_phi_60_61_ladder_1 = _2162;
                frontier_phi_60_61_ladder_2 = _2160;
                frontier_phi_60_61_ladder_3 = _2156;
                frontier_phi_60_61_ladder_4 = _2154;
                frontier_phi_60_61_ladder_5 = _2152;
            }
            _2274 = frontier_phi_60_61_ladder_5;
            _2276 = frontier_phi_60_61_ladder_4;
            _2278 = frontier_phi_60_61_ladder_3;
            _2280 = frontier_phi_60_61_ladder;
            _2282 = frontier_phi_60_61_ladder_2;
            _2284 = frontier_phi_60_61_ladder_1;
        }
        float _2289 = isnan(1.0) ? _405 : (isnan(_405) ? 1.0 : min(_405, 1.0));
        _2039 = (_2289 * _2280) + _1600;
        _2041 = (_2289 * _2282) + _1602;
        _2043 = (_2289 * _2284) + _1604;
        _2045 = ((_2274 * 0.039999999105930328369140625) * _2289) + _1852;
        _2047 = ((_2276 * 0.039999999105930328369140625) * _2289) + _1854;
        _2049 = ((_2278 * 0.039999999105930328369140625) * _2289) + _1856;
    }
    else
    {
        _2039 = _1600;
        _2041 = _1602;
        _2043 = _1604;
        _2045 = _1852;
        _2047 = _1854;
        _2049 = _1856;
    }
    uint _2055 = _381 + uint(cbMatDynParam._m0[0u].w);
    float _3790 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3801 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3812 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _2086 = (((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_2039 + ((isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0))) * _405))) + ((_2045 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _1216)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _229.x) * cbInstanceData._m0[_2055].x);
    float _2088 = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _229.y) * cbInstanceData._m0[_2055].y) + ((_2047 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _1216)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_2041 + ((isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))) * _405)));
    float _2090 = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _229.z) * cbInstanceData._m0[_2055].z) + ((_2049 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _1216)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_2043 + ((isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0))) * _405)));
    float _2091 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2092 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2093 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    uint _2094 = _379 + 6u;
    float _2102 = _339 / cbSceneParam._m0[86u].x;
    float _2103 = _340 / cbSceneParam._m0[86u].y;
    vec4 _2117 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2102, _2103, (log2((isnan(cbSceneParam._m0[77u].w) ? _260 : (isnan(_260) ? cbSceneParam._m0[77u].w : min(_260, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2119 = _2117.x;
    float _2120 = _2117.y;
    float _2121 = _2117.z;
    float _2122 = _2117.w;
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    if (_260 > cbSceneParam._m0[78u].w)
    {
        float _2177 = isnan(_260) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _260 : min(cbSceneParam._m0[80u].w, _260));
        float _2178 = _2177 / _260;
        float _2189 = _2178 * _311;
        float _2190 = _312 * _2178;
        float _2191 = (-0.0) - _2190;
        float _2192 = _2178 * _313;
        float _2194 = (cbSceneParam._m0[77u].w * _2191) / _2177;
        float _2195 = _2194 + cbSceneParam._m0[79u].w;
        float _2196 = cbSceneParam._m0[79u].w - _2190;
        float _2202 = sqrt(((_2189 * _2189) + (_2190 * _2190)) + (_2192 * _2192));
        float _2205 = (1.0 - (cbSceneParam._m0[77u].w / _2177)) * _2202;
        float _2210 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2212 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2388;
        if (abs((_2191 - _2194) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2388 = ((((_2195 > 0.0) ? exp2(_2210 * _2195) : (2.0 - exp2(_2212 * _2195))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2205;
        }
        else
        {
            float _2332 = 1.0 / cbSceneParam._m0[80u].x;
            float _2333 = isnan(_2196) ? _2195 : (isnan(_2195) ? _2196 : max(_2195, _2196));
            float _2334 = isnan(_2196) ? _2195 : (isnan(_2195) ? _2196 : min(_2195, _2196));
            float _2343 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : min(_2333, 0.0));
            float _2344 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : min(_2334, 0.0));
            _2388 = ((abs(_2202 / _2191) * cbSceneParam._m0[80u].y) * ((((_2343 - _2344) * 2.0) - ((exp2(_2210 * (isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0)))) - exp2(_2210 * (isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0))))) * _2332)) - ((exp2(_2212 * _2343) - exp2(_2212 * _2344)) * _2332))) + (_2205 * cbSceneParam._m0[80u].z);
        }
        vec4 _2390 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2102, _2103, 1.0), 0.0);
        float _2399 = exp2((_2388 * (-1.44269502162933349609375)) * (1.0 - _2390.w));
        float _2400 = log2(_2399);
        float _2416 = log2(_2122);
        _2214 = (exp2(_2416 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2400 * cbSceneParam._m0[78u].x)) * _2390.x) / cbSceneParam._m0[78u].x)) + _2119;
        _2216 = (exp2(_2416 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2400 * cbSceneParam._m0[78u].y)) * _2390.y) / cbSceneParam._m0[78u].y)) + _2120;
        _2218 = (exp2(_2416 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2400 * cbSceneParam._m0[78u].z)) * _2390.z) / cbSceneParam._m0[78u].z)) + _2121;
        _2220 = _2399 * _2122;
    }
    else
    {
        _2214 = _2119;
        _2216 = _2120;
        _2218 = _2121;
        _2220 = _2122;
    }
    bool _2426;
    vec4 _2230;
    vec4 _2253;
    float _2255;
    float _2259;
    float _2260;
    float _2261;
    float _2262;
    bool _2273;
    for (;;)
    {
        _2230 = cbMatDynParam._m0[0u];
        float _2232 = roundEven(_2230.y);
        bool _2233 = _2232 == 3.0;
        float _2235 = log2(_2220);
        float _2242 = exp2(_2235 * cbSceneParam._m0[78u].x) * _2091;
        float _2243 = exp2(_2235 * cbSceneParam._m0[78u].y) * _2092;
        float _2244 = exp2(_2235 * cbSceneParam._m0[78u].z) * _2093;
        float _2251 = _327 + (-0.5);
        _2253 = cbMtdParam._m0[1u];
        _2255 = _2253.y * _2251;
        float _2258 = (_2232 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2259 = _2258 * (_2233 ? _2242 : (_2242 + (cbSceneParam._m0[72u].w * _2214)));
        _2260 = _2258 * (_2233 ? _2243 : (_2243 + (cbSceneParam._m0[72u].w * _2216)));
        _2261 = _2258 * (_2233 ? _2244 : (_2244 + (cbSceneParam._m0[72u].w * _2218)));
        _2262 = _2251 * 0.999000012874603271484375;
        _2273 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2273)
        {
            if ((cbInstanceData._m0[_379 + 7u].x + _2262) < 0.5)
            {
                _2426 = true;
                break;
            }
        }
        uint _2367 = _381 + uint(_2230.w);
        if ((cbInstanceData._m0[_2367].w < 1.0) && ((cbInstanceData._m0[_2367].w + _2262) < 0.5))
        {
            _2426 = true;
            break;
        }
        if ((_2255 + _204) < _2253.x)
        {
            _2426 = true;
            break;
        }
        _2426 = false;
        break;
    }
    float _2581;
    if (_2426)
    {
        discard_state = true;
        _2581 = 0.0;
    }
    else
    {
        _2581 = cbInstanceData._m0[_2094].w;
    }
    SV_Target.x = _2259;
    SV_Target.y = _2260;
    SV_Target.z = _2261;
    SV_Target.w = _2581;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2094].w;
    discard_exit();
}


