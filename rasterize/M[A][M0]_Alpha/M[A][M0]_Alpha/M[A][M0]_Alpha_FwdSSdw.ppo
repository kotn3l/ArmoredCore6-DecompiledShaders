#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _710;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    float _172;
    float _173;
    float _174;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _172 = (-0.0) - _165;
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
    }
    else
    {
        _172 = _165;
        _173 = _166;
        _174 = _167;
    }
    vec4 _194 = texture(sampler2D(M_A_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _201 = _194.x * cbMtdParam._m0[9u].x;
    float _202 = _194.y * cbMtdParam._m0[9u].y;
    float _203 = _194.z * cbMtdParam._m0[9u].z;
    float _204 = _194.w * TEXCOORD_1.z;
    float _208 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _209 = _208 * _172;
    float _210 = _208 * _173;
    float _211 = _208 * _174;
    float _2846 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _213 = isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0));
    float _2857 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _2868 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _2879 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _232 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    float _290 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _291 = _284 * _290;
    float _292 = _285 * _290;
    float _293 = _286 * _290;
    float _299 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _300 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _321 = fma(_211, cbSceneParam._m0[5u].z, fma(_210, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _209));
    float _324 = fma(_211, cbSceneParam._m0[6u].z, fma(_210, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _209));
    float _327 = fma(_211, cbSceneParam._m0[7u].z, fma(_210, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _209));
    uint _340 = uint(roundEven(NORMAL.w)) * 13u;
    uint _343 = (_340 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _349 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0)))) * cbInstanceData._m0[_343].x;
    float _350 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0)))) * cbInstanceData._m0[_343].y;
    float _351 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2879 : (isnan(_2879) ? 1.0 : min(_2879, 1.0)))) * cbInstanceData._m0[_343].z;
    float _2890 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _352 = isnan(1.0) ? _2890 : (isnan(_2890) ? 1.0 : min(_2890, 1.0));
    float _2901 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _353 = isnan(1.0) ? _2901 : (isnan(_2901) ? 1.0 : min(_2901, 1.0));
    float _2912 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _354 = isnan(1.0) ? _2912 : (isnan(_2912) ? 1.0 : min(_2912, 1.0));
    vec4 _363 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _299, cbSceneParam._m0[86u].y * _300));
    float _366 = _363.x * TEXCOORD_1.w;
    float _367 = dot(vec3(_209, _210, _211), vec3(_291, _292, _293));
    float _370 = _367 * 2.0;
    float _375 = (_370 * _209) - _291;
    float _376 = (_370 * _210) - _292;
    float _377 = (_370 * _211) - _293;
    float _399 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _403 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _407 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _709;
    float _711;
    float _712;
    float _713;
    float _714;
    float _715;
    float _716;
    float _717;
    float _718;
    float _719;
    float _720;
    float _721;
    float _722;
    float _723;
    float _724;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _434 = fma(_407, cbModelParam._m0[26u].z, fma(_403, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _399));
        float _438 = fma(_407, cbModelParam._m0[27u].z, fma(_403, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _399));
        float _442 = fma(_407, cbModelParam._m0[28u].z, fma(_403, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _399));
        float _467 = _399 + _209;
        float _468 = _403 + _210;
        float _469 = _407 + _211;
        float _479 = fma(_469, cbModelParam._m0[26u].z, fma(_468, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _467)) - _434;
        float _480 = fma(_469, cbModelParam._m0[27u].z, fma(_468, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _467)) - _438;
        float _481 = fma(_469, cbModelParam._m0[28u].z, fma(_468, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _467)) - _442;
        float _485 = inversesqrt(dot(vec3(_479, _480, _481), vec3(_479, _480, _481)));
        float _498 = ((_485 * _479) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_434 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _499 = ((_485 * _480) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_438 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _500 = ((_485 * _481) / cbModelParam._m0[34u].z) + ((((((_442 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _503 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_498, _499, _500), 0.0);
        vec4 _510 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_498, _499, _500), 0.0);
        vec4 _517 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_498, _499, _500), 0.0);
        vec4 _524 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_498, _499, _500), 0.0);
        float _537 = exp2((_503.w + (-0.5)) * 20.0) * 2.0;
        float _538 = _537 * (_503.x + (-0.5));
        float _539 = _537 * (_503.y + (-0.5));
        float _540 = _537 * (_503.z + (-0.5));
        float _547 = exp2((_510.w + (-0.5)) * 20.0) * 2.0;
        float _548 = _547 * (_510.x + (-0.5));
        float _549 = _547 * (_510.y + (-0.5));
        float _550 = _547 * (_510.z + (-0.5));
        float _557 = exp2((_517.w + (-0.5)) * 20.0) * 2.0;
        float _558 = _557 * (_517.x + (-0.5));
        float _559 = _557 * (_517.y + (-0.5));
        float _560 = _557 * (_517.z + (-0.5));
        float _567 = exp2((_524.w + (-0.5)) * 20.0) * 2.0;
        float _568 = _567 * (_524.x + (-0.5));
        float _569 = _567 * (_524.y + (-0.5));
        float _570 = _567 * (_524.z + (-0.5));
        float _571 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
        float _572 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
        float _573 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
        float _574 = _538 * 0.5;
        float _575 = _548 * 0.5;
        float _576 = _558 * 0.5;
        float _577 = dot(vec3(_574, _575, _576), vec3(_574, _575, _576));
        float _582 = (_577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_577);
        float _591 = (dot(vec3(_209, _210, _211), vec3(_582 * _574, _582 * _575, _582 * _576)) + 1.0) * 0.5;
        float _2938 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _601 = sqrt(((_575 * _575) + (_574 * _574)) + (_576 * _576)) / (_571 + 9.9999997473787516355514526367188e-06);
        float _2949 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _602 = isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0));
        float _603 = _602 * 2.0;
        float _607 = (1.0 - _602) / (_602 + 1.0);
        float _2960 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _608 = isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0));
        float _617 = ((((1.0 - _608) * (_603 + 2.0)) * exp2(log2(isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0))) * (_603 + 1.0))) + _608) * _571;
        float _618 = _539 * 0.5;
        float _619 = _549 * 0.5;
        float _620 = _559 * 0.5;
        float _621 = dot(vec3(_618, _619, _620), vec3(_618, _619, _620));
        float _626 = (_621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_621);
        float _634 = (dot(vec3(_209, _210, _211), vec3(_626 * _618, _626 * _619, _626 * _620)) + 1.0) * 0.5;
        float _2971 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _643 = sqrt(((_619 * _619) + (_618 * _618)) + (_620 * _620)) / (_572 + 9.9999997473787516355514526367188e-06);
        float _2982 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0));
        float _645 = _644 * 2.0;
        float _649 = (1.0 - _644) / (_644 + 1.0);
        float _2993 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _650 = isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0));
        float _659 = ((((1.0 - _650) * (_645 + 2.0)) * exp2(log2(isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0))) * (_645 + 1.0))) + _650) * _572;
        float _660 = _540 * 0.5;
        float _661 = _550 * 0.5;
        float _662 = _560 * 0.5;
        float _663 = dot(vec3(_660, _661, _662), vec3(_660, _661, _662));
        float _668 = (_663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_663);
        float _676 = (dot(vec3(_209, _210, _211), vec3(_668 * _660, _668 * _661, _668 * _662)) + 1.0) * 0.5;
        float _3004 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _685 = sqrt(((_661 * _661) + (_660 * _660)) + (_662 * _662)) / (_573 + 9.9999997473787516355514526367188e-06);
        float _3015 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0));
        float _687 = _686 * 2.0;
        float _691 = (1.0 - _686) / (_686 + 1.0);
        float _3026 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0));
        float _701 = ((((1.0 - _692) * (_687 + 2.0)) * exp2(log2(isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0))) * (_687 + 1.0))) + _692) * _573;
        _709 = _540;
        _711 = _539;
        _712 = _538;
        _713 = _550;
        _714 = _549;
        _715 = _548;
        _716 = _560;
        _717 = _559;
        _718 = _558;
        _719 = _573;
        _720 = _572;
        _721 = _571;
        _722 = cbModelParam._m0[36u].z * (isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0)));
        _723 = cbModelParam._m0[36u].z * (isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0)));
        _724 = cbModelParam._m0[36u].z * (isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0)));
    }
    else
    {
        _709 = _710;
        _711 = _710;
        _712 = _710;
        _713 = _710;
        _714 = _710;
        _715 = _710;
        _716 = _710;
        _717 = _710;
        _718 = _710;
        _719 = _710;
        _720 = _710;
        _721 = _710;
        _722 = 0.0;
        _723 = 0.0;
        _724 = 0.0;
    }
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _750 = fma(_407, cbModelParam._m0[30u].z, fma(_403, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _399));
        float _754 = fma(_407, cbModelParam._m0[31u].z, fma(_403, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _399));
        float _758 = fma(_407, cbModelParam._m0[32u].z, fma(_403, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _399));
        float _781 = _399 + _209;
        float _782 = _403 + _210;
        float _783 = _407 + _211;
        float _793 = fma(_783, cbModelParam._m0[30u].z, fma(_782, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _781)) - _750;
        float _794 = fma(_783, cbModelParam._m0[31u].z, fma(_782, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _781)) - _754;
        float _795 = fma(_783, cbModelParam._m0[32u].z, fma(_782, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _781)) - _758;
        float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
        float _812 = ((_799 * _793) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_750 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _813 = ((_799 * _794) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_754 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _814 = ((_799 * _795) / cbModelParam._m0[35u].z) + ((((((_758 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        float _849 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_816.x + (-0.5));
        float _851 = _849 * (_816.y + (-0.5));
        float _852 = _849 * (_816.z + (-0.5));
        float _859 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_823.x + (-0.5));
        float _861 = _859 * (_823.y + (-0.5));
        float _862 = _859 * (_823.z + (-0.5));
        float _869 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_830.x + (-0.5));
        float _871 = _869 * (_830.y + (-0.5));
        float _872 = _869 * (_830.z + (-0.5));
        float _879 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_837.x + (-0.5));
        float _881 = _879 * (_837.y + (-0.5));
        float _882 = _879 * (_837.z + (-0.5));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = _850 * 0.5;
        float _887 = _860 * 0.5;
        float _888 = _870 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _902 = (dot(vec3(_209, _210, _211), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3067 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _911 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3078 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3089 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0))) * (_913 + 1.0))) + _918) * _883;
        float _928 = _851 * 0.5;
        float _929 = _861 * 0.5;
        float _930 = _871 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_209, _210, _211), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3100 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3111 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3122 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0))) * (_955 + 1.0))) + _960) * _884;
        float _970 = _852 * 0.5;
        float _971 = _862 * 0.5;
        float _972 = _872 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_209, _210, _211), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3133 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3144 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3155 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0))) * (_997 + 1.0))) + _1002) * _885;
        _1019 = _852;
        _1020 = _851;
        _1021 = _850;
        _1022 = _862;
        _1023 = _861;
        _1024 = _860;
        _1025 = _872;
        _1026 = _871;
        _1027 = _870;
        _1028 = _885;
        _1029 = _884;
        _1030 = _883;
        _1031 = cbModelParam._m0[36u].w * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
        _1032 = cbModelParam._m0[36u].w * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1033 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
    }
    else
    {
        _1019 = _710;
        _1020 = _710;
        _1021 = _710;
        _1022 = _710;
        _1023 = _710;
        _1024 = _710;
        _1025 = _710;
        _1026 = _710;
        _1027 = _710;
        _1028 = _710;
        _1029 = _710;
        _1030 = _710;
        _1031 = 0.0;
        _1032 = 0.0;
        _1033 = 0.0;
    }
    float _1043 = (cbModelParam._m0[1u].x * (_1031 - _722)) + _722;
    float _1044 = (cbModelParam._m0[1u].x * (_1032 - _723)) + _723;
    float _1045 = (cbModelParam._m0[1u].x * (_1033 - _724)) + _724;
    float _1066 = fma(_1045, cbSceneParam._m0[89u].z, fma(_1044, cbSceneParam._m0[89u].y, _1043 * cbSceneParam._m0[89u].x));
    float _1069 = fma(_1045, cbSceneParam._m0[90u].z, fma(_1044, cbSceneParam._m0[90u].y, _1043 * cbSceneParam._m0[90u].x));
    float _1072 = fma(_1045, cbSceneParam._m0[91u].z, fma(_1044, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1043));
    float _1087 = _375 * 0.5;
    float _1088 = _376 * 0.5;
    float _1089 = _377 * 0.5;
    float _1090 = dot(vec4(_1087, _1088, _1089, 1.0), vec4(_1021, _1024, _1027, _1030));
    float _1093 = dot(vec4(_1087, _1088, _1089, 1.0), vec4(_1020, _1023, _1026, _1029));
    float _1096 = dot(vec4(_1087, _1088, _1089, 1.0), vec4(_1019, _1022, _1025, _1028));
    float _1130;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1103 = dot(vec4(_1087, _1088, _1089, 1.0), vec4(_709, _713, _716, _719));
        float _1107 = dot(vec4(_1087, _1088, _1089, 1.0), vec4(_711, _714, _717, _720));
        float _1111 = dot(vec4(_1087, _1088, _1089, 1.0), vec4(_712, _715, _718, _721));
        float _1118 = dot(vec4(cbModelParam._m0[39u]), vec4(_1087, _1088, _1089, 1.0));
        _1130 = dot(vec3(isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)), isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)), isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1118) ? 0.0 : (isnan(0.0) ? _1118 : max(0.0, _1118))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1130 = 1.0;
    }
    float _1141;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1132 = dot(vec4(cbModelParam._m0[40u]), vec4(_1087, _1088, _1089, 1.0));
        _1141 = dot(vec3(isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)), isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)), isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1132) ? 0.0 : (isnan(0.0) ? _1132 : max(0.0, _1132))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1141 = 1.0;
    }
    float _1145 = (_1141 * cbModelParam._m0[1u].x) + (_1130 * (1.0 - cbModelParam._m0[1u].x));
    float _1154 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1236;
    float _1238;
    float _1240;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1203 = fma(_407, cbModelParam._m0[13u].z, fma(_403, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _399)) + cbModelParam._m0[13u].w;
        float _1207 = fma(_407, cbModelParam._m0[14u].z, fma(_403, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _399)) + cbModelParam._m0[14u].w;
        float _1211 = fma(_407, cbModelParam._m0[15u].z, fma(_403, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _399)) + cbModelParam._m0[15u].w;
        float _1214 = fma(_377, cbModelParam._m0[13u].z, fma(_376, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _375));
        float _1217 = fma(_377, cbModelParam._m0[14u].z, fma(_376, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _375));
        float _1220 = fma(_377, cbModelParam._m0[15u].z, fma(_376, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _375));
        float _1246;
        if (_1214 > 0.0)
        {
            _1246 = abs((1.0 - _1203) / _1214);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1214 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1203 + 1.0) / _1214);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1246 = frontier_phi_16_14_ladder;
        }
        float _1475;
        if (_1217 > 0.0)
        {
            _1475 = abs((1.0 - _1207) / _1217);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1217 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1207 + 1.0) / _1217);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1475 = frontier_phi_25_21_ladder;
        }
        float _1667;
        if (_1220 > 0.0)
        {
            _1667 = abs((1.0 - _1211) / _1220);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1220 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1211 + 1.0) / _1220);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1667 = frontier_phi_37_32_ladder;
        }
        float _1669 = isnan(_1475) ? _1246 : (isnan(_1246) ? _1475 : min(_1246, _1475));
        float _1670 = isnan(_1667) ? _1669 : (isnan(_1669) ? _1667 : min(_1669, _1667));
        float _1674 = (_1670 * _1214) + _1203;
        float _1675 = (_1670 * _1217) + _1207;
        float _1676 = (_1670 * _1220) + _1211;
        float _1677 = _1670 * 9.9999997473787516355514526367188e-05;
        float _1679 = (-1.0) - _1677;
        float _1681 = _1677 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1676 > _1681) || ((_1676 < _1679) || ((_1675 > _1681) || ((_1675 < _1679) || ((_1674 < _1679) || (_1674 > _1681))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1773 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1676, cbModelParam._m0[9u].z, fma(_1675, cbModelParam._m0[9u].y, _1674 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1676, cbModelParam._m0[10u].z, fma(_1675, cbModelParam._m0[10u].y, _1674 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1676, cbModelParam._m0[11u].z, fma(_1675, cbModelParam._m0[11u].y, _1674 * cbModelParam._m0[11u].x))), _1154);
            frontier_phi_15_37_ladder = _1773.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1773.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1773.x * cbModelParam._m0[1u].y;
        }
        _1236 = frontier_phi_15_37_ladder_2;
        _1238 = frontier_phi_15_37_ladder_1;
        _1240 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1224 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_375, _376, _377), _1154);
        _1236 = _1224.x * cbModelParam._m0[1u].y;
        _1238 = _1224.y * cbModelParam._m0[1u].y;
        _1240 = _1224.z * cbModelParam._m0[1u].y;
    }
    float _1243 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1336;
    float _1338;
    float _1340;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1300 = fma(_407, cbModelParam._m0[21u].z, fma(_403, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _399)) + cbModelParam._m0[21u].w;
        float _1304 = fma(_407, cbModelParam._m0[22u].z, fma(_403, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _399)) + cbModelParam._m0[22u].w;
        float _1308 = fma(_407, cbModelParam._m0[23u].z, fma(_403, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _399)) + cbModelParam._m0[23u].w;
        float _1311 = fma(_377, cbModelParam._m0[21u].z, fma(_376, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _375));
        float _1314 = fma(_377, cbModelParam._m0[22u].z, fma(_376, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _375));
        float _1317 = fma(_377, cbModelParam._m0[23u].z, fma(_376, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _375));
        float _1480;
        if (_1311 > 0.0)
        {
            _1480 = abs((1.0 - _1300) / _1311);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1300 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1480 = frontier_phi_27_23_ladder;
        }
        float _1694;
        if (_1314 > 0.0)
        {
            _1694 = abs((1.0 - _1304) / _1314);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1314 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1304 + 1.0) / _1314);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1694 = frontier_phi_39_34_ladder;
        }
        float _1845;
        if (_1317 > 0.0)
        {
            _1845 = abs((1.0 - _1308) / _1317);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1317 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1308 + 1.0) / _1317);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1845 = frontier_phi_48_45_ladder;
        }
        float _1847 = isnan(_1694) ? _1480 : (isnan(_1480) ? _1694 : min(_1480, _1694));
        float _1848 = isnan(_1845) ? _1847 : (isnan(_1847) ? _1845 : min(_1847, _1845));
        float _1852 = (_1848 * _1311) + _1300;
        float _1853 = (_1848 * _1314) + _1304;
        float _1854 = (_1848 * _1317) + _1308;
        float _1855 = _1848 * 9.9999997473787516355514526367188e-05;
        float _1856 = (-1.0) - _1855;
        float _1858 = _1855 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1854 > _1858) || ((_1854 < _1856) || ((_1853 > _1858) || ((_1853 < _1856) || ((_1852 < _1856) || (_1852 > _1858))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2054 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1854, cbModelParam._m0[17u].z, fma(_1853, cbModelParam._m0[17u].y, _1852 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1854, cbModelParam._m0[18u].z, fma(_1853, cbModelParam._m0[18u].y, _1852 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1854, cbModelParam._m0[19u].z, fma(_1853, cbModelParam._m0[19u].y, _1852 * cbModelParam._m0[19u].x))), _1243);
            frontier_phi_24_48_ladder = _2054.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2054.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2054.x * cbModelParam._m0[1u].z;
        }
        _1336 = frontier_phi_24_48_ladder_2;
        _1338 = frontier_phi_24_48_ladder_1;
        _1340 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1320 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_375, _376, _377), _1243);
        _1336 = _1320.x * cbModelParam._m0[1u].z;
        _1338 = _1320.y * cbModelParam._m0[1u].z;
        _1340 = _1320.z * cbModelParam._m0[1u].z;
    }
    float _1352 = _366 * 0.01200000010430812835693359375;
    float _1354 = _1352 * ((cbModelParam._m0[1u].w * (_1336 - _1236)) + _1236);
    float _1355 = _1352 * ((cbModelParam._m0[1u].w * (_1338 - _1238)) + _1238);
    float _1356 = _1352 * ((cbModelParam._m0[1u].w * (_1340 - _1240)) + _1240);
    float _1359 = fma(_1356, cbSceneParam._m0[89u].z, fma(_1355, cbSceneParam._m0[89u].y, _1354 * cbSceneParam._m0[89u].x));
    float _1362 = fma(_1356, cbSceneParam._m0[90u].z, fma(_1355, cbSceneParam._m0[90u].y, _1354 * cbSceneParam._m0[90u].x));
    float _1365 = fma(_1356, cbSceneParam._m0[91u].z, fma(_1355, cbSceneParam._m0[91u].y, _1354 * cbSceneParam._m0[91u].x));
    vec4 _1373 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_299, _300));
    float _1375 = _1373.w;
    float _1387 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1375);
    float _1388 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1375);
    float _1389 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1375);
    uvec4 _1393 = floatBitsToUint(cbInstanceData._m0[_340 + 5u]);
    uint _1395 = _1393.x * 14u;
    uint _1396 = _1395 + 13u;
    float _1403 = _366 + (-1.0);
    float _1409 = (cbLight._m0[_1396].x * _1403) + 1.0;
    float _1410 = (cbLight._m0[_1396].y * _1403) + 1.0;
    float _1411 = (cbLight._m0[_1396].z * _1403) + 1.0;
    float _1412 = (cbLight._m0[_1396].w * _1403) + 1.0;
    uint _1413 = _1395 + 5u;
    float _1419 = isnan(1.0) ? _1410 : (isnan(_1410) ? 1.0 : min(_1410, 1.0));
    uint _1423 = _1395 + 4u;
    float _1433 = isnan(1.0) ? _1409 : (isnan(_1409) ? 1.0 : min(_1409, 1.0));
    uint _1437 = _1395 | 1u;
    float _1448 = dot(vec3(cbLight._m0[_1395].xyz), vec3(_209, _210, _211));
    float _1451 = dot(vec3(cbLight._m0[_1437].xyz), vec3(_209, _210, _211));
    float _3291 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
    float _3302 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
    float _1456 = (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) * 0.3183098733425140380859375;
    float _1458 = (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))) * 0.3183098733425140380859375;
    float _1465 = ((cbLight._m0[_1413].x * _1419) * _1458) + (((cbLight._m0[_1423].x * _1387) * _1433) * _1456);
    float _1466 = ((_1419 * cbLight._m0[_1413].y) * _1458) + (((cbLight._m0[_1423].y * _1388) * _1433) * _1456);
    float _1467 = ((_1419 * cbLight._m0[_1413].z) * _1458) + (((cbLight._m0[_1423].z * _1389) * _1433) * _1456);
    uvec4 _1472 = floatBitsToUint(cbLight._m0[_1395 + 12u]);
    bool _1474 = _1472.x == 0u;
    float _1485;
    float _1487;
    float _1489;
    if (_1474)
    {
        _1485 = _1465;
        _1487 = _1466;
        _1489 = _1467;
    }
    else
    {
        uint _1493 = _1395 + 6u;
        float _1509 = (dot(vec3(cbLight._m0[_1395 + 2u].xyz), vec3(_209, _210, _211)) * 0.5) + 0.5;
        float _1510 = _1509 * _1509;
        float _3313 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
        float _1512 = isnan(1.0) ? _1411 : (isnan(_1411) ? 1.0 : min(_1411, 1.0));
        _1485 = (((cbLight._m0[_1493].x * 0.3183098733425140380859375) * _1511) * _1512) + _1465;
        _1487 = (((cbLight._m0[_1493].y * 0.3183098733425140380859375) * _1511) * _1512) + _1466;
        _1489 = (((cbLight._m0[_1493].z * 0.3183098733425140380859375) * _1511) * _1512) + _1467;
    }
    bool _1492 = _1472.y == 0u;
    float _1530;
    float _1532;
    float _1534;
    if (_1492)
    {
        _1530 = _1485;
        _1532 = _1487;
        _1534 = _1489;
    }
    else
    {
        uint _1638 = _1395 + 7u;
        float _1654 = (dot(vec3(cbLight._m0[_1395 + 3u].xyz), vec3(_209, _210, _211)) * 0.5) + 0.5;
        float _1655 = _1654 * _1654;
        float _3329 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _1657 = isnan(1.0) ? _1412 : (isnan(_1412) ? 1.0 : min(_1412, 1.0));
        _1530 = (((cbLight._m0[_1638].x * 0.3183098733425140380859375) * _1656) * _1657) + _1485;
        _1532 = (((cbLight._m0[_1638].y * 0.3183098733425140380859375) * _1656) * _1657) + _1487;
        _1534 = (((cbLight._m0[_1638].z * 0.3183098733425140380859375) * _1656) * _1657) + _1489;
    }
    uint _1536 = _1395 + 8u;
    float _1542 = cbLight._m0[_1395].x + _291;
    float _1543 = cbLight._m0[_1395].y + _292;
    float _1544 = cbLight._m0[_1395].z + _293;
    float _1548 = inversesqrt(dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544)));
    float _1552 = dot(vec3(_209, _210, _211), vec3(cbLight._m0[_1395].xyz));
    float _3345 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
    float _1555 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _3356 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _1556 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _1557 = dot(vec3(cbLight._m0[_1395].xyz), vec3(_1542 * _1548, _1543 * _1548, _1544 * _1548));
    float _3367 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
    float _1568 = (exp2(log2(1.0 - (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1574 = (0.5 / ((_1555 + 9.9999999392252902907785028219223e-09) + _1556)) * _1555;
    float _3378 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
    float _1576 = (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * 0.31831014156341552734375;
    uint _1590 = _1395 + 9u;
    float _1596 = cbLight._m0[_1437].x + _291;
    float _1597 = cbLight._m0[_1437].y + _292;
    float _1598 = cbLight._m0[_1437].z + _293;
    float _1602 = inversesqrt(dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598)));
    float _1606 = dot(vec3(_209, _210, _211), vec3(cbLight._m0[_1437].xyz));
    float _3389 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _1609 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _1610 = dot(vec3(cbLight._m0[_1437].xyz), vec3(_1596 * _1602, _1597 * _1602, _1598 * _1602));
    float _3400 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
    float _1619 = (exp2(log2(1.0 - (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1623 = (0.5 / ((_1609 + 9.9999999392252902907785028219223e-09) + _1556)) * _1609;
    float _3411 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _1625 = (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * 0.31831014156341552734375;
    float _1635 = (((_1619 * cbLight._m0[_1590].x) * _1625) * _1419) + ((((cbLight._m0[_1536].x * _1387) * _1568) * _1576) * _1433);
    float _1636 = (((_1619 * cbLight._m0[_1590].y) * _1625) * _1419) + ((((cbLight._m0[_1536].y * _1388) * _1568) * _1576) * _1433);
    float _1637 = (((_1619 * cbLight._m0[_1590].z) * _1625) * _1419) + ((((cbLight._m0[_1536].z * _1389) * _1568) * _1576) * _1433);
    float _1699;
    float _1701;
    float _1703;
    if (_1474)
    {
        _1699 = _1635;
        _1701 = _1636;
        _1703 = _1637;
    }
    else
    {
        uint _1705 = _1395 + 10u;
        uint _1711 = _1395 + 2u;
        float _1717 = cbLight._m0[_1711].x + _291;
        float _1718 = cbLight._m0[_1711].y + _292;
        float _1719 = cbLight._m0[_1711].z + _293;
        float _1723 = inversesqrt(dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719)));
        float _1727 = dot(vec3(_209, _210, _211), vec3(cbLight._m0[_1711].xyz));
        float _3422 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1730 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1731 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_1717 * _1723, _1718 * _1723, _1719 * _1723));
        float _3433 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = (exp2(log2(1.0 - (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1744 = (0.5 / ((_1730 + 9.9999999392252902907785028219223e-09) + _1556)) * _1730;
        float _3444 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1746 = (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * 0.31831014156341552734375;
        float _1747 = isnan(1.0) ? _1411 : (isnan(_1411) ? 1.0 : min(_1411, 1.0));
        _1699 = (((_1740 * cbLight._m0[_1705].x) * _1746) * _1747) + _1635;
        _1701 = (((_1740 * cbLight._m0[_1705].y) * _1746) * _1747) + _1636;
        _1703 = (((_1740 * cbLight._m0[_1705].z) * _1746) * _1747) + _1637;
    }
    float _1782;
    float _1784;
    float _1786;
    if (_1492)
    {
        _1782 = _1699;
        _1784 = _1701;
        _1786 = _1703;
    }
    else
    {
        uint _1793 = _1395 + 11u;
        uint _1799 = _1395 + 3u;
        float _1805 = cbLight._m0[_1799].x + _291;
        float _1806 = cbLight._m0[_1799].y + _292;
        float _1807 = cbLight._m0[_1799].z + _293;
        float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
        float _1815 = dot(vec3(_209, _210, _211), vec3(cbLight._m0[_1799].xyz));
        float _3460 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1818 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1819 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_1805 * _1811, _1806 * _1811, _1807 * _1811));
        float _3471 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1828 = (exp2(log2(1.0 - (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1832 = (0.5 / ((_1818 + 9.9999999392252902907785028219223e-09) + _1556)) * _1818;
        float _3482 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1834 = (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * 0.31831014156341552734375;
        float _1835 = isnan(1.0) ? _1412 : (isnan(_1412) ? 1.0 : min(_1412, 1.0));
        _1782 = (((_1828 * cbLight._m0[_1793].x) * _1834) * _1835) + _1699;
        _1784 = (((_1828 * cbLight._m0[_1793].y) * _1834) * _1835) + _1701;
        _1786 = (((_1828 * cbLight._m0[_1793].z) * _1834) * _1835) + _1703;
    }
    float _1969;
    float _1971;
    float _1973;
    float _1975;
    float _1977;
    float _1979;
    if (_1393.y == 0u)
    {
        float _1910 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1911 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1910;
        float _1912 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1910;
        float _1913 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1910;
        uvec4 _1925 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1926 = _1925.x;
        uint _1937 = uint((float(_1925.y) * floor(float(uint(cbSceneParam._m0[85u].y * _300) / _1926))) + floor(float(uint(cbSceneParam._m0[85u].x * _299) / _1926)));
        float _1947 = (log2(_1913 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1948 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        uint _1951 = uint(isnan(14.0) ? _1948 : (isnan(_1948) ? 14.0 : min(_1948, 14.0)));
        uvec4 _1956 = texelFetch(g_lightClusterGridBuffer, int(((_1951 << 2u) + (_1937 << 6u)) >> 2u));
        uint _1957 = _1956.x;
        uint _1958 = _1925.z;
        float _2059;
        float _2061;
        float _2063;
        float _2065;
        float _2067;
        float _2069;
        if (((((1u << ((_1958 >> 4u) & 15u)) + 4294967295u) & _1957) == 0u) || ((_1958 & 240u) == 0u))
        {
            _2059 = 0.0;
            _2061 = 0.0;
            _2063 = 0.0;
            _2065 = 0.0;
            _2067 = 0.0;
            _2069 = 0.0;
        }
        else
        {
            float _2060;
            float _2062;
            float _2064;
            float _2066;
            float _2068;
            float _2070;
            float _2201 = 0.0;
            float _2202 = 0.0;
            float _2203 = 0.0;
            float _2204 = 0.0;
            float _2205 = 0.0;
            float _2206 = 0.0;
            uint _2207 = 0u;
            uint _2216;
            bool _2217;
            for (;;)
            {
                _2216 = texelFetch(g_lightClassification, int((((_1951 << 5u) + (_1937 << 9u)) + (_2207 << 2u)) >> 2u)).x;
                _2217 = _2216 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2217)
                {
                    frontier_phi_63_pred = _2206;
                    frontier_phi_63_pred_1 = _2205;
                    frontier_phi_63_pred_2 = _2204;
                    frontier_phi_63_pred_3 = _2203;
                    frontier_phi_63_pred_4 = _2202;
                    frontier_phi_63_pred_5 = _2201;
                }
                else
                {
                    float _2325;
                    float _2326;
                    float _2327;
                    float _2328;
                    float _2329;
                    float _2330;
                    uint _2331;
                    _2325 = _2201;
                    _2326 = _2202;
                    _2327 = _2203;
                    _2328 = _2204;
                    _2329 = _2205;
                    _2330 = _2206;
                    _2331 = _2216;
                    float _2257;
                    float _2258;
                    float _2259;
                    float _2260;
                    float _2261;
                    float _2262;
                    for (;;)
                    {
                        uint _2335 = uint(findLSB(_2331)) + (_2207 << 5u);
                        uint _2332 = (_2331 + 4294967295u) & _2331;
                        uint _2337 = _2335 * 48u;
                        vec4 _2351 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2337)).x, texelFetch(g_PointLightRenderingBuffer, int(_2337 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2337 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2337 + 3u)).x));
                        uint _2357 = (_2335 * 48u) + 4u;
                        vec4 _2370 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2357)).x, texelFetch(g_PointLightRenderingBuffer, int(_2357 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2357 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2357 + 3u)).x));
                        uint _2376 = (_2335 * 48u) + 8u;
                        vec3 _2387 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2376)).x, texelFetch(g_PointLightRenderingBuffer, int(_2376 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2376 + 2u)).x));
                        float _2391 = _2351.x - _1911;
                        float _2392 = _2351.y - _1912;
                        float _2393 = _2351.z - _1913;
                        float _2394 = dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393));
                        float _2397 = inversesqrt(_2394);
                        float _2406 = 1.0 - (_2394 * _2351.w);
                        float _3508 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
                        float _2407 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
                        float _2408 = sqrt(_2394) * _2370.w;
                        float _2411 = 1.39999997615814208984375 / (_2408 + 1.39999997615814208984375);
                        float _2412 = _2411 * _2411;
                        float _2415 = ((1.0 - _2412) * dot(vec3(_321, _324, _327), vec3(_2397 * _2391, _2397 * _2392, _2397 * _2393))) + _2412;
                        float _2418 = _2408 * _2408;
                        float _2422 = ((isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0))) * _2407) / ((_2418 * 0.699999988079071044921875) + 1.0);
                        float _2426 = (-0.0) - _1911;
                        float _2427 = (-0.0) - _1912;
                        float _2428 = (-0.0) - _1913;
                        float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
                        float _2436 = dot(vec3(_321, _324, _327), vec3(_2432 * _2426, _2432 * _2427, _2432 * _2428));
                        float _3524 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
                        float _3535 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
                        float _2440 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
                        float _2444 = (0.5 / (((isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) + 9.9999999392252902907785028219223e-09) + _2440)) * _2440;
                        float _3546 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
                        float _2453 = (((isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * 3.1415927410125732421875) / ((_2418 * 2.1991131305694580078125) + 3.141590118408203125)) * _2407;
                        _2260 = (_2422 * _2370.x) + _2328;
                        _2261 = (_2422 * _2370.y) + _2329;
                        _2262 = (_2422 * _2370.z) + _2330;
                        _2257 = (_2453 * _2387.x) + _2325;
                        _2258 = (_2453 * _2387.y) + _2326;
                        _2259 = (_2453 * _2387.z) + _2327;
                        if (_2332 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2325 = _2257;
                            _2326 = _2258;
                            _2327 = _2259;
                            _2328 = _2260;
                            _2329 = _2261;
                            _2330 = _2262;
                            _2331 = _2332;
                        }
                    }
                    frontier_phi_63_pred = _2262;
                    frontier_phi_63_pred_1 = _2261;
                    frontier_phi_63_pred_2 = _2260;
                    frontier_phi_63_pred_3 = _2259;
                    frontier_phi_63_pred_4 = _2258;
                    frontier_phi_63_pred_5 = _2257;
                }
                _2070 = frontier_phi_63_pred;
                _2068 = frontier_phi_63_pred_1;
                _2066 = frontier_phi_63_pred_2;
                _2064 = frontier_phi_63_pred_3;
                _2062 = frontier_phi_63_pred_4;
                _2060 = frontier_phi_63_pred_5;
                uint _2208 = _2207 + 1u;
                if (_2208 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2201 = _2060;
                    _2202 = _2062;
                    _2203 = _2064;
                    _2204 = _2066;
                    _2205 = _2068;
                    _2206 = _2070;
                    _2207 = _2208;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2059 = _2060;
            _2061 = _2062;
            _2063 = _2064;
            _2065 = _2066;
            _2067 = _2068;
            _2069 = _2070;
        }
        uvec4 _2073 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2074 = _2073.z;
        uint _2076 = (_2074 >> 8u) & 15u;
        float _2172;
        float _2174;
        float _2176;
        float _2178;
        float _2180;
        float _2182;
        if (((4294967295u << _2076) & _1957) == 0u)
        {
            _2172 = _2059;
            _2174 = _2061;
            _2176 = _2063;
            _2178 = _2065;
            _2180 = _2067;
            _2182 = _2069;
        }
        else
        {
            float _2197 = inversesqrt(dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2076 < ((_2074 >> 12u) & 15u))
            {
                float _2173;
                float _2175;
                float _2177;
                float _2179;
                float _2181;
                float _2183;
                float _2308 = _2059;
                float _2309 = _2061;
                float _2310 = _2063;
                float _2311 = _2065;
                float _2312 = _2067;
                float _2313 = _2069;
                uint _2314 = _2076;
                uint _2323;
                bool _2324;
                for (;;)
                {
                    _2323 = texelFetch(g_lightClassification, int((((_1951 << 5u) + (_1937 << 9u)) + (_2314 << 2u)) >> 2u)).x;
                    _2324 = _2323 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2324)
                    {
                        frontier_phi_69_pred = _2313;
                        frontier_phi_69_pred_1 = _2312;
                        frontier_phi_69_pred_2 = _2311;
                        frontier_phi_69_pred_3 = _2310;
                        frontier_phi_69_pred_4 = _2309;
                        frontier_phi_69_pred_5 = _2308;
                    }
                    else
                    {
                        float _2458;
                        float _2459;
                        float _2460;
                        float _2461;
                        float _2462;
                        float _2463;
                        float _2710;
                        float _2711;
                        float _2712;
                        float _2713;
                        float _2714;
                        float _2715;
                        float _2471 = _2308;
                        float _2472 = _2309;
                        float _2473 = _2310;
                        float _2474 = _2311;
                        float _2475 = _2312;
                        float _2476 = _2313;
                        uint _2477 = _2323;
                        uint _2478;
                        vec4 _2503;
                        float _2504;
                        vec4 _2519;
                        vec3 _2531;
                        vec4 _2547;
                        vec4 _2563;
                        float _2610;
                        bool _2611;
                        for (;;)
                        {
                            uint _2488 = ((_2314 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2477));
                            _2478 = (_2477 + 4294967295u) & _2477;
                            uint _2490 = _2488 * 40u;
                            _2503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2490 + 3u)).x));
                            _2504 = _2503.w;
                            uint _2506 = (_2488 * 40u) + 4u;
                            _2519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2506 + 3u)).x));
                            uint _2521 = (_2488 * 40u) + 8u;
                            _2531 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2521 + 2u)).x));
                            uint _2534 = (_2488 * 40u) + 16u;
                            _2547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2534 + 3u)).x));
                            uint _2550 = (_2488 * 40u) + 20u;
                            _2563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2550 + 3u)).x));
                            uint _2566 = (_2488 * 40u) + 24u;
                            vec4 _2579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 3u)).x));
                            uint _2585 = (_2488 * 40u) + 28u;
                            vec4 _2598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 3u)).x));
                            _2610 = fma(_1913, _2598.z, fma(_1912, _2598.y, _2598.x * _1911)) + _2598.w;
                            _2611 = !((fma(_1913, _2579.z, fma(_1912, _2579.y, _2579.x * _1911)) + _2579.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2611)
                            {
                                float _2638 = _2503.x - _1911;
                                float _2639 = _2503.y - _1912;
                                float _2640 = _2503.z - _1913;
                                float _2641 = dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640));
                                float _2644 = inversesqrt(_2641);
                                float _2645 = _2644 * _2638;
                                float _2646 = _2644 * _2639;
                                float _2647 = _2644 * _2640;
                                float _2651 = 1.0 - (_2641 / (_2504 * _2504));
                                float _3557 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                                float _2652 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
                                float _2656 = sqrt(_2641) * _2519.w;
                                float _2658 = 1.39999997615814208984375 / (_2656 + 1.39999997615814208984375);
                                float _2659 = _2658 * _2658;
                                float _2660 = 1.0 - _2659;
                                float _2662 = (_2660 * dot(vec3(_2645, _2646, _2647), vec3(_321, _324, _327))) + _2659;
                                float _2665 = _2656 * _2656;
                                float _2669 = (fma(_1913, _2547.z, fma(_1912, _2547.y, _2547.x * _1911)) + _2547.w) / _2610;
                                float _2670 = (fma(_1913, _2563.z, fma(_1912, _2563.y, _2563.x * _1911)) + _2563.w) / _2610;
                                float _2674 = 1.0 - dot(vec2(_2669, _2670), vec2(_2669, _2670));
                                float _3573 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                                float _2675 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
                                float _2676 = _2675 * (((isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0))) * _2652) / ((_2665 * 0.699999988079071044921875) + 1.0));
                                float _2686 = dot(vec3(_321, _324, _327), vec3((-0.0) - (_1911 * _2197), (-0.0) - (_1912 * _2197), (-0.0) - (_1913 * _2197)));
                                float _3584 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                                float _2694 = (_2660 * dot(vec3(_321, _324, _327), vec3(_2645, _2646, _2647))) + _2659;
                                float _3595 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
                                float _2695 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
                                float _2699 = (0.5 / (((isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) + 9.9999999392252902907785028219223e-09) + _2695)) * _2695;
                                float _3606 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
                                float _2706 = (_2675 * _2652) * (((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * 3.1415927410125732421875) / ((_2665 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2676 * _2519.z;
                                frontier_phi_75_pred_1 = _2676 * _2519.y;
                                frontier_phi_75_pred_2 = _2676 * _2519.x;
                                frontier_phi_75_pred_3 = _2706 * _2531.z;
                                frontier_phi_75_pred_4 = _2706 * _2531.y;
                                frontier_phi_75_pred_5 = _2706 * _2531.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2715 = frontier_phi_75_pred;
                            _2714 = frontier_phi_75_pred_1;
                            _2713 = frontier_phi_75_pred_2;
                            _2712 = frontier_phi_75_pred_3;
                            _2711 = frontier_phi_75_pred_4;
                            _2710 = frontier_phi_75_pred_5;
                            _2461 = _2713 + _2474;
                            _2462 = _2714 + _2475;
                            _2463 = _2715 + _2476;
                            _2458 = _2710 + _2471;
                            _2459 = _2711 + _2472;
                            _2460 = _2712 + _2473;
                            if (_2478 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2471 = _2458;
                                _2472 = _2459;
                                _2473 = _2460;
                                _2474 = _2461;
                                _2475 = _2462;
                                _2476 = _2463;
                                _2477 = _2478;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2463;
                        frontier_phi_69_pred_1 = _2462;
                        frontier_phi_69_pred_2 = _2461;
                        frontier_phi_69_pred_3 = _2460;
                        frontier_phi_69_pred_4 = _2459;
                        frontier_phi_69_pred_5 = _2458;
                    }
                    _2183 = frontier_phi_69_pred;
                    _2181 = frontier_phi_69_pred_1;
                    _2179 = frontier_phi_69_pred_2;
                    _2177 = frontier_phi_69_pred_3;
                    _2175 = frontier_phi_69_pred_4;
                    _2173 = frontier_phi_69_pred_5;
                    uint _2315 = _2314 + 1u;
                    if (_2315 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2308 = _2173;
                        _2309 = _2175;
                        _2310 = _2177;
                        _2311 = _2179;
                        _2312 = _2181;
                        _2313 = _2183;
                        _2314 = _2315;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2183;
                frontier_phi_57_58_ladder_1 = _2181;
                frontier_phi_57_58_ladder_2 = _2179;
                frontier_phi_57_58_ladder_3 = _2177;
                frontier_phi_57_58_ladder_4 = _2175;
                frontier_phi_57_58_ladder_5 = _2173;
            }
            else
            {
                frontier_phi_57_58_ladder = _2069;
                frontier_phi_57_58_ladder_1 = _2067;
                frontier_phi_57_58_ladder_2 = _2065;
                frontier_phi_57_58_ladder_3 = _2063;
                frontier_phi_57_58_ladder_4 = _2061;
                frontier_phi_57_58_ladder_5 = _2059;
            }
            _2172 = frontier_phi_57_58_ladder_5;
            _2174 = frontier_phi_57_58_ladder_4;
            _2176 = frontier_phi_57_58_ladder_3;
            _2178 = frontier_phi_57_58_ladder_2;
            _2180 = frontier_phi_57_58_ladder_1;
            _2182 = frontier_phi_57_58_ladder;
        }
        float _2187 = isnan(1.0) ? _366 : (isnan(_366) ? 1.0 : min(_366, 1.0));
        _1969 = (_2187 * _2178) + _1530;
        _1971 = (_2187 * _2180) + _1532;
        _1973 = (_2187 * _2182) + _1534;
        _1975 = ((_2172 * 0.039999999105930328369140625) * _2187) + _1782;
        _1977 = ((_2174 * 0.039999999105930328369140625) * _2187) + _1784;
        _1979 = ((_2176 * 0.039999999105930328369140625) * _2187) + _1786;
    }
    else
    {
        _1969 = _1530;
        _1971 = _1532;
        _1973 = _1534;
        _1975 = _1782;
        _1977 = _1784;
        _1979 = _1786;
    }
    float _3622 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3633 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3644 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _3655 = isnan(0.0) ? _213 : (isnan(_213) ? 0.0 : max(_213, 0.0));
    float _2004 = cbInstanceData._m0[_340 + 6u].w * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)));
    float _2009 = _299 / cbSceneParam._m0[86u].x;
    float _2010 = _300 / cbSceneParam._m0[86u].y;
    vec4 _2024 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2009, _2010, (log2((isnan(cbSceneParam._m0[77u].w) ? _232 : (isnan(_232) ? cbSceneParam._m0[77u].w : min(_232, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2026 = _2024.x;
    float _2027 = _2024.y;
    float _2028 = _2024.z;
    float _2029 = _2024.w;
    float _2121;
    float _2123;
    float _2125;
    float _2127;
    if (_232 > cbSceneParam._m0[78u].w)
    {
        float _2084 = isnan(_232) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _232 : min(cbSceneParam._m0[80u].w, _232));
        float _2085 = _2084 / _232;
        float _2096 = _2085 * _284;
        float _2097 = _285 * _2085;
        float _2098 = (-0.0) - _2097;
        float _2099 = _2085 * _286;
        float _2101 = (cbSceneParam._m0[77u].w * _2098) / _2084;
        float _2102 = _2101 + cbSceneParam._m0[79u].w;
        float _2103 = cbSceneParam._m0[79u].w - _2097;
        float _2109 = sqrt(((_2096 * _2096) + (_2097 * _2097)) + (_2099 * _2099));
        float _2112 = (1.0 - (cbSceneParam._m0[77u].w / _2084)) * _2109;
        float _2117 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2119 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2270;
        if (abs((_2098 - _2101) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2270 = ((((_2102 > 0.0) ? exp2(_2117 * _2102) : (2.0 - exp2(_2119 * _2102))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2112;
        }
        else
        {
            float _2230 = 1.0 / cbSceneParam._m0[80u].x;
            float _2231 = isnan(_2103) ? _2102 : (isnan(_2102) ? _2103 : max(_2102, _2103));
            float _2232 = isnan(_2103) ? _2102 : (isnan(_2102) ? _2103 : min(_2102, _2103));
            float _2241 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : min(_2231, 0.0));
            float _2242 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : min(_2232, 0.0));
            _2270 = ((abs(_2109 / _2098) * cbSceneParam._m0[80u].y) * ((((_2241 - _2242) * 2.0) - ((exp2(_2117 * (isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0)))) - exp2(_2117 * (isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0))))) * _2230)) - ((exp2(_2119 * _2241) - exp2(_2119 * _2242)) * _2230))) + (_2112 * cbSceneParam._m0[80u].z);
        }
        vec4 _2272 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2009, _2010, 1.0), 0.0);
        float _2281 = exp2((_2270 * (-1.44269502162933349609375)) * (1.0 - _2272.w));
        float _2282 = log2(_2281);
        float _2298 = log2(_2029);
        _2121 = (exp2(_2298 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2282 * cbSceneParam._m0[78u].x)) * _2272.x) / cbSceneParam._m0[78u].x)) + _2026;
        _2123 = (exp2(_2298 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2282 * cbSceneParam._m0[78u].y)) * _2272.y) / cbSceneParam._m0[78u].y)) + _2027;
        _2125 = (exp2(_2298 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2282 * cbSceneParam._m0[78u].z)) * _2272.z) / cbSceneParam._m0[78u].z)) + _2028;
        _2127 = _2281 * _2029;
    }
    else
    {
        _2121 = _2026;
        _2123 = _2027;
        _2125 = _2028;
        _2127 = _2029;
    }
    float _2139 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2140 = _2139 == 3.0;
    float _2142 = log2(_2127);
    float _2149 = exp2(_2142 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1969 + ((isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0))) * _366))) + ((_1975 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _1145)) * cbPerFrame._m0[3u].x));
    float _2150 = exp2(_2142 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1971 + ((isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0))) * _366))) + ((_1977 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _1145)) * cbPerFrame._m0[3u].x));
    float _2151 = exp2(_2142 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1973 + ((isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0))) * _366))) + ((_1979 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _1145)) * cbPerFrame._m0[3u].x));
    float _2160 = (_2139 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2160 * (_2140 ? _2149 : (_2149 + (cbSceneParam._m0[72u].w * _2121)));
    SV_Target.y = _2160 * (_2140 ? _2150 : (_2150 + (cbSceneParam._m0[72u].w * _2123)));
    SV_Target.z = _2160 * (_2140 ? _2151 : (_2151 + (cbSceneParam._m0[72u].w * _2125)));
    SV_Target.w = _2004;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2004;
}


