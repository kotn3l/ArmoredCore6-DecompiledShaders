#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _757;
float _3208;
float _3209;
float _3210;
float _3211;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    float _178;
    float _179;
    float _180;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
    }
    else
    {
        _178 = _171;
        _179 = _172;
        _180 = _173;
    }
    vec4 _200 = texture(sampler2D(M_A_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _206 = _200.w;
    float _207 = _200.x * cbMtdParam._m0[9u].x;
    float _208 = _200.y * cbMtdParam._m0[9u].y;
    float _209 = _200.z * cbMtdParam._m0[9u].z;
    float _210 = _206 * TEXCOORD_1.z;
    float _214 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _215 = _214 * _178;
    float _216 = _214 * _179;
    float _217 = _214 * _180;
    float _3220 = isnan(0.0) ? _210 : (isnan(_210) ? 0.0 : max(_210, 0.0));
    float _219 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    float _3231 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _3242 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _3253 = isnan(0.0) ? _209 : (isnan(_209) ? 0.0 : max(_209, 0.0));
    float _238 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _280 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _290 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _280);
    float _291 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _280);
    float _292 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _280);
    float _296 = inversesqrt(dot(vec3(_290, _291, _292), vec3(_290, _291, _292)));
    float _297 = _290 * _296;
    float _298 = _291 * _296;
    float _299 = _292 * _296;
    vec4 _304 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _306 = _304.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _436 = sqrt(((_290 * _290) + (_291 * _291)) + (_292 * _292));
        float _442 = (cbMatDynParam._m0[5u].x * _436) + cbMatDynParam._m0[5u].y;
        float _3264 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
        float _443 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
        float _447 = (cbMatDynParam._m0[5u].z * _436) + cbMatDynParam._m0[5u].w;
        float _3275 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0))) - _443)) + _443) < ((_306 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _318 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _319 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _339 = fma(_217, cbSceneParam._m0[5u].z, fma(_216, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _215));
    float _342 = fma(_217, cbSceneParam._m0[6u].z, fma(_216, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _215));
    float _345 = fma(_217, cbSceneParam._m0[7u].z, fma(_216, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _215));
    uint _358 = uint(roundEven(NORMAL.w)) * 13u;
    uint _360 = _358 + 9u;
    uint _361 = _360 + uint(cbMatDynParam._m0[0u].w);
    float _367 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0)))) * cbInstanceData._m0[_361].x;
    float _368 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_361].y;
    float _369 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * cbInstanceData._m0[_361].z;
    float _3286 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _370 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _3297 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _371 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _3308 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _372 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    vec4 _381 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _318, cbSceneParam._m0[86u].y * _319));
    float _384 = _381.x * TEXCOORD_1.w;
    float _385 = dot(vec3(_215, _216, _217), vec3(_297, _298, _299));
    float _388 = _385 * 2.0;
    float _393 = (_388 * _215) - _297;
    float _394 = (_388 * _216) - _298;
    float _395 = (_388 * _217) - _299;
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _421 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _425 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _756;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _481 = fma(_425, cbModelParam._m0[26u].z, fma(_421, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _417));
        float _485 = fma(_425, cbModelParam._m0[27u].z, fma(_421, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _417));
        float _489 = fma(_425, cbModelParam._m0[28u].z, fma(_421, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _417));
        float _514 = _417 + _215;
        float _515 = _421 + _216;
        float _516 = _425 + _217;
        float _526 = fma(_516, cbModelParam._m0[26u].z, fma(_515, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _514)) - _481;
        float _527 = fma(_516, cbModelParam._m0[27u].z, fma(_515, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _514)) - _485;
        float _528 = fma(_516, cbModelParam._m0[28u].z, fma(_515, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _514)) - _489;
        float _532 = inversesqrt(dot(vec3(_526, _527, _528), vec3(_526, _527, _528)));
        float _545 = ((_532 * _526) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_481 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _546 = ((_532 * _527) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_485 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _547 = ((_532 * _528) / cbModelParam._m0[34u].z) + ((((((_489 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _550 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_545, _546, _547), 0.0);
        vec4 _557 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_545, _546, _547), 0.0);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_545, _546, _547), 0.0);
        vec4 _571 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_545, _546, _547), 0.0);
        float _584 = exp2((_550.w + (-0.5)) * 20.0) * 2.0;
        float _585 = _584 * (_550.x + (-0.5));
        float _586 = _584 * (_550.y + (-0.5));
        float _587 = _584 * (_550.z + (-0.5));
        float _594 = exp2((_557.w + (-0.5)) * 20.0) * 2.0;
        float _595 = _594 * (_557.x + (-0.5));
        float _596 = _594 * (_557.y + (-0.5));
        float _597 = _594 * (_557.z + (-0.5));
        float _604 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _605 = _604 * (_564.x + (-0.5));
        float _606 = _604 * (_564.y + (-0.5));
        float _607 = _604 * (_564.z + (-0.5));
        float _614 = exp2((_571.w + (-0.5)) * 20.0) * 2.0;
        float _615 = _614 * (_571.x + (-0.5));
        float _616 = _614 * (_571.y + (-0.5));
        float _617 = _614 * (_571.z + (-0.5));
        float _618 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _619 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        float _620 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _621 = _585 * 0.5;
        float _622 = _595 * 0.5;
        float _623 = _605 * 0.5;
        float _624 = dot(vec3(_621, _622, _623), vec3(_621, _622, _623));
        float _629 = (_624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_624);
        float _638 = (dot(vec3(_215, _216, _217), vec3(_629 * _621, _629 * _622, _629 * _623)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _648 = sqrt(((_622 * _622) + (_621 * _621)) + (_623 * _623)) / (_618 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _649 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _650 = _649 * 2.0;
        float _654 = (1.0 - _649) / (_649 + 1.0);
        float _3356 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _655 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _664 = ((((1.0 - _655) * (_650 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_650 + 1.0))) + _655) * _618;
        float _665 = _586 * 0.5;
        float _666 = _596 * 0.5;
        float _667 = _606 * 0.5;
        float _668 = dot(vec3(_665, _666, _667), vec3(_665, _666, _667));
        float _673 = (_668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_668);
        float _681 = (dot(vec3(_215, _216, _217), vec3(_673 * _665, _673 * _666, _673 * _667)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _690 = sqrt(((_666 * _666) + (_665 * _665)) + (_667 * _667)) / (_619 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _692 = _691 * 2.0;
        float _696 = (1.0 - _691) / (_691 + 1.0);
        float _3389 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _706 = ((((1.0 - _697) * (_692 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_692 + 1.0))) + _697) * _619;
        float _707 = _587 * 0.5;
        float _708 = _597 * 0.5;
        float _709 = _607 * 0.5;
        float _710 = dot(vec3(_707, _708, _709), vec3(_707, _708, _709));
        float _715 = (_710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_710);
        float _723 = (dot(vec3(_215, _216, _217), vec3(_715 * _707, _715 * _708, _715 * _709)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _732 = sqrt(((_708 * _708) + (_707 * _707)) + (_709 * _709)) / (_620 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _734 = _733 * 2.0;
        float _738 = (1.0 - _733) / (_733 + 1.0);
        float _3422 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _748 = ((((1.0 - _739) * (_734 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_734 + 1.0))) + _739) * _620;
        _756 = _587;
        _758 = _586;
        _759 = _585;
        _760 = _597;
        _761 = _596;
        _762 = _595;
        _763 = _607;
        _764 = _606;
        _765 = _605;
        _766 = _620;
        _767 = _619;
        _768 = _618;
        _769 = cbModelParam._m0[36u].z * (isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0)));
        _770 = cbModelParam._m0[36u].z * (isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0)));
        _771 = cbModelParam._m0[36u].z * (isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0)));
    }
    else
    {
        _756 = _757;
        _758 = _757;
        _759 = _757;
        _760 = _757;
        _761 = _757;
        _762 = _757;
        _763 = _757;
        _764 = _757;
        _765 = _757;
        _766 = _757;
        _767 = _757;
        _768 = _757;
        _769 = 0.0;
        _770 = 0.0;
        _771 = 0.0;
    }
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _800 = fma(_425, cbModelParam._m0[30u].z, fma(_421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _417));
        float _804 = fma(_425, cbModelParam._m0[31u].z, fma(_421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _417));
        float _808 = fma(_425, cbModelParam._m0[32u].z, fma(_421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _417));
        float _831 = _417 + _215;
        float _832 = _421 + _216;
        float _833 = _425 + _217;
        float _843 = fma(_833, cbModelParam._m0[30u].z, fma(_832, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _831)) - _800;
        float _844 = fma(_833, cbModelParam._m0[31u].z, fma(_832, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _831)) - _804;
        float _845 = fma(_833, cbModelParam._m0[32u].z, fma(_832, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _831)) - _808;
        float _849 = inversesqrt(dot(vec3(_843, _844, _845), vec3(_843, _844, _845)));
        float _862 = ((_849 * _843) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_800 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_849 * _844) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_804 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _864 = ((_849 * _845) / cbModelParam._m0[35u].z) + ((((((_808 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        float _899 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_866.x + (-0.5));
        float _901 = _899 * (_866.y + (-0.5));
        float _902 = _899 * (_866.z + (-0.5));
        float _909 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_873.x + (-0.5));
        float _911 = _909 * (_873.y + (-0.5));
        float _912 = _909 * (_873.z + (-0.5));
        float _919 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_880.x + (-0.5));
        float _921 = _919 * (_880.y + (-0.5));
        float _922 = _919 * (_880.z + (-0.5));
        float _929 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_887.x + (-0.5));
        float _931 = _929 * (_887.y + (-0.5));
        float _932 = _929 * (_887.z + (-0.5));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = _900 * 0.5;
        float _937 = _910 * 0.5;
        float _938 = _920 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _952 = (dot(vec3(_215, _216, _217), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _961 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3485 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_963 + 1.0))) + _968) * _933;
        float _978 = _901 * 0.5;
        float _979 = _911 * 0.5;
        float _980 = _921 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(_215, _216, _217), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3518 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_1005 + 1.0))) + _1010) * _934;
        float _1020 = _902 * 0.5;
        float _1021 = _912 * 0.5;
        float _1022 = _922 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_215, _216, _217), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3551 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_1047 + 1.0))) + _1052) * _935;
        _1069 = _902;
        _1070 = _901;
        _1071 = _900;
        _1072 = _912;
        _1073 = _911;
        _1074 = _910;
        _1075 = _922;
        _1076 = _921;
        _1077 = _920;
        _1078 = _935;
        _1079 = _934;
        _1080 = _933;
        _1081 = cbModelParam._m0[36u].w * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
        _1082 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
        _1083 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
    }
    else
    {
        _1069 = _757;
        _1070 = _757;
        _1071 = _757;
        _1072 = _757;
        _1073 = _757;
        _1074 = _757;
        _1075 = _757;
        _1076 = _757;
        _1077 = _757;
        _1078 = _757;
        _1079 = _757;
        _1080 = _757;
        _1081 = 0.0;
        _1082 = 0.0;
        _1083 = 0.0;
    }
    float _1093 = (cbModelParam._m0[1u].x * (_1081 - _769)) + _769;
    float _1094 = (cbModelParam._m0[1u].x * (_1082 - _770)) + _770;
    float _1095 = (cbModelParam._m0[1u].x * (_1083 - _771)) + _771;
    float _1116 = fma(_1095, cbSceneParam._m0[89u].z, fma(_1094, cbSceneParam._m0[89u].y, _1093 * cbSceneParam._m0[89u].x));
    float _1119 = fma(_1095, cbSceneParam._m0[90u].z, fma(_1094, cbSceneParam._m0[90u].y, _1093 * cbSceneParam._m0[90u].x));
    float _1122 = fma(_1095, cbSceneParam._m0[91u].z, fma(_1094, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1093));
    float _1137 = _393 * 0.5;
    float _1138 = _394 * 0.5;
    float _1139 = _395 * 0.5;
    float _1140 = dot(vec4(_1137, _1138, _1139, 1.0), vec4(_1071, _1074, _1077, _1080));
    float _1143 = dot(vec4(_1137, _1138, _1139, 1.0), vec4(_1070, _1073, _1076, _1079));
    float _1146 = dot(vec4(_1137, _1138, _1139, 1.0), vec4(_1069, _1072, _1075, _1078));
    float _1180;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1153 = dot(vec4(_1137, _1138, _1139, 1.0), vec4(_756, _760, _763, _766));
        float _1157 = dot(vec4(_1137, _1138, _1139, 1.0), vec4(_758, _761, _764, _767));
        float _1161 = dot(vec4(_1137, _1138, _1139, 1.0), vec4(_759, _762, _765, _768));
        float _1168 = dot(vec4(cbModelParam._m0[39u]), vec4(_1137, _1138, _1139, 1.0));
        _1180 = dot(vec3(isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)), isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)), isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1168) ? 0.0 : (isnan(0.0) ? _1168 : max(0.0, _1168))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1180 = 1.0;
    }
    float _1191;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1182 = dot(vec4(cbModelParam._m0[40u]), vec4(_1137, _1138, _1139, 1.0));
        _1191 = dot(vec3(isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)), isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)), isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1182) ? 0.0 : (isnan(0.0) ? _1182 : max(0.0, _1182))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1191 = 1.0;
    }
    float _1195 = (_1191 * cbModelParam._m0[1u].x) + (_1180 * (1.0 - cbModelParam._m0[1u].x));
    float _1204 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1286;
    float _1288;
    float _1290;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1253 = fma(_425, cbModelParam._m0[13u].z, fma(_421, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _417)) + cbModelParam._m0[13u].w;
        float _1257 = fma(_425, cbModelParam._m0[14u].z, fma(_421, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _417)) + cbModelParam._m0[14u].w;
        float _1261 = fma(_425, cbModelParam._m0[15u].z, fma(_421, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _417)) + cbModelParam._m0[15u].w;
        float _1264 = fma(_395, cbModelParam._m0[13u].z, fma(_394, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _393));
        float _1267 = fma(_395, cbModelParam._m0[14u].z, fma(_394, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _393));
        float _1270 = fma(_395, cbModelParam._m0[15u].z, fma(_394, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _393));
        float _1296;
        if (_1264 > 0.0)
        {
            _1296 = abs((1.0 - _1253) / _1264);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1264 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1253 + 1.0) / _1264);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1296 = frontier_phi_19_17_ladder;
        }
        float _1471;
        if (_1267 > 0.0)
        {
            _1471 = abs((1.0 - _1257) / _1267);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1267 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1257 + 1.0) / _1267);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1471 = frontier_phi_28_24_ladder;
        }
        float _1768;
        if (_1270 > 0.0)
        {
            _1768 = abs((1.0 - _1261) / _1270);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1270 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1261 + 1.0) / _1270);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1768 = frontier_phi_40_35_ladder;
        }
        float _1770 = isnan(_1471) ? _1296 : (isnan(_1296) ? _1471 : min(_1296, _1471));
        float _1771 = isnan(_1768) ? _1770 : (isnan(_1770) ? _1768 : min(_1770, _1768));
        float _1775 = (_1771 * _1264) + _1253;
        float _1776 = (_1771 * _1267) + _1257;
        float _1777 = (_1771 * _1270) + _1261;
        float _1778 = _1771 * 9.9999997473787516355514526367188e-05;
        float _1780 = (-1.0) - _1778;
        float _1782 = _1778 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1777 > _1782) || ((_1777 < _1780) || ((_1776 > _1782) || ((_1776 < _1780) || ((_1775 < _1780) || (_1775 > _1782))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1922 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1777, cbModelParam._m0[9u].z, fma(_1776, cbModelParam._m0[9u].y, _1775 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1777, cbModelParam._m0[10u].z, fma(_1776, cbModelParam._m0[10u].y, _1775 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1777, cbModelParam._m0[11u].z, fma(_1776, cbModelParam._m0[11u].y, _1775 * cbModelParam._m0[11u].x))), _1204);
            frontier_phi_18_40_ladder = _1922.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1922.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1922.x * cbModelParam._m0[1u].y;
        }
        _1286 = frontier_phi_18_40_ladder_2;
        _1288 = frontier_phi_18_40_ladder_1;
        _1290 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1274 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_393, _394, _395), _1204);
        _1286 = _1274.x * cbModelParam._m0[1u].y;
        _1288 = _1274.y * cbModelParam._m0[1u].y;
        _1290 = _1274.z * cbModelParam._m0[1u].y;
    }
    float _1293 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1386;
    float _1388;
    float _1390;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1350 = fma(_425, cbModelParam._m0[21u].z, fma(_421, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _417)) + cbModelParam._m0[21u].w;
        float _1354 = fma(_425, cbModelParam._m0[22u].z, fma(_421, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _417)) + cbModelParam._m0[22u].w;
        float _1358 = fma(_425, cbModelParam._m0[23u].z, fma(_421, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _417)) + cbModelParam._m0[23u].w;
        float _1361 = fma(_395, cbModelParam._m0[21u].z, fma(_394, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _393));
        float _1364 = fma(_395, cbModelParam._m0[22u].z, fma(_394, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _393));
        float _1367 = fma(_395, cbModelParam._m0[23u].z, fma(_394, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _393));
        float _1476;
        if (_1361 > 0.0)
        {
            _1476 = abs((1.0 - _1350) / _1361);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1350 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1476 = frontier_phi_30_26_ladder;
        }
        float _1795;
        if (_1364 > 0.0)
        {
            _1795 = abs((1.0 - _1354) / _1364);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1354 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1795 = frontier_phi_42_37_ladder;
        }
        float _2068;
        if (_1367 > 0.0)
        {
            _2068 = abs((1.0 - _1358) / _1367);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1358 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2068 = frontier_phi_52_49_ladder;
        }
        float _2070 = isnan(_1795) ? _1476 : (isnan(_1476) ? _1795 : min(_1476, _1795));
        float _2071 = isnan(_2068) ? _2070 : (isnan(_2070) ? _2068 : min(_2070, _2068));
        float _2075 = (_2071 * _1361) + _1350;
        float _2076 = (_2071 * _1364) + _1354;
        float _2077 = (_2071 * _1367) + _1358;
        float _2078 = _2071 * 9.9999997473787516355514526367188e-05;
        float _2079 = (-1.0) - _2078;
        float _2081 = _2078 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2077 > _2081) || ((_2077 < _2079) || ((_2076 > _2081) || ((_2076 < _2079) || ((_2075 < _2079) || (_2075 > _2081))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2168 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2077, cbModelParam._m0[17u].z, fma(_2076, cbModelParam._m0[17u].y, _2075 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2077, cbModelParam._m0[18u].z, fma(_2076, cbModelParam._m0[18u].y, _2075 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2077, cbModelParam._m0[19u].z, fma(_2076, cbModelParam._m0[19u].y, _2075 * cbModelParam._m0[19u].x))), _1293);
            frontier_phi_27_52_ladder = _2168.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2168.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2168.x * cbModelParam._m0[1u].z;
        }
        _1386 = frontier_phi_27_52_ladder_2;
        _1388 = frontier_phi_27_52_ladder_1;
        _1390 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1370 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_393, _394, _395), _1293);
        _1386 = _1370.x * cbModelParam._m0[1u].z;
        _1388 = _1370.y * cbModelParam._m0[1u].z;
        _1390 = _1370.z * cbModelParam._m0[1u].z;
    }
    float _1402 = _384 * 0.01200000010430812835693359375;
    float _1404 = _1402 * ((cbModelParam._m0[1u].w * (_1386 - _1286)) + _1286);
    float _1405 = _1402 * ((cbModelParam._m0[1u].w * (_1388 - _1288)) + _1288);
    float _1406 = _1402 * ((cbModelParam._m0[1u].w * (_1390 - _1290)) + _1290);
    float _1409 = fma(_1406, cbSceneParam._m0[89u].z, fma(_1405, cbSceneParam._m0[89u].y, _1404 * cbSceneParam._m0[89u].x));
    float _1412 = fma(_1406, cbSceneParam._m0[90u].z, fma(_1405, cbSceneParam._m0[90u].y, _1404 * cbSceneParam._m0[90u].x));
    float _1415 = fma(_1406, cbSceneParam._m0[91u].z, fma(_1405, cbSceneParam._m0[91u].y, _1404 * cbSceneParam._m0[91u].x));
    float _1450 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1454 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1458 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1462 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1463 = _1450 / _1462;
    float _1464 = _1454 / _1462;
    float _1465 = _1458 / _1462;
    float _1612;
    float _1613;
    float _1614;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1492 = ((uint(_1465 > cbSceneParam._m0[59u].y) + uint(_1465 > cbSceneParam._m0[59u].x)) + uint(_1465 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1493 = _1492 + 43u;
        uint _1501 = _1492 + 44u;
        uint _1509 = _1492 + 45u;
        uint _1517 = _1492 + 46u;
        float _1528 = fma(_1462, cbSceneParam._m0[_1493].w, fma(_1458, cbSceneParam._m0[_1493].z, fma(_1454, cbSceneParam._m0[_1493].y, _1450 * cbSceneParam._m0[_1493].x)));
        float _1532 = fma(_1462, cbSceneParam._m0[_1501].w, fma(_1458, cbSceneParam._m0[_1501].z, fma(_1454, cbSceneParam._m0[_1501].y, _1450 * cbSceneParam._m0[_1501].x)));
        float _1540 = fma(_1462, cbSceneParam._m0[_1517].w, fma(_1458, cbSceneParam._m0[_1517].z, fma(_1454, cbSceneParam._m0[_1517].y, _1450 * cbSceneParam._m0[_1517].x)));
        float _1545 = cbSceneParam._m0[33u].z * _1540;
        float _1547 = cbSceneParam._m0[33u].w * _1540;
        float _1550 = fma(_1462, cbSceneParam._m0[_1509].w, fma(_1458, cbSceneParam._m0[_1509].z, fma(_1454, cbSceneParam._m0[_1509].y, _1450 * cbSceneParam._m0[_1509].x))) / _1540;
        float _1598 = (cbSceneParam._m0[33u].x - sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465))) * cbSceneParam._m0[33u].y;
        float _3677 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1605 = (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1545 + _1528) / _1540, (_1547 + _1532) / _1540), _1550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1547 + _1528) / _1540, (_1532 - _1545) / _1540), _1550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1528 - _1545) / _1540, (_1532 - _1547) / _1540), _1550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1528 - _1547) / _1540, (_1545 + _1532) / _1540), _1550), 0.0)).x), vec4(0.25)));
        _1612 = 1.0 - (_1605 * cbSceneParam._m0[34u].x);
        _1613 = 1.0 - (_1605 * cbSceneParam._m0[34u].y);
        _1614 = 1.0 - (_1605 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1612 = 1.0;
        _1613 = 1.0;
        _1614 = 1.0;
    }
    float _1678;
    float _1680;
    float _1682;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1666 = fma(_1462, cbSceneParam._m0[63u].w, fma(_1458, cbSceneParam._m0[63u].z, fma(_1454, cbSceneParam._m0[63u].y, _1450 * cbSceneParam._m0[63u].x)));
        float _1667 = fma(_1462, cbSceneParam._m0[60u].w, fma(_1458, cbSceneParam._m0[60u].z, fma(_1454, cbSceneParam._m0[60u].y, _1450 * cbSceneParam._m0[60u].x))) / _1666;
        float _1668 = fma(_1462, cbSceneParam._m0[61u].w, fma(_1458, cbSceneParam._m0[61u].z, fma(_1454, cbSceneParam._m0[61u].y, _1450 * cbSceneParam._m0[61u].x))) / _1666;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1667 >= cbSceneParam._m0[64u].x) && (_1668 >= cbSceneParam._m0[64u].y)) && (_1667 <= cbSceneParam._m0[64u].z)) && (_1668 <= cbSceneParam._m0[64u].w))
        {
            float _1808 = fma(_1462, cbSceneParam._m0[62u].w, fma(_1458, cbSceneParam._m0[62u].z, fma(_1454, cbSceneParam._m0[62u].y, _1450 * cbSceneParam._m0[62u].x))) / _1666;
            float _1812 = isnan(cbSceneParam._m0[41u].w) ? _1808 : (isnan(_1808) ? cbSceneParam._m0[41u].w : max(_1808, cbSceneParam._m0[41u].w));
            float _1855 = (cbSceneParam._m0[33u].x - sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465))) * cbSceneParam._m0[33u].y;
            float _3693 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
            float _1862 = (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1667, cbSceneParam._m0[33u].w + _1668), _1812), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1667, _1668 - cbSceneParam._m0[33u].z), _1812), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1667 - cbSceneParam._m0[33u].z, _1668 - cbSceneParam._m0[33u].w), _1812), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1667 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1668), _1812), 0.0)).x), vec4(0.25)));
            float _1866 = 1.0 - (_1862 * cbSceneParam._m0[34u].x);
            float _1867 = 1.0 - (_1862 * cbSceneParam._m0[34u].y);
            float _1868 = 1.0 - (_1862 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1867) ? _1613 : (isnan(_1613) ? _1867 : min(_1613, _1867));
            frontier_phi_39_38_ladder_1 = isnan(_1866) ? _1612 : (isnan(_1612) ? _1866 : min(_1612, _1866));
            frontier_phi_39_38_ladder_2 = isnan(_1868) ? _1614 : (isnan(_1614) ? _1868 : min(_1614, _1868));
        }
        else
        {
            frontier_phi_39_38_ladder = _1613;
            frontier_phi_39_38_ladder_1 = _1612;
            frontier_phi_39_38_ladder_2 = _1614;
        }
        _1678 = frontier_phi_39_38_ladder_1;
        _1680 = frontier_phi_39_38_ladder;
        _1682 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1678 = _1612;
        _1680 = _1613;
        _1682 = _1614;
    }
    uvec4 _1687 = floatBitsToUint(cbInstanceData._m0[_358 + 5u]);
    uint _1689 = _1687.x * 14u;
    uint _1690 = _1689 + 13u;
    float _1697 = _384 + (-1.0);
    float _1703 = (cbLight._m0[_1690].x * _1697) + 1.0;
    float _1704 = (cbLight._m0[_1690].y * _1697) + 1.0;
    float _1705 = (cbLight._m0[_1690].z * _1697) + 1.0;
    float _1706 = (cbLight._m0[_1690].w * _1697) + 1.0;
    uint _1707 = _1689 + 5u;
    float _1713 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
    uint _1717 = _1689 + 4u;
    float _1727 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1731 = _1689 | 1u;
    float _1742 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_215, _216, _217));
    float _1745 = dot(vec3(cbLight._m0[_1731].xyz), vec3(_215, _216, _217));
    float _3729 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _3740 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1750 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.3183098733425140380859375;
    float _1752 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.3183098733425140380859375;
    float _1759 = ((cbLight._m0[_1707].x * _1713) * _1752) + (((cbLight._m0[_1717].x * _1678) * _1727) * _1750);
    float _1760 = ((_1713 * cbLight._m0[_1707].y) * _1752) + (((cbLight._m0[_1717].y * _1680) * _1727) * _1750);
    float _1761 = ((_1713 * cbLight._m0[_1707].z) * _1752) + (((cbLight._m0[_1717].z * _1682) * _1727) * _1750);
    uvec4 _1765 = floatBitsToUint(cbLight._m0[_1689 + 12u]);
    bool _1767 = _1765.x == 0u;
    float _1869;
    float _1871;
    float _1873;
    if (_1767)
    {
        _1869 = _1759;
        _1871 = _1760;
        _1873 = _1761;
    }
    else
    {
        uint _1877 = _1689 + 6u;
        float _1893 = (dot(vec3(cbLight._m0[_1689 + 2u].xyz), vec3(_215, _216, _217)) * 0.5) + 0.5;
        float _1894 = _1893 * _1893;
        float _3751 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1896 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _1869 = (((cbLight._m0[_1877].x * 0.3183098733425140380859375) * _1895) * _1896) + _1759;
        _1871 = (((cbLight._m0[_1877].y * 0.3183098733425140380859375) * _1895) * _1896) + _1760;
        _1873 = (((cbLight._m0[_1877].z * 0.3183098733425140380859375) * _1895) * _1896) + _1761;
    }
    bool _1876 = _1765.y == 0u;
    float _1931;
    float _1933;
    float _1935;
    if (_1876)
    {
        _1931 = _1869;
        _1933 = _1871;
        _1935 = _1873;
    }
    else
    {
        uint _2039 = _1689 + 7u;
        float _2055 = (dot(vec3(cbLight._m0[_1689 + 3u].xyz), vec3(_215, _216, _217)) * 0.5) + 0.5;
        float _2056 = _2055 * _2055;
        float _3767 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _2058 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _1931 = (((cbLight._m0[_2039].x * 0.3183098733425140380859375) * _2057) * _2058) + _1869;
        _1933 = (((cbLight._m0[_2039].y * 0.3183098733425140380859375) * _2057) * _2058) + _1871;
        _1935 = (((cbLight._m0[_2039].z * 0.3183098733425140380859375) * _2057) * _2058) + _1873;
    }
    uint _1937 = _1689 + 8u;
    float _1943 = cbLight._m0[_1689].x + _297;
    float _1944 = cbLight._m0[_1689].y + _298;
    float _1945 = cbLight._m0[_1689].z + _299;
    float _1949 = inversesqrt(dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945)));
    float _1953 = dot(vec3(_215, _216, _217), vec3(cbLight._m0[_1689].xyz));
    float _3783 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _1957 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _1958 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_1943 * _1949, _1944 * _1949, _1945 * _1949));
    float _3805 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1969 = (exp2(log2(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1975 = (0.5 / ((_1956 + 9.9999999392252902907785028219223e-09) + _1957)) * _1956;
    float _3816 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1977 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.31831014156341552734375;
    uint _1991 = _1689 + 9u;
    float _1997 = cbLight._m0[_1731].x + _297;
    float _1998 = cbLight._m0[_1731].y + _298;
    float _1999 = cbLight._m0[_1731].z + _299;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2007 = dot(vec3(_215, _216, _217), vec3(cbLight._m0[_1731].xyz));
    float _3827 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1731].xyz), vec3(_1997 * _2003, _1998 * _2003, _1999 * _2003));
    float _3838 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2020 = (exp2(log2(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2024 = (0.5 / ((_2010 + 9.9999999392252902907785028219223e-09) + _1957)) * _2010;
    float _3849 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2026 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * 0.31831014156341552734375;
    float _2036 = (((_2020 * cbLight._m0[_1991].x) * _2026) * _1713) + ((((cbLight._m0[_1937].x * _1678) * _1969) * _1977) * _1727);
    float _2037 = (((_2020 * cbLight._m0[_1991].y) * _2026) * _1713) + ((((cbLight._m0[_1937].y * _1680) * _1969) * _1977) * _1727);
    float _2038 = (((_2020 * cbLight._m0[_1991].z) * _2026) * _1713) + ((((cbLight._m0[_1937].z * _1682) * _1969) * _1977) * _1727);
    float _2094;
    float _2096;
    float _2098;
    if (_1767)
    {
        _2094 = _2036;
        _2096 = _2037;
        _2098 = _2038;
    }
    else
    {
        uint _2100 = _1689 + 10u;
        uint _2106 = _1689 + 2u;
        float _2112 = cbLight._m0[_2106].x + _297;
        float _2113 = cbLight._m0[_2106].y + _298;
        float _2114 = cbLight._m0[_2106].z + _299;
        float _2118 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
        float _2122 = dot(vec3(_215, _216, _217), vec3(cbLight._m0[_2106].xyz));
        float _3860 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2125 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _2126 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2112 * _2118, _2113 * _2118, _2114 * _2118));
        float _3871 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2135 = (exp2(log2(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2139 = (0.5 / ((_2125 + 9.9999999392252902907785028219223e-09) + _1957)) * _2125;
        float _3882 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2141 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 0.31831014156341552734375;
        float _2142 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _2094 = (((_2135 * cbLight._m0[_2100].x) * _2141) * _2142) + _2036;
        _2096 = (((_2135 * cbLight._m0[_2100].y) * _2141) * _2142) + _2037;
        _2098 = (((_2135 * cbLight._m0[_2100].z) * _2141) * _2142) + _2038;
    }
    float _2173;
    float _2175;
    float _2177;
    if (_1876)
    {
        _2173 = _2094;
        _2175 = _2096;
        _2177 = _2098;
    }
    else
    {
        uint _2184 = _1689 + 11u;
        uint _2190 = _1689 + 3u;
        float _2196 = cbLight._m0[_2190].x + _297;
        float _2197 = cbLight._m0[_2190].y + _298;
        float _2198 = cbLight._m0[_2190].z + _299;
        float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
        float _2206 = dot(vec3(_215, _216, _217), vec3(cbLight._m0[_2190].xyz));
        float _3898 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2209 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _2210 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2196 * _2202, _2197 * _2202, _2198 * _2202));
        float _3909 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2219 = (exp2(log2(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2223 = (0.5 / ((_2209 + 9.9999999392252902907785028219223e-09) + _1957)) * _2209;
        float _3920 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2225 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.31831014156341552734375;
        float _2226 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _2173 = (((_2219 * cbLight._m0[_2184].x) * _2225) * _2226) + _2094;
        _2175 = (((_2219 * cbLight._m0[_2184].y) * _2225) * _2226) + _2096;
        _2177 = (((_2219 * cbLight._m0[_2184].z) * _2225) * _2226) + _2098;
    }
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    if (_1687.y == 0u)
    {
        uvec4 _2247 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2248 = _2247.x;
        uint _2259 = uint((float(_2247.y) * floor(float(uint(cbSceneParam._m0[85u].y * _319) / _2248))) + floor(float(uint(cbSceneParam._m0[85u].x * _318) / _2248)));
        float _2269 = (log2(_1465 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2270 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        uint _2273 = uint(isnan(14.0) ? _2270 : (isnan(_2270) ? 14.0 : min(_2270, 14.0)));
        uvec4 _2278 = texelFetch(g_lightClusterGridBuffer, int(((_2273 << 2u) + (_2259 << 6u)) >> 2u));
        uint _2279 = _2278.x;
        uint _2280 = _2247.z;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        if (((((1u << ((_2280 >> 4u) & 15u)) + 4294967295u) & _2279) == 0u) || ((_2280 & 240u) == 0u))
        {
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
        }
        else
        {
            float _2361;
            float _2363;
            float _2365;
            float _2367;
            float _2369;
            float _2371;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            uint _2517 = 0u;
            uint _2526;
            bool _2527;
            for (;;)
            {
                _2526 = texelFetch(g_lightClassification, int((((_2273 << 5u) + (_2259 << 9u)) + (_2517 << 2u)) >> 2u)).x;
                _2527 = _2526 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2527)
                {
                    frontier_phi_73_pred = _2516;
                    frontier_phi_73_pred_1 = _2515;
                    frontier_phi_73_pred_2 = _2514;
                    frontier_phi_73_pred_3 = _2513;
                    frontier_phi_73_pred_4 = _2512;
                    frontier_phi_73_pred_5 = _2511;
                }
                else
                {
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    uint _2662;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2514;
                    _2660 = _2515;
                    _2661 = _2516;
                    _2662 = _2526;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    for (;;)
                    {
                        uint _2666 = uint(findLSB(_2662)) + (_2517 << 5u);
                        uint _2663 = (_2662 + 4294967295u) & _2662;
                        uint _2668 = _2666 * 48u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 3u)).x));
                        uint _2688 = (_2666 * 48u) + 4u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 3u)).x));
                        uint _2707 = (_2666 * 48u) + 8u;
                        vec3 _2718 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x));
                        float _2722 = _2682.x - _1463;
                        float _2723 = _2682.y - _1464;
                        float _2724 = _2682.z - _1465;
                        float _2725 = dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724));
                        float _2728 = inversesqrt(_2725);
                        float _2737 = 1.0 - (_2725 * _2682.w);
                        float _3946 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2738 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
                        float _2739 = sqrt(_2725) * _2701.w;
                        float _2742 = 1.39999997615814208984375 / (_2739 + 1.39999997615814208984375);
                        float _2743 = _2742 * _2742;
                        float _2746 = ((1.0 - _2743) * dot(vec3(_339, _342, _345), vec3(_2728 * _2722, _2728 * _2723, _2728 * _2724))) + _2743;
                        float _2749 = _2739 * _2739;
                        float _2753 = ((isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))) * _2738) / ((_2749 * 0.699999988079071044921875) + 1.0);
                        float _2757 = (-0.0) - _1463;
                        float _2758 = (-0.0) - _1464;
                        float _2759 = (-0.0) - _1465;
                        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
                        float _2767 = dot(vec3(_339, _342, _345), vec3(_2763 * _2757, _2763 * _2758, _2763 * _2759));
                        float _3962 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _3973 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2771 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
                        float _2775 = (0.5 / (((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) + 9.9999999392252902907785028219223e-09) + _2771)) * _2771;
                        float _3984 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2784 = (((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * 3.1415927410125732421875) / ((_2749 * 2.1991131305694580078125) + 3.141590118408203125)) * _2738;
                        _2586 = (_2753 * _2701.x) + _2659;
                        _2587 = (_2753 * _2701.y) + _2660;
                        _2588 = (_2753 * _2701.z) + _2661;
                        _2583 = (_2784 * _2718.x) + _2656;
                        _2584 = (_2784 * _2718.y) + _2657;
                        _2585 = (_2784 * _2718.z) + _2658;
                        if (_2663 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2586;
                            _2660 = _2587;
                            _2661 = _2588;
                            _2662 = _2663;
                        }
                    }
                    frontier_phi_73_pred = _2588;
                    frontier_phi_73_pred_1 = _2587;
                    frontier_phi_73_pred_2 = _2586;
                    frontier_phi_73_pred_3 = _2585;
                    frontier_phi_73_pred_4 = _2584;
                    frontier_phi_73_pred_5 = _2583;
                }
                _2371 = frontier_phi_73_pred;
                _2369 = frontier_phi_73_pred_1;
                _2367 = frontier_phi_73_pred_2;
                _2365 = frontier_phi_73_pred_3;
                _2363 = frontier_phi_73_pred_4;
                _2361 = frontier_phi_73_pred_5;
                uint _2518 = _2517 + 1u;
                if (_2518 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2511 = _2361;
                    _2512 = _2363;
                    _2513 = _2365;
                    _2514 = _2367;
                    _2515 = _2369;
                    _2516 = _2371;
                    _2517 = _2518;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
        }
        uvec4 _2374 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2375 = _2374.z;
        uint _2377 = (_2375 >> 8u) & 15u;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        if (((4294967295u << _2377) & _2279) == 0u)
        {
            _2482 = _2360;
            _2484 = _2362;
            _2486 = _2364;
            _2488 = _2366;
            _2490 = _2368;
            _2492 = _2370;
        }
        else
        {
            float _2507 = inversesqrt(dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2377 < ((_2375 >> 12u) & 15u))
            {
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2639 = _2360;
                float _2640 = _2362;
                float _2641 = _2364;
                float _2642 = _2366;
                float _2643 = _2368;
                float _2644 = _2370;
                uint _2645 = _2377;
                uint _2654;
                bool _2655;
                for (;;)
                {
                    _2654 = texelFetch(g_lightClassification, int((((_2273 << 5u) + (_2259 << 9u)) + (_2645 << 2u)) >> 2u)).x;
                    _2655 = _2654 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2655)
                    {
                        frontier_phi_84_pred = _2643;
                        frontier_phi_84_pred_1 = _2642;
                        frontier_phi_84_pred_2 = _2641;
                        frontier_phi_84_pred_3 = _2640;
                        frontier_phi_84_pred_4 = _2639;
                        frontier_phi_84_pred_5 = _2644;
                    }
                    else
                    {
                        float _2798;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _2811 = _2639;
                        float _2812 = _2640;
                        float _2813 = _2641;
                        float _2814 = _2642;
                        float _2815 = _2643;
                        float _2816 = _2644;
                        uint _2817 = _2654;
                        uint _2818;
                        vec4 _2843;
                        float _2844;
                        vec4 _2859;
                        vec3 _2871;
                        vec4 _2887;
                        vec4 _2903;
                        float _2950;
                        bool _2951;
                        for (;;)
                        {
                            uint _2828 = ((_2645 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2817));
                            _2818 = (_2817 + 4294967295u) & _2817;
                            uint _2830 = _2828 * 40u;
                            _2843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 3u)).x));
                            _2844 = _2843.w;
                            uint _2846 = (_2828 * 40u) + 4u;
                            _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            uint _2861 = (_2828 * 40u) + 8u;
                            _2871 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x));
                            uint _2874 = (_2828 * 40u) + 16u;
                            _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2890 = (_2828 * 40u) + 20u;
                            _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            uint _2906 = (_2828 * 40u) + 24u;
                            vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2925 = (_2828 * 40u) + 28u;
                            vec4 _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            _2950 = fma(_1465, _2938.z, fma(_1464, _2938.y, _2938.x * _1463)) + _2938.w;
                            _2951 = !((fma(_1465, _2919.z, fma(_1464, _2919.y, _2919.x * _1463)) + _2919.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_2951)
                            {
                                float _2978 = _2843.x - _1463;
                                float _2979 = _2843.y - _1464;
                                float _2980 = _2843.z - _1465;
                                float _2981 = dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980));
                                float _2984 = inversesqrt(_2981);
                                float _2985 = _2984 * _2978;
                                float _2986 = _2984 * _2979;
                                float _2987 = _2984 * _2980;
                                float _2991 = 1.0 - (_2981 / (_2844 * _2844));
                                float _3995 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2992 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
                                float _2996 = sqrt(_2981) * _2859.w;
                                float _2998 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                                float _2999 = _2998 * _2998;
                                float _3000 = 1.0 - _2999;
                                float _3002 = (_3000 * dot(vec3(_2985, _2986, _2987), vec3(_339, _342, _345))) + _2999;
                                float _3005 = _2996 * _2996;
                                float _3009 = (fma(_1465, _2887.z, fma(_1464, _2887.y, _2887.x * _1463)) + _2887.w) / _2950;
                                float _3010 = (fma(_1465, _2903.z, fma(_1464, _2903.y, _2903.x * _1463)) + _2903.w) / _2950;
                                float _3014 = 1.0 - dot(vec2(_3009, _3010), vec2(_3009, _3010));
                                float _4011 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3015 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                                float _3016 = _3015 * (((isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0))) * _2992) / ((_3005 * 0.699999988079071044921875) + 1.0));
                                float _3026 = dot(vec3(_339, _342, _345), vec3((-0.0) - (_1463 * _2507), (-0.0) - (_1464 * _2507), (-0.0) - (_1465 * _2507)));
                                float _4022 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3034 = (_3000 * dot(vec3(_339, _342, _345), vec3(_2985, _2986, _2987))) + _2999;
                                float _4033 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3035 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                                float _3039 = (0.5 / (((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) + 9.9999999392252902907785028219223e-09) + _3035)) * _3035;
                                float _4044 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3046 = (_3015 * _2992) * (((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 3.1415927410125732421875) / ((_3005 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3016 * _2859.y;
                                frontier_phi_90_pred_1 = _3016 * _2859.x;
                                frontier_phi_90_pred_2 = _3046 * _2871.z;
                                frontier_phi_90_pred_3 = _3046 * _2871.y;
                                frontier_phi_90_pred_4 = _3046 * _2871.x;
                                frontier_phi_90_pred_5 = _3016 * _2859.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3054 = frontier_phi_90_pred;
                            _3053 = frontier_phi_90_pred_1;
                            _3052 = frontier_phi_90_pred_2;
                            _3051 = frontier_phi_90_pred_3;
                            _3050 = frontier_phi_90_pred_4;
                            _3055 = frontier_phi_90_pred_5;
                            _2801 = _3053 + _2814;
                            _2802 = _3054 + _2815;
                            _2803 = _3055 + _2816;
                            _2798 = _3050 + _2811;
                            _2799 = _3051 + _2812;
                            _2800 = _3052 + _2813;
                            if (_2818 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2818;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2802;
                        frontier_phi_84_pred_1 = _2801;
                        frontier_phi_84_pred_2 = _2800;
                        frontier_phi_84_pred_3 = _2799;
                        frontier_phi_84_pred_4 = _2798;
                        frontier_phi_84_pred_5 = _2803;
                    }
                    _2491 = frontier_phi_84_pred;
                    _2489 = frontier_phi_84_pred_1;
                    _2487 = frontier_phi_84_pred_2;
                    _2485 = frontier_phi_84_pred_3;
                    _2483 = frontier_phi_84_pred_4;
                    _2493 = frontier_phi_84_pred_5;
                    uint _2646 = _2645 + 1u;
                    if (_2646 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2639 = _2483;
                        _2640 = _2485;
                        _2641 = _2487;
                        _2642 = _2489;
                        _2643 = _2491;
                        _2644 = _2493;
                        _2645 = _2646;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2493;
                frontier_phi_65_66_ladder_1 = _2489;
                frontier_phi_65_66_ladder_2 = _2491;
                frontier_phi_65_66_ladder_3 = _2485;
                frontier_phi_65_66_ladder_4 = _2483;
                frontier_phi_65_66_ladder_5 = _2487;
            }
            else
            {
                frontier_phi_65_66_ladder = _2370;
                frontier_phi_65_66_ladder_1 = _2366;
                frontier_phi_65_66_ladder_2 = _2368;
                frontier_phi_65_66_ladder_3 = _2362;
                frontier_phi_65_66_ladder_4 = _2360;
                frontier_phi_65_66_ladder_5 = _2364;
            }
            _2482 = frontier_phi_65_66_ladder_4;
            _2484 = frontier_phi_65_66_ladder_3;
            _2486 = frontier_phi_65_66_ladder_5;
            _2488 = frontier_phi_65_66_ladder_1;
            _2490 = frontier_phi_65_66_ladder_2;
            _2492 = frontier_phi_65_66_ladder;
        }
        float _2497 = isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0));
        _2291 = (_2497 * _2488) + _1931;
        _2293 = (_2497 * _2490) + _1933;
        _2295 = (_2497 * _2492) + _1935;
        _2297 = ((_2482 * 0.039999999105930328369140625) * _2497) + _2173;
        _2299 = ((_2484 * 0.039999999105930328369140625) * _2497) + _2175;
        _2301 = ((_2486 * 0.039999999105930328369140625) * _2497) + _2177;
    }
    else
    {
        _2291 = _1931;
        _2293 = _1933;
        _2295 = _1935;
        _2297 = _2173;
        _2299 = _2175;
        _2301 = _2177;
    }
    float _4060 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _4071 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _4082 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _4093 = isnan(0.0) ? _219 : (isnan(_219) ? 0.0 : max(_219, 0.0));
    float _2319 = ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_2291 + ((isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0))) * _384))) + ((_2297 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _1195)) * cbPerFrame._m0[3u].x);
    float _2320 = ((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2293 + ((isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0))) * _384))) + ((_2299 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _1195)) * cbPerFrame._m0[3u].x);
    float _2321 = ((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2295 + ((isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0))) * _384))) + ((_2301 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _1195)) * cbPerFrame._m0[3u].x);
    float _2326 = cbInstanceData._m0[_358 + 6u].w * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)));
    float _2331 = _318 / cbSceneParam._m0[86u].x;
    float _2332 = _319 / cbSceneParam._m0[86u].y;
    vec4 _2346 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, (log2((isnan(cbSceneParam._m0[77u].w) ? _238 : (isnan(_238) ? cbSceneParam._m0[77u].w : min(_238, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2348 = _2346.x;
    float _2349 = _2346.y;
    float _2350 = _2346.z;
    float _2351 = _2346.w;
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    if (_238 > cbSceneParam._m0[78u].w)
    {
        float _2385 = isnan(_238) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _238 : min(cbSceneParam._m0[80u].w, _238));
        float _2386 = _2385 / _238;
        float _2397 = _2386 * _290;
        float _2398 = _291 * _2386;
        float _2399 = (-0.0) - _2398;
        float _2400 = _2386 * _292;
        float _2402 = (cbSceneParam._m0[77u].w * _2399) / _2385;
        float _2403 = _2402 + cbSceneParam._m0[79u].w;
        float _2404 = cbSceneParam._m0[79u].w - _2398;
        float _2410 = sqrt(((_2397 * _2397) + (_2398 * _2398)) + (_2400 * _2400));
        float _2413 = (1.0 - (cbSceneParam._m0[77u].w / _2385)) * _2410;
        float _2418 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2420 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2596;
        if (abs((_2399 - _2402) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2596 = ((((_2403 > 0.0) ? exp2(_2418 * _2403) : (2.0 - exp2(_2420 * _2403))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2413;
        }
        else
        {
            float _2540 = 1.0 / cbSceneParam._m0[80u].x;
            float _2541 = isnan(_2404) ? _2403 : (isnan(_2403) ? _2404 : max(_2403, _2404));
            float _2542 = isnan(_2404) ? _2403 : (isnan(_2403) ? _2404 : min(_2403, _2404));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            float _2552 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : min(_2542, 0.0));
            _2596 = ((abs(_2410 / _2399) * cbSceneParam._m0[80u].y) * ((((_2551 - _2552) * 2.0) - ((exp2(_2418 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0)))) - exp2(_2418 * (isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0))))) * _2540)) - ((exp2(_2420 * _2551) - exp2(_2420 * _2552)) * _2540))) + (_2413 * cbSceneParam._m0[80u].z);
        }
        vec4 _2598 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, 1.0), 0.0);
        float _2607 = exp2((_2596 * (-1.44269502162933349609375)) * (1.0 - _2598.w));
        float _2608 = log2(_2607);
        float _2624 = log2(_2351);
        _2422 = (exp2(_2624 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].x)) * _2598.x) / cbSceneParam._m0[78u].x)) + _2348;
        _2424 = (exp2(_2624 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].y)) * _2598.y) / cbSceneParam._m0[78u].y)) + _2349;
        _2426 = (exp2(_2624 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].z)) * _2598.z) / cbSceneParam._m0[78u].z)) + _2350;
        _2428 = _2607 * _2351;
    }
    else
    {
        _2422 = _2348;
        _2424 = _2349;
        _2426 = _2350;
        _2428 = _2351;
    }
    bool _2634;
    vec4 _2438;
    vec4 _2461;
    float _2463;
    float _2467;
    float _2468;
    float _2469;
    float _2470;
    bool _2481;
    for (;;)
    {
        _2438 = cbMatDynParam._m0[0u];
        float _2440 = roundEven(_2438.y);
        bool _2441 = _2440 == 3.0;
        float _2443 = log2(_2428);
        float _2450 = exp2(_2443 * cbSceneParam._m0[78u].x) * _2319;
        float _2451 = exp2(_2443 * cbSceneParam._m0[78u].y) * _2320;
        float _2452 = exp2(_2443 * cbSceneParam._m0[78u].z) * _2321;
        float _2459 = _306 + (-0.5);
        _2461 = cbMtdParam._m0[1u];
        _2463 = _2461.y * _2459;
        float _2466 = (_2440 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2467 = _2466 * (_2441 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2422)));
        _2468 = _2466 * (_2441 ? _2451 : (_2451 + (cbSceneParam._m0[72u].w * _2424)));
        _2469 = _2466 * (_2441 ? _2452 : (_2452 + (cbSceneParam._m0[72u].w * _2426)));
        _2470 = _2459 * 0.999000012874603271484375;
        _2481 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2481)
        {
            if ((cbInstanceData._m0[_358 + 7u].x + _2470) < 0.5)
            {
                _2634 = true;
                break;
            }
        }
        uint _2575 = _360 + uint(_2438.w);
        if ((cbInstanceData._m0[_2575].w < 1.0) && ((cbInstanceData._m0[_2575].w + _2470) < 0.5))
        {
            _2634 = true;
            break;
        }
        if ((_2463 + _206) < _2461.x)
        {
            _2634 = true;
            break;
        }
        _2634 = false;
        break;
    }
    float _2789;
    if (_2634)
    {
        discard_state = true;
        _2789 = 0.0;
    }
    else
    {
        _2789 = _2326;
    }
    SV_Target.x = _2467;
    SV_Target.y = _2468;
    SV_Target.z = _2469;
    SV_Target.w = _2789;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2326;
    discard_exit();
}


