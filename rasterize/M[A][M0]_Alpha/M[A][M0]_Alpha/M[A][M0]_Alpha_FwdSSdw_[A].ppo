#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _755;
float _2946;
float _2947;
float _2948;
float _2949;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    float _176;
    float _177;
    float _178;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
    }
    else
    {
        _176 = _169;
        _177 = _170;
        _178 = _171;
    }
    vec4 _198 = texture(sampler2D(M_A_M0_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _204 = _198.w;
    float _205 = _198.x * cbMtdParam._m0[9u].x;
    float _206 = _198.y * cbMtdParam._m0[9u].y;
    float _207 = _198.z * cbMtdParam._m0[9u].z;
    float _208 = _204 * TEXCOORD_1.z;
    float _212 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _213 = _212 * _176;
    float _214 = _212 * _177;
    float _215 = _212 * _178;
    float _2958 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _217 = isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0));
    float _2969 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _2980 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _2991 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _236 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _278 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _288 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _278);
    float _289 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _278);
    float _290 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _278);
    float _294 = inversesqrt(dot(vec3(_288, _289, _290), vec3(_288, _289, _290)));
    float _295 = _288 * _294;
    float _296 = _289 * _294;
    float _297 = _290 * _294;
    vec4 _302 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _304 = _302.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _434 = sqrt(((_288 * _288) + (_289 * _289)) + (_290 * _290));
        float _440 = (cbMatDynParam._m0[5u].x * _434) + cbMatDynParam._m0[5u].y;
        float _3002 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
        float _441 = isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0));
        float _445 = (cbMatDynParam._m0[5u].z * _434) + cbMatDynParam._m0[5u].w;
        float _3013 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0))) - _441)) + _441) < ((_304 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _316 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _317 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _337 = fma(_215, cbSceneParam._m0[5u].z, fma(_214, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _213));
    float _340 = fma(_215, cbSceneParam._m0[6u].z, fma(_214, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _213));
    float _343 = fma(_215, cbSceneParam._m0[7u].z, fma(_214, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _213));
    uint _356 = uint(roundEven(NORMAL.w)) * 13u;
    uint _358 = _356 + 9u;
    uint _359 = _358 + uint(cbMatDynParam._m0[0u].w);
    float _365 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0)))) * cbInstanceData._m0[_359].x;
    float _366 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2980 : (isnan(_2980) ? 1.0 : min(_2980, 1.0)))) * cbInstanceData._m0[_359].y;
    float _367 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0)))) * cbInstanceData._m0[_359].z;
    float _3024 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _368 = isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0));
    float _3035 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _369 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
    float _3046 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _370 = isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0));
    vec4 _379 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _316, cbSceneParam._m0[86u].y * _317));
    float _382 = _379.x * TEXCOORD_1.w;
    float _383 = dot(vec3(_213, _214, _215), vec3(_295, _296, _297));
    float _386 = _383 * 2.0;
    float _391 = (_386 * _213) - _295;
    float _392 = (_386 * _214) - _296;
    float _393 = (_386 * _215) - _297;
    float _415 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _423 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _754;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _479 = fma(_423, cbModelParam._m0[26u].z, fma(_419, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _415));
        float _483 = fma(_423, cbModelParam._m0[27u].z, fma(_419, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _415));
        float _487 = fma(_423, cbModelParam._m0[28u].z, fma(_419, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _415));
        float _512 = _415 + _213;
        float _513 = _419 + _214;
        float _514 = _423 + _215;
        float _524 = fma(_514, cbModelParam._m0[26u].z, fma(_513, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _512)) - _479;
        float _525 = fma(_514, cbModelParam._m0[27u].z, fma(_513, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _512)) - _483;
        float _526 = fma(_514, cbModelParam._m0[28u].z, fma(_513, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _512)) - _487;
        float _530 = inversesqrt(dot(vec3(_524, _525, _526), vec3(_524, _525, _526)));
        float _543 = ((_530 * _524) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_479 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _544 = ((_530 * _525) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_483 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _545 = ((_530 * _526) / cbModelParam._m0[34u].z) + ((((((_487 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _548 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_543, _544, _545), 0.0);
        vec4 _555 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_543, _544, _545), 0.0);
        vec4 _562 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_543, _544, _545), 0.0);
        vec4 _569 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_543, _544, _545), 0.0);
        float _582 = exp2((_548.w + (-0.5)) * 20.0) * 2.0;
        float _583 = _582 * (_548.x + (-0.5));
        float _584 = _582 * (_548.y + (-0.5));
        float _585 = _582 * (_548.z + (-0.5));
        float _592 = exp2((_555.w + (-0.5)) * 20.0) * 2.0;
        float _593 = _592 * (_555.x + (-0.5));
        float _594 = _592 * (_555.y + (-0.5));
        float _595 = _592 * (_555.z + (-0.5));
        float _602 = exp2((_562.w + (-0.5)) * 20.0) * 2.0;
        float _603 = _602 * (_562.x + (-0.5));
        float _604 = _602 * (_562.y + (-0.5));
        float _605 = _602 * (_562.z + (-0.5));
        float _612 = exp2((_569.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_569.x + (-0.5));
        float _614 = _612 * (_569.y + (-0.5));
        float _615 = _612 * (_569.z + (-0.5));
        float _616 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _617 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        float _618 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _619 = _583 * 0.5;
        float _620 = _593 * 0.5;
        float _621 = _603 * 0.5;
        float _622 = dot(vec3(_619, _620, _621), vec3(_619, _620, _621));
        float _627 = (_622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_622);
        float _636 = (dot(vec3(_213, _214, _215), vec3(_627 * _619, _627 * _620, _627 * _621)) + 1.0) * 0.5;
        float _3072 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _646 = sqrt(((_620 * _620) + (_619 * _619)) + (_621 * _621)) / (_616 + 9.9999997473787516355514526367188e-06);
        float _3083 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _647 = isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0));
        float _648 = _647 * 2.0;
        float _652 = (1.0 - _647) / (_647 + 1.0);
        float _3094 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _653 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
        float _662 = ((((1.0 - _653) * (_648 + 2.0)) * exp2(log2(isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0))) * (_648 + 1.0))) + _653) * _616;
        float _663 = _584 * 0.5;
        float _664 = _594 * 0.5;
        float _665 = _604 * 0.5;
        float _666 = dot(vec3(_663, _664, _665), vec3(_663, _664, _665));
        float _671 = (_666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_666);
        float _679 = (dot(vec3(_213, _214, _215), vec3(_671 * _663, _671 * _664, _671 * _665)) + 1.0) * 0.5;
        float _3105 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _688 = sqrt(((_664 * _664) + (_663 * _663)) + (_665 * _665)) / (_617 + 9.9999997473787516355514526367188e-06);
        float _3116 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _690 = _689 * 2.0;
        float _694 = (1.0 - _689) / (_689 + 1.0);
        float _3127 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _704 = ((((1.0 - _695) * (_690 + 2.0)) * exp2(log2(isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0))) * (_690 + 1.0))) + _695) * _617;
        float _705 = _585 * 0.5;
        float _706 = _595 * 0.5;
        float _707 = _605 * 0.5;
        float _708 = dot(vec3(_705, _706, _707), vec3(_705, _706, _707));
        float _713 = (_708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_708);
        float _721 = (dot(vec3(_213, _214, _215), vec3(_713 * _705, _713 * _706, _713 * _707)) + 1.0) * 0.5;
        float _3138 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _730 = sqrt(((_706 * _706) + (_705 * _705)) + (_707 * _707)) / (_618 + 9.9999997473787516355514526367188e-06);
        float _3149 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _732 = _731 * 2.0;
        float _736 = (1.0 - _731) / (_731 + 1.0);
        float _3160 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
        float _746 = ((((1.0 - _737) * (_732 + 2.0)) * exp2(log2(isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0))) * (_732 + 1.0))) + _737) * _618;
        _754 = _585;
        _756 = _584;
        _757 = _583;
        _758 = _595;
        _759 = _594;
        _760 = _593;
        _761 = _605;
        _762 = _604;
        _763 = _603;
        _764 = _618;
        _765 = _617;
        _766 = _616;
        _767 = cbModelParam._m0[36u].z * (isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0)));
        _768 = cbModelParam._m0[36u].z * (isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0)));
        _769 = cbModelParam._m0[36u].z * (isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0)));
    }
    else
    {
        _754 = _755;
        _756 = _755;
        _757 = _755;
        _758 = _755;
        _759 = _755;
        _760 = _755;
        _761 = _755;
        _762 = _755;
        _763 = _755;
        _764 = _755;
        _765 = _755;
        _766 = _755;
        _767 = 0.0;
        _768 = 0.0;
        _769 = 0.0;
    }
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _798 = fma(_423, cbModelParam._m0[30u].z, fma(_419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _415));
        float _802 = fma(_423, cbModelParam._m0[31u].z, fma(_419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _415));
        float _806 = fma(_423, cbModelParam._m0[32u].z, fma(_419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _415));
        float _829 = _415 + _213;
        float _830 = _419 + _214;
        float _831 = _423 + _215;
        float _841 = fma(_831, cbModelParam._m0[30u].z, fma(_830, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _829)) - _798;
        float _842 = fma(_831, cbModelParam._m0[31u].z, fma(_830, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _829)) - _802;
        float _843 = fma(_831, cbModelParam._m0[32u].z, fma(_830, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _829)) - _806;
        float _847 = inversesqrt(dot(vec3(_841, _842, _843), vec3(_841, _842, _843)));
        float _860 = ((_847 * _841) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_798 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_847 * _842) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_802 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_847 * _843) / cbModelParam._m0[35u].z) + ((((((_806 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_860, _861, _862), 0.0);
        float _897 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_864.x + (-0.5));
        float _899 = _897 * (_864.y + (-0.5));
        float _900 = _897 * (_864.z + (-0.5));
        float _907 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_871.x + (-0.5));
        float _909 = _907 * (_871.y + (-0.5));
        float _910 = _907 * (_871.z + (-0.5));
        float _917 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_878.x + (-0.5));
        float _919 = _917 * (_878.y + (-0.5));
        float _920 = _917 * (_878.z + (-0.5));
        float _927 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_885.x + (-0.5));
        float _929 = _927 * (_885.y + (-0.5));
        float _930 = _927 * (_885.z + (-0.5));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = _898 * 0.5;
        float _935 = _908 * 0.5;
        float _936 = _918 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_213, _214, _215), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3201 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3212 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3223 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0))) * (_961 + 1.0))) + _966) * _931;
        float _976 = _899 * 0.5;
        float _977 = _909 * 0.5;
        float _978 = _919 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_213, _214, _215), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3234 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3245 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3256 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))) * (_1003 + 1.0))) + _1008) * _932;
        float _1018 = _900 * 0.5;
        float _1019 = _910 * 0.5;
        float _1020 = _920 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_213, _214, _215), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3267 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3278 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3289 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))) * (_1045 + 1.0))) + _1050) * _933;
        _1067 = _900;
        _1068 = _899;
        _1069 = _898;
        _1070 = _910;
        _1071 = _909;
        _1072 = _908;
        _1073 = _920;
        _1074 = _919;
        _1075 = _918;
        _1076 = _933;
        _1077 = _932;
        _1078 = _931;
        _1079 = cbModelParam._m0[36u].w * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1080 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1081 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
    }
    else
    {
        _1067 = _755;
        _1068 = _755;
        _1069 = _755;
        _1070 = _755;
        _1071 = _755;
        _1072 = _755;
        _1073 = _755;
        _1074 = _755;
        _1075 = _755;
        _1076 = _755;
        _1077 = _755;
        _1078 = _755;
        _1079 = 0.0;
        _1080 = 0.0;
        _1081 = 0.0;
    }
    float _1091 = (cbModelParam._m0[1u].x * (_1079 - _767)) + _767;
    float _1092 = (cbModelParam._m0[1u].x * (_1080 - _768)) + _768;
    float _1093 = (cbModelParam._m0[1u].x * (_1081 - _769)) + _769;
    float _1114 = fma(_1093, cbSceneParam._m0[89u].z, fma(_1092, cbSceneParam._m0[89u].y, _1091 * cbSceneParam._m0[89u].x));
    float _1117 = fma(_1093, cbSceneParam._m0[90u].z, fma(_1092, cbSceneParam._m0[90u].y, _1091 * cbSceneParam._m0[90u].x));
    float _1120 = fma(_1093, cbSceneParam._m0[91u].z, fma(_1092, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1091));
    float _1135 = _391 * 0.5;
    float _1136 = _392 * 0.5;
    float _1137 = _393 * 0.5;
    float _1138 = dot(vec4(_1135, _1136, _1137, 1.0), vec4(_1069, _1072, _1075, _1078));
    float _1141 = dot(vec4(_1135, _1136, _1137, 1.0), vec4(_1068, _1071, _1074, _1077));
    float _1144 = dot(vec4(_1135, _1136, _1137, 1.0), vec4(_1067, _1070, _1073, _1076));
    float _1178;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1151 = dot(vec4(_1135, _1136, _1137, 1.0), vec4(_754, _758, _761, _764));
        float _1155 = dot(vec4(_1135, _1136, _1137, 1.0), vec4(_756, _759, _762, _765));
        float _1159 = dot(vec4(_1135, _1136, _1137, 1.0), vec4(_757, _760, _763, _766));
        float _1166 = dot(vec4(cbModelParam._m0[39u]), vec4(_1135, _1136, _1137, 1.0));
        _1178 = dot(vec3(isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)), isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)), isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1166) ? 0.0 : (isnan(0.0) ? _1166 : max(0.0, _1166))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1178 = 1.0;
    }
    float _1189;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1180 = dot(vec4(cbModelParam._m0[40u]), vec4(_1135, _1136, _1137, 1.0));
        _1189 = dot(vec3(isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)), isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)), isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1180) ? 0.0 : (isnan(0.0) ? _1180 : max(0.0, _1180))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1189 = 1.0;
    }
    float _1193 = (_1189 * cbModelParam._m0[1u].x) + (_1178 * (1.0 - cbModelParam._m0[1u].x));
    float _1202 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1284;
    float _1286;
    float _1288;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1251 = fma(_423, cbModelParam._m0[13u].z, fma(_419, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _415)) + cbModelParam._m0[13u].w;
        float _1255 = fma(_423, cbModelParam._m0[14u].z, fma(_419, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _415)) + cbModelParam._m0[14u].w;
        float _1259 = fma(_423, cbModelParam._m0[15u].z, fma(_419, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _415)) + cbModelParam._m0[15u].w;
        float _1262 = fma(_393, cbModelParam._m0[13u].z, fma(_392, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _391));
        float _1265 = fma(_393, cbModelParam._m0[14u].z, fma(_392, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _391));
        float _1268 = fma(_393, cbModelParam._m0[15u].z, fma(_392, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _391));
        float _1294;
        if (_1262 > 0.0)
        {
            _1294 = abs((1.0 - _1251) / _1262);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1262 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1251 + 1.0) / _1262);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1294 = frontier_phi_19_17_ladder;
        }
        float _1523;
        if (_1265 > 0.0)
        {
            _1523 = abs((1.0 - _1255) / _1265);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1265 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1255 + 1.0) / _1265);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1523 = frontier_phi_28_24_ladder;
        }
        float _1715;
        if (_1268 > 0.0)
        {
            _1715 = abs((1.0 - _1259) / _1268);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1268 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1259 + 1.0) / _1268);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1715 = frontier_phi_40_35_ladder;
        }
        float _1717 = isnan(_1523) ? _1294 : (isnan(_1294) ? _1523 : min(_1294, _1523));
        float _1718 = isnan(_1715) ? _1717 : (isnan(_1717) ? _1715 : min(_1717, _1715));
        float _1722 = (_1718 * _1262) + _1251;
        float _1723 = (_1718 * _1265) + _1255;
        float _1724 = (_1718 * _1268) + _1259;
        float _1725 = _1718 * 9.9999997473787516355514526367188e-05;
        float _1727 = (-1.0) - _1725;
        float _1729 = _1725 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1724 > _1729) || ((_1724 < _1727) || ((_1723 > _1729) || ((_1723 < _1727) || ((_1722 < _1727) || (_1722 > _1729))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1821 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1724, cbModelParam._m0[9u].z, fma(_1723, cbModelParam._m0[9u].y, _1722 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1724, cbModelParam._m0[10u].z, fma(_1723, cbModelParam._m0[10u].y, _1722 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1724, cbModelParam._m0[11u].z, fma(_1723, cbModelParam._m0[11u].y, _1722 * cbModelParam._m0[11u].x))), _1202);
            frontier_phi_18_40_ladder = _1821.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1821.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1821.x * cbModelParam._m0[1u].y;
        }
        _1284 = frontier_phi_18_40_ladder_2;
        _1286 = frontier_phi_18_40_ladder_1;
        _1288 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1272 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_391, _392, _393), _1202);
        _1284 = _1272.x * cbModelParam._m0[1u].y;
        _1286 = _1272.y * cbModelParam._m0[1u].y;
        _1288 = _1272.z * cbModelParam._m0[1u].y;
    }
    float _1291 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1384;
    float _1386;
    float _1388;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1348 = fma(_423, cbModelParam._m0[21u].z, fma(_419, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _415)) + cbModelParam._m0[21u].w;
        float _1352 = fma(_423, cbModelParam._m0[22u].z, fma(_419, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _415)) + cbModelParam._m0[22u].w;
        float _1356 = fma(_423, cbModelParam._m0[23u].z, fma(_419, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _415)) + cbModelParam._m0[23u].w;
        float _1359 = fma(_393, cbModelParam._m0[21u].z, fma(_392, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _391));
        float _1362 = fma(_393, cbModelParam._m0[22u].z, fma(_392, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _391));
        float _1365 = fma(_393, cbModelParam._m0[23u].z, fma(_392, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _391));
        float _1528;
        if (_1359 > 0.0)
        {
            _1528 = abs((1.0 - _1348) / _1359);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1348 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1528 = frontier_phi_30_26_ladder;
        }
        float _1742;
        if (_1362 > 0.0)
        {
            _1742 = abs((1.0 - _1352) / _1362);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1352 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1742 = frontier_phi_42_37_ladder;
        }
        float _1893;
        if (_1365 > 0.0)
        {
            _1893 = abs((1.0 - _1356) / _1365);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1356 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1893 = frontier_phi_51_48_ladder;
        }
        float _1895 = isnan(_1742) ? _1528 : (isnan(_1528) ? _1742 : min(_1528, _1742));
        float _1896 = isnan(_1893) ? _1895 : (isnan(_1895) ? _1893 : min(_1895, _1893));
        float _1900 = (_1896 * _1359) + _1348;
        float _1901 = (_1896 * _1362) + _1352;
        float _1902 = (_1896 * _1365) + _1356;
        float _1903 = _1896 * 9.9999997473787516355514526367188e-05;
        float _1904 = (-1.0) - _1903;
        float _1906 = _1903 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1902 > _1906) || ((_1902 < _1904) || ((_1901 > _1906) || ((_1901 < _1904) || ((_1900 < _1904) || (_1900 > _1906))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2102 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1902, cbModelParam._m0[17u].z, fma(_1901, cbModelParam._m0[17u].y, _1900 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1902, cbModelParam._m0[18u].z, fma(_1901, cbModelParam._m0[18u].y, _1900 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1902, cbModelParam._m0[19u].z, fma(_1901, cbModelParam._m0[19u].y, _1900 * cbModelParam._m0[19u].x))), _1291);
            frontier_phi_27_51_ladder = _2102.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2102.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2102.x * cbModelParam._m0[1u].z;
        }
        _1384 = frontier_phi_27_51_ladder_2;
        _1386 = frontier_phi_27_51_ladder_1;
        _1388 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1368 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_391, _392, _393), _1291);
        _1384 = _1368.x * cbModelParam._m0[1u].z;
        _1386 = _1368.y * cbModelParam._m0[1u].z;
        _1388 = _1368.z * cbModelParam._m0[1u].z;
    }
    float _1400 = _382 * 0.01200000010430812835693359375;
    float _1402 = _1400 * ((cbModelParam._m0[1u].w * (_1384 - _1284)) + _1284);
    float _1403 = _1400 * ((cbModelParam._m0[1u].w * (_1386 - _1286)) + _1286);
    float _1404 = _1400 * ((cbModelParam._m0[1u].w * (_1388 - _1288)) + _1288);
    float _1407 = fma(_1404, cbSceneParam._m0[89u].z, fma(_1403, cbSceneParam._m0[89u].y, _1402 * cbSceneParam._m0[89u].x));
    float _1410 = fma(_1404, cbSceneParam._m0[90u].z, fma(_1403, cbSceneParam._m0[90u].y, _1402 * cbSceneParam._m0[90u].x));
    float _1413 = fma(_1404, cbSceneParam._m0[91u].z, fma(_1403, cbSceneParam._m0[91u].y, _1402 * cbSceneParam._m0[91u].x));
    vec4 _1421 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_316, _317));
    float _1423 = _1421.w;
    float _1435 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1423);
    float _1436 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1423);
    float _1437 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1423);
    uvec4 _1441 = floatBitsToUint(cbInstanceData._m0[_356 + 5u]);
    uint _1443 = _1441.x * 14u;
    uint _1444 = _1443 + 13u;
    float _1451 = _382 + (-1.0);
    float _1457 = (cbLight._m0[_1444].x * _1451) + 1.0;
    float _1458 = (cbLight._m0[_1444].y * _1451) + 1.0;
    float _1459 = (cbLight._m0[_1444].z * _1451) + 1.0;
    float _1460 = (cbLight._m0[_1444].w * _1451) + 1.0;
    uint _1461 = _1443 + 5u;
    float _1467 = isnan(1.0) ? _1458 : (isnan(_1458) ? 1.0 : min(_1458, 1.0));
    uint _1471 = _1443 + 4u;
    float _1481 = isnan(1.0) ? _1457 : (isnan(_1457) ? 1.0 : min(_1457, 1.0));
    uint _1485 = _1443 | 1u;
    float _1496 = dot(vec3(cbLight._m0[_1443].xyz), vec3(_213, _214, _215));
    float _1499 = dot(vec3(cbLight._m0[_1485].xyz), vec3(_213, _214, _215));
    float _3425 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
    float _3436 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
    float _1504 = (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * 0.3183098733425140380859375;
    float _1506 = (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * 0.3183098733425140380859375;
    float _1513 = ((cbLight._m0[_1461].x * _1467) * _1506) + (((cbLight._m0[_1471].x * _1435) * _1481) * _1504);
    float _1514 = ((_1467 * cbLight._m0[_1461].y) * _1506) + (((cbLight._m0[_1471].y * _1436) * _1481) * _1504);
    float _1515 = ((_1467 * cbLight._m0[_1461].z) * _1506) + (((cbLight._m0[_1471].z * _1437) * _1481) * _1504);
    uvec4 _1520 = floatBitsToUint(cbLight._m0[_1443 + 12u]);
    bool _1522 = _1520.x == 0u;
    float _1533;
    float _1535;
    float _1537;
    if (_1522)
    {
        _1533 = _1513;
        _1535 = _1514;
        _1537 = _1515;
    }
    else
    {
        uint _1541 = _1443 + 6u;
        float _1557 = (dot(vec3(cbLight._m0[_1443 + 2u].xyz), vec3(_213, _214, _215)) * 0.5) + 0.5;
        float _1558 = _1557 * _1557;
        float _3447 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _1560 = isnan(1.0) ? _1459 : (isnan(_1459) ? 1.0 : min(_1459, 1.0));
        _1533 = (((cbLight._m0[_1541].x * 0.3183098733425140380859375) * _1559) * _1560) + _1513;
        _1535 = (((cbLight._m0[_1541].y * 0.3183098733425140380859375) * _1559) * _1560) + _1514;
        _1537 = (((cbLight._m0[_1541].z * 0.3183098733425140380859375) * _1559) * _1560) + _1515;
    }
    bool _1540 = _1520.y == 0u;
    float _1578;
    float _1580;
    float _1582;
    if (_1540)
    {
        _1578 = _1533;
        _1580 = _1535;
        _1582 = _1537;
    }
    else
    {
        uint _1686 = _1443 + 7u;
        float _1702 = (dot(vec3(cbLight._m0[_1443 + 3u].xyz), vec3(_213, _214, _215)) * 0.5) + 0.5;
        float _1703 = _1702 * _1702;
        float _3463 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1705 = isnan(1.0) ? _1460 : (isnan(_1460) ? 1.0 : min(_1460, 1.0));
        _1578 = (((cbLight._m0[_1686].x * 0.3183098733425140380859375) * _1704) * _1705) + _1533;
        _1580 = (((cbLight._m0[_1686].y * 0.3183098733425140380859375) * _1704) * _1705) + _1535;
        _1582 = (((cbLight._m0[_1686].z * 0.3183098733425140380859375) * _1704) * _1705) + _1537;
    }
    uint _1584 = _1443 + 8u;
    float _1590 = cbLight._m0[_1443].x + _295;
    float _1591 = cbLight._m0[_1443].y + _296;
    float _1592 = cbLight._m0[_1443].z + _297;
    float _1596 = inversesqrt(dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592)));
    float _1600 = dot(vec3(_213, _214, _215), vec3(cbLight._m0[_1443].xyz));
    float _3479 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1603 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _3490 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _1604 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _1605 = dot(vec3(cbLight._m0[_1443].xyz), vec3(_1590 * _1596, _1591 * _1596, _1592 * _1596));
    float _3501 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1616 = (exp2(log2(1.0 - (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1622 = (0.5 / ((_1603 + 9.9999999392252902907785028219223e-09) + _1604)) * _1603;
    float _3512 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _1624 = (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * 0.31831014156341552734375;
    uint _1638 = _1443 + 9u;
    float _1644 = cbLight._m0[_1485].x + _295;
    float _1645 = cbLight._m0[_1485].y + _296;
    float _1646 = cbLight._m0[_1485].z + _297;
    float _1650 = inversesqrt(dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646)));
    float _1654 = dot(vec3(_213, _214, _215), vec3(cbLight._m0[_1485].xyz));
    float _3523 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1657 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _1658 = dot(vec3(cbLight._m0[_1485].xyz), vec3(_1644 * _1650, _1645 * _1650, _1646 * _1650));
    float _3534 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _1667 = (exp2(log2(1.0 - (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1671 = (0.5 / ((_1657 + 9.9999999392252902907785028219223e-09) + _1604)) * _1657;
    float _3545 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _1673 = (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * 0.31831014156341552734375;
    float _1683 = (((_1667 * cbLight._m0[_1638].x) * _1673) * _1467) + ((((cbLight._m0[_1584].x * _1435) * _1616) * _1624) * _1481);
    float _1684 = (((_1667 * cbLight._m0[_1638].y) * _1673) * _1467) + ((((cbLight._m0[_1584].y * _1436) * _1616) * _1624) * _1481);
    float _1685 = (((_1667 * cbLight._m0[_1638].z) * _1673) * _1467) + ((((cbLight._m0[_1584].z * _1437) * _1616) * _1624) * _1481);
    float _1747;
    float _1749;
    float _1751;
    if (_1522)
    {
        _1747 = _1683;
        _1749 = _1684;
        _1751 = _1685;
    }
    else
    {
        uint _1753 = _1443 + 10u;
        uint _1759 = _1443 + 2u;
        float _1765 = cbLight._m0[_1759].x + _295;
        float _1766 = cbLight._m0[_1759].y + _296;
        float _1767 = cbLight._m0[_1759].z + _297;
        float _1771 = inversesqrt(dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767)));
        float _1775 = dot(vec3(_213, _214, _215), vec3(cbLight._m0[_1759].xyz));
        float _3556 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1778 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1779 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1765 * _1771, _1766 * _1771, _1767 * _1771));
        float _3567 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1788 = (exp2(log2(1.0 - (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1792 = (0.5 / ((_1778 + 9.9999999392252902907785028219223e-09) + _1604)) * _1778;
        float _3578 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1794 = (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * 0.31831014156341552734375;
        float _1795 = isnan(1.0) ? _1459 : (isnan(_1459) ? 1.0 : min(_1459, 1.0));
        _1747 = (((_1788 * cbLight._m0[_1753].x) * _1794) * _1795) + _1683;
        _1749 = (((_1788 * cbLight._m0[_1753].y) * _1794) * _1795) + _1684;
        _1751 = (((_1788 * cbLight._m0[_1753].z) * _1794) * _1795) + _1685;
    }
    float _1830;
    float _1832;
    float _1834;
    if (_1540)
    {
        _1830 = _1747;
        _1832 = _1749;
        _1834 = _1751;
    }
    else
    {
        uint _1841 = _1443 + 11u;
        uint _1847 = _1443 + 3u;
        float _1853 = cbLight._m0[_1847].x + _295;
        float _1854 = cbLight._m0[_1847].y + _296;
        float _1855 = cbLight._m0[_1847].z + _297;
        float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
        float _1863 = dot(vec3(_213, _214, _215), vec3(cbLight._m0[_1847].xyz));
        float _3594 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1866 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1867 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_1853 * _1859, _1854 * _1859, _1855 * _1859));
        float _3605 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1876 = (exp2(log2(1.0 - (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1880 = (0.5 / ((_1866 + 9.9999999392252902907785028219223e-09) + _1604)) * _1866;
        float _3616 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1882 = (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * 0.31831014156341552734375;
        float _1883 = isnan(1.0) ? _1460 : (isnan(_1460) ? 1.0 : min(_1460, 1.0));
        _1830 = (((_1876 * cbLight._m0[_1841].x) * _1882) * _1883) + _1747;
        _1832 = (((_1876 * cbLight._m0[_1841].y) * _1882) * _1883) + _1749;
        _1834 = (((_1876 * cbLight._m0[_1841].z) * _1882) * _1883) + _1751;
    }
    float _2017;
    float _2019;
    float _2021;
    float _2023;
    float _2025;
    float _2027;
    if (_1441.y == 0u)
    {
        float _1958 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1959 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1958;
        float _1960 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1958;
        float _1961 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1958;
        uvec4 _1973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1974 = _1973.x;
        uint _1985 = uint((float(_1973.y) * floor(float(uint(cbSceneParam._m0[85u].y * _317) / _1974))) + floor(float(uint(cbSceneParam._m0[85u].x * _316) / _1974)));
        float _1995 = (log2(_1961 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1996 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        uint _1999 = uint(isnan(14.0) ? _1996 : (isnan(_1996) ? 14.0 : min(_1996, 14.0)));
        uvec4 _2004 = texelFetch(g_lightClusterGridBuffer, int(((_1999 << 2u) + (_1985 << 6u)) >> 2u));
        uint _2005 = _2004.x;
        uint _2006 = _1973.z;
        float _2107;
        float _2109;
        float _2111;
        float _2113;
        float _2115;
        float _2117;
        if (((((1u << ((_2006 >> 4u) & 15u)) + 4294967295u) & _2005) == 0u) || ((_2006 & 240u) == 0u))
        {
            _2107 = 0.0;
            _2109 = 0.0;
            _2111 = 0.0;
            _2113 = 0.0;
            _2115 = 0.0;
            _2117 = 0.0;
        }
        else
        {
            float _2108;
            float _2110;
            float _2112;
            float _2114;
            float _2116;
            float _2118;
            float _2258 = 0.0;
            float _2259 = 0.0;
            float _2260 = 0.0;
            float _2261 = 0.0;
            float _2262 = 0.0;
            float _2263 = 0.0;
            uint _2264 = 0u;
            uint _2273;
            bool _2274;
            for (;;)
            {
                _2273 = texelFetch(g_lightClassification, int((((_1999 << 5u) + (_1985 << 9u)) + (_2264 << 2u)) >> 2u)).x;
                _2274 = _2273 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2274)
                {
                    frontier_phi_68_pred = _2260;
                    frontier_phi_68_pred_1 = _2263;
                    frontier_phi_68_pred_2 = _2262;
                    frontier_phi_68_pred_3 = _2261;
                    frontier_phi_68_pred_4 = _2259;
                    frontier_phi_68_pred_5 = _2258;
                }
                else
                {
                    float _2403;
                    float _2404;
                    float _2405;
                    float _2406;
                    float _2407;
                    float _2408;
                    uint _2409;
                    _2403 = _2258;
                    _2404 = _2259;
                    _2405 = _2260;
                    _2406 = _2261;
                    _2407 = _2262;
                    _2408 = _2263;
                    _2409 = _2273;
                    float _2330;
                    float _2331;
                    float _2332;
                    float _2333;
                    float _2334;
                    float _2335;
                    for (;;)
                    {
                        uint _2413 = uint(findLSB(_2409)) + (_2264 << 5u);
                        uint _2410 = (_2409 + 4294967295u) & _2409;
                        uint _2415 = _2413 * 48u;
                        vec4 _2429 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2415)).x, texelFetch(g_PointLightRenderingBuffer, int(_2415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2415 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2415 + 3u)).x));
                        uint _2435 = (_2413 * 48u) + 4u;
                        vec4 _2448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2435)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 3u)).x));
                        uint _2454 = (_2413 * 48u) + 8u;
                        vec3 _2465 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2454)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 2u)).x));
                        float _2469 = _2429.x - _1959;
                        float _2470 = _2429.y - _1960;
                        float _2471 = _2429.z - _1961;
                        float _2472 = dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471));
                        float _2475 = inversesqrt(_2472);
                        float _2484 = 1.0 - (_2472 * _2429.w);
                        float _3642 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
                        float _2485 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
                        float _2486 = sqrt(_2472) * _2448.w;
                        float _2489 = 1.39999997615814208984375 / (_2486 + 1.39999997615814208984375);
                        float _2490 = _2489 * _2489;
                        float _2493 = ((1.0 - _2490) * dot(vec3(_337, _340, _343), vec3(_2475 * _2469, _2475 * _2470, _2475 * _2471))) + _2490;
                        float _2496 = _2486 * _2486;
                        float _2500 = ((isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0))) * _2485) / ((_2496 * 0.699999988079071044921875) + 1.0);
                        float _2504 = (-0.0) - _1959;
                        float _2505 = (-0.0) - _1960;
                        float _2506 = (-0.0) - _1961;
                        float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
                        float _2514 = dot(vec3(_337, _340, _343), vec3(_2510 * _2504, _2510 * _2505, _2510 * _2506));
                        float _3658 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
                        float _3669 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
                        float _2518 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
                        float _2522 = (0.5 / (((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) + 9.9999999392252902907785028219223e-09) + _2518)) * _2518;
                        float _3680 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
                        float _2531 = (((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 3.1415927410125732421875) / ((_2496 * 2.1991131305694580078125) + 3.141590118408203125)) * _2485;
                        _2333 = (_2500 * _2448.x) + _2406;
                        _2334 = (_2500 * _2448.y) + _2407;
                        _2335 = (_2500 * _2448.z) + _2408;
                        _2330 = (_2531 * _2465.x) + _2403;
                        _2331 = (_2531 * _2465.y) + _2404;
                        _2332 = (_2531 * _2465.z) + _2405;
                        if (_2410 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2403 = _2330;
                            _2404 = _2331;
                            _2405 = _2332;
                            _2406 = _2333;
                            _2407 = _2334;
                            _2408 = _2335;
                            _2409 = _2410;
                        }
                    }
                    frontier_phi_68_pred = _2332;
                    frontier_phi_68_pred_1 = _2335;
                    frontier_phi_68_pred_2 = _2334;
                    frontier_phi_68_pred_3 = _2333;
                    frontier_phi_68_pred_4 = _2331;
                    frontier_phi_68_pred_5 = _2330;
                }
                _2112 = frontier_phi_68_pred;
                _2118 = frontier_phi_68_pred_1;
                _2116 = frontier_phi_68_pred_2;
                _2114 = frontier_phi_68_pred_3;
                _2110 = frontier_phi_68_pred_4;
                _2108 = frontier_phi_68_pred_5;
                uint _2265 = _2264 + 1u;
                if (_2265 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2258 = _2108;
                    _2259 = _2110;
                    _2260 = _2112;
                    _2261 = _2114;
                    _2262 = _2116;
                    _2263 = _2118;
                    _2264 = _2265;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2107 = _2108;
            _2109 = _2110;
            _2111 = _2112;
            _2113 = _2114;
            _2115 = _2116;
            _2117 = _2118;
        }
        uvec4 _2121 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2122 = _2121.z;
        uint _2124 = (_2122 >> 8u) & 15u;
        float _2229;
        float _2231;
        float _2233;
        float _2235;
        float _2237;
        float _2239;
        if (((4294967295u << _2124) & _2005) == 0u)
        {
            _2229 = _2107;
            _2231 = _2109;
            _2233 = _2111;
            _2235 = _2113;
            _2237 = _2115;
            _2239 = _2117;
        }
        else
        {
            float _2254 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2124 < ((_2122 >> 12u) & 15u))
            {
                float _2230;
                float _2232;
                float _2234;
                float _2236;
                float _2238;
                float _2240;
                float _2386 = _2107;
                float _2387 = _2109;
                float _2388 = _2111;
                float _2389 = _2113;
                float _2390 = _2115;
                float _2391 = _2117;
                uint _2392 = _2124;
                uint _2401;
                bool _2402;
                for (;;)
                {
                    _2401 = texelFetch(g_lightClassification, int((((_1999 << 5u) + (_1985 << 9u)) + (_2392 << 2u)) >> 2u)).x;
                    _2402 = _2401 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2402)
                    {
                        frontier_phi_79_pred = _2391;
                        frontier_phi_79_pred_1 = _2390;
                        frontier_phi_79_pred_2 = _2389;
                        frontier_phi_79_pred_3 = _2388;
                        frontier_phi_79_pred_4 = _2387;
                        frontier_phi_79_pred_5 = _2386;
                    }
                    else
                    {
                        float _2545;
                        float _2546;
                        float _2547;
                        float _2548;
                        float _2549;
                        float _2550;
                        float _2797;
                        float _2798;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2558 = _2386;
                        float _2559 = _2387;
                        float _2560 = _2388;
                        float _2561 = _2389;
                        float _2562 = _2390;
                        float _2563 = _2391;
                        uint _2564 = _2401;
                        uint _2565;
                        vec4 _2590;
                        float _2591;
                        vec4 _2606;
                        vec3 _2618;
                        vec4 _2634;
                        vec4 _2650;
                        float _2697;
                        bool _2698;
                        for (;;)
                        {
                            uint _2575 = ((_2392 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2564));
                            _2565 = (_2564 + 4294967295u) & _2564;
                            uint _2577 = _2575 * 40u;
                            _2590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 3u)).x));
                            _2591 = _2590.w;
                            uint _2593 = (_2575 * 40u) + 4u;
                            _2606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2593 + 3u)).x));
                            uint _2608 = (_2575 * 40u) + 8u;
                            _2618 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 2u)).x));
                            uint _2621 = (_2575 * 40u) + 16u;
                            _2634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 3u)).x));
                            uint _2637 = (_2575 * 40u) + 20u;
                            _2650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 3u)).x));
                            uint _2653 = (_2575 * 40u) + 24u;
                            vec4 _2666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 3u)).x));
                            uint _2672 = (_2575 * 40u) + 28u;
                            vec4 _2685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 3u)).x));
                            _2697 = fma(_1961, _2685.z, fma(_1960, _2685.y, _2685.x * _1959)) + _2685.w;
                            _2698 = !((fma(_1961, _2666.z, fma(_1960, _2666.y, _2666.x * _1959)) + _2666.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2698)
                            {
                                float _2725 = _2590.x - _1959;
                                float _2726 = _2590.y - _1960;
                                float _2727 = _2590.z - _1961;
                                float _2728 = dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727));
                                float _2731 = inversesqrt(_2728);
                                float _2732 = _2731 * _2725;
                                float _2733 = _2731 * _2726;
                                float _2734 = _2731 * _2727;
                                float _2738 = 1.0 - (_2728 / (_2591 * _2591));
                                float _3691 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                                float _2739 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
                                float _2743 = sqrt(_2728) * _2606.w;
                                float _2745 = 1.39999997615814208984375 / (_2743 + 1.39999997615814208984375);
                                float _2746 = _2745 * _2745;
                                float _2747 = 1.0 - _2746;
                                float _2749 = (_2747 * dot(vec3(_2732, _2733, _2734), vec3(_337, _340, _343))) + _2746;
                                float _2752 = _2743 * _2743;
                                float _2756 = (fma(_1961, _2634.z, fma(_1960, _2634.y, _2634.x * _1959)) + _2634.w) / _2697;
                                float _2757 = (fma(_1961, _2650.z, fma(_1960, _2650.y, _2650.x * _1959)) + _2650.w) / _2697;
                                float _2761 = 1.0 - dot(vec2(_2756, _2757), vec2(_2756, _2757));
                                float _3707 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                                float _2762 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
                                float _2763 = _2762 * (((isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0))) * _2739) / ((_2752 * 0.699999988079071044921875) + 1.0));
                                float _2773 = dot(vec3(_337, _340, _343), vec3((-0.0) - (_1959 * _2254), (-0.0) - (_1960 * _2254), (-0.0) - (_1961 * _2254)));
                                float _3718 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                                float _2781 = (_2747 * dot(vec3(_337, _340, _343), vec3(_2732, _2733, _2734))) + _2746;
                                float _3729 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                                float _2782 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                                float _2786 = (0.5 / (((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) + 9.9999999392252902907785028219223e-09) + _2782)) * _2782;
                                float _3740 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                                float _2793 = (_2762 * _2739) * (((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 3.1415927410125732421875) / ((_2752 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2763 * _2606.z;
                                frontier_phi_85_pred_1 = _2763 * _2606.y;
                                frontier_phi_85_pred_2 = _2763 * _2606.x;
                                frontier_phi_85_pred_3 = _2793 * _2618.z;
                                frontier_phi_85_pred_4 = _2793 * _2618.y;
                                frontier_phi_85_pred_5 = _2793 * _2618.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2802 = frontier_phi_85_pred;
                            _2801 = frontier_phi_85_pred_1;
                            _2800 = frontier_phi_85_pred_2;
                            _2799 = frontier_phi_85_pred_3;
                            _2798 = frontier_phi_85_pred_4;
                            _2797 = frontier_phi_85_pred_5;
                            _2548 = _2800 + _2561;
                            _2549 = _2801 + _2562;
                            _2550 = _2802 + _2563;
                            _2545 = _2797 + _2558;
                            _2546 = _2798 + _2559;
                            _2547 = _2799 + _2560;
                            if (_2565 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2558 = _2545;
                                _2559 = _2546;
                                _2560 = _2547;
                                _2561 = _2548;
                                _2562 = _2549;
                                _2563 = _2550;
                                _2564 = _2565;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2550;
                        frontier_phi_79_pred_1 = _2549;
                        frontier_phi_79_pred_2 = _2548;
                        frontier_phi_79_pred_3 = _2547;
                        frontier_phi_79_pred_4 = _2546;
                        frontier_phi_79_pred_5 = _2545;
                    }
                    _2240 = frontier_phi_79_pred;
                    _2238 = frontier_phi_79_pred_1;
                    _2236 = frontier_phi_79_pred_2;
                    _2234 = frontier_phi_79_pred_3;
                    _2232 = frontier_phi_79_pred_4;
                    _2230 = frontier_phi_79_pred_5;
                    uint _2393 = _2392 + 1u;
                    if (_2393 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2386 = _2230;
                        _2387 = _2232;
                        _2388 = _2234;
                        _2389 = _2236;
                        _2390 = _2238;
                        _2391 = _2240;
                        _2392 = _2393;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2236;
                frontier_phi_60_61_ladder_1 = _2240;
                frontier_phi_60_61_ladder_2 = _2238;
                frontier_phi_60_61_ladder_3 = _2234;
                frontier_phi_60_61_ladder_4 = _2232;
                frontier_phi_60_61_ladder_5 = _2230;
            }
            else
            {
                frontier_phi_60_61_ladder = _2113;
                frontier_phi_60_61_ladder_1 = _2117;
                frontier_phi_60_61_ladder_2 = _2115;
                frontier_phi_60_61_ladder_3 = _2111;
                frontier_phi_60_61_ladder_4 = _2109;
                frontier_phi_60_61_ladder_5 = _2107;
            }
            _2229 = frontier_phi_60_61_ladder_5;
            _2231 = frontier_phi_60_61_ladder_4;
            _2233 = frontier_phi_60_61_ladder_3;
            _2235 = frontier_phi_60_61_ladder;
            _2237 = frontier_phi_60_61_ladder_2;
            _2239 = frontier_phi_60_61_ladder_1;
        }
        float _2244 = isnan(1.0) ? _382 : (isnan(_382) ? 1.0 : min(_382, 1.0));
        _2017 = (_2244 * _2235) + _1578;
        _2019 = (_2244 * _2237) + _1580;
        _2021 = (_2244 * _2239) + _1582;
        _2023 = ((_2229 * 0.039999999105930328369140625) * _2244) + _1830;
        _2025 = ((_2231 * 0.039999999105930328369140625) * _2244) + _1832;
        _2027 = ((_2233 * 0.039999999105930328369140625) * _2244) + _1834;
    }
    else
    {
        _2017 = _1578;
        _2019 = _1580;
        _2021 = _1582;
        _2023 = _1830;
        _2025 = _1832;
        _2027 = _1834;
    }
    float _3756 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3767 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3778 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3789 = isnan(0.0) ? _217 : (isnan(_217) ? 0.0 : max(_217, 0.0));
    float _2045 = ((isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_2017 + ((isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0))) * _382))) + ((_2023 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _1193)) * cbPerFrame._m0[3u].x);
    float _2046 = ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_2019 + ((isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0))) * _382))) + ((_2025 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _1193)) * cbPerFrame._m0[3u].x);
    float _2047 = ((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_2021 + ((isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0))) * _382))) + ((_2027 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _1193)) * cbPerFrame._m0[3u].x);
    float _2052 = cbInstanceData._m0[_356 + 6u].w * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)));
    float _2057 = _316 / cbSceneParam._m0[86u].x;
    float _2058 = _317 / cbSceneParam._m0[86u].y;
    vec4 _2072 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2057, _2058, (log2((isnan(cbSceneParam._m0[77u].w) ? _236 : (isnan(_236) ? cbSceneParam._m0[77u].w : min(_236, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2074 = _2072.x;
    float _2075 = _2072.y;
    float _2076 = _2072.z;
    float _2077 = _2072.w;
    float _2169;
    float _2171;
    float _2173;
    float _2175;
    if (_236 > cbSceneParam._m0[78u].w)
    {
        float _2132 = isnan(_236) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _236 : min(cbSceneParam._m0[80u].w, _236));
        float _2133 = _2132 / _236;
        float _2144 = _2133 * _288;
        float _2145 = _289 * _2133;
        float _2146 = (-0.0) - _2145;
        float _2147 = _2133 * _290;
        float _2149 = (cbSceneParam._m0[77u].w * _2146) / _2132;
        float _2150 = _2149 + cbSceneParam._m0[79u].w;
        float _2151 = cbSceneParam._m0[79u].w - _2145;
        float _2157 = sqrt(((_2144 * _2144) + (_2145 * _2145)) + (_2147 * _2147));
        float _2160 = (1.0 - (cbSceneParam._m0[77u].w / _2132)) * _2157;
        float _2165 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2167 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2343;
        if (abs((_2146 - _2149) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2343 = ((((_2150 > 0.0) ? exp2(_2165 * _2150) : (2.0 - exp2(_2167 * _2150))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2160;
        }
        else
        {
            float _2287 = 1.0 / cbSceneParam._m0[80u].x;
            float _2288 = isnan(_2151) ? _2150 : (isnan(_2150) ? _2151 : max(_2150, _2151));
            float _2289 = isnan(_2151) ? _2150 : (isnan(_2150) ? _2151 : min(_2150, _2151));
            float _2298 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : min(_2288, 0.0));
            float _2299 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : min(_2289, 0.0));
            _2343 = ((abs(_2157 / _2146) * cbSceneParam._m0[80u].y) * ((((_2298 - _2299) * 2.0) - ((exp2(_2165 * (isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0)))) - exp2(_2165 * (isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0))))) * _2287)) - ((exp2(_2167 * _2298) - exp2(_2167 * _2299)) * _2287))) + (_2160 * cbSceneParam._m0[80u].z);
        }
        vec4 _2345 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2057, _2058, 1.0), 0.0);
        float _2354 = exp2((_2343 * (-1.44269502162933349609375)) * (1.0 - _2345.w));
        float _2355 = log2(_2354);
        float _2371 = log2(_2077);
        _2169 = (exp2(_2371 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2355 * cbSceneParam._m0[78u].x)) * _2345.x) / cbSceneParam._m0[78u].x)) + _2074;
        _2171 = (exp2(_2371 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2355 * cbSceneParam._m0[78u].y)) * _2345.y) / cbSceneParam._m0[78u].y)) + _2075;
        _2173 = (exp2(_2371 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2355 * cbSceneParam._m0[78u].z)) * _2345.z) / cbSceneParam._m0[78u].z)) + _2076;
        _2175 = _2354 * _2077;
    }
    else
    {
        _2169 = _2074;
        _2171 = _2075;
        _2173 = _2076;
        _2175 = _2077;
    }
    bool _2381;
    vec4 _2185;
    vec4 _2208;
    float _2210;
    float _2214;
    float _2215;
    float _2216;
    float _2217;
    bool _2228;
    for (;;)
    {
        _2185 = cbMatDynParam._m0[0u];
        float _2187 = roundEven(_2185.y);
        bool _2188 = _2187 == 3.0;
        float _2190 = log2(_2175);
        float _2197 = exp2(_2190 * cbSceneParam._m0[78u].x) * _2045;
        float _2198 = exp2(_2190 * cbSceneParam._m0[78u].y) * _2046;
        float _2199 = exp2(_2190 * cbSceneParam._m0[78u].z) * _2047;
        float _2206 = _304 + (-0.5);
        _2208 = cbMtdParam._m0[1u];
        _2210 = _2208.y * _2206;
        float _2213 = (_2187 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2214 = _2213 * (_2188 ? _2197 : (_2197 + (cbSceneParam._m0[72u].w * _2169)));
        _2215 = _2213 * (_2188 ? _2198 : (_2198 + (cbSceneParam._m0[72u].w * _2171)));
        _2216 = _2213 * (_2188 ? _2199 : (_2199 + (cbSceneParam._m0[72u].w * _2173)));
        _2217 = _2206 * 0.999000012874603271484375;
        _2228 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2228)
        {
            if ((cbInstanceData._m0[_356 + 7u].x + _2217) < 0.5)
            {
                _2381 = true;
                break;
            }
        }
        uint _2322 = _358 + uint(_2185.w);
        if ((cbInstanceData._m0[_2322].w < 1.0) && ((cbInstanceData._m0[_2322].w + _2217) < 0.5))
        {
            _2381 = true;
            break;
        }
        if ((_2210 + _204) < _2208.x)
        {
            _2381 = true;
            break;
        }
        _2381 = false;
        break;
    }
    float _2536;
    if (_2381)
    {
        discard_state = true;
        _2536 = 0.0;
    }
    else
    {
        _2536 = _2052;
    }
    SV_Target.x = _2214;
    SV_Target.y = _2215;
    SV_Target.z = _2216;
    SV_Target.w = _2536;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2052;
    discard_exit();
}


