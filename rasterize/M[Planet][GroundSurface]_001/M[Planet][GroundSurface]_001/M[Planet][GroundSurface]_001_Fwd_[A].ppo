#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1215;
float _3581;
float _3582;
float _3583;
float _3584;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229;
    float _230;
    float _231;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
    }
    else
    {
        _229 = _215;
        _230 = _216;
        _231 = _217;
    }
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _286 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _276);
    float _287 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _276);
    float _288 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _276);
    uvec4 _292 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _294 = _292.z != 0u;
    vec4 _315 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _318 = _315.x;
    float _319 = _315.y;
    float _320 = _315.z;
    bool _341 = _292.x != 0u;
    vec4 _360 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _362 = _360.x;
    float _363 = _360.y;
    float _364 = _360.z;
    float _381 = _341 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[9u].w - _362)) + _362) : (_362 * cbMtdParam._m0[9u].w);
    float _382 = _341 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[10u].x - _363)) + _363) : (_363 * cbMtdParam._m0[10u].x);
    float _383 = _341 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[10u].y - _364)) + _364) : (_364 * cbMtdParam._m0[10u].y);
    bool _385 = _292.y != 0u;
    vec4 _401 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _403 = _401.x;
    float _404 = _401.y;
    float _405 = _401.z;
    vec4 _433 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _435 = _433.x;
    float _436 = _433.y;
    float _444 = ((cbMtdParam._m0[14u].y * (-1.39999997615814208984375)) * (1.0 - _435)) + 1.0;
    float _3593 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _449 = (cbMtdParam._m0[13u].w * ((isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) - _435)) + _435;
    float _456 = (_449 * ((_385 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[10u].w - _403)) + _403) : (_403 * cbMtdParam._m0[10u].w)) - _381)) + _381;
    float _457 = (_449 * ((_385 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[11u].x - _404)) + _404) : (_404 * cbMtdParam._m0[11u].x)) - _382)) + _382;
    float _458 = (_449 * ((_385 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[11u].y - _405)) + _405) : (_405 * cbMtdParam._m0[11u].y)) - _383)) + _383;
    float _462 = (((1.0 - _436) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].x) + 1.0;
    float _3604 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = (cbMtdParam._m0[12u].w * ((isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) - _436)) + _436;
    float _474 = (_467 * ((_294 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[11u].w - _318)) + _318) : (_318 * cbMtdParam._m0[11u].w)) - _456)) + _456;
    float _475 = (_467 * ((_294 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[12u].x - _319)) + _319) : (_319 * cbMtdParam._m0[12u].x)) - _457)) + _457;
    float _476 = (_467 * ((_294 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[12u].y - _320)) + _320) : (_320 * cbMtdParam._m0[12u].y)) - _458)) + _458;
    vec4 _488 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _509 = cbMtdParam._m0[13u].z * _505.x;
    float _516 = (_509 * (_488.x - _474)) + _474;
    float _517 = (_509 * (_488.y - _475)) + _475;
    float _518 = (_509 * (_488.z - _476)) + _476;
    float _522 = inversesqrt(dot(vec3(_286, _287, _288), vec3(_286, _287, _288)));
    float _523 = _522 * _286;
    float _524 = _522 * _287;
    float _525 = _522 * _288;
    float _526 = dot(vec4(_523, _524, _525, 0.0), vec4(_229, _230, _231, 0.0));
    float _3615 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _532 = exp2(log2(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))));
    float _535 = (_532 * 0.680000007152557373046875) + 0.119999997317790985107421875;
    float _555 = (_535 * ((0.048556677997112274169921875 - _516) + (_532 * 0.275154531002044677734375))) + _516;
    float _556 = (_535 * ((0.079126082360744476318359375 - _517) + (_532 * 0.448381125926971435546875))) + _517;
    float _557 = (_535 * ((0.1159258782863616943359375 - _518) + (_532 * 0.656913340091705322265625))) + _518;
    vec4 _569 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _586 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _588 = _586.x;
    float _589 = _586.y;
    float _590 = _586.z;
    float _597 = ((_569.x - _588) * _449) + _588;
    float _598 = ((_569.y - _589) * _449) + _589;
    float _599 = ((_569.z - _590) * _449) + _590;
    vec4 _611 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _637 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _649 = (((_611.x - _597) * _467) + _597) + ((_637.x + (-0.5)) * cbMtdParam._m0[14u].z);
    float _650 = (((_611.y - _598) * _467) + _598) + ((_637.y + (-0.5)) * cbMtdParam._m0[14u].z);
    float _651 = (((_611.z - _599) * _467) + _599) + ((_637.z + (-0.5)) * cbMtdParam._m0[14u].z);
    vec4 _664 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _675 = ((_664.x - _649) * _509) + _649;
    float _676 = ((_664.y - _650) * _509) + _650;
    float _677 = ((_664.z - _651) * _509) + _651;
    float _687 = ((1.0 - _677) * _535) + _677;
    float _691 = ((((0.502016007900238037109375 - _675) * _535) + _675) * 2.0) + (-1.0);
    float _693 = ((((0.502016007900238037109375 - _676) * _535) + _676) * 2.0) + (-1.0);
    float _694 = dot(vec2(_691, _693), vec2(_691, _693));
    float _3626 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _699 = sqrt(1.0 - (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))));
    float _702 = fma(_699, _229, fma(_693, _221 * TANGENT.x, (_207 * _200) * _691));
    float _705 = fma(_699, _230, fma(_693, _221 * TANGENT.y, (_207 * _201) * _691));
    float _708 = fma(_699, _231, fma(_693, _221 * TANGENT.z, (_207 * _202) * _691));
    float _712 = inversesqrt(dot(vec3(_702, _705, _708), vec3(_702, _705, _708)));
    float _713 = _712 * _702;
    float _714 = _712 * _705;
    float _715 = _712 * _708;
    float _3637 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _716 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3659 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3670 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _734 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _739 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _741 = _739.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _895 = sqrt(((_286 * _286) + (_287 * _287)) + (_288 * _288));
        float _901 = (cbMatDynParam._m0[5u].x * _895) + cbMatDynParam._m0[5u].y;
        float _3681 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _906 = (cbMatDynParam._m0[5u].z * _895) + cbMatDynParam._m0[5u].w;
        float _3692 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) - _902)) + _902) < ((_741 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _752 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _753 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _771 = fma(_715, cbSceneParam._m0[5u].z, fma(_714, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _713));
    float _774 = fma(_715, cbSceneParam._m0[6u].z, fma(_714, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _713));
    float _777 = fma(_715, cbSceneParam._m0[7u].z, fma(_714, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _713));
    uint _790 = uint(roundEven(NORMAL.w)) * 13u;
    uint _791 = _790 + 9u;
    uint _792 = _791 + uint(cbMatDynParam._m0[0u].w);
    float _798 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * cbInstanceData._m0[_792].x;
    float _799 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbInstanceData._m0[_792].y;
    float _800 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_792].z;
    float _3703 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    vec4 _812 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _752, cbSceneParam._m0[86u].y * _753));
    float _815 = _812.x * TEXCOORD.z;
    float _816 = dot(vec3(_713, _714, _715), vec3(_523, _524, _525));
    float _819 = _816 * 2.0;
    float _823 = (_819 * _713) - _523;
    float _824 = (_819 * _714) - _524;
    float _825 = (_819 * _715) - _525;
    float _829 = abs(dot(vec3(_523, _524, _525), vec3(_713, _714, _715)));
    float _3736 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _831 = sqrt(_716);
    float _844 = exp2((_831 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_831 * 3.0));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1214;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _940 = fma(_884, cbModelParam._m0[26u].z, fma(_880, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876));
        float _944 = fma(_884, cbModelParam._m0[27u].z, fma(_880, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876));
        float _948 = fma(_884, cbModelParam._m0[28u].z, fma(_880, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876));
        float _972 = _876 + _713;
        float _973 = _880 + _714;
        float _974 = _884 + _715;
        float _984 = fma(_974, cbModelParam._m0[26u].z, fma(_973, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _972)) - _940;
        float _985 = fma(_974, cbModelParam._m0[27u].z, fma(_973, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _972)) - _944;
        float _986 = fma(_974, cbModelParam._m0[28u].z, fma(_973, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _972)) - _948;
        float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
        float _1003 = ((_990 * _984) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_940 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_990 * _985) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_944 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_990 * _986) / cbModelParam._m0[34u].z) + ((((((_948 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        float _1042 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1008.x + (-0.5));
        float _1044 = _1042 * (_1008.y + (-0.5));
        float _1045 = _1042 * (_1008.z + (-0.5));
        float _1052 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1015.x + (-0.5));
        float _1054 = _1052 * (_1015.y + (-0.5));
        float _1055 = _1052 * (_1015.z + (-0.5));
        float _1062 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1022.x + (-0.5));
        float _1064 = _1062 * (_1022.y + (-0.5));
        float _1065 = _1062 * (_1022.z + (-0.5));
        float _1072 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1029.x + (-0.5));
        float _1074 = _1072 * (_1029.y + (-0.5));
        float _1075 = _1072 * (_1029.z + (-0.5));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = _1043 * 0.5;
        float _1080 = _1053 * 0.5;
        float _1081 = _1063 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1096 = (dot(vec3(_713, _714, _715), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1106 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3784 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1108 + 1.0))) + _1113) * _1076;
        float _1123 = _1044 * 0.5;
        float _1124 = _1054 * 0.5;
        float _1125 = _1064 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_713, _714, _715), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3817 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1150 + 1.0))) + _1155) * _1077;
        float _1165 = _1045 * 0.5;
        float _1166 = _1055 * 0.5;
        float _1167 = _1065 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_713, _714, _715), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3850 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1192 + 1.0))) + _1197) * _1078;
        _1214 = _1045;
        _1216 = _1044;
        _1217 = _1043;
        _1218 = _1055;
        _1219 = _1054;
        _1220 = _1053;
        _1221 = _1065;
        _1222 = _1064;
        _1223 = _1063;
        _1224 = _1078;
        _1225 = _1077;
        _1226 = _1076;
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
    }
    else
    {
        _1214 = _1215;
        _1216 = _1215;
        _1217 = _1215;
        _1218 = _1215;
        _1219 = _1215;
        _1220 = _1215;
        _1221 = _1215;
        _1222 = _1215;
        _1223 = _1215;
        _1224 = _1215;
        _1225 = _1215;
        _1226 = _1215;
        _1227 = 0.0;
        _1228 = 0.0;
        _1229 = 0.0;
    }
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1258 = fma(_884, cbModelParam._m0[30u].z, fma(_880, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _876));
        float _1262 = fma(_884, cbModelParam._m0[31u].z, fma(_880, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _876));
        float _1266 = fma(_884, cbModelParam._m0[32u].z, fma(_880, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _876));
        float _1289 = _876 + _713;
        float _1290 = _880 + _714;
        float _1291 = _884 + _715;
        float _1301 = fma(_1291, cbModelParam._m0[30u].z, fma(_1290, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1289)) - _1258;
        float _1302 = fma(_1291, cbModelParam._m0[31u].z, fma(_1290, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1289)) - _1262;
        float _1303 = fma(_1291, cbModelParam._m0[32u].z, fma(_1290, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1289)) - _1266;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1258 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1262 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[35u].z) + ((((((_1266 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1357 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1324.x + (-0.5));
        float _1359 = _1357 * (_1324.y + (-0.5));
        float _1360 = _1357 * (_1324.z + (-0.5));
        float _1367 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1331.x + (-0.5));
        float _1369 = _1367 * (_1331.y + (-0.5));
        float _1370 = _1367 * (_1331.z + (-0.5));
        float _1377 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1338.x + (-0.5));
        float _1379 = _1377 * (_1338.y + (-0.5));
        float _1380 = _1377 * (_1338.z + (-0.5));
        float _1387 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1345.x + (-0.5));
        float _1389 = _1387 * (_1345.y + (-0.5));
        float _1390 = _1387 * (_1345.z + (-0.5));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = _1358 * 0.5;
        float _1395 = _1368 * 0.5;
        float _1396 = _1378 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_713, _714, _715), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _3913 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1421 + 1.0))) + _1426) * _1391;
        float _1436 = _1359 * 0.5;
        float _1437 = _1369 * 0.5;
        float _1438 = _1379 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_713, _714, _715), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _3946 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1463 + 1.0))) + _1468) * _1392;
        float _1478 = _1360 * 0.5;
        float _1479 = _1370 * 0.5;
        float _1480 = _1380 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_713, _714, _715), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _3979 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1505 + 1.0))) + _1510) * _1393;
        _1527 = _1360;
        _1528 = _1359;
        _1529 = _1358;
        _1530 = _1370;
        _1531 = _1369;
        _1532 = _1368;
        _1533 = _1380;
        _1534 = _1379;
        _1535 = _1378;
        _1536 = _1393;
        _1537 = _1392;
        _1538 = _1391;
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
    }
    else
    {
        _1527 = _1215;
        _1528 = _1215;
        _1529 = _1215;
        _1530 = _1215;
        _1531 = _1215;
        _1532 = _1215;
        _1533 = _1215;
        _1534 = _1215;
        _1535 = _1215;
        _1536 = _1215;
        _1537 = _1215;
        _1538 = _1215;
        _1539 = 0.0;
        _1540 = 0.0;
        _1541 = 0.0;
    }
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1227)) + _1227;
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1228)) + _1228;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1229)) + _1229;
    float _1574 = fma(_1553, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1551 * cbSceneParam._m0[89u].x));
    float _1577 = fma(_1553, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1551 * cbSceneParam._m0[90u].x));
    float _1580 = fma(_1553, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1551));
    float _1595 = _823 * 0.5;
    float _1596 = _824 * 0.5;
    float _1597 = _825 * 0.5;
    float _1598 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1601 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1604 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1638;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1611 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1214, _1218, _1221, _1224));
        float _1615 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1216, _1219, _1222, _1225));
        float _1619 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1217, _1220, _1223, _1226));
        float _1626 = dot(vec4(cbModelParam._m0[39u]), vec4(_1595, _1596, _1597, 1.0));
        _1638 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1638 = 1.0;
    }
    float _1649;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1640 = dot(vec4(cbModelParam._m0[40u]), vec4(_1595, _1596, _1597, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1640) ? 0.0 : (isnan(0.0) ? _1640 : max(0.0, _1640))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1653 = (_1649 * cbModelParam._m0[1u].x) + (_1638 * (1.0 - cbModelParam._m0[1u].x));
    float _1663 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _716);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1663 : min(cbModelParam._m0[25u].z, _1663));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1711 = fma(_884, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876)) + cbModelParam._m0[13u].w;
        float _1715 = fma(_884, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876)) + cbModelParam._m0[14u].w;
        float _1719 = fma(_884, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876)) + cbModelParam._m0[15u].w;
        float _1722 = fma(_825, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _823));
        float _1725 = fma(_825, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _823));
        float _1728 = fma(_825, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _823));
        float _1756;
        if (_1722 > 0.0)
        {
            _1756 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1756 = frontier_phi_19_17_ladder;
        }
        float _1960;
        if (_1725 > 0.0)
        {
            _1960 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1960 = frontier_phi_28_24_ladder;
        }
        float _2203;
        if (_1728 > 0.0)
        {
            _2203 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2203 = frontier_phi_40_35_ladder;
        }
        float _2205 = isnan(_1960) ? _1756 : (isnan(_1756) ? _1960 : min(_1756, _1960));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1722) + _1711;
        float _2211 = (_2206 * _1725) + _1715;
        float _2212 = (_2206 * _1728) + _1719;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2213;
        float _2217 = _2213 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 > _2217) || ((_2211 < _2215) || ((_2210 < _2215) || (_2210 > _2217))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2336 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2212, cbModelParam._m0[9u].z, fma(_2211, cbModelParam._m0[9u].y, _2210 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2212, cbModelParam._m0[10u].z, fma(_2211, cbModelParam._m0[10u].y, _2210 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2212, cbModelParam._m0[11u].z, fma(_2211, cbModelParam._m0[11u].y, _2210 * cbModelParam._m0[11u].x))), _1664);
            frontier_phi_18_40_ladder = _2336.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2336.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2336.x * cbModelParam._m0[1u].y;
        }
        _1744 = frontier_phi_18_40_ladder_2;
        _1746 = frontier_phi_18_40_ladder_1;
        _1748 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_823, _824, _825), _1664);
        _1744 = _1732.x * cbModelParam._m0[1u].y;
        _1746 = _1732.y * cbModelParam._m0[1u].y;
        _1748 = _1732.z * cbModelParam._m0[1u].y;
    }
    float _1752 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _716);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1752 : min(cbModelParam._m0[25u].w, _1752));
    float _1846;
    float _1848;
    float _1850;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1810 = fma(_884, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876)) + cbModelParam._m0[21u].w;
        float _1814 = fma(_884, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876)) + cbModelParam._m0[22u].w;
        float _1818 = fma(_884, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876)) + cbModelParam._m0[23u].w;
        float _1821 = fma(_825, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _823));
        float _1824 = fma(_825, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _823));
        float _1827 = fma(_825, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _823));
        float _1965;
        if (_1821 > 0.0)
        {
            _1965 = abs((1.0 - _1810) / _1821);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1810 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1965 = frontier_phi_30_26_ladder;
        }
        float _2230;
        if (_1824 > 0.0)
        {
            _2230 = abs((1.0 - _1814) / _1824);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1814 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2230 = frontier_phi_42_37_ladder;
        }
        float _2435;
        if (_1827 > 0.0)
        {
            _2435 = abs((1.0 - _1818) / _1827);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1818 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2435 = frontier_phi_51_48_ladder;
        }
        float _2437 = isnan(_2230) ? _1965 : (isnan(_1965) ? _2230 : min(_1965, _2230));
        float _2438 = isnan(_2435) ? _2437 : (isnan(_2437) ? _2435 : min(_2437, _2435));
        float _2442 = (_2438 * _1821) + _1810;
        float _2443 = (_2438 * _1824) + _1814;
        float _2444 = (_2438 * _1827) + _1818;
        float _2445 = _2438 * 9.9999997473787516355514526367188e-05;
        float _2446 = (-1.0) - _2445;
        float _2448 = _2445 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2444 > _2448) || ((_2444 < _2446) || ((_2443 > _2448) || ((_2443 < _2446) || ((_2442 < _2446) || (_2442 > _2448))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2444, cbModelParam._m0[17u].z, fma(_2443, cbModelParam._m0[17u].y, _2442 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2444, cbModelParam._m0[18u].z, fma(_2443, cbModelParam._m0[18u].y, _2442 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2444, cbModelParam._m0[19u].z, fma(_2443, cbModelParam._m0[19u].y, _2442 * cbModelParam._m0[19u].x))), _1753);
            frontier_phi_27_51_ladder = _2642.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2642.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2642.x * cbModelParam._m0[1u].z;
        }
        _1846 = frontier_phi_27_51_ladder_2;
        _1848 = frontier_phi_27_51_ladder_1;
        _1850 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1830 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_823, _824, _825), _1753);
        _1846 = _1830.x * cbModelParam._m0[1u].z;
        _1848 = _1830.y * cbModelParam._m0[1u].z;
        _1850 = _1830.z * cbModelParam._m0[1u].z;
    }
    float _1862 = ((((1.0 - _844) * ((_831 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_844 * _831)) * _815;
    float _1863 = _1862 * ((cbModelParam._m0[1u].w * (_1846 - _1744)) + _1744);
    float _1864 = _1862 * ((cbModelParam._m0[1u].w * (_1848 - _1746)) + _1746);
    float _1865 = _1862 * ((cbModelParam._m0[1u].w * (_1850 - _1748)) + _1748);
    float _1868 = fma(_1865, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1863 * cbSceneParam._m0[89u].x));
    float _1871 = fma(_1865, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1863 * cbSceneParam._m0[90u].x));
    float _1874 = fma(_1865, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, _1863 * cbSceneParam._m0[91u].x));
    uvec4 _1884 = floatBitsToUint(cbInstanceData._m0[_790 + 5u]);
    uint _1886 = _1884.x * 14u;
    uint _1887 = _1886 + 13u;
    float _1894 = _815 + (-1.0);
    float _1899 = (cbLight._m0[_1887].x * _1894) + 1.0;
    float _1900 = (cbLight._m0[_1887].y * _1894) + 1.0;
    float _1901 = (cbLight._m0[_1887].z * _1894) + 1.0;
    float _1902 = (cbLight._m0[_1887].w * _1894) + 1.0;
    uint _1903 = _1886 + 5u;
    float _1909 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
    uint _1913 = _1886 + 4u;
    float _1919 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
    uint _1923 = _1886 | 1u;
    float _1934 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_713, _714, _715));
    float _1937 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_713, _714, _715));
    float _4115 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _4126 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1942 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.3183098733425140380859375;
    float _1944 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 0.3183098733425140380859375;
    float _1951 = ((cbLight._m0[_1903].x * _1909) * _1944) + ((cbLight._m0[_1913].x * _1919) * _1942);
    float _1952 = ((_1909 * cbLight._m0[_1903].y) * _1944) + ((_1919 * cbLight._m0[_1913].y) * _1942);
    float _1953 = ((_1909 * cbLight._m0[_1903].z) * _1944) + ((_1919 * cbLight._m0[_1913].z) * _1942);
    uvec4 _1957 = floatBitsToUint(cbLight._m0[_1886 + 12u]);
    bool _1959 = _1957.x == 0u;
    float _1970;
    float _1972;
    float _1974;
    if (_1959)
    {
        _1970 = _1951;
        _1972 = _1952;
        _1974 = _1953;
    }
    else
    {
        uint _1978 = _1886 + 6u;
        float _1994 = (dot(vec3(cbLight._m0[_1886 + 2u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _1995 = _1994 * _1994;
        float _4137 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1996 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1997 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _1970 = (((cbLight._m0[_1978].x * 0.3183098733425140380859375) * _1996) * _1997) + _1951;
        _1972 = (((cbLight._m0[_1978].y * 0.3183098733425140380859375) * _1996) * _1997) + _1952;
        _1974 = (((cbLight._m0[_1978].z * 0.3183098733425140380859375) * _1996) * _1997) + _1953;
    }
    bool _1977 = _1957.y == 0u;
    float _2015;
    float _2017;
    float _2019;
    if (_1977)
    {
        _2015 = _1970;
        _2017 = _1972;
        _2019 = _1974;
    }
    else
    {
        uint _2174 = _1886 + 7u;
        float _2190 = (dot(vec3(cbLight._m0[_1886 + 3u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _2191 = _2190 * _2190;
        float _4153 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2192 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2193 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2015 = (((cbLight._m0[_2174].x * 0.3183098733425140380859375) * _2192) * _2193) + _1970;
        _2017 = (((cbLight._m0[_2174].y * 0.3183098733425140380859375) * _2192) * _2193) + _1972;
        _2019 = (((cbLight._m0[_2174].z * 0.3183098733425140380859375) * _2192) * _2193) + _1974;
    }
    uint _2022 = _1886 + 8u;
    float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1886].w)) * _716) * 0.949999988079071044921875);
    float _2036 = _2035 * _2035;
    float _2037 = cbLight._m0[_1886].x + _523;
    float _2038 = cbLight._m0[_1886].y + _524;
    float _2039 = cbLight._m0[_1886].z + _525;
    float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
    float _2044 = _2043 * _2037;
    float _2045 = _2043 * _2038;
    float _2046 = _2043 * _2039;
    float _2047 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_1886].xyz));
    float _4169 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _4180 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _2051 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2052 = dot(vec3(_713, _714, _715), vec3(_2044, _2045, _2046));
    float _4191 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2056 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_2044, _2045, _2046));
    float _4202 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2060 = _2036 * _2036;
    float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
    float _2075 = (exp2(log2(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2076 = 1.0 - _2036;
    float _2087 = (0.5 / (((_2051 * ((_2050 * _2076) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2076) + _2036) * _2050))) * _2050;
    float _4213 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2089 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
    uint _2100 = _1886 + 9u;
    float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _716) * 0.949999988079071044921875);
    float _2112 = _2111 * _2111;
    float _2113 = cbLight._m0[_1923].x + _523;
    float _2114 = cbLight._m0[_1923].y + _524;
    float _2115 = cbLight._m0[_1923].z + _525;
    float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
    float _2120 = _2119 * _2113;
    float _2121 = _2119 * _2114;
    float _2122 = _2119 * _2115;
    float _2123 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_1923].xyz));
    float _4224 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2127 = dot(vec3(_713, _714, _715), vec3(_2120, _2121, _2122));
    float _4235 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _2131 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_2120, _2121, _2122));
    float _4246 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2135 = _2112 * _2112;
    float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
    float _2148 = (exp2(log2(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2149 = 1.0 - _2112;
    float _2159 = (0.5 / (((_2051 * ((_2126 * _2149) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2149) + _2112) * _2126))) * _2126;
    float _4257 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2161 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
    float _2171 = (((_2148 * cbLight._m0[_2100].x) * _2161) * _1909) + (((_2075 * cbLight._m0[_2022].x) * _2089) * _1919);
    float _2172 = (((_2148 * cbLight._m0[_2100].y) * _2161) * _1909) + (((_2075 * cbLight._m0[_2022].y) * _2089) * _1919);
    float _2173 = (((_2148 * cbLight._m0[_2100].z) * _2161) * _1909) + (((_2075 * cbLight._m0[_2022].z) * _2089) * _1919);
    float _2235;
    float _2237;
    float _2239;
    if (_1959)
    {
        _2235 = _2171;
        _2237 = _2172;
        _2239 = _2173;
    }
    else
    {
        uint _2241 = _1886 + 2u;
        uint _2245 = _1886 + 10u;
        float _2259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _716) * 0.949999988079071044921875);
        float _2260 = _2259 * _2259;
        float _2261 = cbLight._m0[_2241].x + _523;
        float _2262 = cbLight._m0[_2241].y + _524;
        float _2263 = cbLight._m0[_2241].z + _525;
        float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
        float _2268 = _2267 * _2261;
        float _2269 = _2267 * _2262;
        float _2270 = _2267 * _2263;
        float _2271 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2241].xyz));
        float _4268 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2275 = dot(vec3(_713, _714, _715), vec3(_2268, _2269, _2270));
        float _4279 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2279 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2268, _2269, _2270));
        float _4290 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2283 = _2260 * _2260;
        float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
        float _2296 = (exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2297 = 1.0 - _2260;
        float _2307 = (0.5 / (((_2051 * ((_2274 * _2297) + _2260)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2297) + _2260) * _2274))) * _2274;
        float _4301 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2309 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
        float _2310 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _2235 = (((_2296 * cbLight._m0[_2245].x) * _2309) * _2310) + _2171;
        _2237 = (((_2296 * cbLight._m0[_2245].y) * _2309) * _2310) + _2172;
        _2239 = (((_2296 * cbLight._m0[_2245].z) * _2309) * _2310) + _2173;
    }
    float _2345;
    float _2347;
    float _2349;
    if (_1977)
    {
        _2345 = _2235;
        _2347 = _2237;
        _2349 = _2239;
    }
    else
    {
        uint _2356 = _1886 + 3u;
        uint _2360 = _1886 + 11u;
        float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2356].w)) * _716) * 0.949999988079071044921875);
        float _2375 = _2374 * _2374;
        float _2376 = cbLight._m0[_2356].x + _523;
        float _2377 = cbLight._m0[_2356].y + _524;
        float _2378 = cbLight._m0[_2356].z + _525;
        float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
        float _2383 = _2382 * _2376;
        float _2384 = _2382 * _2377;
        float _2385 = _2382 * _2378;
        float _2386 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2356].xyz));
        float _4317 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2390 = dot(vec3(_713, _714, _715), vec3(_2383, _2384, _2385));
        float _4328 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2394 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_2383, _2384, _2385));
        float _4339 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2398 = _2375 * _2375;
        float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
        float _2411 = (exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2412 = 1.0 - _2375;
        float _2422 = (0.5 / (((_2051 * ((_2389 * _2412) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2412) + _2375) * _2389))) * _2389;
        float _4350 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2424 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
        float _2425 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2345 = (((_2411 * cbLight._m0[_2360].x) * _2424) * _2425) + _2235;
        _2347 = (((_2411 * cbLight._m0[_2360].y) * _2424) * _2425) + _2237;
        _2349 = (((_2411 * cbLight._m0[_2360].z) * _2424) * _2425) + _2239;
    }
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    if (_1884.y == 0u)
    {
        float _2500 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2501 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2500;
        float _2502 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2500;
        float _2503 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2500;
        uvec4 _2515 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2516 = _2515.x;
        uint _2527 = uint((float(_2515.y) * floor(float(uint(cbSceneParam._m0[85u].y * _753) / _2516))) + floor(float(uint(cbSceneParam._m0[85u].x * _752) / _2516)));
        float _2537 = (log2(_2503 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2538 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        uint _2541 = uint(isnan(14.0) ? _2538 : (isnan(_2538) ? 14.0 : min(_2538, 14.0)));
        uvec4 _2546 = texelFetch(g_lightClusterGridBuffer, int(((_2541 << 2u) + (_2527 << 6u)) >> 2u));
        uint _2547 = _2546.x;
        uint _2548 = _2515.z;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        if (((((1u << ((_2548 >> 4u) & 15u)) + 4294967295u) & _2547) == 0u) || ((_2548 & 240u) == 0u))
        {
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
        }
        else
        {
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            uint _2805 = 0u;
            uint _2814;
            bool _2815;
            for (;;)
            {
                _2814 = texelFetch(g_lightClassification, int((((_2541 << 5u) + (_2527 << 9u)) + (_2805 << 2u)) >> 2u)).x;
                _2815 = _2814 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2815)
                {
                    frontier_phi_68_pred = _2801;
                    frontier_phi_68_pred_1 = _2804;
                    frontier_phi_68_pred_2 = _2803;
                    frontier_phi_68_pred_3 = _2802;
                    frontier_phi_68_pred_4 = _2800;
                    frontier_phi_68_pred_5 = _2799;
                }
                else
                {
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    uint _2950;
                    _2944 = _2799;
                    _2945 = _2800;
                    _2946 = _2801;
                    _2947 = _2802;
                    _2948 = _2803;
                    _2949 = _2804;
                    _2950 = _2814;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    for (;;)
                    {
                        uint _2954 = uint(findLSB(_2950)) + (_2805 << 5u);
                        uint _2951 = (_2950 + 4294967295u) & _2950;
                        uint _2956 = _2954 * 48u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 3u)).x));
                        uint _2976 = (_2954 * 48u) + 4u;
                        vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 3u)).x));
                        uint _2995 = (_2954 * 48u) + 8u;
                        vec3 _3006 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x));
                        float _3010 = _2970.x - _2501;
                        float _3011 = _2970.y - _2502;
                        float _3012 = _2970.z - _2503;
                        float _3013 = dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012));
                        float _3016 = inversesqrt(_3013);
                        float _3017 = _3016 * _3010;
                        float _3018 = _3016 * _3011;
                        float _3019 = _3016 * _3012;
                        float _3020 = dot(vec3(_771, _774, _777), vec3(_3017, _3018, _3019));
                        float _3025 = 1.0 - (_3013 * _2970.w);
                        float _4376 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3026 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3027 = sqrt(_3013) * _2989.w;
                        float _3030 = 1.39999997615814208984375 / (_3027 + 1.39999997615814208984375);
                        float _3031 = _3030 * _3030;
                        float _3034 = ((1.0 - _3031) * _3020) + _3031;
                        float _3037 = _3027 * _3027;
                        float _3041 = ((isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))) * _3026) / ((_3037 * 0.699999988079071044921875) + 1.0);
                        float _3045 = (-0.0) - _2501;
                        float _3046 = (-0.0) - _2502;
                        float _3047 = (-0.0) - _2503;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3062 = exp2(log2(1.0 / ((_3037 * 3.5) + 5.0)) * 0.25);
                        float _3063 = 1.0 - _831;
                        float _3070 = sqrt(1.0 - ((1.0 - (_3063 * _3063)) * (1.0 - (_3062 * _3062))));
                        float _3071 = _3070 * _3070;
                        float _3072 = _3071 * _3071;
                        float _3073 = _3052 + _3017;
                        float _3074 = _3053 + _3018;
                        float _3075 = _3054 + _3019;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3083 = dot(vec3(_771, _774, _777), vec3(_3052, _3053, _3054));
                        float _4392 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3086 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3087 = dot(vec3(_771, _774, _777), vec3(_3079 * _3073, _3079 * _3074, _3079 * _3075));
                        float _4403 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3090 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3094 = ((_3090 * _3090) * (_3072 + (-1.0))) + 1.0;
                        float _3095 = _3030 * _3071;
                        float _3096 = _3095 * _3095;
                        float _3099 = ((1.0 - _3096) * _3020) + _3096;
                        float _4414 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3100 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3101 = 1.0 - _3071;
                        float _3111 = (0.5 / (((_3100 * ((_3086 * _3101) + _3071)) + 9.9999999392252902907785028219223e-09) + (((_3100 * _3101) + _3071) * _3086))) * _3100;
                        float _4425 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3122 = (((_3072 * 3.1415927410125732421875) * (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) / ((_3094 * _3094) * ((_3037 * 2.1991131305694580078125) + 3.141590118408203125))) * _3026;
                        _2874 = (_3041 * _2989.x) + _2947;
                        _2875 = (_3041 * _2989.y) + _2948;
                        _2876 = (_3041 * _2989.z) + _2949;
                        _2871 = (_3122 * _3006.x) + _2944;
                        _2872 = (_3122 * _3006.y) + _2945;
                        _2873 = (_3122 * _3006.z) + _2946;
                        if (_2951 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2944 = _2871;
                            _2945 = _2872;
                            _2946 = _2873;
                            _2947 = _2874;
                            _2948 = _2875;
                            _2949 = _2876;
                            _2950 = _2951;
                        }
                    }
                    frontier_phi_68_pred = _2873;
                    frontier_phi_68_pred_1 = _2876;
                    frontier_phi_68_pred_2 = _2875;
                    frontier_phi_68_pred_3 = _2874;
                    frontier_phi_68_pred_4 = _2872;
                    frontier_phi_68_pred_5 = _2871;
                }
                _2652 = frontier_phi_68_pred;
                _2658 = frontier_phi_68_pred_1;
                _2656 = frontier_phi_68_pred_2;
                _2654 = frontier_phi_68_pred_3;
                _2650 = frontier_phi_68_pred_4;
                _2648 = frontier_phi_68_pred_5;
                uint _2806 = _2805 + 1u;
                if (_2806 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2799 = _2648;
                    _2800 = _2650;
                    _2801 = _2652;
                    _2802 = _2654;
                    _2803 = _2656;
                    _2804 = _2658;
                    _2805 = _2806;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
        }
        uvec4 _2661 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2662 = _2661.z;
        uint _2664 = (_2662 >> 8u) & 15u;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        if (((4294967295u << _2664) & _2547) == 0u)
        {
            _2767 = _2647;
            _2769 = _2649;
            _2771 = _2651;
            _2773 = _2653;
            _2775 = _2655;
            _2777 = _2657;
        }
        else
        {
            float _2792 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
            float _2793 = _2792 * _2501;
            float _2794 = _2792 * _2502;
            float _2795 = _2792 * _2503;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2664 < ((_2662 >> 12u) & 15u))
            {
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2927 = _2647;
                float _2928 = _2649;
                float _2929 = _2651;
                float _2930 = _2653;
                float _2931 = _2655;
                float _2932 = _2657;
                uint _2933 = _2664;
                uint _2942;
                bool _2943;
                for (;;)
                {
                    _2942 = texelFetch(g_lightClassification, int((((_2541 << 5u) + (_2527 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                    _2943 = _2942 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2943)
                    {
                        frontier_phi_79_pred = _2932;
                        frontier_phi_79_pred_1 = _2931;
                        frontier_phi_79_pred_2 = _2930;
                        frontier_phi_79_pred_3 = _2929;
                        frontier_phi_79_pred_4 = _2928;
                        frontier_phi_79_pred_5 = _2927;
                    }
                    else
                    {
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3149 = _2927;
                        float _3150 = _2928;
                        float _3151 = _2929;
                        float _3152 = _2930;
                        float _3153 = _2931;
                        float _3154 = _2932;
                        uint _3155 = _2942;
                        uint _3156;
                        vec4 _3181;
                        float _3182;
                        vec4 _3197;
                        vec3 _3209;
                        vec4 _3225;
                        vec4 _3241;
                        float _3288;
                        bool _3289;
                        for (;;)
                        {
                            uint _3166 = ((_2933 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3155));
                            _3156 = (_3155 + 4294967295u) & _3155;
                            uint _3168 = _3166 * 40u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            _3182 = _3181.w;
                            uint _3184 = (_3166 * 40u) + 4u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3199 = (_3166 * 40u) + 8u;
                            _3209 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x));
                            uint _3212 = (_3166 * 40u) + 16u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3228 = (_3166 * 40u) + 20u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3244 = (_3166 * 40u) + 24u;
                            vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3263 = (_3166 * 40u) + 28u;
                            vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3288 = fma(_2503, _3276.z, fma(_2502, _3276.y, _3276.x * _2501)) + _3276.w;
                            _3289 = !((fma(_2503, _3257.z, fma(_2502, _3257.y, _3257.x * _2501)) + _3257.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3289)
                            {
                                float _3316 = _3181.x - _2501;
                                float _3317 = _3181.y - _2502;
                                float _3318 = _3181.z - _2503;
                                float _3319 = dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318));
                                float _3322 = inversesqrt(_3319);
                                float _3323 = _3322 * _3316;
                                float _3324 = _3322 * _3317;
                                float _3325 = _3322 * _3318;
                                float _3329 = 1.0 - (_3319 / (_3182 * _3182));
                                float _4436 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3334 = sqrt(_3319) * _3197.w;
                                float _3336 = 1.39999997615814208984375 / (_3334 + 1.39999997615814208984375);
                                float _3337 = _3336 * _3336;
                                float _3340 = ((1.0 - _3337) * dot(vec3(_3323, _3324, _3325), vec3(_771, _774, _777))) + _3337;
                                float _3343 = _3334 * _3334;
                                float _3347 = (fma(_2503, _3225.z, fma(_2502, _3225.y, _3225.x * _2501)) + _3225.w) / _3288;
                                float _3348 = (fma(_2503, _3241.z, fma(_2502, _3241.y, _3241.x * _2501)) + _3241.w) / _3288;
                                float _3352 = 1.0 - dot(vec2(_3347, _3348), vec2(_3347, _3348));
                                float _4452 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3354 = _3353 * (((isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0))) * _3330) / ((_3343 * 0.699999988079071044921875) + 1.0));
                                float _3366 = exp2(log2(1.0 / ((_3343 * 3.5) + 5.0)) * 0.25);
                                float _3367 = 1.0 - _831;
                                float _3374 = sqrt(1.0 - ((1.0 - (_3367 * _3367)) * (1.0 - (_3366 * _3366))));
                                float _3375 = _3374 * _3374;
                                float _3376 = _3375 * _3375;
                                float _3377 = _3323 - _2793;
                                float _3378 = _3324 - _2794;
                                float _3379 = _3325 - _2795;
                                float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                                float _3387 = dot(vec3(_771, _774, _777), vec3((-0.0) - _2793, (-0.0) - _2794, (-0.0) - _2795));
                                float _4463 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3390 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3391 = dot(vec3(_771, _774, _777), vec3(_3383 * _3377, _3383 * _3378, _3383 * _3379));
                                float _4474 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3394 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3398 = ((_3394 * _3394) * (_3376 + (-1.0))) + 1.0;
                                float _3399 = _3336 * _3375;
                                float _3400 = _3399 * _3399;
                                float _3406 = ((1.0 - _3400) * dot(vec3(_771, _774, _777), vec3(_3323, _3324, _3325))) + _3400;
                                float _4485 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3408 = 1.0 - _3375;
                                float _3418 = (0.5 / (((_3407 * ((_3390 * _3408) + _3375)) + 9.9999999392252902907785028219223e-09) + (((_3407 * _3408) + _3375) * _3390))) * _3407;
                                float _4496 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3428 = (_3353 * _3330) * (((_3376 * 3.1415927410125732421875) * (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) / ((_3398 * _3398) * ((_3343 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3354 * _3197.z;
                                frontier_phi_85_pred_1 = _3354 * _3197.y;
                                frontier_phi_85_pred_2 = _3354 * _3197.x;
                                frontier_phi_85_pred_3 = _3428 * _3209.z;
                                frontier_phi_85_pred_4 = _3428 * _3209.y;
                                frontier_phi_85_pred_5 = _3428 * _3209.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3437 = frontier_phi_85_pred;
                            _3436 = frontier_phi_85_pred_1;
                            _3435 = frontier_phi_85_pred_2;
                            _3434 = frontier_phi_85_pred_3;
                            _3433 = frontier_phi_85_pred_4;
                            _3432 = frontier_phi_85_pred_5;
                            _3139 = _3435 + _3152;
                            _3140 = _3436 + _3153;
                            _3141 = _3437 + _3154;
                            _3136 = _3432 + _3149;
                            _3137 = _3433 + _3150;
                            _3138 = _3434 + _3151;
                            if (_3156 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3156;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3141;
                        frontier_phi_79_pred_1 = _3140;
                        frontier_phi_79_pred_2 = _3139;
                        frontier_phi_79_pred_3 = _3138;
                        frontier_phi_79_pred_4 = _3137;
                        frontier_phi_79_pred_5 = _3136;
                    }
                    _2778 = frontier_phi_79_pred;
                    _2776 = frontier_phi_79_pred_1;
                    _2774 = frontier_phi_79_pred_2;
                    _2772 = frontier_phi_79_pred_3;
                    _2770 = frontier_phi_79_pred_4;
                    _2768 = frontier_phi_79_pred_5;
                    uint _2934 = _2933 + 1u;
                    if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2927 = _2768;
                        _2928 = _2770;
                        _2929 = _2772;
                        _2930 = _2774;
                        _2931 = _2776;
                        _2932 = _2778;
                        _2933 = _2934;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2774;
                frontier_phi_60_61_ladder_1 = _2778;
                frontier_phi_60_61_ladder_2 = _2776;
                frontier_phi_60_61_ladder_3 = _2772;
                frontier_phi_60_61_ladder_4 = _2770;
                frontier_phi_60_61_ladder_5 = _2768;
            }
            else
            {
                frontier_phi_60_61_ladder = _2653;
                frontier_phi_60_61_ladder_1 = _2657;
                frontier_phi_60_61_ladder_2 = _2655;
                frontier_phi_60_61_ladder_3 = _2651;
                frontier_phi_60_61_ladder_4 = _2649;
                frontier_phi_60_61_ladder_5 = _2647;
            }
            _2767 = frontier_phi_60_61_ladder_5;
            _2769 = frontier_phi_60_61_ladder_4;
            _2771 = frontier_phi_60_61_ladder_3;
            _2773 = frontier_phi_60_61_ladder;
            _2775 = frontier_phi_60_61_ladder_2;
            _2777 = frontier_phi_60_61_ladder_1;
        }
        float _2782 = isnan(1.0) ? _815 : (isnan(_815) ? 1.0 : min(_815, 1.0));
        _2559 = (_2782 * _2773) + _2015;
        _2561 = (_2782 * _2775) + _2017;
        _2563 = (_2782 * _2777) + _2019;
        _2565 = ((_2767 * 0.039999999105930328369140625) * _2782) + _2345;
        _2567 = ((_2769 * 0.039999999105930328369140625) * _2782) + _2347;
        _2569 = ((_2771 * 0.039999999105930328369140625) * _2782) + _2349;
    }
    else
    {
        _2559 = _2015;
        _2561 = _2017;
        _2563 = _2019;
        _2565 = _2345;
        _2567 = _2347;
        _2569 = _2349;
    }
    float _4512 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4523 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4534 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2586 = ((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2559 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _815))) + ((_2565 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1653)) * cbPerFrame._m0[3u].x);
    float _2587 = ((isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2561 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _815))) + ((_2567 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1653)) * cbPerFrame._m0[3u].x);
    float _2588 = ((isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2563 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _815))) + ((_2569 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1653)) * cbPerFrame._m0[3u].x);
    uint _2589 = _790 + 6u;
    float _2597 = _752 / cbSceneParam._m0[86u].x;
    float _2598 = _753 / cbSceneParam._m0[86u].y;
    vec4 _2612 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2597, _2598, (log2((isnan(cbSceneParam._m0[77u].w) ? _734 : (isnan(_734) ? cbSceneParam._m0[77u].w : min(_734, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2614 = _2612.x;
    float _2615 = _2612.y;
    float _2616 = _2612.z;
    float _2617 = _2612.w;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    if (_734 > cbSceneParam._m0[78u].w)
    {
        float _2672 = isnan(_734) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _734 : min(cbSceneParam._m0[80u].w, _734));
        float _2673 = _2672 / _734;
        float _2684 = _2673 * _286;
        float _2685 = _287 * _2673;
        float _2686 = (-0.0) - _2685;
        float _2687 = _2673 * _288;
        float _2689 = (cbSceneParam._m0[77u].w * _2686) / _2672;
        float _2690 = _2689 + cbSceneParam._m0[79u].w;
        float _2691 = cbSceneParam._m0[79u].w - _2685;
        float _2697 = sqrt(((_2684 * _2684) + (_2685 * _2685)) + (_2687 * _2687));
        float _2700 = (1.0 - (cbSceneParam._m0[77u].w / _2672)) * _2697;
        float _2705 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2707 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2884;
        if (abs((_2686 - _2689) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2884 = ((((_2690 > 0.0) ? exp2(_2705 * _2690) : (2.0 - exp2(_2707 * _2690))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2700;
        }
        else
        {
            float _2828 = 1.0 / cbSceneParam._m0[80u].x;
            float _2829 = isnan(_2691) ? _2690 : (isnan(_2690) ? _2691 : max(_2690, _2691));
            float _2830 = isnan(_2691) ? _2690 : (isnan(_2690) ? _2691 : min(_2690, _2691));
            float _2839 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : min(_2829, 0.0));
            float _2840 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : min(_2830, 0.0));
            _2884 = ((abs(_2697 / _2686) * cbSceneParam._m0[80u].y) * ((((_2839 - _2840) * 2.0) - ((exp2(_2705 * (isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0)))) - exp2(_2705 * (isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0))))) * _2828)) - ((exp2(_2707 * _2839) - exp2(_2707 * _2840)) * _2828))) + (_2700 * cbSceneParam._m0[80u].z);
        }
        vec4 _2886 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2597, _2598, 1.0), 0.0);
        float _2895 = exp2((_2884 * (-1.44269502162933349609375)) * (1.0 - _2886.w));
        float _2896 = log2(_2895);
        float _2912 = log2(_2617);
        _2709 = (exp2(_2912 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].x)) * _2886.x) / cbSceneParam._m0[78u].x)) + _2614;
        _2711 = (exp2(_2912 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].y)) * _2886.y) / cbSceneParam._m0[78u].y)) + _2615;
        _2713 = (exp2(_2912 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].z)) * _2886.z) / cbSceneParam._m0[78u].z)) + _2616;
        _2715 = _2895 * _2617;
    }
    else
    {
        _2709 = _2614;
        _2711 = _2615;
        _2713 = _2616;
        _2715 = _2617;
    }
    bool _2922;
    vec4 _2725;
    vec4 _2747;
    float _2749;
    float _2753;
    float _2754;
    float _2755;
    float _2756;
    bool _2766;
    for (;;)
    {
        _2725 = cbMatDynParam._m0[0u];
        float _2727 = roundEven(_2725.y);
        bool _2728 = _2727 == 3.0;
        float _2729 = log2(_2715);
        float _2736 = exp2(_2729 * cbSceneParam._m0[78u].x) * _2586;
        float _2737 = exp2(_2729 * cbSceneParam._m0[78u].y) * _2587;
        float _2738 = exp2(_2729 * cbSceneParam._m0[78u].z) * _2588;
        float _2745 = _741 + (-0.5);
        _2747 = cbMtdParam._m0[1u];
        _2749 = _2747.y * _2745;
        float _2752 = (_2727 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2753 = _2752 * (_2728 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2709)));
        _2754 = _2752 * (_2728 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2711)));
        _2755 = _2752 * (_2728 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2713)));
        _2756 = _2745 * 0.999000012874603271484375;
        _2766 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2766)
        {
            if ((cbInstanceData._m0[_790 + 7u].x + _2756) < 0.5)
            {
                _2922 = true;
                break;
            }
        }
        uint _2863 = _791 + uint(_2725.w);
        if ((cbInstanceData._m0[_2863].w < 1.0) && ((cbInstanceData._m0[_2863].w + _2756) < 0.5))
        {
            _2922 = true;
            break;
        }
        if ((_2749 + 1.0) < _2747.x)
        {
            _2922 = true;
            break;
        }
        _2922 = false;
        break;
    }
    float _3127;
    if (_2922)
    {
        discard_state = true;
        _3127 = 0.0;
    }
    else
    {
        _3127 = cbInstanceData._m0[_2589].w;
    }
    SV_Target.x = _2753;
    SV_Target.y = _2754;
    SV_Target.z = _2755;
    SV_Target.w = _3127;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2589].w;
    discard_exit();
}


