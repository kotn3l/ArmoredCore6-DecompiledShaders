#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1174;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229;
    float _230;
    float _231;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
    }
    else
    {
        _229 = _215;
        _230 = _216;
        _231 = _217;
    }
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _286 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _276);
    float _287 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _276);
    float _288 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _276);
    uvec4 _292 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _294 = _292.z != 0u;
    vec4 _315 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _318 = _315.x;
    float _319 = _315.y;
    float _320 = _315.z;
    bool _341 = _292.x != 0u;
    vec4 _360 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _362 = _360.x;
    float _363 = _360.y;
    float _364 = _360.z;
    float _381 = _341 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[9u].w - _362)) + _362) : (_362 * cbMtdParam._m0[9u].w);
    float _382 = _341 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[10u].x - _363)) + _363) : (_363 * cbMtdParam._m0[10u].x);
    float _383 = _341 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[10u].y - _364)) + _364) : (_364 * cbMtdParam._m0[10u].y);
    bool _385 = _292.y != 0u;
    vec4 _401 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _403 = _401.x;
    float _404 = _401.y;
    float _405 = _401.z;
    vec4 _433 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _435 = _433.x;
    float _436 = _433.y;
    float _444 = ((cbMtdParam._m0[14u].y * (-1.39999997615814208984375)) * (1.0 - _435)) + 1.0;
    float _3769 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _449 = (cbMtdParam._m0[13u].w * ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) - _435)) + _435;
    float _456 = (_449 * ((_385 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[10u].w - _403)) + _403) : (_403 * cbMtdParam._m0[10u].w)) - _381)) + _381;
    float _457 = (_449 * ((_385 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[11u].x - _404)) + _404) : (_404 * cbMtdParam._m0[11u].x)) - _382)) + _382;
    float _458 = (_449 * ((_385 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[11u].y - _405)) + _405) : (_405 * cbMtdParam._m0[11u].y)) - _383)) + _383;
    float _462 = (((1.0 - _436) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].x) + 1.0;
    float _3780 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = (cbMtdParam._m0[12u].w * ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) - _436)) + _436;
    float _474 = (_467 * ((_294 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[11u].w - _318)) + _318) : (_318 * cbMtdParam._m0[11u].w)) - _456)) + _456;
    float _475 = (_467 * ((_294 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[12u].x - _319)) + _319) : (_319 * cbMtdParam._m0[12u].x)) - _457)) + _457;
    float _476 = (_467 * ((_294 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[12u].y - _320)) + _320) : (_320 * cbMtdParam._m0[12u].y)) - _458)) + _458;
    vec4 _488 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _509 = cbMtdParam._m0[13u].z * texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x;
    float _516 = (_509 * (_488.x - _474)) + _474;
    float _517 = (_509 * (_488.y - _475)) + _475;
    float _518 = (_509 * (_488.z - _476)) + _476;
    float _522 = inversesqrt(dot(vec3(_286, _287, _288), vec3(_286, _287, _288)));
    float _523 = _522 * _286;
    float _524 = _522 * _287;
    float _525 = _522 * _288;
    float _526 = dot(vec4(_523, _524, _525, 0.0), vec4(_229, _230, _231, 0.0));
    float _3791 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _532 = exp2(log2(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))));
    float _535 = (_532 * 0.680000007152557373046875) + 0.119999997317790985107421875;
    float _555 = (_535 * ((0.048556677997112274169921875 - _516) + (_532 * 0.275154531002044677734375))) + _516;
    float _556 = (_535 * ((0.079126082360744476318359375 - _517) + (_532 * 0.448381125926971435546875))) + _517;
    float _557 = (_535 * ((0.1159258782863616943359375 - _518) + (_532 * 0.656913340091705322265625))) + _518;
    vec4 _569 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _586 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _588 = _586.x;
    float _589 = _586.y;
    float _590 = _586.z;
    float _597 = ((_569.x - _588) * _449) + _588;
    float _598 = ((_569.y - _589) * _449) + _589;
    float _599 = ((_569.z - _590) * _449) + _590;
    vec4 _611 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _637 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _649 = (((_611.x - _597) * _467) + _597) + ((_637.x + (-0.5)) * cbMtdParam._m0[14u].z);
    float _650 = (((_611.y - _598) * _467) + _598) + ((_637.y + (-0.5)) * cbMtdParam._m0[14u].z);
    float _651 = (((_611.z - _599) * _467) + _599) + ((_637.z + (-0.5)) * cbMtdParam._m0[14u].z);
    vec4 _664 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _675 = ((_664.x - _649) * _509) + _649;
    float _676 = ((_664.y - _650) * _509) + _650;
    float _677 = ((_664.z - _651) * _509) + _651;
    float _687 = ((1.0 - _677) * _535) + _677;
    float _691 = ((((0.502016007900238037109375 - _675) * _535) + _675) * 2.0) + (-1.0);
    float _693 = ((((0.502016007900238037109375 - _676) * _535) + _676) * 2.0) + (-1.0);
    float _694 = dot(vec2(_691, _693), vec2(_691, _693));
    float _3802 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _699 = sqrt(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))));
    float _702 = fma(_699, _229, fma(_693, _221 * TANGENT.x, (_207 * _200) * _691));
    float _705 = fma(_699, _230, fma(_693, _221 * TANGENT.y, (_207 * _201) * _691));
    float _708 = fma(_699, _231, fma(_693, _221 * TANGENT.z, (_207 * _202) * _691));
    float _712 = inversesqrt(dot(vec3(_702, _705, _708), vec3(_702, _705, _708)));
    float _713 = _712 * _702;
    float _714 = _712 * _705;
    float _715 = _712 * _708;
    float _3813 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _716 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3835 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3846 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _734 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _740 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _741 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _759 = fma(_715, cbSceneParam._m0[5u].z, fma(_714, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _713));
    float _762 = fma(_715, cbSceneParam._m0[6u].z, fma(_714, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _713));
    float _765 = fma(_715, cbSceneParam._m0[7u].z, fma(_714, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _713));
    uint _778 = uint(roundEven(NORMAL.w)) * 13u;
    uint _780 = (_778 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _786 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * cbInstanceData._m0[_780].x;
    float _787 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * cbInstanceData._m0[_780].y;
    float _788 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * cbInstanceData._m0[_780].z;
    float _3857 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    vec4 _800 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _740, cbSceneParam._m0[86u].y * _741));
    float _803 = _800.x * TEXCOORD.z;
    float _804 = dot(vec3(_713, _714, _715), vec3(_523, _524, _525));
    float _807 = _804 * 2.0;
    float _811 = (_807 * _713) - _523;
    float _812 = (_807 * _714) - _524;
    float _813 = (_807 * _715) - _525;
    float _817 = abs(dot(vec3(_523, _524, _525), vec3(_713, _714, _715)));
    float _3890 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _819 = sqrt(_716);
    float _832 = exp2((_819 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_819 * 3.0));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1173;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _899 = fma(_872, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _864));
        float _903 = fma(_872, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _864));
        float _907 = fma(_872, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _864));
        float _931 = _864 + _713;
        float _932 = _868 + _714;
        float _933 = _872 + _715;
        float _943 = fma(_933, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931)) - _899;
        float _944 = fma(_933, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931)) - _903;
        float _945 = fma(_933, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931)) - _907;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_899 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_903 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[34u].z) + ((((((_907 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _1001 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_967.x + (-0.5));
        float _1003 = _1001 * (_967.y + (-0.5));
        float _1004 = _1001 * (_967.z + (-0.5));
        float _1011 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_974.x + (-0.5));
        float _1013 = _1011 * (_974.y + (-0.5));
        float _1014 = _1011 * (_974.z + (-0.5));
        float _1021 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_981.x + (-0.5));
        float _1023 = _1021 * (_981.y + (-0.5));
        float _1024 = _1021 * (_981.z + (-0.5));
        float _1031 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_988.x + (-0.5));
        float _1033 = _1031 * (_988.y + (-0.5));
        float _1034 = _1031 * (_988.z + (-0.5));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = _1002 * 0.5;
        float _1039 = _1012 * 0.5;
        float _1040 = _1022 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1055 = (dot(vec3(_713, _714, _715), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1065 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3938 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1067 + 1.0))) + _1072) * _1035;
        float _1082 = _1003 * 0.5;
        float _1083 = _1013 * 0.5;
        float _1084 = _1023 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_713, _714, _715), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3971 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1109 + 1.0))) + _1114) * _1036;
        float _1124 = _1004 * 0.5;
        float _1125 = _1014 * 0.5;
        float _1126 = _1024 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_713, _714, _715), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _4004 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1151 + 1.0))) + _1156) * _1037;
        _1173 = _1004;
        _1175 = _1003;
        _1176 = _1002;
        _1177 = _1014;
        _1178 = _1013;
        _1179 = _1012;
        _1180 = _1024;
        _1181 = _1023;
        _1182 = _1022;
        _1183 = _1037;
        _1184 = _1036;
        _1185 = _1035;
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
    }
    else
    {
        _1173 = _1174;
        _1175 = _1174;
        _1176 = _1174;
        _1177 = _1174;
        _1178 = _1174;
        _1179 = _1174;
        _1180 = _1174;
        _1181 = _1174;
        _1182 = _1174;
        _1183 = _1174;
        _1184 = _1174;
        _1185 = _1174;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1214 = fma(_872, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _864));
        float _1218 = fma(_872, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _864));
        float _1222 = fma(_872, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _864));
        float _1245 = _864 + _713;
        float _1246 = _868 + _714;
        float _1247 = _872 + _715;
        float _1257 = fma(_1247, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1245)) - _1214;
        float _1258 = fma(_1247, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1245)) - _1218;
        float _1259 = fma(_1247, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1245)) - _1222;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1214 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1218 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[35u].z) + ((((((_1222 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1313 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1280.x + (-0.5));
        float _1315 = _1313 * (_1280.y + (-0.5));
        float _1316 = _1313 * (_1280.z + (-0.5));
        float _1323 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1287.x + (-0.5));
        float _1325 = _1323 * (_1287.y + (-0.5));
        float _1326 = _1323 * (_1287.z + (-0.5));
        float _1333 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1294.x + (-0.5));
        float _1335 = _1333 * (_1294.y + (-0.5));
        float _1336 = _1333 * (_1294.z + (-0.5));
        float _1343 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1301.x + (-0.5));
        float _1345 = _1343 * (_1301.y + (-0.5));
        float _1346 = _1343 * (_1301.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_713, _714, _715), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4067 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1377 + 1.0))) + _1382) * _1347;
        float _1392 = _1315 * 0.5;
        float _1393 = _1325 * 0.5;
        float _1394 = _1335 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_713, _714, _715), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4100 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1419 + 1.0))) + _1424) * _1348;
        float _1434 = _1316 * 0.5;
        float _1435 = _1326 * 0.5;
        float _1436 = _1336 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_713, _714, _715), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4133 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1461 + 1.0))) + _1466) * _1349;
        _1483 = _1316;
        _1484 = _1315;
        _1485 = _1314;
        _1486 = _1326;
        _1487 = _1325;
        _1488 = _1324;
        _1489 = _1336;
        _1490 = _1335;
        _1491 = _1334;
        _1492 = _1349;
        _1493 = _1348;
        _1494 = _1347;
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1174;
        _1484 = _1174;
        _1485 = _1174;
        _1486 = _1174;
        _1487 = _1174;
        _1488 = _1174;
        _1489 = _1174;
        _1490 = _1174;
        _1491 = _1174;
        _1492 = _1174;
        _1493 = _1174;
        _1494 = _1174;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1186)) + _1186;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1187)) + _1187;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1188)) + _1188;
    float _1530 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1507));
    float _1551 = _811 * 0.5;
    float _1552 = _812 * 0.5;
    float _1553 = _813 * 0.5;
    float _1554 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1557 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1560 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1594;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1567 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1173, _1177, _1180, _1183));
        float _1571 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1575 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1582 = dot(vec4(cbModelParam._m0[39u]), vec4(_1551, _1552, _1553, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1605;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1596 = dot(vec4(cbModelParam._m0[40u]), vec4(_1551, _1552, _1553, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1609 = (_1605 * cbModelParam._m0[1u].x) + (_1594 * (1.0 - cbModelParam._m0[1u].x));
    float _1619 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _716);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1619 : min(cbModelParam._m0[25u].z, _1619));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1667 = fma(_872, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864)) + cbModelParam._m0[13u].w;
        float _1671 = fma(_872, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864)) + cbModelParam._m0[14u].w;
        float _1675 = fma(_872, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864)) + cbModelParam._m0[15u].w;
        float _1678 = fma(_813, cbModelParam._m0[13u].z, fma(_812, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _811));
        float _1681 = fma(_813, cbModelParam._m0[14u].z, fma(_812, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _811));
        float _1684 = fma(_813, cbModelParam._m0[15u].z, fma(_812, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _811));
        float _1712;
        if (_1678 > 0.0)
        {
            _1712 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1712 = frontier_phi_16_14_ladder;
        }
        float _1885;
        if (_1681 > 0.0)
        {
            _1885 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1885 = frontier_phi_25_21_ladder;
        }
        float _2180;
        if (_1684 > 0.0)
        {
            _2180 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2180 = frontier_phi_37_32_ladder;
        }
        float _2182 = isnan(_1885) ? _1712 : (isnan(_1712) ? _1885 : min(_1712, _1885));
        float _2183 = isnan(_2180) ? _2182 : (isnan(_2182) ? _2180 : min(_2182, _2180));
        float _2187 = (_2183 * _1678) + _1667;
        float _2188 = (_2183 * _1681) + _1671;
        float _2189 = (_2183 * _1684) + _1675;
        float _2190 = _2183 * 9.9999997473787516355514526367188e-05;
        float _2192 = (-1.0) - _2190;
        float _2194 = _2190 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2189 > _2194) || ((_2189 < _2192) || ((_2188 > _2194) || ((_2188 < _2192) || ((_2187 < _2192) || (_2187 > _2194))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2334 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2189, cbModelParam._m0[9u].z, fma(_2188, cbModelParam._m0[9u].y, _2187 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2189, cbModelParam._m0[10u].z, fma(_2188, cbModelParam._m0[10u].y, _2187 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2189, cbModelParam._m0[11u].z, fma(_2188, cbModelParam._m0[11u].y, _2187 * cbModelParam._m0[11u].x))), _1620);
            frontier_phi_15_37_ladder = _2334.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2334.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2334.z * cbModelParam._m0[1u].y;
        }
        _1700 = frontier_phi_15_37_ladder_1;
        _1702 = frontier_phi_15_37_ladder;
        _1704 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_811, _812, _813), _1620);
        _1700 = _1688.x * cbModelParam._m0[1u].y;
        _1702 = _1688.y * cbModelParam._m0[1u].y;
        _1704 = _1688.z * cbModelParam._m0[1u].y;
    }
    float _1708 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _716);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1708 : min(cbModelParam._m0[25u].w, _1708));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1766 = fma(_872, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864)) + cbModelParam._m0[21u].w;
        float _1770 = fma(_872, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864)) + cbModelParam._m0[22u].w;
        float _1774 = fma(_872, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864)) + cbModelParam._m0[23u].w;
        float _1777 = fma(_813, cbModelParam._m0[21u].z, fma(_812, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _811));
        float _1780 = fma(_813, cbModelParam._m0[22u].z, fma(_812, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _811));
        float _1783 = fma(_813, cbModelParam._m0[23u].z, fma(_812, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _811));
        float _1890;
        if (_1777 > 0.0)
        {
            _1890 = abs((1.0 - _1766) / _1777);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1766 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1890 = frontier_phi_27_23_ladder;
        }
        float _2207;
        if (_1780 > 0.0)
        {
            _2207 = abs((1.0 - _1770) / _1780);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1770 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2207 = frontier_phi_39_34_ladder;
        }
        float _2534;
        if (_1783 > 0.0)
        {
            _2534 = abs((1.0 - _1774) / _1783);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1774 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2534 = frontier_phi_49_46_ladder;
        }
        float _2536 = isnan(_2207) ? _1890 : (isnan(_1890) ? _2207 : min(_1890, _2207));
        float _2537 = isnan(_2534) ? _2536 : (isnan(_2536) ? _2534 : min(_2536, _2534));
        float _2541 = (_2537 * _1777) + _1766;
        float _2542 = (_2537 * _1780) + _1770;
        float _2543 = (_2537 * _1783) + _1774;
        float _2544 = _2537 * 9.9999997473787516355514526367188e-05;
        float _2545 = (-1.0) - _2544;
        float _2547 = _2544 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2543 > _2547) || ((_2543 < _2545) || ((_2542 > _2547) || ((_2542 < _2545) || ((_2541 < _2545) || (_2541 > _2547))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2543, cbModelParam._m0[17u].z, fma(_2542, cbModelParam._m0[17u].y, _2541 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2543, cbModelParam._m0[18u].z, fma(_2542, cbModelParam._m0[18u].y, _2541 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2543, cbModelParam._m0[19u].z, fma(_2542, cbModelParam._m0[19u].y, _2541 * cbModelParam._m0[19u].x))), _1709);
            frontier_phi_24_49_ladder = _2661.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2661.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2661.x * cbModelParam._m0[1u].z;
        }
        _1802 = frontier_phi_24_49_ladder_2;
        _1804 = frontier_phi_24_49_ladder_1;
        _1806 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_811, _812, _813), _1709);
        _1802 = _1786.x * cbModelParam._m0[1u].z;
        _1804 = _1786.y * cbModelParam._m0[1u].z;
        _1806 = _1786.z * cbModelParam._m0[1u].z;
    }
    float _1818 = ((((1.0 - _832) * ((_819 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_832 * _819)) * _803;
    float _1819 = _1818 * ((cbModelParam._m0[1u].w * (_1802 - _1700)) + _1700);
    float _1820 = _1818 * ((cbModelParam._m0[1u].w * (_1804 - _1702)) + _1702);
    float _1821 = _1818 * ((cbModelParam._m0[1u].w * (_1806 - _1704)) + _1704);
    float _1824 = fma(_1821, cbSceneParam._m0[89u].z, fma(_1820, cbSceneParam._m0[89u].y, _1819 * cbSceneParam._m0[89u].x));
    float _1827 = fma(_1821, cbSceneParam._m0[90u].z, fma(_1820, cbSceneParam._m0[90u].y, _1819 * cbSceneParam._m0[90u].x));
    float _1830 = fma(_1821, cbSceneParam._m0[91u].z, fma(_1820, cbSceneParam._m0[91u].y, _1819 * cbSceneParam._m0[91u].x));
    float _1864 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1868 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1872 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1876 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1877 = _1864 / _1876;
    float _1878 = _1868 / _1876;
    float _1879 = _1872 / _1876;
    float _2026;
    float _2027;
    float _2028;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1906 = ((uint(_1879 > cbSceneParam._m0[59u].y) + uint(_1879 > cbSceneParam._m0[59u].x)) + uint(_1879 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1907 = _1906 + 43u;
        uint _1915 = _1906 + 44u;
        uint _1923 = _1906 + 45u;
        uint _1931 = _1906 + 46u;
        float _1942 = fma(_1876, cbSceneParam._m0[_1907].w, fma(_1872, cbSceneParam._m0[_1907].z, fma(_1868, cbSceneParam._m0[_1907].y, _1864 * cbSceneParam._m0[_1907].x)));
        float _1946 = fma(_1876, cbSceneParam._m0[_1915].w, fma(_1872, cbSceneParam._m0[_1915].z, fma(_1868, cbSceneParam._m0[_1915].y, _1864 * cbSceneParam._m0[_1915].x)));
        float _1954 = fma(_1876, cbSceneParam._m0[_1931].w, fma(_1872, cbSceneParam._m0[_1931].z, fma(_1868, cbSceneParam._m0[_1931].y, _1864 * cbSceneParam._m0[_1931].x)));
        float _1959 = cbSceneParam._m0[33u].z * _1954;
        float _1961 = cbSceneParam._m0[33u].w * _1954;
        float _1964 = fma(_1876, cbSceneParam._m0[_1923].w, fma(_1872, cbSceneParam._m0[_1923].z, fma(_1868, cbSceneParam._m0[_1923].y, _1864 * cbSceneParam._m0[_1923].x))) / _1954;
        float _2012 = (cbSceneParam._m0[33u].x - sqrt(((_1878 * _1878) + (_1877 * _1877)) + (_1879 * _1879))) * cbSceneParam._m0[33u].y;
        float _4259 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2019 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1959 + _1942) / _1954, (_1961 + _1946) / _1954), _1964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1961 + _1942) / _1954, (_1946 - _1959) / _1954), _1964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1942 - _1959) / _1954, (_1946 - _1961) / _1954), _1964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1942 - _1961) / _1954, (_1959 + _1946) / _1954), _1964), 0.0)).x), vec4(0.25)));
        _2026 = 1.0 - (_2019 * cbSceneParam._m0[34u].x);
        _2027 = 1.0 - (_2019 * cbSceneParam._m0[34u].y);
        _2028 = 1.0 - (_2019 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2026 = 1.0;
        _2027 = 1.0;
        _2028 = 1.0;
    }
    float _2092;
    float _2094;
    float _2096;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2080 = fma(_1876, cbSceneParam._m0[63u].w, fma(_1872, cbSceneParam._m0[63u].z, fma(_1868, cbSceneParam._m0[63u].y, _1864 * cbSceneParam._m0[63u].x)));
        float _2081 = fma(_1876, cbSceneParam._m0[60u].w, fma(_1872, cbSceneParam._m0[60u].z, fma(_1868, cbSceneParam._m0[60u].y, _1864 * cbSceneParam._m0[60u].x))) / _2080;
        float _2082 = fma(_1876, cbSceneParam._m0[61u].w, fma(_1872, cbSceneParam._m0[61u].z, fma(_1868, cbSceneParam._m0[61u].y, _1864 * cbSceneParam._m0[61u].x))) / _2080;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2081 >= cbSceneParam._m0[64u].x) && (_2082 >= cbSceneParam._m0[64u].y)) && (_2081 <= cbSceneParam._m0[64u].z)) && (_2082 <= cbSceneParam._m0[64u].w))
        {
            float _2220 = fma(_1876, cbSceneParam._m0[62u].w, fma(_1872, cbSceneParam._m0[62u].z, fma(_1868, cbSceneParam._m0[62u].y, _1864 * cbSceneParam._m0[62u].x))) / _2080;
            float _2224 = isnan(cbSceneParam._m0[41u].w) ? _2220 : (isnan(_2220) ? cbSceneParam._m0[41u].w : max(_2220, cbSceneParam._m0[41u].w));
            float _2267 = (cbSceneParam._m0[33u].x - sqrt(((_1878 * _1878) + (_1877 * _1877)) + (_1879 * _1879))) * cbSceneParam._m0[33u].y;
            float _4275 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
            float _2274 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2081, cbSceneParam._m0[33u].w + _2082), _2224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2081, _2082 - cbSceneParam._m0[33u].z), _2224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2081 - cbSceneParam._m0[33u].z, _2082 - cbSceneParam._m0[33u].w), _2224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2081 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2082), _2224), 0.0)).x), vec4(0.25)));
            float _2278 = 1.0 - (_2274 * cbSceneParam._m0[34u].x);
            float _2279 = 1.0 - (_2274 * cbSceneParam._m0[34u].y);
            float _2280 = 1.0 - (_2274 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2279) ? _2027 : (isnan(_2027) ? _2279 : min(_2027, _2279));
            frontier_phi_36_35_ladder_1 = isnan(_2280) ? _2028 : (isnan(_2028) ? _2280 : min(_2028, _2280));
            frontier_phi_36_35_ladder_2 = isnan(_2278) ? _2026 : (isnan(_2026) ? _2278 : min(_2026, _2278));
        }
        else
        {
            frontier_phi_36_35_ladder = _2027;
            frontier_phi_36_35_ladder_1 = _2028;
            frontier_phi_36_35_ladder_2 = _2026;
        }
        _2092 = frontier_phi_36_35_ladder_2;
        _2094 = frontier_phi_36_35_ladder;
        _2096 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2092 = _2026;
        _2094 = _2027;
        _2096 = _2028;
    }
    uvec4 _2101 = floatBitsToUint(cbInstanceData._m0[_778 + 5u]);
    uint _2103 = _2101.x * 14u;
    uint _2104 = _2103 + 13u;
    float _2111 = _803 + (-1.0);
    float _2116 = (cbLight._m0[_2104].x * _2111) + 1.0;
    float _2117 = (cbLight._m0[_2104].y * _2111) + 1.0;
    float _2118 = (cbLight._m0[_2104].z * _2111) + 1.0;
    float _2119 = (cbLight._m0[_2104].w * _2111) + 1.0;
    uint _2120 = _2103 + 5u;
    float _2126 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
    uint _2130 = _2103 + 4u;
    float _2139 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
    uint _2143 = _2103 | 1u;
    float _2154 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_713, _714, _715));
    float _2157 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_713, _714, _715));
    float _4311 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _4322 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2162 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * 0.3183098733425140380859375;
    float _2164 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * 0.3183098733425140380859375;
    float _2171 = ((cbLight._m0[_2120].x * _2126) * _2164) + (((cbLight._m0[_2130].x * _2092) * _2139) * _2162);
    float _2172 = ((_2126 * cbLight._m0[_2120].y) * _2164) + (((cbLight._m0[_2130].y * _2094) * _2139) * _2162);
    float _2173 = ((_2126 * cbLight._m0[_2120].z) * _2164) + (((cbLight._m0[_2130].z * _2096) * _2139) * _2162);
    uvec4 _2177 = floatBitsToUint(cbLight._m0[_2103 + 12u]);
    bool _2179 = _2177.x == 0u;
    float _2281;
    float _2283;
    float _2285;
    if (_2179)
    {
        _2281 = _2171;
        _2283 = _2172;
        _2285 = _2173;
    }
    else
    {
        uint _2289 = _2103 + 6u;
        float _2305 = (dot(vec3(cbLight._m0[_2103 + 2u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _2306 = _2305 * _2305;
        float _4333 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2307 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2308 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2281 = (((cbLight._m0[_2289].x * 0.3183098733425140380859375) * _2307) * _2308) + _2171;
        _2283 = (((cbLight._m0[_2289].y * 0.3183098733425140380859375) * _2307) * _2308) + _2172;
        _2285 = (((cbLight._m0[_2289].z * 0.3183098733425140380859375) * _2307) * _2308) + _2173;
    }
    bool _2288 = _2177.y == 0u;
    float _2343;
    float _2345;
    float _2347;
    if (_2288)
    {
        _2343 = _2281;
        _2345 = _2283;
        _2347 = _2285;
    }
    else
    {
        uint _2505 = _2103 + 7u;
        float _2521 = (dot(vec3(cbLight._m0[_2103 + 3u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _2522 = _2521 * _2521;
        float _4349 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2523 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2524 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2343 = (((cbLight._m0[_2505].x * 0.3183098733425140380859375) * _2523) * _2524) + _2281;
        _2345 = (((cbLight._m0[_2505].y * 0.3183098733425140380859375) * _2523) * _2524) + _2283;
        _2347 = (((cbLight._m0[_2505].z * 0.3183098733425140380859375) * _2523) * _2524) + _2285;
    }
    uint _2350 = _2103 + 8u;
    float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _716) * 0.949999988079071044921875);
    float _2364 = _2363 * _2363;
    float _2365 = cbLight._m0[_2103].x + _523;
    float _2366 = cbLight._m0[_2103].y + _524;
    float _2367 = cbLight._m0[_2103].z + _525;
    float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
    float _2372 = _2371 * _2365;
    float _2373 = _2371 * _2366;
    float _2374 = _2371 * _2367;
    float _2375 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2103].xyz));
    float _4365 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _4376 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _2379 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2380 = dot(vec3(_713, _714, _715), vec3(_2372, _2373, _2374));
    float _4387 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2384 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2372, _2373, _2374));
    float _4398 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2388 = _2364 * _2364;
    float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
    float _2403 = (exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2404 = 1.0 - _2364;
    float _2415 = (0.5 / (((_2379 * ((_2378 * _2404) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2404) + _2364) * _2378))) * _2378;
    float _4409 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2417 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
    uint _2431 = _2103 + 9u;
    float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _716) * 0.949999988079071044921875);
    float _2443 = _2442 * _2442;
    float _2444 = cbLight._m0[_2143].x + _523;
    float _2445 = cbLight._m0[_2143].y + _524;
    float _2446 = cbLight._m0[_2143].z + _525;
    float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
    float _2451 = _2450 * _2444;
    float _2452 = _2450 * _2445;
    float _2453 = _2450 * _2446;
    float _2454 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2143].xyz));
    float _4420 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2458 = dot(vec3(_713, _714, _715), vec3(_2451, _2452, _2453));
    float _4431 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2462 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2451, _2452, _2453));
    float _4442 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2466 = _2443 * _2443;
    float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
    float _2479 = (exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2480 = 1.0 - _2443;
    float _2490 = (0.5 / (((_2379 * ((_2457 * _2480) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2480) + _2443) * _2457))) * _2457;
    float _4453 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2492 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
    float _2502 = (((_2479 * cbLight._m0[_2431].x) * _2492) * _2126) + ((((cbLight._m0[_2350].x * _2092) * _2403) * _2417) * _2139);
    float _2503 = (((_2479 * cbLight._m0[_2431].y) * _2492) * _2126) + ((((cbLight._m0[_2350].y * _2094) * _2403) * _2417) * _2139);
    float _2504 = (((_2479 * cbLight._m0[_2431].z) * _2492) * _2126) + ((((cbLight._m0[_2350].z * _2096) * _2403) * _2417) * _2139);
    float _2560;
    float _2562;
    float _2564;
    if (_2179)
    {
        _2560 = _2502;
        _2562 = _2503;
        _2564 = _2504;
    }
    else
    {
        uint _2566 = _2103 + 2u;
        uint _2570 = _2103 + 10u;
        float _2584 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2566].w)) * _716) * 0.949999988079071044921875);
        float _2585 = _2584 * _2584;
        float _2586 = cbLight._m0[_2566].x + _523;
        float _2587 = cbLight._m0[_2566].y + _524;
        float _2588 = cbLight._m0[_2566].z + _525;
        float _2592 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
        float _2593 = _2592 * _2586;
        float _2594 = _2592 * _2587;
        float _2595 = _2592 * _2588;
        float _2596 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2566].xyz));
        float _4464 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2600 = dot(vec3(_713, _714, _715), vec3(_2593, _2594, _2595));
        float _4475 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2604 = dot(vec3(cbLight._m0[_2566].xyz), vec3(_2593, _2594, _2595));
        float _4486 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2608 = _2585 * _2585;
        float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
        float _2621 = (exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2622 = 1.0 - _2585;
        float _2632 = (0.5 / (((_2379 * ((_2599 * _2622) + _2585)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2622) + _2585) * _2599))) * _2599;
        float _4497 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2634 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
        float _2635 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2560 = (((_2621 * cbLight._m0[_2570].x) * _2634) * _2635) + _2502;
        _2562 = (((_2621 * cbLight._m0[_2570].y) * _2634) * _2635) + _2503;
        _2564 = (((_2621 * cbLight._m0[_2570].z) * _2634) * _2635) + _2504;
    }
    float _2666;
    float _2668;
    float _2670;
    if (_2288)
    {
        _2666 = _2560;
        _2668 = _2562;
        _2670 = _2564;
    }
    else
    {
        uint _2677 = _2103 + 3u;
        uint _2681 = _2103 + 11u;
        float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2677].w)) * _716) * 0.949999988079071044921875);
        float _2696 = _2695 * _2695;
        float _2697 = cbLight._m0[_2677].x + _523;
        float _2698 = cbLight._m0[_2677].y + _524;
        float _2699 = cbLight._m0[_2677].z + _525;
        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
        float _2704 = _2703 * _2697;
        float _2705 = _2703 * _2698;
        float _2706 = _2703 * _2699;
        float _2707 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2677].xyz));
        float _4513 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2711 = dot(vec3(_713, _714, _715), vec3(_2704, _2705, _2706));
        float _4524 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2715 = dot(vec3(cbLight._m0[_2677].xyz), vec3(_2704, _2705, _2706));
        float _4535 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2719 = _2696 * _2696;
        float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
        float _2732 = (exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2733 = 1.0 - _2696;
        float _2743 = (0.5 / (((_2379 * ((_2710 * _2733) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2733) + _2696) * _2710))) * _2710;
        float _4546 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2745 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
        float _2746 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2666 = (((_2732 * cbLight._m0[_2681].x) * _2745) * _2746) + _2560;
        _2668 = (((_2732 * cbLight._m0[_2681].y) * _2745) * _2746) + _2562;
        _2670 = (((_2732 * cbLight._m0[_2681].z) * _2745) * _2746) + _2564;
    }
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    if (_2101.y == 0u)
    {
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.x;
        uint _2779 = uint((float(_2767.y) * floor(float(uint(cbSceneParam._m0[85u].y * _741) / _2768))) + floor(float(uint(cbSceneParam._m0[85u].x * _740) / _2768)));
        float _2789 = (log2(_1879 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2790 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        uint _2793 = uint(isnan(14.0) ? _2790 : (isnan(_2790) ? 14.0 : min(_2790, 14.0)));
        uvec4 _2798 = texelFetch(g_lightClusterGridBuffer, int(((_2793 << 2u) + (_2779 << 6u)) >> 2u));
        uint _2799 = _2798.x;
        uint _2800 = _2767.z;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((((1u << ((_2800 >> 4u) & 15u)) + 4294967295u) & _2799) == 0u) || ((_2800 & 240u) == 0u))
        {
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
        }
        else
        {
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            uint _3028 = 0u;
            uint _3037;
            bool _3038;
            for (;;)
            {
                _3037 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3028 << 2u)) >> 2u)).x;
                _3038 = _3037 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3038)
                {
                    frontier_phi_68_pred = _3027;
                    frontier_phi_68_pred_1 = _3026;
                    frontier_phi_68_pred_2 = _3025;
                    frontier_phi_68_pred_3 = _3023;
                    frontier_phi_68_pred_4 = _3022;
                    frontier_phi_68_pred_5 = _3024;
                }
                else
                {
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    uint _3152;
                    _3146 = _3022;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3037;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    for (;;)
                    {
                        uint _3156 = uint(findLSB(_3152)) + (_3028 << 5u);
                        uint _3153 = (_3152 + 4294967295u) & _3152;
                        uint _3158 = _3156 * 48u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 3u)).x));
                        uint _3178 = (_3156 * 48u) + 4u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3197 = (_3156 * 48u) + 8u;
                        vec3 _3208 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x));
                        float _3212 = _3172.x - _1877;
                        float _3213 = _3172.y - _1878;
                        float _3214 = _3172.z - _1879;
                        float _3215 = dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214));
                        float _3218 = inversesqrt(_3215);
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3222 = dot(vec3(_759, _762, _765), vec3(_3219, _3220, _3221));
                        float _3227 = 1.0 - (_3215 * _3172.w);
                        float _4572 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3228 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                        float _3229 = sqrt(_3215) * _3191.w;
                        float _3232 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                        float _3233 = _3232 * _3232;
                        float _3236 = ((1.0 - _3233) * _3222) + _3233;
                        float _3239 = _3229 * _3229;
                        float _3243 = ((isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))) * _3228) / ((_3239 * 0.699999988079071044921875) + 1.0);
                        float _3247 = (-0.0) - _1877;
                        float _3248 = (-0.0) - _1878;
                        float _3249 = (-0.0) - _1879;
                        float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                        float _3254 = _3253 * _3247;
                        float _3255 = _3253 * _3248;
                        float _3256 = _3253 * _3249;
                        float _3263 = exp2(log2(1.0 / ((_3239 * 3.5) + 5.0)) * 0.25);
                        float _3264 = 1.0 - _819;
                        float _3271 = sqrt(1.0 - ((1.0 - (_3264 * _3264)) * (1.0 - (_3263 * _3263))));
                        float _3272 = _3271 * _3271;
                        float _3273 = _3272 * _3272;
                        float _3274 = _3254 + _3219;
                        float _3275 = _3255 + _3220;
                        float _3276 = _3256 + _3221;
                        float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                        float _3284 = dot(vec3(_759, _762, _765), vec3(_3254, _3255, _3256));
                        float _4588 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3287 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3288 = dot(vec3(_759, _762, _765), vec3(_3280 * _3274, _3280 * _3275, _3280 * _3276));
                        float _4599 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3291 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3295 = ((_3291 * _3291) * (_3273 + (-1.0))) + 1.0;
                        float _3296 = _3232 * _3272;
                        float _3297 = _3296 * _3296;
                        float _3300 = ((1.0 - _3297) * _3222) + _3297;
                        float _4610 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3301 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3302 = 1.0 - _3272;
                        float _3312 = (0.5 / (((_3301 * ((_3287 * _3302) + _3272)) + 9.9999999392252902907785028219223e-09) + (((_3301 * _3302) + _3272) * _3287))) * _3301;
                        float _4621 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3323 = (((_3273 * 3.1415927410125732421875) * (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) / ((_3295 * _3295) * ((_3239 * 2.1991131305694580078125) + 3.141590118408203125))) * _3228;
                        _3081 = (_3243 * _3191.x) + _3149;
                        _3082 = (_3243 * _3191.y) + _3150;
                        _3083 = (_3243 * _3191.z) + _3151;
                        _3078 = (_3323 * _3208.x) + _3146;
                        _3079 = (_3323 * _3208.y) + _3147;
                        _3080 = (_3323 * _3208.z) + _3148;
                        if (_3153 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3146 = _3078;
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3153;
                        }
                    }
                    frontier_phi_68_pred = _3083;
                    frontier_phi_68_pred_1 = _3082;
                    frontier_phi_68_pred_2 = _3081;
                    frontier_phi_68_pred_3 = _3079;
                    frontier_phi_68_pred_4 = _3078;
                    frontier_phi_68_pred_5 = _3080;
                }
                _2889 = frontier_phi_68_pred;
                _2887 = frontier_phi_68_pred_1;
                _2885 = frontier_phi_68_pred_2;
                _2881 = frontier_phi_68_pred_3;
                _2879 = frontier_phi_68_pred_4;
                _2883 = frontier_phi_68_pred_5;
                uint _3029 = _3028 + 1u;
                if (_3029 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3022 = _2879;
                    _3023 = _2881;
                    _3024 = _2883;
                    _3025 = _2885;
                    _3026 = _2887;
                    _3027 = _2889;
                    _3028 = _3029;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
        }
        uvec4 _2892 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2893 = _2892.z;
        uint _2895 = (_2893 >> 8u) & 15u;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        if (((4294967295u << _2895) & _2799) == 0u)
        {
            _2990 = _2878;
            _2992 = _2880;
            _2994 = _2882;
            _2996 = _2884;
            _2998 = _2886;
            _3000 = _2888;
        }
        else
        {
            float _3015 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
            float _3016 = _3015 * _1877;
            float _3017 = _3015 * _1878;
            float _3018 = _3015 * _1879;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2895 < ((_2893 >> 12u) & 15u))
            {
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3001;
                float _3129 = _2878;
                float _3130 = _2880;
                float _3131 = _2882;
                float _3132 = _2884;
                float _3133 = _2886;
                float _3134 = _2888;
                uint _3135 = _2895;
                uint _3144;
                bool _3145;
                for (;;)
                {
                    _3144 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                    _3145 = _3144 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3145)
                    {
                        frontier_phi_74_pred = _3131;
                        frontier_phi_74_pred_1 = _3130;
                        frontier_phi_74_pred_2 = _3129;
                        frontier_phi_74_pred_3 = _3134;
                        frontier_phi_74_pred_4 = _3133;
                        frontier_phi_74_pred_5 = _3132;
                    }
                    else
                    {
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3341 = _3129;
                        float _3342 = _3130;
                        float _3343 = _3131;
                        float _3344 = _3132;
                        float _3345 = _3133;
                        float _3346 = _3134;
                        uint _3347 = _3144;
                        uint _3348;
                        vec4 _3373;
                        float _3374;
                        vec4 _3389;
                        vec3 _3401;
                        vec4 _3417;
                        vec4 _3433;
                        float _3480;
                        bool _3481;
                        for (;;)
                        {
                            uint _3358 = ((_3135 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3347));
                            _3348 = (_3347 + 4294967295u) & _3347;
                            uint _3360 = _3358 * 40u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            _3374 = _3373.w;
                            uint _3376 = (_3358 * 40u) + 4u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3391 = (_3358 * 40u) + 8u;
                            _3401 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x));
                            uint _3404 = (_3358 * 40u) + 16u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3420 = (_3358 * 40u) + 20u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3436 = (_3358 * 40u) + 24u;
                            vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3455 = (_3358 * 40u) + 28u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            _3480 = fma(_1879, _3468.z, fma(_1878, _3468.y, _3468.x * _1877)) + _3468.w;
                            _3481 = !((fma(_1879, _3449.z, fma(_1878, _3449.y, _3449.x * _1877)) + _3449.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3481)
                            {
                                float _3508 = _3373.x - _1877;
                                float _3509 = _3373.y - _1878;
                                float _3510 = _3373.z - _1879;
                                float _3511 = dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510));
                                float _3514 = inversesqrt(_3511);
                                float _3515 = _3514 * _3508;
                                float _3516 = _3514 * _3509;
                                float _3517 = _3514 * _3510;
                                float _3521 = 1.0 - (_3511 / (_3374 * _3374));
                                float _4632 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3526 = sqrt(_3511) * _3389.w;
                                float _3528 = 1.39999997615814208984375 / (_3526 + 1.39999997615814208984375);
                                float _3529 = _3528 * _3528;
                                float _3532 = ((1.0 - _3529) * dot(vec3(_3515, _3516, _3517), vec3(_759, _762, _765))) + _3529;
                                float _3535 = _3526 * _3526;
                                float _3539 = (fma(_1879, _3417.z, fma(_1878, _3417.y, _3417.x * _1877)) + _3417.w) / _3480;
                                float _3540 = (fma(_1879, _3433.z, fma(_1878, _3433.y, _3433.x * _1877)) + _3433.w) / _3480;
                                float _3544 = 1.0 - dot(vec2(_3539, _3540), vec2(_3539, _3540));
                                float _4648 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3546 = _3545 * (((isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0))) * _3522) / ((_3535 * 0.699999988079071044921875) + 1.0));
                                float _3558 = exp2(log2(1.0 / ((_3535 * 3.5) + 5.0)) * 0.25);
                                float _3559 = 1.0 - _819;
                                float _3566 = sqrt(1.0 - ((1.0 - (_3559 * _3559)) * (1.0 - (_3558 * _3558))));
                                float _3567 = _3566 * _3566;
                                float _3568 = _3567 * _3567;
                                float _3569 = _3515 - _3016;
                                float _3570 = _3516 - _3017;
                                float _3571 = _3517 - _3018;
                                float _3575 = inversesqrt(dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571)));
                                float _3579 = dot(vec3(_759, _762, _765), vec3((-0.0) - _3016, (-0.0) - _3017, (-0.0) - _3018));
                                float _4659 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3582 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3583 = dot(vec3(_759, _762, _765), vec3(_3575 * _3569, _3575 * _3570, _3575 * _3571));
                                float _4670 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3590 = ((_3586 * _3586) * (_3568 + (-1.0))) + 1.0;
                                float _3591 = _3528 * _3567;
                                float _3592 = _3591 * _3591;
                                float _3598 = ((1.0 - _3592) * dot(vec3(_759, _762, _765), vec3(_3515, _3516, _3517))) + _3592;
                                float _4681 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3600 = 1.0 - _3567;
                                float _3610 = (0.5 / (((_3599 * ((_3582 * _3600) + _3567)) + 9.9999999392252902907785028219223e-09) + (((_3599 * _3600) + _3567) * _3582))) * _3599;
                                float _4692 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3620 = (_3545 * _3522) * (((_3568 * 3.1415927410125732421875) * (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) / ((_3590 * _3590) * ((_3535 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3620 * _3401.z;
                                frontier_phi_80_pred_1 = _3620 * _3401.y;
                                frontier_phi_80_pred_2 = _3620 * _3401.x;
                                frontier_phi_80_pred_3 = _3546 * _3389.z;
                                frontier_phi_80_pred_4 = _3546 * _3389.y;
                                frontier_phi_80_pred_5 = _3546 * _3389.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3626 = frontier_phi_80_pred;
                            _3625 = frontier_phi_80_pred_1;
                            _3624 = frontier_phi_80_pred_2;
                            _3629 = frontier_phi_80_pred_3;
                            _3628 = frontier_phi_80_pred_4;
                            _3627 = frontier_phi_80_pred_5;
                            _3331 = _3627 + _3344;
                            _3332 = _3628 + _3345;
                            _3333 = _3629 + _3346;
                            _3328 = _3624 + _3341;
                            _3329 = _3625 + _3342;
                            _3330 = _3626 + _3343;
                            if (_3348 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3348;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3330;
                        frontier_phi_74_pred_1 = _3329;
                        frontier_phi_74_pred_2 = _3328;
                        frontier_phi_74_pred_3 = _3333;
                        frontier_phi_74_pred_4 = _3332;
                        frontier_phi_74_pred_5 = _3331;
                    }
                    _2995 = frontier_phi_74_pred;
                    _2993 = frontier_phi_74_pred_1;
                    _2991 = frontier_phi_74_pred_2;
                    _3001 = frontier_phi_74_pred_3;
                    _2999 = frontier_phi_74_pred_4;
                    _2997 = frontier_phi_74_pred_5;
                    uint _3136 = _3135 + 1u;
                    if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3129 = _2991;
                        _3130 = _2993;
                        _3131 = _2995;
                        _3132 = _2997;
                        _3133 = _2999;
                        _3134 = _3001;
                        _3135 = _3136;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2999;
                frontier_phi_62_63_ladder_1 = _2997;
                frontier_phi_62_63_ladder_2 = _2995;
                frontier_phi_62_63_ladder_3 = _3001;
                frontier_phi_62_63_ladder_4 = _2993;
                frontier_phi_62_63_ladder_5 = _2991;
            }
            else
            {
                frontier_phi_62_63_ladder = _2886;
                frontier_phi_62_63_ladder_1 = _2884;
                frontier_phi_62_63_ladder_2 = _2882;
                frontier_phi_62_63_ladder_3 = _2888;
                frontier_phi_62_63_ladder_4 = _2880;
                frontier_phi_62_63_ladder_5 = _2878;
            }
            _2990 = frontier_phi_62_63_ladder_5;
            _2992 = frontier_phi_62_63_ladder_4;
            _2994 = frontier_phi_62_63_ladder_2;
            _2996 = frontier_phi_62_63_ladder_1;
            _2998 = frontier_phi_62_63_ladder;
            _3000 = frontier_phi_62_63_ladder_3;
        }
        float _3005 = isnan(1.0) ? _803 : (isnan(_803) ? 1.0 : min(_803, 1.0));
        _2811 = (_3005 * _2996) + _2343;
        _2813 = (_3005 * _2998) + _2345;
        _2815 = (_3005 * _3000) + _2347;
        _2817 = ((_2990 * 0.039999999105930328369140625) * _3005) + _2666;
        _2819 = ((_2992 * 0.039999999105930328369140625) * _3005) + _2668;
        _2821 = ((_2994 * 0.039999999105930328369140625) * _3005) + _2670;
    }
    else
    {
        _2811 = _2343;
        _2813 = _2345;
        _2815 = _2347;
        _2817 = _2666;
        _2819 = _2668;
        _2821 = _2670;
    }
    float _4708 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4719 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4730 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    uint _2841 = _778 + 6u;
    float _2849 = _740 / cbSceneParam._m0[86u].x;
    float _2850 = _741 / cbSceneParam._m0[86u].y;
    vec4 _2864 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2849, _2850, (log2((isnan(cbSceneParam._m0[77u].w) ? _734 : (isnan(_734) ? cbSceneParam._m0[77u].w : min(_734, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2866 = _2864.x;
    float _2867 = _2864.y;
    float _2868 = _2864.z;
    float _2869 = _2864.w;
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    if (_734 > cbSceneParam._m0[78u].w)
    {
        float _2903 = isnan(_734) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _734 : min(cbSceneParam._m0[80u].w, _734));
        float _2904 = _2903 / _734;
        float _2915 = _2904 * _286;
        float _2916 = _287 * _2904;
        float _2917 = (-0.0) - _2916;
        float _2918 = _2904 * _288;
        float _2920 = (cbSceneParam._m0[77u].w * _2917) / _2903;
        float _2921 = _2920 + cbSceneParam._m0[79u].w;
        float _2922 = cbSceneParam._m0[79u].w - _2916;
        float _2928 = sqrt(((_2915 * _2915) + (_2916 * _2916)) + (_2918 * _2918));
        float _2931 = (1.0 - (cbSceneParam._m0[77u].w / _2903)) * _2928;
        float _2936 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2938 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3091;
        if (abs((_2917 - _2920) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3091 = ((((_2921 > 0.0) ? exp2(_2936 * _2921) : (2.0 - exp2(_2938 * _2921))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2931;
        }
        else
        {
            float _3051 = 1.0 / cbSceneParam._m0[80u].x;
            float _3052 = isnan(_2922) ? _2921 : (isnan(_2921) ? _2922 : max(_2921, _2922));
            float _3053 = isnan(_2922) ? _2921 : (isnan(_2921) ? _2922 : min(_2921, _2922));
            float _3062 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : min(_3052, 0.0));
            float _3063 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : min(_3053, 0.0));
            _3091 = ((abs(_2928 / _2917) * cbSceneParam._m0[80u].y) * ((((_3062 - _3063) * 2.0) - ((exp2(_2936 * (isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0)))) - exp2(_2936 * (isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0))))) * _3051)) - ((exp2(_2938 * _3062) - exp2(_2938 * _3063)) * _3051))) + (_2931 * cbSceneParam._m0[80u].z);
        }
        vec4 _3093 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2849, _2850, 1.0), 0.0);
        float _3102 = exp2((_3091 * (-1.44269502162933349609375)) * (1.0 - _3093.w));
        float _3103 = log2(_3102);
        float _3119 = log2(_2869);
        _2940 = (exp2(_3119 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].x)) * _3093.x) / cbSceneParam._m0[78u].x)) + _2866;
        _2942 = (exp2(_3119 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].y)) * _3093.y) / cbSceneParam._m0[78u].y)) + _2867;
        _2944 = (exp2(_3119 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].z)) * _3093.z) / cbSceneParam._m0[78u].z)) + _2868;
        _2946 = _3102 * _2869;
    }
    else
    {
        _2940 = _2866;
        _2942 = _2867;
        _2944 = _2868;
        _2946 = _2869;
    }
    float _2958 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2959 = _2958 == 3.0;
    float _2960 = log2(_2946);
    float _2967 = exp2(_2960 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2811 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _803))) + ((_2817 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1609)) * cbPerFrame._m0[3u].x));
    float _2968 = exp2(_2960 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2813 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _803))) + ((_2819 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1609)) * cbPerFrame._m0[3u].x));
    float _2969 = exp2(_2960 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2815 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _803))) + ((_2821 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1609)) * cbPerFrame._m0[3u].x));
    float _2978 = (_2958 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2978 * (_2959 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2940)));
    SV_Target.y = _2978 * (_2959 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2942)));
    SV_Target.z = _2978 * (_2959 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2944)));
    SV_Target.w = cbInstanceData._m0[_2841].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2841].w;
}


