#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1172;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227;
    float _228;
    float _229;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
    }
    else
    {
        _227 = _213;
        _228 = _214;
        _229 = _215;
    }
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    uvec4 _290 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _292 = _290.z != 0u;
    vec4 _313 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _316 = _313.x;
    float _317 = _313.y;
    float _318 = _313.z;
    bool _339 = _290.x != 0u;
    vec4 _358 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _360 = _358.x;
    float _361 = _358.y;
    float _362 = _358.z;
    float _379 = _339 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[9u].w - _360)) + _360) : (_360 * cbMtdParam._m0[9u].w);
    float _380 = _339 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[10u].x - _361)) + _361) : (_361 * cbMtdParam._m0[10u].x);
    float _381 = _339 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[10u].y - _362)) + _362) : (_362 * cbMtdParam._m0[10u].y);
    bool _383 = _290.y != 0u;
    vec4 _399 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _401 = _399.x;
    float _402 = _399.y;
    float _403 = _399.z;
    vec4 _431 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _433 = _431.x;
    float _434 = _431.y;
    float _442 = ((cbMtdParam._m0[14u].y * (-1.39999997615814208984375)) * (1.0 - _433)) + 1.0;
    float _3508 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _447 = (cbMtdParam._m0[13u].w * ((isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) - _433)) + _433;
    float _454 = (_447 * ((_383 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[10u].w - _401)) + _401) : (_401 * cbMtdParam._m0[10u].w)) - _379)) + _379;
    float _455 = (_447 * ((_383 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[11u].x - _402)) + _402) : (_402 * cbMtdParam._m0[11u].x)) - _380)) + _380;
    float _456 = (_447 * ((_383 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[11u].y - _403)) + _403) : (_403 * cbMtdParam._m0[11u].y)) - _381)) + _381;
    float _460 = (((1.0 - _434) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].x) + 1.0;
    float _3519 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _465 = (cbMtdParam._m0[12u].w * ((isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) - _434)) + _434;
    float _472 = (_465 * ((_292 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[11u].w - _316)) + _316) : (_316 * cbMtdParam._m0[11u].w)) - _454)) + _454;
    float _473 = (_465 * ((_292 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[12u].x - _317)) + _317) : (_317 * cbMtdParam._m0[12u].x)) - _455)) + _455;
    float _474 = (_465 * ((_292 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[12u].y - _318)) + _318) : (_318 * cbMtdParam._m0[12u].y)) - _456)) + _456;
    vec4 _486 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _507 = cbMtdParam._m0[13u].z * texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x;
    float _514 = (_507 * (_486.x - _472)) + _472;
    float _515 = (_507 * (_486.y - _473)) + _473;
    float _516 = (_507 * (_486.z - _474)) + _474;
    float _520 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _521 = _520 * _284;
    float _522 = _520 * _285;
    float _523 = _520 * _286;
    float _524 = dot(vec4(_521, _522, _523, 0.0), vec4(_227, _228, _229, 0.0));
    float _3530 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _530 = exp2(log2(1.0 - (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))));
    float _533 = (_530 * 0.680000007152557373046875) + 0.119999997317790985107421875;
    float _553 = (_533 * ((0.048556677997112274169921875 - _514) + (_530 * 0.275154531002044677734375))) + _514;
    float _554 = (_533 * ((0.079126082360744476318359375 - _515) + (_530 * 0.448381125926971435546875))) + _515;
    float _555 = (_533 * ((0.1159258782863616943359375 - _516) + (_530 * 0.656913340091705322265625))) + _516;
    vec4 _567 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _584 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _586 = _584.x;
    float _587 = _584.y;
    float _588 = _584.z;
    float _595 = ((_567.x - _586) * _447) + _586;
    float _596 = ((_567.y - _587) * _447) + _587;
    float _597 = ((_567.z - _588) * _447) + _588;
    vec4 _609 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _635 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _647 = (((_609.x - _595) * _465) + _595) + ((_635.x + (-0.5)) * cbMtdParam._m0[14u].z);
    float _648 = (((_609.y - _596) * _465) + _596) + ((_635.y + (-0.5)) * cbMtdParam._m0[14u].z);
    float _649 = (((_609.z - _597) * _465) + _597) + ((_635.z + (-0.5)) * cbMtdParam._m0[14u].z);
    vec4 _662 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _673 = ((_662.x - _647) * _507) + _647;
    float _674 = ((_662.y - _648) * _507) + _648;
    float _675 = ((_662.z - _649) * _507) + _649;
    float _685 = ((1.0 - _675) * _533) + _675;
    float _689 = ((((0.502016007900238037109375 - _673) * _533) + _673) * 2.0) + (-1.0);
    float _691 = ((((0.502016007900238037109375 - _674) * _533) + _674) * 2.0) + (-1.0);
    float _692 = dot(vec2(_689, _691), vec2(_689, _691));
    float _3541 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _697 = sqrt(1.0 - (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))));
    float _700 = fma(_697, _227, fma(_691, _219 * TANGENT.x, (_205 * _198) * _689));
    float _703 = fma(_697, _228, fma(_691, _219 * TANGENT.y, (_205 * _199) * _689));
    float _706 = fma(_697, _229, fma(_691, _219 * TANGENT.z, (_205 * _200) * _689));
    float _710 = inversesqrt(dot(vec3(_700, _703, _706), vec3(_700, _703, _706)));
    float _711 = _710 * _700;
    float _712 = _710 * _703;
    float _713 = _710 * _706;
    float _3552 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _714 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _3574 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3585 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _732 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _738 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _739 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _757 = fma(_713, cbSceneParam._m0[5u].z, fma(_712, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _711));
    float _760 = fma(_713, cbSceneParam._m0[6u].z, fma(_712, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _711));
    float _763 = fma(_713, cbSceneParam._m0[7u].z, fma(_712, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _711));
    uint _776 = uint(roundEven(NORMAL.w)) * 13u;
    uint _778 = (_776 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _784 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_778].x;
    float _785 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * cbInstanceData._m0[_778].y;
    float _786 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * cbInstanceData._m0[_778].z;
    float _3596 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    vec4 _798 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _738, cbSceneParam._m0[86u].y * _739));
    float _801 = _798.x * TEXCOORD.z;
    float _802 = dot(vec3(_711, _712, _713), vec3(_521, _522, _523));
    float _805 = _802 * 2.0;
    float _809 = (_805 * _711) - _521;
    float _810 = (_805 * _712) - _522;
    float _811 = (_805 * _713) - _523;
    float _815 = abs(dot(vec3(_521, _522, _523), vec3(_711, _712, _713)));
    float _3629 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _817 = sqrt(_714);
    float _830 = exp2((_817 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_817 * 3.0));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1171;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _897 = fma(_870, cbModelParam._m0[26u].z, fma(_866, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _862));
        float _901 = fma(_870, cbModelParam._m0[27u].z, fma(_866, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _862));
        float _905 = fma(_870, cbModelParam._m0[28u].z, fma(_866, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _862));
        float _929 = _862 + _711;
        float _930 = _866 + _712;
        float _931 = _870 + _713;
        float _941 = fma(_931, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929)) - _897;
        float _942 = fma(_931, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929)) - _901;
        float _943 = fma(_931, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929)) - _905;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_897 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_901 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[34u].z) + ((((((_905 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _999 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_965.x + (-0.5));
        float _1001 = _999 * (_965.y + (-0.5));
        float _1002 = _999 * (_965.z + (-0.5));
        float _1009 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_972.x + (-0.5));
        float _1011 = _1009 * (_972.y + (-0.5));
        float _1012 = _1009 * (_972.z + (-0.5));
        float _1019 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_979.x + (-0.5));
        float _1021 = _1019 * (_979.y + (-0.5));
        float _1022 = _1019 * (_979.z + (-0.5));
        float _1029 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_986.x + (-0.5));
        float _1031 = _1029 * (_986.y + (-0.5));
        float _1032 = _1029 * (_986.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1053 = (dot(vec3(_711, _712, _713), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1063 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3677 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1065 + 1.0))) + _1070) * _1033;
        float _1080 = _1001 * 0.5;
        float _1081 = _1011 * 0.5;
        float _1082 = _1021 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_711, _712, _713), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3710 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1107 + 1.0))) + _1112) * _1034;
        float _1122 = _1002 * 0.5;
        float _1123 = _1012 * 0.5;
        float _1124 = _1022 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_711, _712, _713), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3743 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1149 + 1.0))) + _1154) * _1035;
        _1171 = _1002;
        _1173 = _1001;
        _1174 = _1000;
        _1175 = _1012;
        _1176 = _1011;
        _1177 = _1010;
        _1178 = _1022;
        _1179 = _1021;
        _1180 = _1020;
        _1181 = _1035;
        _1182 = _1034;
        _1183 = _1033;
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _1172;
        _1173 = _1172;
        _1174 = _1172;
        _1175 = _1172;
        _1176 = _1172;
        _1177 = _1172;
        _1178 = _1172;
        _1179 = _1172;
        _1180 = _1172;
        _1181 = _1172;
        _1182 = _1172;
        _1183 = _1172;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1212 = fma(_870, cbModelParam._m0[30u].z, fma(_866, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _862));
        float _1216 = fma(_870, cbModelParam._m0[31u].z, fma(_866, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _862));
        float _1220 = fma(_870, cbModelParam._m0[32u].z, fma(_866, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _862));
        float _1243 = _862 + _711;
        float _1244 = _866 + _712;
        float _1245 = _870 + _713;
        float _1255 = fma(_1245, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1243)) - _1212;
        float _1256 = fma(_1245, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1243)) - _1216;
        float _1257 = fma(_1245, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1243)) - _1220;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1212 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1216 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[35u].z) + ((((((_1220 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1311 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1278.x + (-0.5));
        float _1313 = _1311 * (_1278.y + (-0.5));
        float _1314 = _1311 * (_1278.z + (-0.5));
        float _1321 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1285.x + (-0.5));
        float _1323 = _1321 * (_1285.y + (-0.5));
        float _1324 = _1321 * (_1285.z + (-0.5));
        float _1331 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1292.x + (-0.5));
        float _1333 = _1331 * (_1292.y + (-0.5));
        float _1334 = _1331 * (_1292.z + (-0.5));
        float _1341 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1299.x + (-0.5));
        float _1343 = _1341 * (_1299.y + (-0.5));
        float _1344 = _1341 * (_1299.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_711, _712, _713), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3806 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1375 + 1.0))) + _1380) * _1345;
        float _1390 = _1313 * 0.5;
        float _1391 = _1323 * 0.5;
        float _1392 = _1333 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_711, _712, _713), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3839 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1417 + 1.0))) + _1422) * _1346;
        float _1432 = _1314 * 0.5;
        float _1433 = _1324 * 0.5;
        float _1434 = _1334 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_711, _712, _713), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3872 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1459 + 1.0))) + _1464) * _1347;
        _1481 = _1314;
        _1482 = _1313;
        _1483 = _1312;
        _1484 = _1324;
        _1485 = _1323;
        _1486 = _1322;
        _1487 = _1334;
        _1488 = _1333;
        _1489 = _1332;
        _1490 = _1347;
        _1491 = _1346;
        _1492 = _1345;
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1172;
        _1482 = _1172;
        _1483 = _1172;
        _1484 = _1172;
        _1485 = _1172;
        _1486 = _1172;
        _1487 = _1172;
        _1488 = _1172;
        _1489 = _1172;
        _1490 = _1172;
        _1491 = _1172;
        _1492 = _1172;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1184)) + _1184;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1185)) + _1185;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1186)) + _1186;
    float _1528 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1505));
    float _1549 = _809 * 0.5;
    float _1550 = _810 * 0.5;
    float _1551 = _811 * 0.5;
    float _1552 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1555 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1558 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1592;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1565 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1171, _1175, _1178, _1181));
        float _1569 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1573 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1580 = dot(vec4(cbModelParam._m0[39u]), vec4(_1549, _1550, _1551, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1603;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1594 = dot(vec4(cbModelParam._m0[40u]), vec4(_1549, _1550, _1551, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1607 = (_1603 * cbModelParam._m0[1u].x) + (_1592 * (1.0 - cbModelParam._m0[1u].x));
    float _1617 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _714);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1617 : min(cbModelParam._m0[25u].z, _1617));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1665 = fma(_870, cbModelParam._m0[13u].z, fma(_866, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862)) + cbModelParam._m0[13u].w;
        float _1669 = fma(_870, cbModelParam._m0[14u].z, fma(_866, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862)) + cbModelParam._m0[14u].w;
        float _1673 = fma(_870, cbModelParam._m0[15u].z, fma(_866, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862)) + cbModelParam._m0[15u].w;
        float _1676 = fma(_811, cbModelParam._m0[13u].z, fma(_810, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809));
        float _1679 = fma(_811, cbModelParam._m0[14u].z, fma(_810, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809));
        float _1682 = fma(_811, cbModelParam._m0[15u].z, fma(_810, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809));
        float _1710;
        if (_1676 > 0.0)
        {
            _1710 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1710 = frontier_phi_16_14_ladder;
        }
        float _1935;
        if (_1679 > 0.0)
        {
            _1935 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1935 = frontier_phi_25_21_ladder;
        }
        float _2181;
        if (_1682 > 0.0)
        {
            _2181 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2181 = frontier_phi_37_32_ladder;
        }
        float _2183 = isnan(_1935) ? _1710 : (isnan(_1710) ? _1935 : min(_1710, _1935));
        float _2184 = isnan(_2181) ? _2183 : (isnan(_2183) ? _2181 : min(_2183, _2181));
        float _2188 = (_2184 * _1676) + _1665;
        float _2189 = (_2184 * _1679) + _1669;
        float _2190 = (_2184 * _1682) + _1673;
        float _2191 = _2184 * 9.9999997473787516355514526367188e-05;
        float _2193 = (-1.0) - _2191;
        float _2195 = _2191 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2190 > _2195) || ((_2190 < _2193) || ((_2189 > _2195) || ((_2189 < _2193) || ((_2188 < _2193) || (_2188 > _2195))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2190, cbModelParam._m0[9u].z, fma(_2189, cbModelParam._m0[9u].y, _2188 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2190, cbModelParam._m0[10u].z, fma(_2189, cbModelParam._m0[10u].y, _2188 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2190, cbModelParam._m0[11u].z, fma(_2189, cbModelParam._m0[11u].y, _2188 * cbModelParam._m0[11u].x))), _1618);
            frontier_phi_15_37_ladder = _2314.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2314.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2314.x * cbModelParam._m0[1u].y;
        }
        _1698 = frontier_phi_15_37_ladder_2;
        _1700 = frontier_phi_15_37_ladder_1;
        _1702 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_809, _810, _811), _1618);
        _1698 = _1686.x * cbModelParam._m0[1u].y;
        _1700 = _1686.y * cbModelParam._m0[1u].y;
        _1702 = _1686.z * cbModelParam._m0[1u].y;
    }
    float _1706 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _714);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1706 : min(cbModelParam._m0[25u].w, _1706));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1764 = fma(_870, cbModelParam._m0[21u].z, fma(_866, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862)) + cbModelParam._m0[21u].w;
        float _1768 = fma(_870, cbModelParam._m0[22u].z, fma(_866, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862)) + cbModelParam._m0[22u].w;
        float _1772 = fma(_870, cbModelParam._m0[23u].z, fma(_866, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862)) + cbModelParam._m0[23u].w;
        float _1775 = fma(_811, cbModelParam._m0[21u].z, fma(_810, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809));
        float _1778 = fma(_811, cbModelParam._m0[22u].z, fma(_810, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809));
        float _1781 = fma(_811, cbModelParam._m0[23u].z, fma(_810, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809));
        float _1940;
        if (_1775 > 0.0)
        {
            _1940 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1940 = frontier_phi_27_23_ladder;
        }
        float _2208;
        if (_1778 > 0.0)
        {
            _2208 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2208 = frontier_phi_39_34_ladder;
        }
        float _2413;
        if (_1781 > 0.0)
        {
            _2413 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2413 = frontier_phi_48_45_ladder;
        }
        float _2415 = isnan(_2208) ? _1940 : (isnan(_1940) ? _2208 : min(_1940, _2208));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1775) + _1764;
        float _2421 = (_2416 * _1778) + _1768;
        float _2422 = (_2416 * _1781) + _1772;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2423;
        float _2426 = _2423 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2422 > _2426) || ((_2422 < _2424) || ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 < _2424) || (_2420 > _2426))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2422, cbModelParam._m0[17u].z, fma(_2421, cbModelParam._m0[17u].y, _2420 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2422, cbModelParam._m0[18u].z, fma(_2421, cbModelParam._m0[18u].y, _2420 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2422, cbModelParam._m0[19u].z, fma(_2421, cbModelParam._m0[19u].y, _2420 * cbModelParam._m0[19u].x))), _1707);
            frontier_phi_24_48_ladder = _2620.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2620.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2620.x * cbModelParam._m0[1u].z;
        }
        _1800 = frontier_phi_24_48_ladder_2;
        _1802 = frontier_phi_24_48_ladder_1;
        _1804 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_809, _810, _811), _1707);
        _1800 = _1784.x * cbModelParam._m0[1u].z;
        _1802 = _1784.y * cbModelParam._m0[1u].z;
        _1804 = _1784.z * cbModelParam._m0[1u].z;
    }
    float _1816 = ((((1.0 - _830) * ((_817 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_830 * _817)) * _801;
    float _1817 = _1816 * ((cbModelParam._m0[1u].w * (_1800 - _1698)) + _1698);
    float _1818 = _1816 * ((cbModelParam._m0[1u].w * (_1802 - _1700)) + _1700);
    float _1819 = _1816 * ((cbModelParam._m0[1u].w * (_1804 - _1702)) + _1702);
    float _1822 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1825 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1828 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, _1817 * cbSceneParam._m0[91u].x));
    vec4 _1836 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_738, _739));
    float _1838 = _1836.w;
    float _1850 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1838);
    float _1851 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1838);
    float _1852 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1838);
    uvec4 _1856 = floatBitsToUint(cbInstanceData._m0[_776 + 5u]);
    uint _1858 = _1856.x * 14u;
    uint _1859 = _1858 + 13u;
    float _1866 = _801 + (-1.0);
    float _1871 = (cbLight._m0[_1859].x * _1866) + 1.0;
    float _1872 = (cbLight._m0[_1859].y * _1866) + 1.0;
    float _1873 = (cbLight._m0[_1859].z * _1866) + 1.0;
    float _1874 = (cbLight._m0[_1859].w * _1866) + 1.0;
    uint _1875 = _1858 + 5u;
    float _1881 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
    uint _1885 = _1858 + 4u;
    float _1894 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
    uint _1898 = _1858 | 1u;
    float _1909 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_711, _712, _713));
    float _1912 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_711, _712, _713));
    float _4008 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _4019 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1917 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * 0.3183098733425140380859375;
    float _1919 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.3183098733425140380859375;
    float _1926 = ((cbLight._m0[_1875].x * _1881) * _1919) + (((cbLight._m0[_1885].x * _1850) * _1894) * _1917);
    float _1927 = ((_1881 * cbLight._m0[_1875].y) * _1919) + (((cbLight._m0[_1885].y * _1851) * _1894) * _1917);
    float _1928 = ((_1881 * cbLight._m0[_1875].z) * _1919) + (((cbLight._m0[_1885].z * _1852) * _1894) * _1917);
    uvec4 _1932 = floatBitsToUint(cbLight._m0[_1858 + 12u]);
    bool _1934 = _1932.x == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1934)
    {
        _1945 = _1926;
        _1947 = _1927;
        _1949 = _1928;
    }
    else
    {
        uint _1953 = _1858 + 6u;
        float _1969 = (dot(vec3(cbLight._m0[_1858 + 2u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _1970 = _1969 * _1969;
        float _4030 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1972 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _1945 = (((cbLight._m0[_1953].x * 0.3183098733425140380859375) * _1971) * _1972) + _1926;
        _1947 = (((cbLight._m0[_1953].y * 0.3183098733425140380859375) * _1971) * _1972) + _1927;
        _1949 = (((cbLight._m0[_1953].z * 0.3183098733425140380859375) * _1971) * _1972) + _1928;
    }
    bool _1952 = _1932.y == 0u;
    float _1990;
    float _1992;
    float _1994;
    if (_1952)
    {
        _1990 = _1945;
        _1992 = _1947;
        _1994 = _1949;
    }
    else
    {
        uint _2152 = _1858 + 7u;
        float _2168 = (dot(vec3(cbLight._m0[_1858 + 3u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _2169 = _2168 * _2168;
        float _4046 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2170 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _2171 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _1990 = (((cbLight._m0[_2152].x * 0.3183098733425140380859375) * _2170) * _2171) + _1945;
        _1992 = (((cbLight._m0[_2152].y * 0.3183098733425140380859375) * _2170) * _2171) + _1947;
        _1994 = (((cbLight._m0[_2152].z * 0.3183098733425140380859375) * _2170) * _2171) + _1949;
    }
    uint _1997 = _1858 + 8u;
    float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1858].w)) * _714) * 0.949999988079071044921875);
    float _2011 = _2010 * _2010;
    float _2012 = cbLight._m0[_1858].x + _521;
    float _2013 = cbLight._m0[_1858].y + _522;
    float _2014 = cbLight._m0[_1858].z + _523;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2019 = _2018 * _2012;
    float _2020 = _2018 * _2013;
    float _2021 = _2018 * _2014;
    float _2022 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_1858].xyz));
    float _4062 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _2026 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _2027 = dot(vec3(_711, _712, _713), vec3(_2019, _2020, _2021));
    float _4084 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _2031 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_2019, _2020, _2021));
    float _4095 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2035 = _2011 * _2011;
    float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
    float _2050 = (exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2051 = 1.0 - _2011;
    float _2062 = (0.5 / (((_2026 * ((_2025 * _2051) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2051) + _2011) * _2025))) * _2025;
    float _4106 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
    uint _2078 = _1858 + 9u;
    float _2089 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _714) * 0.949999988079071044921875);
    float _2090 = _2089 * _2089;
    float _2091 = cbLight._m0[_1898].x + _521;
    float _2092 = cbLight._m0[_1898].y + _522;
    float _2093 = cbLight._m0[_1898].z + _523;
    float _2097 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
    float _2098 = _2097 * _2091;
    float _2099 = _2097 * _2092;
    float _2100 = _2097 * _2093;
    float _2101 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_1898].xyz));
    float _4117 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2105 = dot(vec3(_711, _712, _713), vec3(_2098, _2099, _2100));
    float _4128 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _2109 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_2098, _2099, _2100));
    float _4139 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2113 = _2090 * _2090;
    float _2117 = ((_2108 * _2108) * (_2113 + (-1.0))) + 1.0;
    float _2126 = (exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2127 = 1.0 - _2090;
    float _2137 = (0.5 / (((_2026 * ((_2104 * _2127) + _2090)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2127) + _2090) * _2104))) * _2104;
    float _4150 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2139 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2113 / ((_2117 * _2117) * 3.141590118408203125));
    float _2149 = (((_2126 * cbLight._m0[_2078].x) * _2139) * _1881) + ((((cbLight._m0[_1997].x * _1850) * _2050) * _2064) * _1894);
    float _2150 = (((_2126 * cbLight._m0[_2078].y) * _2139) * _1881) + ((((cbLight._m0[_1997].y * _1851) * _2050) * _2064) * _1894);
    float _2151 = (((_2126 * cbLight._m0[_2078].z) * _2139) * _1881) + ((((cbLight._m0[_1997].z * _1852) * _2050) * _2064) * _1894);
    float _2213;
    float _2215;
    float _2217;
    if (_1934)
    {
        _2213 = _2149;
        _2215 = _2150;
        _2217 = _2151;
    }
    else
    {
        uint _2219 = _1858 + 2u;
        uint _2223 = _1858 + 10u;
        float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _714) * 0.949999988079071044921875);
        float _2238 = _2237 * _2237;
        float _2239 = cbLight._m0[_2219].x + _521;
        float _2240 = cbLight._m0[_2219].y + _522;
        float _2241 = cbLight._m0[_2219].z + _523;
        float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
        float _2246 = _2245 * _2239;
        float _2247 = _2245 * _2240;
        float _2248 = _2245 * _2241;
        float _2249 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2219].xyz));
        float _4161 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2253 = dot(vec3(_711, _712, _713), vec3(_2246, _2247, _2248));
        float _4172 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2257 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2246, _2247, _2248));
        float _4183 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2261 = _2238 * _2238;
        float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
        float _2274 = (exp2(log2(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2275 = 1.0 - _2238;
        float _2285 = (0.5 / (((_2026 * ((_2252 * _2275) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2275) + _2238) * _2252))) * _2252;
        float _4194 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2287 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
        float _2288 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2213 = (((_2274 * cbLight._m0[_2223].x) * _2287) * _2288) + _2149;
        _2215 = (((_2274 * cbLight._m0[_2223].y) * _2287) * _2288) + _2150;
        _2217 = (((_2274 * cbLight._m0[_2223].z) * _2287) * _2288) + _2151;
    }
    float _2323;
    float _2325;
    float _2327;
    if (_1952)
    {
        _2323 = _2213;
        _2325 = _2215;
        _2327 = _2217;
    }
    else
    {
        uint _2334 = _1858 + 3u;
        uint _2338 = _1858 + 11u;
        float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _714) * 0.949999988079071044921875);
        float _2353 = _2352 * _2352;
        float _2354 = cbLight._m0[_2334].x + _521;
        float _2355 = cbLight._m0[_2334].y + _522;
        float _2356 = cbLight._m0[_2334].z + _523;
        float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
        float _2361 = _2360 * _2354;
        float _2362 = _2360 * _2355;
        float _2363 = _2360 * _2356;
        float _2364 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2334].xyz));
        float _4210 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2368 = dot(vec3(_711, _712, _713), vec3(_2361, _2362, _2363));
        float _4221 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2372 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2361, _2362, _2363));
        float _4232 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2376 = _2353 * _2353;
        float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
        float _2389 = (exp2(log2(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2390 = 1.0 - _2353;
        float _2400 = (0.5 / (((_2026 * ((_2367 * _2390) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2390) + _2353) * _2367))) * _2367;
        float _4243 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _2323 = (((_2389 * cbLight._m0[_2338].x) * _2402) * _2403) + _2213;
        _2325 = (((_2389 * cbLight._m0[_2338].y) * _2402) * _2403) + _2215;
        _2327 = (((_2389 * cbLight._m0[_2338].z) * _2402) * _2403) + _2217;
    }
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    if (_1856.y == 0u)
    {
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2479 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2478;
        float _2480 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2478;
        float _2481 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2478;
        uvec4 _2493 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2494 = _2493.x;
        uint _2505 = uint((float(_2493.y) * floor(float(uint(cbSceneParam._m0[85u].y * _739) / _2494))) + floor(float(uint(cbSceneParam._m0[85u].x * _738) / _2494)));
        float _2515 = (log2(_2481 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2516 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        uint _2519 = uint(isnan(14.0) ? _2516 : (isnan(_2516) ? 14.0 : min(_2516, 14.0)));
        uvec4 _2524 = texelFetch(g_lightClusterGridBuffer, int(((_2519 << 2u) + (_2505 << 6u)) >> 2u));
        uint _2525 = _2524.x;
        uint _2526 = _2493.z;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        if (((((1u << ((_2526 >> 4u) & 15u)) + 4294967295u) & _2525) == 0u) || ((_2526 & 240u) == 0u))
        {
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
        }
        else
        {
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            uint _2775 = 0u;
            uint _2784;
            bool _2785;
            for (;;)
            {
                _2784 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2775 << 2u)) >> 2u)).x;
                _2785 = _2784 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2785)
                {
                    frontier_phi_63_pred = _2774;
                    frontier_phi_63_pred_1 = _2773;
                    frontier_phi_63_pred_2 = _2772;
                    frontier_phi_63_pred_3 = _2771;
                    frontier_phi_63_pred_4 = _2770;
                    frontier_phi_63_pred_5 = _2769;
                }
                else
                {
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    uint _2899;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2784;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    for (;;)
                    {
                        uint _2903 = uint(findLSB(_2899)) + (_2775 << 5u);
                        uint _2900 = (_2899 + 4294967295u) & _2899;
                        uint _2905 = _2903 * 48u;
                        vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 3u)).x));
                        uint _2925 = (_2903 * 48u) + 4u;
                        vec4 _2938 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2944 = (_2903 * 48u) + 8u;
                        vec3 _2955 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2944)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 2u)).x));
                        float _2959 = _2919.x - _2479;
                        float _2960 = _2919.y - _2480;
                        float _2961 = _2919.z - _2481;
                        float _2962 = dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961));
                        float _2965 = inversesqrt(_2962);
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2969 = dot(vec3(_757, _760, _763), vec3(_2966, _2967, _2968));
                        float _2974 = 1.0 - (_2962 * _2919.w);
                        float _4269 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2975 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _2976 = sqrt(_2962) * _2938.w;
                        float _2979 = 1.39999997615814208984375 / (_2976 + 1.39999997615814208984375);
                        float _2980 = _2979 * _2979;
                        float _2983 = ((1.0 - _2980) * _2969) + _2980;
                        float _2986 = _2976 * _2976;
                        float _2990 = ((isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))) * _2975) / ((_2986 * 0.699999988079071044921875) + 1.0);
                        float _2994 = (-0.0) - _2479;
                        float _2995 = (-0.0) - _2480;
                        float _2996 = (-0.0) - _2481;
                        float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3011 = exp2(log2(1.0 / ((_2986 * 3.5) + 5.0)) * 0.25);
                        float _3012 = 1.0 - _817;
                        float _3019 = sqrt(1.0 - ((1.0 - (_3012 * _3012)) * (1.0 - (_3011 * _3011))));
                        float _3020 = _3019 * _3019;
                        float _3021 = _3020 * _3020;
                        float _3022 = _3001 + _2966;
                        float _3023 = _3002 + _2967;
                        float _3024 = _3003 + _2968;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3032 = dot(vec3(_757, _760, _763), vec3(_3001, _3002, _3003));
                        float _4285 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3035 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                        float _3036 = dot(vec3(_757, _760, _763), vec3(_3028 * _3022, _3028 * _3023, _3028 * _3024));
                        float _4296 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3039 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _3043 = ((_3039 * _3039) * (_3021 + (-1.0))) + 1.0;
                        float _3044 = _2979 * _3020;
                        float _3045 = _3044 * _3044;
                        float _3048 = ((1.0 - _3045) * _2969) + _3045;
                        float _4307 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _3050 = 1.0 - _3020;
                        float _3060 = (0.5 / (((_3049 * ((_3035 * _3050) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_3049 * _3050) + _3020) * _3035))) * _3049;
                        float _4318 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3071 = (((_3021 * 3.1415927410125732421875) * (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) / ((_3043 * _3043) * ((_2986 * 2.1991131305694580078125) + 3.141590118408203125))) * _2975;
                        _2828 = (_2990 * _2938.x) + _2896;
                        _2829 = (_2990 * _2938.y) + _2897;
                        _2830 = (_2990 * _2938.z) + _2898;
                        _2825 = (_3071 * _2955.x) + _2893;
                        _2826 = (_3071 * _2955.y) + _2894;
                        _2827 = (_3071 * _2955.z) + _2895;
                        if (_2900 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2900;
                        }
                    }
                    frontier_phi_63_pred = _2830;
                    frontier_phi_63_pred_1 = _2829;
                    frontier_phi_63_pred_2 = _2828;
                    frontier_phi_63_pred_3 = _2827;
                    frontier_phi_63_pred_4 = _2826;
                    frontier_phi_63_pred_5 = _2825;
                }
                _2636 = frontier_phi_63_pred;
                _2634 = frontier_phi_63_pred_1;
                _2632 = frontier_phi_63_pred_2;
                _2630 = frontier_phi_63_pred_3;
                _2628 = frontier_phi_63_pred_4;
                _2626 = frontier_phi_63_pred_5;
                uint _2776 = _2775 + 1u;
                if (_2776 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2769 = _2626;
                    _2770 = _2628;
                    _2771 = _2630;
                    _2772 = _2632;
                    _2773 = _2634;
                    _2774 = _2636;
                    _2775 = _2776;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
        }
        uvec4 _2639 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2640 = _2639.z;
        uint _2642 = (_2640 >> 8u) & 15u;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        if (((4294967295u << _2642) & _2525) == 0u)
        {
            _2737 = _2625;
            _2739 = _2627;
            _2741 = _2629;
            _2743 = _2631;
            _2745 = _2633;
            _2747 = _2635;
        }
        else
        {
            float _2762 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
            float _2763 = _2762 * _2479;
            float _2764 = _2762 * _2480;
            float _2765 = _2762 * _2481;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2642 < ((_2640 >> 12u) & 15u))
            {
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2876 = _2625;
                float _2877 = _2627;
                float _2878 = _2629;
                float _2879 = _2631;
                float _2880 = _2633;
                float _2881 = _2635;
                uint _2882 = _2642;
                uint _2891;
                bool _2892;
                for (;;)
                {
                    _2891 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2882 << 2u)) >> 2u)).x;
                    _2892 = _2891 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2892)
                    {
                        frontier_phi_69_pred = _2881;
                        frontier_phi_69_pred_1 = _2880;
                        frontier_phi_69_pred_2 = _2879;
                        frontier_phi_69_pred_3 = _2878;
                        frontier_phi_69_pred_4 = _2877;
                        frontier_phi_69_pred_5 = _2876;
                    }
                    else
                    {
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3089 = _2876;
                        float _3090 = _2877;
                        float _3091 = _2878;
                        float _3092 = _2879;
                        float _3093 = _2880;
                        float _3094 = _2881;
                        uint _3095 = _2891;
                        uint _3096;
                        vec4 _3121;
                        float _3122;
                        vec4 _3137;
                        vec3 _3149;
                        vec4 _3165;
                        vec4 _3181;
                        float _3228;
                        bool _3229;
                        for (;;)
                        {
                            uint _3106 = ((_2882 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3095));
                            _3096 = (_3095 + 4294967295u) & _3095;
                            uint _3108 = _3106 * 40u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3122 = _3121.w;
                            uint _3124 = (_3106 * 40u) + 4u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3106 * 40u) + 8u;
                            _3149 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x));
                            uint _3152 = (_3106 * 40u) + 16u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3168 = (_3106 * 40u) + 20u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3184 = (_3106 * 40u) + 24u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3203 = (_3106 * 40u) + 28u;
                            vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3228 = fma(_2481, _3216.z, fma(_2480, _3216.y, _3216.x * _2479)) + _3216.w;
                            _3229 = !((fma(_2481, _3197.z, fma(_2480, _3197.y, _3197.x * _2479)) + _3197.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3229)
                            {
                                float _3256 = _3121.x - _2479;
                                float _3257 = _3121.y - _2480;
                                float _3258 = _3121.z - _2481;
                                float _3259 = dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258));
                                float _3262 = inversesqrt(_3259);
                                float _3263 = _3262 * _3256;
                                float _3264 = _3262 * _3257;
                                float _3265 = _3262 * _3258;
                                float _3269 = 1.0 - (_3259 / (_3122 * _3122));
                                float _4329 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3274 = sqrt(_3259) * _3137.w;
                                float _3276 = 1.39999997615814208984375 / (_3274 + 1.39999997615814208984375);
                                float _3277 = _3276 * _3276;
                                float _3280 = ((1.0 - _3277) * dot(vec3(_3263, _3264, _3265), vec3(_757, _760, _763))) + _3277;
                                float _3283 = _3274 * _3274;
                                float _3287 = (fma(_2481, _3165.z, fma(_2480, _3165.y, _3165.x * _2479)) + _3165.w) / _3228;
                                float _3288 = (fma(_2481, _3181.z, fma(_2480, _3181.y, _3181.x * _2479)) + _3181.w) / _3228;
                                float _3292 = 1.0 - dot(vec2(_3287, _3288), vec2(_3287, _3288));
                                float _4345 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3294 = _3293 * (((isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))) * _3270) / ((_3283 * 0.699999988079071044921875) + 1.0));
                                float _3306 = exp2(log2(1.0 / ((_3283 * 3.5) + 5.0)) * 0.25);
                                float _3307 = 1.0 - _817;
                                float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                                float _3315 = _3314 * _3314;
                                float _3316 = _3315 * _3315;
                                float _3317 = _3263 - _2763;
                                float _3318 = _3264 - _2764;
                                float _3319 = _3265 - _2765;
                                float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                                float _3327 = dot(vec3(_757, _760, _763), vec3((-0.0) - _2763, (-0.0) - _2764, (-0.0) - _2765));
                                float _4356 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3331 = dot(vec3(_757, _760, _763), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                                float _4367 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                                float _3339 = _3276 * _3315;
                                float _3340 = _3339 * _3339;
                                float _3346 = ((1.0 - _3340) * dot(vec3(_757, _760, _763), vec3(_3263, _3264, _3265))) + _3340;
                                float _4378 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3348 = 1.0 - _3315;
                                float _3358 = (0.5 / (((_3347 * ((_3330 * _3348) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3315) * _3330))) * _3347;
                                float _4389 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3368 = (_3293 * _3270) * (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) / ((_3338 * _3338) * ((_3283 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3294 * _3137.z;
                                frontier_phi_75_pred_1 = _3294 * _3137.y;
                                frontier_phi_75_pred_2 = _3294 * _3137.x;
                                frontier_phi_75_pred_3 = _3368 * _3149.z;
                                frontier_phi_75_pred_4 = _3368 * _3149.y;
                                frontier_phi_75_pred_5 = _3368 * _3149.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3377 = frontier_phi_75_pred;
                            _3376 = frontier_phi_75_pred_1;
                            _3375 = frontier_phi_75_pred_2;
                            _3374 = frontier_phi_75_pred_3;
                            _3373 = frontier_phi_75_pred_4;
                            _3372 = frontier_phi_75_pred_5;
                            _3079 = _3375 + _3092;
                            _3080 = _3376 + _3093;
                            _3081 = _3377 + _3094;
                            _3076 = _3372 + _3089;
                            _3077 = _3373 + _3090;
                            _3078 = _3374 + _3091;
                            if (_3096 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3096;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3081;
                        frontier_phi_69_pred_1 = _3080;
                        frontier_phi_69_pred_2 = _3079;
                        frontier_phi_69_pred_3 = _3078;
                        frontier_phi_69_pred_4 = _3077;
                        frontier_phi_69_pred_5 = _3076;
                    }
                    _2748 = frontier_phi_69_pred;
                    _2746 = frontier_phi_69_pred_1;
                    _2744 = frontier_phi_69_pred_2;
                    _2742 = frontier_phi_69_pred_3;
                    _2740 = frontier_phi_69_pred_4;
                    _2738 = frontier_phi_69_pred_5;
                    uint _2883 = _2882 + 1u;
                    if (_2883 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2876 = _2738;
                        _2877 = _2740;
                        _2878 = _2742;
                        _2879 = _2744;
                        _2880 = _2746;
                        _2881 = _2748;
                        _2882 = _2883;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2748;
                frontier_phi_57_58_ladder_1 = _2746;
                frontier_phi_57_58_ladder_2 = _2744;
                frontier_phi_57_58_ladder_3 = _2742;
                frontier_phi_57_58_ladder_4 = _2740;
                frontier_phi_57_58_ladder_5 = _2738;
            }
            else
            {
                frontier_phi_57_58_ladder = _2635;
                frontier_phi_57_58_ladder_1 = _2633;
                frontier_phi_57_58_ladder_2 = _2631;
                frontier_phi_57_58_ladder_3 = _2629;
                frontier_phi_57_58_ladder_4 = _2627;
                frontier_phi_57_58_ladder_5 = _2625;
            }
            _2737 = frontier_phi_57_58_ladder_5;
            _2739 = frontier_phi_57_58_ladder_4;
            _2741 = frontier_phi_57_58_ladder_3;
            _2743 = frontier_phi_57_58_ladder_2;
            _2745 = frontier_phi_57_58_ladder_1;
            _2747 = frontier_phi_57_58_ladder;
        }
        float _2752 = isnan(1.0) ? _801 : (isnan(_801) ? 1.0 : min(_801, 1.0));
        _2537 = (_2752 * _2743) + _1990;
        _2539 = (_2752 * _2745) + _1992;
        _2541 = (_2752 * _2747) + _1994;
        _2543 = ((_2737 * 0.039999999105930328369140625) * _2752) + _2323;
        _2545 = ((_2739 * 0.039999999105930328369140625) * _2752) + _2325;
        _2547 = ((_2741 * 0.039999999105930328369140625) * _2752) + _2327;
    }
    else
    {
        _2537 = _1990;
        _2539 = _1992;
        _2541 = _1994;
        _2543 = _2323;
        _2545 = _2325;
        _2547 = _2327;
    }
    float _4405 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4416 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4427 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    uint _2567 = _776 + 6u;
    float _2575 = _738 / cbSceneParam._m0[86u].x;
    float _2576 = _739 / cbSceneParam._m0[86u].y;
    vec4 _2590 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, (log2((isnan(cbSceneParam._m0[77u].w) ? _732 : (isnan(_732) ? cbSceneParam._m0[77u].w : min(_732, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2592 = _2590.x;
    float _2593 = _2590.y;
    float _2594 = _2590.z;
    float _2595 = _2590.w;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    if (_732 > cbSceneParam._m0[78u].w)
    {
        float _2650 = isnan(_732) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _732 : min(cbSceneParam._m0[80u].w, _732));
        float _2651 = _2650 / _732;
        float _2662 = _2651 * _284;
        float _2663 = _285 * _2651;
        float _2664 = (-0.0) - _2663;
        float _2665 = _2651 * _286;
        float _2667 = (cbSceneParam._m0[77u].w * _2664) / _2650;
        float _2668 = _2667 + cbSceneParam._m0[79u].w;
        float _2669 = cbSceneParam._m0[79u].w - _2663;
        float _2675 = sqrt(((_2662 * _2662) + (_2663 * _2663)) + (_2665 * _2665));
        float _2678 = (1.0 - (cbSceneParam._m0[77u].w / _2650)) * _2675;
        float _2683 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2685 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2838;
        if (abs((_2664 - _2667) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2838 = ((((_2668 > 0.0) ? exp2(_2683 * _2668) : (2.0 - exp2(_2685 * _2668))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2678;
        }
        else
        {
            float _2798 = 1.0 / cbSceneParam._m0[80u].x;
            float _2799 = isnan(_2669) ? _2668 : (isnan(_2668) ? _2669 : max(_2668, _2669));
            float _2800 = isnan(_2669) ? _2668 : (isnan(_2668) ? _2669 : min(_2668, _2669));
            float _2809 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : min(_2799, 0.0));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            _2838 = ((abs(_2675 / _2664) * cbSceneParam._m0[80u].y) * ((((_2809 - _2810) * 2.0) - ((exp2(_2683 * (isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0)))) - exp2(_2683 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0))))) * _2798)) - ((exp2(_2685 * _2809) - exp2(_2685 * _2810)) * _2798))) + (_2678 * cbSceneParam._m0[80u].z);
        }
        vec4 _2840 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, 1.0), 0.0);
        float _2849 = exp2((_2838 * (-1.44269502162933349609375)) * (1.0 - _2840.w));
        float _2850 = log2(_2849);
        float _2866 = log2(_2595);
        _2687 = (exp2(_2866 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].x)) * _2840.x) / cbSceneParam._m0[78u].x)) + _2592;
        _2689 = (exp2(_2866 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].y)) * _2840.y) / cbSceneParam._m0[78u].y)) + _2593;
        _2691 = (exp2(_2866 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].z)) * _2840.z) / cbSceneParam._m0[78u].z)) + _2594;
        _2693 = _2849 * _2595;
    }
    else
    {
        _2687 = _2592;
        _2689 = _2593;
        _2691 = _2594;
        _2693 = _2595;
    }
    float _2705 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2706 = _2705 == 3.0;
    float _2707 = log2(_2693);
    float _2714 = exp2(_2707 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2537 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _801))) + ((_2543 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2715 = exp2(_2707 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2539 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _801))) + ((_2545 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2716 = exp2(_2707 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2541 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _801))) + ((_2547 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2725 = (_2705 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2725 * (_2706 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2687)));
    SV_Target.y = _2725 * (_2706 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2689)));
    SV_Target.z = _2725 * (_2706 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2691)));
    SV_Target.w = cbInstanceData._m0[_2567].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2567].w;
}


