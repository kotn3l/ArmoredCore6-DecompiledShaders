#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1217;
float _3607;
float _3608;
float _3609;
float _3610;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231;
    float _232;
    float _233;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
    }
    else
    {
        _231 = _217;
        _232 = _218;
        _233 = _219;
    }
    float _278 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _288 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _278);
    float _289 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _278);
    float _290 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _278);
    uvec4 _294 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _296 = _294.z != 0u;
    vec4 _317 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _320 = _317.x;
    float _321 = _317.y;
    float _322 = _317.z;
    bool _343 = _294.x != 0u;
    vec4 _362 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _364 = _362.x;
    float _365 = _362.y;
    float _366 = _362.z;
    float _383 = _343 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[9u].w - _364)) + _364) : (_364 * cbMtdParam._m0[9u].w);
    float _384 = _343 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[10u].x - _365)) + _365) : (_365 * cbMtdParam._m0[10u].x);
    float _385 = _343 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[10u].y - _366)) + _366) : (_366 * cbMtdParam._m0[10u].y);
    bool _387 = _294.y != 0u;
    vec4 _403 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _405 = _403.x;
    float _406 = _403.y;
    float _407 = _403.z;
    vec4 _435 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    float _446 = ((cbMtdParam._m0[14u].y * (-1.39999997615814208984375)) * (1.0 - _437)) + 1.0;
    float _3619 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _451 = (cbMtdParam._m0[13u].w * ((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) - _437)) + _437;
    float _458 = (_451 * ((_387 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[10u].w - _405)) + _405) : (_405 * cbMtdParam._m0[10u].w)) - _383)) + _383;
    float _459 = (_451 * ((_387 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[11u].x - _406)) + _406) : (_406 * cbMtdParam._m0[11u].x)) - _384)) + _384;
    float _460 = (_451 * ((_387 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[11u].y - _407)) + _407) : (_407 * cbMtdParam._m0[11u].y)) - _385)) + _385;
    float _464 = (((1.0 - _438) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].x) + 1.0;
    float _3630 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _469 = (cbMtdParam._m0[12u].w * ((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) - _438)) + _438;
    float _476 = (_469 * ((_296 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[11u].w - _320)) + _320) : (_320 * cbMtdParam._m0[11u].w)) - _458)) + _458;
    float _477 = (_469 * ((_296 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[12u].x - _321)) + _321) : (_321 * cbMtdParam._m0[12u].x)) - _459)) + _459;
    float _478 = (_469 * ((_296 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[12u].y - _322)) + _322) : (_322 * cbMtdParam._m0[12u].y)) - _460)) + _460;
    vec4 _490 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _511 = cbMtdParam._m0[13u].z * _507.x;
    float _518 = (_511 * (_490.x - _476)) + _476;
    float _519 = (_511 * (_490.y - _477)) + _477;
    float _520 = (_511 * (_490.z - _478)) + _478;
    float _524 = inversesqrt(dot(vec3(_288, _289, _290), vec3(_288, _289, _290)));
    float _525 = _524 * _288;
    float _526 = _524 * _289;
    float _527 = _524 * _290;
    float _528 = dot(vec4(_525, _526, _527, 0.0), vec4(_231, _232, _233, 0.0));
    float _3641 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _534 = exp2(log2(1.0 - (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))));
    float _537 = (_534 * 0.680000007152557373046875) + 0.119999997317790985107421875;
    float _557 = (_537 * ((0.048556677997112274169921875 - _518) + (_534 * 0.275154531002044677734375))) + _518;
    float _558 = (_537 * ((0.079126082360744476318359375 - _519) + (_534 * 0.448381125926971435546875))) + _519;
    float _559 = (_537 * ((0.1159258782863616943359375 - _520) + (_534 * 0.656913340091705322265625))) + _520;
    vec4 _571 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _588 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _590 = _588.x;
    float _591 = _588.y;
    float _592 = _588.z;
    float _599 = ((_571.x - _590) * _451) + _590;
    float _600 = ((_571.y - _591) * _451) + _591;
    float _601 = ((_571.z - _592) * _451) + _592;
    vec4 _613 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _639 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _651 = (((_613.x - _599) * _469) + _599) + ((_639.x + (-0.5)) * cbMtdParam._m0[14u].z);
    float _652 = (((_613.y - _600) * _469) + _600) + ((_639.y + (-0.5)) * cbMtdParam._m0[14u].z);
    float _653 = (((_613.z - _601) * _469) + _601) + ((_639.z + (-0.5)) * cbMtdParam._m0[14u].z);
    vec4 _666 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _677 = ((_666.x - _651) * _511) + _651;
    float _678 = ((_666.y - _652) * _511) + _652;
    float _679 = ((_666.z - _653) * _511) + _653;
    float _689 = ((1.0 - _679) * _537) + _679;
    float _693 = ((((0.502016007900238037109375 - _677) * _537) + _677) * 2.0) + (-1.0);
    float _695 = ((((0.502016007900238037109375 - _678) * _537) + _678) * 2.0) + (-1.0);
    float _696 = dot(vec2(_693, _695), vec2(_693, _695));
    float _3652 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _701 = sqrt(1.0 - (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))));
    float _704 = fma(_701, _231, fma(_695, _223 * TANGENT.x, (_209 * _202) * _693));
    float _707 = fma(_701, _232, fma(_695, _223 * TANGENT.y, (_209 * _203) * _693));
    float _710 = fma(_701, _233, fma(_695, _223 * TANGENT.z, (_209 * _204) * _693));
    float _714 = inversesqrt(dot(vec3(_704, _707, _710), vec3(_704, _707, _710)));
    float _715 = _714 * _704;
    float _716 = _714 * _707;
    float _717 = _714 * _710;
    float _3663 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _718 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _3685 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3696 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _736 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _741 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _743 = _741.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _897 = sqrt(((_288 * _288) + (_289 * _289)) + (_290 * _290));
        float _903 = (cbMatDynParam._m0[5u].x * _897) + cbMatDynParam._m0[5u].y;
        float _3707 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _908 = (cbMatDynParam._m0[5u].z * _897) + cbMatDynParam._m0[5u].w;
        float _3718 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) - _904)) + _904) < ((_743 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _754 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _755 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _773 = fma(_717, cbSceneParam._m0[5u].z, fma(_716, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _715));
    float _776 = fma(_717, cbSceneParam._m0[6u].z, fma(_716, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _715));
    float _779 = fma(_717, cbSceneParam._m0[7u].z, fma(_716, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _715));
    uint _792 = uint(roundEven(NORMAL.w)) * 13u;
    uint _793 = _792 + 9u;
    uint _794 = _793 + uint(cbMatDynParam._m0[0u].w);
    float _800 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * cbInstanceData._m0[_794].x;
    float _801 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) * cbInstanceData._m0[_794].y;
    float _802 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * cbInstanceData._m0[_794].z;
    float _3729 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    vec4 _814 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _754, cbSceneParam._m0[86u].y * _755));
    float _817 = _814.x * TEXCOORD.z;
    float _818 = dot(vec3(_715, _716, _717), vec3(_525, _526, _527));
    float _821 = _818 * 2.0;
    float _825 = (_821 * _715) - _525;
    float _826 = (_821 * _716) - _526;
    float _827 = (_821 * _717) - _527;
    float _831 = abs(dot(vec3(_525, _526, _527), vec3(_715, _716, _717)));
    float _3762 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _833 = sqrt(_718);
    float _846 = exp2((_833 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_833 * 3.0));
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1216;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _942 = fma(_886, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _878));
        float _946 = fma(_886, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _878));
        float _950 = fma(_886, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _878));
        float _974 = _878 + _715;
        float _975 = _882 + _716;
        float _976 = _886 + _717;
        float _986 = fma(_976, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974)) - _942;
        float _987 = fma(_976, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974)) - _946;
        float _988 = fma(_976, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974)) - _950;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_942 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_946 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[34u].z) + ((((((_950 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1044 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1010.x + (-0.5));
        float _1046 = _1044 * (_1010.y + (-0.5));
        float _1047 = _1044 * (_1010.z + (-0.5));
        float _1054 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1017.x + (-0.5));
        float _1056 = _1054 * (_1017.y + (-0.5));
        float _1057 = _1054 * (_1017.z + (-0.5));
        float _1064 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1024.x + (-0.5));
        float _1066 = _1064 * (_1024.y + (-0.5));
        float _1067 = _1064 * (_1024.z + (-0.5));
        float _1074 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1031.x + (-0.5));
        float _1076 = _1074 * (_1031.y + (-0.5));
        float _1077 = _1074 * (_1031.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1098 = (dot(vec3(_715, _716, _717), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1108 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3810 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1110 + 1.0))) + _1115) * _1078;
        float _1125 = _1046 * 0.5;
        float _1126 = _1056 * 0.5;
        float _1127 = _1066 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_715, _716, _717), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3843 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1152 + 1.0))) + _1157) * _1079;
        float _1167 = _1047 * 0.5;
        float _1168 = _1057 * 0.5;
        float _1169 = _1067 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_715, _716, _717), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3876 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1194 + 1.0))) + _1199) * _1080;
        _1216 = _1047;
        _1218 = _1046;
        _1219 = _1045;
        _1220 = _1057;
        _1221 = _1056;
        _1222 = _1055;
        _1223 = _1067;
        _1224 = _1066;
        _1225 = _1065;
        _1226 = _1080;
        _1227 = _1079;
        _1228 = _1078;
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _1217;
        _1218 = _1217;
        _1219 = _1217;
        _1220 = _1217;
        _1221 = _1217;
        _1222 = _1217;
        _1223 = _1217;
        _1224 = _1217;
        _1225 = _1217;
        _1226 = _1217;
        _1227 = _1217;
        _1228 = _1217;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
    }
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1260 = fma(_886, cbModelParam._m0[30u].z, fma(_882, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _878));
        float _1264 = fma(_886, cbModelParam._m0[31u].z, fma(_882, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _878));
        float _1268 = fma(_886, cbModelParam._m0[32u].z, fma(_882, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _878));
        float _1291 = _878 + _715;
        float _1292 = _882 + _716;
        float _1293 = _886 + _717;
        float _1303 = fma(_1293, cbModelParam._m0[30u].z, fma(_1292, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1291)) - _1260;
        float _1304 = fma(_1293, cbModelParam._m0[31u].z, fma(_1292, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1291)) - _1264;
        float _1305 = fma(_1293, cbModelParam._m0[32u].z, fma(_1292, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1291)) - _1268;
        float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
        float _1322 = ((_1309 * _1303) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1260 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1309 * _1304) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1264 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1309 * _1305) / cbModelParam._m0[35u].z) + ((((((_1268 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1359 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1326.x + (-0.5));
        float _1361 = _1359 * (_1326.y + (-0.5));
        float _1362 = _1359 * (_1326.z + (-0.5));
        float _1369 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1333.x + (-0.5));
        float _1371 = _1369 * (_1333.y + (-0.5));
        float _1372 = _1369 * (_1333.z + (-0.5));
        float _1379 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1340.x + (-0.5));
        float _1381 = _1379 * (_1340.y + (-0.5));
        float _1382 = _1379 * (_1340.z + (-0.5));
        float _1389 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1347.x + (-0.5));
        float _1391 = _1389 * (_1347.y + (-0.5));
        float _1392 = _1389 * (_1347.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_715, _716, _717), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _3939 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1423 + 1.0))) + _1428) * _1393;
        float _1438 = _1361 * 0.5;
        float _1439 = _1371 * 0.5;
        float _1440 = _1381 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_715, _716, _717), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _3972 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1465 + 1.0))) + _1470) * _1394;
        float _1480 = _1362 * 0.5;
        float _1481 = _1372 * 0.5;
        float _1482 = _1382 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_715, _716, _717), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4005 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1507 + 1.0))) + _1512) * _1395;
        _1529 = _1362;
        _1530 = _1361;
        _1531 = _1360;
        _1532 = _1372;
        _1533 = _1371;
        _1534 = _1370;
        _1535 = _1382;
        _1536 = _1381;
        _1537 = _1380;
        _1538 = _1395;
        _1539 = _1394;
        _1540 = _1393;
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1217;
        _1530 = _1217;
        _1531 = _1217;
        _1532 = _1217;
        _1533 = _1217;
        _1534 = _1217;
        _1535 = _1217;
        _1536 = _1217;
        _1537 = _1217;
        _1538 = _1217;
        _1539 = _1217;
        _1540 = _1217;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1229)) + _1229;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1230)) + _1230;
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1231)) + _1231;
    float _1576 = fma(_1555, cbSceneParam._m0[89u].z, fma(_1554, cbSceneParam._m0[89u].y, _1553 * cbSceneParam._m0[89u].x));
    float _1579 = fma(_1555, cbSceneParam._m0[90u].z, fma(_1554, cbSceneParam._m0[90u].y, _1553 * cbSceneParam._m0[90u].x));
    float _1582 = fma(_1555, cbSceneParam._m0[91u].z, fma(_1554, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1553));
    float _1597 = _825 * 0.5;
    float _1598 = _826 * 0.5;
    float _1599 = _827 * 0.5;
    float _1600 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1603 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1606 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1640;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1613 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1216, _1220, _1223, _1226));
        float _1617 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1621 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1628 = dot(vec4(cbModelParam._m0[39u]), vec4(_1597, _1598, _1599, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1651;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1642 = dot(vec4(cbModelParam._m0[40u]), vec4(_1597, _1598, _1599, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1655 = (_1651 * cbModelParam._m0[1u].x) + (_1640 * (1.0 - cbModelParam._m0[1u].x));
    float _1665 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _718);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1665 : min(cbModelParam._m0[25u].z, _1665));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1713 = fma(_886, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878)) + cbModelParam._m0[13u].w;
        float _1717 = fma(_886, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878)) + cbModelParam._m0[14u].w;
        float _1721 = fma(_886, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878)) + cbModelParam._m0[15u].w;
        float _1724 = fma(_827, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825));
        float _1727 = fma(_827, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825));
        float _1730 = fma(_827, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825));
        float _1758;
        if (_1724 > 0.0)
        {
            _1758 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1758 = frontier_phi_19_17_ladder;
        }
        float _1983;
        if (_1727 > 0.0)
        {
            _1983 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1983 = frontier_phi_28_24_ladder;
        }
        float _2229;
        if (_1730 > 0.0)
        {
            _2229 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2229 = frontier_phi_40_35_ladder;
        }
        float _2231 = isnan(_1983) ? _1758 : (isnan(_1758) ? _1983 : min(_1758, _1983));
        float _2232 = isnan(_2229) ? _2231 : (isnan(_2231) ? _2229 : min(_2231, _2229));
        float _2236 = (_2232 * _1724) + _1713;
        float _2237 = (_2232 * _1727) + _1717;
        float _2238 = (_2232 * _1730) + _1721;
        float _2239 = _2232 * 9.9999997473787516355514526367188e-05;
        float _2241 = (-1.0) - _2239;
        float _2243 = _2239 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2238 > _2243) || ((_2238 < _2241) || ((_2237 > _2243) || ((_2237 < _2241) || ((_2236 < _2241) || (_2236 > _2243))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2238, cbModelParam._m0[9u].z, fma(_2237, cbModelParam._m0[9u].y, _2236 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2238, cbModelParam._m0[10u].z, fma(_2237, cbModelParam._m0[10u].y, _2236 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2238, cbModelParam._m0[11u].z, fma(_2237, cbModelParam._m0[11u].y, _2236 * cbModelParam._m0[11u].x))), _1666);
            frontier_phi_18_40_ladder = _2362.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2362.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2362.x * cbModelParam._m0[1u].y;
        }
        _1746 = frontier_phi_18_40_ladder_2;
        _1748 = frontier_phi_18_40_ladder_1;
        _1750 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_825, _826, _827), _1666);
        _1746 = _1734.x * cbModelParam._m0[1u].y;
        _1748 = _1734.y * cbModelParam._m0[1u].y;
        _1750 = _1734.z * cbModelParam._m0[1u].y;
    }
    float _1754 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _718);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1754 : min(cbModelParam._m0[25u].w, _1754));
    float _1848;
    float _1850;
    float _1852;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1812 = fma(_886, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878)) + cbModelParam._m0[21u].w;
        float _1816 = fma(_886, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878)) + cbModelParam._m0[22u].w;
        float _1820 = fma(_886, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878)) + cbModelParam._m0[23u].w;
        float _1823 = fma(_827, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825));
        float _1826 = fma(_827, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825));
        float _1829 = fma(_827, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825));
        float _1988;
        if (_1823 > 0.0)
        {
            _1988 = abs((1.0 - _1812) / _1823);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1812 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1988 = frontier_phi_30_26_ladder;
        }
        float _2256;
        if (_1826 > 0.0)
        {
            _2256 = abs((1.0 - _1816) / _1826);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1816 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2256 = frontier_phi_42_37_ladder;
        }
        float _2461;
        if (_1829 > 0.0)
        {
            _2461 = abs((1.0 - _1820) / _1829);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1820 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2461 = frontier_phi_51_48_ladder;
        }
        float _2463 = isnan(_2256) ? _1988 : (isnan(_1988) ? _2256 : min(_1988, _2256));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1823) + _1812;
        float _2469 = (_2464 * _1826) + _1816;
        float _2470 = (_2464 * _1829) + _1820;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2472 = (-1.0) - _2471;
        float _2474 = _2471 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2470 > _2474) || ((_2470 < _2472) || ((_2469 > _2474) || ((_2469 < _2472) || ((_2468 < _2472) || (_2468 > _2474))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2470, cbModelParam._m0[17u].z, fma(_2469, cbModelParam._m0[17u].y, _2468 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2470, cbModelParam._m0[18u].z, fma(_2469, cbModelParam._m0[18u].y, _2468 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2470, cbModelParam._m0[19u].z, fma(_2469, cbModelParam._m0[19u].y, _2468 * cbModelParam._m0[19u].x))), _1755);
            frontier_phi_27_51_ladder = _2668.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2668.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2668.x * cbModelParam._m0[1u].z;
        }
        _1848 = frontier_phi_27_51_ladder_2;
        _1850 = frontier_phi_27_51_ladder_1;
        _1852 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_825, _826, _827), _1755);
        _1848 = _1832.x * cbModelParam._m0[1u].z;
        _1850 = _1832.y * cbModelParam._m0[1u].z;
        _1852 = _1832.z * cbModelParam._m0[1u].z;
    }
    float _1864 = ((((1.0 - _846) * ((_833 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_846 * _833)) * _817;
    float _1865 = _1864 * ((cbModelParam._m0[1u].w * (_1848 - _1746)) + _1746);
    float _1866 = _1864 * ((cbModelParam._m0[1u].w * (_1850 - _1748)) + _1748);
    float _1867 = _1864 * ((cbModelParam._m0[1u].w * (_1852 - _1750)) + _1750);
    float _1870 = fma(_1867, cbSceneParam._m0[89u].z, fma(_1866, cbSceneParam._m0[89u].y, _1865 * cbSceneParam._m0[89u].x));
    float _1873 = fma(_1867, cbSceneParam._m0[90u].z, fma(_1866, cbSceneParam._m0[90u].y, _1865 * cbSceneParam._m0[90u].x));
    float _1876 = fma(_1867, cbSceneParam._m0[91u].z, fma(_1866, cbSceneParam._m0[91u].y, _1865 * cbSceneParam._m0[91u].x));
    vec4 _1884 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_754, _755));
    float _1886 = _1884.w;
    float _1898 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1886);
    float _1899 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1886);
    float _1900 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1886);
    uvec4 _1904 = floatBitsToUint(cbInstanceData._m0[_792 + 5u]);
    uint _1906 = _1904.x * 14u;
    uint _1907 = _1906 + 13u;
    float _1914 = _817 + (-1.0);
    float _1919 = (cbLight._m0[_1907].x * _1914) + 1.0;
    float _1920 = (cbLight._m0[_1907].y * _1914) + 1.0;
    float _1921 = (cbLight._m0[_1907].z * _1914) + 1.0;
    float _1922 = (cbLight._m0[_1907].w * _1914) + 1.0;
    uint _1923 = _1906 + 5u;
    float _1929 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
    uint _1933 = _1906 + 4u;
    float _1942 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1946 = _1906 | 1u;
    float _1957 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_715, _716, _717));
    float _1960 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_715, _716, _717));
    float _4141 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _4152 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1965 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 0.3183098733425140380859375;
    float _1967 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * 0.3183098733425140380859375;
    float _1974 = ((cbLight._m0[_1923].x * _1929) * _1967) + (((cbLight._m0[_1933].x * _1898) * _1942) * _1965);
    float _1975 = ((_1929 * cbLight._m0[_1923].y) * _1967) + (((cbLight._m0[_1933].y * _1899) * _1942) * _1965);
    float _1976 = ((_1929 * cbLight._m0[_1923].z) * _1967) + (((cbLight._m0[_1933].z * _1900) * _1942) * _1965);
    uvec4 _1980 = floatBitsToUint(cbLight._m0[_1906 + 12u]);
    bool _1982 = _1980.x == 0u;
    float _1993;
    float _1995;
    float _1997;
    if (_1982)
    {
        _1993 = _1974;
        _1995 = _1975;
        _1997 = _1976;
    }
    else
    {
        uint _2001 = _1906 + 6u;
        float _2017 = (dot(vec3(cbLight._m0[_1906 + 2u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2018 = _2017 * _2017;
        float _4163 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2019 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2020 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _1993 = (((cbLight._m0[_2001].x * 0.3183098733425140380859375) * _2019) * _2020) + _1974;
        _1995 = (((cbLight._m0[_2001].y * 0.3183098733425140380859375) * _2019) * _2020) + _1975;
        _1997 = (((cbLight._m0[_2001].z * 0.3183098733425140380859375) * _2019) * _2020) + _1976;
    }
    bool _2000 = _1980.y == 0u;
    float _2038;
    float _2040;
    float _2042;
    if (_2000)
    {
        _2038 = _1993;
        _2040 = _1995;
        _2042 = _1997;
    }
    else
    {
        uint _2200 = _1906 + 7u;
        float _2216 = (dot(vec3(cbLight._m0[_1906 + 3u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2217 = _2216 * _2216;
        float _4179 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2218 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2219 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _2038 = (((cbLight._m0[_2200].x * 0.3183098733425140380859375) * _2218) * _2219) + _1993;
        _2040 = (((cbLight._m0[_2200].y * 0.3183098733425140380859375) * _2218) * _2219) + _1995;
        _2042 = (((cbLight._m0[_2200].z * 0.3183098733425140380859375) * _2218) * _2219) + _1997;
    }
    uint _2045 = _1906 + 8u;
    float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1906].w)) * _718) * 0.949999988079071044921875);
    float _2059 = _2058 * _2058;
    float _2060 = cbLight._m0[_1906].x + _525;
    float _2061 = cbLight._m0[_1906].y + _526;
    float _2062 = cbLight._m0[_1906].z + _527;
    float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
    float _2067 = _2066 * _2060;
    float _2068 = _2066 * _2061;
    float _2069 = _2066 * _2062;
    float _2070 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_1906].xyz));
    float _4195 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _4206 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _2074 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2075 = dot(vec3(_715, _716, _717), vec3(_2067, _2068, _2069));
    float _4217 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2079 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_2067, _2068, _2069));
    float _4228 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2083 = _2059 * _2059;
    float _2087 = ((_2078 * _2078) * (_2083 + (-1.0))) + 1.0;
    float _2098 = (exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2099 = 1.0 - _2059;
    float _2110 = (0.5 / (((_2074 * ((_2073 * _2099) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2099) + _2059) * _2073))) * _2073;
    float _4239 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2112 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2083 / ((_2087 * _2087) * 3.141590118408203125));
    uint _2126 = _1906 + 9u;
    float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _718) * 0.949999988079071044921875);
    float _2138 = _2137 * _2137;
    float _2139 = cbLight._m0[_1946].x + _525;
    float _2140 = cbLight._m0[_1946].y + _526;
    float _2141 = cbLight._m0[_1946].z + _527;
    float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
    float _2146 = _2145 * _2139;
    float _2147 = _2145 * _2140;
    float _2148 = _2145 * _2141;
    float _2149 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_1946].xyz));
    float _4250 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2153 = dot(vec3(_715, _716, _717), vec3(_2146, _2147, _2148));
    float _4261 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2157 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_2146, _2147, _2148));
    float _4272 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2161 = _2138 * _2138;
    float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
    float _2174 = (exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2175 = 1.0 - _2138;
    float _2185 = (0.5 / (((_2074 * ((_2152 * _2175) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2175) + _2138) * _2152))) * _2152;
    float _4283 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2187 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
    float _2197 = (((_2174 * cbLight._m0[_2126].x) * _2187) * _1929) + ((((cbLight._m0[_2045].x * _1898) * _2098) * _2112) * _1942);
    float _2198 = (((_2174 * cbLight._m0[_2126].y) * _2187) * _1929) + ((((cbLight._m0[_2045].y * _1899) * _2098) * _2112) * _1942);
    float _2199 = (((_2174 * cbLight._m0[_2126].z) * _2187) * _1929) + ((((cbLight._m0[_2045].z * _1900) * _2098) * _2112) * _1942);
    float _2261;
    float _2263;
    float _2265;
    if (_1982)
    {
        _2261 = _2197;
        _2263 = _2198;
        _2265 = _2199;
    }
    else
    {
        uint _2267 = _1906 + 2u;
        uint _2271 = _1906 + 10u;
        float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _718) * 0.949999988079071044921875);
        float _2286 = _2285 * _2285;
        float _2287 = cbLight._m0[_2267].x + _525;
        float _2288 = cbLight._m0[_2267].y + _526;
        float _2289 = cbLight._m0[_2267].z + _527;
        float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
        float _2294 = _2293 * _2287;
        float _2295 = _2293 * _2288;
        float _2296 = _2293 * _2289;
        float _2297 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2267].xyz));
        float _4294 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2301 = dot(vec3(_715, _716, _717), vec3(_2294, _2295, _2296));
        float _4305 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2305 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2294, _2295, _2296));
        float _4316 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2309 = _2286 * _2286;
        float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
        float _2322 = (exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2323 = 1.0 - _2286;
        float _2333 = (0.5 / (((_2074 * ((_2300 * _2323) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2323) + _2286) * _2300))) * _2300;
        float _4327 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2261 = (((_2322 * cbLight._m0[_2271].x) * _2335) * _2336) + _2197;
        _2263 = (((_2322 * cbLight._m0[_2271].y) * _2335) * _2336) + _2198;
        _2265 = (((_2322 * cbLight._m0[_2271].z) * _2335) * _2336) + _2199;
    }
    float _2371;
    float _2373;
    float _2375;
    if (_2000)
    {
        _2371 = _2261;
        _2373 = _2263;
        _2375 = _2265;
    }
    else
    {
        uint _2382 = _1906 + 3u;
        uint _2386 = _1906 + 11u;
        float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _718) * 0.949999988079071044921875);
        float _2401 = _2400 * _2400;
        float _2402 = cbLight._m0[_2382].x + _525;
        float _2403 = cbLight._m0[_2382].y + _526;
        float _2404 = cbLight._m0[_2382].z + _527;
        float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
        float _2409 = _2408 * _2402;
        float _2410 = _2408 * _2403;
        float _2411 = _2408 * _2404;
        float _2412 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2382].xyz));
        float _4343 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2416 = dot(vec3(_715, _716, _717), vec3(_2409, _2410, _2411));
        float _4354 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2420 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2409, _2410, _2411));
        float _4365 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2424 = _2401 * _2401;
        float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
        float _2437 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2438 = 1.0 - _2401;
        float _2448 = (0.5 / (((_2074 * ((_2415 * _2438) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2438) + _2401) * _2415))) * _2415;
        float _4376 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2450 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
        float _2451 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _2371 = (((_2437 * cbLight._m0[_2386].x) * _2450) * _2451) + _2261;
        _2373 = (((_2437 * cbLight._m0[_2386].y) * _2450) * _2451) + _2263;
        _2375 = (((_2437 * cbLight._m0[_2386].z) * _2450) * _2451) + _2265;
    }
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    if (_1904.y == 0u)
    {
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2526;
        float _2528 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2526;
        float _2529 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2526;
        uvec4 _2541 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2542 = _2541.x;
        uint _2553 = uint((float(_2541.y) * floor(float(uint(cbSceneParam._m0[85u].y * _755) / _2542))) + floor(float(uint(cbSceneParam._m0[85u].x * _754) / _2542)));
        float _2563 = (log2(_2529 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2564 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        uint _2567 = uint(isnan(14.0) ? _2564 : (isnan(_2564) ? 14.0 : min(_2564, 14.0)));
        uvec4 _2572 = texelFetch(g_lightClusterGridBuffer, int(((_2567 << 2u) + (_2553 << 6u)) >> 2u));
        uint _2573 = _2572.x;
        uint _2574 = _2541.z;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        if (((((1u << ((_2574 >> 4u) & 15u)) + 4294967295u) & _2573) == 0u) || ((_2574 & 240u) == 0u))
        {
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
        }
        else
        {
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            uint _2831 = 0u;
            uint _2840;
            bool _2841;
            for (;;)
            {
                _2840 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2831 << 2u)) >> 2u)).x;
                _2841 = _2840 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2841)
                {
                    frontier_phi_68_pred = _2827;
                    frontier_phi_68_pred_1 = _2830;
                    frontier_phi_68_pred_2 = _2829;
                    frontier_phi_68_pred_3 = _2828;
                    frontier_phi_68_pred_4 = _2826;
                    frontier_phi_68_pred_5 = _2825;
                }
                else
                {
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    uint _2976;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2840;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    for (;;)
                    {
                        uint _2980 = uint(findLSB(_2976)) + (_2831 << 5u);
                        uint _2977 = (_2976 + 4294967295u) & _2976;
                        uint _2982 = _2980 * 48u;
                        vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 3u)).x));
                        uint _3002 = (_2980 * 48u) + 4u;
                        vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 3u)).x));
                        uint _3021 = (_2980 * 48u) + 8u;
                        vec3 _3032 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x));
                        float _3036 = _2996.x - _2527;
                        float _3037 = _2996.y - _2528;
                        float _3038 = _2996.z - _2529;
                        float _3039 = dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038));
                        float _3042 = inversesqrt(_3039);
                        float _3043 = _3042 * _3036;
                        float _3044 = _3042 * _3037;
                        float _3045 = _3042 * _3038;
                        float _3046 = dot(vec3(_773, _776, _779), vec3(_3043, _3044, _3045));
                        float _3051 = 1.0 - (_3039 * _2996.w);
                        float _4402 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3052 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3053 = sqrt(_3039) * _3015.w;
                        float _3056 = 1.39999997615814208984375 / (_3053 + 1.39999997615814208984375);
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _3046) + _3057;
                        float _3063 = _3053 * _3053;
                        float _3067 = ((isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))) * _3052) / ((_3063 * 0.699999988079071044921875) + 1.0);
                        float _3071 = (-0.0) - _2527;
                        float _3072 = (-0.0) - _2528;
                        float _3073 = (-0.0) - _2529;
                        float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3088 = exp2(log2(1.0 / ((_3063 * 3.5) + 5.0)) * 0.25);
                        float _3089 = 1.0 - _833;
                        float _3096 = sqrt(1.0 - ((1.0 - (_3089 * _3089)) * (1.0 - (_3088 * _3088))));
                        float _3097 = _3096 * _3096;
                        float _3098 = _3097 * _3097;
                        float _3099 = _3078 + _3043;
                        float _3100 = _3079 + _3044;
                        float _3101 = _3080 + _3045;
                        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                        float _3109 = dot(vec3(_773, _776, _779), vec3(_3078, _3079, _3080));
                        float _4418 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3112 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3113 = dot(vec3(_773, _776, _779), vec3(_3105 * _3099, _3105 * _3100, _3105 * _3101));
                        float _4429 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3116 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3120 = ((_3116 * _3116) * (_3098 + (-1.0))) + 1.0;
                        float _3121 = _3056 * _3097;
                        float _3122 = _3121 * _3121;
                        float _3125 = ((1.0 - _3122) * _3046) + _3122;
                        float _4440 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3126 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                        float _3127 = 1.0 - _3097;
                        float _3137 = (0.5 / (((_3126 * ((_3112 * _3127) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_3126 * _3127) + _3097) * _3112))) * _3126;
                        float _4451 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3148 = (((_3098 * 3.1415927410125732421875) * (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) / ((_3120 * _3120) * ((_3063 * 2.1991131305694580078125) + 3.141590118408203125))) * _3052;
                        _2900 = (_3067 * _3015.x) + _2973;
                        _2901 = (_3067 * _3015.y) + _2974;
                        _2902 = (_3067 * _3015.z) + _2975;
                        _2897 = (_3148 * _3032.x) + _2970;
                        _2898 = (_3148 * _3032.y) + _2971;
                        _2899 = (_3148 * _3032.z) + _2972;
                        if (_2977 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2977;
                        }
                    }
                    frontier_phi_68_pred = _2899;
                    frontier_phi_68_pred_1 = _2902;
                    frontier_phi_68_pred_2 = _2901;
                    frontier_phi_68_pred_3 = _2900;
                    frontier_phi_68_pred_4 = _2898;
                    frontier_phi_68_pred_5 = _2897;
                }
                _2678 = frontier_phi_68_pred;
                _2684 = frontier_phi_68_pred_1;
                _2682 = frontier_phi_68_pred_2;
                _2680 = frontier_phi_68_pred_3;
                _2676 = frontier_phi_68_pred_4;
                _2674 = frontier_phi_68_pred_5;
                uint _2832 = _2831 + 1u;
                if (_2832 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2825 = _2674;
                    _2826 = _2676;
                    _2827 = _2678;
                    _2828 = _2680;
                    _2829 = _2682;
                    _2830 = _2684;
                    _2831 = _2832;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
        }
        uvec4 _2687 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2688 = _2687.z;
        uint _2690 = (_2688 >> 8u) & 15u;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        if (((4294967295u << _2690) & _2573) == 0u)
        {
            _2793 = _2673;
            _2795 = _2675;
            _2797 = _2677;
            _2799 = _2679;
            _2801 = _2681;
            _2803 = _2683;
        }
        else
        {
            float _2818 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
            float _2819 = _2818 * _2527;
            float _2820 = _2818 * _2528;
            float _2821 = _2818 * _2529;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2690 < ((_2688 >> 12u) & 15u))
            {
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2953 = _2673;
                float _2954 = _2675;
                float _2955 = _2677;
                float _2956 = _2679;
                float _2957 = _2681;
                float _2958 = _2683;
                uint _2959 = _2690;
                uint _2968;
                bool _2969;
                for (;;)
                {
                    _2968 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2959 << 2u)) >> 2u)).x;
                    _2969 = _2968 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2969)
                    {
                        frontier_phi_79_pred = _2958;
                        frontier_phi_79_pred_1 = _2957;
                        frontier_phi_79_pred_2 = _2956;
                        frontier_phi_79_pred_3 = _2955;
                        frontier_phi_79_pred_4 = _2954;
                        frontier_phi_79_pred_5 = _2953;
                    }
                    else
                    {
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3175 = _2953;
                        float _3176 = _2954;
                        float _3177 = _2955;
                        float _3178 = _2956;
                        float _3179 = _2957;
                        float _3180 = _2958;
                        uint _3181 = _2968;
                        uint _3182;
                        vec4 _3207;
                        float _3208;
                        vec4 _3223;
                        vec3 _3235;
                        vec4 _3251;
                        vec4 _3267;
                        float _3314;
                        bool _3315;
                        for (;;)
                        {
                            uint _3192 = ((_2959 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3181));
                            _3182 = (_3181 + 4294967295u) & _3181;
                            uint _3194 = _3192 * 40u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            _3208 = _3207.w;
                            uint _3210 = (_3192 * 40u) + 4u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3225 = (_3192 * 40u) + 8u;
                            _3235 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x));
                            uint _3238 = (_3192 * 40u) + 16u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3254 = (_3192 * 40u) + 20u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3270 = (_3192 * 40u) + 24u;
                            vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3289 = (_3192 * 40u) + 28u;
                            vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3314 = fma(_2529, _3302.z, fma(_2528, _3302.y, _3302.x * _2527)) + _3302.w;
                            _3315 = !((fma(_2529, _3283.z, fma(_2528, _3283.y, _3283.x * _2527)) + _3283.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3315)
                            {
                                float _3342 = _3207.x - _2527;
                                float _3343 = _3207.y - _2528;
                                float _3344 = _3207.z - _2529;
                                float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                                float _3348 = inversesqrt(_3345);
                                float _3349 = _3348 * _3342;
                                float _3350 = _3348 * _3343;
                                float _3351 = _3348 * _3344;
                                float _3355 = 1.0 - (_3345 / (_3208 * _3208));
                                float _4462 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3360 = sqrt(_3345) * _3223.w;
                                float _3362 = 1.39999997615814208984375 / (_3360 + 1.39999997615814208984375);
                                float _3363 = _3362 * _3362;
                                float _3366 = ((1.0 - _3363) * dot(vec3(_3349, _3350, _3351), vec3(_773, _776, _779))) + _3363;
                                float _3369 = _3360 * _3360;
                                float _3373 = (fma(_2529, _3251.z, fma(_2528, _3251.y, _3251.x * _2527)) + _3251.w) / _3314;
                                float _3374 = (fma(_2529, _3267.z, fma(_2528, _3267.y, _3267.x * _2527)) + _3267.w) / _3314;
                                float _3378 = 1.0 - dot(vec2(_3373, _3374), vec2(_3373, _3374));
                                float _4478 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3380 = _3379 * (((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3356) / ((_3369 * 0.699999988079071044921875) + 1.0));
                                float _3392 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                                float _3393 = 1.0 - _833;
                                float _3400 = sqrt(1.0 - ((1.0 - (_3393 * _3393)) * (1.0 - (_3392 * _3392))));
                                float _3401 = _3400 * _3400;
                                float _3402 = _3401 * _3401;
                                float _3403 = _3349 - _2819;
                                float _3404 = _3350 - _2820;
                                float _3405 = _3351 - _2821;
                                float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                                float _3413 = dot(vec3(_773, _776, _779), vec3((-0.0) - _2819, (-0.0) - _2820, (-0.0) - _2821));
                                float _4489 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3416 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3417 = dot(vec3(_773, _776, _779), vec3(_3409 * _3403, _3409 * _3404, _3409 * _3405));
                                float _4500 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3420 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3424 = ((_3420 * _3420) * (_3402 + (-1.0))) + 1.0;
                                float _3425 = _3362 * _3401;
                                float _3426 = _3425 * _3425;
                                float _3432 = ((1.0 - _3426) * dot(vec3(_773, _776, _779), vec3(_3349, _3350, _3351))) + _3426;
                                float _4511 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3434 = 1.0 - _3401;
                                float _3444 = (0.5 / (((_3433 * ((_3416 * _3434) + _3401)) + 9.9999999392252902907785028219223e-09) + (((_3433 * _3434) + _3401) * _3416))) * _3433;
                                float _4522 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3454 = (_3379 * _3356) * (((_3402 * 3.1415927410125732421875) * (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) / ((_3424 * _3424) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3380 * _3223.z;
                                frontier_phi_85_pred_1 = _3380 * _3223.y;
                                frontier_phi_85_pred_2 = _3380 * _3223.x;
                                frontier_phi_85_pred_3 = _3454 * _3235.z;
                                frontier_phi_85_pred_4 = _3454 * _3235.y;
                                frontier_phi_85_pred_5 = _3454 * _3235.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3463 = frontier_phi_85_pred;
                            _3462 = frontier_phi_85_pred_1;
                            _3461 = frontier_phi_85_pred_2;
                            _3460 = frontier_phi_85_pred_3;
                            _3459 = frontier_phi_85_pred_4;
                            _3458 = frontier_phi_85_pred_5;
                            _3165 = _3461 + _3178;
                            _3166 = _3462 + _3179;
                            _3167 = _3463 + _3180;
                            _3162 = _3458 + _3175;
                            _3163 = _3459 + _3176;
                            _3164 = _3460 + _3177;
                            if (_3182 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3182;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3167;
                        frontier_phi_79_pred_1 = _3166;
                        frontier_phi_79_pred_2 = _3165;
                        frontier_phi_79_pred_3 = _3164;
                        frontier_phi_79_pred_4 = _3163;
                        frontier_phi_79_pred_5 = _3162;
                    }
                    _2804 = frontier_phi_79_pred;
                    _2802 = frontier_phi_79_pred_1;
                    _2800 = frontier_phi_79_pred_2;
                    _2798 = frontier_phi_79_pred_3;
                    _2796 = frontier_phi_79_pred_4;
                    _2794 = frontier_phi_79_pred_5;
                    uint _2960 = _2959 + 1u;
                    if (_2960 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2953 = _2794;
                        _2954 = _2796;
                        _2955 = _2798;
                        _2956 = _2800;
                        _2957 = _2802;
                        _2958 = _2804;
                        _2959 = _2960;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2800;
                frontier_phi_60_61_ladder_1 = _2804;
                frontier_phi_60_61_ladder_2 = _2802;
                frontier_phi_60_61_ladder_3 = _2798;
                frontier_phi_60_61_ladder_4 = _2796;
                frontier_phi_60_61_ladder_5 = _2794;
            }
            else
            {
                frontier_phi_60_61_ladder = _2679;
                frontier_phi_60_61_ladder_1 = _2683;
                frontier_phi_60_61_ladder_2 = _2681;
                frontier_phi_60_61_ladder_3 = _2677;
                frontier_phi_60_61_ladder_4 = _2675;
                frontier_phi_60_61_ladder_5 = _2673;
            }
            _2793 = frontier_phi_60_61_ladder_5;
            _2795 = frontier_phi_60_61_ladder_4;
            _2797 = frontier_phi_60_61_ladder_3;
            _2799 = frontier_phi_60_61_ladder;
            _2801 = frontier_phi_60_61_ladder_2;
            _2803 = frontier_phi_60_61_ladder_1;
        }
        float _2808 = isnan(1.0) ? _817 : (isnan(_817) ? 1.0 : min(_817, 1.0));
        _2585 = (_2808 * _2799) + _2038;
        _2587 = (_2808 * _2801) + _2040;
        _2589 = (_2808 * _2803) + _2042;
        _2591 = ((_2793 * 0.039999999105930328369140625) * _2808) + _2371;
        _2593 = ((_2795 * 0.039999999105930328369140625) * _2808) + _2373;
        _2595 = ((_2797 * 0.039999999105930328369140625) * _2808) + _2375;
    }
    else
    {
        _2585 = _2038;
        _2587 = _2040;
        _2589 = _2042;
        _2591 = _2371;
        _2593 = _2373;
        _2595 = _2375;
    }
    float _4538 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4549 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4560 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2612 = ((isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2585 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _817))) + ((_2591 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    float _2613 = ((isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2587 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _817))) + ((_2593 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    float _2614 = ((isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2589 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _817))) + ((_2595 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    uint _2615 = _792 + 6u;
    float _2623 = _754 / cbSceneParam._m0[86u].x;
    float _2624 = _755 / cbSceneParam._m0[86u].y;
    vec4 _2638 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, (log2((isnan(cbSceneParam._m0[77u].w) ? _736 : (isnan(_736) ? cbSceneParam._m0[77u].w : min(_736, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2640 = _2638.x;
    float _2641 = _2638.y;
    float _2642 = _2638.z;
    float _2643 = _2638.w;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    if (_736 > cbSceneParam._m0[78u].w)
    {
        float _2698 = isnan(_736) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _736 : min(cbSceneParam._m0[80u].w, _736));
        float _2699 = _2698 / _736;
        float _2710 = _2699 * _288;
        float _2711 = _289 * _2699;
        float _2712 = (-0.0) - _2711;
        float _2713 = _2699 * _290;
        float _2715 = (cbSceneParam._m0[77u].w * _2712) / _2698;
        float _2716 = _2715 + cbSceneParam._m0[79u].w;
        float _2717 = cbSceneParam._m0[79u].w - _2711;
        float _2723 = sqrt(((_2710 * _2710) + (_2711 * _2711)) + (_2713 * _2713));
        float _2726 = (1.0 - (cbSceneParam._m0[77u].w / _2698)) * _2723;
        float _2731 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2733 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2910;
        if (abs((_2712 - _2715) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2910 = ((((_2716 > 0.0) ? exp2(_2731 * _2716) : (2.0 - exp2(_2733 * _2716))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2726;
        }
        else
        {
            float _2854 = 1.0 / cbSceneParam._m0[80u].x;
            float _2855 = isnan(_2717) ? _2716 : (isnan(_2716) ? _2717 : max(_2716, _2717));
            float _2856 = isnan(_2717) ? _2716 : (isnan(_2716) ? _2717 : min(_2716, _2717));
            float _2865 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : min(_2855, 0.0));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            _2910 = ((abs(_2723 / _2712) * cbSceneParam._m0[80u].y) * ((((_2865 - _2866) * 2.0) - ((exp2(_2731 * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0)))) - exp2(_2731 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0))))) * _2854)) - ((exp2(_2733 * _2865) - exp2(_2733 * _2866)) * _2854))) + (_2726 * cbSceneParam._m0[80u].z);
        }
        vec4 _2912 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, 1.0), 0.0);
        float _2921 = exp2((_2910 * (-1.44269502162933349609375)) * (1.0 - _2912.w));
        float _2922 = log2(_2921);
        float _2938 = log2(_2643);
        _2735 = (exp2(_2938 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].x)) * _2912.x) / cbSceneParam._m0[78u].x)) + _2640;
        _2737 = (exp2(_2938 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].y)) * _2912.y) / cbSceneParam._m0[78u].y)) + _2641;
        _2739 = (exp2(_2938 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].z)) * _2912.z) / cbSceneParam._m0[78u].z)) + _2642;
        _2741 = _2921 * _2643;
    }
    else
    {
        _2735 = _2640;
        _2737 = _2641;
        _2739 = _2642;
        _2741 = _2643;
    }
    bool _2948;
    vec4 _2751;
    vec4 _2773;
    float _2775;
    float _2779;
    float _2780;
    float _2781;
    float _2782;
    bool _2792;
    for (;;)
    {
        _2751 = cbMatDynParam._m0[0u];
        float _2753 = roundEven(_2751.y);
        bool _2754 = _2753 == 3.0;
        float _2755 = log2(_2741);
        float _2762 = exp2(_2755 * cbSceneParam._m0[78u].x) * _2612;
        float _2763 = exp2(_2755 * cbSceneParam._m0[78u].y) * _2613;
        float _2764 = exp2(_2755 * cbSceneParam._m0[78u].z) * _2614;
        float _2771 = _743 + (-0.5);
        _2773 = cbMtdParam._m0[1u];
        _2775 = _2773.y * _2771;
        float _2778 = (_2753 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2779 = _2778 * (_2754 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2735)));
        _2780 = _2778 * (_2754 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2737)));
        _2781 = _2778 * (_2754 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2739)));
        _2782 = _2771 * 0.999000012874603271484375;
        _2792 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2792)
        {
            if ((cbInstanceData._m0[_792 + 7u].x + _2782) < 0.5)
            {
                _2948 = true;
                break;
            }
        }
        uint _2889 = _793 + uint(_2751.w);
        if ((cbInstanceData._m0[_2889].w < 1.0) && ((cbInstanceData._m0[_2889].w + _2782) < 0.5))
        {
            _2948 = true;
            break;
        }
        if ((_2775 + 1.0) < _2773.x)
        {
            _2948 = true;
            break;
        }
        _2948 = false;
        break;
    }
    float _3153;
    if (_2948)
    {
        discard_state = true;
        _3153 = 0.0;
    }
    else
    {
        _3153 = cbInstanceData._m0[_2615].w;
    }
    SV_Target.x = _2779;
    SV_Target.y = _2780;
    SV_Target.z = _2781;
    SV_Target.w = _3153;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2615].w;
    discard_exit();
}


