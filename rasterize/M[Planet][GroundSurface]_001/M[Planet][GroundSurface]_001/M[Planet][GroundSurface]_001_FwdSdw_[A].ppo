#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_001_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1219;
float _3868;
float _3869;
float _3870;
float _3871;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    float _280 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _290 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _280);
    float _291 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _280);
    float _292 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _280);
    uvec4 _296 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _298 = _296.z != 0u;
    vec4 _319 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _322 = _319.x;
    float _323 = _319.y;
    float _324 = _319.z;
    bool _345 = _296.x != 0u;
    vec4 _364 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _366 = _364.x;
    float _367 = _364.y;
    float _368 = _364.z;
    float _385 = _345 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[9u].w - _366)) + _366) : (_366 * cbMtdParam._m0[9u].w);
    float _386 = _345 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[10u].x - _367)) + _367) : (_367 * cbMtdParam._m0[10u].x);
    float _387 = _345 ? ((cbMtdParam._m0[14u].w * (cbMtdParam._m0[10u].y - _368)) + _368) : (_368 * cbMtdParam._m0[10u].y);
    bool _389 = _296.y != 0u;
    vec4 _405 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _407 = _405.x;
    float _408 = _405.y;
    float _409 = _405.z;
    vec4 _437 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _439 = _437.x;
    float _440 = _437.y;
    float _448 = ((cbMtdParam._m0[14u].y * (-1.39999997615814208984375)) * (1.0 - _439)) + 1.0;
    float _3880 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _453 = (cbMtdParam._m0[13u].w * ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) - _439)) + _439;
    float _460 = (_453 * ((_389 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[10u].w - _407)) + _407) : (_407 * cbMtdParam._m0[10u].w)) - _385)) + _385;
    float _461 = (_453 * ((_389 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[11u].x - _408)) + _408) : (_408 * cbMtdParam._m0[11u].x)) - _386)) + _386;
    float _462 = (_453 * ((_389 ? ((cbMtdParam._m0[13u].x * (cbMtdParam._m0[11u].y - _409)) + _409) : (_409 * cbMtdParam._m0[11u].y)) - _387)) + _387;
    float _466 = (((1.0 - _440) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].x) + 1.0;
    float _3891 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = (cbMtdParam._m0[12u].w * ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) - _440)) + _440;
    float _478 = (_471 * ((_298 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[11u].w - _322)) + _322) : (_322 * cbMtdParam._m0[11u].w)) - _460)) + _460;
    float _479 = (_471 * ((_298 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[12u].x - _323)) + _323) : (_323 * cbMtdParam._m0[12u].x)) - _461)) + _461;
    float _480 = (_471 * ((_298 ? ((cbMtdParam._m0[13u].y * (cbMtdParam._m0[12u].y - _324)) + _324) : (_324 * cbMtdParam._m0[12u].y)) - _462)) + _462;
    vec4 _492 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _509 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _513 = cbMtdParam._m0[13u].z * _509.x;
    float _520 = (_513 * (_492.x - _478)) + _478;
    float _521 = (_513 * (_492.y - _479)) + _479;
    float _522 = (_513 * (_492.z - _480)) + _480;
    float _526 = inversesqrt(dot(vec3(_290, _291, _292), vec3(_290, _291, _292)));
    float _527 = _526 * _290;
    float _528 = _526 * _291;
    float _529 = _526 * _292;
    float _530 = dot(vec4(_527, _528, _529, 0.0), vec4(_233, _234, _235, 0.0));
    float _3902 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _536 = exp2(log2(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))));
    float _539 = (_536 * 0.680000007152557373046875) + 0.119999997317790985107421875;
    float _559 = (_539 * ((0.048556677997112274169921875 - _520) + (_536 * 0.275154531002044677734375))) + _520;
    float _560 = (_539 * ((0.079126082360744476318359375 - _521) + (_536 * 0.448381125926971435546875))) + _521;
    float _561 = (_539 * ((0.1159258782863616943359375 - _522) + (_536 * 0.656913340091705322265625))) + _522;
    vec4 _573 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _590 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _592 = _590.x;
    float _593 = _590.y;
    float _594 = _590.z;
    float _601 = ((_573.x - _592) * _453) + _592;
    float _602 = ((_573.y - _593) * _453) + _593;
    float _603 = ((_573.z - _594) * _453) + _594;
    vec4 _615 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _641 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _653 = (((_615.x - _601) * _471) + _601) + ((_641.x + (-0.5)) * cbMtdParam._m0[14u].z);
    float _654 = (((_615.y - _602) * _471) + _602) + ((_641.y + (-0.5)) * cbMtdParam._m0[14u].z);
    float _655 = (((_615.z - _603) * _471) + _603) + ((_641.z + (-0.5)) * cbMtdParam._m0[14u].z);
    vec4 _668 = texture(sampler2D(M_Planet_GroundSurface_001_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _679 = ((_668.x - _653) * _513) + _653;
    float _680 = ((_668.y - _654) * _513) + _654;
    float _681 = ((_668.z - _655) * _513) + _655;
    float _691 = ((1.0 - _681) * _539) + _681;
    float _695 = ((((0.502016007900238037109375 - _679) * _539) + _679) * 2.0) + (-1.0);
    float _697 = ((((0.502016007900238037109375 - _680) * _539) + _680) * 2.0) + (-1.0);
    float _698 = dot(vec2(_695, _697), vec2(_695, _697));
    float _3913 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _703 = sqrt(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))));
    float _706 = fma(_703, _233, fma(_697, _225 * TANGENT.x, (_211 * _204) * _695));
    float _709 = fma(_703, _234, fma(_697, _225 * TANGENT.y, (_211 * _205) * _695));
    float _712 = fma(_703, _235, fma(_697, _225 * TANGENT.z, (_211 * _206) * _695));
    float _716 = inversesqrt(dot(vec3(_706, _709, _712), vec3(_706, _709, _712)));
    float _717 = _716 * _706;
    float _718 = _716 * _709;
    float _719 = _716 * _712;
    float _3924 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _720 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3946 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3957 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _738 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _743 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _745 = _743.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _899 = sqrt(((_290 * _290) + (_291 * _291)) + (_292 * _292));
        float _905 = (cbMatDynParam._m0[5u].x * _899) + cbMatDynParam._m0[5u].y;
        float _3968 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _910 = (cbMatDynParam._m0[5u].z * _899) + cbMatDynParam._m0[5u].w;
        float _3979 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) - _906)) + _906) < ((_745 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _756 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _757 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _775 = fma(_719, cbSceneParam._m0[5u].z, fma(_718, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _717));
    float _778 = fma(_719, cbSceneParam._m0[6u].z, fma(_718, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _717));
    float _781 = fma(_719, cbSceneParam._m0[7u].z, fma(_718, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _717));
    uint _794 = uint(roundEven(NORMAL.w)) * 13u;
    uint _795 = _794 + 9u;
    uint _796 = _795 + uint(cbMatDynParam._m0[0u].w);
    float _802 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_796].x;
    float _803 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * cbInstanceData._m0[_796].y;
    float _804 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * cbInstanceData._m0[_796].z;
    float _3990 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    vec4 _816 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _756, cbSceneParam._m0[86u].y * _757));
    float _819 = _816.x * TEXCOORD.z;
    float _820 = dot(vec3(_717, _718, _719), vec3(_527, _528, _529));
    float _823 = _820 * 2.0;
    float _827 = (_823 * _717) - _527;
    float _828 = (_823 * _718) - _528;
    float _829 = (_823 * _719) - _529;
    float _833 = abs(dot(vec3(_527, _528, _529), vec3(_717, _718, _719)));
    float _4023 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _835 = sqrt(_720);
    float _848 = exp2((_835 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_835 * 3.0));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1218;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _944 = fma(_888, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _880));
        float _948 = fma(_888, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _880));
        float _952 = fma(_888, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _880));
        float _976 = _880 + _717;
        float _977 = _884 + _718;
        float _978 = _888 + _719;
        float _988 = fma(_978, cbModelParam._m0[26u].z, fma(_977, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976)) - _944;
        float _989 = fma(_978, cbModelParam._m0[27u].z, fma(_977, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976)) - _948;
        float _990 = fma(_978, cbModelParam._m0[28u].z, fma(_977, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976)) - _952;
        float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
        float _1007 = ((_994 * _988) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_944 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_994 * _989) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_948 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_994 * _990) / cbModelParam._m0[34u].z) + ((((((_952 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        float _1046 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1012.x + (-0.5));
        float _1048 = _1046 * (_1012.y + (-0.5));
        float _1049 = _1046 * (_1012.z + (-0.5));
        float _1056 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1019.x + (-0.5));
        float _1058 = _1056 * (_1019.y + (-0.5));
        float _1059 = _1056 * (_1019.z + (-0.5));
        float _1066 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1026.x + (-0.5));
        float _1068 = _1066 * (_1026.y + (-0.5));
        float _1069 = _1066 * (_1026.z + (-0.5));
        float _1076 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1033.x + (-0.5));
        float _1078 = _1076 * (_1033.y + (-0.5));
        float _1079 = _1076 * (_1033.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1100 = (dot(vec3(_717, _718, _719), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1110 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _4071 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1112 + 1.0))) + _1117) * _1080;
        float _1127 = _1048 * 0.5;
        float _1128 = _1058 * 0.5;
        float _1129 = _1068 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_717, _718, _719), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _4104 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1154 + 1.0))) + _1159) * _1081;
        float _1169 = _1049 * 0.5;
        float _1170 = _1059 * 0.5;
        float _1171 = _1069 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_717, _718, _719), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _4137 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1196 + 1.0))) + _1201) * _1082;
        _1218 = _1049;
        _1220 = _1048;
        _1221 = _1047;
        _1222 = _1059;
        _1223 = _1058;
        _1224 = _1057;
        _1225 = _1069;
        _1226 = _1068;
        _1227 = _1067;
        _1228 = _1082;
        _1229 = _1081;
        _1230 = _1080;
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _1219;
        _1220 = _1219;
        _1221 = _1219;
        _1222 = _1219;
        _1223 = _1219;
        _1224 = _1219;
        _1225 = _1219;
        _1226 = _1219;
        _1227 = _1219;
        _1228 = _1219;
        _1229 = _1219;
        _1230 = _1219;
        _1231 = 0.0;
        _1232 = 0.0;
        _1233 = 0.0;
    }
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1262 = fma(_888, cbModelParam._m0[30u].z, fma(_884, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _880));
        float _1266 = fma(_888, cbModelParam._m0[31u].z, fma(_884, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _880));
        float _1270 = fma(_888, cbModelParam._m0[32u].z, fma(_884, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _880));
        float _1293 = _880 + _717;
        float _1294 = _884 + _718;
        float _1295 = _888 + _719;
        float _1305 = fma(_1295, cbModelParam._m0[30u].z, fma(_1294, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1293)) - _1262;
        float _1306 = fma(_1295, cbModelParam._m0[31u].z, fma(_1294, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1293)) - _1266;
        float _1307 = fma(_1295, cbModelParam._m0[32u].z, fma(_1294, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1293)) - _1270;
        float _1311 = inversesqrt(dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307)));
        float _1324 = ((_1311 * _1305) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1262 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1311 * _1306) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1266 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1311 * _1307) / cbModelParam._m0[35u].z) + ((((((_1270 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        float _1361 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1328.x + (-0.5));
        float _1363 = _1361 * (_1328.y + (-0.5));
        float _1364 = _1361 * (_1328.z + (-0.5));
        float _1371 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1335.x + (-0.5));
        float _1373 = _1371 * (_1335.y + (-0.5));
        float _1374 = _1371 * (_1335.z + (-0.5));
        float _1381 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1342.x + (-0.5));
        float _1383 = _1381 * (_1342.y + (-0.5));
        float _1384 = _1381 * (_1342.z + (-0.5));
        float _1391 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1349.x + (-0.5));
        float _1393 = _1391 * (_1349.y + (-0.5));
        float _1394 = _1391 * (_1349.z + (-0.5));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = _1362 * 0.5;
        float _1399 = _1372 * 0.5;
        float _1400 = _1382 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_717, _718, _719), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4200 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1425 + 1.0))) + _1430) * _1395;
        float _1440 = _1363 * 0.5;
        float _1441 = _1373 * 0.5;
        float _1442 = _1383 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_717, _718, _719), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4233 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1467 + 1.0))) + _1472) * _1396;
        float _1482 = _1364 * 0.5;
        float _1483 = _1374 * 0.5;
        float _1484 = _1384 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_717, _718, _719), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4266 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1509 + 1.0))) + _1514) * _1397;
        _1531 = _1364;
        _1532 = _1363;
        _1533 = _1362;
        _1534 = _1374;
        _1535 = _1373;
        _1536 = _1372;
        _1537 = _1384;
        _1538 = _1383;
        _1539 = _1382;
        _1540 = _1397;
        _1541 = _1396;
        _1542 = _1395;
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1219;
        _1532 = _1219;
        _1533 = _1219;
        _1534 = _1219;
        _1535 = _1219;
        _1536 = _1219;
        _1537 = _1219;
        _1538 = _1219;
        _1539 = _1219;
        _1540 = _1219;
        _1541 = _1219;
        _1542 = _1219;
        _1543 = 0.0;
        _1544 = 0.0;
        _1545 = 0.0;
    }
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1231)) + _1231;
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1232)) + _1232;
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1233)) + _1233;
    float _1578 = fma(_1557, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1555 * cbSceneParam._m0[89u].x));
    float _1581 = fma(_1557, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1555 * cbSceneParam._m0[90u].x));
    float _1584 = fma(_1557, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1555));
    float _1599 = _827 * 0.5;
    float _1600 = _828 * 0.5;
    float _1601 = _829 * 0.5;
    float _1602 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1605 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1608 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1642;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1615 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1218, _1222, _1225, _1228));
        float _1619 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1623 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1221, _1224, _1227, _1230));
        float _1630 = dot(vec4(cbModelParam._m0[39u]), vec4(_1599, _1600, _1601, 1.0));
        _1642 = dot(vec3(isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1642 = 1.0;
    }
    float _1653;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1644 = dot(vec4(cbModelParam._m0[40u]), vec4(_1599, _1600, _1601, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1644) ? 0.0 : (isnan(0.0) ? _1644 : max(0.0, _1644))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1657 = (_1653 * cbModelParam._m0[1u].x) + (_1642 * (1.0 - cbModelParam._m0[1u].x));
    float _1667 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _720);
    float _1668 = isnan(_1667) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1667 : min(cbModelParam._m0[25u].z, _1667));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1715 = fma(_888, cbModelParam._m0[13u].z, fma(_884, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _880)) + cbModelParam._m0[13u].w;
        float _1719 = fma(_888, cbModelParam._m0[14u].z, fma(_884, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _880)) + cbModelParam._m0[14u].w;
        float _1723 = fma(_888, cbModelParam._m0[15u].z, fma(_884, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _880)) + cbModelParam._m0[15u].w;
        float _1726 = fma(_829, cbModelParam._m0[13u].z, fma(_828, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827));
        float _1729 = fma(_829, cbModelParam._m0[14u].z, fma(_828, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827));
        float _1732 = fma(_829, cbModelParam._m0[15u].z, fma(_828, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827));
        float _1760;
        if (_1726 > 0.0)
        {
            _1760 = abs((1.0 - _1715) / _1726);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1715 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1760 = frontier_phi_19_17_ladder;
        }
        float _1933;
        if (_1729 > 0.0)
        {
            _1933 = abs((1.0 - _1719) / _1729);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1719 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1933 = frontier_phi_28_24_ladder;
        }
        float _2228;
        if (_1732 > 0.0)
        {
            _2228 = abs((1.0 - _1723) / _1732);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1723 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2228 = frontier_phi_40_35_ladder;
        }
        float _2230 = isnan(_1933) ? _1760 : (isnan(_1760) ? _1933 : min(_1760, _1933));
        float _2231 = isnan(_2228) ? _2230 : (isnan(_2230) ? _2228 : min(_2230, _2228));
        float _2235 = (_2231 * _1726) + _1715;
        float _2236 = (_2231 * _1729) + _1719;
        float _2237 = (_2231 * _1732) + _1723;
        float _2238 = _2231 * 9.9999997473787516355514526367188e-05;
        float _2240 = (-1.0) - _2238;
        float _2242 = _2238 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2237 > _2242) || ((_2237 < _2240) || ((_2236 > _2242) || ((_2236 < _2240) || ((_2235 < _2240) || (_2235 > _2242))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2382 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2237, cbModelParam._m0[9u].z, fma(_2236, cbModelParam._m0[9u].y, _2235 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2237, cbModelParam._m0[10u].z, fma(_2236, cbModelParam._m0[10u].y, _2235 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2237, cbModelParam._m0[11u].z, fma(_2236, cbModelParam._m0[11u].y, _2235 * cbModelParam._m0[11u].x))), _1668);
            frontier_phi_18_40_ladder = _2382.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2382.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2382.x * cbModelParam._m0[1u].y;
        }
        _1748 = frontier_phi_18_40_ladder_2;
        _1750 = frontier_phi_18_40_ladder_1;
        _1752 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_827, _828, _829), _1668);
        _1748 = _1736.x * cbModelParam._m0[1u].y;
        _1750 = _1736.y * cbModelParam._m0[1u].y;
        _1752 = _1736.z * cbModelParam._m0[1u].y;
    }
    float _1756 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _720);
    float _1757 = isnan(_1756) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1756 : min(cbModelParam._m0[25u].w, _1756));
    float _1850;
    float _1852;
    float _1854;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1814 = fma(_888, cbModelParam._m0[21u].z, fma(_884, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _880)) + cbModelParam._m0[21u].w;
        float _1818 = fma(_888, cbModelParam._m0[22u].z, fma(_884, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _880)) + cbModelParam._m0[22u].w;
        float _1822 = fma(_888, cbModelParam._m0[23u].z, fma(_884, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _880)) + cbModelParam._m0[23u].w;
        float _1825 = fma(_829, cbModelParam._m0[21u].z, fma(_828, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827));
        float _1828 = fma(_829, cbModelParam._m0[22u].z, fma(_828, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827));
        float _1831 = fma(_829, cbModelParam._m0[23u].z, fma(_828, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827));
        float _1938;
        if (_1825 > 0.0)
        {
            _1938 = abs((1.0 - _1814) / _1825);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1814 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1938 = frontier_phi_30_26_ladder;
        }
        float _2255;
        if (_1828 > 0.0)
        {
            _2255 = abs((1.0 - _1818) / _1828);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1818 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2255 = frontier_phi_42_37_ladder;
        }
        float _2582;
        if (_1831 > 0.0)
        {
            _2582 = abs((1.0 - _1822) / _1831);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1822 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2582 = frontier_phi_52_49_ladder;
        }
        float _2584 = isnan(_2255) ? _1938 : (isnan(_1938) ? _2255 : min(_1938, _2255));
        float _2585 = isnan(_2582) ? _2584 : (isnan(_2584) ? _2582 : min(_2584, _2582));
        float _2589 = (_2585 * _1825) + _1814;
        float _2590 = (_2585 * _1828) + _1818;
        float _2591 = (_2585 * _1831) + _1822;
        float _2592 = _2585 * 9.9999997473787516355514526367188e-05;
        float _2593 = (-1.0) - _2592;
        float _2595 = _2592 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2591 > _2595) || ((_2591 < _2593) || ((_2590 > _2595) || ((_2590 < _2593) || ((_2589 < _2593) || (_2589 > _2595))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2591, cbModelParam._m0[17u].z, fma(_2590, cbModelParam._m0[17u].y, _2589 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2591, cbModelParam._m0[18u].z, fma(_2590, cbModelParam._m0[18u].y, _2589 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2591, cbModelParam._m0[19u].z, fma(_2590, cbModelParam._m0[19u].y, _2589 * cbModelParam._m0[19u].x))), _1757);
            frontier_phi_27_52_ladder = _2709.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2709.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2709.x * cbModelParam._m0[1u].z;
        }
        _1850 = frontier_phi_27_52_ladder_2;
        _1852 = frontier_phi_27_52_ladder_1;
        _1854 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_827, _828, _829), _1757);
        _1850 = _1834.x * cbModelParam._m0[1u].z;
        _1852 = _1834.y * cbModelParam._m0[1u].z;
        _1854 = _1834.z * cbModelParam._m0[1u].z;
    }
    float _1866 = ((((1.0 - _848) * ((_835 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_848 * _835)) * _819;
    float _1867 = _1866 * ((cbModelParam._m0[1u].w * (_1850 - _1748)) + _1748);
    float _1868 = _1866 * ((cbModelParam._m0[1u].w * (_1852 - _1750)) + _1750);
    float _1869 = _1866 * ((cbModelParam._m0[1u].w * (_1854 - _1752)) + _1752);
    float _1872 = fma(_1869, cbSceneParam._m0[89u].z, fma(_1868, cbSceneParam._m0[89u].y, _1867 * cbSceneParam._m0[89u].x));
    float _1875 = fma(_1869, cbSceneParam._m0[90u].z, fma(_1868, cbSceneParam._m0[90u].y, _1867 * cbSceneParam._m0[90u].x));
    float _1878 = fma(_1869, cbSceneParam._m0[91u].z, fma(_1868, cbSceneParam._m0[91u].y, _1867 * cbSceneParam._m0[91u].x));
    float _1912 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1916 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1920 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1924 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1925 = _1912 / _1924;
    float _1926 = _1916 / _1924;
    float _1927 = _1920 / _1924;
    float _2074;
    float _2075;
    float _2076;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1954 = ((uint(_1927 > cbSceneParam._m0[59u].y) + uint(_1927 > cbSceneParam._m0[59u].x)) + uint(_1927 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1955 = _1954 + 43u;
        uint _1963 = _1954 + 44u;
        uint _1971 = _1954 + 45u;
        uint _1979 = _1954 + 46u;
        float _1990 = fma(_1924, cbSceneParam._m0[_1955].w, fma(_1920, cbSceneParam._m0[_1955].z, fma(_1916, cbSceneParam._m0[_1955].y, _1912 * cbSceneParam._m0[_1955].x)));
        float _1994 = fma(_1924, cbSceneParam._m0[_1963].w, fma(_1920, cbSceneParam._m0[_1963].z, fma(_1916, cbSceneParam._m0[_1963].y, _1912 * cbSceneParam._m0[_1963].x)));
        float _2002 = fma(_1924, cbSceneParam._m0[_1979].w, fma(_1920, cbSceneParam._m0[_1979].z, fma(_1916, cbSceneParam._m0[_1979].y, _1912 * cbSceneParam._m0[_1979].x)));
        float _2007 = cbSceneParam._m0[33u].z * _2002;
        float _2009 = cbSceneParam._m0[33u].w * _2002;
        float _2012 = fma(_1924, cbSceneParam._m0[_1971].w, fma(_1920, cbSceneParam._m0[_1971].z, fma(_1916, cbSceneParam._m0[_1971].y, _1912 * cbSceneParam._m0[_1971].x))) / _2002;
        float _2060 = (cbSceneParam._m0[33u].x - sqrt(((_1926 * _1926) + (_1925 * _1925)) + (_1927 * _1927))) * cbSceneParam._m0[33u].y;
        float _4392 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2067 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2007 + _1990) / _2002, (_2009 + _1994) / _2002), _2012), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2009 + _1990) / _2002, (_1994 - _2007) / _2002), _2012), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1990 - _2007) / _2002, (_1994 - _2009) / _2002), _2012), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1990 - _2009) / _2002, (_2007 + _1994) / _2002), _2012), 0.0)).x), vec4(0.25)));
        _2074 = 1.0 - (_2067 * cbSceneParam._m0[34u].x);
        _2075 = 1.0 - (_2067 * cbSceneParam._m0[34u].y);
        _2076 = 1.0 - (_2067 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2074 = 1.0;
        _2075 = 1.0;
        _2076 = 1.0;
    }
    float _2140;
    float _2142;
    float _2144;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2128 = fma(_1924, cbSceneParam._m0[63u].w, fma(_1920, cbSceneParam._m0[63u].z, fma(_1916, cbSceneParam._m0[63u].y, _1912 * cbSceneParam._m0[63u].x)));
        float _2129 = fma(_1924, cbSceneParam._m0[60u].w, fma(_1920, cbSceneParam._m0[60u].z, fma(_1916, cbSceneParam._m0[60u].y, _1912 * cbSceneParam._m0[60u].x))) / _2128;
        float _2130 = fma(_1924, cbSceneParam._m0[61u].w, fma(_1920, cbSceneParam._m0[61u].z, fma(_1916, cbSceneParam._m0[61u].y, _1912 * cbSceneParam._m0[61u].x))) / _2128;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2129 >= cbSceneParam._m0[64u].x) && (_2130 >= cbSceneParam._m0[64u].y)) && (_2129 <= cbSceneParam._m0[64u].z)) && (_2130 <= cbSceneParam._m0[64u].w))
        {
            float _2268 = fma(_1924, cbSceneParam._m0[62u].w, fma(_1920, cbSceneParam._m0[62u].z, fma(_1916, cbSceneParam._m0[62u].y, _1912 * cbSceneParam._m0[62u].x))) / _2128;
            float _2272 = isnan(cbSceneParam._m0[41u].w) ? _2268 : (isnan(_2268) ? cbSceneParam._m0[41u].w : max(_2268, cbSceneParam._m0[41u].w));
            float _2315 = (cbSceneParam._m0[33u].x - sqrt(((_1926 * _1926) + (_1925 * _1925)) + (_1927 * _1927))) * cbSceneParam._m0[33u].y;
            float _4408 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
            float _2322 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2129, cbSceneParam._m0[33u].w + _2130), _2272), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2129, _2130 - cbSceneParam._m0[33u].z), _2272), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2129 - cbSceneParam._m0[33u].z, _2130 - cbSceneParam._m0[33u].w), _2272), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2129 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2130), _2272), 0.0)).x), vec4(0.25)));
            float _2326 = 1.0 - (_2322 * cbSceneParam._m0[34u].x);
            float _2327 = 1.0 - (_2322 * cbSceneParam._m0[34u].y);
            float _2328 = 1.0 - (_2322 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2327) ? _2075 : (isnan(_2075) ? _2327 : min(_2075, _2327));
            frontier_phi_39_38_ladder_1 = isnan(_2326) ? _2074 : (isnan(_2074) ? _2326 : min(_2074, _2326));
            frontier_phi_39_38_ladder_2 = isnan(_2328) ? _2076 : (isnan(_2076) ? _2328 : min(_2076, _2328));
        }
        else
        {
            frontier_phi_39_38_ladder = _2075;
            frontier_phi_39_38_ladder_1 = _2074;
            frontier_phi_39_38_ladder_2 = _2076;
        }
        _2140 = frontier_phi_39_38_ladder_1;
        _2142 = frontier_phi_39_38_ladder;
        _2144 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2140 = _2074;
        _2142 = _2075;
        _2144 = _2076;
    }
    uvec4 _2149 = floatBitsToUint(cbInstanceData._m0[_794 + 5u]);
    uint _2151 = _2149.x * 14u;
    uint _2152 = _2151 + 13u;
    float _2159 = _819 + (-1.0);
    float _2164 = (cbLight._m0[_2152].x * _2159) + 1.0;
    float _2165 = (cbLight._m0[_2152].y * _2159) + 1.0;
    float _2166 = (cbLight._m0[_2152].z * _2159) + 1.0;
    float _2167 = (cbLight._m0[_2152].w * _2159) + 1.0;
    uint _2168 = _2151 + 5u;
    float _2174 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2178 = _2151 + 4u;
    float _2187 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
    uint _2191 = _2151 | 1u;
    float _2202 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_717, _718, _719));
    float _2205 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_717, _718, _719));
    float _4444 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _4455 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2210 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * 0.3183098733425140380859375;
    float _2212 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * 0.3183098733425140380859375;
    float _2219 = ((cbLight._m0[_2168].x * _2174) * _2212) + (((cbLight._m0[_2178].x * _2140) * _2187) * _2210);
    float _2220 = ((_2174 * cbLight._m0[_2168].y) * _2212) + (((cbLight._m0[_2178].y * _2142) * _2187) * _2210);
    float _2221 = ((_2174 * cbLight._m0[_2168].z) * _2212) + (((cbLight._m0[_2178].z * _2144) * _2187) * _2210);
    uvec4 _2225 = floatBitsToUint(cbLight._m0[_2151 + 12u]);
    bool _2227 = _2225.x == 0u;
    float _2329;
    float _2331;
    float _2333;
    if (_2227)
    {
        _2329 = _2219;
        _2331 = _2220;
        _2333 = _2221;
    }
    else
    {
        uint _2337 = _2151 + 6u;
        float _2353 = (dot(vec3(cbLight._m0[_2151 + 2u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2354 = _2353 * _2353;
        float _4466 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2355 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2356 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2329 = (((cbLight._m0[_2337].x * 0.3183098733425140380859375) * _2355) * _2356) + _2219;
        _2331 = (((cbLight._m0[_2337].y * 0.3183098733425140380859375) * _2355) * _2356) + _2220;
        _2333 = (((cbLight._m0[_2337].z * 0.3183098733425140380859375) * _2355) * _2356) + _2221;
    }
    bool _2336 = _2225.y == 0u;
    float _2391;
    float _2393;
    float _2395;
    if (_2336)
    {
        _2391 = _2329;
        _2393 = _2331;
        _2395 = _2333;
    }
    else
    {
        uint _2553 = _2151 + 7u;
        float _2569 = (dot(vec3(cbLight._m0[_2151 + 3u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2570 = _2569 * _2569;
        float _4482 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2571 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2572 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2391 = (((cbLight._m0[_2553].x * 0.3183098733425140380859375) * _2571) * _2572) + _2329;
        _2393 = (((cbLight._m0[_2553].y * 0.3183098733425140380859375) * _2571) * _2572) + _2331;
        _2395 = (((cbLight._m0[_2553].z * 0.3183098733425140380859375) * _2571) * _2572) + _2333;
    }
    uint _2398 = _2151 + 8u;
    float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _720) * 0.949999988079071044921875);
    float _2412 = _2411 * _2411;
    float _2413 = cbLight._m0[_2151].x + _527;
    float _2414 = cbLight._m0[_2151].y + _528;
    float _2415 = cbLight._m0[_2151].z + _529;
    float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
    float _2420 = _2419 * _2413;
    float _2421 = _2419 * _2414;
    float _2422 = _2419 * _2415;
    float _2423 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2151].xyz));
    float _4498 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _4509 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _2427 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2428 = dot(vec3(_717, _718, _719), vec3(_2420, _2421, _2422));
    float _4520 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2431 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2432 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2420, _2421, _2422));
    float _4531 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2436 = _2412 * _2412;
    float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
    float _2451 = (exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2452 = 1.0 - _2412;
    float _2463 = (0.5 / (((_2427 * ((_2426 * _2452) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2452) + _2412) * _2426))) * _2426;
    float _4542 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2465 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
    uint _2479 = _2151 + 9u;
    float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _720) * 0.949999988079071044921875);
    float _2491 = _2490 * _2490;
    float _2492 = cbLight._m0[_2191].x + _527;
    float _2493 = cbLight._m0[_2191].y + _528;
    float _2494 = cbLight._m0[_2191].z + _529;
    float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
    float _2499 = _2498 * _2492;
    float _2500 = _2498 * _2493;
    float _2501 = _2498 * _2494;
    float _2502 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2191].xyz));
    float _4553 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2506 = dot(vec3(_717, _718, _719), vec3(_2499, _2500, _2501));
    float _4564 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2510 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2499, _2500, _2501));
    float _4575 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2514 = _2491 * _2491;
    float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
    float _2527 = (exp2(log2(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2528 = 1.0 - _2491;
    float _2538 = (0.5 / (((_2427 * ((_2505 * _2528) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2528) + _2491) * _2505))) * _2505;
    float _4586 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2540 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
    float _2550 = (((_2527 * cbLight._m0[_2479].x) * _2540) * _2174) + ((((cbLight._m0[_2398].x * _2140) * _2451) * _2465) * _2187);
    float _2551 = (((_2527 * cbLight._m0[_2479].y) * _2540) * _2174) + ((((cbLight._m0[_2398].y * _2142) * _2451) * _2465) * _2187);
    float _2552 = (((_2527 * cbLight._m0[_2479].z) * _2540) * _2174) + ((((cbLight._m0[_2398].z * _2144) * _2451) * _2465) * _2187);
    float _2608;
    float _2610;
    float _2612;
    if (_2227)
    {
        _2608 = _2550;
        _2610 = _2551;
        _2612 = _2552;
    }
    else
    {
        uint _2614 = _2151 + 2u;
        uint _2618 = _2151 + 10u;
        float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2614].w)) * _720) * 0.949999988079071044921875);
        float _2633 = _2632 * _2632;
        float _2634 = cbLight._m0[_2614].x + _527;
        float _2635 = cbLight._m0[_2614].y + _528;
        float _2636 = cbLight._m0[_2614].z + _529;
        float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
        float _2641 = _2640 * _2634;
        float _2642 = _2640 * _2635;
        float _2643 = _2640 * _2636;
        float _2644 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2614].xyz));
        float _4597 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2648 = dot(vec3(_717, _718, _719), vec3(_2641, _2642, _2643));
        float _4608 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2652 = dot(vec3(cbLight._m0[_2614].xyz), vec3(_2641, _2642, _2643));
        float _4619 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2656 = _2633 * _2633;
        float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
        float _2669 = (exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2670 = 1.0 - _2633;
        float _2680 = (0.5 / (((_2427 * ((_2647 * _2670) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2670) + _2633) * _2647))) * _2647;
        float _4630 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2682 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
        float _2683 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2608 = (((_2669 * cbLight._m0[_2618].x) * _2682) * _2683) + _2550;
        _2610 = (((_2669 * cbLight._m0[_2618].y) * _2682) * _2683) + _2551;
        _2612 = (((_2669 * cbLight._m0[_2618].z) * _2682) * _2683) + _2552;
    }
    float _2714;
    float _2716;
    float _2718;
    if (_2336)
    {
        _2714 = _2608;
        _2716 = _2610;
        _2718 = _2612;
    }
    else
    {
        uint _2725 = _2151 + 3u;
        uint _2729 = _2151 + 11u;
        float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2725].w)) * _720) * 0.949999988079071044921875);
        float _2744 = _2743 * _2743;
        float _2745 = cbLight._m0[_2725].x + _527;
        float _2746 = cbLight._m0[_2725].y + _528;
        float _2747 = cbLight._m0[_2725].z + _529;
        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
        float _2752 = _2751 * _2745;
        float _2753 = _2751 * _2746;
        float _2754 = _2751 * _2747;
        float _2755 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2725].xyz));
        float _4646 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2759 = dot(vec3(_717, _718, _719), vec3(_2752, _2753, _2754));
        float _4657 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2763 = dot(vec3(cbLight._m0[_2725].xyz), vec3(_2752, _2753, _2754));
        float _4668 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2767 = _2744 * _2744;
        float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
        float _2780 = (exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2781 = 1.0 - _2744;
        float _2791 = (0.5 / (((_2427 * ((_2758 * _2781) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2781) + _2744) * _2758))) * _2758;
        float _4679 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2793 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
        float _2794 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2714 = (((_2780 * cbLight._m0[_2729].x) * _2793) * _2794) + _2608;
        _2716 = (((_2780 * cbLight._m0[_2729].y) * _2793) * _2794) + _2610;
        _2718 = (((_2780 * cbLight._m0[_2729].z) * _2793) * _2794) + _2612;
    }
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    if (_2149.y == 0u)
    {
        uvec4 _2815 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2816 = _2815.x;
        uint _2827 = uint((float(_2815.y) * floor(float(uint(cbSceneParam._m0[85u].y * _757) / _2816))) + floor(float(uint(cbSceneParam._m0[85u].x * _756) / _2816)));
        float _2837 = (log2(_1927 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2838 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        uint _2841 = uint(isnan(14.0) ? _2838 : (isnan(_2838) ? 14.0 : min(_2838, 14.0)));
        uvec4 _2846 = texelFetch(g_lightClusterGridBuffer, int(((_2841 << 2u) + (_2827 << 6u)) >> 2u));
        uint _2847 = _2846.x;
        uint _2848 = _2815.z;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((((1u << ((_2848 >> 4u) & 15u)) + 4294967295u) & _2847) == 0u) || ((_2848 & 240u) == 0u))
        {
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
        }
        else
        {
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            uint _3084 = 0u;
            uint _3093;
            bool _3094;
            for (;;)
            {
                _3093 = texelFetch(g_lightClassification, int((((_2841 << 5u) + (_2827 << 9u)) + (_3084 << 2u)) >> 2u)).x;
                _3094 = _3093 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3094)
                {
                    frontier_phi_73_pred = _3083;
                    frontier_phi_73_pred_1 = _3082;
                    frontier_phi_73_pred_2 = _3081;
                    frontier_phi_73_pred_3 = _3080;
                    frontier_phi_73_pred_4 = _3079;
                    frontier_phi_73_pred_5 = _3078;
                }
                else
                {
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    uint _3229;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3093;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    for (;;)
                    {
                        uint _3233 = uint(findLSB(_3229)) + (_3084 << 5u);
                        uint _3230 = (_3229 + 4294967295u) & _3229;
                        uint _3235 = _3233 * 48u;
                        vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3255 = (_3233 * 48u) + 4u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 3u)).x));
                        uint _3274 = (_3233 * 48u) + 8u;
                        vec3 _3285 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x));
                        float _3289 = _3249.x - _1925;
                        float _3290 = _3249.y - _1926;
                        float _3291 = _3249.z - _1927;
                        float _3292 = dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291));
                        float _3295 = inversesqrt(_3292);
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3299 = dot(vec3(_775, _778, _781), vec3(_3296, _3297, _3298));
                        float _3304 = 1.0 - (_3292 * _3249.w);
                        float _4705 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                        float _3306 = sqrt(_3292) * _3268.w;
                        float _3309 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                        float _3310 = _3309 * _3309;
                        float _3313 = ((1.0 - _3310) * _3299) + _3310;
                        float _3316 = _3306 * _3306;
                        float _3320 = ((isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))) * _3305) / ((_3316 * 0.699999988079071044921875) + 1.0);
                        float _3324 = (-0.0) - _1925;
                        float _3325 = (-0.0) - _1926;
                        float _3326 = (-0.0) - _1927;
                        float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                        float _3331 = _3330 * _3324;
                        float _3332 = _3330 * _3325;
                        float _3333 = _3330 * _3326;
                        float _3340 = exp2(log2(1.0 / ((_3316 * 3.5) + 5.0)) * 0.25);
                        float _3341 = 1.0 - _835;
                        float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                        float _3349 = _3348 * _3348;
                        float _3350 = _3349 * _3349;
                        float _3351 = _3331 + _3296;
                        float _3352 = _3332 + _3297;
                        float _3353 = _3333 + _3298;
                        float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                        float _3361 = dot(vec3(_775, _778, _781), vec3(_3331, _3332, _3333));
                        float _4721 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3364 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3365 = dot(vec3(_775, _778, _781), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                        float _4732 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                        float _3373 = _3309 * _3349;
                        float _3374 = _3373 * _3373;
                        float _3377 = ((1.0 - _3374) * _3299) + _3374;
                        float _4743 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3378 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3379 = 1.0 - _3349;
                        float _3389 = (0.5 / (((_3378 * ((_3364 * _3379) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3378 * _3379) + _3349) * _3364))) * _3378;
                        float _4754 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3400 = (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) / ((_3372 * _3372) * ((_3316 * 2.1991131305694580078125) + 3.141590118408203125))) * _3305;
                        _3153 = (_3320 * _3268.x) + _3226;
                        _3154 = (_3320 * _3268.y) + _3227;
                        _3155 = (_3320 * _3268.z) + _3228;
                        _3150 = (_3400 * _3285.x) + _3223;
                        _3151 = (_3400 * _3285.y) + _3224;
                        _3152 = (_3400 * _3285.z) + _3225;
                        if (_3230 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3230;
                        }
                    }
                    frontier_phi_73_pred = _3155;
                    frontier_phi_73_pred_1 = _3154;
                    frontier_phi_73_pred_2 = _3153;
                    frontier_phi_73_pred_3 = _3152;
                    frontier_phi_73_pred_4 = _3151;
                    frontier_phi_73_pred_5 = _3150;
                }
                _2937 = frontier_phi_73_pred;
                _2935 = frontier_phi_73_pred_1;
                _2933 = frontier_phi_73_pred_2;
                _2931 = frontier_phi_73_pred_3;
                _2929 = frontier_phi_73_pred_4;
                _2927 = frontier_phi_73_pred_5;
                uint _3085 = _3084 + 1u;
                if (_3085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3078 = _2927;
                    _3079 = _2929;
                    _3080 = _2931;
                    _3081 = _2933;
                    _3082 = _2935;
                    _3083 = _2937;
                    _3084 = _3085;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
        }
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.z;
        uint _2943 = (_2941 >> 8u) & 15u;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((4294967295u << _2943) & _2847) == 0u)
        {
            _3046 = _2926;
            _3048 = _2928;
            _3050 = _2930;
            _3052 = _2932;
            _3054 = _2934;
            _3056 = _2936;
        }
        else
        {
            float _3071 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
            float _3072 = _3071 * _1925;
            float _3073 = _3071 * _1926;
            float _3074 = _3071 * _1927;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2943 < ((_2941 >> 12u) & 15u))
            {
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3206 = _2926;
                float _3207 = _2928;
                float _3208 = _2930;
                float _3209 = _2932;
                float _3210 = _2934;
                float _3211 = _2936;
                uint _3212 = _2943;
                uint _3221;
                bool _3222;
                for (;;)
                {
                    _3221 = texelFetch(g_lightClassification, int((((_2841 << 5u) + (_2827 << 9u)) + (_3212 << 2u)) >> 2u)).x;
                    _3222 = _3221 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3222)
                    {
                        frontier_phi_84_pred = _3210;
                        frontier_phi_84_pred_1 = _3209;
                        frontier_phi_84_pred_2 = _3208;
                        frontier_phi_84_pred_3 = _3207;
                        frontier_phi_84_pred_4 = _3206;
                        frontier_phi_84_pred_5 = _3211;
                    }
                    else
                    {
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3427 = _3206;
                        float _3428 = _3207;
                        float _3429 = _3208;
                        float _3430 = _3209;
                        float _3431 = _3210;
                        float _3432 = _3211;
                        uint _3433 = _3221;
                        uint _3434;
                        vec4 _3459;
                        float _3460;
                        vec4 _3475;
                        vec3 _3487;
                        vec4 _3503;
                        vec4 _3519;
                        float _3566;
                        bool _3567;
                        for (;;)
                        {
                            uint _3444 = ((_3212 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3433));
                            _3434 = (_3433 + 4294967295u) & _3433;
                            uint _3446 = _3444 * 40u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            _3460 = _3459.w;
                            uint _3462 = (_3444 * 40u) + 4u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3444 * 40u) + 8u;
                            _3487 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x));
                            uint _3490 = (_3444 * 40u) + 16u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3506 = (_3444 * 40u) + 20u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3522 = (_3444 * 40u) + 24u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3541 = (_3444 * 40u) + 28u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3566 = fma(_1927, _3554.z, fma(_1926, _3554.y, _3554.x * _1925)) + _3554.w;
                            _3567 = !((fma(_1927, _3535.z, fma(_1926, _3535.y, _3535.x * _1925)) + _3535.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3567)
                            {
                                float _3594 = _3459.x - _1925;
                                float _3595 = _3459.y - _1926;
                                float _3596 = _3459.z - _1927;
                                float _3597 = dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596));
                                float _3600 = inversesqrt(_3597);
                                float _3601 = _3600 * _3594;
                                float _3602 = _3600 * _3595;
                                float _3603 = _3600 * _3596;
                                float _3607 = 1.0 - (_3597 / (_3460 * _3460));
                                float _4765 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3612 = sqrt(_3597) * _3475.w;
                                float _3614 = 1.39999997615814208984375 / (_3612 + 1.39999997615814208984375);
                                float _3615 = _3614 * _3614;
                                float _3618 = ((1.0 - _3615) * dot(vec3(_3601, _3602, _3603), vec3(_775, _778, _781))) + _3615;
                                float _3621 = _3612 * _3612;
                                float _3625 = (fma(_1927, _3503.z, fma(_1926, _3503.y, _3503.x * _1925)) + _3503.w) / _3566;
                                float _3626 = (fma(_1927, _3519.z, fma(_1926, _3519.y, _3519.x * _1925)) + _3519.w) / _3566;
                                float _3630 = 1.0 - dot(vec2(_3625, _3626), vec2(_3625, _3626));
                                float _4781 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3632 = _3631 * (((isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0))) * _3608) / ((_3621 * 0.699999988079071044921875) + 1.0));
                                float _3644 = exp2(log2(1.0 / ((_3621 * 3.5) + 5.0)) * 0.25);
                                float _3645 = 1.0 - _835;
                                float _3652 = sqrt(1.0 - ((1.0 - (_3645 * _3645)) * (1.0 - (_3644 * _3644))));
                                float _3653 = _3652 * _3652;
                                float _3654 = _3653 * _3653;
                                float _3655 = _3601 - _3072;
                                float _3656 = _3602 - _3073;
                                float _3657 = _3603 - _3074;
                                float _3661 = inversesqrt(dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657)));
                                float _3665 = dot(vec3(_775, _778, _781), vec3((-0.0) - _3072, (-0.0) - _3073, (-0.0) - _3074));
                                float _4792 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3668 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3669 = dot(vec3(_775, _778, _781), vec3(_3661 * _3655, _3661 * _3656, _3661 * _3657));
                                float _4803 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3672 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3676 = ((_3672 * _3672) * (_3654 + (-1.0))) + 1.0;
                                float _3677 = _3614 * _3653;
                                float _3678 = _3677 * _3677;
                                float _3684 = ((1.0 - _3678) * dot(vec3(_775, _778, _781), vec3(_3601, _3602, _3603))) + _3678;
                                float _4814 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3686 = 1.0 - _3653;
                                float _3696 = (0.5 / (((_3685 * ((_3668 * _3686) + _3653)) + 9.9999999392252902907785028219223e-09) + (((_3685 * _3686) + _3653) * _3668))) * _3685;
                                float _4825 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3706 = (_3631 * _3608) * (((_3654 * 3.1415927410125732421875) * (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) / ((_3676 * _3676) * ((_3621 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3632 * _3475.y;
                                frontier_phi_90_pred_1 = _3632 * _3475.x;
                                frontier_phi_90_pred_2 = _3706 * _3487.z;
                                frontier_phi_90_pred_3 = _3706 * _3487.y;
                                frontier_phi_90_pred_4 = _3706 * _3487.x;
                                frontier_phi_90_pred_5 = _3632 * _3475.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3714 = frontier_phi_90_pred;
                            _3713 = frontier_phi_90_pred_1;
                            _3712 = frontier_phi_90_pred_2;
                            _3711 = frontier_phi_90_pred_3;
                            _3710 = frontier_phi_90_pred_4;
                            _3715 = frontier_phi_90_pred_5;
                            _3417 = _3713 + _3430;
                            _3418 = _3714 + _3431;
                            _3419 = _3715 + _3432;
                            _3414 = _3710 + _3427;
                            _3415 = _3711 + _3428;
                            _3416 = _3712 + _3429;
                            if (_3434 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3434;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3418;
                        frontier_phi_84_pred_1 = _3417;
                        frontier_phi_84_pred_2 = _3416;
                        frontier_phi_84_pred_3 = _3415;
                        frontier_phi_84_pred_4 = _3414;
                        frontier_phi_84_pred_5 = _3419;
                    }
                    _3055 = frontier_phi_84_pred;
                    _3053 = frontier_phi_84_pred_1;
                    _3051 = frontier_phi_84_pred_2;
                    _3049 = frontier_phi_84_pred_3;
                    _3047 = frontier_phi_84_pred_4;
                    _3057 = frontier_phi_84_pred_5;
                    uint _3213 = _3212 + 1u;
                    if (_3213 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3206 = _3047;
                        _3207 = _3049;
                        _3208 = _3051;
                        _3209 = _3053;
                        _3210 = _3055;
                        _3211 = _3057;
                        _3212 = _3213;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3057;
                frontier_phi_65_66_ladder_1 = _3053;
                frontier_phi_65_66_ladder_2 = _3055;
                frontier_phi_65_66_ladder_3 = _3049;
                frontier_phi_65_66_ladder_4 = _3047;
                frontier_phi_65_66_ladder_5 = _3051;
            }
            else
            {
                frontier_phi_65_66_ladder = _2936;
                frontier_phi_65_66_ladder_1 = _2932;
                frontier_phi_65_66_ladder_2 = _2934;
                frontier_phi_65_66_ladder_3 = _2928;
                frontier_phi_65_66_ladder_4 = _2926;
                frontier_phi_65_66_ladder_5 = _2930;
            }
            _3046 = frontier_phi_65_66_ladder_4;
            _3048 = frontier_phi_65_66_ladder_3;
            _3050 = frontier_phi_65_66_ladder_5;
            _3052 = frontier_phi_65_66_ladder_1;
            _3054 = frontier_phi_65_66_ladder_2;
            _3056 = frontier_phi_65_66_ladder;
        }
        float _3061 = isnan(1.0) ? _819 : (isnan(_819) ? 1.0 : min(_819, 1.0));
        _2859 = (_3061 * _3052) + _2391;
        _2861 = (_3061 * _3054) + _2393;
        _2863 = (_3061 * _3056) + _2395;
        _2865 = ((_3046 * 0.039999999105930328369140625) * _3061) + _2714;
        _2867 = ((_3048 * 0.039999999105930328369140625) * _3061) + _2716;
        _2869 = ((_3050 * 0.039999999105930328369140625) * _3061) + _2718;
    }
    else
    {
        _2859 = _2391;
        _2861 = _2393;
        _2863 = _2395;
        _2865 = _2714;
        _2867 = _2716;
        _2869 = _2718;
    }
    float _4841 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4852 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4863 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _2886 = ((isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2859 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _819))) + ((_2865 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1657)) * cbPerFrame._m0[3u].x);
    float _2887 = ((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2861 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _819))) + ((_2867 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1657)) * cbPerFrame._m0[3u].x);
    float _2888 = ((isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2863 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _819))) + ((_2869 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1657)) * cbPerFrame._m0[3u].x);
    uint _2889 = _794 + 6u;
    float _2897 = _756 / cbSceneParam._m0[86u].x;
    float _2898 = _757 / cbSceneParam._m0[86u].y;
    vec4 _2912 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, (log2((isnan(cbSceneParam._m0[77u].w) ? _738 : (isnan(_738) ? cbSceneParam._m0[77u].w : min(_738, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2914 = _2912.x;
    float _2915 = _2912.y;
    float _2916 = _2912.z;
    float _2917 = _2912.w;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    if (_738 > cbSceneParam._m0[78u].w)
    {
        float _2951 = isnan(_738) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _738 : min(cbSceneParam._m0[80u].w, _738));
        float _2952 = _2951 / _738;
        float _2963 = _2952 * _290;
        float _2964 = _291 * _2952;
        float _2965 = (-0.0) - _2964;
        float _2966 = _2952 * _292;
        float _2968 = (cbSceneParam._m0[77u].w * _2965) / _2951;
        float _2969 = _2968 + cbSceneParam._m0[79u].w;
        float _2970 = cbSceneParam._m0[79u].w - _2964;
        float _2976 = sqrt(((_2963 * _2963) + (_2964 * _2964)) + (_2966 * _2966));
        float _2979 = (1.0 - (cbSceneParam._m0[77u].w / _2951)) * _2976;
        float _2984 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2986 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3163;
        if (abs((_2965 - _2968) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3163 = ((((_2969 > 0.0) ? exp2(_2984 * _2969) : (2.0 - exp2(_2986 * _2969))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2979;
        }
        else
        {
            float _3107 = 1.0 / cbSceneParam._m0[80u].x;
            float _3108 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : max(_2969, _2970));
            float _3109 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : min(_2969, _2970));
            float _3118 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : min(_3108, 0.0));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            _3163 = ((abs(_2976 / _2965) * cbSceneParam._m0[80u].y) * ((((_3118 - _3119) * 2.0) - ((exp2(_2984 * (isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0)))) - exp2(_2984 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))))) * _3107)) - ((exp2(_2986 * _3118) - exp2(_2986 * _3119)) * _3107))) + (_2979 * cbSceneParam._m0[80u].z);
        }
        vec4 _3165 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, 1.0), 0.0);
        float _3174 = exp2((_3163 * (-1.44269502162933349609375)) * (1.0 - _3165.w));
        float _3175 = log2(_3174);
        float _3191 = log2(_2917);
        _2988 = (exp2(_3191 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].x)) * _3165.x) / cbSceneParam._m0[78u].x)) + _2914;
        _2990 = (exp2(_3191 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].y)) * _3165.y) / cbSceneParam._m0[78u].y)) + _2915;
        _2992 = (exp2(_3191 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].z)) * _3165.z) / cbSceneParam._m0[78u].z)) + _2916;
        _2994 = _3174 * _2917;
    }
    else
    {
        _2988 = _2914;
        _2990 = _2915;
        _2992 = _2916;
        _2994 = _2917;
    }
    bool _3201;
    vec4 _3004;
    vec4 _3026;
    float _3028;
    float _3032;
    float _3033;
    float _3034;
    float _3035;
    bool _3045;
    for (;;)
    {
        _3004 = cbMatDynParam._m0[0u];
        float _3006 = roundEven(_3004.y);
        bool _3007 = _3006 == 3.0;
        float _3008 = log2(_2994);
        float _3015 = exp2(_3008 * cbSceneParam._m0[78u].x) * _2886;
        float _3016 = exp2(_3008 * cbSceneParam._m0[78u].y) * _2887;
        float _3017 = exp2(_3008 * cbSceneParam._m0[78u].z) * _2888;
        float _3024 = _745 + (-0.5);
        _3026 = cbMtdParam._m0[1u];
        _3028 = _3026.y * _3024;
        float _3031 = (_3006 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3032 = _3031 * (_3007 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2988)));
        _3033 = _3031 * (_3007 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2990)));
        _3034 = _3031 * (_3007 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2992)));
        _3035 = _3024 * 0.999000012874603271484375;
        _3045 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3045)
        {
            if ((cbInstanceData._m0[_794 + 7u].x + _3035) < 0.5)
            {
                _3201 = true;
                break;
            }
        }
        uint _3142 = _795 + uint(_3004.w);
        if ((cbInstanceData._m0[_3142].w < 1.0) && ((cbInstanceData._m0[_3142].w + _3035) < 0.5))
        {
            _3201 = true;
            break;
        }
        if ((_3028 + 1.0) < _3026.x)
        {
            _3201 = true;
            break;
        }
        _3201 = false;
        break;
    }
    float _3405;
    if (_3201)
    {
        discard_state = true;
        _3405 = 0.0;
    }
    else
    {
        _3405 = cbInstanceData._m0[_2889].w;
    }
    SV_Target.x = _3032;
    SV_Target.y = _3033;
    SV_Target.z = _3034;
    SV_Target.w = _3405;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2889].w;
    discard_exit();
}


