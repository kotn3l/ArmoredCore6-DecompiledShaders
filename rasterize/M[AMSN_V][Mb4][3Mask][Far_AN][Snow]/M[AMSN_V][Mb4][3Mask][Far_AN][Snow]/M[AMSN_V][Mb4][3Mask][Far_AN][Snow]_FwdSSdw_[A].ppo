#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1335;
float _3724;
float _3725;
float _3726;
float _3727;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _269 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _272 = _269.x;
    float _273 = _269.y;
    float _274 = _269.z;
    float _289 = (POSITION_1.w - cbMtdParam._m0[16u].x) * (1.0 / cbMtdParam._m0[14u].y);
    float _3736 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _290 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    vec4 _302 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _304 = _302.x;
    float _305 = _302.y;
    float _306 = _302.z;
    float _313 = (((_272 * cbMtdParam._m0[13u].x) - _304) * _290) + _304;
    float _314 = (((_273 * cbMtdParam._m0[13u].y) - _305) * _290) + _305;
    float _315 = (((_274 * cbMtdParam._m0[13u].z) - _306) * _290) + _306;
    vec4 _337 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _339 = _337.x;
    float _340 = _337.y;
    float _341 = _337.z;
    vec4 _359 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _389 = cbMtdParam._m0[15u].w * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x;
    float _397 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((((1.0 - TEXCOORD_3.x) - _359.x) * 2.0) - _389)) + 1.0;
    float _3747 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _408 = (_398 * ((_339 - _313) + (((cbMtdParam._m0[11u].x * _272) - _339) * _290))) + _313;
    float _409 = (_398 * ((_340 - _314) + (((cbMtdParam._m0[11u].y * _273) - _340) * _290))) + _314;
    float _410 = (_398 * ((_341 - _315) + (((cbMtdParam._m0[11u].z * _274) - _341) * _290))) + _315;
    vec4 _432 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _436 = _432.z;
    float _448 = ((((((1.0 - TEXCOORD_3.y) - _359.y) * 2.0) - _389) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].x) + 1.0;
    float _3758 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _459 = (((_434 - _408) + (((cbMtdParam._m0[10u].x * _272) - _434) * _290)) * _449) + _408;
    float _460 = (((_435 - _409) + (((cbMtdParam._m0[10u].y * _273) - _435) * _290)) * _449) + _409;
    float _461 = (_449 * ((_436 - _410) + (((cbMtdParam._m0[10u].z * _274) - _436) * _290))) + _410;
    vec4 _481 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _483 = _481.x;
    float _484 = _481.y;
    float _485 = _481.z;
    float _497 = ((((((1.0 - TEXCOORD_3.z) - _359.z) * 2.0) - _389) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].y) + 1.0;
    float _3769 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _498 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _508 = (((_483 - _459) + (((cbMtdParam._m0[12u].x * _272) - _483) * _290)) * _498) + _459;
    float _509 = (((_484 - _460) + (((cbMtdParam._m0[12u].y * _273) - _484) * _290)) * _498) + _460;
    float _510 = (_498 * ((_485 - _461) + (((cbMtdParam._m0[12u].z * _274) - _485) * _290))) + _461;
    vec4 _525 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _529 = _525.z;
    vec4 _541 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _543 = _541.x;
    float _544 = _541.y;
    float _545 = _541.z;
    vec4 _567 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _569 = _567.x;
    float _570 = _567.y;
    float _571 = _567.z;
    vec4 _592 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _594 = _592.x;
    float _595 = _592.y;
    float _596 = _592.z;
    vec4 _617 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _619 = _617.x;
    float _620 = _617.y;
    float _621 = _617.z;
    float _628 = ((_543 - _619) * _290) + _619;
    float _629 = ((_544 - _620) * _290) + _620;
    float _630 = ((_545 - _621) * _290) + _621;
    float _637 = (((((_543 - _594) * _290) + _594) - _628) * _398) + _628;
    float _638 = (((((_544 - _595) * _290) + _595) - _629) * _398) + _629;
    float _639 = (((((_545 - _596) * _290) + _596) - _630) * _398) + _630;
    float _646 = (((((_543 - _569) * _290) + _569) - _637) * _449) + _637;
    float _647 = (((((_544 - _570) * _290) + _570) - _638) * _449) + _638;
    float _648 = (((((_545 - _571) * _290) + _571) - _639) * _449) + _639;
    float _660 = (((((((_543 - _527) * _290) + _527) - _646) * _498) + _646) * 2.0) + (-1.0);
    float _662 = (((((((_544 - _528) * _290) + _528) - _647) * _498) + _647) * 2.0) + (-1.0);
    float _663 = dot(vec2(_660, _662), vec2(_660, _662));
    float _3780 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _668 = sqrt(1.0 - (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))));
    float _671 = fma(_668, _241, fma(_662, _234, _660 * _220));
    float _674 = fma(_668, _242, fma(_662, _235, _660 * _221));
    float _677 = fma(_668, _243, fma(_662, _236, _660 * _222));
    float _686 = exp2(log2(inversesqrt(dot(vec3(_671, _674, _677), vec3(_671, _674, _677))) * _674) * cbMtdParam._m0[15u].z) * cbMtdParam._m0[14u].z;
    float _3791 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _688 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _690 = 3.0 - (_688 * 2.0);
    float _695 = _688 * _688;
    float _702 = ((_695 * (cbMtdParam._m0[9u].x - _508)) * _690) + _508;
    float _703 = ((_695 * (cbMtdParam._m0[9u].y - _509)) * _690) + _509;
    float _704 = ((_695 * (cbMtdParam._m0[9u].z - _510)) * _690) + _510;
    float _706 = ((((((_545 - _529) * _290) + _529) - _648) * _498) + _648) + cbMtdParam._m0[14u].w;
    float _719 = (((cbMtdParam._m0[16u].y * _660) - _660) * _290) + _660;
    float _720 = (((cbMtdParam._m0[16u].z * _662) - _662) * _290) + _662;
    float _721 = (((cbMtdParam._m0[16u].w * _668) - _668) * _290) + _668;
    vec4 _734 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _740 = (_734.x * 2.0) + (-1.0);
    float _741 = (_734.y * 2.0) + (-1.0);
    float _742 = dot(vec2(_740, _741), vec2(_740, _741));
    float _3813 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _757 = ((_695 * (_740 - _719)) * _690) + _719;
    float _758 = ((_695 * (_741 - _720)) * _690) + _720;
    float _759 = ((_695 * (sqrt(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) - _721)) * _690) + _721;
    float _762 = fma(_759, _241, fma(_758, _234, _757 * _220));
    float _765 = fma(_759, _242, fma(_758, _235, _757 * _221));
    float _768 = fma(_759, _243, fma(_758, _236, _757 * _222));
    float _772 = inversesqrt(dot(vec3(_762, _765, _768), vec3(_762, _765, _768)));
    float _773 = _772 * _762;
    float _774 = _772 * _765;
    float _775 = _772 * _768;
    float _3824 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _776 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _3846 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3857 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _795 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _845 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _835);
    float _846 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _835);
    float _847 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _835);
    float _851 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
    float _852 = _845 * _851;
    float _853 = _846 * _851;
    float _854 = _847 * _851;
    vec4 _859 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _861 = _859.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1014 = sqrt(((_845 * _845) + (_846 * _846)) + (_847 * _847));
        float _1020 = (cbMatDynParam._m0[5u].x * _1014) + cbMatDynParam._m0[5u].y;
        float _3868 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1025 = (cbMatDynParam._m0[5u].z * _1014) + cbMatDynParam._m0[5u].w;
        float _3879 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) - _1021)) + _1021) < ((_861 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _872 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _873 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _891 = fma(_775, cbSceneParam._m0[5u].z, fma(_774, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _773));
    float _894 = fma(_775, cbSceneParam._m0[6u].z, fma(_774, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _773));
    float _897 = fma(_775, cbSceneParam._m0[7u].z, fma(_774, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _773));
    uint _910 = uint(roundEven(NORMAL.w)) * 13u;
    uint _911 = _910 + 9u;
    uint _912 = _911 + uint(cbMatDynParam._m0[0u].w);
    float _918 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * cbInstanceData._m0[_912].x;
    float _919 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * cbInstanceData._m0[_912].y;
    float _920 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_912].z;
    float _3890 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    vec4 _932 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _872, cbSceneParam._m0[86u].y * _873));
    float _935 = _932.x * TEXCOORD_3.w;
    float _936 = dot(vec3(_773, _774, _775), vec3(_852, _853, _854));
    float _939 = _936 * 2.0;
    float _943 = (_939 * _773) - _852;
    float _944 = (_939 * _774) - _853;
    float _945 = (_939 * _775) - _854;
    float _949 = abs(dot(vec3(_852, _853, _854), vec3(_773, _774, _775)));
    float _3923 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _951 = sqrt(_776);
    float _963 = exp2((_951 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_951 * 3.0));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1334;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1059 = fma(_1003, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _995));
        float _1063 = fma(_1003, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _995));
        float _1067 = fma(_1003, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _995));
        float _1092 = _995 + _773;
        float _1093 = _999 + _774;
        float _1094 = _1003 + _775;
        float _1104 = fma(_1094, cbModelParam._m0[26u].z, fma(_1093, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1092)) - _1059;
        float _1105 = fma(_1094, cbModelParam._m0[27u].z, fma(_1093, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1092)) - _1063;
        float _1106 = fma(_1094, cbModelParam._m0[28u].z, fma(_1093, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1092)) - _1067;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1059 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1063 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[34u].z) + ((((((_1067 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1162 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1128.x + (-0.5));
        float _1164 = _1162 * (_1128.y + (-0.5));
        float _1165 = _1162 * (_1128.z + (-0.5));
        float _1172 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1135.x + (-0.5));
        float _1174 = _1172 * (_1135.y + (-0.5));
        float _1175 = _1172 * (_1135.z + (-0.5));
        float _1182 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1142.x + (-0.5));
        float _1184 = _1182 * (_1142.y + (-0.5));
        float _1185 = _1182 * (_1142.z + (-0.5));
        float _1192 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1149.x + (-0.5));
        float _1194 = _1192 * (_1149.y + (-0.5));
        float _1195 = _1192 * (_1149.z + (-0.5));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = _1163 * 0.5;
        float _1200 = _1173 * 0.5;
        float _1201 = _1183 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1216 = (dot(vec3(_773, _774, _775), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1226 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3971 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1228 + 1.0))) + _1233) * _1196;
        float _1243 = _1164 * 0.5;
        float _1244 = _1174 * 0.5;
        float _1245 = _1184 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_773, _774, _775), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4004 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1270 + 1.0))) + _1275) * _1197;
        float _1285 = _1165 * 0.5;
        float _1286 = _1175 * 0.5;
        float _1287 = _1185 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_773, _774, _775), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4037 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1312 + 1.0))) + _1317) * _1198;
        _1334 = _1165;
        _1336 = _1164;
        _1337 = _1163;
        _1338 = _1175;
        _1339 = _1174;
        _1340 = _1173;
        _1341 = _1185;
        _1342 = _1184;
        _1343 = _1183;
        _1344 = _1198;
        _1345 = _1197;
        _1346 = _1196;
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
    }
    else
    {
        _1334 = _1335;
        _1336 = _1335;
        _1337 = _1335;
        _1338 = _1335;
        _1339 = _1335;
        _1340 = _1335;
        _1341 = _1335;
        _1342 = _1335;
        _1343 = _1335;
        _1344 = _1335;
        _1345 = _1335;
        _1346 = _1335;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1378 = fma(_1003, cbModelParam._m0[30u].z, fma(_999, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _995));
        float _1382 = fma(_1003, cbModelParam._m0[31u].z, fma(_999, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _995));
        float _1386 = fma(_1003, cbModelParam._m0[32u].z, fma(_999, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _995));
        float _1409 = _995 + _773;
        float _1410 = _999 + _774;
        float _1411 = _1003 + _775;
        float _1421 = fma(_1411, cbModelParam._m0[30u].z, fma(_1410, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1409)) - _1378;
        float _1422 = fma(_1411, cbModelParam._m0[31u].z, fma(_1410, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1409)) - _1382;
        float _1423 = fma(_1411, cbModelParam._m0[32u].z, fma(_1410, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1409)) - _1386;
        float _1427 = inversesqrt(dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423)));
        float _1440 = ((_1427 * _1421) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1378 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1427 * _1422) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1382 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1427 * _1423) / cbModelParam._m0[35u].z) + ((((((_1386 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        float _1477 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1444.x + (-0.5));
        float _1479 = _1477 * (_1444.y + (-0.5));
        float _1480 = _1477 * (_1444.z + (-0.5));
        float _1487 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1451.x + (-0.5));
        float _1489 = _1487 * (_1451.y + (-0.5));
        float _1490 = _1487 * (_1451.z + (-0.5));
        float _1497 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1458.x + (-0.5));
        float _1499 = _1497 * (_1458.y + (-0.5));
        float _1500 = _1497 * (_1458.z + (-0.5));
        float _1507 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1465.x + (-0.5));
        float _1509 = _1507 * (_1465.y + (-0.5));
        float _1510 = _1507 * (_1465.z + (-0.5));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = _1478 * 0.5;
        float _1515 = _1488 * 0.5;
        float _1516 = _1498 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_773, _774, _775), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4100 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1541 + 1.0))) + _1546) * _1511;
        float _1556 = _1479 * 0.5;
        float _1557 = _1489 * 0.5;
        float _1558 = _1499 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_773, _774, _775), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4133 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1583 + 1.0))) + _1588) * _1512;
        float _1598 = _1480 * 0.5;
        float _1599 = _1490 * 0.5;
        float _1600 = _1500 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_773, _774, _775), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4166 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1625 + 1.0))) + _1630) * _1513;
        _1647 = _1480;
        _1648 = _1479;
        _1649 = _1478;
        _1650 = _1490;
        _1651 = _1489;
        _1652 = _1488;
        _1653 = _1500;
        _1654 = _1499;
        _1655 = _1498;
        _1656 = _1513;
        _1657 = _1512;
        _1658 = _1511;
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
    }
    else
    {
        _1647 = _1335;
        _1648 = _1335;
        _1649 = _1335;
        _1650 = _1335;
        _1651 = _1335;
        _1652 = _1335;
        _1653 = _1335;
        _1654 = _1335;
        _1655 = _1335;
        _1656 = _1335;
        _1657 = _1335;
        _1658 = _1335;
        _1659 = 0.0;
        _1660 = 0.0;
        _1661 = 0.0;
    }
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1347)) + _1347;
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1348)) + _1348;
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1349)) + _1349;
    float _1694 = fma(_1673, cbSceneParam._m0[89u].z, fma(_1672, cbSceneParam._m0[89u].y, _1671 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1673, cbSceneParam._m0[90u].z, fma(_1672, cbSceneParam._m0[90u].y, _1671 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1673, cbSceneParam._m0[91u].z, fma(_1672, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1671));
    float _1715 = _943 * 0.5;
    float _1716 = _944 * 0.5;
    float _1717 = _945 * 0.5;
    float _1718 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1721 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1724 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1758;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1731 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1334, _1338, _1341, _1344));
        float _1735 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1739 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1746 = dot(vec4(cbModelParam._m0[39u]), vec4(_1715, _1716, _1717, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1746) ? 0.0 : (isnan(0.0) ? _1746 : max(0.0, _1746))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1769;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1760 = dot(vec4(cbModelParam._m0[40u]), vec4(_1715, _1716, _1717, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1760) ? 0.0 : (isnan(0.0) ? _1760 : max(0.0, _1760))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1773 = (_1769 * cbModelParam._m0[1u].x) + (_1758 * (1.0 - cbModelParam._m0[1u].x));
    float _1783 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _776);
    float _1784 = isnan(_1783) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1783 : min(cbModelParam._m0[25u].z, _1783));
    float _1864;
    float _1866;
    float _1868;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1831 = fma(_1003, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _995)) + cbModelParam._m0[13u].w;
        float _1835 = fma(_1003, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _995)) + cbModelParam._m0[14u].w;
        float _1839 = fma(_1003, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _995)) + cbModelParam._m0[15u].w;
        float _1842 = fma(_945, cbModelParam._m0[13u].z, fma(_944, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943));
        float _1845 = fma(_945, cbModelParam._m0[14u].z, fma(_944, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943));
        float _1848 = fma(_945, cbModelParam._m0[15u].z, fma(_944, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943));
        float _1876;
        if (_1842 > 0.0)
        {
            _1876 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1876 = frontier_phi_19_17_ladder;
        }
        float _2101;
        if (_1845 > 0.0)
        {
            _2101 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2101 = frontier_phi_28_24_ladder;
        }
        float _2347;
        if (_1848 > 0.0)
        {
            _2347 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2347 = frontier_phi_40_35_ladder;
        }
        float _2349 = isnan(_2101) ? _1876 : (isnan(_1876) ? _2101 : min(_1876, _2101));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1842) + _1831;
        float _2355 = (_2350 * _1845) + _1835;
        float _2356 = (_2350 * _1848) + _1839;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2359 = (-1.0) - _2357;
        float _2361 = _2357 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2356 > _2361) || ((_2356 < _2359) || ((_2355 > _2361) || ((_2355 < _2359) || ((_2354 < _2359) || (_2354 > _2361))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2480 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2356, cbModelParam._m0[9u].z, fma(_2355, cbModelParam._m0[9u].y, _2354 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2356, cbModelParam._m0[10u].z, fma(_2355, cbModelParam._m0[10u].y, _2354 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2356, cbModelParam._m0[11u].z, fma(_2355, cbModelParam._m0[11u].y, _2354 * cbModelParam._m0[11u].x))), _1784);
            frontier_phi_18_40_ladder = _2480.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2480.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2480.x * cbModelParam._m0[1u].y;
        }
        _1864 = frontier_phi_18_40_ladder_2;
        _1866 = frontier_phi_18_40_ladder_1;
        _1868 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1852 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_943, _944, _945), _1784);
        _1864 = _1852.x * cbModelParam._m0[1u].y;
        _1866 = _1852.y * cbModelParam._m0[1u].y;
        _1868 = _1852.z * cbModelParam._m0[1u].y;
    }
    float _1872 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _776);
    float _1873 = isnan(_1872) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1872 : min(cbModelParam._m0[25u].w, _1872));
    float _1966;
    float _1968;
    float _1970;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1930 = fma(_1003, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _995)) + cbModelParam._m0[21u].w;
        float _1934 = fma(_1003, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _995)) + cbModelParam._m0[22u].w;
        float _1938 = fma(_1003, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _995)) + cbModelParam._m0[23u].w;
        float _1941 = fma(_945, cbModelParam._m0[21u].z, fma(_944, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943));
        float _1944 = fma(_945, cbModelParam._m0[22u].z, fma(_944, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943));
        float _1947 = fma(_945, cbModelParam._m0[23u].z, fma(_944, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943));
        float _2106;
        if (_1941 > 0.0)
        {
            _2106 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2106 = frontier_phi_30_26_ladder;
        }
        float _2374;
        if (_1944 > 0.0)
        {
            _2374 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2374 = frontier_phi_42_37_ladder;
        }
        float _2579;
        if (_1947 > 0.0)
        {
            _2579 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2579 = frontier_phi_51_48_ladder;
        }
        float _2581 = isnan(_2374) ? _2106 : (isnan(_2106) ? _2374 : min(_2106, _2374));
        float _2582 = isnan(_2579) ? _2581 : (isnan(_2581) ? _2579 : min(_2581, _2579));
        float _2586 = (_2582 * _1941) + _1930;
        float _2587 = (_2582 * _1944) + _1934;
        float _2588 = (_2582 * _1947) + _1938;
        float _2589 = _2582 * 9.9999997473787516355514526367188e-05;
        float _2590 = (-1.0) - _2589;
        float _2592 = _2589 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2588 > _2592) || ((_2588 < _2590) || ((_2587 > _2592) || ((_2587 < _2590) || ((_2586 < _2590) || (_2586 > _2592))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2588, cbModelParam._m0[17u].z, fma(_2587, cbModelParam._m0[17u].y, _2586 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2588, cbModelParam._m0[18u].z, fma(_2587, cbModelParam._m0[18u].y, _2586 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2588, cbModelParam._m0[19u].z, fma(_2587, cbModelParam._m0[19u].y, _2586 * cbModelParam._m0[19u].x))), _1873);
            frontier_phi_27_51_ladder = _2786.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2786.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2786.x * cbModelParam._m0[1u].z;
        }
        _1966 = frontier_phi_27_51_ladder_2;
        _1968 = frontier_phi_27_51_ladder_1;
        _1970 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_943, _944, _945), _1873);
        _1966 = _1950.x * cbModelParam._m0[1u].z;
        _1968 = _1950.y * cbModelParam._m0[1u].z;
        _1970 = _1950.z * cbModelParam._m0[1u].z;
    }
    float _1982 = ((((1.0 - _963) * ((_951 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_963 * _951)) * _935;
    float _1983 = _1982 * ((cbModelParam._m0[1u].w * (_1966 - _1864)) + _1864);
    float _1984 = _1982 * ((cbModelParam._m0[1u].w * (_1968 - _1866)) + _1866);
    float _1985 = _1982 * ((cbModelParam._m0[1u].w * (_1970 - _1868)) + _1868);
    float _1988 = fma(_1985, cbSceneParam._m0[89u].z, fma(_1984, cbSceneParam._m0[89u].y, _1983 * cbSceneParam._m0[89u].x));
    float _1991 = fma(_1985, cbSceneParam._m0[90u].z, fma(_1984, cbSceneParam._m0[90u].y, _1983 * cbSceneParam._m0[90u].x));
    float _1994 = fma(_1985, cbSceneParam._m0[91u].z, fma(_1984, cbSceneParam._m0[91u].y, _1983 * cbSceneParam._m0[91u].x));
    vec4 _2002 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_872, _873));
    float _2004 = _2002.w;
    float _2016 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2004);
    float _2017 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2004);
    float _2018 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2004);
    uvec4 _2022 = floatBitsToUint(cbInstanceData._m0[_910 + 5u]);
    uint _2024 = _2022.x * 14u;
    uint _2025 = _2024 + 13u;
    float _2032 = _935 + (-1.0);
    float _2037 = (cbLight._m0[_2025].x * _2032) + 1.0;
    float _2038 = (cbLight._m0[_2025].y * _2032) + 1.0;
    float _2039 = (cbLight._m0[_2025].z * _2032) + 1.0;
    float _2040 = (cbLight._m0[_2025].w * _2032) + 1.0;
    uint _2041 = _2024 + 5u;
    float _2047 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
    uint _2051 = _2024 + 4u;
    float _2060 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
    uint _2064 = _2024 | 1u;
    float _2075 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_773, _774, _775));
    float _2078 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_773, _774, _775));
    float _4302 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _4313 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2083 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * 0.3183098733425140380859375;
    float _2085 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * 0.3183098733425140380859375;
    float _2092 = ((cbLight._m0[_2041].x * _2047) * _2085) + (((cbLight._m0[_2051].x * _2016) * _2060) * _2083);
    float _2093 = ((_2047 * cbLight._m0[_2041].y) * _2085) + (((cbLight._m0[_2051].y * _2017) * _2060) * _2083);
    float _2094 = ((_2047 * cbLight._m0[_2041].z) * _2085) + (((cbLight._m0[_2051].z * _2018) * _2060) * _2083);
    uvec4 _2098 = floatBitsToUint(cbLight._m0[_2024 + 12u]);
    bool _2100 = _2098.x == 0u;
    float _2111;
    float _2113;
    float _2115;
    if (_2100)
    {
        _2111 = _2092;
        _2113 = _2093;
        _2115 = _2094;
    }
    else
    {
        uint _2119 = _2024 + 6u;
        float _2135 = (dot(vec3(cbLight._m0[_2024 + 2u].xyz), vec3(_773, _774, _775)) * 0.5) + 0.5;
        float _2136 = _2135 * _2135;
        float _4324 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2137 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2138 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2111 = (((cbLight._m0[_2119].x * 0.3183098733425140380859375) * _2137) * _2138) + _2092;
        _2113 = (((cbLight._m0[_2119].y * 0.3183098733425140380859375) * _2137) * _2138) + _2093;
        _2115 = (((cbLight._m0[_2119].z * 0.3183098733425140380859375) * _2137) * _2138) + _2094;
    }
    bool _2118 = _2098.y == 0u;
    float _2156;
    float _2158;
    float _2160;
    if (_2118)
    {
        _2156 = _2111;
        _2158 = _2113;
        _2160 = _2115;
    }
    else
    {
        uint _2318 = _2024 + 7u;
        float _2334 = (dot(vec3(cbLight._m0[_2024 + 3u].xyz), vec3(_773, _774, _775)) * 0.5) + 0.5;
        float _2335 = _2334 * _2334;
        float _4340 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2336 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2337 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2156 = (((cbLight._m0[_2318].x * 0.3183098733425140380859375) * _2336) * _2337) + _2111;
        _2158 = (((cbLight._m0[_2318].y * 0.3183098733425140380859375) * _2336) * _2337) + _2113;
        _2160 = (((cbLight._m0[_2318].z * 0.3183098733425140380859375) * _2336) * _2337) + _2115;
    }
    uint _2163 = _2024 + 8u;
    float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _776) * 0.949999988079071044921875);
    float _2177 = _2176 * _2176;
    float _2178 = cbLight._m0[_2024].x + _852;
    float _2179 = cbLight._m0[_2024].y + _853;
    float _2180 = cbLight._m0[_2024].z + _854;
    float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
    float _2185 = _2184 * _2178;
    float _2186 = _2184 * _2179;
    float _2187 = _2184 * _2180;
    float _2188 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2024].xyz));
    float _4356 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _4367 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _2192 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2193 = dot(vec3(_773, _774, _775), vec3(_2185, _2186, _2187));
    float _4378 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2185, _2186, _2187));
    float _4389 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2177 * _2177;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2216 = (exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2217 = 1.0 - _2177;
    float _2228 = (0.5 / (((_2192 * ((_2191 * _2217) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2217) + _2177) * _2191))) * _2191;
    float _4400 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2230 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    uint _2244 = _2024 + 9u;
    float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _776) * 0.949999988079071044921875);
    float _2256 = _2255 * _2255;
    float _2257 = cbLight._m0[_2064].x + _852;
    float _2258 = cbLight._m0[_2064].y + _853;
    float _2259 = cbLight._m0[_2064].z + _854;
    float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
    float _2264 = _2263 * _2257;
    float _2265 = _2263 * _2258;
    float _2266 = _2263 * _2259;
    float _2267 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2064].xyz));
    float _4411 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2271 = dot(vec3(_773, _774, _775), vec3(_2264, _2265, _2266));
    float _4422 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2275 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2264, _2265, _2266));
    float _4433 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2279 = _2256 * _2256;
    float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
    float _2292 = (exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2293 = 1.0 - _2256;
    float _2303 = (0.5 / (((_2192 * ((_2270 * _2293) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2293) + _2256) * _2270))) * _2270;
    float _4444 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
    float _2315 = (((_2292 * cbLight._m0[_2244].x) * _2305) * _2047) + ((((cbLight._m0[_2163].x * _2016) * _2216) * _2230) * _2060);
    float _2316 = (((_2292 * cbLight._m0[_2244].y) * _2305) * _2047) + ((((cbLight._m0[_2163].y * _2017) * _2216) * _2230) * _2060);
    float _2317 = (((_2292 * cbLight._m0[_2244].z) * _2305) * _2047) + ((((cbLight._m0[_2163].z * _2018) * _2216) * _2230) * _2060);
    float _2379;
    float _2381;
    float _2383;
    if (_2100)
    {
        _2379 = _2315;
        _2381 = _2316;
        _2383 = _2317;
    }
    else
    {
        uint _2385 = _2024 + 2u;
        uint _2389 = _2024 + 10u;
        float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2385].w)) * _776) * 0.949999988079071044921875);
        float _2404 = _2403 * _2403;
        float _2405 = cbLight._m0[_2385].x + _852;
        float _2406 = cbLight._m0[_2385].y + _853;
        float _2407 = cbLight._m0[_2385].z + _854;
        float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
        float _2412 = _2411 * _2405;
        float _2413 = _2411 * _2406;
        float _2414 = _2411 * _2407;
        float _2415 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2385].xyz));
        float _4455 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2419 = dot(vec3(_773, _774, _775), vec3(_2412, _2413, _2414));
        float _4466 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2423 = dot(vec3(cbLight._m0[_2385].xyz), vec3(_2412, _2413, _2414));
        float _4477 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2427 = _2404 * _2404;
        float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
        float _2440 = (exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2441 = 1.0 - _2404;
        float _2451 = (0.5 / (((_2192 * ((_2418 * _2441) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2441) + _2404) * _2418))) * _2418;
        float _4488 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2453 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
        float _2454 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2379 = (((_2440 * cbLight._m0[_2389].x) * _2453) * _2454) + _2315;
        _2381 = (((_2440 * cbLight._m0[_2389].y) * _2453) * _2454) + _2316;
        _2383 = (((_2440 * cbLight._m0[_2389].z) * _2453) * _2454) + _2317;
    }
    float _2489;
    float _2491;
    float _2493;
    if (_2118)
    {
        _2489 = _2379;
        _2491 = _2381;
        _2493 = _2383;
    }
    else
    {
        uint _2500 = _2024 + 3u;
        uint _2504 = _2024 + 11u;
        float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _776) * 0.949999988079071044921875);
        float _2519 = _2518 * _2518;
        float _2520 = cbLight._m0[_2500].x + _852;
        float _2521 = cbLight._m0[_2500].y + _853;
        float _2522 = cbLight._m0[_2500].z + _854;
        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
        float _2527 = _2526 * _2520;
        float _2528 = _2526 * _2521;
        float _2529 = _2526 * _2522;
        float _2530 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2500].xyz));
        float _4504 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2534 = dot(vec3(_773, _774, _775), vec3(_2527, _2528, _2529));
        float _4515 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2538 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2527, _2528, _2529));
        float _4526 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2542 = _2519 * _2519;
        float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
        float _2555 = (exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2556 = 1.0 - _2519;
        float _2566 = (0.5 / (((_2192 * ((_2533 * _2556) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2556) + _2519) * _2533))) * _2533;
        float _4537 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2568 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
        float _2569 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2489 = (((_2555 * cbLight._m0[_2504].x) * _2568) * _2569) + _2379;
        _2491 = (((_2555 * cbLight._m0[_2504].y) * _2568) * _2569) + _2381;
        _2493 = (((_2555 * cbLight._m0[_2504].z) * _2568) * _2569) + _2383;
    }
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    if (_2022.y == 0u)
    {
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2644;
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2644;
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2644;
        uvec4 _2659 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2660 = _2659.x;
        uint _2671 = uint((float(_2659.y) * floor(float(uint(cbSceneParam._m0[85u].y * _873) / _2660))) + floor(float(uint(cbSceneParam._m0[85u].x * _872) / _2660)));
        float _2681 = (log2(_2647 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2682 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        uint _2685 = uint(isnan(14.0) ? _2682 : (isnan(_2682) ? 14.0 : min(_2682, 14.0)));
        uvec4 _2690 = texelFetch(g_lightClusterGridBuffer, int(((_2685 << 2u) + (_2671 << 6u)) >> 2u));
        uint _2691 = _2690.x;
        uint _2692 = _2659.z;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        if (((((1u << ((_2692 >> 4u) & 15u)) + 4294967295u) & _2691) == 0u) || ((_2692 & 240u) == 0u))
        {
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
        }
        else
        {
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            uint _2949 = 0u;
            uint _2958;
            bool _2959;
            for (;;)
            {
                _2958 = texelFetch(g_lightClassification, int((((_2685 << 5u) + (_2671 << 9u)) + (_2949 << 2u)) >> 2u)).x;
                _2959 = _2958 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2959)
                {
                    frontier_phi_68_pred = _2945;
                    frontier_phi_68_pred_1 = _2948;
                    frontier_phi_68_pred_2 = _2947;
                    frontier_phi_68_pred_3 = _2946;
                    frontier_phi_68_pred_4 = _2944;
                    frontier_phi_68_pred_5 = _2943;
                }
                else
                {
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    uint _3094;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2958;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    for (;;)
                    {
                        uint _3098 = uint(findLSB(_3094)) + (_2949 << 5u);
                        uint _3095 = (_3094 + 4294967295u) & _3094;
                        uint _3100 = _3098 * 48u;
                        vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 3u)).x));
                        uint _3120 = (_3098 * 48u) + 4u;
                        vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3120)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 3u)).x));
                        uint _3139 = (_3098 * 48u) + 8u;
                        vec3 _3150 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x));
                        float _3154 = _3114.x - _2645;
                        float _3155 = _3114.y - _2646;
                        float _3156 = _3114.z - _2647;
                        float _3157 = dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156));
                        float _3160 = inversesqrt(_3157);
                        float _3161 = _3160 * _3154;
                        float _3162 = _3160 * _3155;
                        float _3163 = _3160 * _3156;
                        float _3164 = dot(vec3(_891, _894, _897), vec3(_3161, _3162, _3163));
                        float _3169 = 1.0 - (_3157 * _3114.w);
                        float _4563 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3170 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3171 = sqrt(_3157) * _3133.w;
                        float _3174 = 1.39999997615814208984375 / (_3171 + 1.39999997615814208984375);
                        float _3175 = _3174 * _3174;
                        float _3178 = ((1.0 - _3175) * _3164) + _3175;
                        float _3181 = _3171 * _3171;
                        float _3185 = ((isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0))) * _3170) / ((_3181 * 0.699999988079071044921875) + 1.0);
                        float _3189 = (-0.0) - _2645;
                        float _3190 = (-0.0) - _2646;
                        float _3191 = (-0.0) - _2647;
                        float _3195 = inversesqrt(dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191)));
                        float _3196 = _3195 * _3189;
                        float _3197 = _3195 * _3190;
                        float _3198 = _3195 * _3191;
                        float _3206 = exp2(log2(1.0 / ((_3181 * 3.5) + 5.0)) * 0.25);
                        float _3207 = 1.0 - _951;
                        float _3214 = sqrt(1.0 - ((1.0 - (_3207 * _3207)) * (1.0 - (_3206 * _3206))));
                        float _3215 = _3214 * _3214;
                        float _3216 = _3215 * _3215;
                        float _3217 = _3196 + _3161;
                        float _3218 = _3197 + _3162;
                        float _3219 = _3198 + _3163;
                        float _3223 = inversesqrt(dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219)));
                        float _3227 = dot(vec3(_891, _894, _897), vec3(_3196, _3197, _3198));
                        float _4579 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3230 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                        float _3231 = dot(vec3(_891, _894, _897), vec3(_3223 * _3217, _3223 * _3218, _3223 * _3219));
                        float _4590 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3234 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3238 = ((_3234 * _3234) * (_3216 + (-1.0))) + 1.0;
                        float _3239 = _3174 * _3215;
                        float _3240 = _3239 * _3239;
                        float _3243 = ((1.0 - _3240) * _3164) + _3240;
                        float _4601 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3244 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3245 = 1.0 - _3215;
                        float _3255 = (0.5 / (((_3244 * ((_3230 * _3245) + _3215)) + 9.9999999392252902907785028219223e-09) + (((_3244 * _3245) + _3215) * _3230))) * _3244;
                        float _4612 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3266 = (((_3216 * 3.1415927410125732421875) * (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) / ((_3238 * _3238) * ((_3181 * 2.1991131305694580078125) + 3.141590118408203125))) * _3170;
                        _3018 = (_3185 * _3133.x) + _3091;
                        _3019 = (_3185 * _3133.y) + _3092;
                        _3020 = (_3185 * _3133.z) + _3093;
                        _3015 = (_3266 * _3150.x) + _3088;
                        _3016 = (_3266 * _3150.y) + _3089;
                        _3017 = (_3266 * _3150.z) + _3090;
                        if (_3095 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3095;
                        }
                    }
                    frontier_phi_68_pred = _3017;
                    frontier_phi_68_pred_1 = _3020;
                    frontier_phi_68_pred_2 = _3019;
                    frontier_phi_68_pred_3 = _3018;
                    frontier_phi_68_pred_4 = _3016;
                    frontier_phi_68_pred_5 = _3015;
                }
                _2796 = frontier_phi_68_pred;
                _2802 = frontier_phi_68_pred_1;
                _2800 = frontier_phi_68_pred_2;
                _2798 = frontier_phi_68_pred_3;
                _2794 = frontier_phi_68_pred_4;
                _2792 = frontier_phi_68_pred_5;
                uint _2950 = _2949 + 1u;
                if (_2950 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2943 = _2792;
                    _2944 = _2794;
                    _2945 = _2796;
                    _2946 = _2798;
                    _2947 = _2800;
                    _2948 = _2802;
                    _2949 = _2950;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
        }
        uvec4 _2805 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2806 = _2805.z;
        uint _2808 = (_2806 >> 8u) & 15u;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        if (((4294967295u << _2808) & _2691) == 0u)
        {
            _2911 = _2791;
            _2913 = _2793;
            _2915 = _2795;
            _2917 = _2797;
            _2919 = _2799;
            _2921 = _2801;
        }
        else
        {
            float _2936 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
            float _2937 = _2936 * _2645;
            float _2938 = _2936 * _2646;
            float _2939 = _2936 * _2647;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2808 < ((_2806 >> 12u) & 15u))
            {
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _3071 = _2791;
                float _3072 = _2793;
                float _3073 = _2795;
                float _3074 = _2797;
                float _3075 = _2799;
                float _3076 = _2801;
                uint _3077 = _2808;
                uint _3086;
                bool _3087;
                for (;;)
                {
                    _3086 = texelFetch(g_lightClassification, int((((_2685 << 5u) + (_2671 << 9u)) + (_3077 << 2u)) >> 2u)).x;
                    _3087 = _3086 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3087)
                    {
                        frontier_phi_79_pred = _3076;
                        frontier_phi_79_pred_1 = _3075;
                        frontier_phi_79_pred_2 = _3074;
                        frontier_phi_79_pred_3 = _3073;
                        frontier_phi_79_pred_4 = _3072;
                        frontier_phi_79_pred_5 = _3071;
                    }
                    else
                    {
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3293 = _3071;
                        float _3294 = _3072;
                        float _3295 = _3073;
                        float _3296 = _3074;
                        float _3297 = _3075;
                        float _3298 = _3076;
                        uint _3299 = _3086;
                        uint _3300;
                        vec4 _3325;
                        float _3326;
                        vec4 _3341;
                        vec3 _3353;
                        vec4 _3368;
                        vec4 _3384;
                        float _3431;
                        bool _3432;
                        for (;;)
                        {
                            uint _3310 = ((_3077 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3299));
                            _3300 = (_3299 + 4294967295u) & _3299;
                            uint _3312 = _3310 * 40u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            _3326 = _3325.w;
                            uint _3328 = (_3310 * 40u) + 4u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3343 = (_3310 * 40u) + 8u;
                            _3353 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x));
                            uint _3355 = (_3310 * 40u) + 16u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3371 = (_3310 * 40u) + 20u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3387 = (_3310 * 40u) + 24u;
                            vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3406 = (_3310 * 40u) + 28u;
                            vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            _3431 = fma(_2647, _3419.z, fma(_2646, _3419.y, _3419.x * _2645)) + _3419.w;
                            _3432 = !((fma(_2647, _3400.z, fma(_2646, _3400.y, _3400.x * _2645)) + _3400.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3432)
                            {
                                float _3459 = _3325.x - _2645;
                                float _3460 = _3325.y - _2646;
                                float _3461 = _3325.z - _2647;
                                float _3462 = dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461));
                                float _3465 = inversesqrt(_3462);
                                float _3466 = _3465 * _3459;
                                float _3467 = _3465 * _3460;
                                float _3468 = _3465 * _3461;
                                float _3472 = 1.0 - (_3462 / (_3326 * _3326));
                                float _4623 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                                float _3477 = sqrt(_3462) * _3341.w;
                                float _3479 = 1.39999997615814208984375 / (_3477 + 1.39999997615814208984375);
                                float _3480 = _3479 * _3479;
                                float _3483 = ((1.0 - _3480) * dot(vec3(_3466, _3467, _3468), vec3(_891, _894, _897))) + _3480;
                                float _3486 = _3477 * _3477;
                                float _3490 = (fma(_2647, _3368.z, fma(_2646, _3368.y, _3368.x * _2645)) + _3368.w) / _3431;
                                float _3491 = (fma(_2647, _3384.z, fma(_2646, _3384.y, _3384.x * _2645)) + _3384.w) / _3431;
                                float _3495 = 1.0 - dot(vec2(_3490, _3491), vec2(_3490, _3491));
                                float _4639 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3497 = _3496 * (((isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0))) * _3473) / ((_3486 * 0.699999988079071044921875) + 1.0));
                                float _3509 = exp2(log2(1.0 / ((_3486 * 3.5) + 5.0)) * 0.25);
                                float _3510 = 1.0 - _951;
                                float _3517 = sqrt(1.0 - ((1.0 - (_3510 * _3510)) * (1.0 - (_3509 * _3509))));
                                float _3518 = _3517 * _3517;
                                float _3519 = _3518 * _3518;
                                float _3520 = _3466 - _2937;
                                float _3521 = _3467 - _2938;
                                float _3522 = _3468 - _2939;
                                float _3526 = inversesqrt(dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522)));
                                float _3530 = dot(vec3(_891, _894, _897), vec3((-0.0) - _2937, (-0.0) - _2938, (-0.0) - _2939));
                                float _4650 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3533 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3534 = dot(vec3(_891, _894, _897), vec3(_3526 * _3520, _3526 * _3521, _3526 * _3522));
                                float _4661 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3537 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3541 = ((_3537 * _3537) * (_3519 + (-1.0))) + 1.0;
                                float _3542 = _3479 * _3518;
                                float _3543 = _3542 * _3542;
                                float _3549 = ((1.0 - _3543) * dot(vec3(_891, _894, _897), vec3(_3466, _3467, _3468))) + _3543;
                                float _4672 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3551 = 1.0 - _3518;
                                float _3561 = (0.5 / (((_3550 * ((_3533 * _3551) + _3518)) + 9.9999999392252902907785028219223e-09) + (((_3550 * _3551) + _3518) * _3533))) * _3550;
                                float _4683 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3571 = (_3496 * _3473) * (((_3519 * 3.1415927410125732421875) * (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) / ((_3541 * _3541) * ((_3486 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3497 * _3341.z;
                                frontier_phi_85_pred_1 = _3497 * _3341.y;
                                frontier_phi_85_pred_2 = _3497 * _3341.x;
                                frontier_phi_85_pred_3 = _3571 * _3353.z;
                                frontier_phi_85_pred_4 = _3571 * _3353.y;
                                frontier_phi_85_pred_5 = _3571 * _3353.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3580 = frontier_phi_85_pred;
                            _3579 = frontier_phi_85_pred_1;
                            _3578 = frontier_phi_85_pred_2;
                            _3577 = frontier_phi_85_pred_3;
                            _3576 = frontier_phi_85_pred_4;
                            _3575 = frontier_phi_85_pred_5;
                            _3283 = _3578 + _3296;
                            _3284 = _3579 + _3297;
                            _3285 = _3580 + _3298;
                            _3280 = _3575 + _3293;
                            _3281 = _3576 + _3294;
                            _3282 = _3577 + _3295;
                            if (_3300 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3300;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3285;
                        frontier_phi_79_pred_1 = _3284;
                        frontier_phi_79_pred_2 = _3283;
                        frontier_phi_79_pred_3 = _3282;
                        frontier_phi_79_pred_4 = _3281;
                        frontier_phi_79_pred_5 = _3280;
                    }
                    _2922 = frontier_phi_79_pred;
                    _2920 = frontier_phi_79_pred_1;
                    _2918 = frontier_phi_79_pred_2;
                    _2916 = frontier_phi_79_pred_3;
                    _2914 = frontier_phi_79_pred_4;
                    _2912 = frontier_phi_79_pred_5;
                    uint _3078 = _3077 + 1u;
                    if (_3078 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3071 = _2912;
                        _3072 = _2914;
                        _3073 = _2916;
                        _3074 = _2918;
                        _3075 = _2920;
                        _3076 = _2922;
                        _3077 = _3078;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2918;
                frontier_phi_60_61_ladder_1 = _2922;
                frontier_phi_60_61_ladder_2 = _2920;
                frontier_phi_60_61_ladder_3 = _2916;
                frontier_phi_60_61_ladder_4 = _2914;
                frontier_phi_60_61_ladder_5 = _2912;
            }
            else
            {
                frontier_phi_60_61_ladder = _2797;
                frontier_phi_60_61_ladder_1 = _2801;
                frontier_phi_60_61_ladder_2 = _2799;
                frontier_phi_60_61_ladder_3 = _2795;
                frontier_phi_60_61_ladder_4 = _2793;
                frontier_phi_60_61_ladder_5 = _2791;
            }
            _2911 = frontier_phi_60_61_ladder_5;
            _2913 = frontier_phi_60_61_ladder_4;
            _2915 = frontier_phi_60_61_ladder_3;
            _2917 = frontier_phi_60_61_ladder;
            _2919 = frontier_phi_60_61_ladder_2;
            _2921 = frontier_phi_60_61_ladder_1;
        }
        float _2926 = isnan(1.0) ? _935 : (isnan(_935) ? 1.0 : min(_935, 1.0));
        _2703 = (_2926 * _2917) + _2156;
        _2705 = (_2926 * _2919) + _2158;
        _2707 = (_2926 * _2921) + _2160;
        _2709 = ((_2911 * 0.039999999105930328369140625) * _2926) + _2489;
        _2711 = ((_2913 * 0.039999999105930328369140625) * _2926) + _2491;
        _2713 = ((_2915 * 0.039999999105930328369140625) * _2926) + _2493;
    }
    else
    {
        _2703 = _2156;
        _2705 = _2158;
        _2707 = _2160;
        _2709 = _2489;
        _2711 = _2491;
        _2713 = _2493;
    }
    float _4699 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _4710 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _4721 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _2730 = ((isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2703 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _935))) + ((_2709 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1773)) * cbPerFrame._m0[3u].x);
    float _2731 = ((isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2705 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _935))) + ((_2711 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1773)) * cbPerFrame._m0[3u].x);
    float _2732 = ((isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2707 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _935))) + ((_2713 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1773)) * cbPerFrame._m0[3u].x);
    uint _2733 = _910 + 6u;
    float _2741 = _872 / cbSceneParam._m0[86u].x;
    float _2742 = _873 / cbSceneParam._m0[86u].y;
    vec4 _2756 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2741, _2742, (log2((isnan(cbSceneParam._m0[77u].w) ? _795 : (isnan(_795) ? cbSceneParam._m0[77u].w : min(_795, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2758 = _2756.x;
    float _2759 = _2756.y;
    float _2760 = _2756.z;
    float _2761 = _2756.w;
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    if (_795 > cbSceneParam._m0[78u].w)
    {
        float _2816 = isnan(_795) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _795 : min(cbSceneParam._m0[80u].w, _795));
        float _2817 = _2816 / _795;
        float _2828 = _2817 * _845;
        float _2829 = _846 * _2817;
        float _2830 = (-0.0) - _2829;
        float _2831 = _2817 * _847;
        float _2833 = (cbSceneParam._m0[77u].w * _2830) / _2816;
        float _2834 = _2833 + cbSceneParam._m0[79u].w;
        float _2835 = cbSceneParam._m0[79u].w - _2829;
        float _2841 = sqrt(((_2828 * _2828) + (_2829 * _2829)) + (_2831 * _2831));
        float _2844 = (1.0 - (cbSceneParam._m0[77u].w / _2816)) * _2841;
        float _2849 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2851 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3028;
        if (abs((_2830 - _2833) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3028 = ((((_2834 > 0.0) ? exp2(_2849 * _2834) : (2.0 - exp2(_2851 * _2834))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2844;
        }
        else
        {
            float _2972 = 1.0 / cbSceneParam._m0[80u].x;
            float _2973 = isnan(_2835) ? _2834 : (isnan(_2834) ? _2835 : max(_2834, _2835));
            float _2974 = isnan(_2835) ? _2834 : (isnan(_2834) ? _2835 : min(_2834, _2835));
            float _2983 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : min(_2973, 0.0));
            float _2984 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : min(_2974, 0.0));
            _3028 = ((abs(_2841 / _2830) * cbSceneParam._m0[80u].y) * ((((_2983 - _2984) * 2.0) - ((exp2(_2849 * (isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0)))) - exp2(_2849 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))))) * _2972)) - ((exp2(_2851 * _2983) - exp2(_2851 * _2984)) * _2972))) + (_2844 * cbSceneParam._m0[80u].z);
        }
        vec4 _3030 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2741, _2742, 1.0), 0.0);
        float _3039 = exp2((_3028 * (-1.44269502162933349609375)) * (1.0 - _3030.w));
        float _3040 = log2(_3039);
        float _3056 = log2(_2761);
        _2853 = (exp2(_3056 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3040 * cbSceneParam._m0[78u].x)) * _3030.x) / cbSceneParam._m0[78u].x)) + _2758;
        _2855 = (exp2(_3056 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3040 * cbSceneParam._m0[78u].y)) * _3030.y) / cbSceneParam._m0[78u].y)) + _2759;
        _2857 = (exp2(_3056 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3040 * cbSceneParam._m0[78u].z)) * _3030.z) / cbSceneParam._m0[78u].z)) + _2760;
        _2859 = _3039 * _2761;
    }
    else
    {
        _2853 = _2758;
        _2855 = _2759;
        _2857 = _2760;
        _2859 = _2761;
    }
    bool _3066;
    vec4 _2869;
    vec4 _2891;
    float _2893;
    float _2897;
    float _2898;
    float _2899;
    float _2900;
    bool _2910;
    for (;;)
    {
        _2869 = cbMatDynParam._m0[0u];
        float _2871 = roundEven(_2869.y);
        bool _2872 = _2871 == 3.0;
        float _2873 = log2(_2859);
        float _2880 = exp2(_2873 * cbSceneParam._m0[78u].x) * _2730;
        float _2881 = exp2(_2873 * cbSceneParam._m0[78u].y) * _2731;
        float _2882 = exp2(_2873 * cbSceneParam._m0[78u].z) * _2732;
        float _2889 = _861 + (-0.5);
        _2891 = cbMtdParam._m0[1u];
        _2893 = _2891.y * _2889;
        float _2896 = (_2871 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2897 = _2896 * (_2872 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2853)));
        _2898 = _2896 * (_2872 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2855)));
        _2899 = _2896 * (_2872 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2857)));
        _2900 = _2889 * 0.999000012874603271484375;
        _2910 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2910)
        {
            if ((cbInstanceData._m0[_910 + 7u].x + _2900) < 0.5)
            {
                _3066 = true;
                break;
            }
        }
        uint _3007 = _911 + uint(_2869.w);
        if ((cbInstanceData._m0[_3007].w < 1.0) && ((cbInstanceData._m0[_3007].w + _2900) < 0.5))
        {
            _3066 = true;
            break;
        }
        if ((_2893 + 1.0) < _2891.x)
        {
            _3066 = true;
            break;
        }
        _3066 = false;
        break;
    }
    float _3271;
    if (_3066)
    {
        discard_state = true;
        _3271 = 0.0;
    }
    else
    {
        _3271 = cbInstanceData._m0[_2733].w;
    }
    SV_Target.x = _2897;
    SV_Target.y = _2898;
    SV_Target.z = _2899;
    SV_Target.w = _3271;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2733].w;
    discard_exit();
}


