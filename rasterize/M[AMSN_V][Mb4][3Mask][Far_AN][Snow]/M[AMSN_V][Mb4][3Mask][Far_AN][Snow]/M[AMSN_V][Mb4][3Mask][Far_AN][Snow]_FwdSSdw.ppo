#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1290;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    vec4 _265 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _268 = _265.x;
    float _269 = _265.y;
    float _270 = _265.z;
    float _285 = (POSITION_1.w - cbMtdParam._m0[16u].x) * (1.0 / cbMtdParam._m0[14u].y);
    float _3625 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _286 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    vec4 _298 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _300 = _298.x;
    float _301 = _298.y;
    float _302 = _298.z;
    float _309 = (((_268 * cbMtdParam._m0[13u].x) - _300) * _286) + _300;
    float _310 = (((_269 * cbMtdParam._m0[13u].y) - _301) * _286) + _301;
    float _311 = (((_270 * cbMtdParam._m0[13u].z) - _302) * _286) + _302;
    vec4 _333 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _335 = _333.x;
    float _336 = _333.y;
    float _337 = _333.z;
    vec4 _355 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _385 = cbMtdParam._m0[15u].w * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x;
    float _393 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((((1.0 - TEXCOORD_3.x) - _355.x) * 2.0) - _385)) + 1.0;
    float _3636 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _404 = (_394 * ((_335 - _309) + (((cbMtdParam._m0[11u].x * _268) - _335) * _286))) + _309;
    float _405 = (_394 * ((_336 - _310) + (((cbMtdParam._m0[11u].y * _269) - _336) * _286))) + _310;
    float _406 = (_394 * ((_337 - _311) + (((cbMtdParam._m0[11u].z * _270) - _337) * _286))) + _311;
    vec4 _428 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _430 = _428.x;
    float _431 = _428.y;
    float _432 = _428.z;
    float _444 = ((((((1.0 - TEXCOORD_3.y) - _355.y) * 2.0) - _385) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].x) + 1.0;
    float _3647 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _455 = (((_430 - _404) + (((cbMtdParam._m0[10u].x * _268) - _430) * _286)) * _445) + _404;
    float _456 = (((_431 - _405) + (((cbMtdParam._m0[10u].y * _269) - _431) * _286)) * _445) + _405;
    float _457 = (_445 * ((_432 - _406) + (((cbMtdParam._m0[10u].z * _270) - _432) * _286))) + _406;
    vec4 _477 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _479 = _477.x;
    float _480 = _477.y;
    float _481 = _477.z;
    float _493 = ((((((1.0 - TEXCOORD_3.z) - _355.z) * 2.0) - _385) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].y) + 1.0;
    float _3658 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _504 = (((_479 - _455) + (((cbMtdParam._m0[12u].x * _268) - _479) * _286)) * _494) + _455;
    float _505 = (((_480 - _456) + (((cbMtdParam._m0[12u].y * _269) - _480) * _286)) * _494) + _456;
    float _506 = (_494 * ((_481 - _457) + (((cbMtdParam._m0[12u].z * _270) - _481) * _286))) + _457;
    vec4 _521 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _523 = _521.x;
    float _524 = _521.y;
    float _525 = _521.z;
    vec4 _537 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    vec4 _563 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _565 = _563.x;
    float _566 = _563.y;
    float _567 = _563.z;
    vec4 _588 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _590 = _588.x;
    float _591 = _588.y;
    float _592 = _588.z;
    vec4 _613 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _615 = _613.x;
    float _616 = _613.y;
    float _617 = _613.z;
    float _624 = ((_539 - _615) * _286) + _615;
    float _625 = ((_540 - _616) * _286) + _616;
    float _626 = ((_541 - _617) * _286) + _617;
    float _633 = (((((_539 - _590) * _286) + _590) - _624) * _394) + _624;
    float _634 = (((((_540 - _591) * _286) + _591) - _625) * _394) + _625;
    float _635 = (((((_541 - _592) * _286) + _592) - _626) * _394) + _626;
    float _642 = (((((_539 - _565) * _286) + _565) - _633) * _445) + _633;
    float _643 = (((((_540 - _566) * _286) + _566) - _634) * _445) + _634;
    float _644 = (((((_541 - _567) * _286) + _567) - _635) * _445) + _635;
    float _656 = (((((((_539 - _523) * _286) + _523) - _642) * _494) + _642) * 2.0) + (-1.0);
    float _658 = (((((((_540 - _524) * _286) + _524) - _643) * _494) + _643) * 2.0) + (-1.0);
    float _659 = dot(vec2(_656, _658), vec2(_656, _658));
    float _3669 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _664 = sqrt(1.0 - (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))));
    float _667 = fma(_664, _237, fma(_658, _230, _656 * _216));
    float _670 = fma(_664, _238, fma(_658, _231, _656 * _217));
    float _673 = fma(_664, _239, fma(_658, _232, _656 * _218));
    float _682 = exp2(log2(inversesqrt(dot(vec3(_667, _670, _673), vec3(_667, _670, _673))) * _670) * cbMtdParam._m0[15u].z) * cbMtdParam._m0[14u].z;
    float _3680 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _684 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _686 = 3.0 - (_684 * 2.0);
    float _691 = _684 * _684;
    float _698 = ((_691 * (cbMtdParam._m0[9u].x - _504)) * _686) + _504;
    float _699 = ((_691 * (cbMtdParam._m0[9u].y - _505)) * _686) + _505;
    float _700 = ((_691 * (cbMtdParam._m0[9u].z - _506)) * _686) + _506;
    float _702 = ((((((_541 - _525) * _286) + _525) - _644) * _494) + _644) + cbMtdParam._m0[14u].w;
    float _715 = (((cbMtdParam._m0[16u].y * _656) - _656) * _286) + _656;
    float _716 = (((cbMtdParam._m0[16u].z * _658) - _658) * _286) + _658;
    float _717 = (((cbMtdParam._m0[16u].w * _664) - _664) * _286) + _664;
    vec4 _730 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _736 = (_730.x * 2.0) + (-1.0);
    float _737 = (_730.y * 2.0) + (-1.0);
    float _738 = dot(vec2(_736, _737), vec2(_736, _737));
    float _3702 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _753 = ((_691 * (_736 - _715)) * _686) + _715;
    float _754 = ((_691 * (_737 - _716)) * _686) + _716;
    float _755 = ((_691 * (sqrt(1.0 - (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) - _717)) * _686) + _717;
    float _758 = fma(_755, _237, fma(_754, _230, _753 * _216));
    float _761 = fma(_755, _238, fma(_754, _231, _753 * _217));
    float _764 = fma(_755, _239, fma(_754, _232, _753 * _218));
    float _768 = inversesqrt(dot(vec3(_758, _761, _764), vec3(_758, _761, _764)));
    float _769 = _768 * _758;
    float _770 = _768 * _761;
    float _771 = _768 * _764;
    float _3713 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _772 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _3735 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _3746 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _791 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _841 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _831);
    float _842 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _831);
    float _843 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _831);
    float _847 = inversesqrt(dot(vec3(_841, _842, _843), vec3(_841, _842, _843)));
    float _848 = _841 * _847;
    float _849 = _842 * _847;
    float _850 = _843 * _847;
    float _856 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _857 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _875 = fma(_771, cbSceneParam._m0[5u].z, fma(_770, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _769));
    float _878 = fma(_771, cbSceneParam._m0[6u].z, fma(_770, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _769));
    float _881 = fma(_771, cbSceneParam._m0[7u].z, fma(_770, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _769));
    uint _894 = uint(roundEven(NORMAL.w)) * 13u;
    uint _896 = (_894 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _902 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * cbInstanceData._m0[_896].x;
    float _903 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * cbInstanceData._m0[_896].y;
    float _904 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * cbInstanceData._m0[_896].z;
    float _3757 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    vec4 _916 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _856, cbSceneParam._m0[86u].y * _857));
    float _919 = _916.x * TEXCOORD_3.w;
    float _920 = dot(vec3(_769, _770, _771), vec3(_848, _849, _850));
    float _923 = _920 * 2.0;
    float _927 = (_923 * _769) - _848;
    float _928 = (_923 * _770) - _849;
    float _929 = (_923 * _771) - _850;
    float _933 = abs(dot(vec3(_848, _849, _850), vec3(_769, _770, _771)));
    float _3790 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _935 = sqrt(_772);
    float _947 = exp2((_935 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_935 * 3.0));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1289;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1014 = fma(_987, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979));
        float _1018 = fma(_987, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979));
        float _1022 = fma(_987, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979));
        float _1047 = _979 + _769;
        float _1048 = _983 + _770;
        float _1049 = _987 + _771;
        float _1059 = fma(_1049, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047)) - _1014;
        float _1060 = fma(_1049, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047)) - _1018;
        float _1061 = fma(_1049, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047)) - _1022;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1014 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1018 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[34u].z) + ((((((_1022 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1117 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1083.x + (-0.5));
        float _1119 = _1117 * (_1083.y + (-0.5));
        float _1120 = _1117 * (_1083.z + (-0.5));
        float _1127 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1090.x + (-0.5));
        float _1129 = _1127 * (_1090.y + (-0.5));
        float _1130 = _1127 * (_1090.z + (-0.5));
        float _1137 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1097.x + (-0.5));
        float _1139 = _1137 * (_1097.y + (-0.5));
        float _1140 = _1137 * (_1097.z + (-0.5));
        float _1147 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1104.x + (-0.5));
        float _1149 = _1147 * (_1104.y + (-0.5));
        float _1150 = _1147 * (_1104.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1171 = (dot(vec3(_769, _770, _771), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1181 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3838 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1183 + 1.0))) + _1188) * _1151;
        float _1198 = _1119 * 0.5;
        float _1199 = _1129 * 0.5;
        float _1200 = _1139 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_769, _770, _771), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3871 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1225 + 1.0))) + _1230) * _1152;
        float _1240 = _1120 * 0.5;
        float _1241 = _1130 * 0.5;
        float _1242 = _1140 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_769, _770, _771), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3904 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1267 + 1.0))) + _1272) * _1153;
        _1289 = _1120;
        _1291 = _1119;
        _1292 = _1118;
        _1293 = _1130;
        _1294 = _1129;
        _1295 = _1128;
        _1296 = _1140;
        _1297 = _1139;
        _1298 = _1138;
        _1299 = _1153;
        _1300 = _1152;
        _1301 = _1151;
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _1290;
        _1291 = _1290;
        _1292 = _1290;
        _1293 = _1290;
        _1294 = _1290;
        _1295 = _1290;
        _1296 = _1290;
        _1297 = _1290;
        _1298 = _1290;
        _1299 = _1290;
        _1300 = _1290;
        _1301 = _1290;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1330 = fma(_987, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _979));
        float _1334 = fma(_987, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _979));
        float _1338 = fma(_987, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _979));
        float _1361 = _979 + _769;
        float _1362 = _983 + _770;
        float _1363 = _987 + _771;
        float _1373 = fma(_1363, cbModelParam._m0[30u].z, fma(_1362, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1361)) - _1330;
        float _1374 = fma(_1363, cbModelParam._m0[31u].z, fma(_1362, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1361)) - _1334;
        float _1375 = fma(_1363, cbModelParam._m0[32u].z, fma(_1362, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1361)) - _1338;
        float _1379 = inversesqrt(dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375)));
        float _1392 = ((_1379 * _1373) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1330 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1379 * _1374) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1334 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1394 = ((_1379 * _1375) / cbModelParam._m0[35u].z) + ((((((_1338 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        float _1429 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1396.x + (-0.5));
        float _1431 = _1429 * (_1396.y + (-0.5));
        float _1432 = _1429 * (_1396.z + (-0.5));
        float _1439 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1403.x + (-0.5));
        float _1441 = _1439 * (_1403.y + (-0.5));
        float _1442 = _1439 * (_1403.z + (-0.5));
        float _1449 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1410.x + (-0.5));
        float _1451 = _1449 * (_1410.y + (-0.5));
        float _1452 = _1449 * (_1410.z + (-0.5));
        float _1459 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1417.x + (-0.5));
        float _1461 = _1459 * (_1417.y + (-0.5));
        float _1462 = _1459 * (_1417.z + (-0.5));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = _1430 * 0.5;
        float _1467 = _1440 * 0.5;
        float _1468 = _1450 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_769, _770, _771), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _3967 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1493 + 1.0))) + _1498) * _1463;
        float _1508 = _1431 * 0.5;
        float _1509 = _1441 * 0.5;
        float _1510 = _1451 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_769, _770, _771), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4000 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1535 + 1.0))) + _1540) * _1464;
        float _1550 = _1432 * 0.5;
        float _1551 = _1442 * 0.5;
        float _1552 = _1452 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_769, _770, _771), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4033 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1577 + 1.0))) + _1582) * _1465;
        _1599 = _1432;
        _1600 = _1431;
        _1601 = _1430;
        _1602 = _1442;
        _1603 = _1441;
        _1604 = _1440;
        _1605 = _1452;
        _1606 = _1451;
        _1607 = _1450;
        _1608 = _1465;
        _1609 = _1464;
        _1610 = _1463;
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1613 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
    }
    else
    {
        _1599 = _1290;
        _1600 = _1290;
        _1601 = _1290;
        _1602 = _1290;
        _1603 = _1290;
        _1604 = _1290;
        _1605 = _1290;
        _1606 = _1290;
        _1607 = _1290;
        _1608 = _1290;
        _1609 = _1290;
        _1610 = _1290;
        _1611 = 0.0;
        _1612 = 0.0;
        _1613 = 0.0;
    }
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1302)) + _1302;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1303)) + _1303;
    float _1625 = (cbModelParam._m0[1u].x * (_1613 - _1304)) + _1304;
    float _1646 = fma(_1625, cbSceneParam._m0[89u].z, fma(_1624, cbSceneParam._m0[89u].y, _1623 * cbSceneParam._m0[89u].x));
    float _1649 = fma(_1625, cbSceneParam._m0[90u].z, fma(_1624, cbSceneParam._m0[90u].y, _1623 * cbSceneParam._m0[90u].x));
    float _1652 = fma(_1625, cbSceneParam._m0[91u].z, fma(_1624, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1623));
    float _1667 = _927 * 0.5;
    float _1668 = _928 * 0.5;
    float _1669 = _929 * 0.5;
    float _1670 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1601, _1604, _1607, _1610));
    float _1673 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1676 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1710;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1683 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1289, _1293, _1296, _1299));
        float _1687 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1691 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1698 = dot(vec4(cbModelParam._m0[39u]), vec4(_1667, _1668, _1669, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1721;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1712 = dot(vec4(cbModelParam._m0[40u]), vec4(_1667, _1668, _1669, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1725 = (_1721 * cbModelParam._m0[1u].x) + (_1710 * (1.0 - cbModelParam._m0[1u].x));
    float _1735 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _772);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1735 : min(cbModelParam._m0[25u].z, _1735));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1783 = fma(_987, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979)) + cbModelParam._m0[13u].w;
        float _1787 = fma(_987, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979)) + cbModelParam._m0[14u].w;
        float _1791 = fma(_987, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979)) + cbModelParam._m0[15u].w;
        float _1794 = fma(_929, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _927));
        float _1797 = fma(_929, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _927));
        float _1800 = fma(_929, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _927));
        float _1828;
        if (_1794 > 0.0)
        {
            _1828 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1828 = frontier_phi_16_14_ladder;
        }
        float _2053;
        if (_1797 > 0.0)
        {
            _2053 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2053 = frontier_phi_25_21_ladder;
        }
        float _2299;
        if (_1800 > 0.0)
        {
            _2299 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2299 = frontier_phi_37_32_ladder;
        }
        float _2301 = isnan(_2053) ? _1828 : (isnan(_1828) ? _2053 : min(_1828, _2053));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1794) + _1783;
        float _2307 = (_2302 * _1797) + _1787;
        float _2308 = (_2302 * _1800) + _1791;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2309;
        float _2313 = _2309 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 > _2313) || ((_2307 < _2311) || ((_2306 < _2311) || (_2306 > _2313))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2308, cbModelParam._m0[9u].z, fma(_2307, cbModelParam._m0[9u].y, _2306 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2308, cbModelParam._m0[10u].z, fma(_2307, cbModelParam._m0[10u].y, _2306 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2308, cbModelParam._m0[11u].z, fma(_2307, cbModelParam._m0[11u].y, _2306 * cbModelParam._m0[11u].x))), _1736);
            frontier_phi_15_37_ladder = _2432.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2432.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2432.x * cbModelParam._m0[1u].y;
        }
        _1816 = frontier_phi_15_37_ladder_2;
        _1818 = frontier_phi_15_37_ladder_1;
        _1820 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_927, _928, _929), _1736);
        _1816 = _1804.x * cbModelParam._m0[1u].y;
        _1818 = _1804.y * cbModelParam._m0[1u].y;
        _1820 = _1804.z * cbModelParam._m0[1u].y;
    }
    float _1824 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _772);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1824 : min(cbModelParam._m0[25u].w, _1824));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1882 = fma(_987, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979)) + cbModelParam._m0[21u].w;
        float _1886 = fma(_987, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979)) + cbModelParam._m0[22u].w;
        float _1890 = fma(_987, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979)) + cbModelParam._m0[23u].w;
        float _1893 = fma(_929, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _927));
        float _1896 = fma(_929, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _927));
        float _1899 = fma(_929, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _927));
        float _2058;
        if (_1893 > 0.0)
        {
            _2058 = abs((1.0 - _1882) / _1893);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1882 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2058 = frontier_phi_27_23_ladder;
        }
        float _2326;
        if (_1896 > 0.0)
        {
            _2326 = abs((1.0 - _1886) / _1896);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1886 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2326 = frontier_phi_39_34_ladder;
        }
        float _2531;
        if (_1899 > 0.0)
        {
            _2531 = abs((1.0 - _1890) / _1899);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1890 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2531 = frontier_phi_48_45_ladder;
        }
        float _2533 = isnan(_2326) ? _2058 : (isnan(_2058) ? _2326 : min(_2058, _2326));
        float _2534 = isnan(_2531) ? _2533 : (isnan(_2533) ? _2531 : min(_2533, _2531));
        float _2538 = (_2534 * _1893) + _1882;
        float _2539 = (_2534 * _1896) + _1886;
        float _2540 = (_2534 * _1899) + _1890;
        float _2541 = _2534 * 9.9999997473787516355514526367188e-05;
        float _2542 = (-1.0) - _2541;
        float _2544 = _2541 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2540 > _2544) || ((_2540 < _2542) || ((_2539 > _2544) || ((_2539 < _2542) || ((_2538 < _2542) || (_2538 > _2544))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2540, cbModelParam._m0[17u].z, fma(_2539, cbModelParam._m0[17u].y, _2538 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2540, cbModelParam._m0[18u].z, fma(_2539, cbModelParam._m0[18u].y, _2538 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2540, cbModelParam._m0[19u].z, fma(_2539, cbModelParam._m0[19u].y, _2538 * cbModelParam._m0[19u].x))), _1825);
            frontier_phi_24_48_ladder = _2738.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2738.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2738.x * cbModelParam._m0[1u].z;
        }
        _1918 = frontier_phi_24_48_ladder_2;
        _1920 = frontier_phi_24_48_ladder_1;
        _1922 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_927, _928, _929), _1825);
        _1918 = _1902.x * cbModelParam._m0[1u].z;
        _1920 = _1902.y * cbModelParam._m0[1u].z;
        _1922 = _1902.z * cbModelParam._m0[1u].z;
    }
    float _1934 = ((((1.0 - _947) * ((_935 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_947 * _935)) * _919;
    float _1935 = _1934 * ((cbModelParam._m0[1u].w * (_1918 - _1816)) + _1816);
    float _1936 = _1934 * ((cbModelParam._m0[1u].w * (_1920 - _1818)) + _1818);
    float _1937 = _1934 * ((cbModelParam._m0[1u].w * (_1922 - _1820)) + _1820);
    float _1940 = fma(_1937, cbSceneParam._m0[89u].z, fma(_1936, cbSceneParam._m0[89u].y, _1935 * cbSceneParam._m0[89u].x));
    float _1943 = fma(_1937, cbSceneParam._m0[90u].z, fma(_1936, cbSceneParam._m0[90u].y, _1935 * cbSceneParam._m0[90u].x));
    float _1946 = fma(_1937, cbSceneParam._m0[91u].z, fma(_1936, cbSceneParam._m0[91u].y, _1935 * cbSceneParam._m0[91u].x));
    vec4 _1954 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_856, _857));
    float _1956 = _1954.w;
    float _1968 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1956);
    float _1969 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1956);
    float _1970 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1956);
    uvec4 _1974 = floatBitsToUint(cbInstanceData._m0[_894 + 5u]);
    uint _1976 = _1974.x * 14u;
    uint _1977 = _1976 + 13u;
    float _1984 = _919 + (-1.0);
    float _1989 = (cbLight._m0[_1977].x * _1984) + 1.0;
    float _1990 = (cbLight._m0[_1977].y * _1984) + 1.0;
    float _1991 = (cbLight._m0[_1977].z * _1984) + 1.0;
    float _1992 = (cbLight._m0[_1977].w * _1984) + 1.0;
    uint _1993 = _1976 + 5u;
    float _1999 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2003 = _1976 + 4u;
    float _2012 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2016 = _1976 | 1u;
    float _2027 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_769, _770, _771));
    float _2030 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_769, _770, _771));
    float _4169 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _4180 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2035 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.3183098733425140380859375;
    float _2037 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * 0.3183098733425140380859375;
    float _2044 = ((cbLight._m0[_1993].x * _1999) * _2037) + (((cbLight._m0[_2003].x * _1968) * _2012) * _2035);
    float _2045 = ((_1999 * cbLight._m0[_1993].y) * _2037) + (((cbLight._m0[_2003].y * _1969) * _2012) * _2035);
    float _2046 = ((_1999 * cbLight._m0[_1993].z) * _2037) + (((cbLight._m0[_2003].z * _1970) * _2012) * _2035);
    uvec4 _2050 = floatBitsToUint(cbLight._m0[_1976 + 12u]);
    bool _2052 = _2050.x == 0u;
    float _2063;
    float _2065;
    float _2067;
    if (_2052)
    {
        _2063 = _2044;
        _2065 = _2045;
        _2067 = _2046;
    }
    else
    {
        uint _2071 = _1976 + 6u;
        float _2087 = (dot(vec3(cbLight._m0[_1976 + 2u].xyz), vec3(_769, _770, _771)) * 0.5) + 0.5;
        float _2088 = _2087 * _2087;
        float _4191 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2090 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2063 = (((cbLight._m0[_2071].x * 0.3183098733425140380859375) * _2089) * _2090) + _2044;
        _2065 = (((cbLight._m0[_2071].y * 0.3183098733425140380859375) * _2089) * _2090) + _2045;
        _2067 = (((cbLight._m0[_2071].z * 0.3183098733425140380859375) * _2089) * _2090) + _2046;
    }
    bool _2070 = _2050.y == 0u;
    float _2108;
    float _2110;
    float _2112;
    if (_2070)
    {
        _2108 = _2063;
        _2110 = _2065;
        _2112 = _2067;
    }
    else
    {
        uint _2270 = _1976 + 7u;
        float _2286 = (dot(vec3(cbLight._m0[_1976 + 3u].xyz), vec3(_769, _770, _771)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4207 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2289 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2108 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2063;
        _2110 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2065;
        _2112 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2067;
    }
    uint _2115 = _1976 + 8u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _772) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1976].x + _848;
    float _2131 = cbLight._m0[_1976].y + _849;
    float _2132 = cbLight._m0[_1976].z + _850;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_1976].xyz));
    float _4223 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _2144 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2145 = dot(vec3(_769, _770, _771), vec3(_2137, _2138, _2139));
    float _4245 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2149 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2137, _2138, _2139));
    float _4256 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2153 = _2129 * _2129;
    float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
    float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2169 = 1.0 - _2129;
    float _2180 = (0.5 / (((_2144 * ((_2143 * _2169) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2169) + _2129) * _2143))) * _2143;
    float _4267 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2182 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
    uint _2196 = _1976 + 9u;
    float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _772) * 0.949999988079071044921875);
    float _2208 = _2207 * _2207;
    float _2209 = cbLight._m0[_2016].x + _848;
    float _2210 = cbLight._m0[_2016].y + _849;
    float _2211 = cbLight._m0[_2016].z + _850;
    float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
    float _2216 = _2215 * _2209;
    float _2217 = _2215 * _2210;
    float _2218 = _2215 * _2211;
    float _2219 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2016].xyz));
    float _4278 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2223 = dot(vec3(_769, _770, _771), vec3(_2216, _2217, _2218));
    float _4289 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2227 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2216, _2217, _2218));
    float _4300 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = _2208 * _2208;
    float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
    float _2244 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2245 = 1.0 - _2208;
    float _2255 = (0.5 / (((_2144 * ((_2222 * _2245) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2245) + _2208) * _2222))) * _2222;
    float _4311 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2257 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
    float _2267 = (((_2244 * cbLight._m0[_2196].x) * _2257) * _1999) + ((((cbLight._m0[_2115].x * _1968) * _2168) * _2182) * _2012);
    float _2268 = (((_2244 * cbLight._m0[_2196].y) * _2257) * _1999) + ((((cbLight._m0[_2115].y * _1969) * _2168) * _2182) * _2012);
    float _2269 = (((_2244 * cbLight._m0[_2196].z) * _2257) * _1999) + ((((cbLight._m0[_2115].z * _1970) * _2168) * _2182) * _2012);
    float _2331;
    float _2333;
    float _2335;
    if (_2052)
    {
        _2331 = _2267;
        _2333 = _2268;
        _2335 = _2269;
    }
    else
    {
        uint _2337 = _1976 + 2u;
        uint _2341 = _1976 + 10u;
        float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _772) * 0.949999988079071044921875);
        float _2356 = _2355 * _2355;
        float _2357 = cbLight._m0[_2337].x + _848;
        float _2358 = cbLight._m0[_2337].y + _849;
        float _2359 = cbLight._m0[_2337].z + _850;
        float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
        float _2364 = _2363 * _2357;
        float _2365 = _2363 * _2358;
        float _2366 = _2363 * _2359;
        float _2367 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2337].xyz));
        float _4322 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2371 = dot(vec3(_769, _770, _771), vec3(_2364, _2365, _2366));
        float _4333 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2375 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2364, _2365, _2366));
        float _4344 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2379 = _2356 * _2356;
        float _2383 = ((_2374 * _2374) * (_2379 + (-1.0))) + 1.0;
        float _2392 = (exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2393 = 1.0 - _2356;
        float _2403 = (0.5 / (((_2144 * ((_2370 * _2393) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2393) + _2356) * _2370))) * _2370;
        float _4355 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2405 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2379 / ((_2383 * _2383) * 3.141590118408203125));
        float _2406 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2331 = (((_2392 * cbLight._m0[_2341].x) * _2405) * _2406) + _2267;
        _2333 = (((_2392 * cbLight._m0[_2341].y) * _2405) * _2406) + _2268;
        _2335 = (((_2392 * cbLight._m0[_2341].z) * _2405) * _2406) + _2269;
    }
    float _2441;
    float _2443;
    float _2445;
    if (_2070)
    {
        _2441 = _2331;
        _2443 = _2333;
        _2445 = _2335;
    }
    else
    {
        uint _2452 = _1976 + 3u;
        uint _2456 = _1976 + 11u;
        float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2452].w)) * _772) * 0.949999988079071044921875);
        float _2471 = _2470 * _2470;
        float _2472 = cbLight._m0[_2452].x + _848;
        float _2473 = cbLight._m0[_2452].y + _849;
        float _2474 = cbLight._m0[_2452].z + _850;
        float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
        float _2479 = _2478 * _2472;
        float _2480 = _2478 * _2473;
        float _2481 = _2478 * _2474;
        float _2482 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2452].xyz));
        float _4371 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2486 = dot(vec3(_769, _770, _771), vec3(_2479, _2480, _2481));
        float _4382 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2490 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_2479, _2480, _2481));
        float _4393 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2494 = _2471 * _2471;
        float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
        float _2507 = (exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2508 = 1.0 - _2471;
        float _2518 = (0.5 / (((_2144 * ((_2485 * _2508) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2508) + _2471) * _2485))) * _2485;
        float _4404 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2520 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
        float _2521 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2441 = (((_2507 * cbLight._m0[_2456].x) * _2520) * _2521) + _2331;
        _2443 = (((_2507 * cbLight._m0[_2456].y) * _2520) * _2521) + _2333;
        _2445 = (((_2507 * cbLight._m0[_2456].z) * _2520) * _2521) + _2335;
    }
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_1974.y == 0u)
    {
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2596;
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2596;
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2596;
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.x;
        uint _2623 = uint((float(_2611.y) * floor(float(uint(cbSceneParam._m0[85u].y * _857) / _2612))) + floor(float(uint(cbSceneParam._m0[85u].x * _856) / _2612)));
        float _2633 = (log2(_2599 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2634 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        uint _2637 = uint(isnan(14.0) ? _2634 : (isnan(_2634) ? 14.0 : min(_2634, 14.0)));
        uvec4 _2642 = texelFetch(g_lightClusterGridBuffer, int(((_2637 << 2u) + (_2623 << 6u)) >> 2u));
        uint _2643 = _2642.x;
        uint _2644 = _2611.z;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((((1u << ((_2644 >> 4u) & 15u)) + 4294967295u) & _2643) == 0u) || ((_2644 & 240u) == 0u))
        {
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
        }
        else
        {
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            uint _2893 = 0u;
            uint _2902;
            bool _2903;
            for (;;)
            {
                _2902 = texelFetch(g_lightClassification, int((((_2637 << 5u) + (_2623 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                _2903 = _2902 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2903)
                {
                    frontier_phi_63_pred = _2892;
                    frontier_phi_63_pred_1 = _2891;
                    frontier_phi_63_pred_2 = _2890;
                    frontier_phi_63_pred_3 = _2889;
                    frontier_phi_63_pred_4 = _2888;
                    frontier_phi_63_pred_5 = _2887;
                }
                else
                {
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    uint _3017;
                    _3011 = _2887;
                    _3012 = _2888;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2902;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    for (;;)
                    {
                        uint _3021 = uint(findLSB(_3017)) + (_2893 << 5u);
                        uint _3018 = (_3017 + 4294967295u) & _3017;
                        uint _3023 = _3021 * 48u;
                        vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 3u)).x));
                        uint _3043 = (_3021 * 48u) + 4u;
                        vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3043)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 3u)).x));
                        uint _3062 = (_3021 * 48u) + 8u;
                        vec3 _3073 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x));
                        float _3077 = _3037.x - _2597;
                        float _3078 = _3037.y - _2598;
                        float _3079 = _3037.z - _2599;
                        float _3080 = dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079));
                        float _3083 = inversesqrt(_3080);
                        float _3084 = _3083 * _3077;
                        float _3085 = _3083 * _3078;
                        float _3086 = _3083 * _3079;
                        float _3087 = dot(vec3(_875, _878, _881), vec3(_3084, _3085, _3086));
                        float _3092 = 1.0 - (_3080 * _3037.w);
                        float _4430 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3093 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3094 = sqrt(_3080) * _3056.w;
                        float _3097 = 1.39999997615814208984375 / (_3094 + 1.39999997615814208984375);
                        float _3098 = _3097 * _3097;
                        float _3101 = ((1.0 - _3098) * _3087) + _3098;
                        float _3104 = _3094 * _3094;
                        float _3108 = ((isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0))) * _3093) / ((_3104 * 0.699999988079071044921875) + 1.0);
                        float _3112 = (-0.0) - _2597;
                        float _3113 = (-0.0) - _2598;
                        float _3114 = (-0.0) - _2599;
                        float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                        float _3119 = _3118 * _3112;
                        float _3120 = _3118 * _3113;
                        float _3121 = _3118 * _3114;
                        float _3129 = exp2(log2(1.0 / ((_3104 * 3.5) + 5.0)) * 0.25);
                        float _3130 = 1.0 - _935;
                        float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                        float _3138 = _3137 * _3137;
                        float _3139 = _3138 * _3138;
                        float _3140 = _3119 + _3084;
                        float _3141 = _3120 + _3085;
                        float _3142 = _3121 + _3086;
                        float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                        float _3150 = dot(vec3(_875, _878, _881), vec3(_3119, _3120, _3121));
                        float _4446 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3153 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3154 = dot(vec3(_875, _878, _881), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                        float _4457 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3157 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                        float _3162 = _3097 * _3138;
                        float _3163 = _3162 * _3162;
                        float _3166 = ((1.0 - _3163) * _3087) + _3163;
                        float _4468 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3167 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3168 = 1.0 - _3138;
                        float _3178 = (0.5 / (((_3167 * ((_3153 * _3168) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3167 * _3168) + _3138) * _3153))) * _3167;
                        float _4479 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3189 = (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) / ((_3161 * _3161) * ((_3104 * 2.1991131305694580078125) + 3.141590118408203125))) * _3093;
                        _2946 = (_3108 * _3056.x) + _3014;
                        _2947 = (_3108 * _3056.y) + _3015;
                        _2948 = (_3108 * _3056.z) + _3016;
                        _2943 = (_3189 * _3073.x) + _3011;
                        _2944 = (_3189 * _3073.y) + _3012;
                        _2945 = (_3189 * _3073.z) + _3013;
                        if (_3018 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _3018;
                        }
                    }
                    frontier_phi_63_pred = _2948;
                    frontier_phi_63_pred_1 = _2947;
                    frontier_phi_63_pred_2 = _2946;
                    frontier_phi_63_pred_3 = _2945;
                    frontier_phi_63_pred_4 = _2944;
                    frontier_phi_63_pred_5 = _2943;
                }
                _2754 = frontier_phi_63_pred;
                _2752 = frontier_phi_63_pred_1;
                _2750 = frontier_phi_63_pred_2;
                _2748 = frontier_phi_63_pred_3;
                _2746 = frontier_phi_63_pred_4;
                _2744 = frontier_phi_63_pred_5;
                uint _2894 = _2893 + 1u;
                if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2887 = _2744;
                    _2888 = _2746;
                    _2889 = _2748;
                    _2890 = _2750;
                    _2891 = _2752;
                    _2892 = _2754;
                    _2893 = _2894;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
        }
        uvec4 _2757 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2758 = _2757.z;
        uint _2760 = (_2758 >> 8u) & 15u;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        if (((4294967295u << _2760) & _2643) == 0u)
        {
            _2855 = _2743;
            _2857 = _2745;
            _2859 = _2747;
            _2861 = _2749;
            _2863 = _2751;
            _2865 = _2753;
        }
        else
        {
            float _2880 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
            float _2881 = _2880 * _2597;
            float _2882 = _2880 * _2598;
            float _2883 = _2880 * _2599;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2760 < ((_2758 >> 12u) & 15u))
            {
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _2994 = _2743;
                float _2995 = _2745;
                float _2996 = _2747;
                float _2997 = _2749;
                float _2998 = _2751;
                float _2999 = _2753;
                uint _3000 = _2760;
                uint _3009;
                bool _3010;
                for (;;)
                {
                    _3009 = texelFetch(g_lightClassification, int((((_2637 << 5u) + (_2623 << 9u)) + (_3000 << 2u)) >> 2u)).x;
                    _3010 = _3009 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3010)
                    {
                        frontier_phi_69_pred = _2999;
                        frontier_phi_69_pred_1 = _2998;
                        frontier_phi_69_pred_2 = _2997;
                        frontier_phi_69_pred_3 = _2996;
                        frontier_phi_69_pred_4 = _2995;
                        frontier_phi_69_pred_5 = _2994;
                    }
                    else
                    {
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3207 = _2994;
                        float _3208 = _2995;
                        float _3209 = _2996;
                        float _3210 = _2997;
                        float _3211 = _2998;
                        float _3212 = _2999;
                        uint _3213 = _3009;
                        uint _3214;
                        vec4 _3239;
                        float _3240;
                        vec4 _3255;
                        vec3 _3267;
                        vec4 _3282;
                        vec4 _3298;
                        float _3345;
                        bool _3346;
                        for (;;)
                        {
                            uint _3224 = ((_3000 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3213));
                            _3214 = (_3213 + 4294967295u) & _3213;
                            uint _3226 = _3224 * 40u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            _3240 = _3239.w;
                            uint _3242 = (_3224 * 40u) + 4u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3257 = (_3224 * 40u) + 8u;
                            _3267 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x));
                            uint _3269 = (_3224 * 40u) + 16u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3285 = (_3224 * 40u) + 20u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3301 = (_3224 * 40u) + 24u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3320 = (_3224 * 40u) + 28u;
                            vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            _3345 = fma(_2599, _3333.z, fma(_2598, _3333.y, _3333.x * _2597)) + _3333.w;
                            _3346 = !((fma(_2599, _3314.z, fma(_2598, _3314.y, _3314.x * _2597)) + _3314.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3346)
                            {
                                float _3373 = _3239.x - _2597;
                                float _3374 = _3239.y - _2598;
                                float _3375 = _3239.z - _2599;
                                float _3376 = dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375));
                                float _3379 = inversesqrt(_3376);
                                float _3380 = _3379 * _3373;
                                float _3381 = _3379 * _3374;
                                float _3382 = _3379 * _3375;
                                float _3386 = 1.0 - (_3376 / (_3240 * _3240));
                                float _4490 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3391 = sqrt(_3376) * _3255.w;
                                float _3393 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                                float _3394 = _3393 * _3393;
                                float _3397 = ((1.0 - _3394) * dot(vec3(_3380, _3381, _3382), vec3(_875, _878, _881))) + _3394;
                                float _3400 = _3391 * _3391;
                                float _3404 = (fma(_2599, _3282.z, fma(_2598, _3282.y, _3282.x * _2597)) + _3282.w) / _3345;
                                float _3405 = (fma(_2599, _3298.z, fma(_2598, _3298.y, _3298.x * _2597)) + _3298.w) / _3345;
                                float _3409 = 1.0 - dot(vec2(_3404, _3405), vec2(_3404, _3405));
                                float _4506 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3411 = _3410 * (((isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0))) * _3387) / ((_3400 * 0.699999988079071044921875) + 1.0));
                                float _3423 = exp2(log2(1.0 / ((_3400 * 3.5) + 5.0)) * 0.25);
                                float _3424 = 1.0 - _935;
                                float _3431 = sqrt(1.0 - ((1.0 - (_3424 * _3424)) * (1.0 - (_3423 * _3423))));
                                float _3432 = _3431 * _3431;
                                float _3433 = _3432 * _3432;
                                float _3434 = _3380 - _2881;
                                float _3435 = _3381 - _2882;
                                float _3436 = _3382 - _2883;
                                float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                                float _3444 = dot(vec3(_875, _878, _881), vec3((-0.0) - _2881, (-0.0) - _2882, (-0.0) - _2883));
                                float _4517 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3448 = dot(vec3(_875, _878, _881), vec3(_3440 * _3434, _3440 * _3435, _3440 * _3436));
                                float _4528 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3451 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3455 = ((_3451 * _3451) * (_3433 + (-1.0))) + 1.0;
                                float _3456 = _3393 * _3432;
                                float _3457 = _3456 * _3456;
                                float _3463 = ((1.0 - _3457) * dot(vec3(_875, _878, _881), vec3(_3380, _3381, _3382))) + _3457;
                                float _4539 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3465 = 1.0 - _3432;
                                float _3475 = (0.5 / (((_3464 * ((_3447 * _3465) + _3432)) + 9.9999999392252902907785028219223e-09) + (((_3464 * _3465) + _3432) * _3447))) * _3464;
                                float _4550 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3485 = (_3410 * _3387) * (((_3433 * 3.1415927410125732421875) * (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) / ((_3455 * _3455) * ((_3400 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3411 * _3255.z;
                                frontier_phi_75_pred_1 = _3411 * _3255.y;
                                frontier_phi_75_pred_2 = _3411 * _3255.x;
                                frontier_phi_75_pred_3 = _3485 * _3267.z;
                                frontier_phi_75_pred_4 = _3485 * _3267.y;
                                frontier_phi_75_pred_5 = _3485 * _3267.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3494 = frontier_phi_75_pred;
                            _3493 = frontier_phi_75_pred_1;
                            _3492 = frontier_phi_75_pred_2;
                            _3491 = frontier_phi_75_pred_3;
                            _3490 = frontier_phi_75_pred_4;
                            _3489 = frontier_phi_75_pred_5;
                            _3197 = _3492 + _3210;
                            _3198 = _3493 + _3211;
                            _3199 = _3494 + _3212;
                            _3194 = _3489 + _3207;
                            _3195 = _3490 + _3208;
                            _3196 = _3491 + _3209;
                            if (_3214 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3214;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3199;
                        frontier_phi_69_pred_1 = _3198;
                        frontier_phi_69_pred_2 = _3197;
                        frontier_phi_69_pred_3 = _3196;
                        frontier_phi_69_pred_4 = _3195;
                        frontier_phi_69_pred_5 = _3194;
                    }
                    _2866 = frontier_phi_69_pred;
                    _2864 = frontier_phi_69_pred_1;
                    _2862 = frontier_phi_69_pred_2;
                    _2860 = frontier_phi_69_pred_3;
                    _2858 = frontier_phi_69_pred_4;
                    _2856 = frontier_phi_69_pred_5;
                    uint _3001 = _3000 + 1u;
                    if (_3001 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2994 = _2856;
                        _2995 = _2858;
                        _2996 = _2860;
                        _2997 = _2862;
                        _2998 = _2864;
                        _2999 = _2866;
                        _3000 = _3001;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2866;
                frontier_phi_57_58_ladder_1 = _2864;
                frontier_phi_57_58_ladder_2 = _2862;
                frontier_phi_57_58_ladder_3 = _2860;
                frontier_phi_57_58_ladder_4 = _2858;
                frontier_phi_57_58_ladder_5 = _2856;
            }
            else
            {
                frontier_phi_57_58_ladder = _2753;
                frontier_phi_57_58_ladder_1 = _2751;
                frontier_phi_57_58_ladder_2 = _2749;
                frontier_phi_57_58_ladder_3 = _2747;
                frontier_phi_57_58_ladder_4 = _2745;
                frontier_phi_57_58_ladder_5 = _2743;
            }
            _2855 = frontier_phi_57_58_ladder_5;
            _2857 = frontier_phi_57_58_ladder_4;
            _2859 = frontier_phi_57_58_ladder_3;
            _2861 = frontier_phi_57_58_ladder_2;
            _2863 = frontier_phi_57_58_ladder_1;
            _2865 = frontier_phi_57_58_ladder;
        }
        float _2870 = isnan(1.0) ? _919 : (isnan(_919) ? 1.0 : min(_919, 1.0));
        _2655 = (_2870 * _2861) + _2108;
        _2657 = (_2870 * _2863) + _2110;
        _2659 = (_2870 * _2865) + _2112;
        _2661 = ((_2855 * 0.039999999105930328369140625) * _2870) + _2441;
        _2663 = ((_2857 * 0.039999999105930328369140625) * _2870) + _2443;
        _2665 = ((_2859 * 0.039999999105930328369140625) * _2870) + _2445;
    }
    else
    {
        _2655 = _2108;
        _2657 = _2110;
        _2659 = _2112;
        _2661 = _2441;
        _2663 = _2443;
        _2665 = _2445;
    }
    float _4566 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4577 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4588 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    uint _2685 = _894 + 6u;
    float _2693 = _856 / cbSceneParam._m0[86u].x;
    float _2694 = _857 / cbSceneParam._m0[86u].y;
    vec4 _2708 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, (log2((isnan(cbSceneParam._m0[77u].w) ? _791 : (isnan(_791) ? cbSceneParam._m0[77u].w : min(_791, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2710 = _2708.x;
    float _2711 = _2708.y;
    float _2712 = _2708.z;
    float _2713 = _2708.w;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    if (_791 > cbSceneParam._m0[78u].w)
    {
        float _2768 = isnan(_791) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _791 : min(cbSceneParam._m0[80u].w, _791));
        float _2769 = _2768 / _791;
        float _2780 = _2769 * _841;
        float _2781 = _842 * _2769;
        float _2782 = (-0.0) - _2781;
        float _2783 = _2769 * _843;
        float _2785 = (cbSceneParam._m0[77u].w * _2782) / _2768;
        float _2786 = _2785 + cbSceneParam._m0[79u].w;
        float _2787 = cbSceneParam._m0[79u].w - _2781;
        float _2793 = sqrt(((_2780 * _2780) + (_2781 * _2781)) + (_2783 * _2783));
        float _2796 = (1.0 - (cbSceneParam._m0[77u].w / _2768)) * _2793;
        float _2801 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2803 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2956;
        if (abs((_2782 - _2785) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2956 = ((((_2786 > 0.0) ? exp2(_2801 * _2786) : (2.0 - exp2(_2803 * _2786))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2796;
        }
        else
        {
            float _2916 = 1.0 / cbSceneParam._m0[80u].x;
            float _2917 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : max(_2786, _2787));
            float _2918 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : min(_2786, _2787));
            float _2927 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : min(_2917, 0.0));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            _2956 = ((abs(_2793 / _2782) * cbSceneParam._m0[80u].y) * ((((_2927 - _2928) * 2.0) - ((exp2(_2801 * (isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0)))) - exp2(_2801 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))))) * _2916)) - ((exp2(_2803 * _2927) - exp2(_2803 * _2928)) * _2916))) + (_2796 * cbSceneParam._m0[80u].z);
        }
        vec4 _2958 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, 1.0), 0.0);
        float _2967 = exp2((_2956 * (-1.44269502162933349609375)) * (1.0 - _2958.w));
        float _2968 = log2(_2967);
        float _2984 = log2(_2713);
        _2805 = (exp2(_2984 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].x)) * _2958.x) / cbSceneParam._m0[78u].x)) + _2710;
        _2807 = (exp2(_2984 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].y)) * _2958.y) / cbSceneParam._m0[78u].y)) + _2711;
        _2809 = (exp2(_2984 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].z)) * _2958.z) / cbSceneParam._m0[78u].z)) + _2712;
        _2811 = _2967 * _2713;
    }
    else
    {
        _2805 = _2710;
        _2807 = _2711;
        _2809 = _2712;
        _2811 = _2713;
    }
    float _2823 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2824 = _2823 == 3.0;
    float _2825 = log2(_2811);
    float _2832 = exp2(_2825 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2655 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _919))) + ((_2661 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1725)) * cbPerFrame._m0[3u].x));
    float _2833 = exp2(_2825 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2657 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _919))) + ((_2663 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1725)) * cbPerFrame._m0[3u].x));
    float _2834 = exp2(_2825 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2659 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _919))) + ((_2665 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1725)) * cbPerFrame._m0[3u].x));
    float _2843 = (_2823 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2843 * (_2824 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2805)));
    SV_Target.y = _2843 * (_2824 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2807)));
    SV_Target.z = _2843 * (_2824 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2809)));
    SV_Target.w = cbInstanceData._m0[_2685].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2685].w;
}


