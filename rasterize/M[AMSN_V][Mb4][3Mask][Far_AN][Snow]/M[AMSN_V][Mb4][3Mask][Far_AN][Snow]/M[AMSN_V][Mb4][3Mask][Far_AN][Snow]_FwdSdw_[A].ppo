#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1337;
float _3985;
float _3986;
float _3987;
float _3988;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    vec4 _271 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _274 = _271.x;
    float _275 = _271.y;
    float _276 = _271.z;
    float _291 = (POSITION_1.w - cbMtdParam._m0[16u].x) * (1.0 / cbMtdParam._m0[14u].y);
    float _3997 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _292 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    vec4 _304 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _306 = _304.x;
    float _307 = _304.y;
    float _308 = _304.z;
    float _315 = (((_274 * cbMtdParam._m0[13u].x) - _306) * _292) + _306;
    float _316 = (((_275 * cbMtdParam._m0[13u].y) - _307) * _292) + _307;
    float _317 = (((_276 * cbMtdParam._m0[13u].z) - _308) * _292) + _308;
    vec4 _339 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _341 = _339.x;
    float _342 = _339.y;
    float _343 = _339.z;
    vec4 _361 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _391 = cbMtdParam._m0[15u].w * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x;
    float _399 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((((1.0 - TEXCOORD_3.x) - _361.x) * 2.0) - _391)) + 1.0;
    float _4008 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _410 = (_400 * ((_341 - _315) + (((cbMtdParam._m0[11u].x * _274) - _341) * _292))) + _315;
    float _411 = (_400 * ((_342 - _316) + (((cbMtdParam._m0[11u].y * _275) - _342) * _292))) + _316;
    float _412 = (_400 * ((_343 - _317) + (((cbMtdParam._m0[11u].z * _276) - _343) * _292))) + _317;
    vec4 _434 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _438 = _434.z;
    float _450 = ((((((1.0 - TEXCOORD_3.y) - _361.y) * 2.0) - _391) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].x) + 1.0;
    float _4019 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _461 = (((_436 - _410) + (((cbMtdParam._m0[10u].x * _274) - _436) * _292)) * _451) + _410;
    float _462 = (((_437 - _411) + (((cbMtdParam._m0[10u].y * _275) - _437) * _292)) * _451) + _411;
    float _463 = (_451 * ((_438 - _412) + (((cbMtdParam._m0[10u].z * _276) - _438) * _292))) + _412;
    vec4 _483 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _485 = _483.x;
    float _486 = _483.y;
    float _487 = _483.z;
    float _499 = ((((((1.0 - TEXCOORD_3.z) - _361.z) * 2.0) - _391) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].y) + 1.0;
    float _4030 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _500 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _510 = (((_485 - _461) + (((cbMtdParam._m0[12u].x * _274) - _485) * _292)) * _500) + _461;
    float _511 = (((_486 - _462) + (((cbMtdParam._m0[12u].y * _275) - _486) * _292)) * _500) + _462;
    float _512 = (_500 * ((_487 - _463) + (((cbMtdParam._m0[12u].z * _276) - _487) * _292))) + _463;
    vec4 _527 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _529 = _527.x;
    float _530 = _527.y;
    float _531 = _527.z;
    vec4 _543 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _547 = _543.z;
    vec4 _569 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _573 = _569.z;
    vec4 _594 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _596 = _594.x;
    float _597 = _594.y;
    float _598 = _594.z;
    vec4 _619 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _621 = _619.x;
    float _622 = _619.y;
    float _623 = _619.z;
    float _630 = ((_545 - _621) * _292) + _621;
    float _631 = ((_546 - _622) * _292) + _622;
    float _632 = ((_547 - _623) * _292) + _623;
    float _639 = (((((_545 - _596) * _292) + _596) - _630) * _400) + _630;
    float _640 = (((((_546 - _597) * _292) + _597) - _631) * _400) + _631;
    float _641 = (((((_547 - _598) * _292) + _598) - _632) * _400) + _632;
    float _648 = (((((_545 - _571) * _292) + _571) - _639) * _451) + _639;
    float _649 = (((((_546 - _572) * _292) + _572) - _640) * _451) + _640;
    float _650 = (((((_547 - _573) * _292) + _573) - _641) * _451) + _641;
    float _662 = (((((((_545 - _529) * _292) + _529) - _648) * _500) + _648) * 2.0) + (-1.0);
    float _664 = (((((((_546 - _530) * _292) + _530) - _649) * _500) + _649) * 2.0) + (-1.0);
    float _665 = dot(vec2(_662, _664), vec2(_662, _664));
    float _4041 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _670 = sqrt(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))));
    float _673 = fma(_670, _243, fma(_664, _236, _662 * _222));
    float _676 = fma(_670, _244, fma(_664, _237, _662 * _223));
    float _679 = fma(_670, _245, fma(_664, _238, _662 * _224));
    float _688 = exp2(log2(inversesqrt(dot(vec3(_673, _676, _679), vec3(_673, _676, _679))) * _676) * cbMtdParam._m0[15u].z) * cbMtdParam._m0[14u].z;
    float _4052 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _689 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _690 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _692 = 3.0 - (_690 * 2.0);
    float _697 = _690 * _690;
    float _704 = ((_697 * (cbMtdParam._m0[9u].x - _510)) * _692) + _510;
    float _705 = ((_697 * (cbMtdParam._m0[9u].y - _511)) * _692) + _511;
    float _706 = ((_697 * (cbMtdParam._m0[9u].z - _512)) * _692) + _512;
    float _708 = ((((((_547 - _531) * _292) + _531) - _650) * _500) + _650) + cbMtdParam._m0[14u].w;
    float _721 = (((cbMtdParam._m0[16u].y * _662) - _662) * _292) + _662;
    float _722 = (((cbMtdParam._m0[16u].z * _664) - _664) * _292) + _664;
    float _723 = (((cbMtdParam._m0[16u].w * _670) - _670) * _292) + _670;
    vec4 _736 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _742 = (_736.x * 2.0) + (-1.0);
    float _743 = (_736.y * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _4074 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _759 = ((_697 * (_742 - _721)) * _692) + _721;
    float _760 = ((_697 * (_743 - _722)) * _692) + _722;
    float _761 = ((_697 * (sqrt(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) - _723)) * _692) + _723;
    float _764 = fma(_761, _243, fma(_760, _236, _759 * _222));
    float _767 = fma(_761, _244, fma(_760, _237, _759 * _223));
    float _770 = fma(_761, _245, fma(_760, _238, _759 * _224));
    float _774 = inversesqrt(dot(vec3(_764, _767, _770), vec3(_764, _767, _770)));
    float _775 = _774 * _764;
    float _776 = _774 * _767;
    float _777 = _774 * _770;
    float _4085 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _778 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4107 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4118 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _797 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _847 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _837);
    float _848 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _837);
    float _849 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _837);
    float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
    float _854 = _847 * _853;
    float _855 = _848 * _853;
    float _856 = _849 * _853;
    vec4 _861 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _863 = _861.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1016 = sqrt(((_847 * _847) + (_848 * _848)) + (_849 * _849));
        float _1022 = (cbMatDynParam._m0[5u].x * _1016) + cbMatDynParam._m0[5u].y;
        float _4129 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1027 = (cbMatDynParam._m0[5u].z * _1016) + cbMatDynParam._m0[5u].w;
        float _4140 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) - _1023)) + _1023) < ((_863 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _874 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _875 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _893 = fma(_777, cbSceneParam._m0[5u].z, fma(_776, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _775));
    float _896 = fma(_777, cbSceneParam._m0[6u].z, fma(_776, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _775));
    float _899 = fma(_777, cbSceneParam._m0[7u].z, fma(_776, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _775));
    uint _912 = uint(roundEven(NORMAL.w)) * 13u;
    uint _913 = _912 + 9u;
    uint _914 = _913 + uint(cbMatDynParam._m0[0u].w);
    float _920 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * cbInstanceData._m0[_914].x;
    float _921 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * cbInstanceData._m0[_914].y;
    float _922 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * cbInstanceData._m0[_914].z;
    float _4151 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _4162 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    vec4 _934 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _874, cbSceneParam._m0[86u].y * _875));
    float _937 = _934.x * TEXCOORD_3.w;
    float _938 = dot(vec3(_775, _776, _777), vec3(_854, _855, _856));
    float _941 = _938 * 2.0;
    float _945 = (_941 * _775) - _854;
    float _946 = (_941 * _776) - _855;
    float _947 = (_941 * _777) - _856;
    float _951 = abs(dot(vec3(_854, _855, _856), vec3(_775, _776, _777)));
    float _4184 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _953 = sqrt(_778);
    float _965 = exp2((_953 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_953 * 3.0));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1336;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1061 = fma(_1005, cbModelParam._m0[26u].z, fma(_1001, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997));
        float _1065 = fma(_1005, cbModelParam._m0[27u].z, fma(_1001, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997));
        float _1069 = fma(_1005, cbModelParam._m0[28u].z, fma(_1001, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997));
        float _1094 = _997 + _775;
        float _1095 = _1001 + _776;
        float _1096 = _1005 + _777;
        float _1106 = fma(_1096, cbModelParam._m0[26u].z, fma(_1095, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1094)) - _1061;
        float _1107 = fma(_1096, cbModelParam._m0[27u].z, fma(_1095, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1094)) - _1065;
        float _1108 = fma(_1096, cbModelParam._m0[28u].z, fma(_1095, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1094)) - _1069;
        float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
        float _1125 = ((_1112 * _1106) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1061 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1112 * _1107) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1065 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1112 * _1108) / cbModelParam._m0[34u].z) + ((((((_1069 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        float _1164 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1130.x + (-0.5));
        float _1166 = _1164 * (_1130.y + (-0.5));
        float _1167 = _1164 * (_1130.z + (-0.5));
        float _1174 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1137.x + (-0.5));
        float _1176 = _1174 * (_1137.y + (-0.5));
        float _1177 = _1174 * (_1137.z + (-0.5));
        float _1184 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1144.x + (-0.5));
        float _1186 = _1184 * (_1144.y + (-0.5));
        float _1187 = _1184 * (_1144.z + (-0.5));
        float _1194 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1151.x + (-0.5));
        float _1196 = _1194 * (_1151.y + (-0.5));
        float _1197 = _1194 * (_1151.z + (-0.5));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = _1165 * 0.5;
        float _1202 = _1175 * 0.5;
        float _1203 = _1185 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1218 = (dot(vec3(_775, _776, _777), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1228 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _4232 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1230 + 1.0))) + _1235) * _1198;
        float _1245 = _1166 * 0.5;
        float _1246 = _1176 * 0.5;
        float _1247 = _1186 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_775, _776, _777), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4265 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1272 + 1.0))) + _1277) * _1199;
        float _1287 = _1167 * 0.5;
        float _1288 = _1177 * 0.5;
        float _1289 = _1187 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_775, _776, _777), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4298 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1314 + 1.0))) + _1319) * _1200;
        _1336 = _1167;
        _1338 = _1166;
        _1339 = _1165;
        _1340 = _1177;
        _1341 = _1176;
        _1342 = _1175;
        _1343 = _1187;
        _1344 = _1186;
        _1345 = _1185;
        _1346 = _1200;
        _1347 = _1199;
        _1348 = _1198;
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
    }
    else
    {
        _1336 = _1337;
        _1338 = _1337;
        _1339 = _1337;
        _1340 = _1337;
        _1341 = _1337;
        _1342 = _1337;
        _1343 = _1337;
        _1344 = _1337;
        _1345 = _1337;
        _1346 = _1337;
        _1347 = _1337;
        _1348 = _1337;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1380 = fma(_1005, cbModelParam._m0[30u].z, fma(_1001, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _997));
        float _1384 = fma(_1005, cbModelParam._m0[31u].z, fma(_1001, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _997));
        float _1388 = fma(_1005, cbModelParam._m0[32u].z, fma(_1001, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _997));
        float _1411 = _997 + _775;
        float _1412 = _1001 + _776;
        float _1413 = _1005 + _777;
        float _1423 = fma(_1413, cbModelParam._m0[30u].z, fma(_1412, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1411)) - _1380;
        float _1424 = fma(_1413, cbModelParam._m0[31u].z, fma(_1412, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1411)) - _1384;
        float _1425 = fma(_1413, cbModelParam._m0[32u].z, fma(_1412, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1411)) - _1388;
        float _1429 = inversesqrt(dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425)));
        float _1442 = ((_1429 * _1423) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1380 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1429 * _1424) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1384 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1444 = ((_1429 * _1425) / cbModelParam._m0[35u].z) + ((((((_1388 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        float _1479 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1446.x + (-0.5));
        float _1481 = _1479 * (_1446.y + (-0.5));
        float _1482 = _1479 * (_1446.z + (-0.5));
        float _1489 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1453.x + (-0.5));
        float _1491 = _1489 * (_1453.y + (-0.5));
        float _1492 = _1489 * (_1453.z + (-0.5));
        float _1499 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1460.x + (-0.5));
        float _1501 = _1499 * (_1460.y + (-0.5));
        float _1502 = _1499 * (_1460.z + (-0.5));
        float _1509 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1467.x + (-0.5));
        float _1511 = _1509 * (_1467.y + (-0.5));
        float _1512 = _1509 * (_1467.z + (-0.5));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = _1480 * 0.5;
        float _1517 = _1490 * 0.5;
        float _1518 = _1500 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_775, _776, _777), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4361 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1543 + 1.0))) + _1548) * _1513;
        float _1558 = _1481 * 0.5;
        float _1559 = _1491 * 0.5;
        float _1560 = _1501 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_775, _776, _777), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4394 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1585 + 1.0))) + _1590) * _1514;
        float _1600 = _1482 * 0.5;
        float _1601 = _1492 * 0.5;
        float _1602 = _1502 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_775, _776, _777), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4405 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4416 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4427 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_1627 + 1.0))) + _1632) * _1515;
        _1649 = _1482;
        _1650 = _1481;
        _1651 = _1480;
        _1652 = _1492;
        _1653 = _1491;
        _1654 = _1490;
        _1655 = _1502;
        _1656 = _1501;
        _1657 = _1500;
        _1658 = _1515;
        _1659 = _1514;
        _1660 = _1513;
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
    }
    else
    {
        _1649 = _1337;
        _1650 = _1337;
        _1651 = _1337;
        _1652 = _1337;
        _1653 = _1337;
        _1654 = _1337;
        _1655 = _1337;
        _1656 = _1337;
        _1657 = _1337;
        _1658 = _1337;
        _1659 = _1337;
        _1660 = _1337;
        _1661 = 0.0;
        _1662 = 0.0;
        _1663 = 0.0;
    }
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1349)) + _1349;
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1350)) + _1350;
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1351)) + _1351;
    float _1696 = fma(_1675, cbSceneParam._m0[89u].z, fma(_1674, cbSceneParam._m0[89u].y, _1673 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1675, cbSceneParam._m0[90u].z, fma(_1674, cbSceneParam._m0[90u].y, _1673 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1675, cbSceneParam._m0[91u].z, fma(_1674, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1673));
    float _1717 = _945 * 0.5;
    float _1718 = _946 * 0.5;
    float _1719 = _947 * 0.5;
    float _1720 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1723 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1726 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1760;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1733 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1336, _1340, _1343, _1346));
        float _1737 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1741 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1339, _1342, _1345, _1348));
        float _1748 = dot(vec4(cbModelParam._m0[39u]), vec4(_1717, _1718, _1719, 1.0));
        _1760 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1748) ? 0.0 : (isnan(0.0) ? _1748 : max(0.0, _1748))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1760 = 1.0;
    }
    float _1771;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1762 = dot(vec4(cbModelParam._m0[40u]), vec4(_1717, _1718, _1719, 1.0));
        _1771 = dot(vec3(isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1762) ? 0.0 : (isnan(0.0) ? _1762 : max(0.0, _1762))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1771 = 1.0;
    }
    float _1775 = (_1771 * cbModelParam._m0[1u].x) + (_1760 * (1.0 - cbModelParam._m0[1u].x));
    float _1785 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _778);
    float _1786 = isnan(_1785) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1785 : min(cbModelParam._m0[25u].z, _1785));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1833 = fma(_1005, cbModelParam._m0[13u].z, fma(_1001, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _997)) + cbModelParam._m0[13u].w;
        float _1837 = fma(_1005, cbModelParam._m0[14u].z, fma(_1001, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _997)) + cbModelParam._m0[14u].w;
        float _1841 = fma(_1005, cbModelParam._m0[15u].z, fma(_1001, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _997)) + cbModelParam._m0[15u].w;
        float _1844 = fma(_947, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945));
        float _1847 = fma(_947, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945));
        float _1850 = fma(_947, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945));
        float _1878;
        if (_1844 > 0.0)
        {
            _1878 = abs((1.0 - _1833) / _1844);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1833 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1878 = frontier_phi_19_17_ladder;
        }
        float _2051;
        if (_1847 > 0.0)
        {
            _2051 = abs((1.0 - _1837) / _1847);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1837 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2051 = frontier_phi_28_24_ladder;
        }
        float _2346;
        if (_1850 > 0.0)
        {
            _2346 = abs((1.0 - _1841) / _1850);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1841 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2346 = frontier_phi_40_35_ladder;
        }
        float _2348 = isnan(_2051) ? _1878 : (isnan(_1878) ? _2051 : min(_1878, _2051));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1844) + _1833;
        float _2354 = (_2349 * _1847) + _1837;
        float _2355 = (_2349 * _1850) + _1841;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2358 = (-1.0) - _2356;
        float _2360 = _2356 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2355 > _2360) || ((_2355 < _2358) || ((_2354 > _2360) || ((_2354 < _2358) || ((_2353 < _2358) || (_2353 > _2360))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2355, cbModelParam._m0[9u].z, fma(_2354, cbModelParam._m0[9u].y, _2353 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2355, cbModelParam._m0[10u].z, fma(_2354, cbModelParam._m0[10u].y, _2353 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2355, cbModelParam._m0[11u].z, fma(_2354, cbModelParam._m0[11u].y, _2353 * cbModelParam._m0[11u].x))), _1786);
            frontier_phi_18_40_ladder = _2500.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2500.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2500.x * cbModelParam._m0[1u].y;
        }
        _1866 = frontier_phi_18_40_ladder_2;
        _1868 = frontier_phi_18_40_ladder_1;
        _1870 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_945, _946, _947), _1786);
        _1866 = _1854.x * cbModelParam._m0[1u].y;
        _1868 = _1854.y * cbModelParam._m0[1u].y;
        _1870 = _1854.z * cbModelParam._m0[1u].y;
    }
    float _1874 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _778);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1874 : min(cbModelParam._m0[25u].w, _1874));
    float _1968;
    float _1970;
    float _1972;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1932 = fma(_1005, cbModelParam._m0[21u].z, fma(_1001, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _997)) + cbModelParam._m0[21u].w;
        float _1936 = fma(_1005, cbModelParam._m0[22u].z, fma(_1001, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _997)) + cbModelParam._m0[22u].w;
        float _1940 = fma(_1005, cbModelParam._m0[23u].z, fma(_1001, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _997)) + cbModelParam._m0[23u].w;
        float _1943 = fma(_947, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945));
        float _1946 = fma(_947, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945));
        float _1949 = fma(_947, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945));
        float _2056;
        if (_1943 > 0.0)
        {
            _2056 = abs((1.0 - _1932) / _1943);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1932 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2056 = frontier_phi_30_26_ladder;
        }
        float _2373;
        if (_1946 > 0.0)
        {
            _2373 = abs((1.0 - _1936) / _1946);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1936 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2373 = frontier_phi_42_37_ladder;
        }
        float _2700;
        if (_1949 > 0.0)
        {
            _2700 = abs((1.0 - _1940) / _1949);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1940 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2700 = frontier_phi_52_49_ladder;
        }
        float _2702 = isnan(_2373) ? _2056 : (isnan(_2056) ? _2373 : min(_2056, _2373));
        float _2703 = isnan(_2700) ? _2702 : (isnan(_2702) ? _2700 : min(_2702, _2700));
        float _2707 = (_2703 * _1943) + _1932;
        float _2708 = (_2703 * _1946) + _1936;
        float _2709 = (_2703 * _1949) + _1940;
        float _2710 = _2703 * 9.9999997473787516355514526367188e-05;
        float _2711 = (-1.0) - _2710;
        float _2713 = _2710 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2709 > _2713) || ((_2709 < _2711) || ((_2708 > _2713) || ((_2708 < _2711) || ((_2707 < _2711) || (_2707 > _2713))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2709, cbModelParam._m0[17u].z, fma(_2708, cbModelParam._m0[17u].y, _2707 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2709, cbModelParam._m0[18u].z, fma(_2708, cbModelParam._m0[18u].y, _2707 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2709, cbModelParam._m0[19u].z, fma(_2708, cbModelParam._m0[19u].y, _2707 * cbModelParam._m0[19u].x))), _1875);
            frontier_phi_27_52_ladder = _2827.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2827.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2827.x * cbModelParam._m0[1u].z;
        }
        _1968 = frontier_phi_27_52_ladder_2;
        _1970 = frontier_phi_27_52_ladder_1;
        _1972 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1952 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_945, _946, _947), _1875);
        _1968 = _1952.x * cbModelParam._m0[1u].z;
        _1970 = _1952.y * cbModelParam._m0[1u].z;
        _1972 = _1952.z * cbModelParam._m0[1u].z;
    }
    float _1984 = ((((1.0 - _965) * ((_953 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_965 * _953)) * _937;
    float _1985 = _1984 * ((cbModelParam._m0[1u].w * (_1968 - _1866)) + _1866);
    float _1986 = _1984 * ((cbModelParam._m0[1u].w * (_1970 - _1868)) + _1868);
    float _1987 = _1984 * ((cbModelParam._m0[1u].w * (_1972 - _1870)) + _1870);
    float _1990 = fma(_1987, cbSceneParam._m0[89u].z, fma(_1986, cbSceneParam._m0[89u].y, _1985 * cbSceneParam._m0[89u].x));
    float _1993 = fma(_1987, cbSceneParam._m0[90u].z, fma(_1986, cbSceneParam._m0[90u].y, _1985 * cbSceneParam._m0[90u].x));
    float _1996 = fma(_1987, cbSceneParam._m0[91u].z, fma(_1986, cbSceneParam._m0[91u].y, _1985 * cbSceneParam._m0[91u].x));
    float _2030 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2038 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2042 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2043 = _2030 / _2042;
    float _2044 = _2034 / _2042;
    float _2045 = _2038 / _2042;
    float _2192;
    float _2193;
    float _2194;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2072 = ((uint(_2045 > cbSceneParam._m0[59u].y) + uint(_2045 > cbSceneParam._m0[59u].x)) + uint(_2045 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2073 = _2072 + 43u;
        uint _2081 = _2072 + 44u;
        uint _2089 = _2072 + 45u;
        uint _2097 = _2072 + 46u;
        float _2108 = fma(_2042, cbSceneParam._m0[_2073].w, fma(_2038, cbSceneParam._m0[_2073].z, fma(_2034, cbSceneParam._m0[_2073].y, _2030 * cbSceneParam._m0[_2073].x)));
        float _2112 = fma(_2042, cbSceneParam._m0[_2081].w, fma(_2038, cbSceneParam._m0[_2081].z, fma(_2034, cbSceneParam._m0[_2081].y, _2030 * cbSceneParam._m0[_2081].x)));
        float _2120 = fma(_2042, cbSceneParam._m0[_2097].w, fma(_2038, cbSceneParam._m0[_2097].z, fma(_2034, cbSceneParam._m0[_2097].y, _2030 * cbSceneParam._m0[_2097].x)));
        float _2125 = cbSceneParam._m0[33u].z * _2120;
        float _2127 = cbSceneParam._m0[33u].w * _2120;
        float _2130 = fma(_2042, cbSceneParam._m0[_2089].w, fma(_2038, cbSceneParam._m0[_2089].z, fma(_2034, cbSceneParam._m0[_2089].y, _2030 * cbSceneParam._m0[_2089].x))) / _2120;
        float _2178 = (cbSceneParam._m0[33u].x - sqrt(((_2044 * _2044) + (_2043 * _2043)) + (_2045 * _2045))) * cbSceneParam._m0[33u].y;
        float _4553 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2185 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2125 + _2108) / _2120, (_2127 + _2112) / _2120), _2130), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 + _2108) / _2120, (_2112 - _2125) / _2120), _2130), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2108 - _2125) / _2120, (_2112 - _2127) / _2120), _2130), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2108 - _2127) / _2120, (_2125 + _2112) / _2120), _2130), 0.0)).x), vec4(0.25)));
        _2192 = 1.0 - (_2185 * cbSceneParam._m0[34u].x);
        _2193 = 1.0 - (_2185 * cbSceneParam._m0[34u].y);
        _2194 = 1.0 - (_2185 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2192 = 1.0;
        _2193 = 1.0;
        _2194 = 1.0;
    }
    float _2258;
    float _2260;
    float _2262;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2246 = fma(_2042, cbSceneParam._m0[63u].w, fma(_2038, cbSceneParam._m0[63u].z, fma(_2034, cbSceneParam._m0[63u].y, _2030 * cbSceneParam._m0[63u].x)));
        float _2247 = fma(_2042, cbSceneParam._m0[60u].w, fma(_2038, cbSceneParam._m0[60u].z, fma(_2034, cbSceneParam._m0[60u].y, _2030 * cbSceneParam._m0[60u].x))) / _2246;
        float _2248 = fma(_2042, cbSceneParam._m0[61u].w, fma(_2038, cbSceneParam._m0[61u].z, fma(_2034, cbSceneParam._m0[61u].y, _2030 * cbSceneParam._m0[61u].x))) / _2246;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2247 >= cbSceneParam._m0[64u].x) && (_2248 >= cbSceneParam._m0[64u].y)) && (_2247 <= cbSceneParam._m0[64u].z)) && (_2248 <= cbSceneParam._m0[64u].w))
        {
            float _2386 = fma(_2042, cbSceneParam._m0[62u].w, fma(_2038, cbSceneParam._m0[62u].z, fma(_2034, cbSceneParam._m0[62u].y, _2030 * cbSceneParam._m0[62u].x))) / _2246;
            float _2390 = isnan(cbSceneParam._m0[41u].w) ? _2386 : (isnan(_2386) ? cbSceneParam._m0[41u].w : max(_2386, cbSceneParam._m0[41u].w));
            float _2433 = (cbSceneParam._m0[33u].x - sqrt(((_2044 * _2044) + (_2043 * _2043)) + (_2045 * _2045))) * cbSceneParam._m0[33u].y;
            float _4569 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
            float _2440 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2247, cbSceneParam._m0[33u].w + _2248), _2390), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2247, _2248 - cbSceneParam._m0[33u].z), _2390), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2247 - cbSceneParam._m0[33u].z, _2248 - cbSceneParam._m0[33u].w), _2390), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2247 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2248), _2390), 0.0)).x), vec4(0.25)));
            float _2444 = 1.0 - (_2440 * cbSceneParam._m0[34u].x);
            float _2445 = 1.0 - (_2440 * cbSceneParam._m0[34u].y);
            float _2446 = 1.0 - (_2440 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2445) ? _2193 : (isnan(_2193) ? _2445 : min(_2193, _2445));
            frontier_phi_39_38_ladder_1 = isnan(_2444) ? _2192 : (isnan(_2192) ? _2444 : min(_2192, _2444));
            frontier_phi_39_38_ladder_2 = isnan(_2446) ? _2194 : (isnan(_2194) ? _2446 : min(_2194, _2446));
        }
        else
        {
            frontier_phi_39_38_ladder = _2193;
            frontier_phi_39_38_ladder_1 = _2192;
            frontier_phi_39_38_ladder_2 = _2194;
        }
        _2258 = frontier_phi_39_38_ladder_1;
        _2260 = frontier_phi_39_38_ladder;
        _2262 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2258 = _2192;
        _2260 = _2193;
        _2262 = _2194;
    }
    uvec4 _2267 = floatBitsToUint(cbInstanceData._m0[_912 + 5u]);
    uint _2269 = _2267.x * 14u;
    uint _2270 = _2269 + 13u;
    float _2277 = _937 + (-1.0);
    float _2282 = (cbLight._m0[_2270].x * _2277) + 1.0;
    float _2283 = (cbLight._m0[_2270].y * _2277) + 1.0;
    float _2284 = (cbLight._m0[_2270].z * _2277) + 1.0;
    float _2285 = (cbLight._m0[_2270].w * _2277) + 1.0;
    uint _2286 = _2269 + 5u;
    float _2292 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
    uint _2296 = _2269 + 4u;
    float _2305 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
    uint _2309 = _2269 | 1u;
    float _2320 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_775, _776, _777));
    float _2323 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_775, _776, _777));
    float _4605 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _4616 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2328 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * 0.3183098733425140380859375;
    float _2330 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * 0.3183098733425140380859375;
    float _2337 = ((cbLight._m0[_2286].x * _2292) * _2330) + (((cbLight._m0[_2296].x * _2258) * _2305) * _2328);
    float _2338 = ((_2292 * cbLight._m0[_2286].y) * _2330) + (((cbLight._m0[_2296].y * _2260) * _2305) * _2328);
    float _2339 = ((_2292 * cbLight._m0[_2286].z) * _2330) + (((cbLight._m0[_2296].z * _2262) * _2305) * _2328);
    uvec4 _2343 = floatBitsToUint(cbLight._m0[_2269 + 12u]);
    bool _2345 = _2343.x == 0u;
    float _2447;
    float _2449;
    float _2451;
    if (_2345)
    {
        _2447 = _2337;
        _2449 = _2338;
        _2451 = _2339;
    }
    else
    {
        uint _2455 = _2269 + 6u;
        float _2471 = (dot(vec3(cbLight._m0[_2269 + 2u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2472 = _2471 * _2471;
        float _4627 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2473 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2474 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2447 = (((cbLight._m0[_2455].x * 0.3183098733425140380859375) * _2473) * _2474) + _2337;
        _2449 = (((cbLight._m0[_2455].y * 0.3183098733425140380859375) * _2473) * _2474) + _2338;
        _2451 = (((cbLight._m0[_2455].z * 0.3183098733425140380859375) * _2473) * _2474) + _2339;
    }
    bool _2454 = _2343.y == 0u;
    float _2509;
    float _2511;
    float _2513;
    if (_2454)
    {
        _2509 = _2447;
        _2511 = _2449;
        _2513 = _2451;
    }
    else
    {
        uint _2671 = _2269 + 7u;
        float _2687 = (dot(vec3(cbLight._m0[_2269 + 3u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2688 = _2687 * _2687;
        float _4643 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2689 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2690 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2509 = (((cbLight._m0[_2671].x * 0.3183098733425140380859375) * _2689) * _2690) + _2447;
        _2511 = (((cbLight._m0[_2671].y * 0.3183098733425140380859375) * _2689) * _2690) + _2449;
        _2513 = (((cbLight._m0[_2671].z * 0.3183098733425140380859375) * _2689) * _2690) + _2451;
    }
    uint _2516 = _2269 + 8u;
    float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2269].w)) * _778) * 0.949999988079071044921875);
    float _2530 = _2529 * _2529;
    float _2531 = cbLight._m0[_2269].x + _854;
    float _2532 = cbLight._m0[_2269].y + _855;
    float _2533 = cbLight._m0[_2269].z + _856;
    float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
    float _2538 = _2537 * _2531;
    float _2539 = _2537 * _2532;
    float _2540 = _2537 * _2533;
    float _2541 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2269].xyz));
    float _4659 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _4670 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _2545 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _2546 = dot(vec3(_775, _776, _777), vec3(_2538, _2539, _2540));
    float _4681 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2549 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2550 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_2538, _2539, _2540));
    float _4692 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2554 = _2530 * _2530;
    float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
    float _2569 = (exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2570 = 1.0 - _2530;
    float _2581 = (0.5 / (((_2545 * ((_2544 * _2570) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2570) + _2530) * _2544))) * _2544;
    float _4703 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2583 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
    uint _2597 = _2269 + 9u;
    float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _778) * 0.949999988079071044921875);
    float _2609 = _2608 * _2608;
    float _2610 = cbLight._m0[_2309].x + _854;
    float _2611 = cbLight._m0[_2309].y + _855;
    float _2612 = cbLight._m0[_2309].z + _856;
    float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
    float _2617 = _2616 * _2610;
    float _2618 = _2616 * _2611;
    float _2619 = _2616 * _2612;
    float _2620 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2309].xyz));
    float _4714 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2623 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _2624 = dot(vec3(_775, _776, _777), vec3(_2617, _2618, _2619));
    float _4725 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2627 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2628 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2617, _2618, _2619));
    float _4736 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2632 = _2609 * _2609;
    float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
    float _2645 = (exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2646 = 1.0 - _2609;
    float _2656 = (0.5 / (((_2545 * ((_2623 * _2646) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2646) + _2609) * _2623))) * _2623;
    float _4747 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2658 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
    float _2668 = (((_2645 * cbLight._m0[_2597].x) * _2658) * _2292) + ((((cbLight._m0[_2516].x * _2258) * _2569) * _2583) * _2305);
    float _2669 = (((_2645 * cbLight._m0[_2597].y) * _2658) * _2292) + ((((cbLight._m0[_2516].y * _2260) * _2569) * _2583) * _2305);
    float _2670 = (((_2645 * cbLight._m0[_2597].z) * _2658) * _2292) + ((((cbLight._m0[_2516].z * _2262) * _2569) * _2583) * _2305);
    float _2726;
    float _2728;
    float _2730;
    if (_2345)
    {
        _2726 = _2668;
        _2728 = _2669;
        _2730 = _2670;
    }
    else
    {
        uint _2732 = _2269 + 2u;
        uint _2736 = _2269 + 10u;
        float _2750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2732].w)) * _778) * 0.949999988079071044921875);
        float _2751 = _2750 * _2750;
        float _2752 = cbLight._m0[_2732].x + _854;
        float _2753 = cbLight._m0[_2732].y + _855;
        float _2754 = cbLight._m0[_2732].z + _856;
        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
        float _2759 = _2758 * _2752;
        float _2760 = _2758 * _2753;
        float _2761 = _2758 * _2754;
        float _2762 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2732].xyz));
        float _4758 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
        float _2766 = dot(vec3(_775, _776, _777), vec3(_2759, _2760, _2761));
        float _4769 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2769 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2770 = dot(vec3(cbLight._m0[_2732].xyz), vec3(_2759, _2760, _2761));
        float _4780 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2774 = _2751 * _2751;
        float _2778 = ((_2769 * _2769) * (_2774 + (-1.0))) + 1.0;
        float _2787 = (exp2(log2(1.0 - (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2788 = 1.0 - _2751;
        float _2798 = (0.5 / (((_2545 * ((_2765 * _2788) + _2751)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2788) + _2751) * _2765))) * _2765;
        float _4791 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2800 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2774 / ((_2778 * _2778) * 3.141590118408203125));
        float _2801 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2726 = (((_2787 * cbLight._m0[_2736].x) * _2800) * _2801) + _2668;
        _2728 = (((_2787 * cbLight._m0[_2736].y) * _2800) * _2801) + _2669;
        _2730 = (((_2787 * cbLight._m0[_2736].z) * _2800) * _2801) + _2670;
    }
    float _2832;
    float _2834;
    float _2836;
    if (_2454)
    {
        _2832 = _2726;
        _2834 = _2728;
        _2836 = _2730;
    }
    else
    {
        uint _2843 = _2269 + 3u;
        uint _2847 = _2269 + 11u;
        float _2861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2843].w)) * _778) * 0.949999988079071044921875);
        float _2862 = _2861 * _2861;
        float _2863 = cbLight._m0[_2843].x + _854;
        float _2864 = cbLight._m0[_2843].y + _855;
        float _2865 = cbLight._m0[_2843].z + _856;
        float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
        float _2870 = _2869 * _2863;
        float _2871 = _2869 * _2864;
        float _2872 = _2869 * _2865;
        float _2873 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2843].xyz));
        float _4807 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2876 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
        float _2877 = dot(vec3(_775, _776, _777), vec3(_2870, _2871, _2872));
        float _4818 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2880 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
        float _2881 = dot(vec3(cbLight._m0[_2843].xyz), vec3(_2870, _2871, _2872));
        float _4829 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2885 = _2862 * _2862;
        float _2889 = ((_2880 * _2880) * (_2885 + (-1.0))) + 1.0;
        float _2898 = (exp2(log2(1.0 - (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2899 = 1.0 - _2862;
        float _2909 = (0.5 / (((_2545 * ((_2876 * _2899) + _2862)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2899) + _2862) * _2876))) * _2876;
        float _4840 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2911 = (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2885 / ((_2889 * _2889) * 3.141590118408203125));
        float _2912 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2832 = (((_2898 * cbLight._m0[_2847].x) * _2911) * _2912) + _2726;
        _2834 = (((_2898 * cbLight._m0[_2847].y) * _2911) * _2912) + _2728;
        _2836 = (((_2898 * cbLight._m0[_2847].z) * _2911) * _2912) + _2730;
    }
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    if (_2267.y == 0u)
    {
        uvec4 _2933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2934 = _2933.x;
        uint _2945 = uint((float(_2933.y) * floor(float(uint(cbSceneParam._m0[85u].y * _875) / _2934))) + floor(float(uint(cbSceneParam._m0[85u].x * _874) / _2934)));
        float _2955 = (log2(_2045 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2956 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        uint _2959 = uint(isnan(14.0) ? _2956 : (isnan(_2956) ? 14.0 : min(_2956, 14.0)));
        uvec4 _2964 = texelFetch(g_lightClusterGridBuffer, int(((_2959 << 2u) + (_2945 << 6u)) >> 2u));
        uint _2965 = _2964.x;
        uint _2966 = _2933.z;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        if (((((1u << ((_2966 >> 4u) & 15u)) + 4294967295u) & _2965) == 0u) || ((_2966 & 240u) == 0u))
        {
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
        }
        else
        {
            float _3045;
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            uint _3202 = 0u;
            uint _3211;
            bool _3212;
            for (;;)
            {
                _3211 = texelFetch(g_lightClassification, int((((_2959 << 5u) + (_2945 << 9u)) + (_3202 << 2u)) >> 2u)).x;
                _3212 = _3211 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3212)
                {
                    frontier_phi_73_pred = _3201;
                    frontier_phi_73_pred_1 = _3200;
                    frontier_phi_73_pred_2 = _3199;
                    frontier_phi_73_pred_3 = _3198;
                    frontier_phi_73_pred_4 = _3197;
                    frontier_phi_73_pred_5 = _3196;
                }
                else
                {
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    uint _3347;
                    _3341 = _3196;
                    _3342 = _3197;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3201;
                    _3347 = _3211;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    for (;;)
                    {
                        uint _3351 = uint(findLSB(_3347)) + (_3202 << 5u);
                        uint _3348 = (_3347 + 4294967295u) & _3347;
                        uint _3353 = _3351 * 48u;
                        vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3353)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 3u)).x));
                        uint _3373 = (_3351 * 48u) + 4u;
                        vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3373)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 3u)).x));
                        uint _3392 = (_3351 * 48u) + 8u;
                        vec3 _3403 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3392)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 2u)).x));
                        float _3407 = _3367.x - _2043;
                        float _3408 = _3367.y - _2044;
                        float _3409 = _3367.z - _2045;
                        float _3410 = dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409));
                        float _3413 = inversesqrt(_3410);
                        float _3414 = _3413 * _3407;
                        float _3415 = _3413 * _3408;
                        float _3416 = _3413 * _3409;
                        float _3417 = dot(vec3(_893, _896, _899), vec3(_3414, _3415, _3416));
                        float _3422 = 1.0 - (_3410 * _3367.w);
                        float _4866 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3423 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                        float _3424 = sqrt(_3410) * _3386.w;
                        float _3427 = 1.39999997615814208984375 / (_3424 + 1.39999997615814208984375);
                        float _3428 = _3427 * _3427;
                        float _3431 = ((1.0 - _3428) * _3417) + _3428;
                        float _3434 = _3424 * _3424;
                        float _3438 = ((isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0))) * _3423) / ((_3434 * 0.699999988079071044921875) + 1.0);
                        float _3442 = (-0.0) - _2043;
                        float _3443 = (-0.0) - _2044;
                        float _3444 = (-0.0) - _2045;
                        float _3448 = inversesqrt(dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444)));
                        float _3449 = _3448 * _3442;
                        float _3450 = _3448 * _3443;
                        float _3451 = _3448 * _3444;
                        float _3458 = exp2(log2(1.0 / ((_3434 * 3.5) + 5.0)) * 0.25);
                        float _3459 = 1.0 - _953;
                        float _3466 = sqrt(1.0 - ((1.0 - (_3459 * _3459)) * (1.0 - (_3458 * _3458))));
                        float _3467 = _3466 * _3466;
                        float _3468 = _3467 * _3467;
                        float _3469 = _3449 + _3414;
                        float _3470 = _3450 + _3415;
                        float _3471 = _3451 + _3416;
                        float _3475 = inversesqrt(dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471)));
                        float _3479 = dot(vec3(_893, _896, _899), vec3(_3449, _3450, _3451));
                        float _4882 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3482 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                        float _3483 = dot(vec3(_893, _896, _899), vec3(_3475 * _3469, _3475 * _3470, _3475 * _3471));
                        float _4893 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3486 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                        float _3490 = ((_3486 * _3486) * (_3468 + (-1.0))) + 1.0;
                        float _3491 = _3427 * _3467;
                        float _3492 = _3491 * _3491;
                        float _3495 = ((1.0 - _3492) * _3417) + _3492;
                        float _4904 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3496 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3497 = 1.0 - _3467;
                        float _3507 = (0.5 / (((_3496 * ((_3482 * _3497) + _3467)) + 9.9999999392252902907785028219223e-09) + (((_3496 * _3497) + _3467) * _3482))) * _3496;
                        float _4915 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3518 = (((_3468 * 3.1415927410125732421875) * (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) / ((_3490 * _3490) * ((_3434 * 2.1991131305694580078125) + 3.141590118408203125))) * _3423;
                        _3271 = (_3438 * _3386.x) + _3344;
                        _3272 = (_3438 * _3386.y) + _3345;
                        _3273 = (_3438 * _3386.z) + _3346;
                        _3268 = (_3518 * _3403.x) + _3341;
                        _3269 = (_3518 * _3403.y) + _3342;
                        _3270 = (_3518 * _3403.z) + _3343;
                        if (_3348 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3341 = _3268;
                            _3342 = _3269;
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3273;
                            _3347 = _3348;
                        }
                    }
                    frontier_phi_73_pred = _3273;
                    frontier_phi_73_pred_1 = _3272;
                    frontier_phi_73_pred_2 = _3271;
                    frontier_phi_73_pred_3 = _3270;
                    frontier_phi_73_pred_4 = _3269;
                    frontier_phi_73_pred_5 = _3268;
                }
                _3055 = frontier_phi_73_pred;
                _3053 = frontier_phi_73_pred_1;
                _3051 = frontier_phi_73_pred_2;
                _3049 = frontier_phi_73_pred_3;
                _3047 = frontier_phi_73_pred_4;
                _3045 = frontier_phi_73_pred_5;
                uint _3203 = _3202 + 1u;
                if (_3203 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3196 = _3045;
                    _3197 = _3047;
                    _3198 = _3049;
                    _3199 = _3051;
                    _3200 = _3053;
                    _3201 = _3055;
                    _3202 = _3203;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
        }
        uvec4 _3058 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3059 = _3058.z;
        uint _3061 = (_3059 >> 8u) & 15u;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        if (((4294967295u << _3061) & _2965) == 0u)
        {
            _3164 = _3044;
            _3166 = _3046;
            _3168 = _3048;
            _3170 = _3050;
            _3172 = _3052;
            _3174 = _3054;
        }
        else
        {
            float _3189 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
            float _3190 = _3189 * _2043;
            float _3191 = _3189 * _2044;
            float _3192 = _3189 * _2045;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3061 < ((_3059 >> 12u) & 15u))
            {
                float _3165;
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3324 = _3044;
                float _3325 = _3046;
                float _3326 = _3048;
                float _3327 = _3050;
                float _3328 = _3052;
                float _3329 = _3054;
                uint _3330 = _3061;
                uint _3339;
                bool _3340;
                for (;;)
                {
                    _3339 = texelFetch(g_lightClassification, int((((_2959 << 5u) + (_2945 << 9u)) + (_3330 << 2u)) >> 2u)).x;
                    _3340 = _3339 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3340)
                    {
                        frontier_phi_84_pred = _3328;
                        frontier_phi_84_pred_1 = _3327;
                        frontier_phi_84_pred_2 = _3326;
                        frontier_phi_84_pred_3 = _3325;
                        frontier_phi_84_pred_4 = _3324;
                        frontier_phi_84_pred_5 = _3329;
                    }
                    else
                    {
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3545 = _3324;
                        float _3546 = _3325;
                        float _3547 = _3326;
                        float _3548 = _3327;
                        float _3549 = _3328;
                        float _3550 = _3329;
                        uint _3551 = _3339;
                        uint _3552;
                        vec4 _3577;
                        float _3578;
                        vec4 _3593;
                        vec3 _3605;
                        vec4 _3620;
                        vec4 _3636;
                        float _3683;
                        bool _3684;
                        for (;;)
                        {
                            uint _3562 = ((_3330 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3551));
                            _3552 = (_3551 + 4294967295u) & _3551;
                            uint _3564 = _3562 * 40u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            _3578 = _3577.w;
                            uint _3580 = (_3562 * 40u) + 4u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3562 * 40u) + 8u;
                            _3605 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x));
                            uint _3607 = (_3562 * 40u) + 16u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3623 = (_3562 * 40u) + 20u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3639 = (_3562 * 40u) + 24u;
                            vec4 _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3658 = (_3562 * 40u) + 28u;
                            vec4 _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            _3683 = fma(_2045, _3671.z, fma(_2044, _3671.y, _3671.x * _2043)) + _3671.w;
                            _3684 = !((fma(_2045, _3652.z, fma(_2044, _3652.y, _3652.x * _2043)) + _3652.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3684)
                            {
                                float _3711 = _3577.x - _2043;
                                float _3712 = _3577.y - _2044;
                                float _3713 = _3577.z - _2045;
                                float _3714 = dot(vec3(_3711, _3712, _3713), vec3(_3711, _3712, _3713));
                                float _3717 = inversesqrt(_3714);
                                float _3718 = _3717 * _3711;
                                float _3719 = _3717 * _3712;
                                float _3720 = _3717 * _3713;
                                float _3724 = 1.0 - (_3714 / (_3578 * _3578));
                                float _4926 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3725 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3729 = sqrt(_3714) * _3593.w;
                                float _3731 = 1.39999997615814208984375 / (_3729 + 1.39999997615814208984375);
                                float _3732 = _3731 * _3731;
                                float _3735 = ((1.0 - _3732) * dot(vec3(_3718, _3719, _3720), vec3(_893, _896, _899))) + _3732;
                                float _3738 = _3729 * _3729;
                                float _3742 = (fma(_2045, _3620.z, fma(_2044, _3620.y, _3620.x * _2043)) + _3620.w) / _3683;
                                float _3743 = (fma(_2045, _3636.z, fma(_2044, _3636.y, _3636.x * _2043)) + _3636.w) / _3683;
                                float _3747 = 1.0 - dot(vec2(_3742, _3743), vec2(_3742, _3743));
                                float _4942 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3748 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                                float _3749 = _3748 * (((isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0))) * _3725) / ((_3738 * 0.699999988079071044921875) + 1.0));
                                float _3761 = exp2(log2(1.0 / ((_3738 * 3.5) + 5.0)) * 0.25);
                                float _3762 = 1.0 - _953;
                                float _3769 = sqrt(1.0 - ((1.0 - (_3762 * _3762)) * (1.0 - (_3761 * _3761))));
                                float _3770 = _3769 * _3769;
                                float _3771 = _3770 * _3770;
                                float _3772 = _3718 - _3190;
                                float _3773 = _3719 - _3191;
                                float _3774 = _3720 - _3192;
                                float _3778 = inversesqrt(dot(vec3(_3772, _3773, _3774), vec3(_3772, _3773, _3774)));
                                float _3782 = dot(vec3(_893, _896, _899), vec3((-0.0) - _3190, (-0.0) - _3191, (-0.0) - _3192));
                                float _4953 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3785 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3786 = dot(vec3(_893, _896, _899), vec3(_3778 * _3772, _3778 * _3773, _3778 * _3774));
                                float _4964 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3789 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3793 = ((_3789 * _3789) * (_3771 + (-1.0))) + 1.0;
                                float _3794 = _3731 * _3770;
                                float _3795 = _3794 * _3794;
                                float _3801 = ((1.0 - _3795) * dot(vec3(_893, _896, _899), vec3(_3718, _3719, _3720))) + _3795;
                                float _4975 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3802 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3803 = 1.0 - _3770;
                                float _3813 = (0.5 / (((_3802 * ((_3785 * _3803) + _3770)) + 9.9999999392252902907785028219223e-09) + (((_3802 * _3803) + _3770) * _3785))) * _3802;
                                float _4986 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3823 = (_3748 * _3725) * (((_3771 * 3.1415927410125732421875) * (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) / ((_3793 * _3793) * ((_3738 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3749 * _3593.y;
                                frontier_phi_90_pred_1 = _3749 * _3593.x;
                                frontier_phi_90_pred_2 = _3823 * _3605.z;
                                frontier_phi_90_pred_3 = _3823 * _3605.y;
                                frontier_phi_90_pred_4 = _3823 * _3605.x;
                                frontier_phi_90_pred_5 = _3749 * _3593.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3831 = frontier_phi_90_pred;
                            _3830 = frontier_phi_90_pred_1;
                            _3829 = frontier_phi_90_pred_2;
                            _3828 = frontier_phi_90_pred_3;
                            _3827 = frontier_phi_90_pred_4;
                            _3832 = frontier_phi_90_pred_5;
                            _3535 = _3830 + _3548;
                            _3536 = _3831 + _3549;
                            _3537 = _3832 + _3550;
                            _3532 = _3827 + _3545;
                            _3533 = _3828 + _3546;
                            _3534 = _3829 + _3547;
                            if (_3552 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3552;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3536;
                        frontier_phi_84_pred_1 = _3535;
                        frontier_phi_84_pred_2 = _3534;
                        frontier_phi_84_pred_3 = _3533;
                        frontier_phi_84_pred_4 = _3532;
                        frontier_phi_84_pred_5 = _3537;
                    }
                    _3173 = frontier_phi_84_pred;
                    _3171 = frontier_phi_84_pred_1;
                    _3169 = frontier_phi_84_pred_2;
                    _3167 = frontier_phi_84_pred_3;
                    _3165 = frontier_phi_84_pred_4;
                    _3175 = frontier_phi_84_pred_5;
                    uint _3331 = _3330 + 1u;
                    if (_3331 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3324 = _3165;
                        _3325 = _3167;
                        _3326 = _3169;
                        _3327 = _3171;
                        _3328 = _3173;
                        _3329 = _3175;
                        _3330 = _3331;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3175;
                frontier_phi_65_66_ladder_1 = _3171;
                frontier_phi_65_66_ladder_2 = _3173;
                frontier_phi_65_66_ladder_3 = _3167;
                frontier_phi_65_66_ladder_4 = _3165;
                frontier_phi_65_66_ladder_5 = _3169;
            }
            else
            {
                frontier_phi_65_66_ladder = _3054;
                frontier_phi_65_66_ladder_1 = _3050;
                frontier_phi_65_66_ladder_2 = _3052;
                frontier_phi_65_66_ladder_3 = _3046;
                frontier_phi_65_66_ladder_4 = _3044;
                frontier_phi_65_66_ladder_5 = _3048;
            }
            _3164 = frontier_phi_65_66_ladder_4;
            _3166 = frontier_phi_65_66_ladder_3;
            _3168 = frontier_phi_65_66_ladder_5;
            _3170 = frontier_phi_65_66_ladder_1;
            _3172 = frontier_phi_65_66_ladder_2;
            _3174 = frontier_phi_65_66_ladder;
        }
        float _3179 = isnan(1.0) ? _937 : (isnan(_937) ? 1.0 : min(_937, 1.0));
        _2977 = (_3179 * _3170) + _2509;
        _2979 = (_3179 * _3172) + _2511;
        _2981 = (_3179 * _3174) + _2513;
        _2983 = ((_3164 * 0.039999999105930328369140625) * _3179) + _2832;
        _2985 = ((_3166 * 0.039999999105930328369140625) * _3179) + _2834;
        _2987 = ((_3168 * 0.039999999105930328369140625) * _3179) + _2836;
    }
    else
    {
        _2977 = _2509;
        _2979 = _2511;
        _2981 = _2513;
        _2983 = _2832;
        _2985 = _2834;
        _2987 = _2836;
    }
    float _5002 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _5013 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _5024 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _3004 = ((isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0))) * (_2977 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _937))) + ((_2983 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1775)) * cbPerFrame._m0[3u].x);
    float _3005 = ((isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0))) * (_2979 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _937))) + ((_2985 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1775)) * cbPerFrame._m0[3u].x);
    float _3006 = ((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_2981 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _937))) + ((_2987 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1775)) * cbPerFrame._m0[3u].x);
    uint _3007 = _912 + 6u;
    float _3015 = _874 / cbSceneParam._m0[86u].x;
    float _3016 = _875 / cbSceneParam._m0[86u].y;
    vec4 _3030 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3015, _3016, (log2((isnan(cbSceneParam._m0[77u].w) ? _797 : (isnan(_797) ? cbSceneParam._m0[77u].w : min(_797, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3032 = _3030.x;
    float _3033 = _3030.y;
    float _3034 = _3030.z;
    float _3035 = _3030.w;
    float _3106;
    float _3108;
    float _3110;
    float _3112;
    if (_797 > cbSceneParam._m0[78u].w)
    {
        float _3069 = isnan(_797) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _797 : min(cbSceneParam._m0[80u].w, _797));
        float _3070 = _3069 / _797;
        float _3081 = _3070 * _847;
        float _3082 = _848 * _3070;
        float _3083 = (-0.0) - _3082;
        float _3084 = _3070 * _849;
        float _3086 = (cbSceneParam._m0[77u].w * _3083) / _3069;
        float _3087 = _3086 + cbSceneParam._m0[79u].w;
        float _3088 = cbSceneParam._m0[79u].w - _3082;
        float _3094 = sqrt(((_3081 * _3081) + (_3082 * _3082)) + (_3084 * _3084));
        float _3097 = (1.0 - (cbSceneParam._m0[77u].w / _3069)) * _3094;
        float _3102 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3104 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3281;
        if (abs((_3083 - _3086) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3281 = ((((_3087 > 0.0) ? exp2(_3102 * _3087) : (2.0 - exp2(_3104 * _3087))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3097;
        }
        else
        {
            float _3225 = 1.0 / cbSceneParam._m0[80u].x;
            float _3226 = isnan(_3088) ? _3087 : (isnan(_3087) ? _3088 : max(_3087, _3088));
            float _3227 = isnan(_3088) ? _3087 : (isnan(_3087) ? _3088 : min(_3087, _3088));
            float _3236 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : min(_3226, 0.0));
            float _3237 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : min(_3227, 0.0));
            _3281 = ((abs(_3094 / _3083) * cbSceneParam._m0[80u].y) * ((((_3236 - _3237) * 2.0) - ((exp2(_3102 * (isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0)))) - exp2(_3102 * (isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))))) * _3225)) - ((exp2(_3104 * _3236) - exp2(_3104 * _3237)) * _3225))) + (_3097 * cbSceneParam._m0[80u].z);
        }
        vec4 _3283 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3015, _3016, 1.0), 0.0);
        float _3292 = exp2((_3281 * (-1.44269502162933349609375)) * (1.0 - _3283.w));
        float _3293 = log2(_3292);
        float _3309 = log2(_3035);
        _3106 = (exp2(_3309 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3293 * cbSceneParam._m0[78u].x)) * _3283.x) / cbSceneParam._m0[78u].x)) + _3032;
        _3108 = (exp2(_3309 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3293 * cbSceneParam._m0[78u].y)) * _3283.y) / cbSceneParam._m0[78u].y)) + _3033;
        _3110 = (exp2(_3309 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3293 * cbSceneParam._m0[78u].z)) * _3283.z) / cbSceneParam._m0[78u].z)) + _3034;
        _3112 = _3292 * _3035;
    }
    else
    {
        _3106 = _3032;
        _3108 = _3033;
        _3110 = _3034;
        _3112 = _3035;
    }
    bool _3319;
    vec4 _3122;
    vec4 _3144;
    float _3146;
    float _3150;
    float _3151;
    float _3152;
    float _3153;
    bool _3163;
    for (;;)
    {
        _3122 = cbMatDynParam._m0[0u];
        float _3124 = roundEven(_3122.y);
        bool _3125 = _3124 == 3.0;
        float _3126 = log2(_3112);
        float _3133 = exp2(_3126 * cbSceneParam._m0[78u].x) * _3004;
        float _3134 = exp2(_3126 * cbSceneParam._m0[78u].y) * _3005;
        float _3135 = exp2(_3126 * cbSceneParam._m0[78u].z) * _3006;
        float _3142 = _863 + (-0.5);
        _3144 = cbMtdParam._m0[1u];
        _3146 = _3144.y * _3142;
        float _3149 = (_3124 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3150 = _3149 * (_3125 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3106)));
        _3151 = _3149 * (_3125 ? _3134 : (_3134 + (cbSceneParam._m0[72u].w * _3108)));
        _3152 = _3149 * (_3125 ? _3135 : (_3135 + (cbSceneParam._m0[72u].w * _3110)));
        _3153 = _3142 * 0.999000012874603271484375;
        _3163 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3163)
        {
            if ((cbInstanceData._m0[_912 + 7u].x + _3153) < 0.5)
            {
                _3319 = true;
                break;
            }
        }
        uint _3260 = _913 + uint(_3122.w);
        if ((cbInstanceData._m0[_3260].w < 1.0) && ((cbInstanceData._m0[_3260].w + _3153) < 0.5))
        {
            _3319 = true;
            break;
        }
        if ((_3146 + 1.0) < _3144.x)
        {
            _3319 = true;
            break;
        }
        _3319 = false;
        break;
    }
    float _3523;
    if (_3319)
    {
        discard_state = true;
        _3523 = 0.0;
    }
    else
    {
        _3523 = cbInstanceData._m0[_3007].w;
    }
    SV_Target.x = _3150;
    SV_Target.y = _3151;
    SV_Target.z = _3152;
    SV_Target.w = _3523;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3007].w;
    discard_exit();
}


