#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1333;
float _3698;
float _3699;
float _3700;
float _3701;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    vec4 _267 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _270 = _267.x;
    float _271 = _267.y;
    float _272 = _267.z;
    float _287 = (POSITION_1.w - cbMtdParam._m0[16u].x) * (1.0 / cbMtdParam._m0[14u].y);
    float _3710 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _288 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    vec4 _300 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _302 = _300.x;
    float _303 = _300.y;
    float _304 = _300.z;
    float _311 = (((_270 * cbMtdParam._m0[13u].x) - _302) * _288) + _302;
    float _312 = (((_271 * cbMtdParam._m0[13u].y) - _303) * _288) + _303;
    float _313 = (((_272 * cbMtdParam._m0[13u].z) - _304) * _288) + _304;
    vec4 _335 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _337 = _335.x;
    float _338 = _335.y;
    float _339 = _335.z;
    vec4 _357 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _387 = cbMtdParam._m0[15u].w * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x;
    float _395 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * ((((1.0 - TEXCOORD_3.x) - _357.x) * 2.0) - _387)) + 1.0;
    float _3721 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _406 = (_396 * ((_337 - _311) + (((cbMtdParam._m0[11u].x * _270) - _337) * _288))) + _311;
    float _407 = (_396 * ((_338 - _312) + (((cbMtdParam._m0[11u].y * _271) - _338) * _288))) + _312;
    float _408 = (_396 * ((_339 - _313) + (((cbMtdParam._m0[11u].z * _272) - _339) * _288))) + _313;
    vec4 _430 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _434 = _430.z;
    float _446 = ((((((1.0 - TEXCOORD_3.y) - _357.y) * 2.0) - _387) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].x) + 1.0;
    float _3732 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _457 = (((_432 - _406) + (((cbMtdParam._m0[10u].x * _270) - _432) * _288)) * _447) + _406;
    float _458 = (((_433 - _407) + (((cbMtdParam._m0[10u].y * _271) - _433) * _288)) * _447) + _407;
    float _459 = (_447 * ((_434 - _408) + (((cbMtdParam._m0[10u].z * _272) - _434) * _288))) + _408;
    vec4 _479 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _481 = _479.x;
    float _482 = _479.y;
    float _483 = _479.z;
    float _495 = ((((((1.0 - TEXCOORD_3.z) - _357.z) * 2.0) - _387) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].y) + 1.0;
    float _3743 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _506 = (((_481 - _457) + (((cbMtdParam._m0[12u].x * _270) - _481) * _288)) * _496) + _457;
    float _507 = (((_482 - _458) + (((cbMtdParam._m0[12u].y * _271) - _482) * _288)) * _496) + _458;
    float _508 = (_496 * ((_483 - _459) + (((cbMtdParam._m0[12u].z * _272) - _483) * _288))) + _459;
    vec4 _523 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _525 = _523.x;
    float _526 = _523.y;
    float _527 = _523.z;
    vec4 _539 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _543 = _539.z;
    vec4 _565 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _567 = _565.x;
    float _568 = _565.y;
    float _569 = _565.z;
    vec4 _590 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _592 = _590.x;
    float _593 = _590.y;
    float _594 = _590.z;
    vec4 _615 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _617 = _615.x;
    float _618 = _615.y;
    float _619 = _615.z;
    float _626 = ((_541 - _617) * _288) + _617;
    float _627 = ((_542 - _618) * _288) + _618;
    float _628 = ((_543 - _619) * _288) + _619;
    float _635 = (((((_541 - _592) * _288) + _592) - _626) * _396) + _626;
    float _636 = (((((_542 - _593) * _288) + _593) - _627) * _396) + _627;
    float _637 = (((((_543 - _594) * _288) + _594) - _628) * _396) + _628;
    float _644 = (((((_541 - _567) * _288) + _567) - _635) * _447) + _635;
    float _645 = (((((_542 - _568) * _288) + _568) - _636) * _447) + _636;
    float _646 = (((((_543 - _569) * _288) + _569) - _637) * _447) + _637;
    float _658 = (((((((_541 - _525) * _288) + _525) - _644) * _496) + _644) * 2.0) + (-1.0);
    float _660 = (((((((_542 - _526) * _288) + _526) - _645) * _496) + _645) * 2.0) + (-1.0);
    float _661 = dot(vec2(_658, _660), vec2(_658, _660));
    float _3754 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _666 = sqrt(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))));
    float _669 = fma(_666, _239, fma(_660, _232, _658 * _218));
    float _672 = fma(_666, _240, fma(_660, _233, _658 * _219));
    float _675 = fma(_666, _241, fma(_660, _234, _658 * _220));
    float _684 = exp2(log2(inversesqrt(dot(vec3(_669, _672, _675), vec3(_669, _672, _675))) * _672) * cbMtdParam._m0[15u].z) * cbMtdParam._m0[14u].z;
    float _3765 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _686 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _688 = 3.0 - (_686 * 2.0);
    float _693 = _686 * _686;
    float _700 = ((_693 * (cbMtdParam._m0[9u].x - _506)) * _688) + _506;
    float _701 = ((_693 * (cbMtdParam._m0[9u].y - _507)) * _688) + _507;
    float _702 = ((_693 * (cbMtdParam._m0[9u].z - _508)) * _688) + _508;
    float _704 = ((((((_543 - _527) * _288) + _527) - _646) * _496) + _646) + cbMtdParam._m0[14u].w;
    float _717 = (((cbMtdParam._m0[16u].y * _658) - _658) * _288) + _658;
    float _718 = (((cbMtdParam._m0[16u].z * _660) - _660) * _288) + _660;
    float _719 = (((cbMtdParam._m0[16u].w * _666) - _666) * _288) + _666;
    vec4 _732 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Far_AN_Snow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _738 = (_732.x * 2.0) + (-1.0);
    float _739 = (_732.y * 2.0) + (-1.0);
    float _740 = dot(vec2(_738, _739), vec2(_738, _739));
    float _3787 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _755 = ((_693 * (_738 - _717)) * _688) + _717;
    float _756 = ((_693 * (_739 - _718)) * _688) + _718;
    float _757 = ((_693 * (sqrt(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) - _719)) * _688) + _719;
    float _760 = fma(_757, _239, fma(_756, _232, _755 * _218));
    float _763 = fma(_757, _240, fma(_756, _233, _755 * _219));
    float _766 = fma(_757, _241, fma(_756, _234, _755 * _220));
    float _770 = inversesqrt(dot(vec3(_760, _763, _766), vec3(_760, _763, _766)));
    float _771 = _770 * _760;
    float _772 = _770 * _763;
    float _773 = _770 * _766;
    float _3798 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _774 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _3820 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _3831 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _793 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _843 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _833);
    float _844 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _833);
    float _845 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _833);
    float _849 = inversesqrt(dot(vec3(_843, _844, _845), vec3(_843, _844, _845)));
    float _850 = _843 * _849;
    float _851 = _844 * _849;
    float _852 = _845 * _849;
    vec4 _857 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _859 = _857.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1012 = sqrt(((_843 * _843) + (_844 * _844)) + (_845 * _845));
        float _1018 = (cbMatDynParam._m0[5u].x * _1012) + cbMatDynParam._m0[5u].y;
        float _3842 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1023 = (cbMatDynParam._m0[5u].z * _1012) + cbMatDynParam._m0[5u].w;
        float _3853 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) - _1019)) + _1019) < ((_859 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _870 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _871 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _889 = fma(_773, cbSceneParam._m0[5u].z, fma(_772, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _771));
    float _892 = fma(_773, cbSceneParam._m0[6u].z, fma(_772, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _771));
    float _895 = fma(_773, cbSceneParam._m0[7u].z, fma(_772, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _771));
    uint _908 = uint(roundEven(NORMAL.w)) * 13u;
    uint _909 = _908 + 9u;
    uint _910 = _909 + uint(cbMatDynParam._m0[0u].w);
    float _916 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * cbInstanceData._m0[_910].x;
    float _917 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * cbInstanceData._m0[_910].y;
    float _918 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_910].z;
    float _3864 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    vec4 _930 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _870, cbSceneParam._m0[86u].y * _871));
    float _933 = _930.x * TEXCOORD_3.w;
    float _934 = dot(vec3(_771, _772, _773), vec3(_850, _851, _852));
    float _937 = _934 * 2.0;
    float _941 = (_937 * _771) - _850;
    float _942 = (_937 * _772) - _851;
    float _943 = (_937 * _773) - _852;
    float _947 = abs(dot(vec3(_850, _851, _852), vec3(_771, _772, _773)));
    float _3897 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _949 = sqrt(_774);
    float _961 = exp2((_949 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_949 * 3.0));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1332;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1057 = fma(_1001, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993));
        float _1061 = fma(_1001, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993));
        float _1065 = fma(_1001, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993));
        float _1090 = _993 + _771;
        float _1091 = _997 + _772;
        float _1092 = _1001 + _773;
        float _1102 = fma(_1092, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1090)) - _1057;
        float _1103 = fma(_1092, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1090)) - _1061;
        float _1104 = fma(_1092, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1090)) - _1065;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1057 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1061 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[34u].z) + ((((((_1065 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1160 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1126.x + (-0.5));
        float _1162 = _1160 * (_1126.y + (-0.5));
        float _1163 = _1160 * (_1126.z + (-0.5));
        float _1170 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1133.x + (-0.5));
        float _1172 = _1170 * (_1133.y + (-0.5));
        float _1173 = _1170 * (_1133.z + (-0.5));
        float _1180 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1140.x + (-0.5));
        float _1182 = _1180 * (_1140.y + (-0.5));
        float _1183 = _1180 * (_1140.z + (-0.5));
        float _1190 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1147.x + (-0.5));
        float _1192 = _1190 * (_1147.y + (-0.5));
        float _1193 = _1190 * (_1147.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1214 = (dot(vec3(_771, _772, _773), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1224 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3945 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1226 + 1.0))) + _1231) * _1194;
        float _1241 = _1162 * 0.5;
        float _1242 = _1172 * 0.5;
        float _1243 = _1182 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_771, _772, _773), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3978 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1268 + 1.0))) + _1273) * _1195;
        float _1283 = _1163 * 0.5;
        float _1284 = _1173 * 0.5;
        float _1285 = _1183 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_771, _772, _773), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4011 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1310 + 1.0))) + _1315) * _1196;
        _1332 = _1163;
        _1334 = _1162;
        _1335 = _1161;
        _1336 = _1173;
        _1337 = _1172;
        _1338 = _1171;
        _1339 = _1183;
        _1340 = _1182;
        _1341 = _1181;
        _1342 = _1196;
        _1343 = _1195;
        _1344 = _1194;
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
    }
    else
    {
        _1332 = _1333;
        _1334 = _1333;
        _1335 = _1333;
        _1336 = _1333;
        _1337 = _1333;
        _1338 = _1333;
        _1339 = _1333;
        _1340 = _1333;
        _1341 = _1333;
        _1342 = _1333;
        _1343 = _1333;
        _1344 = _1333;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1376 = fma(_1001, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993));
        float _1380 = fma(_1001, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993));
        float _1384 = fma(_1001, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993));
        float _1407 = _993 + _771;
        float _1408 = _997 + _772;
        float _1409 = _1001 + _773;
        float _1419 = fma(_1409, cbModelParam._m0[30u].z, fma(_1408, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1407)) - _1376;
        float _1420 = fma(_1409, cbModelParam._m0[31u].z, fma(_1408, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1407)) - _1380;
        float _1421 = fma(_1409, cbModelParam._m0[32u].z, fma(_1408, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1407)) - _1384;
        float _1425 = inversesqrt(dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421)));
        float _1438 = ((_1425 * _1419) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1376 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1425 * _1420) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1380 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1425 * _1421) / cbModelParam._m0[35u].z) + ((((((_1384 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        float _1475 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1442.x + (-0.5));
        float _1477 = _1475 * (_1442.y + (-0.5));
        float _1478 = _1475 * (_1442.z + (-0.5));
        float _1485 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1449.x + (-0.5));
        float _1487 = _1485 * (_1449.y + (-0.5));
        float _1488 = _1485 * (_1449.z + (-0.5));
        float _1495 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1456.x + (-0.5));
        float _1497 = _1495 * (_1456.y + (-0.5));
        float _1498 = _1495 * (_1456.z + (-0.5));
        float _1505 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1463.x + (-0.5));
        float _1507 = _1505 * (_1463.y + (-0.5));
        float _1508 = _1505 * (_1463.z + (-0.5));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = _1476 * 0.5;
        float _1513 = _1486 * 0.5;
        float _1514 = _1496 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_771, _772, _773), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4074 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1539 + 1.0))) + _1544) * _1509;
        float _1554 = _1477 * 0.5;
        float _1555 = _1487 * 0.5;
        float _1556 = _1497 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_771, _772, _773), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4107 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1581 + 1.0))) + _1586) * _1510;
        float _1596 = _1478 * 0.5;
        float _1597 = _1488 * 0.5;
        float _1598 = _1498 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_771, _772, _773), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4140 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1623 + 1.0))) + _1628) * _1511;
        _1645 = _1478;
        _1646 = _1477;
        _1647 = _1476;
        _1648 = _1488;
        _1649 = _1487;
        _1650 = _1486;
        _1651 = _1498;
        _1652 = _1497;
        _1653 = _1496;
        _1654 = _1511;
        _1655 = _1510;
        _1656 = _1509;
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
    }
    else
    {
        _1645 = _1333;
        _1646 = _1333;
        _1647 = _1333;
        _1648 = _1333;
        _1649 = _1333;
        _1650 = _1333;
        _1651 = _1333;
        _1652 = _1333;
        _1653 = _1333;
        _1654 = _1333;
        _1655 = _1333;
        _1656 = _1333;
        _1657 = 0.0;
        _1658 = 0.0;
        _1659 = 0.0;
    }
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1345)) + _1345;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1346)) + _1346;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1347)) + _1347;
    float _1692 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1669));
    float _1713 = _941 * 0.5;
    float _1714 = _942 * 0.5;
    float _1715 = _943 * 0.5;
    float _1716 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1719 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1722 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1756;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1729 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1332, _1336, _1339, _1342));
        float _1733 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1737 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1744 = dot(vec4(cbModelParam._m0[39u]), vec4(_1713, _1714, _1715, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1767;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1758 = dot(vec4(cbModelParam._m0[40u]), vec4(_1713, _1714, _1715, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1771 = (_1767 * cbModelParam._m0[1u].x) + (_1756 * (1.0 - cbModelParam._m0[1u].x));
    float _1781 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _774);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1781 : min(cbModelParam._m0[25u].z, _1781));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1829 = fma(_1001, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993)) + cbModelParam._m0[13u].w;
        float _1833 = fma(_1001, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993)) + cbModelParam._m0[14u].w;
        float _1837 = fma(_1001, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993)) + cbModelParam._m0[15u].w;
        float _1840 = fma(_943, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941));
        float _1843 = fma(_943, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941));
        float _1846 = fma(_943, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941));
        float _1874;
        if (_1840 > 0.0)
        {
            _1874 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1874 = frontier_phi_19_17_ladder;
        }
        float _2078;
        if (_1843 > 0.0)
        {
            _2078 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2078 = frontier_phi_28_24_ladder;
        }
        float _2321;
        if (_1846 > 0.0)
        {
            _2321 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2321 = frontier_phi_40_35_ladder;
        }
        float _2323 = isnan(_2078) ? _1874 : (isnan(_1874) ? _2078 : min(_1874, _2078));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1840) + _1829;
        float _2329 = (_2324 * _1843) + _1833;
        float _2330 = (_2324 * _1846) + _1837;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2333 = (-1.0) - _2331;
        float _2335 = _2331 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2330 > _2335) || ((_2330 < _2333) || ((_2329 > _2335) || ((_2329 < _2333) || ((_2328 < _2333) || (_2328 > _2335))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2454 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2330, cbModelParam._m0[9u].z, fma(_2329, cbModelParam._m0[9u].y, _2328 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2330, cbModelParam._m0[10u].z, fma(_2329, cbModelParam._m0[10u].y, _2328 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2330, cbModelParam._m0[11u].z, fma(_2329, cbModelParam._m0[11u].y, _2328 * cbModelParam._m0[11u].x))), _1782);
            frontier_phi_18_40_ladder = _2454.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2454.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2454.x * cbModelParam._m0[1u].y;
        }
        _1862 = frontier_phi_18_40_ladder_2;
        _1864 = frontier_phi_18_40_ladder_1;
        _1866 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_941, _942, _943), _1782);
        _1862 = _1850.x * cbModelParam._m0[1u].y;
        _1864 = _1850.y * cbModelParam._m0[1u].y;
        _1866 = _1850.z * cbModelParam._m0[1u].y;
    }
    float _1870 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _774);
    float _1871 = isnan(_1870) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1870 : min(cbModelParam._m0[25u].w, _1870));
    float _1964;
    float _1966;
    float _1968;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1928 = fma(_1001, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993)) + cbModelParam._m0[21u].w;
        float _1932 = fma(_1001, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993)) + cbModelParam._m0[22u].w;
        float _1936 = fma(_1001, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993)) + cbModelParam._m0[23u].w;
        float _1939 = fma(_943, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941));
        float _1942 = fma(_943, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941));
        float _1945 = fma(_943, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941));
        float _2083;
        if (_1939 > 0.0)
        {
            _2083 = abs((1.0 - _1928) / _1939);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1928 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2083 = frontier_phi_30_26_ladder;
        }
        float _2348;
        if (_1942 > 0.0)
        {
            _2348 = abs((1.0 - _1932) / _1942);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1932 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2348 = frontier_phi_42_37_ladder;
        }
        float _2553;
        if (_1945 > 0.0)
        {
            _2553 = abs((1.0 - _1936) / _1945);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1936 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2553 = frontier_phi_51_48_ladder;
        }
        float _2555 = isnan(_2348) ? _2083 : (isnan(_2083) ? _2348 : min(_2083, _2348));
        float _2556 = isnan(_2553) ? _2555 : (isnan(_2555) ? _2553 : min(_2555, _2553));
        float _2560 = (_2556 * _1939) + _1928;
        float _2561 = (_2556 * _1942) + _1932;
        float _2562 = (_2556 * _1945) + _1936;
        float _2563 = _2556 * 9.9999997473787516355514526367188e-05;
        float _2564 = (-1.0) - _2563;
        float _2566 = _2563 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2562 > _2566) || ((_2562 < _2564) || ((_2561 > _2566) || ((_2561 < _2564) || ((_2560 < _2564) || (_2560 > _2566))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2760 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2562, cbModelParam._m0[17u].z, fma(_2561, cbModelParam._m0[17u].y, _2560 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2562, cbModelParam._m0[18u].z, fma(_2561, cbModelParam._m0[18u].y, _2560 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2562, cbModelParam._m0[19u].z, fma(_2561, cbModelParam._m0[19u].y, _2560 * cbModelParam._m0[19u].x))), _1871);
            frontier_phi_27_51_ladder = _2760.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2760.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2760.x * cbModelParam._m0[1u].z;
        }
        _1964 = frontier_phi_27_51_ladder_2;
        _1966 = frontier_phi_27_51_ladder_1;
        _1968 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1948 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_941, _942, _943), _1871);
        _1964 = _1948.x * cbModelParam._m0[1u].z;
        _1966 = _1948.y * cbModelParam._m0[1u].z;
        _1968 = _1948.z * cbModelParam._m0[1u].z;
    }
    float _1980 = ((((1.0 - _961) * ((_949 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_961 * _949)) * _933;
    float _1981 = _1980 * ((cbModelParam._m0[1u].w * (_1964 - _1862)) + _1862);
    float _1982 = _1980 * ((cbModelParam._m0[1u].w * (_1966 - _1864)) + _1864);
    float _1983 = _1980 * ((cbModelParam._m0[1u].w * (_1968 - _1866)) + _1866);
    float _1986 = fma(_1983, cbSceneParam._m0[89u].z, fma(_1982, cbSceneParam._m0[89u].y, _1981 * cbSceneParam._m0[89u].x));
    float _1989 = fma(_1983, cbSceneParam._m0[90u].z, fma(_1982, cbSceneParam._m0[90u].y, _1981 * cbSceneParam._m0[90u].x));
    float _1992 = fma(_1983, cbSceneParam._m0[91u].z, fma(_1982, cbSceneParam._m0[91u].y, _1981 * cbSceneParam._m0[91u].x));
    uvec4 _2002 = floatBitsToUint(cbInstanceData._m0[_908 + 5u]);
    uint _2004 = _2002.x * 14u;
    uint _2005 = _2004 + 13u;
    float _2012 = _933 + (-1.0);
    float _2017 = (cbLight._m0[_2005].x * _2012) + 1.0;
    float _2018 = (cbLight._m0[_2005].y * _2012) + 1.0;
    float _2019 = (cbLight._m0[_2005].z * _2012) + 1.0;
    float _2020 = (cbLight._m0[_2005].w * _2012) + 1.0;
    uint _2021 = _2004 + 5u;
    float _2027 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
    uint _2031 = _2004 + 4u;
    float _2037 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
    uint _2041 = _2004 | 1u;
    float _2052 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_771, _772, _773));
    float _2055 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_771, _772, _773));
    float _4276 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _4287 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2060 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * 0.3183098733425140380859375;
    float _2062 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * 0.3183098733425140380859375;
    float _2069 = ((cbLight._m0[_2021].x * _2027) * _2062) + ((cbLight._m0[_2031].x * _2037) * _2060);
    float _2070 = ((_2027 * cbLight._m0[_2021].y) * _2062) + ((_2037 * cbLight._m0[_2031].y) * _2060);
    float _2071 = ((_2027 * cbLight._m0[_2021].z) * _2062) + ((_2037 * cbLight._m0[_2031].z) * _2060);
    uvec4 _2075 = floatBitsToUint(cbLight._m0[_2004 + 12u]);
    bool _2077 = _2075.x == 0u;
    float _2088;
    float _2090;
    float _2092;
    if (_2077)
    {
        _2088 = _2069;
        _2090 = _2070;
        _2092 = _2071;
    }
    else
    {
        uint _2096 = _2004 + 6u;
        float _2112 = (dot(vec3(cbLight._m0[_2004 + 2u].xyz), vec3(_771, _772, _773)) * 0.5) + 0.5;
        float _2113 = _2112 * _2112;
        float _4298 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2114 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2115 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2088 = (((cbLight._m0[_2096].x * 0.3183098733425140380859375) * _2114) * _2115) + _2069;
        _2090 = (((cbLight._m0[_2096].y * 0.3183098733425140380859375) * _2114) * _2115) + _2070;
        _2092 = (((cbLight._m0[_2096].z * 0.3183098733425140380859375) * _2114) * _2115) + _2071;
    }
    bool _2095 = _2075.y == 0u;
    float _2133;
    float _2135;
    float _2137;
    if (_2095)
    {
        _2133 = _2088;
        _2135 = _2090;
        _2137 = _2092;
    }
    else
    {
        uint _2292 = _2004 + 7u;
        float _2308 = (dot(vec3(cbLight._m0[_2004 + 3u].xyz), vec3(_771, _772, _773)) * 0.5) + 0.5;
        float _2309 = _2308 * _2308;
        float _4314 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2310 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2311 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2133 = (((cbLight._m0[_2292].x * 0.3183098733425140380859375) * _2310) * _2311) + _2088;
        _2135 = (((cbLight._m0[_2292].y * 0.3183098733425140380859375) * _2310) * _2311) + _2090;
        _2137 = (((cbLight._m0[_2292].z * 0.3183098733425140380859375) * _2310) * _2311) + _2092;
    }
    uint _2140 = _2004 + 8u;
    float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _774) * 0.949999988079071044921875);
    float _2154 = _2153 * _2153;
    float _2155 = cbLight._m0[_2004].x + _850;
    float _2156 = cbLight._m0[_2004].y + _851;
    float _2157 = cbLight._m0[_2004].z + _852;
    float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
    float _2162 = _2161 * _2155;
    float _2163 = _2161 * _2156;
    float _2164 = _2161 * _2157;
    float _2165 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2004].xyz));
    float _4330 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _4341 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _2169 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2170 = dot(vec3(_771, _772, _773), vec3(_2162, _2163, _2164));
    float _4352 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2174 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2162, _2163, _2164));
    float _4363 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2178 = _2154 * _2154;
    float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
    float _2193 = (exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2194 = 1.0 - _2154;
    float _2205 = (0.5 / (((_2169 * ((_2168 * _2194) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2194) + _2154) * _2168))) * _2168;
    float _4374 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2207 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
    uint _2218 = _2004 + 9u;
    float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _774) * 0.949999988079071044921875);
    float _2230 = _2229 * _2229;
    float _2231 = cbLight._m0[_2041].x + _850;
    float _2232 = cbLight._m0[_2041].y + _851;
    float _2233 = cbLight._m0[_2041].z + _852;
    float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
    float _2238 = _2237 * _2231;
    float _2239 = _2237 * _2232;
    float _2240 = _2237 * _2233;
    float _2241 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2041].xyz));
    float _4385 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _2245 = dot(vec3(_771, _772, _773), vec3(_2238, _2239, _2240));
    float _4396 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2249 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2238, _2239, _2240));
    float _4407 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2253 = _2230 * _2230;
    float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
    float _2266 = (exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2267 = 1.0 - _2230;
    float _2277 = (0.5 / (((_2169 * ((_2244 * _2267) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2267) + _2230) * _2244))) * _2244;
    float _4418 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2279 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
    float _2289 = (((_2266 * cbLight._m0[_2218].x) * _2279) * _2027) + (((_2193 * cbLight._m0[_2140].x) * _2207) * _2037);
    float _2290 = (((_2266 * cbLight._m0[_2218].y) * _2279) * _2027) + (((_2193 * cbLight._m0[_2140].y) * _2207) * _2037);
    float _2291 = (((_2266 * cbLight._m0[_2218].z) * _2279) * _2027) + (((_2193 * cbLight._m0[_2140].z) * _2207) * _2037);
    float _2353;
    float _2355;
    float _2357;
    if (_2077)
    {
        _2353 = _2289;
        _2355 = _2290;
        _2357 = _2291;
    }
    else
    {
        uint _2359 = _2004 + 2u;
        uint _2363 = _2004 + 10u;
        float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _774) * 0.949999988079071044921875);
        float _2378 = _2377 * _2377;
        float _2379 = cbLight._m0[_2359].x + _850;
        float _2380 = cbLight._m0[_2359].y + _851;
        float _2381 = cbLight._m0[_2359].z + _852;
        float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
        float _2386 = _2385 * _2379;
        float _2387 = _2385 * _2380;
        float _2388 = _2385 * _2381;
        float _2389 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2359].xyz));
        float _4429 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2393 = dot(vec3(_771, _772, _773), vec3(_2386, _2387, _2388));
        float _4440 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2397 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2386, _2387, _2388));
        float _4451 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2401 = _2378 * _2378;
        float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
        float _2414 = (exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2415 = 1.0 - _2378;
        float _2425 = (0.5 / (((_2169 * ((_2392 * _2415) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2415) + _2378) * _2392))) * _2392;
        float _4462 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2427 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
        float _2428 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2353 = (((_2414 * cbLight._m0[_2363].x) * _2427) * _2428) + _2289;
        _2355 = (((_2414 * cbLight._m0[_2363].y) * _2427) * _2428) + _2290;
        _2357 = (((_2414 * cbLight._m0[_2363].z) * _2427) * _2428) + _2291;
    }
    float _2463;
    float _2465;
    float _2467;
    if (_2095)
    {
        _2463 = _2353;
        _2465 = _2355;
        _2467 = _2357;
    }
    else
    {
        uint _2474 = _2004 + 3u;
        uint _2478 = _2004 + 11u;
        float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _774) * 0.949999988079071044921875);
        float _2493 = _2492 * _2492;
        float _2494 = cbLight._m0[_2474].x + _850;
        float _2495 = cbLight._m0[_2474].y + _851;
        float _2496 = cbLight._m0[_2474].z + _852;
        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
        float _2501 = _2500 * _2494;
        float _2502 = _2500 * _2495;
        float _2503 = _2500 * _2496;
        float _2504 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2474].xyz));
        float _4478 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2508 = dot(vec3(_771, _772, _773), vec3(_2501, _2502, _2503));
        float _4489 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2512 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2501, _2502, _2503));
        float _4500 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2516 = _2493 * _2493;
        float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
        float _2529 = (exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2530 = 1.0 - _2493;
        float _2540 = (0.5 / (((_2169 * ((_2507 * _2530) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2530) + _2493) * _2507))) * _2507;
        float _4511 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2542 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
        float _2543 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2463 = (((_2529 * cbLight._m0[_2478].x) * _2542) * _2543) + _2353;
        _2465 = (((_2529 * cbLight._m0[_2478].y) * _2542) * _2543) + _2355;
        _2467 = (((_2529 * cbLight._m0[_2478].z) * _2542) * _2543) + _2357;
    }
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    if (_2002.y == 0u)
    {
        float _2618 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2618;
        float _2620 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2618;
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2618;
        uvec4 _2633 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2634 = _2633.x;
        uint _2645 = uint((float(_2633.y) * floor(float(uint(cbSceneParam._m0[85u].y * _871) / _2634))) + floor(float(uint(cbSceneParam._m0[85u].x * _870) / _2634)));
        float _2655 = (log2(_2621 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2656 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        uint _2659 = uint(isnan(14.0) ? _2656 : (isnan(_2656) ? 14.0 : min(_2656, 14.0)));
        uvec4 _2664 = texelFetch(g_lightClusterGridBuffer, int(((_2659 << 2u) + (_2645 << 6u)) >> 2u));
        uint _2665 = _2664.x;
        uint _2666 = _2633.z;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        if (((((1u << ((_2666 >> 4u) & 15u)) + 4294967295u) & _2665) == 0u) || ((_2666 & 240u) == 0u))
        {
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
        }
        else
        {
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            uint _2923 = 0u;
            uint _2932;
            bool _2933;
            for (;;)
            {
                _2932 = texelFetch(g_lightClassification, int((((_2659 << 5u) + (_2645 << 9u)) + (_2923 << 2u)) >> 2u)).x;
                _2933 = _2932 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2933)
                {
                    frontier_phi_68_pred = _2919;
                    frontier_phi_68_pred_1 = _2922;
                    frontier_phi_68_pred_2 = _2921;
                    frontier_phi_68_pred_3 = _2920;
                    frontier_phi_68_pred_4 = _2918;
                    frontier_phi_68_pred_5 = _2917;
                }
                else
                {
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    uint _3068;
                    _3062 = _2917;
                    _3063 = _2918;
                    _3064 = _2919;
                    _3065 = _2920;
                    _3066 = _2921;
                    _3067 = _2922;
                    _3068 = _2932;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    for (;;)
                    {
                        uint _3072 = uint(findLSB(_3068)) + (_2923 << 5u);
                        uint _3069 = (_3068 + 4294967295u) & _3068;
                        uint _3074 = _3072 * 48u;
                        vec4 _3088 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 3u)).x));
                        uint _3094 = (_3072 * 48u) + 4u;
                        vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 3u)).x));
                        uint _3113 = (_3072 * 48u) + 8u;
                        vec3 _3124 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x));
                        float _3128 = _3088.x - _2619;
                        float _3129 = _3088.y - _2620;
                        float _3130 = _3088.z - _2621;
                        float _3131 = dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130));
                        float _3134 = inversesqrt(_3131);
                        float _3135 = _3134 * _3128;
                        float _3136 = _3134 * _3129;
                        float _3137 = _3134 * _3130;
                        float _3138 = dot(vec3(_889, _892, _895), vec3(_3135, _3136, _3137));
                        float _3143 = 1.0 - (_3131 * _3088.w);
                        float _4537 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3144 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                        float _3145 = sqrt(_3131) * _3107.w;
                        float _3148 = 1.39999997615814208984375 / (_3145 + 1.39999997615814208984375);
                        float _3149 = _3148 * _3148;
                        float _3152 = ((1.0 - _3149) * _3138) + _3149;
                        float _3155 = _3145 * _3145;
                        float _3159 = ((isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0))) * _3144) / ((_3155 * 0.699999988079071044921875) + 1.0);
                        float _3163 = (-0.0) - _2619;
                        float _3164 = (-0.0) - _2620;
                        float _3165 = (-0.0) - _2621;
                        float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                        float _3170 = _3169 * _3163;
                        float _3171 = _3169 * _3164;
                        float _3172 = _3169 * _3165;
                        float _3180 = exp2(log2(1.0 / ((_3155 * 3.5) + 5.0)) * 0.25);
                        float _3181 = 1.0 - _949;
                        float _3188 = sqrt(1.0 - ((1.0 - (_3181 * _3181)) * (1.0 - (_3180 * _3180))));
                        float _3189 = _3188 * _3188;
                        float _3190 = _3189 * _3189;
                        float _3191 = _3170 + _3135;
                        float _3192 = _3171 + _3136;
                        float _3193 = _3172 + _3137;
                        float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                        float _3201 = dot(vec3(_889, _892, _895), vec3(_3170, _3171, _3172));
                        float _4553 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                        float _3205 = dot(vec3(_889, _892, _895), vec3(_3197 * _3191, _3197 * _3192, _3197 * _3193));
                        float _4564 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3208 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3212 = ((_3208 * _3208) * (_3190 + (-1.0))) + 1.0;
                        float _3213 = _3148 * _3189;
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3138) + _3214;
                        float _4575 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3218 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3219 = 1.0 - _3189;
                        float _3229 = (0.5 / (((_3218 * ((_3204 * _3219) + _3189)) + 9.9999999392252902907785028219223e-09) + (((_3218 * _3219) + _3189) * _3204))) * _3218;
                        float _4586 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3240 = (((_3190 * 3.1415927410125732421875) * (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) / ((_3212 * _3212) * ((_3155 * 2.1991131305694580078125) + 3.141590118408203125))) * _3144;
                        _2992 = (_3159 * _3107.x) + _3065;
                        _2993 = (_3159 * _3107.y) + _3066;
                        _2994 = (_3159 * _3107.z) + _3067;
                        _2989 = (_3240 * _3124.x) + _3062;
                        _2990 = (_3240 * _3124.y) + _3063;
                        _2991 = (_3240 * _3124.z) + _3064;
                        if (_3069 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3062 = _2989;
                            _3063 = _2990;
                            _3064 = _2991;
                            _3065 = _2992;
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _3069;
                        }
                    }
                    frontier_phi_68_pred = _2991;
                    frontier_phi_68_pred_1 = _2994;
                    frontier_phi_68_pred_2 = _2993;
                    frontier_phi_68_pred_3 = _2992;
                    frontier_phi_68_pred_4 = _2990;
                    frontier_phi_68_pred_5 = _2989;
                }
                _2770 = frontier_phi_68_pred;
                _2776 = frontier_phi_68_pred_1;
                _2774 = frontier_phi_68_pred_2;
                _2772 = frontier_phi_68_pred_3;
                _2768 = frontier_phi_68_pred_4;
                _2766 = frontier_phi_68_pred_5;
                uint _2924 = _2923 + 1u;
                if (_2924 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2917 = _2766;
                    _2918 = _2768;
                    _2919 = _2770;
                    _2920 = _2772;
                    _2921 = _2774;
                    _2922 = _2776;
                    _2923 = _2924;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
        }
        uvec4 _2779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2780 = _2779.z;
        uint _2782 = (_2780 >> 8u) & 15u;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        if (((4294967295u << _2782) & _2665) == 0u)
        {
            _2885 = _2765;
            _2887 = _2767;
            _2889 = _2769;
            _2891 = _2771;
            _2893 = _2773;
            _2895 = _2775;
        }
        else
        {
            float _2910 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
            float _2911 = _2910 * _2619;
            float _2912 = _2910 * _2620;
            float _2913 = _2910 * _2621;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2782 < ((_2780 >> 12u) & 15u))
            {
                float _2886;
                float _2888;
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _3045 = _2765;
                float _3046 = _2767;
                float _3047 = _2769;
                float _3048 = _2771;
                float _3049 = _2773;
                float _3050 = _2775;
                uint _3051 = _2782;
                uint _3060;
                bool _3061;
                for (;;)
                {
                    _3060 = texelFetch(g_lightClassification, int((((_2659 << 5u) + (_2645 << 9u)) + (_3051 << 2u)) >> 2u)).x;
                    _3061 = _3060 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3061)
                    {
                        frontier_phi_79_pred = _3050;
                        frontier_phi_79_pred_1 = _3049;
                        frontier_phi_79_pred_2 = _3048;
                        frontier_phi_79_pred_3 = _3047;
                        frontier_phi_79_pred_4 = _3046;
                        frontier_phi_79_pred_5 = _3045;
                    }
                    else
                    {
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3267 = _3045;
                        float _3268 = _3046;
                        float _3269 = _3047;
                        float _3270 = _3048;
                        float _3271 = _3049;
                        float _3272 = _3050;
                        uint _3273 = _3060;
                        uint _3274;
                        vec4 _3299;
                        float _3300;
                        vec4 _3315;
                        vec3 _3327;
                        vec4 _3342;
                        vec4 _3358;
                        float _3405;
                        bool _3406;
                        for (;;)
                        {
                            uint _3284 = ((_3051 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3273));
                            _3274 = (_3273 + 4294967295u) & _3273;
                            uint _3286 = _3284 * 40u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            _3300 = _3299.w;
                            uint _3302 = (_3284 * 40u) + 4u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3317 = (_3284 * 40u) + 8u;
                            _3327 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x));
                            uint _3329 = (_3284 * 40u) + 16u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3345 = (_3284 * 40u) + 20u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3361 = (_3284 * 40u) + 24u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3380 = (_3284 * 40u) + 28u;
                            vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3405 = fma(_2621, _3393.z, fma(_2620, _3393.y, _3393.x * _2619)) + _3393.w;
                            _3406 = !((fma(_2621, _3374.z, fma(_2620, _3374.y, _3374.x * _2619)) + _3374.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3406)
                            {
                                float _3433 = _3299.x - _2619;
                                float _3434 = _3299.y - _2620;
                                float _3435 = _3299.z - _2621;
                                float _3436 = dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435));
                                float _3439 = inversesqrt(_3436);
                                float _3440 = _3439 * _3433;
                                float _3441 = _3439 * _3434;
                                float _3442 = _3439 * _3435;
                                float _3446 = 1.0 - (_3436 / (_3300 * _3300));
                                float _4597 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3451 = sqrt(_3436) * _3315.w;
                                float _3453 = 1.39999997615814208984375 / (_3451 + 1.39999997615814208984375);
                                float _3454 = _3453 * _3453;
                                float _3457 = ((1.0 - _3454) * dot(vec3(_3440, _3441, _3442), vec3(_889, _892, _895))) + _3454;
                                float _3460 = _3451 * _3451;
                                float _3464 = (fma(_2621, _3342.z, fma(_2620, _3342.y, _3342.x * _2619)) + _3342.w) / _3405;
                                float _3465 = (fma(_2621, _3358.z, fma(_2620, _3358.y, _3358.x * _2619)) + _3358.w) / _3405;
                                float _3469 = 1.0 - dot(vec2(_3464, _3465), vec2(_3464, _3465));
                                float _4613 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3471 = _3470 * (((isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0))) * _3447) / ((_3460 * 0.699999988079071044921875) + 1.0));
                                float _3483 = exp2(log2(1.0 / ((_3460 * 3.5) + 5.0)) * 0.25);
                                float _3484 = 1.0 - _949;
                                float _3491 = sqrt(1.0 - ((1.0 - (_3484 * _3484)) * (1.0 - (_3483 * _3483))));
                                float _3492 = _3491 * _3491;
                                float _3493 = _3492 * _3492;
                                float _3494 = _3440 - _2911;
                                float _3495 = _3441 - _2912;
                                float _3496 = _3442 - _2913;
                                float _3500 = inversesqrt(dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496)));
                                float _3504 = dot(vec3(_889, _892, _895), vec3((-0.0) - _2911, (-0.0) - _2912, (-0.0) - _2913));
                                float _4624 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3507 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3508 = dot(vec3(_889, _892, _895), vec3(_3500 * _3494, _3500 * _3495, _3500 * _3496));
                                float _4635 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3511 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3515 = ((_3511 * _3511) * (_3493 + (-1.0))) + 1.0;
                                float _3516 = _3453 * _3492;
                                float _3517 = _3516 * _3516;
                                float _3523 = ((1.0 - _3517) * dot(vec3(_889, _892, _895), vec3(_3440, _3441, _3442))) + _3517;
                                float _4646 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3524 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3525 = 1.0 - _3492;
                                float _3535 = (0.5 / (((_3524 * ((_3507 * _3525) + _3492)) + 9.9999999392252902907785028219223e-09) + (((_3524 * _3525) + _3492) * _3507))) * _3524;
                                float _4657 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3545 = (_3470 * _3447) * (((_3493 * 3.1415927410125732421875) * (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) / ((_3515 * _3515) * ((_3460 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3471 * _3315.z;
                                frontier_phi_85_pred_1 = _3471 * _3315.y;
                                frontier_phi_85_pred_2 = _3471 * _3315.x;
                                frontier_phi_85_pred_3 = _3545 * _3327.z;
                                frontier_phi_85_pred_4 = _3545 * _3327.y;
                                frontier_phi_85_pred_5 = _3545 * _3327.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3554 = frontier_phi_85_pred;
                            _3553 = frontier_phi_85_pred_1;
                            _3552 = frontier_phi_85_pred_2;
                            _3551 = frontier_phi_85_pred_3;
                            _3550 = frontier_phi_85_pred_4;
                            _3549 = frontier_phi_85_pred_5;
                            _3257 = _3552 + _3270;
                            _3258 = _3553 + _3271;
                            _3259 = _3554 + _3272;
                            _3254 = _3549 + _3267;
                            _3255 = _3550 + _3268;
                            _3256 = _3551 + _3269;
                            if (_3274 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3274;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3259;
                        frontier_phi_79_pred_1 = _3258;
                        frontier_phi_79_pred_2 = _3257;
                        frontier_phi_79_pred_3 = _3256;
                        frontier_phi_79_pred_4 = _3255;
                        frontier_phi_79_pred_5 = _3254;
                    }
                    _2896 = frontier_phi_79_pred;
                    _2894 = frontier_phi_79_pred_1;
                    _2892 = frontier_phi_79_pred_2;
                    _2890 = frontier_phi_79_pred_3;
                    _2888 = frontier_phi_79_pred_4;
                    _2886 = frontier_phi_79_pred_5;
                    uint _3052 = _3051 + 1u;
                    if (_3052 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3045 = _2886;
                        _3046 = _2888;
                        _3047 = _2890;
                        _3048 = _2892;
                        _3049 = _2894;
                        _3050 = _2896;
                        _3051 = _3052;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2892;
                frontier_phi_60_61_ladder_1 = _2896;
                frontier_phi_60_61_ladder_2 = _2894;
                frontier_phi_60_61_ladder_3 = _2890;
                frontier_phi_60_61_ladder_4 = _2888;
                frontier_phi_60_61_ladder_5 = _2886;
            }
            else
            {
                frontier_phi_60_61_ladder = _2771;
                frontier_phi_60_61_ladder_1 = _2775;
                frontier_phi_60_61_ladder_2 = _2773;
                frontier_phi_60_61_ladder_3 = _2769;
                frontier_phi_60_61_ladder_4 = _2767;
                frontier_phi_60_61_ladder_5 = _2765;
            }
            _2885 = frontier_phi_60_61_ladder_5;
            _2887 = frontier_phi_60_61_ladder_4;
            _2889 = frontier_phi_60_61_ladder_3;
            _2891 = frontier_phi_60_61_ladder;
            _2893 = frontier_phi_60_61_ladder_2;
            _2895 = frontier_phi_60_61_ladder_1;
        }
        float _2900 = isnan(1.0) ? _933 : (isnan(_933) ? 1.0 : min(_933, 1.0));
        _2677 = (_2900 * _2891) + _2133;
        _2679 = (_2900 * _2893) + _2135;
        _2681 = (_2900 * _2895) + _2137;
        _2683 = ((_2885 * 0.039999999105930328369140625) * _2900) + _2463;
        _2685 = ((_2887 * 0.039999999105930328369140625) * _2900) + _2465;
        _2687 = ((_2889 * 0.039999999105930328369140625) * _2900) + _2467;
    }
    else
    {
        _2677 = _2133;
        _2679 = _2135;
        _2681 = _2137;
        _2683 = _2463;
        _2685 = _2465;
        _2687 = _2467;
    }
    float _4673 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4684 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4695 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _2704 = ((isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2677 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _933))) + ((_2683 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1771)) * cbPerFrame._m0[3u].x);
    float _2705 = ((isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2679 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _933))) + ((_2685 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1771)) * cbPerFrame._m0[3u].x);
    float _2706 = ((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2681 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _933))) + ((_2687 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1771)) * cbPerFrame._m0[3u].x);
    uint _2707 = _908 + 6u;
    float _2715 = _870 / cbSceneParam._m0[86u].x;
    float _2716 = _871 / cbSceneParam._m0[86u].y;
    vec4 _2730 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2715, _2716, (log2((isnan(cbSceneParam._m0[77u].w) ? _793 : (isnan(_793) ? cbSceneParam._m0[77u].w : min(_793, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2732 = _2730.x;
    float _2733 = _2730.y;
    float _2734 = _2730.z;
    float _2735 = _2730.w;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_793 > cbSceneParam._m0[78u].w)
    {
        float _2790 = isnan(_793) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _793 : min(cbSceneParam._m0[80u].w, _793));
        float _2791 = _2790 / _793;
        float _2802 = _2791 * _843;
        float _2803 = _844 * _2791;
        float _2804 = (-0.0) - _2803;
        float _2805 = _2791 * _845;
        float _2807 = (cbSceneParam._m0[77u].w * _2804) / _2790;
        float _2808 = _2807 + cbSceneParam._m0[79u].w;
        float _2809 = cbSceneParam._m0[79u].w - _2803;
        float _2815 = sqrt(((_2802 * _2802) + (_2803 * _2803)) + (_2805 * _2805));
        float _2818 = (1.0 - (cbSceneParam._m0[77u].w / _2790)) * _2815;
        float _2823 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2825 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3002;
        if (abs((_2804 - _2807) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3002 = ((((_2808 > 0.0) ? exp2(_2823 * _2808) : (2.0 - exp2(_2825 * _2808))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2818;
        }
        else
        {
            float _2946 = 1.0 / cbSceneParam._m0[80u].x;
            float _2947 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : max(_2808, _2809));
            float _2948 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : min(_2808, _2809));
            float _2957 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : min(_2947, 0.0));
            float _2958 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : min(_2948, 0.0));
            _3002 = ((abs(_2815 / _2804) * cbSceneParam._m0[80u].y) * ((((_2957 - _2958) * 2.0) - ((exp2(_2823 * (isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0)))) - exp2(_2823 * (isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))))) * _2946)) - ((exp2(_2825 * _2957) - exp2(_2825 * _2958)) * _2946))) + (_2818 * cbSceneParam._m0[80u].z);
        }
        vec4 _3004 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2715, _2716, 1.0), 0.0);
        float _3013 = exp2((_3002 * (-1.44269502162933349609375)) * (1.0 - _3004.w));
        float _3014 = log2(_3013);
        float _3030 = log2(_2735);
        _2827 = (exp2(_3030 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].x)) * _3004.x) / cbSceneParam._m0[78u].x)) + _2732;
        _2829 = (exp2(_3030 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].y)) * _3004.y) / cbSceneParam._m0[78u].y)) + _2733;
        _2831 = (exp2(_3030 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].z)) * _3004.z) / cbSceneParam._m0[78u].z)) + _2734;
        _2833 = _3013 * _2735;
    }
    else
    {
        _2827 = _2732;
        _2829 = _2733;
        _2831 = _2734;
        _2833 = _2735;
    }
    bool _3040;
    vec4 _2843;
    vec4 _2865;
    float _2867;
    float _2871;
    float _2872;
    float _2873;
    float _2874;
    bool _2884;
    for (;;)
    {
        _2843 = cbMatDynParam._m0[0u];
        float _2845 = roundEven(_2843.y);
        bool _2846 = _2845 == 3.0;
        float _2847 = log2(_2833);
        float _2854 = exp2(_2847 * cbSceneParam._m0[78u].x) * _2704;
        float _2855 = exp2(_2847 * cbSceneParam._m0[78u].y) * _2705;
        float _2856 = exp2(_2847 * cbSceneParam._m0[78u].z) * _2706;
        float _2863 = _859 + (-0.5);
        _2865 = cbMtdParam._m0[1u];
        _2867 = _2865.y * _2863;
        float _2870 = (_2845 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2871 = _2870 * (_2846 ? _2854 : (_2854 + (cbSceneParam._m0[72u].w * _2827)));
        _2872 = _2870 * (_2846 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2829)));
        _2873 = _2870 * (_2846 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2831)));
        _2874 = _2863 * 0.999000012874603271484375;
        _2884 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2884)
        {
            if ((cbInstanceData._m0[_908 + 7u].x + _2874) < 0.5)
            {
                _3040 = true;
                break;
            }
        }
        uint _2981 = _909 + uint(_2843.w);
        if ((cbInstanceData._m0[_2981].w < 1.0) && ((cbInstanceData._m0[_2981].w + _2874) < 0.5))
        {
            _3040 = true;
            break;
        }
        if ((_2867 + 1.0) < _2865.x)
        {
            _3040 = true;
            break;
        }
        _3040 = false;
        break;
    }
    float _3245;
    if (_3040)
    {
        discard_state = true;
        _3245 = 0.0;
    }
    else
    {
        _3245 = cbInstanceData._m0[_2707].w;
    }
    SV_Target.x = _2871;
    SV_Target.y = _2872;
    SV_Target.z = _2873;
    SV_Target.w = _3245;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2707].w;
    discard_exit();
}


