#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1078;
float _3471;
float _3472;
float _3473;
float _3474;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    uint _240 = uint(int(floor(cbMtdParam._m0[10u].z)));
    float _241 = fract(cbMtdParam._m0[10u].z);
    uint _242 = _240 + 1u;
    uint _243 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _246 = float(int(_240 - _243 * (_240 / _243)));
    float _250 = float(int(_242 - _243 * (_242 / _243)));
    float _254 = 1.0 / cbMtdParam._m0[10u].w;
    float _256 = 1.0 / cbMtdParam._m0[11u].x;
    float _257 = fract(TEXCOORD_1.x);
    float _258 = fract(TEXCOORD_1.y);
    float _260 = (_257 + (_246 - cbMtdParam._m0[10u].w * trunc(_246 / cbMtdParam._m0[10u].w))) * _254;
    float _262 = (_258 + floor(_246 / cbMtdParam._m0[10u].w)) * _256;
    float _264 = (_257 + (_250 - cbMtdParam._m0[10u].w * trunc(_250 / cbMtdParam._m0[10u].w))) * _254;
    float _266 = (_258 + floor(_250 / cbMtdParam._m0[10u].w)) * _256;
    vec4 _279 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _264) + cbTextureTilingScale._m0[0u].z, (_266 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _290 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _260) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _262) + cbTextureTilingScale._m0[0u].w));
    float _292 = _290.x;
    float _293 = _290.y;
    float _294 = _290.z;
    float _295 = _290.w;
    float _308 = (((_279.x - _292) * _241) + _292) * cbMtdParam._m0[9u].x;
    float _309 = (((_279.y - _293) * _241) + _293) * cbMtdParam._m0[9u].y;
    float _310 = (((_279.z - _294) * _241) + _294) * cbMtdParam._m0[9u].z;
    vec4 _320 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _322 = _320.x;
    float _345 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _322)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _322))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3483 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _350 = gl_FragCoord.x * 0.125;
    float _352 = gl_FragCoord.y * 0.125;
    vec4 _354 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_350, _352));
    float _362 = float((((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * (((_279.w - _295) * _241) + _295)) * (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) >= ((_354.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _384 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _262) + cbTextureTilingScale._m0[2u].w));
    float _386 = _384.x;
    float _390 = (_386 + cbMtdParam._m0[10u].x) + ((texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _266) + cbTextureTilingScale._m0[2u].w)).x - _386) * _241);
    vec4 _402 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _264) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _266) + cbTextureTilingScale._m0[1u].w));
    float _409 = (_402.x * 2.0) + (-1.0);
    float _411 = (_402.y * 2.0) + (-1.0);
    float _415 = 1.0 - dot(vec2(_409, _411), vec2(_409, _411));
    float _3494 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _417 = sqrt(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)));
    float _420 = fma(_417, _218, fma(_411, _211, _409 * _197));
    float _423 = fma(_417, _219, fma(_411, _212, _409 * _198));
    float _426 = fma(_417, _220, fma(_411, _213, _409 * _199));
    float _430 = inversesqrt(dot(vec3(_420, _423, _426), vec3(_420, _423, _426)));
    vec4 _438 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _260) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _262) + cbTextureTilingScale._m0[1u].w));
    float _444 = (_438.x * 2.0) + (-1.0);
    float _445 = (_438.y * 2.0) + (-1.0);
    float _449 = 1.0 - dot(vec2(_444, _445), vec2(_444, _445));
    float _3505 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _451 = sqrt(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)));
    float _454 = fma(_451, _218, fma(_445, _211, _444 * _197));
    float _457 = fma(_451, _219, fma(_445, _212, _444 * _198));
    float _460 = fma(_451, _220, fma(_445, _213, _444 * _199));
    float _464 = inversesqrt(dot(vec3(_454, _457, _460), vec3(_454, _457, _460)));
    float _465 = _464 * _454;
    float _466 = _464 * _457;
    float _467 = _464 * _460;
    float _476 = (((_430 * _426) - _467) * _241) + _467;
    float _479 = (((((_430 * _420) - _465) * _241) + _465) * 2.0) + (-1.0);
    float _480 = (((((_430 * _423) - _466) * _241) + _466) * 2.0) + (-1.0);
    float _481 = dot(vec2(_479, _480), vec2(_479, _480));
    float _3516 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))));
    float _489 = fma(_486, _218, fma(_480, _211, _479 * _197));
    float _492 = fma(_486, _219, fma(_480, _212, _479 * _198));
    float _495 = fma(_486, _220, fma(_480, _213, _479 * _199));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    float _500 = _499 * _489;
    float _501 = _499 * _492;
    float _502 = _499 * _495;
    float _3527 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _503 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _3538 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3549 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3560 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3571 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _507 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _521 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _572 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _562);
    float _573 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _562);
    float _574 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _562);
    float _578 = inversesqrt(dot(vec3(_572, _573, _574), vec3(_572, _573, _574)));
    float _579 = _572 * _578;
    float _580 = _573 * _578;
    float _581 = _574 * _578;
    vec4 _582 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_350, _352));
    float _584 = _582.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _759 = sqrt(((_572 * _572) + (_573 * _573)) + (_574 * _574));
        float _765 = (cbMatDynParam._m0[5u].x * _759) + cbMatDynParam._m0[5u].y;
        float _3582 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _770 = (cbMatDynParam._m0[5u].z * _759) + cbMatDynParam._m0[5u].w;
        float _3593 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) - _766)) + _766) < ((_584 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _595 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _596 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _616 = fma(_502, cbSceneParam._m0[5u].z, fma(_501, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _500));
    float _619 = fma(_502, cbSceneParam._m0[6u].z, fma(_501, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _500));
    float _622 = fma(_502, cbSceneParam._m0[7u].z, fma(_501, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _500));
    uint _635 = uint(roundEven(NORMAL.w)) * 13u;
    uint _637 = _635 + 9u;
    uint _638 = _637 + uint(cbMatDynParam._m0[0u].w);
    float _644 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * cbInstanceData._m0[_638].x;
    float _645 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) * cbInstanceData._m0[_638].y;
    float _646 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * cbInstanceData._m0[_638].z;
    float _3604 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _3615 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _650 = 1.0 - _507;
    float _651 = _647 * _650;
    float _652 = _648 * _650;
    float _653 = _649 * _650;
    float _658 = (_647 + (-0.039999999105930328369140625)) * _507;
    float _659 = (_648 + (-0.039999999105930328369140625)) * _507;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _507;
    float _661 = _658 + 0.039999999105930328369140625;
    float _663 = _659 + 0.039999999105930328369140625;
    float _664 = _660 + 0.039999999105930328369140625;
    vec4 _673 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _595, cbSceneParam._m0[86u].y * _596));
    float _676 = _673.x * TEXCOORD_1.w;
    float _677 = dot(vec3(_500, _501, _502), vec3(_579, _580, _581));
    float _680 = _677 * 2.0;
    float _684 = (_680 * _500) - _579;
    float _685 = (_680 * _501) - _580;
    float _686 = (_680 * _502) - _581;
    float _690 = abs(dot(vec3(_579, _580, _581), vec3(_500, _501, _502)));
    float _3637 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _692 = sqrt(_503);
    float _705 = exp2((_692 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_692 * 3.0));
    float _711 = (1.0 - _705) * ((_692 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _712 = _705 * _692;
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1077;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _802 = fma(_748, cbModelParam._m0[26u].z, fma(_744, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740));
        float _806 = fma(_748, cbModelParam._m0[27u].z, fma(_744, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740));
        float _810 = fma(_748, cbModelParam._m0[28u].z, fma(_744, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740));
        float _835 = _740 + _500;
        float _836 = _744 + _501;
        float _837 = _748 + _502;
        float _847 = fma(_837, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835)) - _802;
        float _848 = fma(_837, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835)) - _806;
        float _849 = fma(_837, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835)) - _810;
        float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
        float _866 = ((_853 * _847) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_802 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_853 * _848) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_806 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_853 * _849) / cbModelParam._m0[34u].z) + ((((((_810 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        float _905 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_871.x + (-0.5));
        float _907 = _905 * (_871.y + (-0.5));
        float _908 = _905 * (_871.z + (-0.5));
        float _915 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_878.x + (-0.5));
        float _917 = _915 * (_878.y + (-0.5));
        float _918 = _915 * (_878.z + (-0.5));
        float _925 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_885.x + (-0.5));
        float _927 = _925 * (_885.y + (-0.5));
        float _928 = _925 * (_885.z + (-0.5));
        float _935 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_892.x + (-0.5));
        float _937 = _935 * (_892.y + (-0.5));
        float _938 = _935 * (_892.z + (-0.5));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = _906 * 0.5;
        float _943 = _916 * 0.5;
        float _944 = _926 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _959 = (dot(vec3(_500, _501, _502), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _969 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3685 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_971 + 1.0))) + _976) * _939;
        float _986 = _907 * 0.5;
        float _987 = _917 * 0.5;
        float _988 = _927 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_500, _501, _502), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3718 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1013 + 1.0))) + _1018) * _940;
        float _1028 = _908 * 0.5;
        float _1029 = _918 * 0.5;
        float _1030 = _928 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_500, _501, _502), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3751 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1055 + 1.0))) + _1060) * _941;
        _1077 = _908;
        _1079 = _907;
        _1080 = _906;
        _1081 = _918;
        _1082 = _917;
        _1083 = _916;
        _1084 = _928;
        _1085 = _927;
        _1086 = _926;
        _1087 = _941;
        _1088 = _940;
        _1089 = _939;
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
    }
    else
    {
        _1077 = _1078;
        _1079 = _1078;
        _1080 = _1078;
        _1081 = _1078;
        _1082 = _1078;
        _1083 = _1078;
        _1084 = _1078;
        _1085 = _1078;
        _1086 = _1078;
        _1087 = _1078;
        _1088 = _1078;
        _1089 = _1078;
        _1090 = 0.0;
        _1091 = 0.0;
        _1092 = 0.0;
    }
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1121 = fma(_748, cbModelParam._m0[30u].z, fma(_744, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _740));
        float _1125 = fma(_748, cbModelParam._m0[31u].z, fma(_744, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _740));
        float _1129 = fma(_748, cbModelParam._m0[32u].z, fma(_744, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _740));
        float _1152 = _740 + _500;
        float _1153 = _744 + _501;
        float _1154 = _748 + _502;
        float _1164 = fma(_1154, cbModelParam._m0[30u].z, fma(_1153, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152)) - _1121;
        float _1165 = fma(_1154, cbModelParam._m0[31u].z, fma(_1153, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152)) - _1125;
        float _1166 = fma(_1154, cbModelParam._m0[32u].z, fma(_1153, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152)) - _1129;
        float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
        float _1183 = ((_1170 * _1164) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1121 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1170 * _1165) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1125 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1170 * _1166) / cbModelParam._m0[35u].z) + ((((((_1129 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1220 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1187.x + (-0.5));
        float _1222 = _1220 * (_1187.y + (-0.5));
        float _1223 = _1220 * (_1187.z + (-0.5));
        float _1230 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1194.x + (-0.5));
        float _1232 = _1230 * (_1194.y + (-0.5));
        float _1233 = _1230 * (_1194.z + (-0.5));
        float _1240 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1201.x + (-0.5));
        float _1242 = _1240 * (_1201.y + (-0.5));
        float _1243 = _1240 * (_1201.z + (-0.5));
        float _1250 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1208.x + (-0.5));
        float _1252 = _1250 * (_1208.y + (-0.5));
        float _1253 = _1250 * (_1208.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_500, _501, _502), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3814 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1284 + 1.0))) + _1289) * _1254;
        float _1299 = _1222 * 0.5;
        float _1300 = _1232 * 0.5;
        float _1301 = _1242 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_500, _501, _502), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3847 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1326 + 1.0))) + _1331) * _1255;
        float _1341 = _1223 * 0.5;
        float _1342 = _1233 * 0.5;
        float _1343 = _1243 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_500, _501, _502), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3880 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1368 + 1.0))) + _1373) * _1256;
        _1390 = _1223;
        _1391 = _1222;
        _1392 = _1221;
        _1393 = _1233;
        _1394 = _1232;
        _1395 = _1231;
        _1396 = _1243;
        _1397 = _1242;
        _1398 = _1241;
        _1399 = _1256;
        _1400 = _1255;
        _1401 = _1254;
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1078;
        _1391 = _1078;
        _1392 = _1078;
        _1393 = _1078;
        _1394 = _1078;
        _1395 = _1078;
        _1396 = _1078;
        _1397 = _1078;
        _1398 = _1078;
        _1399 = _1078;
        _1400 = _1078;
        _1401 = _1078;
        _1402 = 0.0;
        _1403 = 0.0;
        _1404 = 0.0;
    }
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1090)) + _1090;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1091)) + _1091;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1092)) + _1092;
    float _1437 = fma(_1416, cbSceneParam._m0[89u].z, fma(_1415, cbSceneParam._m0[89u].y, _1414 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1416, cbSceneParam._m0[90u].z, fma(_1415, cbSceneParam._m0[90u].y, _1414 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1416, cbSceneParam._m0[91u].z, fma(_1415, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1414));
    float _1458 = _684 * 0.5;
    float _1459 = _685 * 0.5;
    float _1460 = _686 * 0.5;
    float _1461 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1464 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1467 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1501;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1474 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1077, _1081, _1084, _1087));
        float _1478 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1079, _1082, _1085, _1088));
        float _1482 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1489 = dot(vec4(cbModelParam._m0[39u]), vec4(_1458, _1459, _1460, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1489) ? 0.0 : (isnan(0.0) ? _1489 : max(0.0, _1489))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1512;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1503 = dot(vec4(cbModelParam._m0[40u]), vec4(_1458, _1459, _1460, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1516 = (_1512 * cbModelParam._m0[1u].x) + (_1501 * (1.0 - cbModelParam._m0[1u].x));
    float _1526 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _503);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1526 : min(cbModelParam._m0[25u].z, _1526));
    float _1609;
    float _1611;
    float _1613;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1576 = fma(_748, cbModelParam._m0[13u].z, fma(_744, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _740)) + cbModelParam._m0[13u].w;
        float _1580 = fma(_748, cbModelParam._m0[14u].z, fma(_744, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _740)) + cbModelParam._m0[14u].w;
        float _1584 = fma(_748, cbModelParam._m0[15u].z, fma(_744, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _740)) + cbModelParam._m0[15u].w;
        float _1587 = fma(_686, cbModelParam._m0[13u].z, fma(_685, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _684));
        float _1590 = fma(_686, cbModelParam._m0[14u].z, fma(_685, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _684));
        float _1593 = fma(_686, cbModelParam._m0[15u].z, fma(_685, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _684));
        float _1621;
        if (_1587 > 0.0)
        {
            _1621 = abs((1.0 - _1576) / _1587);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1576 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1621 = frontier_phi_19_17_ladder;
        }
        float _1828;
        if (_1590 > 0.0)
        {
            _1828 = abs((1.0 - _1580) / _1590);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1580 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1828 = frontier_phi_28_24_ladder;
        }
        float _2082;
        if (_1593 > 0.0)
        {
            _2082 = abs((1.0 - _1584) / _1593);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1584 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2082 = frontier_phi_40_35_ladder;
        }
        float _2084 = isnan(_1828) ? _1621 : (isnan(_1621) ? _1828 : min(_1621, _1828));
        float _2085 = isnan(_2082) ? _2084 : (isnan(_2084) ? _2082 : min(_2084, _2082));
        float _2089 = (_2085 * _1587) + _1576;
        float _2090 = (_2085 * _1590) + _1580;
        float _2091 = (_2085 * _1593) + _1584;
        float _2092 = _2085 * 9.9999997473787516355514526367188e-05;
        float _2094 = (-1.0) - _2092;
        float _2096 = _2092 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2091 > _2096) || ((_2091 < _2094) || ((_2090 > _2096) || ((_2090 < _2094) || ((_2089 < _2094) || (_2089 > _2096))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2219 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2091, cbModelParam._m0[9u].z, fma(_2090, cbModelParam._m0[9u].y, _2089 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2091, cbModelParam._m0[10u].z, fma(_2090, cbModelParam._m0[10u].y, _2089 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2091, cbModelParam._m0[11u].z, fma(_2090, cbModelParam._m0[11u].y, _2089 * cbModelParam._m0[11u].x))), _1527);
            frontier_phi_18_40_ladder = _2219.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2219.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2219.x * cbModelParam._m0[1u].y;
        }
        _1609 = frontier_phi_18_40_ladder_2;
        _1611 = frontier_phi_18_40_ladder_1;
        _1613 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1597 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_684, _685, _686), _1527);
        _1609 = _1597.x * cbModelParam._m0[1u].y;
        _1611 = _1597.y * cbModelParam._m0[1u].y;
        _1613 = _1597.z * cbModelParam._m0[1u].y;
    }
    float _1617 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _503);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1617 : min(cbModelParam._m0[25u].w, _1617));
    float _1711;
    float _1713;
    float _1715;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1675 = fma(_748, cbModelParam._m0[21u].z, fma(_744, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _740)) + cbModelParam._m0[21u].w;
        float _1679 = fma(_748, cbModelParam._m0[22u].z, fma(_744, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _740)) + cbModelParam._m0[22u].w;
        float _1683 = fma(_748, cbModelParam._m0[23u].z, fma(_744, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _740)) + cbModelParam._m0[23u].w;
        float _1686 = fma(_686, cbModelParam._m0[21u].z, fma(_685, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _684));
        float _1689 = fma(_686, cbModelParam._m0[22u].z, fma(_685, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _684));
        float _1692 = fma(_686, cbModelParam._m0[23u].z, fma(_685, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _684));
        float _1833;
        if (_1686 > 0.0)
        {
            _1833 = abs((1.0 - _1675) / _1686);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1675 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1833 = frontier_phi_30_26_ladder;
        }
        float _2109;
        if (_1689 > 0.0)
        {
            _2109 = abs((1.0 - _1679) / _1689);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1679 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2109 = frontier_phi_42_37_ladder;
        }
        float _2322;
        if (_1692 > 0.0)
        {
            _2322 = abs((1.0 - _1683) / _1692);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1683 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2322 = frontier_phi_51_48_ladder;
        }
        float _2324 = isnan(_2109) ? _1833 : (isnan(_1833) ? _2109 : min(_1833, _2109));
        float _2325 = isnan(_2322) ? _2324 : (isnan(_2324) ? _2322 : min(_2324, _2322));
        float _2329 = (_2325 * _1686) + _1675;
        float _2330 = (_2325 * _1689) + _1679;
        float _2331 = (_2325 * _1692) + _1683;
        float _2332 = _2325 * 9.9999997473787516355514526367188e-05;
        float _2333 = (-1.0) - _2332;
        float _2335 = _2332 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2331 > _2335) || ((_2331 < _2333) || ((_2330 > _2335) || ((_2330 < _2333) || ((_2329 < _2333) || (_2329 > _2335))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2331, cbModelParam._m0[17u].z, fma(_2330, cbModelParam._m0[17u].y, _2329 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2331, cbModelParam._m0[18u].z, fma(_2330, cbModelParam._m0[18u].y, _2329 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2331, cbModelParam._m0[19u].z, fma(_2330, cbModelParam._m0[19u].y, _2329 * cbModelParam._m0[19u].x))), _1618);
            frontier_phi_27_51_ladder = _2532.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2532.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2532.x * cbModelParam._m0[1u].z;
        }
        _1711 = frontier_phi_27_51_ladder_2;
        _1713 = frontier_phi_27_51_ladder_1;
        _1715 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_684, _685, _686), _1618);
        _1711 = _1695.x * cbModelParam._m0[1u].z;
        _1713 = _1695.y * cbModelParam._m0[1u].z;
        _1715 = _1695.z * cbModelParam._m0[1u].z;
    }
    float _1728 = (((_711 * _661) + _712) * _676) * ((cbModelParam._m0[1u].w * (_1711 - _1609)) + _1609);
    float _1730 = (((_711 * _663) + _712) * _676) * ((cbModelParam._m0[1u].w * (_1713 - _1611)) + _1611);
    float _1732 = (((_711 * _664) + _712) * _676) * ((cbModelParam._m0[1u].w * (_1715 - _1613)) + _1613);
    float _1735 = fma(_1732, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1728 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1732, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1728 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1732, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, _1728 * cbSceneParam._m0[91u].x));
    uvec4 _1751 = floatBitsToUint(cbInstanceData._m0[_635 + 5u]);
    uint _1753 = _1751.x * 14u;
    uint _1754 = _1753 + 13u;
    float _1761 = _676 + (-1.0);
    float _1766 = (cbLight._m0[_1754].x * _1761) + 1.0;
    float _1767 = (cbLight._m0[_1754].y * _1761) + 1.0;
    float _1768 = (cbLight._m0[_1754].z * _1761) + 1.0;
    float _1769 = (cbLight._m0[_1754].w * _1761) + 1.0;
    uint _1770 = _1753 + 5u;
    float _1776 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
    uint _1780 = _1753 + 4u;
    float _1787 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    uint _1791 = _1753 | 1u;
    float _1802 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_500, _501, _502));
    float _1805 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_500, _501, _502));
    float _4016 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _4027 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1810 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 0.3183098733425140380859375;
    float _1812 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 0.3183098733425140380859375;
    float _1819 = ((cbLight._m0[_1770].x * _1776) * _1812) + ((cbLight._m0[_1780].x * _1787) * _1810);
    float _1820 = ((_1776 * cbLight._m0[_1770].y) * _1812) + ((_1787 * cbLight._m0[_1780].y) * _1810);
    float _1821 = ((_1776 * cbLight._m0[_1770].z) * _1812) + ((_1787 * cbLight._m0[_1780].z) * _1810);
    uvec4 _1825 = floatBitsToUint(cbLight._m0[_1753 + 12u]);
    bool _1827 = _1825.x == 0u;
    float _1838;
    float _1840;
    float _1842;
    if (_1827)
    {
        _1838 = _1819;
        _1840 = _1820;
        _1842 = _1821;
    }
    else
    {
        uint _1846 = _1753 + 6u;
        float _1862 = (dot(vec3(cbLight._m0[_1753 + 2u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _1863 = _1862 * _1862;
        float _4038 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1865 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _1838 = (((cbLight._m0[_1846].x * 0.3183098733425140380859375) * _1864) * _1865) + _1819;
        _1840 = (((cbLight._m0[_1846].y * 0.3183098733425140380859375) * _1864) * _1865) + _1820;
        _1842 = (((cbLight._m0[_1846].z * 0.3183098733425140380859375) * _1864) * _1865) + _1821;
    }
    bool _1845 = _1825.y == 0u;
    float _1883;
    float _1885;
    float _1887;
    if (_1845)
    {
        _1883 = _1838;
        _1885 = _1840;
        _1887 = _1842;
    }
    else
    {
        uint _2053 = _1753 + 7u;
        float _2069 = (dot(vec3(cbLight._m0[_1753 + 3u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _2070 = _2069 * _2069;
        float _4054 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2071 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2072 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _1883 = (((cbLight._m0[_2053].x * 0.3183098733425140380859375) * _2071) * _2072) + _1838;
        _1885 = (((cbLight._m0[_2053].y * 0.3183098733425140380859375) * _2071) * _2072) + _1840;
        _1887 = (((cbLight._m0[_2053].z * 0.3183098733425140380859375) * _2071) * _2072) + _1842;
    }
    uint _1890 = _1753 + 8u;
    float _1903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1753].w)) * _503) * 0.949999988079071044921875);
    float _1904 = _1903 * _1903;
    float _1905 = cbLight._m0[_1753].x + _579;
    float _1906 = cbLight._m0[_1753].y + _580;
    float _1907 = cbLight._m0[_1753].z + _581;
    float _1911 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
    float _1912 = _1911 * _1905;
    float _1913 = _1911 * _1906;
    float _1914 = _1911 * _1907;
    float _1915 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1753].xyz));
    float _4070 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _1919 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _1920 = dot(vec3(_500, _501, _502), vec3(_1912, _1913, _1914));
    float _4092 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _1924 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_1912, _1913, _1914));
    float _4103 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1928 = _1904 * _1904;
    float _1932 = ((_1923 * _1923) * (_1928 + (-1.0))) + 1.0;
    float _1940 = exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0);
    float _1941 = 0.959999978542327880859375 - _658;
    float _1943 = 0.959999978542327880859375 - _659;
    float _1944 = 0.959999978542327880859375 - _660;
    float _1951 = 1.0 - _1904;
    float _1962 = (0.5 / (((_1919 * ((_1918 * _1951) + _1904)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _1951) + _1904) * _1918))) * _1918;
    float _4114 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1964 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1928 / ((_1932 * _1932) * 3.141590118408203125));
    uint _1975 = _1753 + 9u;
    float _1986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _503) * 0.949999988079071044921875);
    float _1987 = _1986 * _1986;
    float _1988 = cbLight._m0[_1791].x + _579;
    float _1989 = cbLight._m0[_1791].y + _580;
    float _1990 = cbLight._m0[_1791].z + _581;
    float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
    float _1995 = _1994 * _1988;
    float _1996 = _1994 * _1989;
    float _1997 = _1994 * _1990;
    float _1998 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1791].xyz));
    float _4125 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2002 = dot(vec3(_500, _501, _502), vec3(_1995, _1996, _1997));
    float _4136 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2006 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1995, _1996, _1997));
    float _4147 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2010 = _1987 * _1987;
    float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
    float _2021 = exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0);
    float _2028 = 1.0 - _1987;
    float _2038 = (0.5 / (((_1919 * ((_2001 * _2028) + _1987)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2028) + _1987) * _2001))) * _2001;
    float _4158 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2040 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
    float _2050 = (((((_2021 * _1941) + _661) * cbLight._m0[_1975].x) * _2040) * _1776) + (((((_1940 * _1941) + _661) * cbLight._m0[_1890].x) * _1964) * _1787);
    float _2051 = (((((_2021 * _1943) + _663) * cbLight._m0[_1975].y) * _2040) * _1776) + (((((_1940 * _1943) + _663) * cbLight._m0[_1890].y) * _1964) * _1787);
    float _2052 = (((((_2021 * _1944) + _664) * cbLight._m0[_1975].z) * _2040) * _1776) + (((((_1940 * _1944) + _664) * cbLight._m0[_1890].z) * _1964) * _1787);
    float _2114;
    float _2116;
    float _2118;
    if (_1827)
    {
        _2114 = _2050;
        _2116 = _2051;
        _2118 = _2052;
    }
    else
    {
        uint _2120 = _1753 + 2u;
        uint _2124 = _1753 + 10u;
        float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _503) * 0.949999988079071044921875);
        float _2139 = _2138 * _2138;
        float _2140 = cbLight._m0[_2120].x + _579;
        float _2141 = cbLight._m0[_2120].y + _580;
        float _2142 = cbLight._m0[_2120].z + _581;
        float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
        float _2147 = _2146 * _2140;
        float _2148 = _2146 * _2141;
        float _2149 = _2146 * _2142;
        float _2150 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2120].xyz));
        float _4169 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2154 = dot(vec3(_500, _501, _502), vec3(_2147, _2148, _2149));
        float _4180 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2158 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2147, _2148, _2149));
        float _4191 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2162 = _2139 * _2139;
        float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
        float _2173 = exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0);
        float _2180 = 1.0 - _2139;
        float _2190 = (0.5 / (((_1919 * ((_2153 * _2180) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2180) + _2139) * _2153))) * _2153;
        float _4202 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2192 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
        float _2193 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _2114 = (((((_2173 * _1941) + _661) * cbLight._m0[_2124].x) * _2192) * _2193) + _2050;
        _2116 = (((((_2173 * _1943) + _663) * cbLight._m0[_2124].y) * _2192) * _2193) + _2051;
        _2118 = (((((_2173 * _1944) + _664) * cbLight._m0[_2124].z) * _2192) * _2193) + _2052;
    }
    float _2228;
    float _2230;
    float _2232;
    if (_1845)
    {
        _2228 = _2114;
        _2230 = _2116;
        _2232 = _2118;
    }
    else
    {
        uint _2239 = _1753 + 3u;
        uint _2243 = _1753 + 11u;
        float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _503) * 0.949999988079071044921875);
        float _2258 = _2257 * _2257;
        float _2259 = cbLight._m0[_2239].x + _579;
        float _2260 = cbLight._m0[_2239].y + _580;
        float _2261 = cbLight._m0[_2239].z + _581;
        float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
        float _2266 = _2265 * _2259;
        float _2267 = _2265 * _2260;
        float _2268 = _2265 * _2261;
        float _2269 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2239].xyz));
        float _4218 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2273 = dot(vec3(_500, _501, _502), vec3(_2266, _2267, _2268));
        float _4229 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2277 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2266, _2267, _2268));
        float _4240 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2281 = _2258 * _2258;
        float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
        float _2292 = exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0);
        float _2299 = 1.0 - _2258;
        float _2309 = (0.5 / (((_1919 * ((_2272 * _2299) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2299) + _2258) * _2272))) * _2272;
        float _4251 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2311 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
        float _2312 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _2228 = (((((_2292 * _1941) + _661) * cbLight._m0[_2243].x) * _2311) * _2312) + _2114;
        _2230 = (((((_2292 * _1943) + _663) * cbLight._m0[_2243].y) * _2311) * _2312) + _2116;
        _2232 = (((((_2292 * _1944) + _664) * cbLight._m0[_2243].z) * _2311) * _2312) + _2118;
    }
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    if (_1751.y == 0u)
    {
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2387;
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2387;
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2387;
        uvec4 _2402 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2403 = _2402.x;
        uint _2414 = uint((float(_2402.y) * floor(float(uint(cbSceneParam._m0[85u].y * _596) / _2403))) + floor(float(uint(cbSceneParam._m0[85u].x * _595) / _2403)));
        float _2424 = (log2(_2390 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2425 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        uint _2428 = uint(isnan(14.0) ? _2425 : (isnan(_2425) ? 14.0 : min(_2425, 14.0)));
        uvec4 _2433 = texelFetch(g_lightClusterGridBuffer, int(((_2428 << 2u) + (_2414 << 6u)) >> 2u));
        uint _2434 = _2433.x;
        uint _2435 = _2402.z;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        if (((((1u << ((_2435 >> 4u) & 15u)) + 4294967295u) & _2434) == 0u) || ((_2435 & 240u) == 0u))
        {
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
        }
        else
        {
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2548;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            uint _2695 = 0u;
            uint _2704;
            bool _2705;
            for (;;)
            {
                _2704 = texelFetch(g_lightClassification, int((((_2428 << 5u) + (_2414 << 9u)) + (_2695 << 2u)) >> 2u)).x;
                _2705 = _2704 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2705)
                {
                    frontier_phi_68_pred = _2691;
                    frontier_phi_68_pred_1 = _2694;
                    frontier_phi_68_pred_2 = _2693;
                    frontier_phi_68_pred_3 = _2692;
                    frontier_phi_68_pred_4 = _2690;
                    frontier_phi_68_pred_5 = _2689;
                }
                else
                {
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    uint _2840;
                    _2834 = _2689;
                    _2835 = _2690;
                    _2836 = _2691;
                    _2837 = _2692;
                    _2838 = _2693;
                    _2839 = _2694;
                    _2840 = _2704;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    for (;;)
                    {
                        uint _2844 = uint(findLSB(_2840)) + (_2695 << 5u);
                        uint _2841 = (_2840 + 4294967295u) & _2840;
                        uint _2846 = _2844 * 48u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2866 = (_2844 * 48u) + 4u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2885 = (_2844 * 48u) + 8u;
                        vec3 _2896 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x));
                        float _2900 = _2860.x - _2388;
                        float _2901 = _2860.y - _2389;
                        float _2902 = _2860.z - _2390;
                        float _2903 = dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902));
                        float _2906 = inversesqrt(_2903);
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2910 = dot(vec3(_616, _619, _622), vec3(_2907, _2908, _2909));
                        float _2915 = 1.0 - (_2903 * _2860.w);
                        float _4277 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _2917 = sqrt(_2903) * _2879.w;
                        float _2920 = 1.39999997615814208984375 / (_2917 + 1.39999997615814208984375);
                        float _2921 = _2920 * _2920;
                        float _2924 = ((1.0 - _2921) * _2910) + _2921;
                        float _2927 = _2917 * _2917;
                        float _2931 = ((isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0))) * _2916) / ((_2927 * 0.699999988079071044921875) + 1.0);
                        float _2935 = (-0.0) - _2388;
                        float _2936 = (-0.0) - _2389;
                        float _2937 = (-0.0) - _2390;
                        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
                        float _2942 = _2941 * _2935;
                        float _2943 = _2941 * _2936;
                        float _2944 = _2941 * _2937;
                        float _2952 = exp2(log2(1.0 / ((_2927 * 3.5) + 5.0)) * 0.25);
                        float _2953 = 1.0 - _692;
                        float _2960 = sqrt(1.0 - ((1.0 - (_2953 * _2953)) * (1.0 - (_2952 * _2952))));
                        float _2961 = _2960 * _2960;
                        float _2962 = _2961 * _2961;
                        float _2963 = _2942 + _2907;
                        float _2964 = _2943 + _2908;
                        float _2965 = _2944 + _2909;
                        float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
                        float _2973 = dot(vec3(_616, _619, _622), vec3(_2942, _2943, _2944));
                        float _4293 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2976 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _2977 = dot(vec3(_616, _619, _622), vec3(_2969 * _2963, _2969 * _2964, _2969 * _2965));
                        float _4304 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2980 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _2984 = ((_2980 * _2980) * (_2962 + (-1.0))) + 1.0;
                        float _2985 = _2920 * _2961;
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2910) + _2986;
                        float _4315 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2990 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _2991 = 1.0 - _2961;
                        float _3001 = (0.5 / (((_2990 * ((_2976 * _2991) + _2961)) + 9.9999999392252902907785028219223e-09) + (((_2990 * _2991) + _2961) * _2976))) * _2990;
                        float _4326 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3012 = (((_2962 * 3.1415927410125732421875) * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) / ((_2984 * _2984) * ((_2927 * 2.1991131305694580078125) + 3.141590118408203125))) * _2916;
                        _2764 = (_2931 * _2879.x) + _2837;
                        _2765 = (_2931 * _2879.y) + _2838;
                        _2766 = (_2931 * _2879.z) + _2839;
                        _2761 = (_3012 * _2896.x) + _2834;
                        _2762 = (_3012 * _2896.y) + _2835;
                        _2763 = (_3012 * _2896.z) + _2836;
                        if (_2841 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2834 = _2761;
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2764;
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2841;
                        }
                    }
                    frontier_phi_68_pred = _2763;
                    frontier_phi_68_pred_1 = _2766;
                    frontier_phi_68_pred_2 = _2765;
                    frontier_phi_68_pred_3 = _2764;
                    frontier_phi_68_pred_4 = _2762;
                    frontier_phi_68_pred_5 = _2761;
                }
                _2542 = frontier_phi_68_pred;
                _2548 = frontier_phi_68_pred_1;
                _2546 = frontier_phi_68_pred_2;
                _2544 = frontier_phi_68_pred_3;
                _2540 = frontier_phi_68_pred_4;
                _2538 = frontier_phi_68_pred_5;
                uint _2696 = _2695 + 1u;
                if (_2696 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2689 = _2538;
                    _2690 = _2540;
                    _2691 = _2542;
                    _2692 = _2544;
                    _2693 = _2546;
                    _2694 = _2548;
                    _2695 = _2696;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
        }
        uvec4 _2551 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2552 = _2551.z;
        uint _2554 = (_2552 >> 8u) & 15u;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((4294967295u << _2554) & _2434) == 0u)
        {
            _2657 = _2537;
            _2659 = _2539;
            _2661 = _2541;
            _2663 = _2543;
            _2665 = _2545;
            _2667 = _2547;
        }
        else
        {
            float _2682 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
            float _2683 = _2682 * _2388;
            float _2684 = _2682 * _2389;
            float _2685 = _2682 * _2390;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2554 < ((_2552 >> 12u) & 15u))
            {
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2817 = _2537;
                float _2818 = _2539;
                float _2819 = _2541;
                float _2820 = _2543;
                float _2821 = _2545;
                float _2822 = _2547;
                uint _2823 = _2554;
                uint _2832;
                bool _2833;
                for (;;)
                {
                    _2832 = texelFetch(g_lightClassification, int((((_2428 << 5u) + (_2414 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                    _2833 = _2832 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2833)
                    {
                        frontier_phi_79_pred = _2822;
                        frontier_phi_79_pred_1 = _2821;
                        frontier_phi_79_pred_2 = _2820;
                        frontier_phi_79_pred_3 = _2819;
                        frontier_phi_79_pred_4 = _2818;
                        frontier_phi_79_pred_5 = _2817;
                    }
                    else
                    {
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3039 = _2817;
                        float _3040 = _2818;
                        float _3041 = _2819;
                        float _3042 = _2820;
                        float _3043 = _2821;
                        float _3044 = _2822;
                        uint _3045 = _2832;
                        uint _3046;
                        vec4 _3071;
                        float _3072;
                        vec4 _3087;
                        vec3 _3099;
                        vec4 _3115;
                        vec4 _3131;
                        float _3178;
                        bool _3179;
                        for (;;)
                        {
                            uint _3056 = ((_2823 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3045));
                            _3046 = (_3045 + 4294967295u) & _3045;
                            uint _3058 = _3056 * 40u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            _3072 = _3071.w;
                            uint _3074 = (_3056 * 40u) + 4u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3089 = (_3056 * 40u) + 8u;
                            _3099 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x));
                            uint _3102 = (_3056 * 40u) + 16u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3118 = (_3056 * 40u) + 20u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3134 = (_3056 * 40u) + 24u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3153 = (_3056 * 40u) + 28u;
                            vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            _3178 = fma(_2390, _3166.z, fma(_2389, _3166.y, _3166.x * _2388)) + _3166.w;
                            _3179 = !((fma(_2390, _3147.z, fma(_2389, _3147.y, _3147.x * _2388)) + _3147.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3179)
                            {
                                float _3206 = _3071.x - _2388;
                                float _3207 = _3071.y - _2389;
                                float _3208 = _3071.z - _2390;
                                float _3209 = dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208));
                                float _3212 = inversesqrt(_3209);
                                float _3213 = _3212 * _3206;
                                float _3214 = _3212 * _3207;
                                float _3215 = _3212 * _3208;
                                float _3219 = 1.0 - (_3209 / (_3072 * _3072));
                                float _4337 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3220 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3224 = sqrt(_3209) * _3087.w;
                                float _3226 = 1.39999997615814208984375 / (_3224 + 1.39999997615814208984375);
                                float _3227 = _3226 * _3226;
                                float _3230 = ((1.0 - _3227) * dot(vec3(_3213, _3214, _3215), vec3(_616, _619, _622))) + _3227;
                                float _3233 = _3224 * _3224;
                                float _3237 = (fma(_2390, _3115.z, fma(_2389, _3115.y, _3115.x * _2388)) + _3115.w) / _3178;
                                float _3238 = (fma(_2390, _3131.z, fma(_2389, _3131.y, _3131.x * _2388)) + _3131.w) / _3178;
                                float _3242 = 1.0 - dot(vec2(_3237, _3238), vec2(_3237, _3238));
                                float _4353 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3244 = _3243 * (((isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))) * _3220) / ((_3233 * 0.699999988079071044921875) + 1.0));
                                float _3256 = exp2(log2(1.0 / ((_3233 * 3.5) + 5.0)) * 0.25);
                                float _3257 = 1.0 - _692;
                                float _3264 = sqrt(1.0 - ((1.0 - (_3257 * _3257)) * (1.0 - (_3256 * _3256))));
                                float _3265 = _3264 * _3264;
                                float _3266 = _3265 * _3265;
                                float _3267 = _3213 - _2683;
                                float _3268 = _3214 - _2684;
                                float _3269 = _3215 - _2685;
                                float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                                float _3277 = dot(vec3(_616, _619, _622), vec3((-0.0) - _2683, (-0.0) - _2684, (-0.0) - _2685));
                                float _4364 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3280 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3281 = dot(vec3(_616, _619, _622), vec3(_3273 * _3267, _3273 * _3268, _3273 * _3269));
                                float _4375 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3284 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3288 = ((_3284 * _3284) * (_3266 + (-1.0))) + 1.0;
                                float _3289 = _3226 * _3265;
                                float _3290 = _3289 * _3289;
                                float _3296 = ((1.0 - _3290) * dot(vec3(_616, _619, _622), vec3(_3213, _3214, _3215))) + _3290;
                                float _4386 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3298 = 1.0 - _3265;
                                float _3308 = (0.5 / (((_3297 * ((_3280 * _3298) + _3265)) + 9.9999999392252902907785028219223e-09) + (((_3297 * _3298) + _3265) * _3280))) * _3297;
                                float _4397 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3318 = (_3243 * _3220) * (((_3266 * 3.1415927410125732421875) * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) / ((_3288 * _3288) * ((_3233 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3244 * _3087.z;
                                frontier_phi_85_pred_1 = _3244 * _3087.y;
                                frontier_phi_85_pred_2 = _3244 * _3087.x;
                                frontier_phi_85_pred_3 = _3318 * _3099.z;
                                frontier_phi_85_pred_4 = _3318 * _3099.y;
                                frontier_phi_85_pred_5 = _3318 * _3099.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3327 = frontier_phi_85_pred;
                            _3326 = frontier_phi_85_pred_1;
                            _3325 = frontier_phi_85_pred_2;
                            _3324 = frontier_phi_85_pred_3;
                            _3323 = frontier_phi_85_pred_4;
                            _3322 = frontier_phi_85_pred_5;
                            _3029 = _3325 + _3042;
                            _3030 = _3326 + _3043;
                            _3031 = _3327 + _3044;
                            _3026 = _3322 + _3039;
                            _3027 = _3323 + _3040;
                            _3028 = _3324 + _3041;
                            if (_3046 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3046;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3031;
                        frontier_phi_79_pred_1 = _3030;
                        frontier_phi_79_pred_2 = _3029;
                        frontier_phi_79_pred_3 = _3028;
                        frontier_phi_79_pred_4 = _3027;
                        frontier_phi_79_pred_5 = _3026;
                    }
                    _2668 = frontier_phi_79_pred;
                    _2666 = frontier_phi_79_pred_1;
                    _2664 = frontier_phi_79_pred_2;
                    _2662 = frontier_phi_79_pred_3;
                    _2660 = frontier_phi_79_pred_4;
                    _2658 = frontier_phi_79_pred_5;
                    uint _2824 = _2823 + 1u;
                    if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2817 = _2658;
                        _2818 = _2660;
                        _2819 = _2662;
                        _2820 = _2664;
                        _2821 = _2666;
                        _2822 = _2668;
                        _2823 = _2824;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2664;
                frontier_phi_60_61_ladder_1 = _2668;
                frontier_phi_60_61_ladder_2 = _2666;
                frontier_phi_60_61_ladder_3 = _2662;
                frontier_phi_60_61_ladder_4 = _2660;
                frontier_phi_60_61_ladder_5 = _2658;
            }
            else
            {
                frontier_phi_60_61_ladder = _2543;
                frontier_phi_60_61_ladder_1 = _2547;
                frontier_phi_60_61_ladder_2 = _2545;
                frontier_phi_60_61_ladder_3 = _2541;
                frontier_phi_60_61_ladder_4 = _2539;
                frontier_phi_60_61_ladder_5 = _2537;
            }
            _2657 = frontier_phi_60_61_ladder_5;
            _2659 = frontier_phi_60_61_ladder_4;
            _2661 = frontier_phi_60_61_ladder_3;
            _2663 = frontier_phi_60_61_ladder;
            _2665 = frontier_phi_60_61_ladder_2;
            _2667 = frontier_phi_60_61_ladder_1;
        }
        float _2672 = isnan(1.0) ? _676 : (isnan(_676) ? 1.0 : min(_676, 1.0));
        _2446 = (_2672 * _2663) + _1883;
        _2448 = (_2672 * _2665) + _1885;
        _2450 = (_2672 * _2667) + _1887;
        _2452 = ((_2657 * _661) * _2672) + _2228;
        _2454 = ((_2659 * _663) * _2672) + _2230;
        _2456 = ((_2661 * _664) * _2672) + _2232;
    }
    else
    {
        _2446 = _1883;
        _2448 = _1885;
        _2450 = _1887;
        _2452 = _2228;
        _2454 = _2230;
        _2456 = _2232;
    }
    float _4413 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4424 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4435 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _2473 = ((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2446 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _676))) + ((_2452 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1516)) * cbPerFrame._m0[3u].x);
    float _2474 = ((isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2448 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _676))) + ((_2454 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1516)) * cbPerFrame._m0[3u].x);
    float _2475 = ((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2450 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _676))) + ((_2456 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1516)) * cbPerFrame._m0[3u].x);
    float _2476 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2477 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2478 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    uint _2479 = _635 + 6u;
    float _2487 = _595 / cbSceneParam._m0[86u].x;
    float _2488 = _596 / cbSceneParam._m0[86u].y;
    vec4 _2502 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2487, _2488, (log2((isnan(cbSceneParam._m0[77u].w) ? _521 : (isnan(_521) ? cbSceneParam._m0[77u].w : min(_521, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2504 = _2502.x;
    float _2505 = _2502.y;
    float _2506 = _2502.z;
    float _2507 = _2502.w;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    if (_521 > cbSceneParam._m0[78u].w)
    {
        float _2562 = isnan(_521) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _521 : min(cbSceneParam._m0[80u].w, _521));
        float _2563 = _2562 / _521;
        float _2574 = _2563 * _572;
        float _2575 = _573 * _2563;
        float _2576 = (-0.0) - _2575;
        float _2577 = _2563 * _574;
        float _2579 = (cbSceneParam._m0[77u].w * _2576) / _2562;
        float _2580 = _2579 + cbSceneParam._m0[79u].w;
        float _2581 = cbSceneParam._m0[79u].w - _2575;
        float _2587 = sqrt(((_2574 * _2574) + (_2575 * _2575)) + (_2577 * _2577));
        float _2590 = (1.0 - (cbSceneParam._m0[77u].w / _2562)) * _2587;
        float _2595 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2597 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2774;
        if (abs((_2576 - _2579) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2774 = ((((_2580 > 0.0) ? exp2(_2595 * _2580) : (2.0 - exp2(_2597 * _2580))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2590;
        }
        else
        {
            float _2718 = 1.0 / cbSceneParam._m0[80u].x;
            float _2719 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : max(_2580, _2581));
            float _2720 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : min(_2580, _2581));
            float _2729 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : min(_2719, 0.0));
            float _2730 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : min(_2720, 0.0));
            _2774 = ((abs(_2587 / _2576) * cbSceneParam._m0[80u].y) * ((((_2729 - _2730) * 2.0) - ((exp2(_2595 * (isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0)))) - exp2(_2595 * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))))) * _2718)) - ((exp2(_2597 * _2729) - exp2(_2597 * _2730)) * _2718))) + (_2590 * cbSceneParam._m0[80u].z);
        }
        vec4 _2776 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2487, _2488, 1.0), 0.0);
        float _2785 = exp2((_2774 * (-1.44269502162933349609375)) * (1.0 - _2776.w));
        float _2786 = log2(_2785);
        float _2802 = log2(_2507);
        _2599 = (exp2(_2802 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].x)) * _2776.x) / cbSceneParam._m0[78u].x)) + _2504;
        _2601 = (exp2(_2802 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].y)) * _2776.y) / cbSceneParam._m0[78u].y)) + _2505;
        _2603 = (exp2(_2802 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].z)) * _2776.z) / cbSceneParam._m0[78u].z)) + _2506;
        _2605 = _2785 * _2507;
    }
    else
    {
        _2599 = _2504;
        _2601 = _2505;
        _2603 = _2506;
        _2605 = _2507;
    }
    bool _2812;
    vec4 _2615;
    vec4 _2637;
    float _2639;
    float _2643;
    float _2644;
    float _2645;
    float _2646;
    bool _2656;
    for (;;)
    {
        _2615 = cbMatDynParam._m0[0u];
        float _2617 = roundEven(_2615.y);
        bool _2618 = _2617 == 3.0;
        float _2619 = log2(_2605);
        float _2626 = exp2(_2619 * cbSceneParam._m0[78u].x) * _2476;
        float _2627 = exp2(_2619 * cbSceneParam._m0[78u].y) * _2477;
        float _2628 = exp2(_2619 * cbSceneParam._m0[78u].z) * _2478;
        float _2635 = _584 + (-0.5);
        _2637 = cbMtdParam._m0[1u];
        _2639 = _2637.y * _2635;
        float _2642 = (_2617 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2643 = _2642 * (_2618 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2599)));
        _2644 = _2642 * (_2618 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2601)));
        _2645 = _2642 * (_2618 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2603)));
        _2646 = _2635 * 0.999000012874603271484375;
        _2656 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2656)
        {
            if ((cbInstanceData._m0[_635 + 7u].x + _2646) < 0.5)
            {
                _2812 = true;
                break;
            }
        }
        uint _2753 = _637 + uint(_2615.w);
        if ((cbInstanceData._m0[_2753].w < 1.0) && ((cbInstanceData._m0[_2753].w + _2646) < 0.5))
        {
            _2812 = true;
            break;
        }
        if ((_2639 + _362) < _2637.x)
        {
            _2812 = true;
            break;
        }
        _2812 = false;
        break;
    }
    float _3017;
    if (_2812)
    {
        discard_state = true;
        _3017 = 0.0;
    }
    else
    {
        _3017 = cbInstanceData._m0[_2479].w;
    }
    SV_Target.x = _2643;
    SV_Target.y = _2644;
    SV_Target.z = _2645;
    SV_Target.w = _3017;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2479].w;
    discard_exit();
}


