#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _978;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _189 = _188 * _180;
    float _190 = _188 * _181;
    float _191 = _188 * _182;
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _203 = _202 * TANGENT.x;
    float _204 = _202 * TANGENT.y;
    float _205 = _202 * TANGENT.z;
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    uint _231 = uint(int(floor(cbMtdParam._m0[10u].z)));
    float _232 = fract(cbMtdParam._m0[10u].z);
    uint _233 = _231 + 1u;
    uint _234 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _237 = float(int(_231 - _234 * (_231 / _234)));
    float _241 = float(int(_233 - _234 * (_233 / _234)));
    float _245 = 1.0 / cbMtdParam._m0[10u].w;
    float _247 = 1.0 / cbMtdParam._m0[11u].x;
    float _248 = fract(TEXCOORD_1.x);
    float _249 = fract(TEXCOORD_1.y);
    float _251 = (_248 + (_237 - cbMtdParam._m0[10u].w * trunc(_237 / cbMtdParam._m0[10u].w))) * _245;
    float _253 = (_249 + floor(_237 / cbMtdParam._m0[10u].w)) * _247;
    float _255 = (_248 + (_241 - cbMtdParam._m0[10u].w * trunc(_241 / cbMtdParam._m0[10u].w))) * _245;
    float _257 = (_249 + floor(_241 / cbMtdParam._m0[10u].w)) * _247;
    vec4 _270 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _255) + cbTextureTilingScale._m0[0u].z, (_257 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _280 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _251) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _253) + cbTextureTilingScale._m0[0u].w));
    float _282 = _280.x;
    float _283 = _280.y;
    float _284 = _280.z;
    float _294 = (((_270.x - _282) * _232) + _282) * cbMtdParam._m0[9u].x;
    float _295 = (((_270.y - _283) * _232) + _283) * cbMtdParam._m0[9u].y;
    float _296 = (((_270.z - _284) * _232) + _284) * cbMtdParam._m0[9u].z;
    vec4 _316 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _251) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _253) + cbTextureTilingScale._m0[2u].w));
    float _318 = _316.x;
    float _322 = (_318 + cbMtdParam._m0[10u].x) + ((texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _255) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _257) + cbTextureTilingScale._m0[2u].w)).x - _318) * _232);
    vec4 _334 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _255) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _257) + cbTextureTilingScale._m0[1u].w));
    float _341 = (_334.x * 2.0) + (-1.0);
    float _343 = (_334.y * 2.0) + (-1.0);
    float _347 = 1.0 - dot(vec2(_341, _343), vec2(_341, _343));
    float _3341 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _349 = sqrt(isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0)));
    float _352 = fma(_349, _210, fma(_343, _203, _341 * _189));
    float _355 = fma(_349, _211, fma(_343, _204, _341 * _190));
    float _358 = fma(_349, _212, fma(_343, _205, _341 * _191));
    float _362 = inversesqrt(dot(vec3(_352, _355, _358), vec3(_352, _355, _358)));
    vec4 _370 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _251) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _253) + cbTextureTilingScale._m0[1u].w));
    float _376 = (_370.x * 2.0) + (-1.0);
    float _377 = (_370.y * 2.0) + (-1.0);
    float _381 = 1.0 - dot(vec2(_376, _377), vec2(_376, _377));
    float _3352 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _383 = sqrt(isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0)));
    float _386 = fma(_383, _210, fma(_377, _203, _376 * _189));
    float _389 = fma(_383, _211, fma(_377, _204, _376 * _190));
    float _392 = fma(_383, _212, fma(_377, _205, _376 * _191));
    float _396 = inversesqrt(dot(vec3(_386, _389, _392), vec3(_386, _389, _392)));
    float _397 = _396 * _386;
    float _398 = _396 * _389;
    float _399 = _396 * _392;
    float _408 = (((_362 * _358) - _399) * _232) + _399;
    float _411 = (((((_362 * _352) - _397) * _232) + _397) * 2.0) + (-1.0);
    float _412 = (((((_362 * _355) - _398) * _232) + _398) * 2.0) + (-1.0);
    float _413 = dot(vec2(_411, _412), vec2(_411, _412));
    float _3363 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _418 = sqrt(1.0 - (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))));
    float _421 = fma(_418, _210, fma(_412, _203, _411 * _189));
    float _424 = fma(_418, _211, fma(_412, _204, _411 * _190));
    float _427 = fma(_418, _212, fma(_412, _205, _411 * _191));
    float _431 = inversesqrt(dot(vec3(_421, _424, _427), vec3(_421, _424, _427)));
    float _432 = _431 * _421;
    float _433 = _431 * _424;
    float _434 = _431 * _427;
    float _3374 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _435 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _3385 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _3396 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _3407 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3418 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _439 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _455 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _506 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _496);
    float _507 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _496);
    float _508 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _496);
    float _512 = inversesqrt(dot(vec3(_506, _507, _508), vec3(_506, _507, _508)));
    float _513 = _506 * _512;
    float _514 = _507 * _512;
    float _515 = _508 * _512;
    float _521 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _522 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _543 = fma(_434, cbSceneParam._m0[5u].z, fma(_433, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _432));
    float _546 = fma(_434, cbSceneParam._m0[6u].z, fma(_433, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _432));
    float _549 = fma(_434, cbSceneParam._m0[7u].z, fma(_433, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _432));
    uint _562 = uint(roundEven(NORMAL.w)) * 13u;
    uint _565 = (_562 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _571 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) * cbInstanceData._m0[_565].x;
    float _572 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_565].y;
    float _573 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_565].z;
    float _3429 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _575 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _577 = 1.0 - _439;
    float _578 = _574 * _577;
    float _579 = _575 * _577;
    float _580 = _576 * _577;
    float _585 = (_574 + (-0.039999999105930328369140625)) * _439;
    float _586 = (_575 + (-0.039999999105930328369140625)) * _439;
    float _587 = (_576 + (-0.039999999105930328369140625)) * _439;
    float _588 = _585 + 0.039999999105930328369140625;
    float _590 = _586 + 0.039999999105930328369140625;
    float _591 = _587 + 0.039999999105930328369140625;
    vec4 _600 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _521, cbSceneParam._m0[86u].y * _522));
    float _603 = _600.x * TEXCOORD_1.w;
    float _604 = dot(vec3(_432, _433, _434), vec3(_513, _514, _515));
    float _607 = _604 * 2.0;
    float _611 = (_607 * _432) - _513;
    float _612 = (_607 * _433) - _514;
    float _613 = (_607 * _434) - _515;
    float _617 = abs(dot(vec3(_513, _514, _515), vec3(_432, _433, _434)));
    float _3462 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _619 = sqrt(_435);
    float _632 = exp2((_619 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_619 * 3.0));
    float _638 = (1.0 - _632) * ((_619 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _639 = _632 * _619;
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _977;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _702 = fma(_675, cbModelParam._m0[26u].z, fma(_671, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _667));
        float _706 = fma(_675, cbModelParam._m0[27u].z, fma(_671, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _667));
        float _710 = fma(_675, cbModelParam._m0[28u].z, fma(_671, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _667));
        float _735 = _667 + _432;
        float _736 = _671 + _433;
        float _737 = _675 + _434;
        float _747 = fma(_737, cbModelParam._m0[26u].z, fma(_736, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _735)) - _702;
        float _748 = fma(_737, cbModelParam._m0[27u].z, fma(_736, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _735)) - _706;
        float _749 = fma(_737, cbModelParam._m0[28u].z, fma(_736, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _735)) - _710;
        float _753 = inversesqrt(dot(vec3(_747, _748, _749), vec3(_747, _748, _749)));
        float _766 = ((_753 * _747) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_702 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _767 = ((_753 * _748) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_706 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _768 = ((_753 * _749) / cbModelParam._m0[34u].z) + ((((((_710 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        float _805 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_771.x + (-0.5));
        float _807 = _805 * (_771.y + (-0.5));
        float _808 = _805 * (_771.z + (-0.5));
        float _815 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_778.x + (-0.5));
        float _817 = _815 * (_778.y + (-0.5));
        float _818 = _815 * (_778.z + (-0.5));
        float _825 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_785.x + (-0.5));
        float _827 = _825 * (_785.y + (-0.5));
        float _828 = _825 * (_785.z + (-0.5));
        float _835 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_792.x + (-0.5));
        float _837 = _835 * (_792.y + (-0.5));
        float _838 = _835 * (_792.z + (-0.5));
        float _839 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _842 = _806 * 0.5;
        float _843 = _816 * 0.5;
        float _844 = _826 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _859 = (dot(vec3(_432, _433, _434), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _869 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_839 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3510 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_871 + 1.0))) + _876) * _839;
        float _886 = _807 * 0.5;
        float _887 = _817 * 0.5;
        float _888 = _827 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _902 = (dot(vec3(_432, _433, _434), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _911 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3543 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_913 + 1.0))) + _918) * _840;
        float _928 = _808 * 0.5;
        float _929 = _818 * 0.5;
        float _930 = _828 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_432, _433, _434), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_841 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3576 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_955 + 1.0))) + _960) * _841;
        _977 = _808;
        _979 = _807;
        _980 = _806;
        _981 = _818;
        _982 = _817;
        _983 = _816;
        _984 = _828;
        _985 = _827;
        _986 = _826;
        _987 = _841;
        _988 = _840;
        _989 = _839;
        _990 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
        _992 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
    }
    else
    {
        _977 = _978;
        _979 = _978;
        _980 = _978;
        _981 = _978;
        _982 = _978;
        _983 = _978;
        _984 = _978;
        _985 = _978;
        _986 = _978;
        _987 = _978;
        _988 = _978;
        _989 = _978;
        _990 = 0.0;
        _991 = 0.0;
        _992 = 0.0;
    }
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1018 = fma(_675, cbModelParam._m0[30u].z, fma(_671, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _667));
        float _1022 = fma(_675, cbModelParam._m0[31u].z, fma(_671, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _667));
        float _1026 = fma(_675, cbModelParam._m0[32u].z, fma(_671, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _667));
        float _1049 = _667 + _432;
        float _1050 = _671 + _433;
        float _1051 = _675 + _434;
        float _1061 = fma(_1051, cbModelParam._m0[30u].z, fma(_1050, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049)) - _1018;
        float _1062 = fma(_1051, cbModelParam._m0[31u].z, fma(_1050, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049)) - _1022;
        float _1063 = fma(_1051, cbModelParam._m0[32u].z, fma(_1050, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049)) - _1026;
        float _1067 = inversesqrt(dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063)));
        float _1080 = ((_1067 * _1061) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1018 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1067 * _1062) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1022 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1067 * _1063) / cbModelParam._m0[35u].z) + ((((((_1026 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        float _1117 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1084.x + (-0.5));
        float _1119 = _1117 * (_1084.y + (-0.5));
        float _1120 = _1117 * (_1084.z + (-0.5));
        float _1127 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1091.x + (-0.5));
        float _1129 = _1127 * (_1091.y + (-0.5));
        float _1130 = _1127 * (_1091.z + (-0.5));
        float _1137 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1098.x + (-0.5));
        float _1139 = _1137 * (_1098.y + (-0.5));
        float _1140 = _1137 * (_1098.z + (-0.5));
        float _1147 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1105.x + (-0.5));
        float _1149 = _1147 * (_1105.y + (-0.5));
        float _1150 = _1147 * (_1105.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_432, _433, _434), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3639 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_1181 + 1.0))) + _1186) * _1151;
        float _1196 = _1119 * 0.5;
        float _1197 = _1129 * 0.5;
        float _1198 = _1139 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_432, _433, _434), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3672 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1223 + 1.0))) + _1228) * _1152;
        float _1238 = _1120 * 0.5;
        float _1239 = _1130 * 0.5;
        float _1240 = _1140 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_432, _433, _434), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3705 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1265 + 1.0))) + _1270) * _1153;
        _1287 = _1120;
        _1288 = _1119;
        _1289 = _1118;
        _1290 = _1130;
        _1291 = _1129;
        _1292 = _1128;
        _1293 = _1140;
        _1294 = _1139;
        _1295 = _1138;
        _1296 = _1153;
        _1297 = _1152;
        _1298 = _1151;
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
    }
    else
    {
        _1287 = _978;
        _1288 = _978;
        _1289 = _978;
        _1290 = _978;
        _1291 = _978;
        _1292 = _978;
        _1293 = _978;
        _1294 = _978;
        _1295 = _978;
        _1296 = _978;
        _1297 = _978;
        _1298 = _978;
        _1299 = 0.0;
        _1300 = 0.0;
        _1301 = 0.0;
    }
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _990)) + _990;
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _991)) + _991;
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _992)) + _992;
    float _1334 = fma(_1313, cbSceneParam._m0[89u].z, fma(_1312, cbSceneParam._m0[89u].y, _1311 * cbSceneParam._m0[89u].x));
    float _1337 = fma(_1313, cbSceneParam._m0[90u].z, fma(_1312, cbSceneParam._m0[90u].y, _1311 * cbSceneParam._m0[90u].x));
    float _1340 = fma(_1313, cbSceneParam._m0[91u].z, fma(_1312, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1311));
    float _1355 = _611 * 0.5;
    float _1356 = _612 * 0.5;
    float _1357 = _613 * 0.5;
    float _1358 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1361 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1364 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1398;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1371 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_977, _981, _984, _987));
        float _1375 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_979, _982, _985, _988));
        float _1379 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_980, _983, _986, _989));
        float _1386 = dot(vec4(cbModelParam._m0[39u]), vec4(_1355, _1356, _1357, 1.0));
        _1398 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1386) ? 0.0 : (isnan(0.0) ? _1386 : max(0.0, _1386))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1398 = 1.0;
    }
    float _1409;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1400 = dot(vec4(cbModelParam._m0[40u]), vec4(_1355, _1356, _1357, 1.0));
        _1409 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1400) ? 0.0 : (isnan(0.0) ? _1400 : max(0.0, _1400))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1409 = 1.0;
    }
    float _1413 = (_1409 * cbModelParam._m0[1u].x) + (_1398 * (1.0 - cbModelParam._m0[1u].x));
    float _1423 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _435);
    float _1424 = isnan(_1423) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1423 : min(cbModelParam._m0[25u].z, _1423));
    float _1506;
    float _1508;
    float _1510;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1473 = fma(_675, cbModelParam._m0[13u].z, fma(_671, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _667)) + cbModelParam._m0[13u].w;
        float _1477 = fma(_675, cbModelParam._m0[14u].z, fma(_671, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _667)) + cbModelParam._m0[14u].w;
        float _1481 = fma(_675, cbModelParam._m0[15u].z, fma(_671, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _667)) + cbModelParam._m0[15u].w;
        float _1484 = fma(_613, cbModelParam._m0[13u].z, fma(_612, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611));
        float _1487 = fma(_613, cbModelParam._m0[14u].z, fma(_612, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611));
        float _1490 = fma(_613, cbModelParam._m0[15u].z, fma(_612, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611));
        float _1518;
        if (_1484 > 0.0)
        {
            _1518 = abs((1.0 - _1473) / _1484);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1473 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1518 = frontier_phi_16_14_ladder;
        }
        float _1746;
        if (_1487 > 0.0)
        {
            _1746 = abs((1.0 - _1477) / _1487);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1477 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1746 = frontier_phi_25_21_ladder;
        }
        float _2003;
        if (_1490 > 0.0)
        {
            _2003 = abs((1.0 - _1481) / _1490);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1481 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2003 = frontier_phi_37_32_ladder;
        }
        float _2005 = isnan(_1746) ? _1518 : (isnan(_1518) ? _1746 : min(_1518, _1746));
        float _2006 = isnan(_2003) ? _2005 : (isnan(_2005) ? _2003 : min(_2005, _2003));
        float _2010 = (_2006 * _1484) + _1473;
        float _2011 = (_2006 * _1487) + _1477;
        float _2012 = (_2006 * _1490) + _1481;
        float _2013 = _2006 * 9.9999997473787516355514526367188e-05;
        float _2015 = (-1.0) - _2013;
        float _2017 = _2013 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2012 > _2017) || ((_2012 < _2015) || ((_2011 > _2017) || ((_2011 < _2015) || ((_2010 < _2015) || (_2010 > _2017))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2140 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2012, cbModelParam._m0[9u].z, fma(_2011, cbModelParam._m0[9u].y, _2010 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2012, cbModelParam._m0[10u].z, fma(_2011, cbModelParam._m0[10u].y, _2010 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2012, cbModelParam._m0[11u].z, fma(_2011, cbModelParam._m0[11u].y, _2010 * cbModelParam._m0[11u].x))), _1424);
            frontier_phi_15_37_ladder = _2140.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2140.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2140.x * cbModelParam._m0[1u].y;
        }
        _1506 = frontier_phi_15_37_ladder_2;
        _1508 = frontier_phi_15_37_ladder_1;
        _1510 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_611, _612, _613), _1424);
        _1506 = _1494.x * cbModelParam._m0[1u].y;
        _1508 = _1494.y * cbModelParam._m0[1u].y;
        _1510 = _1494.z * cbModelParam._m0[1u].y;
    }
    float _1514 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _435);
    float _1515 = isnan(_1514) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1514 : min(cbModelParam._m0[25u].w, _1514));
    float _1608;
    float _1610;
    float _1612;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1572 = fma(_675, cbModelParam._m0[21u].z, fma(_671, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _667)) + cbModelParam._m0[21u].w;
        float _1576 = fma(_675, cbModelParam._m0[22u].z, fma(_671, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _667)) + cbModelParam._m0[22u].w;
        float _1580 = fma(_675, cbModelParam._m0[23u].z, fma(_671, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _667)) + cbModelParam._m0[23u].w;
        float _1583 = fma(_613, cbModelParam._m0[21u].z, fma(_612, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611));
        float _1586 = fma(_613, cbModelParam._m0[22u].z, fma(_612, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611));
        float _1589 = fma(_613, cbModelParam._m0[23u].z, fma(_612, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611));
        float _1751;
        if (_1583 > 0.0)
        {
            _1751 = abs((1.0 - _1572) / _1583);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1572 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1751 = frontier_phi_27_23_ladder;
        }
        float _2030;
        if (_1586 > 0.0)
        {
            _2030 = abs((1.0 - _1576) / _1586);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1576 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2030 = frontier_phi_39_34_ladder;
        }
        float _2243;
        if (_1589 > 0.0)
        {
            _2243 = abs((1.0 - _1580) / _1589);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1580 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2243 = frontier_phi_48_45_ladder;
        }
        float _2245 = isnan(_2030) ? _1751 : (isnan(_1751) ? _2030 : min(_1751, _2030));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1583) + _1572;
        float _2251 = (_2246 * _1586) + _1576;
        float _2252 = (_2246 * _1589) + _1580;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2254 = (-1.0) - _2253;
        float _2256 = _2253 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2252 > _2256) || ((_2252 < _2254) || ((_2251 > _2256) || ((_2251 < _2254) || ((_2250 < _2254) || (_2250 > _2256))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2453 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2252, cbModelParam._m0[17u].z, fma(_2251, cbModelParam._m0[17u].y, _2250 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2252, cbModelParam._m0[18u].z, fma(_2251, cbModelParam._m0[18u].y, _2250 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2252, cbModelParam._m0[19u].z, fma(_2251, cbModelParam._m0[19u].y, _2250 * cbModelParam._m0[19u].x))), _1515);
            frontier_phi_24_48_ladder = _2453.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2453.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2453.x * cbModelParam._m0[1u].z;
        }
        _1608 = frontier_phi_24_48_ladder_2;
        _1610 = frontier_phi_24_48_ladder_1;
        _1612 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_611, _612, _613), _1515);
        _1608 = _1592.x * cbModelParam._m0[1u].z;
        _1610 = _1592.y * cbModelParam._m0[1u].z;
        _1612 = _1592.z * cbModelParam._m0[1u].z;
    }
    float _1625 = (((_638 * _588) + _639) * _603) * ((cbModelParam._m0[1u].w * (_1608 - _1506)) + _1506);
    float _1627 = (((_638 * _590) + _639) * _603) * ((cbModelParam._m0[1u].w * (_1610 - _1508)) + _1508);
    float _1629 = (((_638 * _591) + _639) * _603) * ((cbModelParam._m0[1u].w * (_1612 - _1510)) + _1510);
    float _1632 = fma(_1629, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1625 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1629, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1625 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1629, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, _1625 * cbSceneParam._m0[91u].x));
    vec4 _1646 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_521, _522));
    float _1648 = _1646.w;
    float _1660 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1648);
    float _1661 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1648);
    float _1662 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1648);
    uvec4 _1666 = floatBitsToUint(cbInstanceData._m0[_562 + 5u]);
    uint _1668 = _1666.x * 14u;
    uint _1669 = _1668 + 13u;
    float _1676 = _603 + (-1.0);
    float _1681 = (cbLight._m0[_1669].x * _1676) + 1.0;
    float _1682 = (cbLight._m0[_1669].y * _1676) + 1.0;
    float _1683 = (cbLight._m0[_1669].z * _1676) + 1.0;
    float _1684 = (cbLight._m0[_1669].w * _1676) + 1.0;
    uint _1685 = _1668 + 5u;
    float _1691 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
    uint _1695 = _1668 + 4u;
    float _1705 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
    uint _1709 = _1668 | 1u;
    float _1720 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_432, _433, _434));
    float _1723 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_432, _433, _434));
    float _3841 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _3852 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1728 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.3183098733425140380859375;
    float _1730 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.3183098733425140380859375;
    float _1737 = ((cbLight._m0[_1685].x * _1691) * _1730) + (((cbLight._m0[_1695].x * _1660) * _1705) * _1728);
    float _1738 = ((_1691 * cbLight._m0[_1685].y) * _1730) + (((cbLight._m0[_1695].y * _1661) * _1705) * _1728);
    float _1739 = ((_1691 * cbLight._m0[_1685].z) * _1730) + (((cbLight._m0[_1695].z * _1662) * _1705) * _1728);
    uvec4 _1743 = floatBitsToUint(cbLight._m0[_1668 + 12u]);
    bool _1745 = _1743.x == 0u;
    float _1756;
    float _1758;
    float _1760;
    if (_1745)
    {
        _1756 = _1737;
        _1758 = _1738;
        _1760 = _1739;
    }
    else
    {
        uint _1764 = _1668 + 6u;
        float _1780 = (dot(vec3(cbLight._m0[_1668 + 2u].xyz), vec3(_432, _433, _434)) * 0.5) + 0.5;
        float _1781 = _1780 * _1780;
        float _3863 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1783 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _1756 = (((cbLight._m0[_1764].x * 0.3183098733425140380859375) * _1782) * _1783) + _1737;
        _1758 = (((cbLight._m0[_1764].y * 0.3183098733425140380859375) * _1782) * _1783) + _1738;
        _1760 = (((cbLight._m0[_1764].z * 0.3183098733425140380859375) * _1782) * _1783) + _1739;
    }
    bool _1763 = _1743.y == 0u;
    float _1801;
    float _1803;
    float _1805;
    if (_1763)
    {
        _1801 = _1756;
        _1803 = _1758;
        _1805 = _1760;
    }
    else
    {
        uint _1974 = _1668 + 7u;
        float _1990 = (dot(vec3(cbLight._m0[_1668 + 3u].xyz), vec3(_432, _433, _434)) * 0.5) + 0.5;
        float _1991 = _1990 * _1990;
        float _3879 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1992 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1993 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _1801 = (((cbLight._m0[_1974].x * 0.3183098733425140380859375) * _1992) * _1993) + _1756;
        _1803 = (((cbLight._m0[_1974].y * 0.3183098733425140380859375) * _1992) * _1993) + _1758;
        _1805 = (((cbLight._m0[_1974].z * 0.3183098733425140380859375) * _1992) * _1993) + _1760;
    }
    uint _1808 = _1668 + 8u;
    float _1821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1668].w)) * _435) * 0.949999988079071044921875);
    float _1822 = _1821 * _1821;
    float _1823 = cbLight._m0[_1668].x + _513;
    float _1824 = cbLight._m0[_1668].y + _514;
    float _1825 = cbLight._m0[_1668].z + _515;
    float _1829 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
    float _1830 = _1829 * _1823;
    float _1831 = _1829 * _1824;
    float _1832 = _1829 * _1825;
    float _1833 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_1668].xyz));
    float _3895 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _1837 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _1838 = dot(vec3(_432, _433, _434), vec3(_1830, _1831, _1832));
    float _3917 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1841 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _1842 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_1830, _1831, _1832));
    float _3928 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1846 = _1822 * _1822;
    float _1850 = ((_1841 * _1841) * (_1846 + (-1.0))) + 1.0;
    float _1858 = exp2(log2(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * 5.0);
    float _1859 = 0.959999978542327880859375 - _585;
    float _1861 = 0.959999978542327880859375 - _586;
    float _1862 = 0.959999978542327880859375 - _587;
    float _1869 = 1.0 - _1822;
    float _1880 = (0.5 / (((_1837 * ((_1836 * _1869) + _1822)) + 9.9999999392252902907785028219223e-09) + (((_1837 * _1869) + _1822) * _1836))) * _1836;
    float _3939 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1882 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1846 / ((_1850 * _1850) * 3.141590118408203125));
    uint _1896 = _1668 + 9u;
    float _1907 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1709].w)) * _435) * 0.949999988079071044921875);
    float _1908 = _1907 * _1907;
    float _1909 = cbLight._m0[_1709].x + _513;
    float _1910 = cbLight._m0[_1709].y + _514;
    float _1911 = cbLight._m0[_1709].z + _515;
    float _1915 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
    float _1916 = _1915 * _1909;
    float _1917 = _1915 * _1910;
    float _1918 = _1915 * _1911;
    float _1919 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_1709].xyz));
    float _3950 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1923 = dot(vec3(_432, _433, _434), vec3(_1916, _1917, _1918));
    float _3961 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1927 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_1916, _1917, _1918));
    float _3972 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1931 = _1908 * _1908;
    float _1935 = ((_1926 * _1926) * (_1931 + (-1.0))) + 1.0;
    float _1942 = exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0);
    float _1949 = 1.0 - _1908;
    float _1959 = (0.5 / (((_1837 * ((_1922 * _1949) + _1908)) + 9.9999999392252902907785028219223e-09) + (((_1837 * _1949) + _1908) * _1922))) * _1922;
    float _3983 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1961 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1931 / ((_1935 * _1935) * 3.141590118408203125));
    float _1971 = (((((_1942 * _1859) + _588) * cbLight._m0[_1896].x) * _1961) * _1691) + ((((cbLight._m0[_1808].x * _1660) * ((_1858 * _1859) + _588)) * _1882) * _1705);
    float _1972 = (((((_1942 * _1861) + _590) * cbLight._m0[_1896].y) * _1961) * _1691) + ((((cbLight._m0[_1808].y * _1661) * ((_1858 * _1861) + _590)) * _1882) * _1705);
    float _1973 = (((((_1942 * _1862) + _591) * cbLight._m0[_1896].z) * _1961) * _1691) + ((((cbLight._m0[_1808].z * _1662) * ((_1858 * _1862) + _591)) * _1882) * _1705);
    float _2035;
    float _2037;
    float _2039;
    if (_1745)
    {
        _2035 = _1971;
        _2037 = _1972;
        _2039 = _1973;
    }
    else
    {
        uint _2041 = _1668 + 2u;
        uint _2045 = _1668 + 10u;
        float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _435) * 0.949999988079071044921875);
        float _2060 = _2059 * _2059;
        float _2061 = cbLight._m0[_2041].x + _513;
        float _2062 = cbLight._m0[_2041].y + _514;
        float _2063 = cbLight._m0[_2041].z + _515;
        float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
        float _2068 = _2067 * _2061;
        float _2069 = _2067 * _2062;
        float _2070 = _2067 * _2063;
        float _2071 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_2041].xyz));
        float _3994 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2074 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2075 = dot(vec3(_432, _433, _434), vec3(_2068, _2069, _2070));
        float _4005 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2078 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _2079 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2068, _2069, _2070));
        float _4016 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2083 = _2060 * _2060;
        float _2087 = ((_2078 * _2078) * (_2083 + (-1.0))) + 1.0;
        float _2094 = exp2(log2(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * 5.0);
        float _2101 = 1.0 - _2060;
        float _2111 = (0.5 / (((_1837 * ((_2074 * _2101) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_1837 * _2101) + _2060) * _2074))) * _2074;
        float _4027 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2113 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_2083 / ((_2087 * _2087) * 3.141590118408203125));
        float _2114 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _2035 = (((((_2094 * _1859) + _588) * cbLight._m0[_2045].x) * _2113) * _2114) + _1971;
        _2037 = (((((_2094 * _1861) + _590) * cbLight._m0[_2045].y) * _2113) * _2114) + _1972;
        _2039 = (((((_2094 * _1862) + _591) * cbLight._m0[_2045].z) * _2113) * _2114) + _1973;
    }
    float _2149;
    float _2151;
    float _2153;
    if (_1763)
    {
        _2149 = _2035;
        _2151 = _2037;
        _2153 = _2039;
    }
    else
    {
        uint _2160 = _1668 + 3u;
        uint _2164 = _1668 + 11u;
        float _2178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _435) * 0.949999988079071044921875);
        float _2179 = _2178 * _2178;
        float _2180 = cbLight._m0[_2160].x + _513;
        float _2181 = cbLight._m0[_2160].y + _514;
        float _2182 = cbLight._m0[_2160].z + _515;
        float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
        float _2187 = _2186 * _2180;
        float _2188 = _2186 * _2181;
        float _2189 = _2186 * _2182;
        float _2190 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_2160].xyz));
        float _4043 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2193 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2194 = dot(vec3(_432, _433, _434), vec3(_2187, _2188, _2189));
        float _4054 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2197 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2198 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2187, _2188, _2189));
        float _4065 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2202 = _2179 * _2179;
        float _2206 = ((_2197 * _2197) * (_2202 + (-1.0))) + 1.0;
        float _2213 = exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0);
        float _2220 = 1.0 - _2179;
        float _2230 = (0.5 / (((_1837 * ((_2193 * _2220) + _2179)) + 9.9999999392252902907785028219223e-09) + (((_1837 * _2220) + _2179) * _2193))) * _2193;
        float _4076 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2232 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2202 / ((_2206 * _2206) * 3.141590118408203125));
        float _2233 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _2149 = (((((_2213 * _1859) + _588) * cbLight._m0[_2164].x) * _2232) * _2233) + _2035;
        _2151 = (((((_2213 * _1861) + _590) * cbLight._m0[_2164].y) * _2232) * _2233) + _2037;
        _2153 = (((((_2213 * _1862) + _591) * cbLight._m0[_2164].z) * _2232) * _2233) + _2039;
    }
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    float _2375;
    float _2377;
    if (_1666.y == 0u)
    {
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2308;
        float _2310 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2308;
        float _2311 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2308;
        uvec4 _2323 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2324 = _2323.x;
        uint _2335 = uint((float(_2323.y) * floor(float(uint(cbSceneParam._m0[85u].y * _522) / _2324))) + floor(float(uint(cbSceneParam._m0[85u].x * _521) / _2324)));
        float _2345 = (log2(_2311 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2346 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        uint _2349 = uint(isnan(14.0) ? _2346 : (isnan(_2346) ? 14.0 : min(_2346, 14.0)));
        uvec4 _2354 = texelFetch(g_lightClusterGridBuffer, int(((_2349 << 2u) + (_2335 << 6u)) >> 2u));
        uint _2355 = _2354.x;
        uint _2356 = _2323.z;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        if (((((1u << ((_2356 >> 4u) & 15u)) + 4294967295u) & _2355) == 0u) || ((_2356 & 240u) == 0u))
        {
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
        }
        else
        {
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            float _2606 = 0.0;
            float _2607 = 0.0;
            uint _2608 = 0u;
            uint _2617;
            bool _2618;
            for (;;)
            {
                _2617 = texelFetch(g_lightClassification, int((((_2349 << 5u) + (_2335 << 9u)) + (_2608 << 2u)) >> 2u)).x;
                _2618 = _2617 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2618)
                {
                    frontier_phi_63_pred = _2607;
                    frontier_phi_63_pred_1 = _2606;
                    frontier_phi_63_pred_2 = _2605;
                    frontier_phi_63_pred_3 = _2604;
                    frontier_phi_63_pred_4 = _2603;
                    frontier_phi_63_pred_5 = _2602;
                }
                else
                {
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    uint _2732;
                    _2726 = _2602;
                    _2727 = _2603;
                    _2728 = _2604;
                    _2729 = _2605;
                    _2730 = _2606;
                    _2731 = _2607;
                    _2732 = _2617;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    for (;;)
                    {
                        uint _2736 = uint(findLSB(_2732)) + (_2608 << 5u);
                        uint _2733 = (_2732 + 4294967295u) & _2732;
                        uint _2738 = _2736 * 48u;
                        vec4 _2752 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 3u)).x));
                        uint _2758 = (_2736 * 48u) + 4u;
                        vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2758)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 3u)).x));
                        uint _2777 = (_2736 * 48u) + 8u;
                        vec3 _2788 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x));
                        float _2792 = _2752.x - _2309;
                        float _2793 = _2752.y - _2310;
                        float _2794 = _2752.z - _2311;
                        float _2795 = dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794));
                        float _2798 = inversesqrt(_2795);
                        float _2799 = _2798 * _2792;
                        float _2800 = _2798 * _2793;
                        float _2801 = _2798 * _2794;
                        float _2802 = dot(vec3(_543, _546, _549), vec3(_2799, _2800, _2801));
                        float _2807 = 1.0 - (_2795 * _2752.w);
                        float _4102 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2808 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                        float _2809 = sqrt(_2795) * _2771.w;
                        float _2812 = 1.39999997615814208984375 / (_2809 + 1.39999997615814208984375);
                        float _2813 = _2812 * _2812;
                        float _2816 = ((1.0 - _2813) * _2802) + _2813;
                        float _2819 = _2809 * _2809;
                        float _2823 = ((isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))) * _2808) / ((_2819 * 0.699999988079071044921875) + 1.0);
                        float _2827 = (-0.0) - _2309;
                        float _2828 = (-0.0) - _2310;
                        float _2829 = (-0.0) - _2311;
                        float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
                        float _2834 = _2833 * _2827;
                        float _2835 = _2833 * _2828;
                        float _2836 = _2833 * _2829;
                        float _2844 = exp2(log2(1.0 / ((_2819 * 3.5) + 5.0)) * 0.25);
                        float _2845 = 1.0 - _619;
                        float _2852 = sqrt(1.0 - ((1.0 - (_2845 * _2845)) * (1.0 - (_2844 * _2844))));
                        float _2853 = _2852 * _2852;
                        float _2854 = _2853 * _2853;
                        float _2855 = _2834 + _2799;
                        float _2856 = _2835 + _2800;
                        float _2857 = _2836 + _2801;
                        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
                        float _2865 = dot(vec3(_543, _546, _549), vec3(_2834, _2835, _2836));
                        float _4118 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2868 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2869 = dot(vec3(_543, _546, _549), vec3(_2861 * _2855, _2861 * _2856, _2861 * _2857));
                        float _4129 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2872 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2876 = ((_2872 * _2872) * (_2854 + (-1.0))) + 1.0;
                        float _2877 = _2812 * _2853;
                        float _2878 = _2877 * _2877;
                        float _2881 = ((1.0 - _2878) * _2802) + _2878;
                        float _4140 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2883 = 1.0 - _2853;
                        float _2893 = (0.5 / (((_2882 * ((_2868 * _2883) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2882 * _2883) + _2853) * _2868))) * _2882;
                        float _4151 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2904 = (((_2854 * 3.1415927410125732421875) * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) / ((_2876 * _2876) * ((_2819 * 2.1991131305694580078125) + 3.141590118408203125))) * _2808;
                        _2661 = (_2823 * _2771.x) + _2729;
                        _2662 = (_2823 * _2771.y) + _2730;
                        _2663 = (_2823 * _2771.z) + _2731;
                        _2658 = (_2904 * _2788.x) + _2726;
                        _2659 = (_2904 * _2788.y) + _2727;
                        _2660 = (_2904 * _2788.z) + _2728;
                        if (_2733 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2726 = _2658;
                            _2727 = _2659;
                            _2728 = _2660;
                            _2729 = _2661;
                            _2730 = _2662;
                            _2731 = _2663;
                            _2732 = _2733;
                        }
                    }
                    frontier_phi_63_pred = _2663;
                    frontier_phi_63_pred_1 = _2662;
                    frontier_phi_63_pred_2 = _2661;
                    frontier_phi_63_pred_3 = _2660;
                    frontier_phi_63_pred_4 = _2659;
                    frontier_phi_63_pred_5 = _2658;
                }
                _2469 = frontier_phi_63_pred;
                _2467 = frontier_phi_63_pred_1;
                _2465 = frontier_phi_63_pred_2;
                _2463 = frontier_phi_63_pred_3;
                _2461 = frontier_phi_63_pred_4;
                _2459 = frontier_phi_63_pred_5;
                uint _2609 = _2608 + 1u;
                if (_2609 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2602 = _2459;
                    _2603 = _2461;
                    _2604 = _2463;
                    _2605 = _2465;
                    _2606 = _2467;
                    _2607 = _2469;
                    _2608 = _2609;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
        }
        uvec4 _2472 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2473 = _2472.z;
        uint _2475 = (_2473 >> 8u) & 15u;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        if (((4294967295u << _2475) & _2355) == 0u)
        {
            _2570 = _2458;
            _2572 = _2460;
            _2574 = _2462;
            _2576 = _2464;
            _2578 = _2466;
            _2580 = _2468;
        }
        else
        {
            float _2595 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
            float _2596 = _2595 * _2309;
            float _2597 = _2595 * _2310;
            float _2598 = _2595 * _2311;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2475 < ((_2473 >> 12u) & 15u))
            {
                float _2571;
                float _2573;
                float _2575;
                float _2577;
                float _2579;
                float _2581;
                float _2709 = _2458;
                float _2710 = _2460;
                float _2711 = _2462;
                float _2712 = _2464;
                float _2713 = _2466;
                float _2714 = _2468;
                uint _2715 = _2475;
                uint _2724;
                bool _2725;
                for (;;)
                {
                    _2724 = texelFetch(g_lightClassification, int((((_2349 << 5u) + (_2335 << 9u)) + (_2715 << 2u)) >> 2u)).x;
                    _2725 = _2724 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2725)
                    {
                        frontier_phi_69_pred = _2714;
                        frontier_phi_69_pred_1 = _2713;
                        frontier_phi_69_pred_2 = _2712;
                        frontier_phi_69_pred_3 = _2711;
                        frontier_phi_69_pred_4 = _2710;
                        frontier_phi_69_pred_5 = _2709;
                    }
                    else
                    {
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _2922 = _2709;
                        float _2923 = _2710;
                        float _2924 = _2711;
                        float _2925 = _2712;
                        float _2926 = _2713;
                        float _2927 = _2714;
                        uint _2928 = _2724;
                        uint _2929;
                        vec4 _2954;
                        float _2955;
                        vec4 _2970;
                        vec3 _2982;
                        vec4 _2998;
                        vec4 _3014;
                        float _3061;
                        bool _3062;
                        for (;;)
                        {
                            uint _2939 = ((_2715 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2928));
                            _2929 = (_2928 + 4294967295u) & _2928;
                            uint _2941 = _2939 * 40u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            _2955 = _2954.w;
                            uint _2957 = (_2939 * 40u) + 4u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2972 = (_2939 * 40u) + 8u;
                            _2982 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x));
                            uint _2985 = (_2939 * 40u) + 16u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            uint _3001 = (_2939 * 40u) + 20u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3017 = (_2939 * 40u) + 24u;
                            vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3036 = (_2939 * 40u) + 28u;
                            vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            _3061 = fma(_2311, _3049.z, fma(_2310, _3049.y, _3049.x * _2309)) + _3049.w;
                            _3062 = !((fma(_2311, _3030.z, fma(_2310, _3030.y, _3030.x * _2309)) + _3030.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3062)
                            {
                                float _3089 = _2954.x - _2309;
                                float _3090 = _2954.y - _2310;
                                float _3091 = _2954.z - _2311;
                                float _3092 = dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091));
                                float _3095 = inversesqrt(_3092);
                                float _3096 = _3095 * _3089;
                                float _3097 = _3095 * _3090;
                                float _3098 = _3095 * _3091;
                                float _3102 = 1.0 - (_3092 / (_2955 * _2955));
                                float _4162 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3103 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                                float _3107 = sqrt(_3092) * _2970.w;
                                float _3109 = 1.39999997615814208984375 / (_3107 + 1.39999997615814208984375);
                                float _3110 = _3109 * _3109;
                                float _3113 = ((1.0 - _3110) * dot(vec3(_3096, _3097, _3098), vec3(_543, _546, _549))) + _3110;
                                float _3116 = _3107 * _3107;
                                float _3120 = (fma(_2311, _2998.z, fma(_2310, _2998.y, _2998.x * _2309)) + _2998.w) / _3061;
                                float _3121 = (fma(_2311, _3014.z, fma(_2310, _3014.y, _3014.x * _2309)) + _3014.w) / _3061;
                                float _3125 = 1.0 - dot(vec2(_3120, _3121), vec2(_3120, _3121));
                                float _4178 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3126 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3127 = _3126 * (((isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0))) * _3103) / ((_3116 * 0.699999988079071044921875) + 1.0));
                                float _3139 = exp2(log2(1.0 / ((_3116 * 3.5) + 5.0)) * 0.25);
                                float _3140 = 1.0 - _619;
                                float _3147 = sqrt(1.0 - ((1.0 - (_3140 * _3140)) * (1.0 - (_3139 * _3139))));
                                float _3148 = _3147 * _3147;
                                float _3149 = _3148 * _3148;
                                float _3150 = _3096 - _2596;
                                float _3151 = _3097 - _2597;
                                float _3152 = _3098 - _2598;
                                float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                                float _3160 = dot(vec3(_543, _546, _549), vec3((-0.0) - _2596, (-0.0) - _2597, (-0.0) - _2598));
                                float _4189 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3163 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3164 = dot(vec3(_543, _546, _549), vec3(_3156 * _3150, _3156 * _3151, _3156 * _3152));
                                float _4200 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3167 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3171 = ((_3167 * _3167) * (_3149 + (-1.0))) + 1.0;
                                float _3172 = _3109 * _3148;
                                float _3173 = _3172 * _3172;
                                float _3179 = ((1.0 - _3173) * dot(vec3(_543, _546, _549), vec3(_3096, _3097, _3098))) + _3173;
                                float _4211 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3180 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                                float _3181 = 1.0 - _3148;
                                float _3191 = (0.5 / (((_3180 * ((_3163 * _3181) + _3148)) + 9.9999999392252902907785028219223e-09) + (((_3180 * _3181) + _3148) * _3163))) * _3180;
                                float _4222 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3201 = (_3126 * _3103) * (((_3149 * 3.1415927410125732421875) * (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) / ((_3171 * _3171) * ((_3116 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3127 * _2970.z;
                                frontier_phi_75_pred_1 = _3127 * _2970.y;
                                frontier_phi_75_pred_2 = _3127 * _2970.x;
                                frontier_phi_75_pred_3 = _3201 * _2982.z;
                                frontier_phi_75_pred_4 = _3201 * _2982.y;
                                frontier_phi_75_pred_5 = _3201 * _2982.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3210 = frontier_phi_75_pred;
                            _3209 = frontier_phi_75_pred_1;
                            _3208 = frontier_phi_75_pred_2;
                            _3207 = frontier_phi_75_pred_3;
                            _3206 = frontier_phi_75_pred_4;
                            _3205 = frontier_phi_75_pred_5;
                            _2912 = _3208 + _2925;
                            _2913 = _3209 + _2926;
                            _2914 = _3210 + _2927;
                            _2909 = _3205 + _2922;
                            _2910 = _3206 + _2923;
                            _2911 = _3207 + _2924;
                            if (_2929 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2929;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2914;
                        frontier_phi_69_pred_1 = _2913;
                        frontier_phi_69_pred_2 = _2912;
                        frontier_phi_69_pred_3 = _2911;
                        frontier_phi_69_pred_4 = _2910;
                        frontier_phi_69_pred_5 = _2909;
                    }
                    _2581 = frontier_phi_69_pred;
                    _2579 = frontier_phi_69_pred_1;
                    _2577 = frontier_phi_69_pred_2;
                    _2575 = frontier_phi_69_pred_3;
                    _2573 = frontier_phi_69_pred_4;
                    _2571 = frontier_phi_69_pred_5;
                    uint _2716 = _2715 + 1u;
                    if (_2716 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2709 = _2571;
                        _2710 = _2573;
                        _2711 = _2575;
                        _2712 = _2577;
                        _2713 = _2579;
                        _2714 = _2581;
                        _2715 = _2716;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2581;
                frontier_phi_57_58_ladder_1 = _2579;
                frontier_phi_57_58_ladder_2 = _2577;
                frontier_phi_57_58_ladder_3 = _2575;
                frontier_phi_57_58_ladder_4 = _2573;
                frontier_phi_57_58_ladder_5 = _2571;
            }
            else
            {
                frontier_phi_57_58_ladder = _2468;
                frontier_phi_57_58_ladder_1 = _2466;
                frontier_phi_57_58_ladder_2 = _2464;
                frontier_phi_57_58_ladder_3 = _2462;
                frontier_phi_57_58_ladder_4 = _2460;
                frontier_phi_57_58_ladder_5 = _2458;
            }
            _2570 = frontier_phi_57_58_ladder_5;
            _2572 = frontier_phi_57_58_ladder_4;
            _2574 = frontier_phi_57_58_ladder_3;
            _2576 = frontier_phi_57_58_ladder_2;
            _2578 = frontier_phi_57_58_ladder_1;
            _2580 = frontier_phi_57_58_ladder;
        }
        float _2585 = isnan(1.0) ? _603 : (isnan(_603) ? 1.0 : min(_603, 1.0));
        _2367 = (_2585 * _2576) + _1801;
        _2369 = (_2585 * _2578) + _1803;
        _2371 = (_2585 * _2580) + _1805;
        _2373 = ((_2570 * _588) * _2585) + _2149;
        _2375 = ((_2572 * _590) * _2585) + _2151;
        _2377 = ((_2574 * _591) * _2585) + _2153;
    }
    else
    {
        _2367 = _1801;
        _2369 = _1803;
        _2371 = _1805;
        _2373 = _2149;
        _2375 = _2151;
        _2377 = _2153;
    }
    float _4238 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4249 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _4260 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _2394 = ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2367 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _603))) + ((_2373 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1413)) * cbPerFrame._m0[3u].x);
    float _2395 = ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2369 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _603))) + ((_2375 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1413)) * cbPerFrame._m0[3u].x);
    float _2396 = ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2371 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _603))) + ((_2377 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1413)) * cbPerFrame._m0[3u].x);
    uint _2400 = _562 + 6u;
    float _2408 = _521 / cbSceneParam._m0[86u].x;
    float _2409 = _522 / cbSceneParam._m0[86u].y;
    vec4 _2423 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2408, _2409, (log2((isnan(cbSceneParam._m0[77u].w) ? _455 : (isnan(_455) ? cbSceneParam._m0[77u].w : min(_455, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2425 = _2423.x;
    float _2426 = _2423.y;
    float _2427 = _2423.z;
    float _2428 = _2423.w;
    float _2520;
    float _2522;
    float _2524;
    float _2526;
    if (_455 > cbSceneParam._m0[78u].w)
    {
        float _2483 = isnan(_455) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _455 : min(cbSceneParam._m0[80u].w, _455));
        float _2484 = _2483 / _455;
        float _2495 = _2484 * _506;
        float _2496 = _507 * _2484;
        float _2497 = (-0.0) - _2496;
        float _2498 = _2484 * _508;
        float _2500 = (cbSceneParam._m0[77u].w * _2497) / _2483;
        float _2501 = _2500 + cbSceneParam._m0[79u].w;
        float _2502 = cbSceneParam._m0[79u].w - _2496;
        float _2508 = sqrt(((_2495 * _2495) + (_2496 * _2496)) + (_2498 * _2498));
        float _2511 = (1.0 - (cbSceneParam._m0[77u].w / _2483)) * _2508;
        float _2516 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2518 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2671;
        if (abs((_2497 - _2500) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2671 = ((((_2501 > 0.0) ? exp2(_2516 * _2501) : (2.0 - exp2(_2518 * _2501))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2511;
        }
        else
        {
            float _2631 = 1.0 / cbSceneParam._m0[80u].x;
            float _2632 = isnan(_2502) ? _2501 : (isnan(_2501) ? _2502 : max(_2501, _2502));
            float _2633 = isnan(_2502) ? _2501 : (isnan(_2501) ? _2502 : min(_2501, _2502));
            float _2642 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : min(_2632, 0.0));
            float _2643 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : min(_2633, 0.0));
            _2671 = ((abs(_2508 / _2497) * cbSceneParam._m0[80u].y) * ((((_2642 - _2643) * 2.0) - ((exp2(_2516 * (isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0)))) - exp2(_2516 * (isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0))))) * _2631)) - ((exp2(_2518 * _2642) - exp2(_2518 * _2643)) * _2631))) + (_2511 * cbSceneParam._m0[80u].z);
        }
        vec4 _2673 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2408, _2409, 1.0), 0.0);
        float _2682 = exp2((_2671 * (-1.44269502162933349609375)) * (1.0 - _2673.w));
        float _2683 = log2(_2682);
        float _2699 = log2(_2428);
        _2520 = (exp2(_2699 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2683 * cbSceneParam._m0[78u].x)) * _2673.x) / cbSceneParam._m0[78u].x)) + _2425;
        _2522 = (exp2(_2699 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2683 * cbSceneParam._m0[78u].y)) * _2673.y) / cbSceneParam._m0[78u].y)) + _2426;
        _2524 = (exp2(_2699 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2683 * cbSceneParam._m0[78u].z)) * _2673.z) / cbSceneParam._m0[78u].z)) + _2427;
        _2526 = _2682 * _2428;
    }
    else
    {
        _2520 = _2425;
        _2522 = _2426;
        _2524 = _2427;
        _2526 = _2428;
    }
    float _2538 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2539 = _2538 == 3.0;
    float _2540 = log2(_2526);
    float _2547 = exp2(_2540 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0)));
    float _2548 = exp2(_2540 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0)));
    float _2549 = exp2(_2540 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0)));
    float _2558 = (_2538 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2558 * (_2539 ? _2547 : (_2547 + (cbSceneParam._m0[72u].w * _2520)));
    SV_Target.y = _2558 * (_2539 ? _2548 : (_2548 + (cbSceneParam._m0[72u].w * _2522)));
    SV_Target.z = _2558 * (_2539 ? _2549 : (_2549 + (cbSceneParam._m0[72u].w * _2524)));
    SV_Target.w = cbInstanceData._m0[_2400].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2400].w;
}


