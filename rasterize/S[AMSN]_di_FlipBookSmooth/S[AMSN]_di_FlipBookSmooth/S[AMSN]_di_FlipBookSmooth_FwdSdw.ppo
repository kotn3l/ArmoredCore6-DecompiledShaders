#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _980;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _191 = _190 * _182;
    float _192 = _190 * _183;
    float _193 = _190 * _184;
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _205 = _204 * TANGENT.x;
    float _206 = _204 * TANGENT.y;
    float _207 = _204 * TANGENT.z;
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    uint _233 = uint(int(floor(cbMtdParam._m0[10u].z)));
    float _234 = fract(cbMtdParam._m0[10u].z);
    uint _235 = _233 + 1u;
    uint _236 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _239 = float(int(_233 - _236 * (_233 / _236)));
    float _243 = float(int(_235 - _236 * (_235 / _236)));
    float _247 = 1.0 / cbMtdParam._m0[10u].w;
    float _249 = 1.0 / cbMtdParam._m0[11u].x;
    float _250 = fract(TEXCOORD_1.x);
    float _251 = fract(TEXCOORD_1.y);
    float _253 = (_250 + (_239 - cbMtdParam._m0[10u].w * trunc(_239 / cbMtdParam._m0[10u].w))) * _247;
    float _255 = (_251 + floor(_239 / cbMtdParam._m0[10u].w)) * _249;
    float _257 = (_250 + (_243 - cbMtdParam._m0[10u].w * trunc(_243 / cbMtdParam._m0[10u].w))) * _247;
    float _259 = (_251 + floor(_243 / cbMtdParam._m0[10u].w)) * _249;
    vec4 _272 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _257) + cbTextureTilingScale._m0[0u].z, (_259 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _282 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _253) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _255) + cbTextureTilingScale._m0[0u].w));
    float _284 = _282.x;
    float _285 = _282.y;
    float _286 = _282.z;
    float _296 = (((_272.x - _284) * _234) + _284) * cbMtdParam._m0[9u].x;
    float _297 = (((_272.y - _285) * _234) + _285) * cbMtdParam._m0[9u].y;
    float _298 = (((_272.z - _286) * _234) + _286) * cbMtdParam._m0[9u].z;
    vec4 _318 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _253) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _255) + cbTextureTilingScale._m0[2u].w));
    float _320 = _318.x;
    float _324 = (_320 + cbMtdParam._m0[10u].x) + ((texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _257) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w)).x - _320) * _234);
    vec4 _336 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _257) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _259) + cbTextureTilingScale._m0[1u].w));
    float _343 = (_336.x * 2.0) + (-1.0);
    float _345 = (_336.y * 2.0) + (-1.0);
    float _349 = 1.0 - dot(vec2(_343, _345), vec2(_343, _345));
    float _3602 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _351 = sqrt(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)));
    float _354 = fma(_351, _212, fma(_345, _205, _343 * _191));
    float _357 = fma(_351, _213, fma(_345, _206, _343 * _192));
    float _360 = fma(_351, _214, fma(_345, _207, _343 * _193));
    float _364 = inversesqrt(dot(vec3(_354, _357, _360), vec3(_354, _357, _360)));
    vec4 _372 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _253) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _255) + cbTextureTilingScale._m0[1u].w));
    float _378 = (_372.x * 2.0) + (-1.0);
    float _379 = (_372.y * 2.0) + (-1.0);
    float _383 = 1.0 - dot(vec2(_378, _379), vec2(_378, _379));
    float _3613 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _385 = sqrt(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)));
    float _388 = fma(_385, _212, fma(_379, _205, _378 * _191));
    float _391 = fma(_385, _213, fma(_379, _206, _378 * _192));
    float _394 = fma(_385, _214, fma(_379, _207, _378 * _193));
    float _398 = inversesqrt(dot(vec3(_388, _391, _394), vec3(_388, _391, _394)));
    float _399 = _398 * _388;
    float _400 = _398 * _391;
    float _401 = _398 * _394;
    float _410 = (((_364 * _360) - _401) * _234) + _401;
    float _413 = (((((_364 * _354) - _399) * _234) + _399) * 2.0) + (-1.0);
    float _414 = (((((_364 * _357) - _400) * _234) + _400) * 2.0) + (-1.0);
    float _415 = dot(vec2(_413, _414), vec2(_413, _414));
    float _3624 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _420 = sqrt(1.0 - (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))));
    float _423 = fma(_420, _212, fma(_414, _205, _413 * _191));
    float _426 = fma(_420, _213, fma(_414, _206, _413 * _192));
    float _429 = fma(_420, _214, fma(_414, _207, _413 * _193));
    float _433 = inversesqrt(dot(vec3(_423, _426, _429), vec3(_423, _426, _429)));
    float _434 = _433 * _423;
    float _435 = _433 * _426;
    float _436 = _433 * _429;
    float _3635 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _437 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3657 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3668 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3679 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _441 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _457 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _508 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _498);
    float _509 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _498);
    float _510 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _498);
    float _514 = inversesqrt(dot(vec3(_508, _509, _510), vec3(_508, _509, _510)));
    float _515 = _508 * _514;
    float _516 = _509 * _514;
    float _517 = _510 * _514;
    float _523 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _524 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _545 = fma(_436, cbSceneParam._m0[5u].z, fma(_435, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _434));
    float _548 = fma(_436, cbSceneParam._m0[6u].z, fma(_435, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _434));
    float _551 = fma(_436, cbSceneParam._m0[7u].z, fma(_435, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _434));
    uint _564 = uint(roundEven(NORMAL.w)) * 13u;
    uint _567 = (_564 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _573 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * cbInstanceData._m0[_567].x;
    float _574 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_567].y;
    float _575 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_567].z;
    float _3690 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _577 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _579 = 1.0 - _441;
    float _580 = _576 * _579;
    float _581 = _577 * _579;
    float _582 = _578 * _579;
    float _587 = (_576 + (-0.039999999105930328369140625)) * _441;
    float _588 = (_577 + (-0.039999999105930328369140625)) * _441;
    float _589 = (_578 + (-0.039999999105930328369140625)) * _441;
    float _590 = _587 + 0.039999999105930328369140625;
    float _592 = _588 + 0.039999999105930328369140625;
    float _593 = _589 + 0.039999999105930328369140625;
    vec4 _602 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _523, cbSceneParam._m0[86u].y * _524));
    float _605 = _602.x * TEXCOORD_1.w;
    float _606 = dot(vec3(_434, _435, _436), vec3(_515, _516, _517));
    float _609 = _606 * 2.0;
    float _613 = (_609 * _434) - _515;
    float _614 = (_609 * _435) - _516;
    float _615 = (_609 * _436) - _517;
    float _619 = abs(dot(vec3(_515, _516, _517), vec3(_434, _435, _436)));
    float _3723 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _621 = sqrt(_437);
    float _634 = exp2((_621 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_621 * 3.0));
    float _640 = (1.0 - _634) * ((_621 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _641 = _634 * _621;
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _979;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _704 = fma(_677, cbModelParam._m0[26u].z, fma(_673, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _669));
        float _708 = fma(_677, cbModelParam._m0[27u].z, fma(_673, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _669));
        float _712 = fma(_677, cbModelParam._m0[28u].z, fma(_673, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _669));
        float _737 = _669 + _434;
        float _738 = _673 + _435;
        float _739 = _677 + _436;
        float _749 = fma(_739, cbModelParam._m0[26u].z, fma(_738, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _737)) - _704;
        float _750 = fma(_739, cbModelParam._m0[27u].z, fma(_738, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _737)) - _708;
        float _751 = fma(_739, cbModelParam._m0[28u].z, fma(_738, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _737)) - _712;
        float _755 = inversesqrt(dot(vec3(_749, _750, _751), vec3(_749, _750, _751)));
        float _768 = ((_755 * _749) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_704 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _769 = ((_755 * _750) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_708 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _770 = ((_755 * _751) / cbModelParam._m0[34u].z) + ((((((_712 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        float _807 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_773.x + (-0.5));
        float _809 = _807 * (_773.y + (-0.5));
        float _810 = _807 * (_773.z + (-0.5));
        float _817 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_780.x + (-0.5));
        float _819 = _817 * (_780.y + (-0.5));
        float _820 = _817 * (_780.z + (-0.5));
        float _827 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_787.x + (-0.5));
        float _829 = _827 * (_787.y + (-0.5));
        float _830 = _827 * (_787.z + (-0.5));
        float _837 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_794.x + (-0.5));
        float _839 = _837 * (_794.y + (-0.5));
        float _840 = _837 * (_794.z + (-0.5));
        float _841 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = _808 * 0.5;
        float _845 = _818 * 0.5;
        float _846 = _828 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _861 = (dot(vec3(_434, _435, _436), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _871 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_841 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3771 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_873 + 1.0))) + _878) * _841;
        float _888 = _809 * 0.5;
        float _889 = _819 * 0.5;
        float _890 = _829 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _904 = (dot(vec3(_434, _435, _436), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _913 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3804 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_915 + 1.0))) + _920) * _842;
        float _930 = _810 * 0.5;
        float _931 = _820 * 0.5;
        float _932 = _830 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_434, _435, _436), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3837 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_957 + 1.0))) + _962) * _843;
        _979 = _810;
        _981 = _809;
        _982 = _808;
        _983 = _820;
        _984 = _819;
        _985 = _818;
        _986 = _830;
        _987 = _829;
        _988 = _828;
        _989 = _843;
        _990 = _842;
        _991 = _841;
        _992 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
    }
    else
    {
        _979 = _980;
        _981 = _980;
        _982 = _980;
        _983 = _980;
        _984 = _980;
        _985 = _980;
        _986 = _980;
        _987 = _980;
        _988 = _980;
        _989 = _980;
        _990 = _980;
        _991 = _980;
        _992 = 0.0;
        _993 = 0.0;
        _994 = 0.0;
    }
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1020 = fma(_677, cbModelParam._m0[30u].z, fma(_673, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _669));
        float _1024 = fma(_677, cbModelParam._m0[31u].z, fma(_673, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _669));
        float _1028 = fma(_677, cbModelParam._m0[32u].z, fma(_673, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _669));
        float _1051 = _669 + _434;
        float _1052 = _673 + _435;
        float _1053 = _677 + _436;
        float _1063 = fma(_1053, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051)) - _1020;
        float _1064 = fma(_1053, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051)) - _1024;
        float _1065 = fma(_1053, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051)) - _1028;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1020 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1024 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[35u].z) + ((((((_1028 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1119 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1086.x + (-0.5));
        float _1121 = _1119 * (_1086.y + (-0.5));
        float _1122 = _1119 * (_1086.z + (-0.5));
        float _1129 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1093.x + (-0.5));
        float _1131 = _1129 * (_1093.y + (-0.5));
        float _1132 = _1129 * (_1093.z + (-0.5));
        float _1139 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1100.x + (-0.5));
        float _1141 = _1139 * (_1100.y + (-0.5));
        float _1142 = _1139 * (_1100.z + (-0.5));
        float _1149 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1107.x + (-0.5));
        float _1151 = _1149 * (_1107.y + (-0.5));
        float _1152 = _1149 * (_1107.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_434, _435, _436), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3900 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1183 + 1.0))) + _1188) * _1153;
        float _1198 = _1121 * 0.5;
        float _1199 = _1131 * 0.5;
        float _1200 = _1141 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_434, _435, _436), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3933 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1225 + 1.0))) + _1230) * _1154;
        float _1240 = _1122 * 0.5;
        float _1241 = _1132 * 0.5;
        float _1242 = _1142 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_434, _435, _436), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3966 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1267 + 1.0))) + _1272) * _1155;
        _1289 = _1122;
        _1290 = _1121;
        _1291 = _1120;
        _1292 = _1132;
        _1293 = _1131;
        _1294 = _1130;
        _1295 = _1142;
        _1296 = _1141;
        _1297 = _1140;
        _1298 = _1155;
        _1299 = _1154;
        _1300 = _1153;
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _980;
        _1290 = _980;
        _1291 = _980;
        _1292 = _980;
        _1293 = _980;
        _1294 = _980;
        _1295 = _980;
        _1296 = _980;
        _1297 = _980;
        _1298 = _980;
        _1299 = _980;
        _1300 = _980;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _992)) + _992;
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _993)) + _993;
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _994)) + _994;
    float _1336 = fma(_1315, cbSceneParam._m0[89u].z, fma(_1314, cbSceneParam._m0[89u].y, _1313 * cbSceneParam._m0[89u].x));
    float _1339 = fma(_1315, cbSceneParam._m0[90u].z, fma(_1314, cbSceneParam._m0[90u].y, _1313 * cbSceneParam._m0[90u].x));
    float _1342 = fma(_1315, cbSceneParam._m0[91u].z, fma(_1314, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1313));
    float _1357 = _613 * 0.5;
    float _1358 = _614 * 0.5;
    float _1359 = _615 * 0.5;
    float _1360 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1363 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1366 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1400;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1373 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_979, _983, _986, _989));
        float _1377 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_981, _984, _987, _990));
        float _1381 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_982, _985, _988, _991));
        float _1388 = dot(vec4(cbModelParam._m0[39u]), vec4(_1357, _1358, _1359, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1411;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1402 = dot(vec4(cbModelParam._m0[40u]), vec4(_1357, _1358, _1359, 1.0));
        _1411 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1411 = 1.0;
    }
    float _1415 = (_1411 * cbModelParam._m0[1u].x) + (_1400 * (1.0 - cbModelParam._m0[1u].x));
    float _1425 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _437);
    float _1426 = isnan(_1425) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1425 : min(cbModelParam._m0[25u].z, _1425));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1475 = fma(_677, cbModelParam._m0[13u].z, fma(_673, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669)) + cbModelParam._m0[13u].w;
        float _1479 = fma(_677, cbModelParam._m0[14u].z, fma(_673, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669)) + cbModelParam._m0[14u].w;
        float _1483 = fma(_677, cbModelParam._m0[15u].z, fma(_673, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669)) + cbModelParam._m0[15u].w;
        float _1486 = fma(_615, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613));
        float _1489 = fma(_615, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613));
        float _1492 = fma(_615, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613));
        float _1520;
        if (_1486 > 0.0)
        {
            _1520 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1520 = frontier_phi_16_14_ladder;
        }
        float _1695;
        if (_1489 > 0.0)
        {
            _1695 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1695 = frontier_phi_25_21_ladder;
        }
        float _1991;
        if (_1492 > 0.0)
        {
            _1991 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1991 = frontier_phi_37_32_ladder;
        }
        float _1993 = isnan(_1695) ? _1520 : (isnan(_1520) ? _1695 : min(_1520, _1695));
        float _1994 = isnan(_1991) ? _1993 : (isnan(_1993) ? _1991 : min(_1993, _1991));
        float _1998 = (_1994 * _1486) + _1475;
        float _1999 = (_1994 * _1489) + _1479;
        float _2000 = (_1994 * _1492) + _1483;
        float _2001 = _1994 * 9.9999997473787516355514526367188e-05;
        float _2003 = (-1.0) - _2001;
        float _2005 = _2001 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2000 > _2005) || ((_2000 < _2003) || ((_1999 > _2005) || ((_1999 < _2003) || ((_1998 < _2003) || (_1998 > _2005))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2145 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2000, cbModelParam._m0[9u].z, fma(_1999, cbModelParam._m0[9u].y, _1998 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2000, cbModelParam._m0[10u].z, fma(_1999, cbModelParam._m0[10u].y, _1998 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2000, cbModelParam._m0[11u].z, fma(_1999, cbModelParam._m0[11u].y, _1998 * cbModelParam._m0[11u].x))), _1426);
            frontier_phi_15_37_ladder = _2145.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2145.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2145.z * cbModelParam._m0[1u].y;
        }
        _1508 = frontier_phi_15_37_ladder_1;
        _1510 = frontier_phi_15_37_ladder;
        _1512 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_613, _614, _615), _1426);
        _1508 = _1496.x * cbModelParam._m0[1u].y;
        _1510 = _1496.y * cbModelParam._m0[1u].y;
        _1512 = _1496.z * cbModelParam._m0[1u].y;
    }
    float _1516 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _437);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1516 : min(cbModelParam._m0[25u].w, _1516));
    float _1610;
    float _1612;
    float _1614;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1574 = fma(_677, cbModelParam._m0[21u].z, fma(_673, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669)) + cbModelParam._m0[21u].w;
        float _1578 = fma(_677, cbModelParam._m0[22u].z, fma(_673, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669)) + cbModelParam._m0[22u].w;
        float _1582 = fma(_677, cbModelParam._m0[23u].z, fma(_673, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669)) + cbModelParam._m0[23u].w;
        float _1585 = fma(_615, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613));
        float _1588 = fma(_615, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613));
        float _1591 = fma(_615, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613));
        float _1700;
        if (_1585 > 0.0)
        {
            _1700 = abs((1.0 - _1574) / _1585);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1574 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1700 = frontier_phi_27_23_ladder;
        }
        float _2018;
        if (_1588 > 0.0)
        {
            _2018 = abs((1.0 - _1578) / _1588);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1578 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2018 = frontier_phi_39_34_ladder;
        }
        float _2356;
        if (_1591 > 0.0)
        {
            _2356 = abs((1.0 - _1582) / _1591);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1582 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2356 = frontier_phi_49_46_ladder;
        }
        float _2358 = isnan(_2018) ? _1700 : (isnan(_1700) ? _2018 : min(_1700, _2018));
        float _2359 = isnan(_2356) ? _2358 : (isnan(_2358) ? _2356 : min(_2358, _2356));
        float _2363 = (_2359 * _1585) + _1574;
        float _2364 = (_2359 * _1588) + _1578;
        float _2365 = (_2359 * _1591) + _1582;
        float _2366 = _2359 * 9.9999997473787516355514526367188e-05;
        float _2367 = (-1.0) - _2366;
        float _2369 = _2366 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2365 > _2369) || ((_2365 < _2367) || ((_2364 > _2369) || ((_2364 < _2367) || ((_2363 < _2367) || (_2363 > _2369))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2365, cbModelParam._m0[17u].z, fma(_2364, cbModelParam._m0[17u].y, _2363 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2365, cbModelParam._m0[18u].z, fma(_2364, cbModelParam._m0[18u].y, _2363 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2365, cbModelParam._m0[19u].z, fma(_2364, cbModelParam._m0[19u].y, _2363 * cbModelParam._m0[19u].x))), _1517);
            frontier_phi_24_49_ladder = _2487.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2487.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2487.x * cbModelParam._m0[1u].z;
        }
        _1610 = frontier_phi_24_49_ladder_2;
        _1612 = frontier_phi_24_49_ladder_1;
        _1614 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1594 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_613, _614, _615), _1517);
        _1610 = _1594.x * cbModelParam._m0[1u].z;
        _1612 = _1594.y * cbModelParam._m0[1u].z;
        _1614 = _1594.z * cbModelParam._m0[1u].z;
    }
    float _1627 = (((_640 * _590) + _641) * _605) * ((cbModelParam._m0[1u].w * (_1610 - _1508)) + _1508);
    float _1629 = (((_640 * _592) + _641) * _605) * ((cbModelParam._m0[1u].w * (_1612 - _1510)) + _1510);
    float _1631 = (((_640 * _593) + _641) * _605) * ((cbModelParam._m0[1u].w * (_1614 - _1512)) + _1512);
    float _1634 = fma(_1631, cbSceneParam._m0[89u].z, fma(_1629, cbSceneParam._m0[89u].y, _1627 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1631, cbSceneParam._m0[90u].z, fma(_1629, cbSceneParam._m0[90u].y, _1627 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1631, cbSceneParam._m0[91u].z, fma(_1629, cbSceneParam._m0[91u].y, _1627 * cbSceneParam._m0[91u].x));
    float _1674 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1678 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1682 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1686 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1687 = _1674 / _1686;
    float _1688 = _1678 / _1686;
    float _1689 = _1682 / _1686;
    float _1836;
    float _1837;
    float _1838;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1716 = ((uint(_1689 > cbSceneParam._m0[59u].y) + uint(_1689 > cbSceneParam._m0[59u].x)) + uint(_1689 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1717 = _1716 + 43u;
        uint _1725 = _1716 + 44u;
        uint _1733 = _1716 + 45u;
        uint _1741 = _1716 + 46u;
        float _1752 = fma(_1686, cbSceneParam._m0[_1717].w, fma(_1682, cbSceneParam._m0[_1717].z, fma(_1678, cbSceneParam._m0[_1717].y, _1674 * cbSceneParam._m0[_1717].x)));
        float _1756 = fma(_1686, cbSceneParam._m0[_1725].w, fma(_1682, cbSceneParam._m0[_1725].z, fma(_1678, cbSceneParam._m0[_1725].y, _1674 * cbSceneParam._m0[_1725].x)));
        float _1764 = fma(_1686, cbSceneParam._m0[_1741].w, fma(_1682, cbSceneParam._m0[_1741].z, fma(_1678, cbSceneParam._m0[_1741].y, _1674 * cbSceneParam._m0[_1741].x)));
        float _1769 = cbSceneParam._m0[33u].z * _1764;
        float _1771 = cbSceneParam._m0[33u].w * _1764;
        float _1774 = fma(_1686, cbSceneParam._m0[_1733].w, fma(_1682, cbSceneParam._m0[_1733].z, fma(_1678, cbSceneParam._m0[_1733].y, _1674 * cbSceneParam._m0[_1733].x))) / _1764;
        float _1822 = (cbSceneParam._m0[33u].x - sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689))) * cbSceneParam._m0[33u].y;
        float _4092 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1829 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1769 + _1752) / _1764, (_1771 + _1756) / _1764), _1774), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1771 + _1752) / _1764, (_1756 - _1769) / _1764), _1774), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1752 - _1769) / _1764, (_1756 - _1771) / _1764), _1774), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1752 - _1771) / _1764, (_1769 + _1756) / _1764), _1774), 0.0)).x), vec4(0.25)));
        _1836 = 1.0 - (_1829 * cbSceneParam._m0[34u].x);
        _1837 = 1.0 - (_1829 * cbSceneParam._m0[34u].y);
        _1838 = 1.0 - (_1829 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1836 = 1.0;
        _1837 = 1.0;
        _1838 = 1.0;
    }
    float _1902;
    float _1904;
    float _1906;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1890 = fma(_1686, cbSceneParam._m0[63u].w, fma(_1682, cbSceneParam._m0[63u].z, fma(_1678, cbSceneParam._m0[63u].y, _1674 * cbSceneParam._m0[63u].x)));
        float _1891 = fma(_1686, cbSceneParam._m0[60u].w, fma(_1682, cbSceneParam._m0[60u].z, fma(_1678, cbSceneParam._m0[60u].y, _1674 * cbSceneParam._m0[60u].x))) / _1890;
        float _1892 = fma(_1686, cbSceneParam._m0[61u].w, fma(_1682, cbSceneParam._m0[61u].z, fma(_1678, cbSceneParam._m0[61u].y, _1674 * cbSceneParam._m0[61u].x))) / _1890;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1891 >= cbSceneParam._m0[64u].x) && (_1892 >= cbSceneParam._m0[64u].y)) && (_1891 <= cbSceneParam._m0[64u].z)) && (_1892 <= cbSceneParam._m0[64u].w))
        {
            float _2031 = fma(_1686, cbSceneParam._m0[62u].w, fma(_1682, cbSceneParam._m0[62u].z, fma(_1678, cbSceneParam._m0[62u].y, _1674 * cbSceneParam._m0[62u].x))) / _1890;
            float _2035 = isnan(cbSceneParam._m0[41u].w) ? _2031 : (isnan(_2031) ? cbSceneParam._m0[41u].w : max(_2031, cbSceneParam._m0[41u].w));
            float _2078 = (cbSceneParam._m0[33u].x - sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689))) * cbSceneParam._m0[33u].y;
            float _4108 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
            float _2085 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1891, cbSceneParam._m0[33u].w + _1892), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1891, _1892 - cbSceneParam._m0[33u].z), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1891 - cbSceneParam._m0[33u].z, _1892 - cbSceneParam._m0[33u].w), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1891 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1892), _2035), 0.0)).x), vec4(0.25)));
            float _2089 = 1.0 - (_2085 * cbSceneParam._m0[34u].x);
            float _2090 = 1.0 - (_2085 * cbSceneParam._m0[34u].y);
            float _2091 = 1.0 - (_2085 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2090) ? _1837 : (isnan(_1837) ? _2090 : min(_1837, _2090));
            frontier_phi_36_35_ladder_1 = isnan(_2091) ? _1838 : (isnan(_1838) ? _2091 : min(_1838, _2091));
            frontier_phi_36_35_ladder_2 = isnan(_2089) ? _1836 : (isnan(_1836) ? _2089 : min(_1836, _2089));
        }
        else
        {
            frontier_phi_36_35_ladder = _1837;
            frontier_phi_36_35_ladder_1 = _1838;
            frontier_phi_36_35_ladder_2 = _1836;
        }
        _1902 = frontier_phi_36_35_ladder_2;
        _1904 = frontier_phi_36_35_ladder;
        _1906 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1902 = _1836;
        _1904 = _1837;
        _1906 = _1838;
    }
    uvec4 _1911 = floatBitsToUint(cbInstanceData._m0[_564 + 5u]);
    uint _1913 = _1911.x * 14u;
    uint _1914 = _1913 + 13u;
    float _1921 = _605 + (-1.0);
    float _1926 = (cbLight._m0[_1914].x * _1921) + 1.0;
    float _1927 = (cbLight._m0[_1914].y * _1921) + 1.0;
    float _1928 = (cbLight._m0[_1914].z * _1921) + 1.0;
    float _1929 = (cbLight._m0[_1914].w * _1921) + 1.0;
    uint _1930 = _1913 + 5u;
    float _1936 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
    uint _1940 = _1913 + 4u;
    float _1950 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    uint _1954 = _1913 | 1u;
    float _1965 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_434, _435, _436));
    float _1968 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_434, _435, _436));
    float _4144 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _4155 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1973 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * 0.3183098733425140380859375;
    float _1975 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * 0.3183098733425140380859375;
    float _1982 = ((cbLight._m0[_1930].x * _1936) * _1975) + (((cbLight._m0[_1940].x * _1902) * _1950) * _1973);
    float _1983 = ((_1936 * cbLight._m0[_1930].y) * _1975) + (((cbLight._m0[_1940].y * _1904) * _1950) * _1973);
    float _1984 = ((_1936 * cbLight._m0[_1930].z) * _1975) + (((cbLight._m0[_1940].z * _1906) * _1950) * _1973);
    uvec4 _1988 = floatBitsToUint(cbLight._m0[_1913 + 12u]);
    bool _1990 = _1988.x == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_1990)
    {
        _2092 = _1982;
        _2094 = _1983;
        _2096 = _1984;
    }
    else
    {
        uint _2100 = _1913 + 6u;
        float _2116 = (dot(vec3(cbLight._m0[_1913 + 2u].xyz), vec3(_434, _435, _436)) * 0.5) + 0.5;
        float _2117 = _2116 * _2116;
        float _4166 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2118 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2119 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2092 = (((cbLight._m0[_2100].x * 0.3183098733425140380859375) * _2118) * _2119) + _1982;
        _2094 = (((cbLight._m0[_2100].y * 0.3183098733425140380859375) * _2118) * _2119) + _1983;
        _2096 = (((cbLight._m0[_2100].z * 0.3183098733425140380859375) * _2118) * _2119) + _1984;
    }
    bool _2099 = _1988.y == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2099)
    {
        _2154 = _2092;
        _2156 = _2094;
        _2158 = _2096;
    }
    else
    {
        uint _2327 = _1913 + 7u;
        float _2343 = (dot(vec3(cbLight._m0[_1913 + 3u].xyz), vec3(_434, _435, _436)) * 0.5) + 0.5;
        float _2344 = _2343 * _2343;
        float _4182 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2345 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2346 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2154 = (((cbLight._m0[_2327].x * 0.3183098733425140380859375) * _2345) * _2346) + _2092;
        _2156 = (((cbLight._m0[_2327].y * 0.3183098733425140380859375) * _2345) * _2346) + _2094;
        _2158 = (((cbLight._m0[_2327].z * 0.3183098733425140380859375) * _2345) * _2346) + _2096;
    }
    uint _2161 = _1913 + 8u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1913].w)) * _437) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_1913].x + _515;
    float _2177 = cbLight._m0[_1913].y + _516;
    float _2178 = cbLight._m0[_1913].z + _517;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_1913].xyz));
    float _4198 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _4209 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _2190 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _2191 = dot(vec3(_434, _435, _436), vec3(_2183, _2184, _2185));
    float _4220 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2195 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_2183, _2184, _2185));
    float _4231 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2199 = _2175 * _2175;
    float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
    float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * 5.0);
    float _2212 = 0.959999978542327880859375 - _587;
    float _2214 = 0.959999978542327880859375 - _588;
    float _2215 = 0.959999978542327880859375 - _589;
    float _2222 = 1.0 - _2175;
    float _2233 = (0.5 / (((_2190 * ((_2189 * _2222) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2222) + _2175) * _2189))) * _2189;
    float _4242 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
    uint _2249 = _1913 + 9u;
    float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _437) * 0.949999988079071044921875);
    float _2261 = _2260 * _2260;
    float _2262 = cbLight._m0[_1954].x + _515;
    float _2263 = cbLight._m0[_1954].y + _516;
    float _2264 = cbLight._m0[_1954].z + _517;
    float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
    float _2269 = _2268 * _2262;
    float _2270 = _2268 * _2263;
    float _2271 = _2268 * _2264;
    float _2272 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_1954].xyz));
    float _4253 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2276 = dot(vec3(_434, _435, _436), vec3(_2269, _2270, _2271));
    float _4264 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2280 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2269, _2270, _2271));
    float _4275 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2284 = _2261 * _2261;
    float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
    float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0);
    float _2302 = 1.0 - _2261;
    float _2312 = (0.5 / (((_2190 * ((_2275 * _2302) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2302) + _2261) * _2275))) * _2275;
    float _4286 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2314 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
    float _2324 = (((((_2295 * _2212) + _590) * cbLight._m0[_2249].x) * _2314) * _1936) + ((((cbLight._m0[_2161].x * _1902) * ((_2211 * _2212) + _590)) * _2235) * _1950);
    float _2325 = (((((_2295 * _2214) + _592) * cbLight._m0[_2249].y) * _2314) * _1936) + ((((cbLight._m0[_2161].y * _1904) * ((_2211 * _2214) + _592)) * _2235) * _1950);
    float _2326 = (((((_2295 * _2215) + _593) * cbLight._m0[_2249].z) * _2314) * _1936) + ((((cbLight._m0[_2161].z * _1906) * ((_2211 * _2215) + _593)) * _2235) * _1950);
    float _2382;
    float _2384;
    float _2386;
    if (_1990)
    {
        _2382 = _2324;
        _2384 = _2325;
        _2386 = _2326;
    }
    else
    {
        uint _2388 = _1913 + 2u;
        uint _2392 = _1913 + 10u;
        float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2388].w)) * _437) * 0.949999988079071044921875);
        float _2407 = _2406 * _2406;
        float _2408 = cbLight._m0[_2388].x + _515;
        float _2409 = cbLight._m0[_2388].y + _516;
        float _2410 = cbLight._m0[_2388].z + _517;
        float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
        float _2415 = _2414 * _2408;
        float _2416 = _2414 * _2409;
        float _2417 = _2414 * _2410;
        float _2418 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_2388].xyz));
        float _4297 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2422 = dot(vec3(_434, _435, _436), vec3(_2415, _2416, _2417));
        float _4308 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2426 = dot(vec3(cbLight._m0[_2388].xyz), vec3(_2415, _2416, _2417));
        float _4319 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2430 = _2407 * _2407;
        float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
        float _2441 = exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0);
        float _2448 = 1.0 - _2407;
        float _2458 = (0.5 / (((_2190 * ((_2421 * _2448) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2448) + _2407) * _2421))) * _2421;
        float _4330 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2460 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
        float _2461 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2382 = (((((_2441 * _2212) + _590) * cbLight._m0[_2392].x) * _2460) * _2461) + _2324;
        _2384 = (((((_2441 * _2214) + _592) * cbLight._m0[_2392].y) * _2460) * _2461) + _2325;
        _2386 = (((((_2441 * _2215) + _593) * cbLight._m0[_2392].z) * _2460) * _2461) + _2326;
    }
    float _2492;
    float _2494;
    float _2496;
    if (_2099)
    {
        _2492 = _2382;
        _2494 = _2384;
        _2496 = _2386;
    }
    else
    {
        uint _2503 = _1913 + 3u;
        uint _2507 = _1913 + 11u;
        float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _437) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2503].x + _515;
        float _2524 = cbLight._m0[_2503].y + _516;
        float _2525 = cbLight._m0[_2503].z + _517;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_2503].xyz));
        float _4346 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2537 = dot(vec3(_434, _435, _436), vec3(_2530, _2531, _2532));
        float _4357 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2530, _2531, _2532));
        float _4368 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0);
        float _2563 = 1.0 - _2522;
        float _2573 = (0.5 / (((_2190 * ((_2536 * _2563) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2563) + _2522) * _2536))) * _2536;
        float _4379 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2492 = (((((_2556 * _2212) + _590) * cbLight._m0[_2507].x) * _2575) * _2576) + _2382;
        _2494 = (((((_2556 * _2214) + _592) * cbLight._m0[_2507].y) * _2575) * _2576) + _2384;
        _2496 = (((((_2556 * _2215) + _593) * cbLight._m0[_2507].z) * _2575) * _2576) + _2386;
    }
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    if (_1911.y == 0u)
    {
        uvec4 _2597 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2598 = _2597.x;
        uint _2609 = uint((float(_2597.y) * floor(float(uint(cbSceneParam._m0[85u].y * _524) / _2598))) + floor(float(uint(cbSceneParam._m0[85u].x * _523) / _2598)));
        float _2619 = (log2(_1689 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2620 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        uint _2623 = uint(isnan(14.0) ? _2620 : (isnan(_2620) ? 14.0 : min(_2620, 14.0)));
        uvec4 _2628 = texelFetch(g_lightClusterGridBuffer, int(((_2623 << 2u) + (_2609 << 6u)) >> 2u));
        uint _2629 = _2628.x;
        uint _2630 = _2597.z;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((((1u << ((_2630 >> 4u) & 15u)) + 4294967295u) & _2629) == 0u) || ((_2630 & 240u) == 0u))
        {
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
        }
        else
        {
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            uint _2861 = 0u;
            uint _2870;
            bool _2871;
            for (;;)
            {
                _2870 = texelFetch(g_lightClassification, int((((_2623 << 5u) + (_2609 << 9u)) + (_2861 << 2u)) >> 2u)).x;
                _2871 = _2870 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2871)
                {
                    frontier_phi_68_pred = _2860;
                    frontier_phi_68_pred_1 = _2859;
                    frontier_phi_68_pred_2 = _2858;
                    frontier_phi_68_pred_3 = _2856;
                    frontier_phi_68_pred_4 = _2855;
                    frontier_phi_68_pred_5 = _2857;
                }
                else
                {
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    uint _2985;
                    _2979 = _2855;
                    _2980 = _2856;
                    _2981 = _2857;
                    _2982 = _2858;
                    _2983 = _2859;
                    _2984 = _2860;
                    _2985 = _2870;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    for (;;)
                    {
                        uint _2989 = uint(findLSB(_2985)) + (_2861 << 5u);
                        uint _2986 = (_2985 + 4294967295u) & _2985;
                        uint _2991 = _2989 * 48u;
                        vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 3u)).x));
                        uint _3011 = (_2989 * 48u) + 4u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3011)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 3u)).x));
                        uint _3030 = (_2989 * 48u) + 8u;
                        vec3 _3041 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x));
                        float _3045 = _3005.x - _1687;
                        float _3046 = _3005.y - _1688;
                        float _3047 = _3005.z - _1689;
                        float _3048 = dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047));
                        float _3051 = inversesqrt(_3048);
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3055 = dot(vec3(_545, _548, _551), vec3(_3052, _3053, _3054));
                        float _3060 = 1.0 - (_3048 * _3005.w);
                        float _4405 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                        float _3062 = sqrt(_3048) * _3024.w;
                        float _3065 = 1.39999997615814208984375 / (_3062 + 1.39999997615814208984375);
                        float _3066 = _3065 * _3065;
                        float _3069 = ((1.0 - _3066) * _3055) + _3066;
                        float _3072 = _3062 * _3062;
                        float _3076 = ((isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))) * _3061) / ((_3072 * 0.699999988079071044921875) + 1.0);
                        float _3080 = (-0.0) - _1687;
                        float _3081 = (-0.0) - _1688;
                        float _3082 = (-0.0) - _1689;
                        float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                        float _3087 = _3086 * _3080;
                        float _3088 = _3086 * _3081;
                        float _3089 = _3086 * _3082;
                        float _3096 = exp2(log2(1.0 / ((_3072 * 3.5) + 5.0)) * 0.25);
                        float _3097 = 1.0 - _621;
                        float _3104 = sqrt(1.0 - ((1.0 - (_3097 * _3097)) * (1.0 - (_3096 * _3096))));
                        float _3105 = _3104 * _3104;
                        float _3106 = _3105 * _3105;
                        float _3107 = _3087 + _3052;
                        float _3108 = _3088 + _3053;
                        float _3109 = _3089 + _3054;
                        float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                        float _3117 = dot(vec3(_545, _548, _551), vec3(_3087, _3088, _3089));
                        float _4421 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3120 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3121 = dot(vec3(_545, _548, _551), vec3(_3113 * _3107, _3113 * _3108, _3113 * _3109));
                        float _4432 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3128 = ((_3124 * _3124) * (_3106 + (-1.0))) + 1.0;
                        float _3129 = _3065 * _3105;
                        float _3130 = _3129 * _3129;
                        float _3133 = ((1.0 - _3130) * _3055) + _3130;
                        float _4443 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3135 = 1.0 - _3105;
                        float _3145 = (0.5 / (((_3134 * ((_3120 * _3135) + _3105)) + 9.9999999392252902907785028219223e-09) + (((_3134 * _3135) + _3105) * _3120))) * _3134;
                        float _4454 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3156 = (((_3106 * 3.1415927410125732421875) * (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) / ((_3128 * _3128) * ((_3072 * 2.1991131305694580078125) + 3.141590118408203125))) * _3061;
                        _2914 = (_3076 * _3024.x) + _2982;
                        _2915 = (_3076 * _3024.y) + _2983;
                        _2916 = (_3076 * _3024.z) + _2984;
                        _2911 = (_3156 * _3041.x) + _2979;
                        _2912 = (_3156 * _3041.y) + _2980;
                        _2913 = (_3156 * _3041.z) + _2981;
                        if (_2986 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2913;
                            _2982 = _2914;
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2986;
                        }
                    }
                    frontier_phi_68_pred = _2916;
                    frontier_phi_68_pred_1 = _2915;
                    frontier_phi_68_pred_2 = _2914;
                    frontier_phi_68_pred_3 = _2912;
                    frontier_phi_68_pred_4 = _2911;
                    frontier_phi_68_pred_5 = _2913;
                }
                _2722 = frontier_phi_68_pred;
                _2720 = frontier_phi_68_pred_1;
                _2718 = frontier_phi_68_pred_2;
                _2714 = frontier_phi_68_pred_3;
                _2712 = frontier_phi_68_pred_4;
                _2716 = frontier_phi_68_pred_5;
                uint _2862 = _2861 + 1u;
                if (_2862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2855 = _2712;
                    _2856 = _2714;
                    _2857 = _2716;
                    _2858 = _2718;
                    _2859 = _2720;
                    _2860 = _2722;
                    _2861 = _2862;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
        }
        uvec4 _2725 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2726 = _2725.z;
        uint _2728 = (_2726 >> 8u) & 15u;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((4294967295u << _2728) & _2629) == 0u)
        {
            _2823 = _2711;
            _2825 = _2713;
            _2827 = _2715;
            _2829 = _2717;
            _2831 = _2719;
            _2833 = _2721;
        }
        else
        {
            float _2848 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
            float _2849 = _2848 * _1687;
            float _2850 = _2848 * _1688;
            float _2851 = _2848 * _1689;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2728 < ((_2726 >> 12u) & 15u))
            {
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2962 = _2711;
                float _2963 = _2713;
                float _2964 = _2715;
                float _2965 = _2717;
                float _2966 = _2719;
                float _2967 = _2721;
                uint _2968 = _2728;
                uint _2977;
                bool _2978;
                for (;;)
                {
                    _2977 = texelFetch(g_lightClassification, int((((_2623 << 5u) + (_2609 << 9u)) + (_2968 << 2u)) >> 2u)).x;
                    _2978 = _2977 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2978)
                    {
                        frontier_phi_74_pred = _2964;
                        frontier_phi_74_pred_1 = _2963;
                        frontier_phi_74_pred_2 = _2962;
                        frontier_phi_74_pred_3 = _2967;
                        frontier_phi_74_pred_4 = _2966;
                        frontier_phi_74_pred_5 = _2965;
                    }
                    else
                    {
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3174 = _2962;
                        float _3175 = _2963;
                        float _3176 = _2964;
                        float _3177 = _2965;
                        float _3178 = _2966;
                        float _3179 = _2967;
                        uint _3180 = _2977;
                        uint _3181;
                        vec4 _3206;
                        float _3207;
                        vec4 _3222;
                        vec3 _3234;
                        vec4 _3250;
                        vec4 _3266;
                        float _3313;
                        bool _3314;
                        for (;;)
                        {
                            uint _3191 = ((_2968 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3180));
                            _3181 = (_3180 + 4294967295u) & _3180;
                            uint _3193 = _3191 * 40u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            _3207 = _3206.w;
                            uint _3209 = (_3191 * 40u) + 4u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3224 = (_3191 * 40u) + 8u;
                            _3234 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x));
                            uint _3237 = (_3191 * 40u) + 16u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3253 = (_3191 * 40u) + 20u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3269 = (_3191 * 40u) + 24u;
                            vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3288 = (_3191 * 40u) + 28u;
                            vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            _3313 = fma(_1689, _3301.z, fma(_1688, _3301.y, _3301.x * _1687)) + _3301.w;
                            _3314 = !((fma(_1689, _3282.z, fma(_1688, _3282.y, _3282.x * _1687)) + _3282.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3314)
                            {
                                float _3341 = _3206.x - _1687;
                                float _3342 = _3206.y - _1688;
                                float _3343 = _3206.z - _1689;
                                float _3344 = dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343));
                                float _3347 = inversesqrt(_3344);
                                float _3348 = _3347 * _3341;
                                float _3349 = _3347 * _3342;
                                float _3350 = _3347 * _3343;
                                float _3354 = 1.0 - (_3344 / (_3207 * _3207));
                                float _4465 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3359 = sqrt(_3344) * _3222.w;
                                float _3361 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                                float _3362 = _3361 * _3361;
                                float _3365 = ((1.0 - _3362) * dot(vec3(_3348, _3349, _3350), vec3(_545, _548, _551))) + _3362;
                                float _3368 = _3359 * _3359;
                                float _3372 = (fma(_1689, _3250.z, fma(_1688, _3250.y, _3250.x * _1687)) + _3250.w) / _3313;
                                float _3373 = (fma(_1689, _3266.z, fma(_1688, _3266.y, _3266.x * _1687)) + _3266.w) / _3313;
                                float _3377 = 1.0 - dot(vec2(_3372, _3373), vec2(_3372, _3373));
                                float _4481 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3379 = _3378 * (((isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0))) * _3355) / ((_3368 * 0.699999988079071044921875) + 1.0));
                                float _3391 = exp2(log2(1.0 / ((_3368 * 3.5) + 5.0)) * 0.25);
                                float _3392 = 1.0 - _621;
                                float _3399 = sqrt(1.0 - ((1.0 - (_3392 * _3392)) * (1.0 - (_3391 * _3391))));
                                float _3400 = _3399 * _3399;
                                float _3401 = _3400 * _3400;
                                float _3402 = _3348 - _2849;
                                float _3403 = _3349 - _2850;
                                float _3404 = _3350 - _2851;
                                float _3408 = inversesqrt(dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404)));
                                float _3412 = dot(vec3(_545, _548, _551), vec3((-0.0) - _2849, (-0.0) - _2850, (-0.0) - _2851));
                                float _4492 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3416 = dot(vec3(_545, _548, _551), vec3(_3408 * _3402, _3408 * _3403, _3408 * _3404));
                                float _4503 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3423 = ((_3419 * _3419) * (_3401 + (-1.0))) + 1.0;
                                float _3424 = _3361 * _3400;
                                float _3425 = _3424 * _3424;
                                float _3431 = ((1.0 - _3425) * dot(vec3(_545, _548, _551), vec3(_3348, _3349, _3350))) + _3425;
                                float _4514 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3433 = 1.0 - _3400;
                                float _3443 = (0.5 / (((_3432 * ((_3415 * _3433) + _3400)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3400) * _3415))) * _3432;
                                float _4525 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3453 = (_3378 * _3355) * (((_3401 * 3.1415927410125732421875) * (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) / ((_3423 * _3423) * ((_3368 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3453 * _3234.z;
                                frontier_phi_80_pred_1 = _3453 * _3234.y;
                                frontier_phi_80_pred_2 = _3453 * _3234.x;
                                frontier_phi_80_pred_3 = _3379 * _3222.z;
                                frontier_phi_80_pred_4 = _3379 * _3222.y;
                                frontier_phi_80_pred_5 = _3379 * _3222.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3459 = frontier_phi_80_pred;
                            _3458 = frontier_phi_80_pred_1;
                            _3457 = frontier_phi_80_pred_2;
                            _3462 = frontier_phi_80_pred_3;
                            _3461 = frontier_phi_80_pred_4;
                            _3460 = frontier_phi_80_pred_5;
                            _3164 = _3460 + _3177;
                            _3165 = _3461 + _3178;
                            _3166 = _3462 + _3179;
                            _3161 = _3457 + _3174;
                            _3162 = _3458 + _3175;
                            _3163 = _3459 + _3176;
                            if (_3181 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3181;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3163;
                        frontier_phi_74_pred_1 = _3162;
                        frontier_phi_74_pred_2 = _3161;
                        frontier_phi_74_pred_3 = _3166;
                        frontier_phi_74_pred_4 = _3165;
                        frontier_phi_74_pred_5 = _3164;
                    }
                    _2828 = frontier_phi_74_pred;
                    _2826 = frontier_phi_74_pred_1;
                    _2824 = frontier_phi_74_pred_2;
                    _2834 = frontier_phi_74_pred_3;
                    _2832 = frontier_phi_74_pred_4;
                    _2830 = frontier_phi_74_pred_5;
                    uint _2969 = _2968 + 1u;
                    if (_2969 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2962 = _2824;
                        _2963 = _2826;
                        _2964 = _2828;
                        _2965 = _2830;
                        _2966 = _2832;
                        _2967 = _2834;
                        _2968 = _2969;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2832;
                frontier_phi_62_63_ladder_1 = _2830;
                frontier_phi_62_63_ladder_2 = _2828;
                frontier_phi_62_63_ladder_3 = _2834;
                frontier_phi_62_63_ladder_4 = _2826;
                frontier_phi_62_63_ladder_5 = _2824;
            }
            else
            {
                frontier_phi_62_63_ladder = _2719;
                frontier_phi_62_63_ladder_1 = _2717;
                frontier_phi_62_63_ladder_2 = _2715;
                frontier_phi_62_63_ladder_3 = _2721;
                frontier_phi_62_63_ladder_4 = _2713;
                frontier_phi_62_63_ladder_5 = _2711;
            }
            _2823 = frontier_phi_62_63_ladder_5;
            _2825 = frontier_phi_62_63_ladder_4;
            _2827 = frontier_phi_62_63_ladder_2;
            _2829 = frontier_phi_62_63_ladder_1;
            _2831 = frontier_phi_62_63_ladder;
            _2833 = frontier_phi_62_63_ladder_3;
        }
        float _2838 = isnan(1.0) ? _605 : (isnan(_605) ? 1.0 : min(_605, 1.0));
        _2641 = (_2838 * _2829) + _2154;
        _2643 = (_2838 * _2831) + _2156;
        _2645 = (_2838 * _2833) + _2158;
        _2647 = ((_2823 * _590) * _2838) + _2492;
        _2649 = ((_2825 * _592) * _2838) + _2494;
        _2651 = ((_2827 * _593) * _2838) + _2496;
    }
    else
    {
        _2641 = _2154;
        _2643 = _2156;
        _2645 = _2158;
        _2647 = _2492;
        _2649 = _2494;
        _2651 = _2496;
    }
    float _4541 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _4552 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _4563 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _2668 = ((isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2641 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _605))) + ((_2647 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    float _2669 = ((isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2643 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _605))) + ((_2649 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    float _2670 = ((isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2645 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _605))) + ((_2651 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    uint _2674 = _564 + 6u;
    float _2682 = _523 / cbSceneParam._m0[86u].x;
    float _2683 = _524 / cbSceneParam._m0[86u].y;
    vec4 _2697 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2682, _2683, (log2((isnan(cbSceneParam._m0[77u].w) ? _457 : (isnan(_457) ? cbSceneParam._m0[77u].w : min(_457, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2699 = _2697.x;
    float _2700 = _2697.y;
    float _2701 = _2697.z;
    float _2702 = _2697.w;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    if (_457 > cbSceneParam._m0[78u].w)
    {
        float _2736 = isnan(_457) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _457 : min(cbSceneParam._m0[80u].w, _457));
        float _2737 = _2736 / _457;
        float _2748 = _2737 * _508;
        float _2749 = _509 * _2737;
        float _2750 = (-0.0) - _2749;
        float _2751 = _2737 * _510;
        float _2753 = (cbSceneParam._m0[77u].w * _2750) / _2736;
        float _2754 = _2753 + cbSceneParam._m0[79u].w;
        float _2755 = cbSceneParam._m0[79u].w - _2749;
        float _2761 = sqrt(((_2748 * _2748) + (_2749 * _2749)) + (_2751 * _2751));
        float _2764 = (1.0 - (cbSceneParam._m0[77u].w / _2736)) * _2761;
        float _2769 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2771 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2924;
        if (abs((_2750 - _2753) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2924 = ((((_2754 > 0.0) ? exp2(_2769 * _2754) : (2.0 - exp2(_2771 * _2754))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2764;
        }
        else
        {
            float _2884 = 1.0 / cbSceneParam._m0[80u].x;
            float _2885 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : max(_2754, _2755));
            float _2886 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : min(_2754, _2755));
            float _2895 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : min(_2885, 0.0));
            float _2896 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : min(_2886, 0.0));
            _2924 = ((abs(_2761 / _2750) * cbSceneParam._m0[80u].y) * ((((_2895 - _2896) * 2.0) - ((exp2(_2769 * (isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0)))) - exp2(_2769 * (isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))))) * _2884)) - ((exp2(_2771 * _2895) - exp2(_2771 * _2896)) * _2884))) + (_2764 * cbSceneParam._m0[80u].z);
        }
        vec4 _2926 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2682, _2683, 1.0), 0.0);
        float _2935 = exp2((_2924 * (-1.44269502162933349609375)) * (1.0 - _2926.w));
        float _2936 = log2(_2935);
        float _2952 = log2(_2702);
        _2773 = (exp2(_2952 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].x)) * _2926.x) / cbSceneParam._m0[78u].x)) + _2699;
        _2775 = (exp2(_2952 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].y)) * _2926.y) / cbSceneParam._m0[78u].y)) + _2700;
        _2777 = (exp2(_2952 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].z)) * _2926.z) / cbSceneParam._m0[78u].z)) + _2701;
        _2779 = _2935 * _2702;
    }
    else
    {
        _2773 = _2699;
        _2775 = _2700;
        _2777 = _2701;
        _2779 = _2702;
    }
    float _2791 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2792 = _2791 == 3.0;
    float _2793 = log2(_2779);
    float _2800 = exp2(_2793 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0)));
    float _2801 = exp2(_2793 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0)));
    float _2802 = exp2(_2793 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0)));
    float _2811 = (_2791 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2811 * (_2792 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2773)));
    SV_Target.y = _2811 * (_2792 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2775)));
    SV_Target.z = _2811 * (_2792 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2777)));
    SV_Target.w = cbInstanceData._m0[_2674].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2674].w;
}


