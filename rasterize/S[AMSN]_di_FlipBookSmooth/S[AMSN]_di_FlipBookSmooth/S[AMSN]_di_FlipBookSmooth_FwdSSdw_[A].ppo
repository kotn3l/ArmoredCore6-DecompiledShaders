#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1080;
float _3497;
float _3498;
float _3499;
float _3500;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    uint _242 = uint(int(floor(cbMtdParam._m0[10u].z)));
    float _243 = fract(cbMtdParam._m0[10u].z);
    uint _244 = _242 + 1u;
    uint _245 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _248 = float(int(_242 - _245 * (_242 / _245)));
    float _252 = float(int(_244 - _245 * (_244 / _245)));
    float _256 = 1.0 / cbMtdParam._m0[10u].w;
    float _258 = 1.0 / cbMtdParam._m0[11u].x;
    float _259 = fract(TEXCOORD_1.x);
    float _260 = fract(TEXCOORD_1.y);
    float _262 = (_259 + (_248 - cbMtdParam._m0[10u].w * trunc(_248 / cbMtdParam._m0[10u].w))) * _256;
    float _264 = (_260 + floor(_248 / cbMtdParam._m0[10u].w)) * _258;
    float _266 = (_259 + (_252 - cbMtdParam._m0[10u].w * trunc(_252 / cbMtdParam._m0[10u].w))) * _256;
    float _268 = (_260 + floor(_252 / cbMtdParam._m0[10u].w)) * _258;
    vec4 _281 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _266) + cbTextureTilingScale._m0[0u].z, (_268 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _292 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _262) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _264) + cbTextureTilingScale._m0[0u].w));
    float _294 = _292.x;
    float _295 = _292.y;
    float _296 = _292.z;
    float _297 = _292.w;
    float _310 = (((_281.x - _294) * _243) + _294) * cbMtdParam._m0[9u].x;
    float _311 = (((_281.y - _295) * _243) + _295) * cbMtdParam._m0[9u].y;
    float _312 = (((_281.z - _296) * _243) + _296) * cbMtdParam._m0[9u].z;
    vec4 _322 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _324 = _322.x;
    float _347 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _324)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _324))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3509 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _352 = gl_FragCoord.x * 0.125;
    float _354 = gl_FragCoord.y * 0.125;
    vec4 _356 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_352, _354));
    float _364 = float((((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * (((_281.w - _297) * _243) + _297)) * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) >= ((_356.w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _386 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _264) + cbTextureTilingScale._m0[2u].w));
    float _388 = _386.x;
    float _392 = (_388 + cbMtdParam._m0[10u].x) + ((texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _268) + cbTextureTilingScale._m0[2u].w)).x - _388) * _243);
    vec4 _404 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _266) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _268) + cbTextureTilingScale._m0[1u].w));
    float _411 = (_404.x * 2.0) + (-1.0);
    float _413 = (_404.y * 2.0) + (-1.0);
    float _417 = 1.0 - dot(vec2(_411, _413), vec2(_411, _413));
    float _3520 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _419 = sqrt(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)));
    float _422 = fma(_419, _220, fma(_413, _213, _411 * _199));
    float _425 = fma(_419, _221, fma(_413, _214, _411 * _200));
    float _428 = fma(_419, _222, fma(_413, _215, _411 * _201));
    float _432 = inversesqrt(dot(vec3(_422, _425, _428), vec3(_422, _425, _428)));
    vec4 _440 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _262) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _264) + cbTextureTilingScale._m0[1u].w));
    float _446 = (_440.x * 2.0) + (-1.0);
    float _447 = (_440.y * 2.0) + (-1.0);
    float _451 = 1.0 - dot(vec2(_446, _447), vec2(_446, _447));
    float _3531 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _453 = sqrt(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)));
    float _456 = fma(_453, _220, fma(_447, _213, _446 * _199));
    float _459 = fma(_453, _221, fma(_447, _214, _446 * _200));
    float _462 = fma(_453, _222, fma(_447, _215, _446 * _201));
    float _466 = inversesqrt(dot(vec3(_456, _459, _462), vec3(_456, _459, _462)));
    float _467 = _466 * _456;
    float _468 = _466 * _459;
    float _469 = _466 * _462;
    float _478 = (((_432 * _428) - _469) * _243) + _469;
    float _481 = (((((_432 * _422) - _467) * _243) + _467) * 2.0) + (-1.0);
    float _482 = (((((_432 * _425) - _468) * _243) + _468) * 2.0) + (-1.0);
    float _483 = dot(vec2(_481, _482), vec2(_481, _482));
    float _3542 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))));
    float _491 = fma(_488, _220, fma(_482, _213, _481 * _199));
    float _494 = fma(_488, _221, fma(_482, _214, _481 * _200));
    float _497 = fma(_488, _222, fma(_482, _215, _481 * _201));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    float _502 = _501 * _491;
    float _503 = _501 * _494;
    float _504 = _501 * _497;
    float _3553 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _505 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3575 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3586 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3597 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _509 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _523 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _574 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _564);
    float _575 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _564);
    float _576 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _564);
    float _580 = inversesqrt(dot(vec3(_574, _575, _576), vec3(_574, _575, _576)));
    float _581 = _574 * _580;
    float _582 = _575 * _580;
    float _583 = _576 * _580;
    vec4 _584 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_352, _354));
    float _586 = _584.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _761 = sqrt(((_574 * _574) + (_575 * _575)) + (_576 * _576));
        float _767 = (cbMatDynParam._m0[5u].x * _761) + cbMatDynParam._m0[5u].y;
        float _3608 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _772 = (cbMatDynParam._m0[5u].z * _761) + cbMatDynParam._m0[5u].w;
        float _3619 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) - _768)) + _768) < ((_586 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _597 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _598 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _618 = fma(_504, cbSceneParam._m0[5u].z, fma(_503, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _502));
    float _621 = fma(_504, cbSceneParam._m0[6u].z, fma(_503, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _502));
    float _624 = fma(_504, cbSceneParam._m0[7u].z, fma(_503, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _502));
    uint _637 = uint(roundEven(NORMAL.w)) * 13u;
    uint _639 = _637 + 9u;
    uint _640 = _639 + uint(cbMatDynParam._m0[0u].w);
    float _646 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_640].x;
    float _647 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_640].y;
    float _648 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_640].z;
    float _3630 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _652 = 1.0 - _509;
    float _653 = _649 * _652;
    float _654 = _650 * _652;
    float _655 = _651 * _652;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _509;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _509;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _509;
    float _663 = _660 + 0.039999999105930328369140625;
    float _665 = _661 + 0.039999999105930328369140625;
    float _666 = _662 + 0.039999999105930328369140625;
    vec4 _675 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _597, cbSceneParam._m0[86u].y * _598));
    float _678 = _675.x * TEXCOORD_1.w;
    float _679 = dot(vec3(_502, _503, _504), vec3(_581, _582, _583));
    float _682 = _679 * 2.0;
    float _686 = (_682 * _502) - _581;
    float _687 = (_682 * _503) - _582;
    float _688 = (_682 * _504) - _583;
    float _692 = abs(dot(vec3(_581, _582, _583), vec3(_502, _503, _504)));
    float _3663 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _694 = sqrt(_505);
    float _707 = exp2((_694 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_694 * 3.0));
    float _713 = (1.0 - _707) * ((_694 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _714 = _707 * _694;
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1079;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _804 = fma(_750, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742));
        float _808 = fma(_750, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742));
        float _812 = fma(_750, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742));
        float _837 = _742 + _502;
        float _838 = _746 + _503;
        float _839 = _750 + _504;
        float _849 = fma(_839, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837)) - _804;
        float _850 = fma(_839, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837)) - _808;
        float _851 = fma(_839, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837)) - _812;
        float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
        float _868 = ((_855 * _849) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_804 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_855 * _850) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_808 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_855 * _851) / cbModelParam._m0[34u].z) + ((((((_812 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        float _907 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_873.x + (-0.5));
        float _909 = _907 * (_873.y + (-0.5));
        float _910 = _907 * (_873.z + (-0.5));
        float _917 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_880.x + (-0.5));
        float _919 = _917 * (_880.y + (-0.5));
        float _920 = _917 * (_880.z + (-0.5));
        float _927 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_887.x + (-0.5));
        float _929 = _927 * (_887.y + (-0.5));
        float _930 = _927 * (_887.z + (-0.5));
        float _937 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_894.x + (-0.5));
        float _939 = _937 * (_894.y + (-0.5));
        float _940 = _937 * (_894.z + (-0.5));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = _908 * 0.5;
        float _945 = _918 * 0.5;
        float _946 = _928 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _961 = (dot(vec3(_502, _503, _504), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _971 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3711 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_973 + 1.0))) + _978) * _941;
        float _988 = _909 * 0.5;
        float _989 = _919 * 0.5;
        float _990 = _929 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_502, _503, _504), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3744 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1015 + 1.0))) + _1020) * _942;
        float _1030 = _910 * 0.5;
        float _1031 = _920 * 0.5;
        float _1032 = _930 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_502, _503, _504), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3777 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1057 + 1.0))) + _1062) * _943;
        _1079 = _910;
        _1081 = _909;
        _1082 = _908;
        _1083 = _920;
        _1084 = _919;
        _1085 = _918;
        _1086 = _930;
        _1087 = _929;
        _1088 = _928;
        _1089 = _943;
        _1090 = _942;
        _1091 = _941;
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
    }
    else
    {
        _1079 = _1080;
        _1081 = _1080;
        _1082 = _1080;
        _1083 = _1080;
        _1084 = _1080;
        _1085 = _1080;
        _1086 = _1080;
        _1087 = _1080;
        _1088 = _1080;
        _1089 = _1080;
        _1090 = _1080;
        _1091 = _1080;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1123 = fma(_750, cbModelParam._m0[30u].z, fma(_746, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _742));
        float _1127 = fma(_750, cbModelParam._m0[31u].z, fma(_746, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _742));
        float _1131 = fma(_750, cbModelParam._m0[32u].z, fma(_746, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _742));
        float _1154 = _742 + _502;
        float _1155 = _746 + _503;
        float _1156 = _750 + _504;
        float _1166 = fma(_1156, cbModelParam._m0[30u].z, fma(_1155, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154)) - _1123;
        float _1167 = fma(_1156, cbModelParam._m0[31u].z, fma(_1155, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154)) - _1127;
        float _1168 = fma(_1156, cbModelParam._m0[32u].z, fma(_1155, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154)) - _1131;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1123 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1127 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[35u].z) + ((((((_1131 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1222 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1189.x + (-0.5));
        float _1224 = _1222 * (_1189.y + (-0.5));
        float _1225 = _1222 * (_1189.z + (-0.5));
        float _1232 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1196.x + (-0.5));
        float _1234 = _1232 * (_1196.y + (-0.5));
        float _1235 = _1232 * (_1196.z + (-0.5));
        float _1242 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1203.x + (-0.5));
        float _1244 = _1242 * (_1203.y + (-0.5));
        float _1245 = _1242 * (_1203.z + (-0.5));
        float _1252 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1210.x + (-0.5));
        float _1254 = _1252 * (_1210.y + (-0.5));
        float _1255 = _1252 * (_1210.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_502, _503, _504), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3840 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1286 + 1.0))) + _1291) * _1256;
        float _1301 = _1224 * 0.5;
        float _1302 = _1234 * 0.5;
        float _1303 = _1244 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_502, _503, _504), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3873 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1328 + 1.0))) + _1333) * _1257;
        float _1343 = _1225 * 0.5;
        float _1344 = _1235 * 0.5;
        float _1345 = _1245 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_502, _503, _504), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3906 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1370 + 1.0))) + _1375) * _1258;
        _1392 = _1225;
        _1393 = _1224;
        _1394 = _1223;
        _1395 = _1235;
        _1396 = _1234;
        _1397 = _1233;
        _1398 = _1245;
        _1399 = _1244;
        _1400 = _1243;
        _1401 = _1258;
        _1402 = _1257;
        _1403 = _1256;
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1080;
        _1393 = _1080;
        _1394 = _1080;
        _1395 = _1080;
        _1396 = _1080;
        _1397 = _1080;
        _1398 = _1080;
        _1399 = _1080;
        _1400 = _1080;
        _1401 = _1080;
        _1402 = _1080;
        _1403 = _1080;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1092)) + _1092;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1093)) + _1093;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1094)) + _1094;
    float _1439 = fma(_1418, cbSceneParam._m0[89u].z, fma(_1417, cbSceneParam._m0[89u].y, _1416 * cbSceneParam._m0[89u].x));
    float _1442 = fma(_1418, cbSceneParam._m0[90u].z, fma(_1417, cbSceneParam._m0[90u].y, _1416 * cbSceneParam._m0[90u].x));
    float _1445 = fma(_1418, cbSceneParam._m0[91u].z, fma(_1417, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1416));
    float _1460 = _686 * 0.5;
    float _1461 = _687 * 0.5;
    float _1462 = _688 * 0.5;
    float _1463 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1466 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1469 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1503;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1476 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1079, _1083, _1086, _1089));
        float _1480 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1484 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1491 = dot(vec4(cbModelParam._m0[39u]), vec4(_1460, _1461, _1462, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1514;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1505 = dot(vec4(cbModelParam._m0[40u]), vec4(_1460, _1461, _1462, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1518 = (_1514 * cbModelParam._m0[1u].x) + (_1503 * (1.0 - cbModelParam._m0[1u].x));
    float _1528 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _505);
    float _1529 = isnan(_1528) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1528 : min(cbModelParam._m0[25u].z, _1528));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1578 = fma(_750, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _742)) + cbModelParam._m0[13u].w;
        float _1582 = fma(_750, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _742)) + cbModelParam._m0[14u].w;
        float _1586 = fma(_750, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _742)) + cbModelParam._m0[15u].w;
        float _1589 = fma(_688, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _686));
        float _1592 = fma(_688, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _686));
        float _1595 = fma(_688, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _686));
        float _1623;
        if (_1589 > 0.0)
        {
            _1623 = abs((1.0 - _1578) / _1589);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1578 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1623 = frontier_phi_19_17_ladder;
        }
        float _1851;
        if (_1592 > 0.0)
        {
            _1851 = abs((1.0 - _1582) / _1592);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1582 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1851 = frontier_phi_28_24_ladder;
        }
        float _2108;
        if (_1595 > 0.0)
        {
            _2108 = abs((1.0 - _1586) / _1595);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1586 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2108 = frontier_phi_40_35_ladder;
        }
        float _2110 = isnan(_1851) ? _1623 : (isnan(_1623) ? _1851 : min(_1623, _1851));
        float _2111 = isnan(_2108) ? _2110 : (isnan(_2110) ? _2108 : min(_2110, _2108));
        float _2115 = (_2111 * _1589) + _1578;
        float _2116 = (_2111 * _1592) + _1582;
        float _2117 = (_2111 * _1595) + _1586;
        float _2118 = _2111 * 9.9999997473787516355514526367188e-05;
        float _2120 = (-1.0) - _2118;
        float _2122 = _2118 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2117 > _2122) || ((_2117 < _2120) || ((_2116 > _2122) || ((_2116 < _2120) || ((_2115 < _2120) || (_2115 > _2122))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2245 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2117, cbModelParam._m0[9u].z, fma(_2116, cbModelParam._m0[9u].y, _2115 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2117, cbModelParam._m0[10u].z, fma(_2116, cbModelParam._m0[10u].y, _2115 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2117, cbModelParam._m0[11u].z, fma(_2116, cbModelParam._m0[11u].y, _2115 * cbModelParam._m0[11u].x))), _1529);
            frontier_phi_18_40_ladder = _2245.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2245.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2245.x * cbModelParam._m0[1u].y;
        }
        _1611 = frontier_phi_18_40_ladder_2;
        _1613 = frontier_phi_18_40_ladder_1;
        _1615 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_686, _687, _688), _1529);
        _1611 = _1599.x * cbModelParam._m0[1u].y;
        _1613 = _1599.y * cbModelParam._m0[1u].y;
        _1615 = _1599.z * cbModelParam._m0[1u].y;
    }
    float _1619 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _505);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1619 : min(cbModelParam._m0[25u].w, _1619));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1677 = fma(_750, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _742)) + cbModelParam._m0[21u].w;
        float _1681 = fma(_750, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _742)) + cbModelParam._m0[22u].w;
        float _1685 = fma(_750, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _742)) + cbModelParam._m0[23u].w;
        float _1688 = fma(_688, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _686));
        float _1691 = fma(_688, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _686));
        float _1694 = fma(_688, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _686));
        float _1856;
        if (_1688 > 0.0)
        {
            _1856 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1856 = frontier_phi_30_26_ladder;
        }
        float _2135;
        if (_1691 > 0.0)
        {
            _2135 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2135 = frontier_phi_42_37_ladder;
        }
        float _2348;
        if (_1694 > 0.0)
        {
            _2348 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2348 = frontier_phi_51_48_ladder;
        }
        float _2350 = isnan(_2135) ? _1856 : (isnan(_1856) ? _2135 : min(_1856, _2135));
        float _2351 = isnan(_2348) ? _2350 : (isnan(_2350) ? _2348 : min(_2350, _2348));
        float _2355 = (_2351 * _1688) + _1677;
        float _2356 = (_2351 * _1691) + _1681;
        float _2357 = (_2351 * _1694) + _1685;
        float _2358 = _2351 * 9.9999997473787516355514526367188e-05;
        float _2359 = (-1.0) - _2358;
        float _2361 = _2358 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2357 > _2361) || ((_2357 < _2359) || ((_2356 > _2361) || ((_2356 < _2359) || ((_2355 < _2359) || (_2355 > _2361))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2357, cbModelParam._m0[17u].z, fma(_2356, cbModelParam._m0[17u].y, _2355 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2357, cbModelParam._m0[18u].z, fma(_2356, cbModelParam._m0[18u].y, _2355 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2357, cbModelParam._m0[19u].z, fma(_2356, cbModelParam._m0[19u].y, _2355 * cbModelParam._m0[19u].x))), _1620);
            frontier_phi_27_51_ladder = _2558.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2558.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2558.x * cbModelParam._m0[1u].z;
        }
        _1713 = frontier_phi_27_51_ladder_2;
        _1715 = frontier_phi_27_51_ladder_1;
        _1717 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1697 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_686, _687, _688), _1620);
        _1713 = _1697.x * cbModelParam._m0[1u].z;
        _1715 = _1697.y * cbModelParam._m0[1u].z;
        _1717 = _1697.z * cbModelParam._m0[1u].z;
    }
    float _1730 = (((_713 * _663) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1713 - _1611)) + _1611);
    float _1732 = (((_713 * _665) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1715 - _1613)) + _1613);
    float _1734 = (((_713 * _666) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1717 - _1615)) + _1615);
    float _1737 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1732, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1732, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1732, cbSceneParam._m0[91u].y, _1730 * cbSceneParam._m0[91u].x));
    vec4 _1751 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_597, _598));
    float _1753 = _1751.w;
    float _1765 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1753);
    float _1766 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1753);
    float _1767 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1753);
    uvec4 _1771 = floatBitsToUint(cbInstanceData._m0[_637 + 5u]);
    uint _1773 = _1771.x * 14u;
    uint _1774 = _1773 + 13u;
    float _1781 = _678 + (-1.0);
    float _1786 = (cbLight._m0[_1774].x * _1781) + 1.0;
    float _1787 = (cbLight._m0[_1774].y * _1781) + 1.0;
    float _1788 = (cbLight._m0[_1774].z * _1781) + 1.0;
    float _1789 = (cbLight._m0[_1774].w * _1781) + 1.0;
    uint _1790 = _1773 + 5u;
    float _1796 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    uint _1800 = _1773 + 4u;
    float _1810 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
    uint _1814 = _1773 | 1u;
    float _1825 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_502, _503, _504));
    float _1828 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_502, _503, _504));
    float _4042 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _4053 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1833 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.3183098733425140380859375;
    float _1835 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1842 = ((cbLight._m0[_1790].x * _1796) * _1835) + (((cbLight._m0[_1800].x * _1765) * _1810) * _1833);
    float _1843 = ((_1796 * cbLight._m0[_1790].y) * _1835) + (((cbLight._m0[_1800].y * _1766) * _1810) * _1833);
    float _1844 = ((_1796 * cbLight._m0[_1790].z) * _1835) + (((cbLight._m0[_1800].z * _1767) * _1810) * _1833);
    uvec4 _1848 = floatBitsToUint(cbLight._m0[_1773 + 12u]);
    bool _1850 = _1848.x == 0u;
    float _1861;
    float _1863;
    float _1865;
    if (_1850)
    {
        _1861 = _1842;
        _1863 = _1843;
        _1865 = _1844;
    }
    else
    {
        uint _1869 = _1773 + 6u;
        float _1885 = (dot(vec3(cbLight._m0[_1773 + 2u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _1886 = _1885 * _1885;
        float _4064 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1888 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _1861 = (((cbLight._m0[_1869].x * 0.3183098733425140380859375) * _1887) * _1888) + _1842;
        _1863 = (((cbLight._m0[_1869].y * 0.3183098733425140380859375) * _1887) * _1888) + _1843;
        _1865 = (((cbLight._m0[_1869].z * 0.3183098733425140380859375) * _1887) * _1888) + _1844;
    }
    bool _1868 = _1848.y == 0u;
    float _1906;
    float _1908;
    float _1910;
    if (_1868)
    {
        _1906 = _1861;
        _1908 = _1863;
        _1910 = _1865;
    }
    else
    {
        uint _2079 = _1773 + 7u;
        float _2095 = (dot(vec3(cbLight._m0[_1773 + 3u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _2096 = _2095 * _2095;
        float _4080 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2097 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2098 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _1906 = (((cbLight._m0[_2079].x * 0.3183098733425140380859375) * _2097) * _2098) + _1861;
        _1908 = (((cbLight._m0[_2079].y * 0.3183098733425140380859375) * _2097) * _2098) + _1863;
        _1910 = (((cbLight._m0[_2079].z * 0.3183098733425140380859375) * _2097) * _2098) + _1865;
    }
    uint _1913 = _1773 + 8u;
    float _1926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1773].w)) * _505) * 0.949999988079071044921875);
    float _1927 = _1926 * _1926;
    float _1928 = cbLight._m0[_1773].x + _581;
    float _1929 = cbLight._m0[_1773].y + _582;
    float _1930 = cbLight._m0[_1773].z + _583;
    float _1934 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
    float _1935 = _1934 * _1928;
    float _1936 = _1934 * _1929;
    float _1937 = _1934 * _1930;
    float _1938 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1773].xyz));
    float _4096 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _1942 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _1943 = dot(vec3(_502, _503, _504), vec3(_1935, _1936, _1937));
    float _4118 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1946 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1947 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1935, _1936, _1937));
    float _4129 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1951 = _1927 * _1927;
    float _1955 = ((_1946 * _1946) * (_1951 + (-1.0))) + 1.0;
    float _1963 = exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0);
    float _1964 = 0.959999978542327880859375 - _660;
    float _1966 = 0.959999978542327880859375 - _661;
    float _1967 = 0.959999978542327880859375 - _662;
    float _1974 = 1.0 - _1927;
    float _1985 = (0.5 / (((_1942 * ((_1941 * _1974) + _1927)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _1974) + _1927) * _1941))) * _1941;
    float _4140 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1987 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1951 / ((_1955 * _1955) * 3.141590118408203125));
    uint _2001 = _1773 + 9u;
    float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1814].w)) * _505) * 0.949999988079071044921875);
    float _2013 = _2012 * _2012;
    float _2014 = cbLight._m0[_1814].x + _581;
    float _2015 = cbLight._m0[_1814].y + _582;
    float _2016 = cbLight._m0[_1814].z + _583;
    float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
    float _2021 = _2020 * _2014;
    float _2022 = _2020 * _2015;
    float _2023 = _2020 * _2016;
    float _2024 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1814].xyz));
    float _4151 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2028 = dot(vec3(_502, _503, _504), vec3(_2021, _2022, _2023));
    float _4162 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2032 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_2021, _2022, _2023));
    float _4173 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2036 = _2013 * _2013;
    float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
    float _2047 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
    float _2054 = 1.0 - _2013;
    float _2064 = (0.5 / (((_1942 * ((_2027 * _2054) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2054) + _2013) * _2027))) * _2027;
    float _4184 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2066 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
    float _2076 = (((((_2047 * _1964) + _663) * cbLight._m0[_2001].x) * _2066) * _1796) + ((((cbLight._m0[_1913].x * _1765) * ((_1963 * _1964) + _663)) * _1987) * _1810);
    float _2077 = (((((_2047 * _1966) + _665) * cbLight._m0[_2001].y) * _2066) * _1796) + ((((cbLight._m0[_1913].y * _1766) * ((_1963 * _1966) + _665)) * _1987) * _1810);
    float _2078 = (((((_2047 * _1967) + _666) * cbLight._m0[_2001].z) * _2066) * _1796) + ((((cbLight._m0[_1913].z * _1767) * ((_1963 * _1967) + _666)) * _1987) * _1810);
    float _2140;
    float _2142;
    float _2144;
    if (_1850)
    {
        _2140 = _2076;
        _2142 = _2077;
        _2144 = _2078;
    }
    else
    {
        uint _2146 = _1773 + 2u;
        uint _2150 = _1773 + 10u;
        float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _505) * 0.949999988079071044921875);
        float _2165 = _2164 * _2164;
        float _2166 = cbLight._m0[_2146].x + _581;
        float _2167 = cbLight._m0[_2146].y + _582;
        float _2168 = cbLight._m0[_2146].z + _583;
        float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
        float _2173 = _2172 * _2166;
        float _2174 = _2172 * _2167;
        float _2175 = _2172 * _2168;
        float _2176 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2146].xyz));
        float _4195 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2180 = dot(vec3(_502, _503, _504), vec3(_2173, _2174, _2175));
        float _4206 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2183 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2184 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2173, _2174, _2175));
        float _4217 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2188 = _2165 * _2165;
        float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
        float _2199 = exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0);
        float _2206 = 1.0 - _2165;
        float _2216 = (0.5 / (((_1942 * ((_2179 * _2206) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2206) + _2165) * _2179))) * _2179;
        float _4228 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2218 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
        float _2219 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _2140 = (((((_2199 * _1964) + _663) * cbLight._m0[_2150].x) * _2218) * _2219) + _2076;
        _2142 = (((((_2199 * _1966) + _665) * cbLight._m0[_2150].y) * _2218) * _2219) + _2077;
        _2144 = (((((_2199 * _1967) + _666) * cbLight._m0[_2150].z) * _2218) * _2219) + _2078;
    }
    float _2254;
    float _2256;
    float _2258;
    if (_1868)
    {
        _2254 = _2140;
        _2256 = _2142;
        _2258 = _2144;
    }
    else
    {
        uint _2265 = _1773 + 3u;
        uint _2269 = _1773 + 11u;
        float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _505) * 0.949999988079071044921875);
        float _2284 = _2283 * _2283;
        float _2285 = cbLight._m0[_2265].x + _581;
        float _2286 = cbLight._m0[_2265].y + _582;
        float _2287 = cbLight._m0[_2265].z + _583;
        float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
        float _2292 = _2291 * _2285;
        float _2293 = _2291 * _2286;
        float _2294 = _2291 * _2287;
        float _2295 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2265].xyz));
        float _4244 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2299 = dot(vec3(_502, _503, _504), vec3(_2292, _2293, _2294));
        float _4255 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2303 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2292, _2293, _2294));
        float _4266 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2307 = _2284 * _2284;
        float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
        float _2318 = exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0);
        float _2325 = 1.0 - _2284;
        float _2335 = (0.5 / (((_1942 * ((_2298 * _2325) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2325) + _2284) * _2298))) * _2298;
        float _4277 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2337 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
        float _2338 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2254 = (((((_2318 * _1964) + _663) * cbLight._m0[_2269].x) * _2337) * _2338) + _2140;
        _2256 = (((((_2318 * _1966) + _665) * cbLight._m0[_2269].y) * _2337) * _2338) + _2142;
        _2258 = (((((_2318 * _1967) + _666) * cbLight._m0[_2269].z) * _2337) * _2338) + _2144;
    }
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    if (_1771.y == 0u)
    {
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2413;
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2413;
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2413;
        uvec4 _2428 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2429 = _2428.x;
        uint _2440 = uint((float(_2428.y) * floor(float(uint(cbSceneParam._m0[85u].y * _598) / _2429))) + floor(float(uint(cbSceneParam._m0[85u].x * _597) / _2429)));
        float _2450 = (log2(_2416 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2451 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        uint _2454 = uint(isnan(14.0) ? _2451 : (isnan(_2451) ? 14.0 : min(_2451, 14.0)));
        uvec4 _2459 = texelFetch(g_lightClusterGridBuffer, int(((_2454 << 2u) + (_2440 << 6u)) >> 2u));
        uint _2460 = _2459.x;
        uint _2461 = _2428.z;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        if (((((1u << ((_2461 >> 4u) & 15u)) + 4294967295u) & _2460) == 0u) || ((_2461 & 240u) == 0u))
        {
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
        }
        else
        {
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            uint _2721 = 0u;
            uint _2730;
            bool _2731;
            for (;;)
            {
                _2730 = texelFetch(g_lightClassification, int((((_2454 << 5u) + (_2440 << 9u)) + (_2721 << 2u)) >> 2u)).x;
                _2731 = _2730 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2731)
                {
                    frontier_phi_68_pred = _2717;
                    frontier_phi_68_pred_1 = _2720;
                    frontier_phi_68_pred_2 = _2719;
                    frontier_phi_68_pred_3 = _2718;
                    frontier_phi_68_pred_4 = _2716;
                    frontier_phi_68_pred_5 = _2715;
                }
                else
                {
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    uint _2866;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2730;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    for (;;)
                    {
                        uint _2870 = uint(findLSB(_2866)) + (_2721 << 5u);
                        uint _2867 = (_2866 + 4294967295u) & _2866;
                        uint _2872 = _2870 * 48u;
                        vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 3u)).x));
                        uint _2892 = (_2870 * 48u) + 4u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2892)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 3u)).x));
                        uint _2911 = (_2870 * 48u) + 8u;
                        vec3 _2922 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x));
                        float _2926 = _2886.x - _2414;
                        float _2927 = _2886.y - _2415;
                        float _2928 = _2886.z - _2416;
                        float _2929 = dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928));
                        float _2932 = inversesqrt(_2929);
                        float _2933 = _2932 * _2926;
                        float _2934 = _2932 * _2927;
                        float _2935 = _2932 * _2928;
                        float _2936 = dot(vec3(_618, _621, _624), vec3(_2933, _2934, _2935));
                        float _2941 = 1.0 - (_2929 * _2886.w);
                        float _4303 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2942 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _2943 = sqrt(_2929) * _2905.w;
                        float _2946 = 1.39999997615814208984375 / (_2943 + 1.39999997615814208984375);
                        float _2947 = _2946 * _2946;
                        float _2950 = ((1.0 - _2947) * _2936) + _2947;
                        float _2953 = _2943 * _2943;
                        float _2957 = ((isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0))) * _2942) / ((_2953 * 0.699999988079071044921875) + 1.0);
                        float _2961 = (-0.0) - _2414;
                        float _2962 = (-0.0) - _2415;
                        float _2963 = (-0.0) - _2416;
                        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
                        float _2968 = _2967 * _2961;
                        float _2969 = _2967 * _2962;
                        float _2970 = _2967 * _2963;
                        float _2978 = exp2(log2(1.0 / ((_2953 * 3.5) + 5.0)) * 0.25);
                        float _2979 = 1.0 - _694;
                        float _2986 = sqrt(1.0 - ((1.0 - (_2979 * _2979)) * (1.0 - (_2978 * _2978))));
                        float _2987 = _2986 * _2986;
                        float _2988 = _2987 * _2987;
                        float _2989 = _2968 + _2933;
                        float _2990 = _2969 + _2934;
                        float _2991 = _2970 + _2935;
                        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
                        float _2999 = dot(vec3(_618, _621, _624), vec3(_2968, _2969, _2970));
                        float _4319 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3002 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3003 = dot(vec3(_618, _621, _624), vec3(_2995 * _2989, _2995 * _2990, _2995 * _2991));
                        float _4330 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3006 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3010 = ((_3006 * _3006) * (_2988 + (-1.0))) + 1.0;
                        float _3011 = _2946 * _2987;
                        float _3012 = _3011 * _3011;
                        float _3015 = ((1.0 - _3012) * _2936) + _3012;
                        float _4341 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3016 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3017 = 1.0 - _2987;
                        float _3027 = (0.5 / (((_3016 * ((_3002 * _3017) + _2987)) + 9.9999999392252902907785028219223e-09) + (((_3016 * _3017) + _2987) * _3002))) * _3016;
                        float _4352 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3038 = (((_2988 * 3.1415927410125732421875) * (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) / ((_3010 * _3010) * ((_2953 * 2.1991131305694580078125) + 3.141590118408203125))) * _2942;
                        _2790 = (_2957 * _2905.x) + _2863;
                        _2791 = (_2957 * _2905.y) + _2864;
                        _2792 = (_2957 * _2905.z) + _2865;
                        _2787 = (_3038 * _2922.x) + _2860;
                        _2788 = (_3038 * _2922.y) + _2861;
                        _2789 = (_3038 * _2922.z) + _2862;
                        if (_2867 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2791;
                            _2865 = _2792;
                            _2866 = _2867;
                        }
                    }
                    frontier_phi_68_pred = _2789;
                    frontier_phi_68_pred_1 = _2792;
                    frontier_phi_68_pred_2 = _2791;
                    frontier_phi_68_pred_3 = _2790;
                    frontier_phi_68_pred_4 = _2788;
                    frontier_phi_68_pred_5 = _2787;
                }
                _2568 = frontier_phi_68_pred;
                _2574 = frontier_phi_68_pred_1;
                _2572 = frontier_phi_68_pred_2;
                _2570 = frontier_phi_68_pred_3;
                _2566 = frontier_phi_68_pred_4;
                _2564 = frontier_phi_68_pred_5;
                uint _2722 = _2721 + 1u;
                if (_2722 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2715 = _2564;
                    _2716 = _2566;
                    _2717 = _2568;
                    _2718 = _2570;
                    _2719 = _2572;
                    _2720 = _2574;
                    _2721 = _2722;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
        }
        uvec4 _2577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2578 = _2577.z;
        uint _2580 = (_2578 >> 8u) & 15u;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((4294967295u << _2580) & _2460) == 0u)
        {
            _2683 = _2563;
            _2685 = _2565;
            _2687 = _2567;
            _2689 = _2569;
            _2691 = _2571;
            _2693 = _2573;
        }
        else
        {
            float _2708 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
            float _2709 = _2708 * _2414;
            float _2710 = _2708 * _2415;
            float _2711 = _2708 * _2416;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2580 < ((_2578 >> 12u) & 15u))
            {
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2843 = _2563;
                float _2844 = _2565;
                float _2845 = _2567;
                float _2846 = _2569;
                float _2847 = _2571;
                float _2848 = _2573;
                uint _2849 = _2580;
                uint _2858;
                bool _2859;
                for (;;)
                {
                    _2858 = texelFetch(g_lightClassification, int((((_2454 << 5u) + (_2440 << 9u)) + (_2849 << 2u)) >> 2u)).x;
                    _2859 = _2858 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2859)
                    {
                        frontier_phi_79_pred = _2848;
                        frontier_phi_79_pred_1 = _2847;
                        frontier_phi_79_pred_2 = _2846;
                        frontier_phi_79_pred_3 = _2845;
                        frontier_phi_79_pred_4 = _2844;
                        frontier_phi_79_pred_5 = _2843;
                    }
                    else
                    {
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3065 = _2843;
                        float _3066 = _2844;
                        float _3067 = _2845;
                        float _3068 = _2846;
                        float _3069 = _2847;
                        float _3070 = _2848;
                        uint _3071 = _2858;
                        uint _3072;
                        vec4 _3097;
                        float _3098;
                        vec4 _3113;
                        vec3 _3125;
                        vec4 _3141;
                        vec4 _3157;
                        float _3204;
                        bool _3205;
                        for (;;)
                        {
                            uint _3082 = ((_2849 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3071));
                            _3072 = (_3071 + 4294967295u) & _3071;
                            uint _3084 = _3082 * 40u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3098 = _3097.w;
                            uint _3100 = (_3082 * 40u) + 4u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3115 = (_3082 * 40u) + 8u;
                            _3125 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x));
                            uint _3128 = (_3082 * 40u) + 16u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3144 = (_3082 * 40u) + 20u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3160 = (_3082 * 40u) + 24u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3179 = (_3082 * 40u) + 28u;
                            vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            _3204 = fma(_2416, _3192.z, fma(_2415, _3192.y, _3192.x * _2414)) + _3192.w;
                            _3205 = !((fma(_2416, _3173.z, fma(_2415, _3173.y, _3173.x * _2414)) + _3173.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3205)
                            {
                                float _3232 = _3097.x - _2414;
                                float _3233 = _3097.y - _2415;
                                float _3234 = _3097.z - _2416;
                                float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                                float _3238 = inversesqrt(_3235);
                                float _3239 = _3238 * _3232;
                                float _3240 = _3238 * _3233;
                                float _3241 = _3238 * _3234;
                                float _3245 = 1.0 - (_3235 / (_3098 * _3098));
                                float _4363 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3250 = sqrt(_3235) * _3113.w;
                                float _3252 = 1.39999997615814208984375 / (_3250 + 1.39999997615814208984375);
                                float _3253 = _3252 * _3252;
                                float _3256 = ((1.0 - _3253) * dot(vec3(_3239, _3240, _3241), vec3(_618, _621, _624))) + _3253;
                                float _3259 = _3250 * _3250;
                                float _3263 = (fma(_2416, _3141.z, fma(_2415, _3141.y, _3141.x * _2414)) + _3141.w) / _3204;
                                float _3264 = (fma(_2416, _3157.z, fma(_2415, _3157.y, _3157.x * _2414)) + _3157.w) / _3204;
                                float _3268 = 1.0 - dot(vec2(_3263, _3264), vec2(_3263, _3264));
                                float _4379 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3270 = _3269 * (((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3246) / ((_3259 * 0.699999988079071044921875) + 1.0));
                                float _3282 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                                float _3283 = 1.0 - _694;
                                float _3290 = sqrt(1.0 - ((1.0 - (_3283 * _3283)) * (1.0 - (_3282 * _3282))));
                                float _3291 = _3290 * _3290;
                                float _3292 = _3291 * _3291;
                                float _3293 = _3239 - _2709;
                                float _3294 = _3240 - _2710;
                                float _3295 = _3241 - _2711;
                                float _3299 = inversesqrt(dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295)));
                                float _3303 = dot(vec3(_618, _621, _624), vec3((-0.0) - _2709, (-0.0) - _2710, (-0.0) - _2711));
                                float _4390 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3306 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3307 = dot(vec3(_618, _621, _624), vec3(_3299 * _3293, _3299 * _3294, _3299 * _3295));
                                float _4401 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3310 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3314 = ((_3310 * _3310) * (_3292 + (-1.0))) + 1.0;
                                float _3315 = _3252 * _3291;
                                float _3316 = _3315 * _3315;
                                float _3322 = ((1.0 - _3316) * dot(vec3(_618, _621, _624), vec3(_3239, _3240, _3241))) + _3316;
                                float _4412 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3324 = 1.0 - _3291;
                                float _3334 = (0.5 / (((_3323 * ((_3306 * _3324) + _3291)) + 9.9999999392252902907785028219223e-09) + (((_3323 * _3324) + _3291) * _3306))) * _3323;
                                float _4423 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3344 = (_3269 * _3246) * (((_3292 * 3.1415927410125732421875) * (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) / ((_3314 * _3314) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3270 * _3113.z;
                                frontier_phi_85_pred_1 = _3270 * _3113.y;
                                frontier_phi_85_pred_2 = _3270 * _3113.x;
                                frontier_phi_85_pred_3 = _3344 * _3125.z;
                                frontier_phi_85_pred_4 = _3344 * _3125.y;
                                frontier_phi_85_pred_5 = _3344 * _3125.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3353 = frontier_phi_85_pred;
                            _3352 = frontier_phi_85_pred_1;
                            _3351 = frontier_phi_85_pred_2;
                            _3350 = frontier_phi_85_pred_3;
                            _3349 = frontier_phi_85_pred_4;
                            _3348 = frontier_phi_85_pred_5;
                            _3055 = _3351 + _3068;
                            _3056 = _3352 + _3069;
                            _3057 = _3353 + _3070;
                            _3052 = _3348 + _3065;
                            _3053 = _3349 + _3066;
                            _3054 = _3350 + _3067;
                            if (_3072 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3072;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3057;
                        frontier_phi_79_pred_1 = _3056;
                        frontier_phi_79_pred_2 = _3055;
                        frontier_phi_79_pred_3 = _3054;
                        frontier_phi_79_pred_4 = _3053;
                        frontier_phi_79_pred_5 = _3052;
                    }
                    _2694 = frontier_phi_79_pred;
                    _2692 = frontier_phi_79_pred_1;
                    _2690 = frontier_phi_79_pred_2;
                    _2688 = frontier_phi_79_pred_3;
                    _2686 = frontier_phi_79_pred_4;
                    _2684 = frontier_phi_79_pred_5;
                    uint _2850 = _2849 + 1u;
                    if (_2850 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2843 = _2684;
                        _2844 = _2686;
                        _2845 = _2688;
                        _2846 = _2690;
                        _2847 = _2692;
                        _2848 = _2694;
                        _2849 = _2850;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2690;
                frontier_phi_60_61_ladder_1 = _2694;
                frontier_phi_60_61_ladder_2 = _2692;
                frontier_phi_60_61_ladder_3 = _2688;
                frontier_phi_60_61_ladder_4 = _2686;
                frontier_phi_60_61_ladder_5 = _2684;
            }
            else
            {
                frontier_phi_60_61_ladder = _2569;
                frontier_phi_60_61_ladder_1 = _2573;
                frontier_phi_60_61_ladder_2 = _2571;
                frontier_phi_60_61_ladder_3 = _2567;
                frontier_phi_60_61_ladder_4 = _2565;
                frontier_phi_60_61_ladder_5 = _2563;
            }
            _2683 = frontier_phi_60_61_ladder_5;
            _2685 = frontier_phi_60_61_ladder_4;
            _2687 = frontier_phi_60_61_ladder_3;
            _2689 = frontier_phi_60_61_ladder;
            _2691 = frontier_phi_60_61_ladder_2;
            _2693 = frontier_phi_60_61_ladder_1;
        }
        float _2698 = isnan(1.0) ? _678 : (isnan(_678) ? 1.0 : min(_678, 1.0));
        _2472 = (_2698 * _2689) + _1906;
        _2474 = (_2698 * _2691) + _1908;
        _2476 = (_2698 * _2693) + _1910;
        _2478 = ((_2683 * _663) * _2698) + _2254;
        _2480 = ((_2685 * _665) * _2698) + _2256;
        _2482 = ((_2687 * _666) * _2698) + _2258;
    }
    else
    {
        _2472 = _1906;
        _2474 = _1908;
        _2476 = _1910;
        _2478 = _2254;
        _2480 = _2256;
        _2482 = _2258;
    }
    float _4439 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4450 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4461 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _2499 = ((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2472 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _678))) + ((_2478 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1518)) * cbPerFrame._m0[3u].x);
    float _2500 = ((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2474 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _678))) + ((_2480 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1518)) * cbPerFrame._m0[3u].x);
    float _2501 = ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2476 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _678))) + ((_2482 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1518)) * cbPerFrame._m0[3u].x);
    float _2502 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2503 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2504 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    uint _2505 = _637 + 6u;
    float _2513 = _597 / cbSceneParam._m0[86u].x;
    float _2514 = _598 / cbSceneParam._m0[86u].y;
    vec4 _2528 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, (log2((isnan(cbSceneParam._m0[77u].w) ? _523 : (isnan(_523) ? cbSceneParam._m0[77u].w : min(_523, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2530 = _2528.x;
    float _2531 = _2528.y;
    float _2532 = _2528.z;
    float _2533 = _2528.w;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_523 > cbSceneParam._m0[78u].w)
    {
        float _2588 = isnan(_523) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _523 : min(cbSceneParam._m0[80u].w, _523));
        float _2589 = _2588 / _523;
        float _2600 = _2589 * _574;
        float _2601 = _575 * _2589;
        float _2602 = (-0.0) - _2601;
        float _2603 = _2589 * _576;
        float _2605 = (cbSceneParam._m0[77u].w * _2602) / _2588;
        float _2606 = _2605 + cbSceneParam._m0[79u].w;
        float _2607 = cbSceneParam._m0[79u].w - _2601;
        float _2613 = sqrt(((_2600 * _2600) + (_2601 * _2601)) + (_2603 * _2603));
        float _2616 = (1.0 - (cbSceneParam._m0[77u].w / _2588)) * _2613;
        float _2621 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2623 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2800;
        if (abs((_2602 - _2605) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2800 = ((((_2606 > 0.0) ? exp2(_2621 * _2606) : (2.0 - exp2(_2623 * _2606))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2616;
        }
        else
        {
            float _2744 = 1.0 / cbSceneParam._m0[80u].x;
            float _2745 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : max(_2606, _2607));
            float _2746 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : min(_2606, _2607));
            float _2755 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : min(_2745, 0.0));
            float _2756 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : min(_2746, 0.0));
            _2800 = ((abs(_2613 / _2602) * cbSceneParam._m0[80u].y) * ((((_2755 - _2756) * 2.0) - ((exp2(_2621 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0)))) - exp2(_2621 * (isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))))) * _2744)) - ((exp2(_2623 * _2755) - exp2(_2623 * _2756)) * _2744))) + (_2616 * cbSceneParam._m0[80u].z);
        }
        vec4 _2802 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, 1.0), 0.0);
        float _2811 = exp2((_2800 * (-1.44269502162933349609375)) * (1.0 - _2802.w));
        float _2812 = log2(_2811);
        float _2828 = log2(_2533);
        _2625 = (exp2(_2828 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].x)) * _2802.x) / cbSceneParam._m0[78u].x)) + _2530;
        _2627 = (exp2(_2828 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].y)) * _2802.y) / cbSceneParam._m0[78u].y)) + _2531;
        _2629 = (exp2(_2828 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].z)) * _2802.z) / cbSceneParam._m0[78u].z)) + _2532;
        _2631 = _2811 * _2533;
    }
    else
    {
        _2625 = _2530;
        _2627 = _2531;
        _2629 = _2532;
        _2631 = _2533;
    }
    bool _2838;
    vec4 _2641;
    vec4 _2663;
    float _2665;
    float _2669;
    float _2670;
    float _2671;
    float _2672;
    bool _2682;
    for (;;)
    {
        _2641 = cbMatDynParam._m0[0u];
        float _2643 = roundEven(_2641.y);
        bool _2644 = _2643 == 3.0;
        float _2645 = log2(_2631);
        float _2652 = exp2(_2645 * cbSceneParam._m0[78u].x) * _2502;
        float _2653 = exp2(_2645 * cbSceneParam._m0[78u].y) * _2503;
        float _2654 = exp2(_2645 * cbSceneParam._m0[78u].z) * _2504;
        float _2661 = _586 + (-0.5);
        _2663 = cbMtdParam._m0[1u];
        _2665 = _2663.y * _2661;
        float _2668 = (_2643 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2669 = _2668 * (_2644 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2625)));
        _2670 = _2668 * (_2644 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2627)));
        _2671 = _2668 * (_2644 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2629)));
        _2672 = _2661 * 0.999000012874603271484375;
        _2682 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2682)
        {
            if ((cbInstanceData._m0[_637 + 7u].x + _2672) < 0.5)
            {
                _2838 = true;
                break;
            }
        }
        uint _2779 = _639 + uint(_2641.w);
        if ((cbInstanceData._m0[_2779].w < 1.0) && ((cbInstanceData._m0[_2779].w + _2672) < 0.5))
        {
            _2838 = true;
            break;
        }
        if ((_2665 + _364) < _2663.x)
        {
            _2838 = true;
            break;
        }
        _2838 = false;
        break;
    }
    float _3043;
    if (_2838)
    {
        discard_state = true;
        _3043 = 0.0;
    }
    else
    {
        _3043 = cbInstanceData._m0[_2505].w;
    }
    SV_Target.x = _2669;
    SV_Target.y = _2670;
    SV_Target.z = _2671;
    SV_Target.w = _3043;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2505].w;
    discard_exit();
}


