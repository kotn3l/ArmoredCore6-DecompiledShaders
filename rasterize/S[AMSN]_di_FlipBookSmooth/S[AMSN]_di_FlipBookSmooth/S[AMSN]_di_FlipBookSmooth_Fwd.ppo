#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _976;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _187 = _186 * _178;
    float _188 = _186 * _179;
    float _189 = _186 * _180;
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = _193 * NORMAL.x;
    float _195 = _193 * NORMAL.y;
    float _196 = _193 * NORMAL.z;
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _201 = _200 * TANGENT.x;
    float _202 = _200 * TANGENT.y;
    float _203 = _200 * TANGENT.z;
    float _208;
    float _209;
    float _210;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
    }
    else
    {
        _208 = _194;
        _209 = _195;
        _210 = _196;
    }
    uint _229 = uint(int(floor(cbMtdParam._m0[10u].z)));
    float _230 = fract(cbMtdParam._m0[10u].z);
    uint _231 = _229 + 1u;
    uint _232 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _235 = float(int(_229 - _232 * (_229 / _232)));
    float _239 = float(int(_231 - _232 * (_231 / _232)));
    float _243 = 1.0 / cbMtdParam._m0[10u].w;
    float _245 = 1.0 / cbMtdParam._m0[11u].x;
    float _246 = fract(TEXCOORD_1.x);
    float _247 = fract(TEXCOORD_1.y);
    float _249 = (_246 + (_235 - cbMtdParam._m0[10u].w * trunc(_235 / cbMtdParam._m0[10u].w))) * _243;
    float _251 = (_247 + floor(_235 / cbMtdParam._m0[10u].w)) * _245;
    float _253 = (_246 + (_239 - cbMtdParam._m0[10u].w * trunc(_239 / cbMtdParam._m0[10u].w))) * _243;
    float _255 = (_247 + floor(_239 / cbMtdParam._m0[10u].w)) * _245;
    vec4 _268 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _253) + cbTextureTilingScale._m0[0u].z, (_255 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _278 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _249) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _251) + cbTextureTilingScale._m0[0u].w));
    float _280 = _278.x;
    float _281 = _278.y;
    float _282 = _278.z;
    float _292 = (((_268.x - _280) * _230) + _280) * cbMtdParam._m0[9u].x;
    float _293 = (((_268.y - _281) * _230) + _281) * cbMtdParam._m0[9u].y;
    float _294 = (((_268.z - _282) * _230) + _282) * cbMtdParam._m0[9u].z;
    vec4 _314 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _249) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _251) + cbTextureTilingScale._m0[2u].w));
    float _316 = _314.x;
    float _320 = (_316 + cbMtdParam._m0[10u].x) + ((texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _253) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _255) + cbTextureTilingScale._m0[2u].w)).x - _316) * _230);
    vec4 _332 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _253) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _255) + cbTextureTilingScale._m0[1u].w));
    float _339 = (_332.x * 2.0) + (-1.0);
    float _341 = (_332.y * 2.0) + (-1.0);
    float _345 = 1.0 - dot(vec2(_339, _341), vec2(_339, _341));
    float _3315 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _347 = sqrt(isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0)));
    float _350 = fma(_347, _208, fma(_341, _201, _339 * _187));
    float _353 = fma(_347, _209, fma(_341, _202, _339 * _188));
    float _356 = fma(_347, _210, fma(_341, _203, _339 * _189));
    float _360 = inversesqrt(dot(vec3(_350, _353, _356), vec3(_350, _353, _356)));
    vec4 _368 = texture(sampler2D(S_AMSN_di_FlipBookSmooth_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _249) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _251) + cbTextureTilingScale._m0[1u].w));
    float _374 = (_368.x * 2.0) + (-1.0);
    float _375 = (_368.y * 2.0) + (-1.0);
    float _379 = 1.0 - dot(vec2(_374, _375), vec2(_374, _375));
    float _3326 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _381 = sqrt(isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0)));
    float _384 = fma(_381, _208, fma(_375, _201, _374 * _187));
    float _387 = fma(_381, _209, fma(_375, _202, _374 * _188));
    float _390 = fma(_381, _210, fma(_375, _203, _374 * _189));
    float _394 = inversesqrt(dot(vec3(_384, _387, _390), vec3(_384, _387, _390)));
    float _395 = _394 * _384;
    float _396 = _394 * _387;
    float _397 = _394 * _390;
    float _406 = (((_360 * _356) - _397) * _230) + _397;
    float _409 = (((((_360 * _350) - _395) * _230) + _395) * 2.0) + (-1.0);
    float _410 = (((((_360 * _353) - _396) * _230) + _396) * 2.0) + (-1.0);
    float _411 = dot(vec2(_409, _410), vec2(_409, _410));
    float _3337 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _416 = sqrt(1.0 - (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0))));
    float _419 = fma(_416, _208, fma(_410, _201, _409 * _187));
    float _422 = fma(_416, _209, fma(_410, _202, _409 * _188));
    float _425 = fma(_416, _210, fma(_410, _203, _409 * _189));
    float _429 = inversesqrt(dot(vec3(_419, _422, _425), vec3(_419, _422, _425)));
    float _430 = _429 * _419;
    float _431 = _429 * _422;
    float _432 = _429 * _425;
    float _3348 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _433 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _3359 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _3370 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _3381 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _3392 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _437 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    float _453 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _504 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _494);
    float _505 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _494);
    float _506 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _494);
    float _510 = inversesqrt(dot(vec3(_504, _505, _506), vec3(_504, _505, _506)));
    float _511 = _504 * _510;
    float _512 = _505 * _510;
    float _513 = _506 * _510;
    float _519 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _520 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _541 = fma(_432, cbSceneParam._m0[5u].z, fma(_431, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _430));
    float _544 = fma(_432, cbSceneParam._m0[6u].z, fma(_431, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _430));
    float _547 = fma(_432, cbSceneParam._m0[7u].z, fma(_431, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _430));
    uint _560 = uint(roundEven(NORMAL.w)) * 13u;
    uint _563 = (_560 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _569 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0)))) * cbInstanceData._m0[_563].x;
    float _570 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0)))) * cbInstanceData._m0[_563].y;
    float _571 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0)))) * cbInstanceData._m0[_563].z;
    float _3403 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _3425 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _575 = 1.0 - _437;
    float _576 = _572 * _575;
    float _577 = _573 * _575;
    float _578 = _574 * _575;
    float _583 = (_572 + (-0.039999999105930328369140625)) * _437;
    float _584 = (_573 + (-0.039999999105930328369140625)) * _437;
    float _585 = (_574 + (-0.039999999105930328369140625)) * _437;
    float _586 = _583 + 0.039999999105930328369140625;
    float _588 = _584 + 0.039999999105930328369140625;
    float _589 = _585 + 0.039999999105930328369140625;
    vec4 _598 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _519, cbSceneParam._m0[86u].y * _520));
    float _601 = _598.x * TEXCOORD_1.w;
    float _602 = dot(vec3(_430, _431, _432), vec3(_511, _512, _513));
    float _605 = _602 * 2.0;
    float _609 = (_605 * _430) - _511;
    float _610 = (_605 * _431) - _512;
    float _611 = (_605 * _432) - _513;
    float _615 = abs(dot(vec3(_511, _512, _513), vec3(_430, _431, _432)));
    float _3436 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _617 = sqrt(_433);
    float _630 = exp2((_617 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_617 * 3.0));
    float _636 = (1.0 - _630) * ((_617 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _637 = _630 * _617;
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _975;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _700 = fma(_673, cbModelParam._m0[26u].z, fma(_669, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _665));
        float _704 = fma(_673, cbModelParam._m0[27u].z, fma(_669, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _665));
        float _708 = fma(_673, cbModelParam._m0[28u].z, fma(_669, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _665));
        float _733 = _665 + _430;
        float _734 = _669 + _431;
        float _735 = _673 + _432;
        float _745 = fma(_735, cbModelParam._m0[26u].z, fma(_734, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _733)) - _700;
        float _746 = fma(_735, cbModelParam._m0[27u].z, fma(_734, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _733)) - _704;
        float _747 = fma(_735, cbModelParam._m0[28u].z, fma(_734, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _733)) - _708;
        float _751 = inversesqrt(dot(vec3(_745, _746, _747), vec3(_745, _746, _747)));
        float _764 = ((_751 * _745) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_700 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _765 = ((_751 * _746) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_704 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _766 = ((_751 * _747) / cbModelParam._m0[34u].z) + ((((((_708 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_764, _765, _766), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_764, _765, _766), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_764, _765, _766), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_764, _765, _766), 0.0);
        float _803 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_769.x + (-0.5));
        float _805 = _803 * (_769.y + (-0.5));
        float _806 = _803 * (_769.z + (-0.5));
        float _813 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_776.x + (-0.5));
        float _815 = _813 * (_776.y + (-0.5));
        float _816 = _813 * (_776.z + (-0.5));
        float _823 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_783.x + (-0.5));
        float _825 = _823 * (_783.y + (-0.5));
        float _826 = _823 * (_783.z + (-0.5));
        float _833 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_790.x + (-0.5));
        float _835 = _833 * (_790.y + (-0.5));
        float _836 = _833 * (_790.z + (-0.5));
        float _837 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _840 = _804 * 0.5;
        float _841 = _814 * 0.5;
        float _842 = _824 * 0.5;
        float _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _857 = (dot(vec3(_430, _431, _432), vec3(_848 * _840, _848 * _841, _848 * _842)) + 1.0) * 0.5;
        float _3462 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _867 = sqrt(((_841 * _841) + (_840 * _840)) + (_842 * _842)) / (_837 + 9.9999997473787516355514526367188e-06);
        float _3473 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3484 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * (_869 + 1.0))) + _874) * _837;
        float _884 = _805 * 0.5;
        float _885 = _815 * 0.5;
        float _886 = _825 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _900 = (dot(vec3(_430, _431, _432), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3495 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _909 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3506 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3517 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_911 + 1.0))) + _916) * _838;
        float _926 = _806 * 0.5;
        float _927 = _816 * 0.5;
        float _928 = _826 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_430, _431, _432), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_839 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3550 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_953 + 1.0))) + _958) * _839;
        _975 = _806;
        _977 = _805;
        _978 = _804;
        _979 = _816;
        _980 = _815;
        _981 = _814;
        _982 = _826;
        _983 = _825;
        _984 = _824;
        _985 = _839;
        _986 = _838;
        _987 = _837;
        _988 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _990 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
    }
    else
    {
        _975 = _976;
        _977 = _976;
        _978 = _976;
        _979 = _976;
        _980 = _976;
        _981 = _976;
        _982 = _976;
        _983 = _976;
        _984 = _976;
        _985 = _976;
        _986 = _976;
        _987 = _976;
        _988 = 0.0;
        _989 = 0.0;
        _990 = 0.0;
    }
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1016 = fma(_673, cbModelParam._m0[30u].z, fma(_669, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _665));
        float _1020 = fma(_673, cbModelParam._m0[31u].z, fma(_669, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _665));
        float _1024 = fma(_673, cbModelParam._m0[32u].z, fma(_669, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _665));
        float _1047 = _665 + _430;
        float _1048 = _669 + _431;
        float _1049 = _673 + _432;
        float _1059 = fma(_1049, cbModelParam._m0[30u].z, fma(_1048, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047)) - _1016;
        float _1060 = fma(_1049, cbModelParam._m0[31u].z, fma(_1048, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047)) - _1020;
        float _1061 = fma(_1049, cbModelParam._m0[32u].z, fma(_1048, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047)) - _1024;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1016 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1020 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[35u].z) + ((((((_1024 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1115 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1082.x + (-0.5));
        float _1117 = _1115 * (_1082.y + (-0.5));
        float _1118 = _1115 * (_1082.z + (-0.5));
        float _1125 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1089.x + (-0.5));
        float _1127 = _1125 * (_1089.y + (-0.5));
        float _1128 = _1125 * (_1089.z + (-0.5));
        float _1135 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1096.x + (-0.5));
        float _1137 = _1135 * (_1096.y + (-0.5));
        float _1138 = _1135 * (_1096.z + (-0.5));
        float _1145 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1103.x + (-0.5));
        float _1147 = _1145 * (_1103.y + (-0.5));
        float _1148 = _1145 * (_1103.z + (-0.5));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = _1116 * 0.5;
        float _1153 = _1126 * 0.5;
        float _1154 = _1136 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_430, _431, _432), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3613 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_1179 + 1.0))) + _1184) * _1149;
        float _1194 = _1117 * 0.5;
        float _1195 = _1127 * 0.5;
        float _1196 = _1137 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_430, _431, _432), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3646 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_1221 + 1.0))) + _1226) * _1150;
        float _1236 = _1118 * 0.5;
        float _1237 = _1128 * 0.5;
        float _1238 = _1138 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_430, _431, _432), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3679 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1263 + 1.0))) + _1268) * _1151;
        _1285 = _1118;
        _1286 = _1117;
        _1287 = _1116;
        _1288 = _1128;
        _1289 = _1127;
        _1290 = _1126;
        _1291 = _1138;
        _1292 = _1137;
        _1293 = _1136;
        _1294 = _1151;
        _1295 = _1150;
        _1296 = _1149;
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
    }
    else
    {
        _1285 = _976;
        _1286 = _976;
        _1287 = _976;
        _1288 = _976;
        _1289 = _976;
        _1290 = _976;
        _1291 = _976;
        _1292 = _976;
        _1293 = _976;
        _1294 = _976;
        _1295 = _976;
        _1296 = _976;
        _1297 = 0.0;
        _1298 = 0.0;
        _1299 = 0.0;
    }
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _988)) + _988;
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _989)) + _989;
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _990)) + _990;
    float _1332 = fma(_1311, cbSceneParam._m0[89u].z, fma(_1310, cbSceneParam._m0[89u].y, _1309 * cbSceneParam._m0[89u].x));
    float _1335 = fma(_1311, cbSceneParam._m0[90u].z, fma(_1310, cbSceneParam._m0[90u].y, _1309 * cbSceneParam._m0[90u].x));
    float _1338 = fma(_1311, cbSceneParam._m0[91u].z, fma(_1310, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1309));
    float _1353 = _609 * 0.5;
    float _1354 = _610 * 0.5;
    float _1355 = _611 * 0.5;
    float _1356 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1359 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1362 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1396;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1369 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_975, _979, _982, _985));
        float _1373 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_977, _980, _983, _986));
        float _1377 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_978, _981, _984, _987));
        float _1384 = dot(vec4(cbModelParam._m0[39u]), vec4(_1353, _1354, _1355, 1.0));
        _1396 = dot(vec3(isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1384) ? 0.0 : (isnan(0.0) ? _1384 : max(0.0, _1384))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1396 = 1.0;
    }
    float _1407;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1398 = dot(vec4(cbModelParam._m0[40u]), vec4(_1353, _1354, _1355, 1.0));
        _1407 = dot(vec3(isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1398) ? 0.0 : (isnan(0.0) ? _1398 : max(0.0, _1398))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1407 = 1.0;
    }
    float _1411 = (_1407 * cbModelParam._m0[1u].x) + (_1396 * (1.0 - cbModelParam._m0[1u].x));
    float _1421 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _433);
    float _1422 = isnan(_1421) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1421 : min(cbModelParam._m0[25u].z, _1421));
    float _1504;
    float _1506;
    float _1508;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1471 = fma(_673, cbModelParam._m0[13u].z, fma(_669, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _665)) + cbModelParam._m0[13u].w;
        float _1475 = fma(_673, cbModelParam._m0[14u].z, fma(_669, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _665)) + cbModelParam._m0[14u].w;
        float _1479 = fma(_673, cbModelParam._m0[15u].z, fma(_669, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _665)) + cbModelParam._m0[15u].w;
        float _1482 = fma(_611, cbModelParam._m0[13u].z, fma(_610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _609));
        float _1485 = fma(_611, cbModelParam._m0[14u].z, fma(_610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _609));
        float _1488 = fma(_611, cbModelParam._m0[15u].z, fma(_610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _609));
        float _1516;
        if (_1482 > 0.0)
        {
            _1516 = abs((1.0 - _1471) / _1482);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1471 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1516 = frontier_phi_16_14_ladder;
        }
        float _1723;
        if (_1485 > 0.0)
        {
            _1723 = abs((1.0 - _1475) / _1485);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1475 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1723 = frontier_phi_25_21_ladder;
        }
        float _1977;
        if (_1488 > 0.0)
        {
            _1977 = abs((1.0 - _1479) / _1488);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1479 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1977 = frontier_phi_37_32_ladder;
        }
        float _1979 = isnan(_1723) ? _1516 : (isnan(_1516) ? _1723 : min(_1516, _1723));
        float _1980 = isnan(_1977) ? _1979 : (isnan(_1979) ? _1977 : min(_1979, _1977));
        float _1984 = (_1980 * _1482) + _1471;
        float _1985 = (_1980 * _1485) + _1475;
        float _1986 = (_1980 * _1488) + _1479;
        float _1987 = _1980 * 9.9999997473787516355514526367188e-05;
        float _1989 = (-1.0) - _1987;
        float _1991 = _1987 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1986 > _1991) || ((_1986 < _1989) || ((_1985 > _1991) || ((_1985 < _1989) || ((_1984 < _1989) || (_1984 > _1991))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2114 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1986, cbModelParam._m0[9u].z, fma(_1985, cbModelParam._m0[9u].y, _1984 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1986, cbModelParam._m0[10u].z, fma(_1985, cbModelParam._m0[10u].y, _1984 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1986, cbModelParam._m0[11u].z, fma(_1985, cbModelParam._m0[11u].y, _1984 * cbModelParam._m0[11u].x))), _1422);
            frontier_phi_15_37_ladder = _2114.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2114.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2114.x * cbModelParam._m0[1u].y;
        }
        _1504 = frontier_phi_15_37_ladder_2;
        _1506 = frontier_phi_15_37_ladder_1;
        _1508 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1492 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_609, _610, _611), _1422);
        _1504 = _1492.x * cbModelParam._m0[1u].y;
        _1506 = _1492.y * cbModelParam._m0[1u].y;
        _1508 = _1492.z * cbModelParam._m0[1u].y;
    }
    float _1512 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _433);
    float _1513 = isnan(_1512) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1512 : min(cbModelParam._m0[25u].w, _1512));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1570 = fma(_673, cbModelParam._m0[21u].z, fma(_669, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _665)) + cbModelParam._m0[21u].w;
        float _1574 = fma(_673, cbModelParam._m0[22u].z, fma(_669, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _665)) + cbModelParam._m0[22u].w;
        float _1578 = fma(_673, cbModelParam._m0[23u].z, fma(_669, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _665)) + cbModelParam._m0[23u].w;
        float _1581 = fma(_611, cbModelParam._m0[21u].z, fma(_610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _609));
        float _1584 = fma(_611, cbModelParam._m0[22u].z, fma(_610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _609));
        float _1587 = fma(_611, cbModelParam._m0[23u].z, fma(_610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _609));
        float _1728;
        if (_1581 > 0.0)
        {
            _1728 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1728 = frontier_phi_27_23_ladder;
        }
        float _2004;
        if (_1584 > 0.0)
        {
            _2004 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2004 = frontier_phi_39_34_ladder;
        }
        float _2217;
        if (_1587 > 0.0)
        {
            _2217 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2217 = frontier_phi_48_45_ladder;
        }
        float _2219 = isnan(_2004) ? _1728 : (isnan(_1728) ? _2004 : min(_1728, _2004));
        float _2220 = isnan(_2217) ? _2219 : (isnan(_2219) ? _2217 : min(_2219, _2217));
        float _2224 = (_2220 * _1581) + _1570;
        float _2225 = (_2220 * _1584) + _1574;
        float _2226 = (_2220 * _1587) + _1578;
        float _2227 = _2220 * 9.9999997473787516355514526367188e-05;
        float _2228 = (-1.0) - _2227;
        float _2230 = _2227 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2226 > _2230) || ((_2226 < _2228) || ((_2225 > _2230) || ((_2225 < _2228) || ((_2224 < _2228) || (_2224 > _2230))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2427 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2226, cbModelParam._m0[17u].z, fma(_2225, cbModelParam._m0[17u].y, _2224 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2226, cbModelParam._m0[18u].z, fma(_2225, cbModelParam._m0[18u].y, _2224 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2226, cbModelParam._m0[19u].z, fma(_2225, cbModelParam._m0[19u].y, _2224 * cbModelParam._m0[19u].x))), _1513);
            frontier_phi_24_48_ladder = _2427.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2427.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2427.x * cbModelParam._m0[1u].z;
        }
        _1606 = frontier_phi_24_48_ladder_2;
        _1608 = frontier_phi_24_48_ladder_1;
        _1610 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_609, _610, _611), _1513);
        _1606 = _1590.x * cbModelParam._m0[1u].z;
        _1608 = _1590.y * cbModelParam._m0[1u].z;
        _1610 = _1590.z * cbModelParam._m0[1u].z;
    }
    float _1623 = (((_636 * _586) + _637) * _601) * ((cbModelParam._m0[1u].w * (_1606 - _1504)) + _1504);
    float _1625 = (((_636 * _588) + _637) * _601) * ((cbModelParam._m0[1u].w * (_1608 - _1506)) + _1506);
    float _1627 = (((_636 * _589) + _637) * _601) * ((cbModelParam._m0[1u].w * (_1610 - _1508)) + _1508);
    float _1630 = fma(_1627, cbSceneParam._m0[89u].z, fma(_1625, cbSceneParam._m0[89u].y, _1623 * cbSceneParam._m0[89u].x));
    float _1633 = fma(_1627, cbSceneParam._m0[90u].z, fma(_1625, cbSceneParam._m0[90u].y, _1623 * cbSceneParam._m0[90u].x));
    float _1636 = fma(_1627, cbSceneParam._m0[91u].z, fma(_1625, cbSceneParam._m0[91u].y, _1623 * cbSceneParam._m0[91u].x));
    uvec4 _1646 = floatBitsToUint(cbInstanceData._m0[_560 + 5u]);
    uint _1648 = _1646.x * 14u;
    uint _1649 = _1648 + 13u;
    float _1656 = _601 + (-1.0);
    float _1661 = (cbLight._m0[_1649].x * _1656) + 1.0;
    float _1662 = (cbLight._m0[_1649].y * _1656) + 1.0;
    float _1663 = (cbLight._m0[_1649].z * _1656) + 1.0;
    float _1664 = (cbLight._m0[_1649].w * _1656) + 1.0;
    uint _1665 = _1648 + 5u;
    float _1671 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
    uint _1675 = _1648 + 4u;
    float _1682 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
    uint _1686 = _1648 | 1u;
    float _1697 = dot(vec3(cbLight._m0[_1648].xyz), vec3(_430, _431, _432));
    float _1700 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_430, _431, _432));
    float _3815 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _3826 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1705 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * 0.3183098733425140380859375;
    float _1707 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * 0.3183098733425140380859375;
    float _1714 = ((cbLight._m0[_1665].x * _1671) * _1707) + ((cbLight._m0[_1675].x * _1682) * _1705);
    float _1715 = ((_1671 * cbLight._m0[_1665].y) * _1707) + ((_1682 * cbLight._m0[_1675].y) * _1705);
    float _1716 = ((_1671 * cbLight._m0[_1665].z) * _1707) + ((_1682 * cbLight._m0[_1675].z) * _1705);
    uvec4 _1720 = floatBitsToUint(cbLight._m0[_1648 + 12u]);
    bool _1722 = _1720.x == 0u;
    float _1733;
    float _1735;
    float _1737;
    if (_1722)
    {
        _1733 = _1714;
        _1735 = _1715;
        _1737 = _1716;
    }
    else
    {
        uint _1741 = _1648 + 6u;
        float _1757 = (dot(vec3(cbLight._m0[_1648 + 2u].xyz), vec3(_430, _431, _432)) * 0.5) + 0.5;
        float _1758 = _1757 * _1757;
        float _3837 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1760 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _1733 = (((cbLight._m0[_1741].x * 0.3183098733425140380859375) * _1759) * _1760) + _1714;
        _1735 = (((cbLight._m0[_1741].y * 0.3183098733425140380859375) * _1759) * _1760) + _1715;
        _1737 = (((cbLight._m0[_1741].z * 0.3183098733425140380859375) * _1759) * _1760) + _1716;
    }
    bool _1740 = _1720.y == 0u;
    float _1778;
    float _1780;
    float _1782;
    if (_1740)
    {
        _1778 = _1733;
        _1780 = _1735;
        _1782 = _1737;
    }
    else
    {
        uint _1948 = _1648 + 7u;
        float _1964 = (dot(vec3(cbLight._m0[_1648 + 3u].xyz), vec3(_430, _431, _432)) * 0.5) + 0.5;
        float _1965 = _1964 * _1964;
        float _3853 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1966 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1967 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _1778 = (((cbLight._m0[_1948].x * 0.3183098733425140380859375) * _1966) * _1967) + _1733;
        _1780 = (((cbLight._m0[_1948].y * 0.3183098733425140380859375) * _1966) * _1967) + _1735;
        _1782 = (((cbLight._m0[_1948].z * 0.3183098733425140380859375) * _1966) * _1967) + _1737;
    }
    uint _1785 = _1648 + 8u;
    float _1798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1648].w)) * _433) * 0.949999988079071044921875);
    float _1799 = _1798 * _1798;
    float _1800 = cbLight._m0[_1648].x + _511;
    float _1801 = cbLight._m0[_1648].y + _512;
    float _1802 = cbLight._m0[_1648].z + _513;
    float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
    float _1807 = _1806 * _1800;
    float _1808 = _1806 * _1801;
    float _1809 = _1806 * _1802;
    float _1810 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_1648].xyz));
    float _3869 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _1814 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _1815 = dot(vec3(_430, _431, _432), vec3(_1807, _1808, _1809));
    float _3891 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _1819 = dot(vec3(cbLight._m0[_1648].xyz), vec3(_1807, _1808, _1809));
    float _3902 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1823 = _1799 * _1799;
    float _1827 = ((_1818 * _1818) * (_1823 + (-1.0))) + 1.0;
    float _1835 = exp2(log2(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * 5.0);
    float _1836 = 0.959999978542327880859375 - _583;
    float _1838 = 0.959999978542327880859375 - _584;
    float _1839 = 0.959999978542327880859375 - _585;
    float _1846 = 1.0 - _1799;
    float _1857 = (0.5 / (((_1814 * ((_1813 * _1846) + _1799)) + 9.9999999392252902907785028219223e-09) + (((_1814 * _1846) + _1799) * _1813))) * _1813;
    float _3913 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1859 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1823 / ((_1827 * _1827) * 3.141590118408203125));
    uint _1870 = _1648 + 9u;
    float _1881 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1686].w)) * _433) * 0.949999988079071044921875);
    float _1882 = _1881 * _1881;
    float _1883 = cbLight._m0[_1686].x + _511;
    float _1884 = cbLight._m0[_1686].y + _512;
    float _1885 = cbLight._m0[_1686].z + _513;
    float _1889 = inversesqrt(dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885)));
    float _1890 = _1889 * _1883;
    float _1891 = _1889 * _1884;
    float _1892 = _1889 * _1885;
    float _1893 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_1686].xyz));
    float _3924 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _1897 = dot(vec3(_430, _431, _432), vec3(_1890, _1891, _1892));
    float _3935 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_1890, _1891, _1892));
    float _3946 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = _1882 * _1882;
    float _1909 = ((_1900 * _1900) * (_1905 + (-1.0))) + 1.0;
    float _1916 = exp2(log2(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * 5.0);
    float _1923 = 1.0 - _1882;
    float _1933 = (0.5 / (((_1814 * ((_1896 * _1923) + _1882)) + 9.9999999392252902907785028219223e-09) + (((_1814 * _1923) + _1882) * _1896))) * _1896;
    float _3957 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1935 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1905 / ((_1909 * _1909) * 3.141590118408203125));
    float _1945 = (((((_1916 * _1836) + _586) * cbLight._m0[_1870].x) * _1935) * _1671) + (((((_1835 * _1836) + _586) * cbLight._m0[_1785].x) * _1859) * _1682);
    float _1946 = (((((_1916 * _1838) + _588) * cbLight._m0[_1870].y) * _1935) * _1671) + (((((_1835 * _1838) + _588) * cbLight._m0[_1785].y) * _1859) * _1682);
    float _1947 = (((((_1916 * _1839) + _589) * cbLight._m0[_1870].z) * _1935) * _1671) + (((((_1835 * _1839) + _589) * cbLight._m0[_1785].z) * _1859) * _1682);
    float _2009;
    float _2011;
    float _2013;
    if (_1722)
    {
        _2009 = _1945;
        _2011 = _1946;
        _2013 = _1947;
    }
    else
    {
        uint _2015 = _1648 + 2u;
        uint _2019 = _1648 + 10u;
        float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _433) * 0.949999988079071044921875);
        float _2034 = _2033 * _2033;
        float _2035 = cbLight._m0[_2015].x + _511;
        float _2036 = cbLight._m0[_2015].y + _512;
        float _2037 = cbLight._m0[_2015].z + _513;
        float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
        float _2042 = _2041 * _2035;
        float _2043 = _2041 * _2036;
        float _2044 = _2041 * _2037;
        float _2045 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_2015].xyz));
        float _3968 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2048 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _2049 = dot(vec3(_430, _431, _432), vec3(_2042, _2043, _2044));
        float _3979 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _2053 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2042, _2043, _2044));
        float _3990 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2057 = _2034 * _2034;
        float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
        float _2068 = exp2(log2(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * 5.0);
        float _2075 = 1.0 - _2034;
        float _2085 = (0.5 / (((_1814 * ((_2048 * _2075) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_1814 * _2075) + _2034) * _2048))) * _2048;
        float _4001 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2087 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
        float _2088 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _2009 = (((((_2068 * _1836) + _586) * cbLight._m0[_2019].x) * _2087) * _2088) + _1945;
        _2011 = (((((_2068 * _1838) + _588) * cbLight._m0[_2019].y) * _2087) * _2088) + _1946;
        _2013 = (((((_2068 * _1839) + _589) * cbLight._m0[_2019].z) * _2087) * _2088) + _1947;
    }
    float _2123;
    float _2125;
    float _2127;
    if (_1740)
    {
        _2123 = _2009;
        _2125 = _2011;
        _2127 = _2013;
    }
    else
    {
        uint _2134 = _1648 + 3u;
        uint _2138 = _1648 + 11u;
        float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _433) * 0.949999988079071044921875);
        float _2153 = _2152 * _2152;
        float _2154 = cbLight._m0[_2134].x + _511;
        float _2155 = cbLight._m0[_2134].y + _512;
        float _2156 = cbLight._m0[_2134].z + _513;
        float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
        float _2161 = _2160 * _2154;
        float _2162 = _2160 * _2155;
        float _2163 = _2160 * _2156;
        float _2164 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_2134].xyz));
        float _4017 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2168 = dot(vec3(_430, _431, _432), vec3(_2161, _2162, _2163));
        float _4028 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2172 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2161, _2162, _2163));
        float _4039 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2176 = _2153 * _2153;
        float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
        float _2187 = exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0);
        float _2194 = 1.0 - _2153;
        float _2204 = (0.5 / (((_1814 * ((_2167 * _2194) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_1814 * _2194) + _2153) * _2167))) * _2167;
        float _4050 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2206 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
        float _2207 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _2123 = (((((_2187 * _1836) + _586) * cbLight._m0[_2138].x) * _2206) * _2207) + _2009;
        _2125 = (((((_2187 * _1838) + _588) * cbLight._m0[_2138].y) * _2206) * _2207) + _2011;
        _2127 = (((((_2187 * _1839) + _589) * cbLight._m0[_2138].z) * _2206) * _2207) + _2013;
    }
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    if (_1646.y == 0u)
    {
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2283 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2282;
        float _2284 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2282;
        float _2285 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2282;
        uvec4 _2297 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2298 = _2297.x;
        uint _2309 = uint((float(_2297.y) * floor(float(uint(cbSceneParam._m0[85u].y * _520) / _2298))) + floor(float(uint(cbSceneParam._m0[85u].x * _519) / _2298)));
        float _2319 = (log2(_2285 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2320 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        uint _2323 = uint(isnan(14.0) ? _2320 : (isnan(_2320) ? 14.0 : min(_2320, 14.0)));
        uvec4 _2328 = texelFetch(g_lightClusterGridBuffer, int(((_2323 << 2u) + (_2309 << 6u)) >> 2u));
        uint _2329 = _2328.x;
        uint _2330 = _2297.z;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        if (((((1u << ((_2330 >> 4u) & 15u)) + 4294967295u) & _2329) == 0u) || ((_2330 & 240u) == 0u))
        {
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
        }
        else
        {
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2441;
            float _2443;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            uint _2582 = 0u;
            uint _2591;
            bool _2592;
            for (;;)
            {
                _2591 = texelFetch(g_lightClassification, int((((_2323 << 5u) + (_2309 << 9u)) + (_2582 << 2u)) >> 2u)).x;
                _2592 = _2591 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2592)
                {
                    frontier_phi_63_pred = _2581;
                    frontier_phi_63_pred_1 = _2580;
                    frontier_phi_63_pred_2 = _2579;
                    frontier_phi_63_pred_3 = _2578;
                    frontier_phi_63_pred_4 = _2577;
                    frontier_phi_63_pred_5 = _2576;
                }
                else
                {
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    uint _2706;
                    _2700 = _2576;
                    _2701 = _2577;
                    _2702 = _2578;
                    _2703 = _2579;
                    _2704 = _2580;
                    _2705 = _2581;
                    _2706 = _2591;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    for (;;)
                    {
                        uint _2710 = uint(findLSB(_2706)) + (_2582 << 5u);
                        uint _2707 = (_2706 + 4294967295u) & _2706;
                        uint _2712 = _2710 * 48u;
                        vec4 _2726 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2712)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 3u)).x));
                        uint _2732 = (_2710 * 48u) + 4u;
                        vec4 _2745 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 3u)).x));
                        uint _2751 = (_2710 * 48u) + 8u;
                        vec3 _2762 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2751)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 2u)).x));
                        float _2766 = _2726.x - _2283;
                        float _2767 = _2726.y - _2284;
                        float _2768 = _2726.z - _2285;
                        float _2769 = dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768));
                        float _2772 = inversesqrt(_2769);
                        float _2773 = _2772 * _2766;
                        float _2774 = _2772 * _2767;
                        float _2775 = _2772 * _2768;
                        float _2776 = dot(vec3(_541, _544, _547), vec3(_2773, _2774, _2775));
                        float _2781 = 1.0 - (_2769 * _2726.w);
                        float _4076 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                        float _2782 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                        float _2783 = sqrt(_2769) * _2745.w;
                        float _2786 = 1.39999997615814208984375 / (_2783 + 1.39999997615814208984375);
                        float _2787 = _2786 * _2786;
                        float _2790 = ((1.0 - _2787) * _2776) + _2787;
                        float _2793 = _2783 * _2783;
                        float _2797 = ((isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0))) * _2782) / ((_2793 * 0.699999988079071044921875) + 1.0);
                        float _2801 = (-0.0) - _2283;
                        float _2802 = (-0.0) - _2284;
                        float _2803 = (-0.0) - _2285;
                        float _2807 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
                        float _2808 = _2807 * _2801;
                        float _2809 = _2807 * _2802;
                        float _2810 = _2807 * _2803;
                        float _2818 = exp2(log2(1.0 / ((_2793 * 3.5) + 5.0)) * 0.25);
                        float _2819 = 1.0 - _617;
                        float _2826 = sqrt(1.0 - ((1.0 - (_2819 * _2819)) * (1.0 - (_2818 * _2818))));
                        float _2827 = _2826 * _2826;
                        float _2828 = _2827 * _2827;
                        float _2829 = _2808 + _2773;
                        float _2830 = _2809 + _2774;
                        float _2831 = _2810 + _2775;
                        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
                        float _2839 = dot(vec3(_541, _544, _547), vec3(_2808, _2809, _2810));
                        float _4092 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2842 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2843 = dot(vec3(_541, _544, _547), vec3(_2835 * _2829, _2835 * _2830, _2835 * _2831));
                        float _4103 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2846 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                        float _2850 = ((_2846 * _2846) * (_2828 + (-1.0))) + 1.0;
                        float _2851 = _2786 * _2827;
                        float _2852 = _2851 * _2851;
                        float _2855 = ((1.0 - _2852) * _2776) + _2852;
                        float _4114 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2856 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                        float _2857 = 1.0 - _2827;
                        float _2867 = (0.5 / (((_2856 * ((_2842 * _2857) + _2827)) + 9.9999999392252902907785028219223e-09) + (((_2856 * _2857) + _2827) * _2842))) * _2856;
                        float _4125 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2878 = (((_2828 * 3.1415927410125732421875) * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) / ((_2850 * _2850) * ((_2793 * 2.1991131305694580078125) + 3.141590118408203125))) * _2782;
                        _2635 = (_2797 * _2745.x) + _2703;
                        _2636 = (_2797 * _2745.y) + _2704;
                        _2637 = (_2797 * _2745.z) + _2705;
                        _2632 = (_2878 * _2762.x) + _2700;
                        _2633 = (_2878 * _2762.y) + _2701;
                        _2634 = (_2878 * _2762.z) + _2702;
                        if (_2707 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2700 = _2632;
                            _2701 = _2633;
                            _2702 = _2634;
                            _2703 = _2635;
                            _2704 = _2636;
                            _2705 = _2637;
                            _2706 = _2707;
                        }
                    }
                    frontier_phi_63_pred = _2637;
                    frontier_phi_63_pred_1 = _2636;
                    frontier_phi_63_pred_2 = _2635;
                    frontier_phi_63_pred_3 = _2634;
                    frontier_phi_63_pred_4 = _2633;
                    frontier_phi_63_pred_5 = _2632;
                }
                _2443 = frontier_phi_63_pred;
                _2441 = frontier_phi_63_pred_1;
                _2439 = frontier_phi_63_pred_2;
                _2437 = frontier_phi_63_pred_3;
                _2435 = frontier_phi_63_pred_4;
                _2433 = frontier_phi_63_pred_5;
                uint _2583 = _2582 + 1u;
                if (_2583 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2576 = _2433;
                    _2577 = _2435;
                    _2578 = _2437;
                    _2579 = _2439;
                    _2580 = _2441;
                    _2581 = _2443;
                    _2582 = _2583;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
        }
        uvec4 _2446 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2447 = _2446.z;
        uint _2449 = (_2447 >> 8u) & 15u;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        if (((4294967295u << _2449) & _2329) == 0u)
        {
            _2544 = _2432;
            _2546 = _2434;
            _2548 = _2436;
            _2550 = _2438;
            _2552 = _2440;
            _2554 = _2442;
        }
        else
        {
            float _2569 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
            float _2570 = _2569 * _2283;
            float _2571 = _2569 * _2284;
            float _2572 = _2569 * _2285;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2449 < ((_2447 >> 12u) & 15u))
            {
                float _2545;
                float _2547;
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2683 = _2432;
                float _2684 = _2434;
                float _2685 = _2436;
                float _2686 = _2438;
                float _2687 = _2440;
                float _2688 = _2442;
                uint _2689 = _2449;
                uint _2698;
                bool _2699;
                for (;;)
                {
                    _2698 = texelFetch(g_lightClassification, int((((_2323 << 5u) + (_2309 << 9u)) + (_2689 << 2u)) >> 2u)).x;
                    _2699 = _2698 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2699)
                    {
                        frontier_phi_69_pred = _2688;
                        frontier_phi_69_pred_1 = _2687;
                        frontier_phi_69_pred_2 = _2686;
                        frontier_phi_69_pred_3 = _2685;
                        frontier_phi_69_pred_4 = _2684;
                        frontier_phi_69_pred_5 = _2683;
                    }
                    else
                    {
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _2896 = _2683;
                        float _2897 = _2684;
                        float _2898 = _2685;
                        float _2899 = _2686;
                        float _2900 = _2687;
                        float _2901 = _2688;
                        uint _2902 = _2698;
                        uint _2903;
                        vec4 _2928;
                        float _2929;
                        vec4 _2944;
                        vec3 _2956;
                        vec4 _2972;
                        vec4 _2988;
                        float _3035;
                        bool _3036;
                        for (;;)
                        {
                            uint _2913 = ((_2689 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2902));
                            _2903 = (_2902 + 4294967295u) & _2902;
                            uint _2915 = _2913 * 40u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            _2929 = _2928.w;
                            uint _2931 = (_2913 * 40u) + 4u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2946 = (_2913 * 40u) + 8u;
                            _2956 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x));
                            uint _2959 = (_2913 * 40u) + 16u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2975 = (_2913 * 40u) + 20u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2991 = (_2913 * 40u) + 24u;
                            vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3010 = (_2913 * 40u) + 28u;
                            vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            _3035 = fma(_2285, _3023.z, fma(_2284, _3023.y, _3023.x * _2283)) + _3023.w;
                            _3036 = !((fma(_2285, _3004.z, fma(_2284, _3004.y, _3004.x * _2283)) + _3004.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3036)
                            {
                                float _3063 = _2928.x - _2283;
                                float _3064 = _2928.y - _2284;
                                float _3065 = _2928.z - _2285;
                                float _3066 = dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065));
                                float _3069 = inversesqrt(_3066);
                                float _3070 = _3069 * _3063;
                                float _3071 = _3069 * _3064;
                                float _3072 = _3069 * _3065;
                                float _3076 = 1.0 - (_3066 / (_2929 * _2929));
                                float _4136 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3077 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3081 = sqrt(_3066) * _2944.w;
                                float _3083 = 1.39999997615814208984375 / (_3081 + 1.39999997615814208984375);
                                float _3084 = _3083 * _3083;
                                float _3087 = ((1.0 - _3084) * dot(vec3(_3070, _3071, _3072), vec3(_541, _544, _547))) + _3084;
                                float _3090 = _3081 * _3081;
                                float _3094 = (fma(_2285, _2972.z, fma(_2284, _2972.y, _2972.x * _2283)) + _2972.w) / _3035;
                                float _3095 = (fma(_2285, _2988.z, fma(_2284, _2988.y, _2988.x * _2283)) + _2988.w) / _3035;
                                float _3099 = 1.0 - dot(vec2(_3094, _3095), vec2(_3094, _3095));
                                float _4152 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3101 = _3100 * (((isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))) * _3077) / ((_3090 * 0.699999988079071044921875) + 1.0));
                                float _3113 = exp2(log2(1.0 / ((_3090 * 3.5) + 5.0)) * 0.25);
                                float _3114 = 1.0 - _617;
                                float _3121 = sqrt(1.0 - ((1.0 - (_3114 * _3114)) * (1.0 - (_3113 * _3113))));
                                float _3122 = _3121 * _3121;
                                float _3123 = _3122 * _3122;
                                float _3124 = _3070 - _2570;
                                float _3125 = _3071 - _2571;
                                float _3126 = _3072 - _2572;
                                float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
                                float _3134 = dot(vec3(_541, _544, _547), vec3((-0.0) - _2570, (-0.0) - _2571, (-0.0) - _2572));
                                float _4163 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3137 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3138 = dot(vec3(_541, _544, _547), vec3(_3130 * _3124, _3130 * _3125, _3130 * _3126));
                                float _4174 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3141 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3145 = ((_3141 * _3141) * (_3123 + (-1.0))) + 1.0;
                                float _3146 = _3083 * _3122;
                                float _3147 = _3146 * _3146;
                                float _3153 = ((1.0 - _3147) * dot(vec3(_541, _544, _547), vec3(_3070, _3071, _3072))) + _3147;
                                float _4185 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3155 = 1.0 - _3122;
                                float _3165 = (0.5 / (((_3154 * ((_3137 * _3155) + _3122)) + 9.9999999392252902907785028219223e-09) + (((_3154 * _3155) + _3122) * _3137))) * _3154;
                                float _4196 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3175 = (_3100 * _3077) * (((_3123 * 3.1415927410125732421875) * (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) / ((_3145 * _3145) * ((_3090 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3101 * _2944.z;
                                frontier_phi_75_pred_1 = _3101 * _2944.y;
                                frontier_phi_75_pred_2 = _3101 * _2944.x;
                                frontier_phi_75_pred_3 = _3175 * _2956.z;
                                frontier_phi_75_pred_4 = _3175 * _2956.y;
                                frontier_phi_75_pred_5 = _3175 * _2956.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3184 = frontier_phi_75_pred;
                            _3183 = frontier_phi_75_pred_1;
                            _3182 = frontier_phi_75_pred_2;
                            _3181 = frontier_phi_75_pred_3;
                            _3180 = frontier_phi_75_pred_4;
                            _3179 = frontier_phi_75_pred_5;
                            _2886 = _3182 + _2899;
                            _2887 = _3183 + _2900;
                            _2888 = _3184 + _2901;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            _2885 = _3181 + _2898;
                            if (_2903 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2903;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2888;
                        frontier_phi_69_pred_1 = _2887;
                        frontier_phi_69_pred_2 = _2886;
                        frontier_phi_69_pred_3 = _2885;
                        frontier_phi_69_pred_4 = _2884;
                        frontier_phi_69_pred_5 = _2883;
                    }
                    _2555 = frontier_phi_69_pred;
                    _2553 = frontier_phi_69_pred_1;
                    _2551 = frontier_phi_69_pred_2;
                    _2549 = frontier_phi_69_pred_3;
                    _2547 = frontier_phi_69_pred_4;
                    _2545 = frontier_phi_69_pred_5;
                    uint _2690 = _2689 + 1u;
                    if (_2690 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2683 = _2545;
                        _2684 = _2547;
                        _2685 = _2549;
                        _2686 = _2551;
                        _2687 = _2553;
                        _2688 = _2555;
                        _2689 = _2690;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2555;
                frontier_phi_57_58_ladder_1 = _2553;
                frontier_phi_57_58_ladder_2 = _2551;
                frontier_phi_57_58_ladder_3 = _2549;
                frontier_phi_57_58_ladder_4 = _2547;
                frontier_phi_57_58_ladder_5 = _2545;
            }
            else
            {
                frontier_phi_57_58_ladder = _2442;
                frontier_phi_57_58_ladder_1 = _2440;
                frontier_phi_57_58_ladder_2 = _2438;
                frontier_phi_57_58_ladder_3 = _2436;
                frontier_phi_57_58_ladder_4 = _2434;
                frontier_phi_57_58_ladder_5 = _2432;
            }
            _2544 = frontier_phi_57_58_ladder_5;
            _2546 = frontier_phi_57_58_ladder_4;
            _2548 = frontier_phi_57_58_ladder_3;
            _2550 = frontier_phi_57_58_ladder_2;
            _2552 = frontier_phi_57_58_ladder_1;
            _2554 = frontier_phi_57_58_ladder;
        }
        float _2559 = isnan(1.0) ? _601 : (isnan(_601) ? 1.0 : min(_601, 1.0));
        _2341 = (_2559 * _2550) + _1778;
        _2343 = (_2559 * _2552) + _1780;
        _2345 = (_2559 * _2554) + _1782;
        _2347 = ((_2544 * _586) * _2559) + _2123;
        _2349 = ((_2546 * _588) * _2559) + _2125;
        _2351 = ((_2548 * _589) * _2559) + _2127;
    }
    else
    {
        _2341 = _1778;
        _2343 = _1780;
        _2345 = _1782;
        _2347 = _2123;
        _2349 = _2125;
        _2351 = _2127;
    }
    float _4212 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4223 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4234 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _2368 = ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2341 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _601))) + ((_2347 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1411)) * cbPerFrame._m0[3u].x);
    float _2369 = ((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2343 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _601))) + ((_2349 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1411)) * cbPerFrame._m0[3u].x);
    float _2370 = ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2345 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _601))) + ((_2351 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1411)) * cbPerFrame._m0[3u].x);
    uint _2374 = _560 + 6u;
    float _2382 = _519 / cbSceneParam._m0[86u].x;
    float _2383 = _520 / cbSceneParam._m0[86u].y;
    vec4 _2397 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2382, _2383, (log2((isnan(cbSceneParam._m0[77u].w) ? _453 : (isnan(_453) ? cbSceneParam._m0[77u].w : min(_453, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2399 = _2397.x;
    float _2400 = _2397.y;
    float _2401 = _2397.z;
    float _2402 = _2397.w;
    float _2494;
    float _2496;
    float _2498;
    float _2500;
    if (_453 > cbSceneParam._m0[78u].w)
    {
        float _2457 = isnan(_453) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _453 : min(cbSceneParam._m0[80u].w, _453));
        float _2458 = _2457 / _453;
        float _2469 = _2458 * _504;
        float _2470 = _505 * _2458;
        float _2471 = (-0.0) - _2470;
        float _2472 = _2458 * _506;
        float _2474 = (cbSceneParam._m0[77u].w * _2471) / _2457;
        float _2475 = _2474 + cbSceneParam._m0[79u].w;
        float _2476 = cbSceneParam._m0[79u].w - _2470;
        float _2482 = sqrt(((_2469 * _2469) + (_2470 * _2470)) + (_2472 * _2472));
        float _2485 = (1.0 - (cbSceneParam._m0[77u].w / _2457)) * _2482;
        float _2490 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2492 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2645;
        if (abs((_2471 - _2474) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2645 = ((((_2475 > 0.0) ? exp2(_2490 * _2475) : (2.0 - exp2(_2492 * _2475))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2485;
        }
        else
        {
            float _2605 = 1.0 / cbSceneParam._m0[80u].x;
            float _2606 = isnan(_2476) ? _2475 : (isnan(_2475) ? _2476 : max(_2475, _2476));
            float _2607 = isnan(_2476) ? _2475 : (isnan(_2475) ? _2476 : min(_2475, _2476));
            float _2616 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : min(_2606, 0.0));
            float _2617 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : min(_2607, 0.0));
            _2645 = ((abs(_2482 / _2471) * cbSceneParam._m0[80u].y) * ((((_2616 - _2617) * 2.0) - ((exp2(_2490 * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0)))) - exp2(_2490 * (isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0))))) * _2605)) - ((exp2(_2492 * _2616) - exp2(_2492 * _2617)) * _2605))) + (_2485 * cbSceneParam._m0[80u].z);
        }
        vec4 _2647 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2382, _2383, 1.0), 0.0);
        float _2656 = exp2((_2645 * (-1.44269502162933349609375)) * (1.0 - _2647.w));
        float _2657 = log2(_2656);
        float _2673 = log2(_2402);
        _2494 = (exp2(_2673 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2657 * cbSceneParam._m0[78u].x)) * _2647.x) / cbSceneParam._m0[78u].x)) + _2399;
        _2496 = (exp2(_2673 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2657 * cbSceneParam._m0[78u].y)) * _2647.y) / cbSceneParam._m0[78u].y)) + _2400;
        _2498 = (exp2(_2673 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2657 * cbSceneParam._m0[78u].z)) * _2647.z) / cbSceneParam._m0[78u].z)) + _2401;
        _2500 = _2656 * _2402;
    }
    else
    {
        _2494 = _2399;
        _2496 = _2400;
        _2498 = _2401;
        _2500 = _2402;
    }
    float _2512 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2513 = _2512 == 3.0;
    float _2514 = log2(_2500);
    float _2521 = exp2(_2514 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0)));
    float _2522 = exp2(_2514 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0)));
    float _2523 = exp2(_2514 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0)));
    float _2532 = (_2512 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2532 * (_2513 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2494)));
    SV_Target.y = _2532 * (_2513 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2496)));
    SV_Target.z = _2532 * (_2513 ? _2523 : (_2523 + (cbSceneParam._m0[72u].w * _2498)));
    SV_Target.w = cbInstanceData._m0[_2374].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2374].w;
}


