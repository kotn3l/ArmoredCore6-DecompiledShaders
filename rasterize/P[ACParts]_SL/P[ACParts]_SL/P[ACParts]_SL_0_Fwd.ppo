#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_SL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_SL_snp_0_Texture2D_14;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_SL_snp_0_Texture2D_19;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_SL_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_SL_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1011;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _244 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _266 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _266.x;
    float _269 = _266.y;
    bool _306 = _268 >= 0.25;
    bool _311 = _268 >= 0.3499999940395355224609375;
    bool _316 = _268 >= 0.5;
    bool _321 = _268 >= 0.64999997615814208984375;
    bool _326 = _268 >= 0.75;
    float _343 = ((_227.x * 4.55000019073486328125) * _244.x) * ((((_326 ? cbMtdParam._m0[10u].x : (_321 ? cbMtdParam._m0[15u].x : (_316 ? cbMtdParam._m0[14u].x : (_311 ? cbMtdParam._m0[13u].x : (_306 ? cbMtdParam._m0[12u].x : cbMtdParam._m0[11u].x))))) - cbMtdParam._m0[9u].x) * _269) + cbMtdParam._m0[9u].x);
    float _346 = ((_227.y * 4.55000019073486328125) * _244.y) * ((((_326 ? cbMtdParam._m0[10u].y : (_321 ? cbMtdParam._m0[15u].y : (_316 ? cbMtdParam._m0[14u].y : (_311 ? cbMtdParam._m0[13u].y : (_306 ? cbMtdParam._m0[12u].y : cbMtdParam._m0[11u].y))))) - cbMtdParam._m0[9u].y) * _269) + cbMtdParam._m0[9u].y);
    float _349 = ((_227.z * 4.55000019073486328125) * _244.z) * ((((_326 ? cbMtdParam._m0[10u].z : (_321 ? cbMtdParam._m0[15u].z : (_316 ? cbMtdParam._m0[14u].z : (_311 ? cbMtdParam._m0[13u].z : (_306 ? cbMtdParam._m0[12u].z : cbMtdParam._m0[11u].z))))) - cbMtdParam._m0[9u].z) * _269) + cbMtdParam._m0[9u].z);
    vec4 _361 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _368 = cbMtdParam._m0[16u].x + _361.x;
    vec4 _381 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _389 = (_381.x * 2.0) + (-1.0);
    float _391 = (_381.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_389, _391), vec2(_389, _391));
    float _3342 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _398 = sqrt(1.0 - (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))));
    float _399 = _381.z * cbMtdParam._m0[16u].y;
    float _403 = (cbMtdParam._m0[16u].z * _389) + _389;
    float _404 = (cbMtdParam._m0[16u].z * _391) + _391;
    float _407 = fma(_398, _202 * NORMAL.x, fma(_404, _209 * TANGENT.x, (_195 * _187) * _403));
    float _410 = fma(_398, _202 * NORMAL.y, fma(_404, _209 * TANGENT.y, (_195 * _188) * _403));
    float _413 = fma(_398, _202 * NORMAL.z, fma(_404, _209 * TANGENT.z, (_195 * _189) * _403));
    float _417 = inversesqrt(dot(vec3(_407, _410, _413), vec3(_407, _410, _413)));
    float _418 = _417 * _407;
    float _419 = _417 * _410;
    float _420 = _417 * _413;
    float _3353 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _421 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _3364 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3375 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3386 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3397 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _425 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _441 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _482 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _492 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _482);
    float _493 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _482);
    float _494 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _482);
    float _498 = inversesqrt(dot(vec3(_492, _493, _494), vec3(_492, _493, _494)));
    float _499 = _492 * _498;
    float _500 = _493 * _498;
    float _501 = _494 * _498;
    float _507 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _508 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _510 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _512 = _510.w;
    float _533 = fma(_420, cbSceneParam._m0[5u].z, fma(_419, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _418));
    float _536 = fma(_420, cbSceneParam._m0[6u].z, fma(_419, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _418));
    float _539 = fma(_420, cbSceneParam._m0[7u].z, fma(_419, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _418));
    vec4 _541 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _552 = (((_541.y - _421) + (_541.w * _421)) * cbMtdParam._m0[3u].x) + _421;
    uint _565 = uint(roundEven(NORMAL.w)) * 13u;
    uint _567 = (_565 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _573 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_567].x;
    float _574 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_567].y;
    float _575 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_567].z;
    float _3408 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _577 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    vec4 _579 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _584 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _595 = (((_584.x - _425) + (_584.w * _425)) * cbMtdParam._m0[3u].x) + _425;
    float _608 = (cbMtdParam._m0[3u].x * (((_576 * _512) - _576) + _579.x)) + _576;
    float _609 = (cbMtdParam._m0[3u].x * (((_577 * _512) - _577) + _579.y)) + _577;
    float _610 = (cbMtdParam._m0[3u].x * (((_578 * _512) - _578) + _579.z)) + _578;
    float _611 = 1.0 - _595;
    float _612 = _611 * _608;
    float _613 = _611 * _609;
    float _614 = _611 * _610;
    float _619 = (_608 + (-0.039999999105930328369140625)) * _595;
    float _620 = (_609 + (-0.039999999105930328369140625)) * _595;
    float _621 = (_610 + (-0.039999999105930328369140625)) * _595;
    float _622 = _619 + 0.039999999105930328369140625;
    float _624 = _620 + 0.039999999105930328369140625;
    float _625 = _621 + 0.039999999105930328369140625;
    vec4 _634 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _507, cbSceneParam._m0[86u].y * _508));
    float _637 = _634.x * TEXCOORD_4;
    float _638 = dot(vec3(_418, _419, _420), vec3(_499, _500, _501));
    float _641 = _638 * 2.0;
    float _645 = (_641 * _418) - _499;
    float _646 = (_641 * _419) - _500;
    float _647 = (_641 * _420) - _501;
    float _651 = abs(dot(vec3(_499, _500, _501), vec3(_418, _419, _420)));
    float _3441 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _653 = sqrt(_552);
    float _666 = exp2((_653 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_653 * 3.0));
    float _672 = (1.0 - _666) * ((_653 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _673 = _666 * _653;
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1010;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _736 = fma(_709, cbModelParam._m0[26u].z, fma(_705, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _701));
        float _740 = fma(_709, cbModelParam._m0[27u].z, fma(_705, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _701));
        float _744 = fma(_709, cbModelParam._m0[28u].z, fma(_705, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _701));
        float _768 = _701 + _418;
        float _769 = _705 + _419;
        float _770 = _709 + _420;
        float _780 = fma(_770, cbModelParam._m0[26u].z, fma(_769, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _768)) - _736;
        float _781 = fma(_770, cbModelParam._m0[27u].z, fma(_769, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _768)) - _740;
        float _782 = fma(_770, cbModelParam._m0[28u].z, fma(_769, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _768)) - _744;
        float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
        float _799 = ((_786 * _780) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_736 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _800 = ((_786 * _781) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_740 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _801 = ((_786 * _782) / cbModelParam._m0[34u].z) + ((((((_744 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        float _838 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_804.x + (-0.5));
        float _840 = _838 * (_804.y + (-0.5));
        float _841 = _838 * (_804.z + (-0.5));
        float _848 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_811.x + (-0.5));
        float _850 = _848 * (_811.y + (-0.5));
        float _851 = _848 * (_811.z + (-0.5));
        float _858 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_818.x + (-0.5));
        float _860 = _858 * (_818.y + (-0.5));
        float _861 = _858 * (_818.z + (-0.5));
        float _868 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_825.x + (-0.5));
        float _870 = _868 * (_825.y + (-0.5));
        float _871 = _868 * (_825.z + (-0.5));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _874 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _875 = _839 * 0.5;
        float _876 = _849 * 0.5;
        float _877 = _859 * 0.5;
        float _878 = dot(vec3(_875, _876, _877), vec3(_875, _876, _877));
        float _883 = (_878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_878);
        float _892 = (dot(vec3(_418, _419, _420), vec3(_883 * _875, _883 * _876, _883 * _877)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _902 = sqrt(((_876 * _876) + (_875 * _875)) + (_877 * _877)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3489 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_904 + 1.0))) + _909) * _872;
        float _919 = _840 * 0.5;
        float _920 = _850 * 0.5;
        float _921 = _860 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _935 = (dot(vec3(_418, _419, _420), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _944 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_873 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3522 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_946 + 1.0))) + _951) * _873;
        float _961 = _841 * 0.5;
        float _962 = _851 * 0.5;
        float _963 = _861 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _977 = (dot(vec3(_418, _419, _420), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _986 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_874 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3555 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_988 + 1.0))) + _993) * _874;
        _1010 = _841;
        _1012 = _840;
        _1013 = _839;
        _1014 = _851;
        _1015 = _850;
        _1016 = _849;
        _1017 = _861;
        _1018 = _860;
        _1019 = _859;
        _1020 = _874;
        _1021 = _873;
        _1022 = _872;
        _1023 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
        _1024 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
        _1025 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
    }
    else
    {
        _1010 = _1011;
        _1012 = _1011;
        _1013 = _1011;
        _1014 = _1011;
        _1015 = _1011;
        _1016 = _1011;
        _1017 = _1011;
        _1018 = _1011;
        _1019 = _1011;
        _1020 = _1011;
        _1021 = _1011;
        _1022 = _1011;
        _1023 = 0.0;
        _1024 = 0.0;
        _1025 = 0.0;
    }
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1051 = fma(_709, cbModelParam._m0[30u].z, fma(_705, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _701));
        float _1055 = fma(_709, cbModelParam._m0[31u].z, fma(_705, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _701));
        float _1059 = fma(_709, cbModelParam._m0[32u].z, fma(_705, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _701));
        float _1082 = _701 + _418;
        float _1083 = _705 + _419;
        float _1084 = _709 + _420;
        float _1094 = fma(_1084, cbModelParam._m0[30u].z, fma(_1083, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1082)) - _1051;
        float _1095 = fma(_1084, cbModelParam._m0[31u].z, fma(_1083, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1082)) - _1055;
        float _1096 = fma(_1084, cbModelParam._m0[32u].z, fma(_1083, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1082)) - _1059;
        float _1100 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
        float _1113 = ((_1100 * _1094) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1051 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1100 * _1095) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1055 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1100 * _1096) / cbModelParam._m0[35u].z) + ((((((_1059 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        float _1150 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1117.x + (-0.5));
        float _1152 = _1150 * (_1117.y + (-0.5));
        float _1153 = _1150 * (_1117.z + (-0.5));
        float _1160 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1124.x + (-0.5));
        float _1162 = _1160 * (_1124.y + (-0.5));
        float _1163 = _1160 * (_1124.z + (-0.5));
        float _1170 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1131.x + (-0.5));
        float _1172 = _1170 * (_1131.y + (-0.5));
        float _1173 = _1170 * (_1131.z + (-0.5));
        float _1180 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1138.x + (-0.5));
        float _1182 = _1180 * (_1138.y + (-0.5));
        float _1183 = _1180 * (_1138.z + (-0.5));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = _1151 * 0.5;
        float _1188 = _1161 * 0.5;
        float _1189 = _1171 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_418, _419, _420), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3618 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1214 + 1.0))) + _1219) * _1184;
        float _1229 = _1152 * 0.5;
        float _1230 = _1162 * 0.5;
        float _1231 = _1172 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_418, _419, _420), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3651 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1256 + 1.0))) + _1261) * _1185;
        float _1271 = _1153 * 0.5;
        float _1272 = _1163 * 0.5;
        float _1273 = _1173 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_418, _419, _420), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3684 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1298 + 1.0))) + _1303) * _1186;
        _1320 = _1153;
        _1321 = _1152;
        _1322 = _1151;
        _1323 = _1163;
        _1324 = _1162;
        _1325 = _1161;
        _1326 = _1173;
        _1327 = _1172;
        _1328 = _1171;
        _1329 = _1186;
        _1330 = _1185;
        _1331 = _1184;
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1333 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
    }
    else
    {
        _1320 = _1011;
        _1321 = _1011;
        _1322 = _1011;
        _1323 = _1011;
        _1324 = _1011;
        _1325 = _1011;
        _1326 = _1011;
        _1327 = _1011;
        _1328 = _1011;
        _1329 = _1011;
        _1330 = _1011;
        _1331 = _1011;
        _1332 = 0.0;
        _1333 = 0.0;
        _1334 = 0.0;
    }
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1023)) + _1023;
    float _1345 = (cbModelParam._m0[1u].x * (_1333 - _1024)) + _1024;
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1025)) + _1025;
    float _1367 = fma(_1346, cbSceneParam._m0[89u].z, fma(_1345, cbSceneParam._m0[89u].y, _1344 * cbSceneParam._m0[89u].x));
    float _1370 = fma(_1346, cbSceneParam._m0[90u].z, fma(_1345, cbSceneParam._m0[90u].y, _1344 * cbSceneParam._m0[90u].x));
    float _1373 = fma(_1346, cbSceneParam._m0[91u].z, fma(_1345, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1344));
    float _1388 = _645 * 0.5;
    float _1389 = _646 * 0.5;
    float _1390 = _647 * 0.5;
    float _1391 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1394 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1321, _1324, _1327, _1330));
    float _1397 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1431;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1404 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1010, _1014, _1017, _1020));
        float _1408 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1012, _1015, _1018, _1021));
        float _1412 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1013, _1016, _1019, _1022));
        float _1419 = dot(vec4(cbModelParam._m0[39u]), vec4(_1388, _1389, _1390, 1.0));
        _1431 = dot(vec3(isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1419) ? 0.0 : (isnan(0.0) ? _1419 : max(0.0, _1419))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1431 = 1.0;
    }
    float _1442;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1433 = dot(vec4(cbModelParam._m0[40u]), vec4(_1388, _1389, _1390, 1.0));
        _1442 = dot(vec3(isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1433) ? 0.0 : (isnan(0.0) ? _1433 : max(0.0, _1433))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1442 = 1.0;
    }
    float _1446 = (_1442 * cbModelParam._m0[1u].x) + (_1431 * (1.0 - cbModelParam._m0[1u].x));
    float _1456 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _552);
    float _1457 = isnan(_1456) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1456 : min(cbModelParam._m0[25u].z, _1456));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1504 = fma(_709, cbModelParam._m0[13u].z, fma(_705, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _701)) + cbModelParam._m0[13u].w;
        float _1508 = fma(_709, cbModelParam._m0[14u].z, fma(_705, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _701)) + cbModelParam._m0[14u].w;
        float _1512 = fma(_709, cbModelParam._m0[15u].z, fma(_705, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _701)) + cbModelParam._m0[15u].w;
        float _1515 = fma(_647, cbModelParam._m0[13u].z, fma(_646, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _645));
        float _1518 = fma(_647, cbModelParam._m0[14u].z, fma(_646, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _645));
        float _1521 = fma(_647, cbModelParam._m0[15u].z, fma(_646, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _645));
        float _1549;
        if (_1515 > 0.0)
        {
            _1549 = abs((1.0 - _1504) / _1515);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1504 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1549 = frontier_phi_14_12_ladder;
        }
        float _1755;
        if (_1518 > 0.0)
        {
            _1755 = abs((1.0 - _1508) / _1518);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1508 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1755 = frontier_phi_23_19_ladder;
        }
        float _2009;
        if (_1521 > 0.0)
        {
            _2009 = abs((1.0 - _1512) / _1521);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1512 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2009 = frontier_phi_35_30_ladder;
        }
        float _2011 = isnan(_1755) ? _1549 : (isnan(_1549) ? _1755 : min(_1549, _1755));
        float _2012 = isnan(_2009) ? _2011 : (isnan(_2011) ? _2009 : min(_2011, _2009));
        float _2016 = (_2012 * _1515) + _1504;
        float _2017 = (_2012 * _1518) + _1508;
        float _2018 = (_2012 * _1521) + _1512;
        float _2019 = _2012 * 9.9999997473787516355514526367188e-05;
        float _2021 = (-1.0) - _2019;
        float _2023 = _2019 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2018 > _2023) || ((_2018 < _2021) || ((_2017 > _2023) || ((_2017 < _2021) || ((_2016 < _2021) || (_2016 > _2023))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2146 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2018, cbModelParam._m0[9u].z, fma(_2017, cbModelParam._m0[9u].y, _2016 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2018, cbModelParam._m0[10u].z, fma(_2017, cbModelParam._m0[10u].y, _2016 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2018, cbModelParam._m0[11u].z, fma(_2017, cbModelParam._m0[11u].y, _2016 * cbModelParam._m0[11u].x))), _1457);
            frontier_phi_13_35_ladder = _2146.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2146.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2146.x * cbModelParam._m0[1u].y;
        }
        _1537 = frontier_phi_13_35_ladder_2;
        _1539 = frontier_phi_13_35_ladder_1;
        _1541 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_645, _646, _647), _1457);
        _1537 = _1525.x * cbModelParam._m0[1u].y;
        _1539 = _1525.y * cbModelParam._m0[1u].y;
        _1541 = _1525.z * cbModelParam._m0[1u].y;
    }
    float _1545 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _552);
    float _1546 = isnan(_1545) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1545 : min(cbModelParam._m0[25u].w, _1545));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1603 = fma(_709, cbModelParam._m0[21u].z, fma(_705, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _701)) + cbModelParam._m0[21u].w;
        float _1607 = fma(_709, cbModelParam._m0[22u].z, fma(_705, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _701)) + cbModelParam._m0[22u].w;
        float _1611 = fma(_709, cbModelParam._m0[23u].z, fma(_705, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _701)) + cbModelParam._m0[23u].w;
        float _1614 = fma(_647, cbModelParam._m0[21u].z, fma(_646, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _645));
        float _1617 = fma(_647, cbModelParam._m0[22u].z, fma(_646, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _645));
        float _1620 = fma(_647, cbModelParam._m0[23u].z, fma(_646, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _645));
        float _1760;
        if (_1614 > 0.0)
        {
            _1760 = abs((1.0 - _1603) / _1614);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1603 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1760 = frontier_phi_25_21_ladder;
        }
        float _2036;
        if (_1617 > 0.0)
        {
            _2036 = abs((1.0 - _1607) / _1617);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1607 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2036 = frontier_phi_37_32_ladder;
        }
        float _2249;
        if (_1620 > 0.0)
        {
            _2249 = abs((1.0 - _1611) / _1620);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1611 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2249 = frontier_phi_46_43_ladder;
        }
        float _2251 = isnan(_2036) ? _1760 : (isnan(_1760) ? _2036 : min(_1760, _2036));
        float _2252 = isnan(_2249) ? _2251 : (isnan(_2251) ? _2249 : min(_2251, _2249));
        float _2256 = (_2252 * _1614) + _1603;
        float _2257 = (_2252 * _1617) + _1607;
        float _2258 = (_2252 * _1620) + _1611;
        float _2259 = _2252 * 9.9999997473787516355514526367188e-05;
        float _2260 = (-1.0) - _2259;
        float _2262 = _2259 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2258 > _2262) || ((_2258 < _2260) || ((_2257 > _2262) || ((_2257 < _2260) || ((_2256 < _2260) || (_2256 > _2262))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2457 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2258, cbModelParam._m0[17u].z, fma(_2257, cbModelParam._m0[17u].y, _2256 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2258, cbModelParam._m0[18u].z, fma(_2257, cbModelParam._m0[18u].y, _2256 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2258, cbModelParam._m0[19u].z, fma(_2257, cbModelParam._m0[19u].y, _2256 * cbModelParam._m0[19u].x))), _1546);
            frontier_phi_22_46_ladder = _2457.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2457.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2457.x * cbModelParam._m0[1u].z;
        }
        _1639 = frontier_phi_22_46_ladder_2;
        _1641 = frontier_phi_22_46_ladder_1;
        _1643 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1623 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_645, _646, _647), _1546);
        _1639 = _1623.x * cbModelParam._m0[1u].z;
        _1641 = _1623.y * cbModelParam._m0[1u].z;
        _1643 = _1623.z * cbModelParam._m0[1u].z;
    }
    float _1656 = (((_672 * _622) + _673) * _637) * ((cbModelParam._m0[1u].w * (_1639 - _1537)) + _1537);
    float _1658 = (((_672 * _624) + _673) * _637) * ((cbModelParam._m0[1u].w * (_1641 - _1539)) + _1539);
    float _1660 = (((_672 * _625) + _673) * _637) * ((cbModelParam._m0[1u].w * (_1643 - _1541)) + _1541);
    float _1663 = fma(_1660, cbSceneParam._m0[89u].z, fma(_1658, cbSceneParam._m0[89u].y, _1656 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1660, cbSceneParam._m0[90u].z, fma(_1658, cbSceneParam._m0[90u].y, _1656 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1660, cbSceneParam._m0[91u].z, fma(_1658, cbSceneParam._m0[91u].y, _1656 * cbSceneParam._m0[91u].x));
    uvec4 _1679 = floatBitsToUint(cbInstanceData._m0[_565 + 5u]);
    uint _1681 = _1679.x * 14u;
    uint _1682 = _1681 + 13u;
    float _1689 = _637 + (-1.0);
    float _1694 = (cbLight._m0[_1682].x * _1689) + 1.0;
    float _1695 = (cbLight._m0[_1682].y * _1689) + 1.0;
    float _1696 = (cbLight._m0[_1682].z * _1689) + 1.0;
    float _1697 = (cbLight._m0[_1682].w * _1689) + 1.0;
    uint _1698 = _1681 + 5u;
    float _1704 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
    uint _1708 = _1681 + 4u;
    float _1714 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
    uint _1718 = _1681 | 1u;
    float _1729 = dot(vec3(cbLight._m0[_1681].xyz), vec3(_418, _419, _420));
    float _1732 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_418, _419, _420));
    float _3820 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _3831 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1737 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1739 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.3183098733425140380859375;
    float _1746 = ((cbLight._m0[_1698].x * _1704) * _1739) + ((cbLight._m0[_1708].x * _1714) * _1737);
    float _1747 = ((_1704 * cbLight._m0[_1698].y) * _1739) + ((_1714 * cbLight._m0[_1708].y) * _1737);
    float _1748 = ((_1704 * cbLight._m0[_1698].z) * _1739) + ((_1714 * cbLight._m0[_1708].z) * _1737);
    uvec4 _1752 = floatBitsToUint(cbLight._m0[_1681 + 12u]);
    bool _1754 = _1752.x == 0u;
    float _1765;
    float _1767;
    float _1769;
    if (_1754)
    {
        _1765 = _1746;
        _1767 = _1747;
        _1769 = _1748;
    }
    else
    {
        uint _1773 = _1681 + 6u;
        float _1789 = (dot(vec3(cbLight._m0[_1681 + 2u].xyz), vec3(_418, _419, _420)) * 0.5) + 0.5;
        float _1790 = _1789 * _1789;
        float _3842 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1792 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
        _1765 = (((cbLight._m0[_1773].x * 0.3183098733425140380859375) * _1791) * _1792) + _1746;
        _1767 = (((cbLight._m0[_1773].y * 0.3183098733425140380859375) * _1791) * _1792) + _1747;
        _1769 = (((cbLight._m0[_1773].z * 0.3183098733425140380859375) * _1791) * _1792) + _1748;
    }
    bool _1772 = _1752.y == 0u;
    float _1810;
    float _1812;
    float _1814;
    if (_1772)
    {
        _1810 = _1765;
        _1812 = _1767;
        _1814 = _1769;
    }
    else
    {
        uint _1980 = _1681 + 7u;
        float _1996 = (dot(vec3(cbLight._m0[_1681 + 3u].xyz), vec3(_418, _419, _420)) * 0.5) + 0.5;
        float _1997 = _1996 * _1996;
        float _3858 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1999 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
        _1810 = (((cbLight._m0[_1980].x * 0.3183098733425140380859375) * _1998) * _1999) + _1765;
        _1812 = (((cbLight._m0[_1980].y * 0.3183098733425140380859375) * _1998) * _1999) + _1767;
        _1814 = (((cbLight._m0[_1980].z * 0.3183098733425140380859375) * _1998) * _1999) + _1769;
    }
    uint _1817 = _1681 + 8u;
    float _1830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1681].w)) * _552) * 0.949999988079071044921875);
    float _1831 = _1830 * _1830;
    float _1832 = cbLight._m0[_1681].x + _499;
    float _1833 = cbLight._m0[_1681].y + _500;
    float _1834 = cbLight._m0[_1681].z + _501;
    float _1838 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
    float _1839 = _1838 * _1832;
    float _1840 = _1838 * _1833;
    float _1841 = _1838 * _1834;
    float _1842 = dot(vec3(_418, _419, _420), vec3(cbLight._m0[_1681].xyz));
    float _3874 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _1846 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1847 = dot(vec3(_418, _419, _420), vec3(_1839, _1840, _1841));
    float _3896 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1851 = dot(vec3(cbLight._m0[_1681].xyz), vec3(_1839, _1840, _1841));
    float _3907 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1855 = _1831 * _1831;
    float _1859 = ((_1850 * _1850) * (_1855 + (-1.0))) + 1.0;
    float _1867 = exp2(log2(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * 5.0);
    float _1868 = 0.959999978542327880859375 - _619;
    float _1870 = 0.959999978542327880859375 - _620;
    float _1871 = 0.959999978542327880859375 - _621;
    float _1878 = 1.0 - _1831;
    float _1889 = (0.5 / (((_1846 * ((_1845 * _1878) + _1831)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _1878) + _1831) * _1845))) * _1845;
    float _3918 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1855 / ((_1859 * _1859) * 3.141590118408203125));
    uint _1902 = _1681 + 9u;
    float _1913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1718].w)) * _552) * 0.949999988079071044921875);
    float _1914 = _1913 * _1913;
    float _1915 = cbLight._m0[_1718].x + _499;
    float _1916 = cbLight._m0[_1718].y + _500;
    float _1917 = cbLight._m0[_1718].z + _501;
    float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
    float _1922 = _1921 * _1915;
    float _1923 = _1921 * _1916;
    float _1924 = _1921 * _1917;
    float _1925 = dot(vec3(_418, _419, _420), vec3(cbLight._m0[_1718].xyz));
    float _3929 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1929 = dot(vec3(_418, _419, _420), vec3(_1922, _1923, _1924));
    float _3940 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_1922, _1923, _1924));
    float _3951 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1914 * _1914;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1948 = exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0);
    float _1955 = 1.0 - _1914;
    float _1965 = (0.5 / (((_1846 * ((_1928 * _1955) + _1914)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _1955) + _1914) * _1928))) * _1928;
    float _3962 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1967 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    float _1977 = (((((_1948 * _1868) + _622) * cbLight._m0[_1902].x) * _1967) * _1704) + (((((_1867 * _1868) + _622) * cbLight._m0[_1817].x) * _1891) * _1714);
    float _1978 = (((((_1948 * _1870) + _624) * cbLight._m0[_1902].y) * _1967) * _1704) + (((((_1867 * _1870) + _624) * cbLight._m0[_1817].y) * _1891) * _1714);
    float _1979 = (((((_1948 * _1871) + _625) * cbLight._m0[_1902].z) * _1967) * _1704) + (((((_1867 * _1871) + _625) * cbLight._m0[_1817].z) * _1891) * _1714);
    float _2041;
    float _2043;
    float _2045;
    if (_1754)
    {
        _2041 = _1977;
        _2043 = _1978;
        _2045 = _1979;
    }
    else
    {
        uint _2047 = _1681 + 2u;
        uint _2051 = _1681 + 10u;
        float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _552) * 0.949999988079071044921875);
        float _2066 = _2065 * _2065;
        float _2067 = cbLight._m0[_2047].x + _499;
        float _2068 = cbLight._m0[_2047].y + _500;
        float _2069 = cbLight._m0[_2047].z + _501;
        float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
        float _2074 = _2073 * _2067;
        float _2075 = _2073 * _2068;
        float _2076 = _2073 * _2069;
        float _2077 = dot(vec3(_418, _419, _420), vec3(cbLight._m0[_2047].xyz));
        float _3973 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _2081 = dot(vec3(_418, _419, _420), vec3(_2074, _2075, _2076));
        float _3984 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _2085 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2074, _2075, _2076));
        float _3995 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2089 = _2066 * _2066;
        float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
        float _2100 = exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0);
        float _2107 = 1.0 - _2066;
        float _2117 = (0.5 / (((_1846 * ((_2080 * _2107) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _2107) + _2066) * _2080))) * _2080;
        float _4006 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2119 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
        float _2120 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
        _2041 = (((((_2100 * _1868) + _622) * cbLight._m0[_2051].x) * _2119) * _2120) + _1977;
        _2043 = (((((_2100 * _1870) + _624) * cbLight._m0[_2051].y) * _2119) * _2120) + _1978;
        _2045 = (((((_2100 * _1871) + _625) * cbLight._m0[_2051].z) * _2119) * _2120) + _1979;
    }
    float _2155;
    float _2157;
    float _2159;
    if (_1772)
    {
        _2155 = _2041;
        _2157 = _2043;
        _2159 = _2045;
    }
    else
    {
        uint _2166 = _1681 + 3u;
        uint _2170 = _1681 + 11u;
        float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _552) * 0.949999988079071044921875);
        float _2185 = _2184 * _2184;
        float _2186 = cbLight._m0[_2166].x + _499;
        float _2187 = cbLight._m0[_2166].y + _500;
        float _2188 = cbLight._m0[_2166].z + _501;
        float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
        float _2193 = _2192 * _2186;
        float _2194 = _2192 * _2187;
        float _2195 = _2192 * _2188;
        float _2196 = dot(vec3(_418, _419, _420), vec3(cbLight._m0[_2166].xyz));
        float _4022 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2200 = dot(vec3(_418, _419, _420), vec3(_2193, _2194, _2195));
        float _4033 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2203 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2204 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2193, _2194, _2195));
        float _4044 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2208 = _2185 * _2185;
        float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
        float _2219 = exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0);
        float _2226 = 1.0 - _2185;
        float _2236 = (0.5 / (((_1846 * ((_2199 * _2226) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _2226) + _2185) * _2199))) * _2199;
        float _4055 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2238 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
        float _2239 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
        _2155 = (((((_2219 * _1868) + _622) * cbLight._m0[_2170].x) * _2238) * _2239) + _2041;
        _2157 = (((((_2219 * _1870) + _624) * cbLight._m0[_2170].y) * _2238) * _2239) + _2043;
        _2159 = (((((_2219 * _1871) + _625) * cbLight._m0[_2170].z) * _2238) * _2239) + _2045;
    }
    float _2374;
    float _2376;
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    if (_1679.y == 0u)
    {
        float _2314 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2315 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2314;
        float _2316 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2314;
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2314;
        uvec4 _2329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2330 = _2329.x;
        uint _2341 = uint((float(_2329.y) * floor(float(uint(cbSceneParam._m0[85u].y * _508) / _2330))) + floor(float(uint(cbSceneParam._m0[85u].x * _507) / _2330)));
        float _2351 = (log2(_2317 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2352 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        uint _2355 = uint(isnan(14.0) ? _2352 : (isnan(_2352) ? 14.0 : min(_2352, 14.0)));
        uvec4 _2360 = texelFetch(g_lightClusterGridBuffer, int(((_2355 << 2u) + (_2341 << 6u)) >> 2u));
        uint _2361 = _2360.x;
        uint _2362 = _2329.z;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        if (((((1u << ((_2362 >> 4u) & 15u)) + 4294967295u) & _2361) == 0u) || ((_2362 & 240u) == 0u))
        {
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
            _2472 = 0.0;
        }
        else
        {
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2473;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            uint _2613 = 0u;
            uint _2622;
            bool _2623;
            for (;;)
            {
                _2622 = texelFetch(g_lightClassification, int((((_2355 << 5u) + (_2341 << 9u)) + (_2613 << 2u)) >> 2u)).x;
                _2623 = _2622 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2623)
                {
                    frontier_phi_61_pred = _2607;
                    frontier_phi_61_pred_1 = _2612;
                    frontier_phi_61_pred_2 = _2611;
                    frontier_phi_61_pred_3 = _2610;
                    frontier_phi_61_pred_4 = _2609;
                    frontier_phi_61_pred_5 = _2608;
                }
                else
                {
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    uint _2737;
                    _2731 = _2607;
                    _2732 = _2608;
                    _2733 = _2609;
                    _2734 = _2610;
                    _2735 = _2611;
                    _2736 = _2612;
                    _2737 = _2622;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    for (;;)
                    {
                        uint _2741 = uint(findLSB(_2737)) + (_2613 << 5u);
                        uint _2738 = (_2737 + 4294967295u) & _2737;
                        uint _2743 = _2741 * 48u;
                        vec4 _2757 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2743)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 3u)).x));
                        uint _2763 = (_2741 * 48u) + 4u;
                        vec4 _2776 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 3u)).x));
                        uint _2782 = (_2741 * 48u) + 8u;
                        vec3 _2793 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2782)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 2u)).x));
                        float _2797 = _2757.x - _2315;
                        float _2798 = _2757.y - _2316;
                        float _2799 = _2757.z - _2317;
                        float _2800 = dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799));
                        float _2803 = inversesqrt(_2800);
                        float _2804 = _2803 * _2797;
                        float _2805 = _2803 * _2798;
                        float _2806 = _2803 * _2799;
                        float _2807 = dot(vec3(_533, _536, _539), vec3(_2804, _2805, _2806));
                        float _2812 = 1.0 - (_2800 * _2757.w);
                        float _4081 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2813 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2814 = sqrt(_2800) * _2776.w;
                        float _2817 = 1.39999997615814208984375 / (_2814 + 1.39999997615814208984375);
                        float _2818 = _2817 * _2817;
                        float _2821 = ((1.0 - _2818) * _2807) + _2818;
                        float _2824 = _2814 * _2814;
                        float _2828 = ((isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0))) * _2813) / ((_2824 * 0.699999988079071044921875) + 1.0);
                        float _2832 = (-0.0) - _2315;
                        float _2833 = (-0.0) - _2316;
                        float _2834 = (-0.0) - _2317;
                        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
                        float _2839 = _2838 * _2832;
                        float _2840 = _2838 * _2833;
                        float _2841 = _2838 * _2834;
                        float _2848 = exp2(log2(1.0 / ((_2824 * 3.5) + 5.0)) * 0.25);
                        float _2849 = 1.0 - _653;
                        float _2856 = sqrt(1.0 - ((1.0 - (_2849 * _2849)) * (1.0 - (_2848 * _2848))));
                        float _2857 = _2856 * _2856;
                        float _2858 = _2857 * _2857;
                        float _2859 = _2839 + _2804;
                        float _2860 = _2840 + _2805;
                        float _2861 = _2841 + _2806;
                        float _2865 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
                        float _2869 = dot(vec3(_533, _536, _539), vec3(_2839, _2840, _2841));
                        float _4097 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2872 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2873 = dot(vec3(_533, _536, _539), vec3(_2865 * _2859, _2865 * _2860, _2865 * _2861));
                        float _4108 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2876 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2880 = ((_2876 * _2876) * (_2858 + (-1.0))) + 1.0;
                        float _2881 = _2817 * _2857;
                        float _2882 = _2881 * _2881;
                        float _2885 = ((1.0 - _2882) * _2807) + _2882;
                        float _4119 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2886 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2887 = 1.0 - _2857;
                        float _2897 = (0.5 / (((_2886 * ((_2872 * _2887) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2886 * _2887) + _2857) * _2872))) * _2886;
                        float _4130 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2908 = (((_2858 * 3.1415927410125732421875) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) / ((_2880 * _2880) * ((_2824 * 2.1991131305694580078125) + 3.141590118408203125))) * _2813;
                        _2666 = (_2828 * _2776.x) + _2734;
                        _2667 = (_2828 * _2776.y) + _2735;
                        _2668 = (_2828 * _2776.z) + _2736;
                        _2663 = (_2908 * _2793.x) + _2731;
                        _2664 = (_2908 * _2793.y) + _2732;
                        _2665 = (_2908 * _2793.z) + _2733;
                        if (_2738 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2731 = _2663;
                            _2732 = _2664;
                            _2733 = _2665;
                            _2734 = _2666;
                            _2735 = _2667;
                            _2736 = _2668;
                            _2737 = _2738;
                        }
                    }
                    frontier_phi_61_pred = _2663;
                    frontier_phi_61_pred_1 = _2668;
                    frontier_phi_61_pred_2 = _2667;
                    frontier_phi_61_pred_3 = _2666;
                    frontier_phi_61_pred_4 = _2665;
                    frontier_phi_61_pred_5 = _2664;
                }
                _2463 = frontier_phi_61_pred;
                _2473 = frontier_phi_61_pred_1;
                _2471 = frontier_phi_61_pred_2;
                _2469 = frontier_phi_61_pred_3;
                _2467 = frontier_phi_61_pred_4;
                _2465 = frontier_phi_61_pred_5;
                uint _2614 = _2613 + 1u;
                if (_2614 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2607 = _2463;
                    _2608 = _2465;
                    _2609 = _2467;
                    _2610 = _2469;
                    _2611 = _2471;
                    _2612 = _2473;
                    _2613 = _2614;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
            _2472 = _2473;
        }
        uvec4 _2476 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2477 = _2476.z;
        uint _2479 = (_2477 >> 8u) & 15u;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        if (((4294967295u << _2479) & _2361) == 0u)
        {
            _2575 = _2462;
            _2577 = _2464;
            _2579 = _2466;
            _2581 = _2468;
            _2583 = _2470;
            _2585 = _2472;
        }
        else
        {
            float _2600 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
            float _2601 = _2600 * _2315;
            float _2602 = _2600 * _2316;
            float _2603 = _2600 * _2317;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2479 < ((_2477 >> 12u) & 15u))
            {
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2714 = _2462;
                float _2715 = _2464;
                float _2716 = _2466;
                float _2717 = _2468;
                float _2718 = _2470;
                float _2719 = _2472;
                uint _2720 = _2479;
                uint _2729;
                bool _2730;
                for (;;)
                {
                    _2729 = texelFetch(g_lightClassification, int((((_2355 << 5u) + (_2341 << 9u)) + (_2720 << 2u)) >> 2u)).x;
                    _2730 = _2729 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2730)
                    {
                        frontier_phi_67_pred = _2717;
                        frontier_phi_67_pred_1 = _2718;
                        frontier_phi_67_pred_2 = _2719;
                        frontier_phi_67_pred_3 = _2716;
                        frontier_phi_67_pred_4 = _2715;
                        frontier_phi_67_pred_5 = _2714;
                    }
                    else
                    {
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _2926 = _2714;
                        float _2927 = _2715;
                        float _2928 = _2716;
                        float _2929 = _2717;
                        float _2930 = _2718;
                        float _2931 = _2719;
                        uint _2932 = _2729;
                        uint _2933;
                        vec4 _2958;
                        float _2959;
                        vec4 _2974;
                        vec3 _2986;
                        vec4 _3001;
                        vec4 _3017;
                        float _3064;
                        bool _3065;
                        for (;;)
                        {
                            uint _2943 = ((_2720 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2932));
                            _2933 = (_2932 + 4294967295u) & _2932;
                            uint _2945 = _2943 * 40u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            _2959 = _2958.w;
                            uint _2961 = (_2943 * 40u) + 4u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2976 = (_2943 * 40u) + 8u;
                            _2986 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x));
                            uint _2988 = (_2943 * 40u) + 16u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3004 = (_2943 * 40u) + 20u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            uint _3020 = (_2943 * 40u) + 24u;
                            vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3039 = (_2943 * 40u) + 28u;
                            vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            _3064 = fma(_2317, _3052.z, fma(_2316, _3052.y, _3052.x * _2315)) + _3052.w;
                            _3065 = !((fma(_2317, _3033.z, fma(_2316, _3033.y, _3033.x * _2315)) + _3033.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3065)
                            {
                                float _3092 = _2958.x - _2315;
                                float _3093 = _2958.y - _2316;
                                float _3094 = _2958.z - _2317;
                                float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                                float _3098 = inversesqrt(_3095);
                                float _3099 = _3098 * _3092;
                                float _3100 = _3098 * _3093;
                                float _3101 = _3098 * _3094;
                                float _3105 = 1.0 - (_3095 / (_2959 * _2959));
                                float _4141 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3110 = sqrt(_3095) * _2974.w;
                                float _3112 = 1.39999997615814208984375 / (_3110 + 1.39999997615814208984375);
                                float _3113 = _3112 * _3112;
                                float _3116 = ((1.0 - _3113) * dot(vec3(_3099, _3100, _3101), vec3(_533, _536, _539))) + _3113;
                                float _3119 = _3110 * _3110;
                                float _3123 = (fma(_2317, _3001.z, fma(_2316, _3001.y, _3001.x * _2315)) + _3001.w) / _3064;
                                float _3124 = (fma(_2317, _3017.z, fma(_2316, _3017.y, _3017.x * _2315)) + _3017.w) / _3064;
                                float _3128 = 1.0 - dot(vec2(_3123, _3124), vec2(_3123, _3124));
                                float _4157 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3129 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3130 = _3129 * (((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3106) / ((_3119 * 0.699999988079071044921875) + 1.0));
                                float _3142 = exp2(log2(1.0 / ((_3119 * 3.5) + 5.0)) * 0.25);
                                float _3143 = 1.0 - _653;
                                float _3150 = sqrt(1.0 - ((1.0 - (_3143 * _3143)) * (1.0 - (_3142 * _3142))));
                                float _3151 = _3150 * _3150;
                                float _3152 = _3151 * _3151;
                                float _3153 = _3099 - _2601;
                                float _3154 = _3100 - _2602;
                                float _3155 = _3101 - _2603;
                                float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                                float _3163 = dot(vec3(_533, _536, _539), vec3((-0.0) - _2601, (-0.0) - _2602, (-0.0) - _2603));
                                float _4168 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3166 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3167 = dot(vec3(_533, _536, _539), vec3(_3159 * _3153, _3159 * _3154, _3159 * _3155));
                                float _4179 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3170 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3174 = ((_3170 * _3170) * (_3152 + (-1.0))) + 1.0;
                                float _3175 = _3112 * _3151;
                                float _3176 = _3175 * _3175;
                                float _3182 = ((1.0 - _3176) * dot(vec3(_533, _536, _539), vec3(_3099, _3100, _3101))) + _3176;
                                float _4190 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3183 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3184 = 1.0 - _3151;
                                float _3194 = (0.5 / (((_3183 * ((_3166 * _3184) + _3151)) + 9.9999999392252902907785028219223e-09) + (((_3183 * _3184) + _3151) * _3166))) * _3183;
                                float _4201 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3204 = (_3129 * _3106) * (((_3152 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_3174 * _3174) * ((_3119 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3204 * _2986.x;
                                frontier_phi_73_pred_1 = _3204 * _2986.y;
                                frontier_phi_73_pred_2 = _3130 * _2974.z;
                                frontier_phi_73_pred_3 = _3130 * _2974.y;
                                frontier_phi_73_pred_4 = _3130 * _2974.x;
                                frontier_phi_73_pred_5 = _3204 * _2986.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3208 = frontier_phi_73_pred;
                            _3209 = frontier_phi_73_pred_1;
                            _3213 = frontier_phi_73_pred_2;
                            _3212 = frontier_phi_73_pred_3;
                            _3211 = frontier_phi_73_pred_4;
                            _3210 = frontier_phi_73_pred_5;
                            _2916 = _3211 + _2929;
                            _2917 = _3212 + _2930;
                            _2918 = _3213 + _2931;
                            _2913 = _3208 + _2926;
                            _2914 = _3209 + _2927;
                            _2915 = _3210 + _2928;
                            if (_2933 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2933;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2916;
                        frontier_phi_67_pred_1 = _2917;
                        frontier_phi_67_pred_2 = _2918;
                        frontier_phi_67_pred_3 = _2915;
                        frontier_phi_67_pred_4 = _2914;
                        frontier_phi_67_pred_5 = _2913;
                    }
                    _2582 = frontier_phi_67_pred;
                    _2584 = frontier_phi_67_pred_1;
                    _2586 = frontier_phi_67_pred_2;
                    _2580 = frontier_phi_67_pred_3;
                    _2578 = frontier_phi_67_pred_4;
                    _2576 = frontier_phi_67_pred_5;
                    uint _2721 = _2720 + 1u;
                    if (_2721 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2714 = _2576;
                        _2715 = _2578;
                        _2716 = _2580;
                        _2717 = _2582;
                        _2718 = _2584;
                        _2719 = _2586;
                        _2720 = _2721;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2584;
                frontier_phi_55_56_ladder_1 = _2586;
                frontier_phi_55_56_ladder_2 = _2582;
                frontier_phi_55_56_ladder_3 = _2580;
                frontier_phi_55_56_ladder_4 = _2578;
                frontier_phi_55_56_ladder_5 = _2576;
            }
            else
            {
                frontier_phi_55_56_ladder = _2470;
                frontier_phi_55_56_ladder_1 = _2472;
                frontier_phi_55_56_ladder_2 = _2468;
                frontier_phi_55_56_ladder_3 = _2466;
                frontier_phi_55_56_ladder_4 = _2464;
                frontier_phi_55_56_ladder_5 = _2462;
            }
            _2575 = frontier_phi_55_56_ladder_5;
            _2577 = frontier_phi_55_56_ladder_4;
            _2579 = frontier_phi_55_56_ladder_3;
            _2581 = frontier_phi_55_56_ladder_2;
            _2583 = frontier_phi_55_56_ladder;
            _2585 = frontier_phi_55_56_ladder_1;
        }
        float _2590 = isnan(1.0) ? _637 : (isnan(_637) ? 1.0 : min(_637, 1.0));
        _2374 = (_2590 * _2581) + _1810;
        _2376 = (_2590 * _2583) + _1812;
        _2378 = (_2590 * _2585) + _1814;
        _2380 = ((_2575 * _622) * _2590) + _2155;
        _2382 = ((_2577 * _624) * _2590) + _2157;
        _2384 = ((_2579 * _625) * _2590) + _2159;
    }
    else
    {
        _2374 = _1810;
        _2376 = _1812;
        _2378 = _1814;
        _2380 = _2155;
        _2382 = _2157;
        _2384 = _2159;
    }
    float _4217 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4228 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4239 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    uint _2404 = _565 + 6u;
    float _2412 = _507 / cbSceneParam._m0[86u].x;
    float _2413 = _508 / cbSceneParam._m0[86u].y;
    vec4 _2427 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2412, _2413, (log2((isnan(cbSceneParam._m0[77u].w) ? _441 : (isnan(_441) ? cbSceneParam._m0[77u].w : min(_441, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2429 = _2427.x;
    float _2430 = _2427.y;
    float _2431 = _2427.z;
    float _2432 = _2427.w;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    if (_441 > cbSceneParam._m0[78u].w)
    {
        float _2487 = isnan(_441) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _441 : min(cbSceneParam._m0[80u].w, _441));
        float _2488 = _2487 / _441;
        float _2499 = _2488 * _492;
        float _2500 = _493 * _2488;
        float _2501 = (-0.0) - _2500;
        float _2503 = _2488 * _494;
        float _2505 = (cbSceneParam._m0[77u].w * _2501) / _2487;
        float _2506 = _2505 + cbSceneParam._m0[79u].w;
        float _2507 = cbSceneParam._m0[79u].w - _2500;
        float _2513 = sqrt(((_2499 * _2499) + (_2500 * _2500)) + (_2503 * _2503));
        float _2516 = (1.0 - (cbSceneParam._m0[77u].w / _2487)) * _2513;
        float _2521 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2523 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2676;
        if (abs((_2501 - _2505) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2676 = ((((_2506 > 0.0) ? exp2(_2521 * _2506) : (2.0 - exp2(_2523 * _2506))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2516;
        }
        else
        {
            float _2636 = 1.0 / cbSceneParam._m0[80u].x;
            float _2637 = isnan(_2507) ? _2506 : (isnan(_2506) ? _2507 : max(_2506, _2507));
            float _2638 = isnan(_2507) ? _2506 : (isnan(_2506) ? _2507 : min(_2506, _2507));
            float _2647 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : min(_2637, 0.0));
            float _2648 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : min(_2638, 0.0));
            _2676 = ((abs(_2513 / _2501) * cbSceneParam._m0[80u].y) * ((((_2647 - _2648) * 2.0) - ((exp2(_2521 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0)))) - exp2(_2521 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0))))) * _2636)) - ((exp2(_2523 * _2647) - exp2(_2523 * _2648)) * _2636))) + (_2516 * cbSceneParam._m0[80u].z);
        }
        vec4 _2678 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2412, _2413, 1.0), 0.0);
        float _2687 = exp2((_2676 * (-1.44269502162933349609375)) * (1.0 - _2678.w));
        float _2688 = log2(_2687);
        float _2704 = log2(_2432);
        _2525 = (exp2(_2704 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2688 * cbSceneParam._m0[78u].x)) * _2678.x) / cbSceneParam._m0[78u].x)) + _2429;
        _2527 = (exp2(_2704 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2688 * cbSceneParam._m0[78u].y)) * _2678.y) / cbSceneParam._m0[78u].y)) + _2430;
        _2529 = (exp2(_2704 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2688 * cbSceneParam._m0[78u].z)) * _2678.z) / cbSceneParam._m0[78u].z)) + _2431;
        _2531 = _2687 * _2432;
    }
    else
    {
        _2525 = _2429;
        _2527 = _2430;
        _2529 = _2431;
        _2531 = _2432;
    }
    float _2543 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2544 = _2543 == 3.0;
    float _2545 = log2(_2531);
    float _2552 = exp2(_2545 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2374 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _637))) + ((_2380 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1446)) * cbPerFrame._m0[3u].x));
    float _2553 = exp2(_2545 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2376 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _637))) + ((_2382 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _1446)) * cbPerFrame._m0[3u].x));
    float _2554 = exp2(_2545 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2378 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _637))) + ((_2384 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1446)) * cbPerFrame._m0[3u].x));
    float _2563 = (_2543 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2563 * (_2544 ? _2552 : (_2552 + (cbSceneParam._m0[72u].w * _2525)));
    SV_Target.y = _2563 * (_2544 ? _2553 : (_2553 + (cbSceneParam._m0[72u].w * _2527)));
    SV_Target.z = _2563 * (_2544 ? _2554 : (_2554 + (cbSceneParam._m0[72u].w * _2529)));
    SV_Target.w = cbInstanceData._m0[_2404].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2404].w;
}


