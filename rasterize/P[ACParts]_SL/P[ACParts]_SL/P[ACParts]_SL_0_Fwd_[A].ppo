#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_SL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_SL_snp_0_Texture2D_14;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_SL_snp_0_Texture2D_19;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_SL_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_SL_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1056;
float _3441;
float _3442;
float _3443;
float _3444;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _248 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _270 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _270.x;
    float _273 = _270.y;
    bool _310 = _272 >= 0.25;
    bool _315 = _272 >= 0.3499999940395355224609375;
    bool _320 = _272 >= 0.5;
    bool _325 = _272 >= 0.64999997615814208984375;
    bool _330 = _272 >= 0.75;
    float _347 = ((_231.x * 4.55000019073486328125) * _248.x) * ((((_330 ? cbMtdParam._m0[10u].x : (_325 ? cbMtdParam._m0[15u].x : (_320 ? cbMtdParam._m0[14u].x : (_315 ? cbMtdParam._m0[13u].x : (_310 ? cbMtdParam._m0[12u].x : cbMtdParam._m0[11u].x))))) - cbMtdParam._m0[9u].x) * _273) + cbMtdParam._m0[9u].x);
    float _350 = ((_231.y * 4.55000019073486328125) * _248.y) * ((((_330 ? cbMtdParam._m0[10u].y : (_325 ? cbMtdParam._m0[15u].y : (_320 ? cbMtdParam._m0[14u].y : (_315 ? cbMtdParam._m0[13u].y : (_310 ? cbMtdParam._m0[12u].y : cbMtdParam._m0[11u].y))))) - cbMtdParam._m0[9u].y) * _273) + cbMtdParam._m0[9u].y);
    float _353 = ((_231.z * 4.55000019073486328125) * _248.z) * ((((_330 ? cbMtdParam._m0[10u].z : (_325 ? cbMtdParam._m0[15u].z : (_320 ? cbMtdParam._m0[14u].z : (_315 ? cbMtdParam._m0[13u].z : (_310 ? cbMtdParam._m0[12u].z : cbMtdParam._m0[11u].z))))) - cbMtdParam._m0[9u].z) * _273) + cbMtdParam._m0[9u].z);
    vec4 _365 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _372 = cbMtdParam._m0[16u].x + _365.x;
    vec4 _385 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _393 = (_385.x * 2.0) + (-1.0);
    float _395 = (_385.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_393, _395), vec2(_393, _395));
    float _3453 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _402 = sqrt(1.0 - (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))));
    float _403 = _385.z * cbMtdParam._m0[16u].y;
    float _407 = (cbMtdParam._m0[16u].z * _393) + _393;
    float _408 = (cbMtdParam._m0[16u].z * _395) + _395;
    float _411 = fma(_402, _206 * NORMAL.x, fma(_408, _213 * TANGENT.x, (_199 * _191) * _407));
    float _414 = fma(_402, _206 * NORMAL.y, fma(_408, _213 * TANGENT.y, (_199 * _192) * _407));
    float _417 = fma(_402, _206 * NORMAL.z, fma(_408, _213 * TANGENT.z, (_199 * _193) * _407));
    float _421 = inversesqrt(dot(vec3(_411, _414, _417), vec3(_411, _414, _417)));
    float _422 = _421 * _411;
    float _423 = _421 * _414;
    float _424 = _421 * _417;
    float _3464 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _425 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _3475 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3486 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _3497 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3508 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _429 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _445 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _486 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _496 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _486);
    float _497 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _486);
    float _498 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _486);
    float _502 = inversesqrt(dot(vec3(_496, _497, _498), vec3(_496, _497, _498)));
    float _503 = _496 * _502;
    float _504 = _497 * _502;
    float _505 = _498 * _502;
    vec4 _510 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _512 = _510.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _736 = sqrt(((_496 * _496) + (_497 * _497)) + (_498 * _498));
        float _742 = (cbMatDynParam._m0[5u].x * _736) + cbMatDynParam._m0[5u].y;
        float _3519 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _747 = (cbMatDynParam._m0[5u].z * _736) + cbMatDynParam._m0[5u].w;
        float _3530 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) - _743)) + _743) < ((_512 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _524 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _525 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _527 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _529 = _527.w;
    float _549 = fma(_424, cbSceneParam._m0[5u].z, fma(_423, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _422));
    float _552 = fma(_424, cbSceneParam._m0[6u].z, fma(_423, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _422));
    float _555 = fma(_424, cbSceneParam._m0[7u].z, fma(_423, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _422));
    vec4 _557 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _568 = (((_557.y - _425) + (_557.w * _425)) * cbMtdParam._m0[3u].x) + _425;
    uint _581 = uint(roundEven(NORMAL.w)) * 13u;
    uint _582 = _581 + 9u;
    uint _583 = _582 + uint(cbMatDynParam._m0[0u].w);
    float _589 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_583].x;
    float _590 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_583].y;
    float _591 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * cbInstanceData._m0[_583].z;
    float _3541 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    vec4 _595 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _600 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _611 = (((_600.x - _429) + (_600.w * _429)) * cbMtdParam._m0[3u].x) + _429;
    float _624 = (cbMtdParam._m0[3u].x * (((_592 * _529) - _592) + _595.x)) + _592;
    float _625 = (cbMtdParam._m0[3u].x * (((_593 * _529) - _593) + _595.y)) + _593;
    float _626 = (cbMtdParam._m0[3u].x * (((_594 * _529) - _594) + _595.z)) + _594;
    float _627 = 1.0 - _611;
    float _628 = _627 * _624;
    float _629 = _627 * _625;
    float _630 = _627 * _626;
    float _635 = (_624 + (-0.039999999105930328369140625)) * _611;
    float _636 = (_625 + (-0.039999999105930328369140625)) * _611;
    float _637 = (_626 + (-0.039999999105930328369140625)) * _611;
    float _638 = _635 + 0.039999999105930328369140625;
    float _640 = _636 + 0.039999999105930328369140625;
    float _641 = _637 + 0.039999999105930328369140625;
    vec4 _650 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _524, cbSceneParam._m0[86u].y * _525));
    float _653 = _650.x * TEXCOORD_4;
    float _654 = dot(vec3(_422, _423, _424), vec3(_503, _504, _505));
    float _657 = _654 * 2.0;
    float _661 = (_657 * _422) - _503;
    float _662 = (_657 * _423) - _504;
    float _663 = (_657 * _424) - _505;
    float _667 = abs(dot(vec3(_503, _504, _505), vec3(_422, _423, _424)));
    float _3574 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _669 = sqrt(_568);
    float _682 = exp2((_669 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_669 * 3.0));
    float _688 = (1.0 - _682) * ((_669 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _689 = _682 * _669;
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1055;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _781 = fma(_725, cbModelParam._m0[26u].z, fma(_721, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _717));
        float _785 = fma(_725, cbModelParam._m0[27u].z, fma(_721, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _717));
        float _789 = fma(_725, cbModelParam._m0[28u].z, fma(_721, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _717));
        float _813 = _717 + _422;
        float _814 = _721 + _423;
        float _815 = _725 + _424;
        float _825 = fma(_815, cbModelParam._m0[26u].z, fma(_814, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _813)) - _781;
        float _826 = fma(_815, cbModelParam._m0[27u].z, fma(_814, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _813)) - _785;
        float _827 = fma(_815, cbModelParam._m0[28u].z, fma(_814, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _813)) - _789;
        float _831 = inversesqrt(dot(vec3(_825, _826, _827), vec3(_825, _826, _827)));
        float _844 = ((_831 * _825) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_781 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_831 * _826) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_785 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_831 * _827) / cbModelParam._m0[34u].z) + ((((((_789 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        float _883 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_849.x + (-0.5));
        float _885 = _883 * (_849.y + (-0.5));
        float _886 = _883 * (_849.z + (-0.5));
        float _893 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_856.x + (-0.5));
        float _895 = _893 * (_856.y + (-0.5));
        float _896 = _893 * (_856.z + (-0.5));
        float _903 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_863.x + (-0.5));
        float _905 = _903 * (_863.y + (-0.5));
        float _906 = _903 * (_863.z + (-0.5));
        float _913 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_870.x + (-0.5));
        float _915 = _913 * (_870.y + (-0.5));
        float _916 = _913 * (_870.z + (-0.5));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = _884 * 0.5;
        float _921 = _894 * 0.5;
        float _922 = _904 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _937 = (dot(vec3(_422, _423, _424), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _947 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3622 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_949 + 1.0))) + _954) * _917;
        float _964 = _885 * 0.5;
        float _965 = _895 * 0.5;
        float _966 = _905 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_422, _423, _424), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3655 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_991 + 1.0))) + _996) * _918;
        float _1006 = _886 * 0.5;
        float _1007 = _896 * 0.5;
        float _1008 = _906 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_422, _423, _424), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3688 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1033 + 1.0))) + _1038) * _919;
        _1055 = _886;
        _1057 = _885;
        _1058 = _884;
        _1059 = _896;
        _1060 = _895;
        _1061 = _894;
        _1062 = _906;
        _1063 = _905;
        _1064 = _904;
        _1065 = _919;
        _1066 = _918;
        _1067 = _917;
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
    }
    else
    {
        _1055 = _1056;
        _1057 = _1056;
        _1058 = _1056;
        _1059 = _1056;
        _1060 = _1056;
        _1061 = _1056;
        _1062 = _1056;
        _1063 = _1056;
        _1064 = _1056;
        _1065 = _1056;
        _1066 = _1056;
        _1067 = _1056;
        _1068 = 0.0;
        _1069 = 0.0;
        _1070 = 0.0;
    }
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1099 = fma(_725, cbModelParam._m0[30u].z, fma(_721, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _717));
        float _1103 = fma(_725, cbModelParam._m0[31u].z, fma(_721, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _717));
        float _1107 = fma(_725, cbModelParam._m0[32u].z, fma(_721, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _717));
        float _1130 = _717 + _422;
        float _1131 = _721 + _423;
        float _1132 = _725 + _424;
        float _1142 = fma(_1132, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1130)) - _1099;
        float _1143 = fma(_1132, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1130)) - _1103;
        float _1144 = fma(_1132, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1130)) - _1107;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1099 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1103 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[35u].z) + ((((((_1107 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1198 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1165.x + (-0.5));
        float _1200 = _1198 * (_1165.y + (-0.5));
        float _1201 = _1198 * (_1165.z + (-0.5));
        float _1208 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1172.x + (-0.5));
        float _1210 = _1208 * (_1172.y + (-0.5));
        float _1211 = _1208 * (_1172.z + (-0.5));
        float _1218 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1179.x + (-0.5));
        float _1220 = _1218 * (_1179.y + (-0.5));
        float _1221 = _1218 * (_1179.z + (-0.5));
        float _1228 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1186.x + (-0.5));
        float _1230 = _1228 * (_1186.y + (-0.5));
        float _1231 = _1228 * (_1186.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_422, _423, _424), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3751 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1262 + 1.0))) + _1267) * _1232;
        float _1277 = _1200 * 0.5;
        float _1278 = _1210 * 0.5;
        float _1279 = _1220 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_422, _423, _424), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3784 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1304 + 1.0))) + _1309) * _1233;
        float _1319 = _1201 * 0.5;
        float _1320 = _1211 * 0.5;
        float _1321 = _1221 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_422, _423, _424), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3817 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1346 + 1.0))) + _1351) * _1234;
        _1368 = _1201;
        _1369 = _1200;
        _1370 = _1199;
        _1371 = _1211;
        _1372 = _1210;
        _1373 = _1209;
        _1374 = _1221;
        _1375 = _1220;
        _1376 = _1219;
        _1377 = _1234;
        _1378 = _1233;
        _1379 = _1232;
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _1056;
        _1369 = _1056;
        _1370 = _1056;
        _1371 = _1056;
        _1372 = _1056;
        _1373 = _1056;
        _1374 = _1056;
        _1375 = _1056;
        _1376 = _1056;
        _1377 = _1056;
        _1378 = _1056;
        _1379 = _1056;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1068)) + _1068;
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1069)) + _1069;
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1070)) + _1070;
    float _1415 = fma(_1394, cbSceneParam._m0[89u].z, fma(_1393, cbSceneParam._m0[89u].y, _1392 * cbSceneParam._m0[89u].x));
    float _1418 = fma(_1394, cbSceneParam._m0[90u].z, fma(_1393, cbSceneParam._m0[90u].y, _1392 * cbSceneParam._m0[90u].x));
    float _1421 = fma(_1394, cbSceneParam._m0[91u].z, fma(_1393, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1392));
    float _1436 = _661 * 0.5;
    float _1437 = _662 * 0.5;
    float _1438 = _663 * 0.5;
    float _1439 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1442 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1445 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1479;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1452 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1055, _1059, _1062, _1065));
        float _1456 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1460 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1467 = dot(vec4(cbModelParam._m0[39u]), vec4(_1436, _1437, _1438, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1490;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1481 = dot(vec4(cbModelParam._m0[40u]), vec4(_1436, _1437, _1438, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1494 = (_1490 * cbModelParam._m0[1u].x) + (_1479 * (1.0 - cbModelParam._m0[1u].x));
    float _1504 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _568);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1504 : min(cbModelParam._m0[25u].z, _1504));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1552 = fma(_725, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717)) + cbModelParam._m0[13u].w;
        float _1556 = fma(_725, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717)) + cbModelParam._m0[14u].w;
        float _1560 = fma(_725, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717)) + cbModelParam._m0[15u].w;
        float _1563 = fma(_663, cbModelParam._m0[13u].z, fma(_662, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _661));
        float _1566 = fma(_663, cbModelParam._m0[14u].z, fma(_662, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _661));
        float _1569 = fma(_663, cbModelParam._m0[15u].z, fma(_662, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _661));
        float _1597;
        if (_1563 > 0.0)
        {
            _1597 = abs((1.0 - _1552) / _1563);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1552 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1597 = frontier_phi_17_15_ladder;
        }
        float _1803;
        if (_1566 > 0.0)
        {
            _1803 = abs((1.0 - _1556) / _1566);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1556 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1803 = frontier_phi_26_22_ladder;
        }
        float _2057;
        if (_1569 > 0.0)
        {
            _2057 = abs((1.0 - _1560) / _1569);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1560 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2057 = frontier_phi_38_33_ladder;
        }
        float _2059 = isnan(_1803) ? _1597 : (isnan(_1597) ? _1803 : min(_1597, _1803));
        float _2060 = isnan(_2057) ? _2059 : (isnan(_2059) ? _2057 : min(_2059, _2057));
        float _2064 = (_2060 * _1563) + _1552;
        float _2065 = (_2060 * _1566) + _1556;
        float _2066 = (_2060 * _1569) + _1560;
        float _2067 = _2060 * 9.9999997473787516355514526367188e-05;
        float _2069 = (-1.0) - _2067;
        float _2071 = _2067 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2066 > _2071) || ((_2066 < _2069) || ((_2065 > _2071) || ((_2065 < _2069) || ((_2064 < _2069) || (_2064 > _2071))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2194 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2066, cbModelParam._m0[9u].z, fma(_2065, cbModelParam._m0[9u].y, _2064 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2066, cbModelParam._m0[10u].z, fma(_2065, cbModelParam._m0[10u].y, _2064 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2066, cbModelParam._m0[11u].z, fma(_2065, cbModelParam._m0[11u].y, _2064 * cbModelParam._m0[11u].x))), _1505);
            frontier_phi_16_38_ladder = _2194.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2194.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2194.x * cbModelParam._m0[1u].y;
        }
        _1585 = frontier_phi_16_38_ladder_2;
        _1587 = frontier_phi_16_38_ladder_1;
        _1589 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_661, _662, _663), _1505);
        _1585 = _1573.x * cbModelParam._m0[1u].y;
        _1587 = _1573.y * cbModelParam._m0[1u].y;
        _1589 = _1573.z * cbModelParam._m0[1u].y;
    }
    float _1593 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _568);
    float _1594 = isnan(_1593) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1593 : min(cbModelParam._m0[25u].w, _1593));
    float _1687;
    float _1689;
    float _1691;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1651 = fma(_725, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717)) + cbModelParam._m0[21u].w;
        float _1655 = fma(_725, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717)) + cbModelParam._m0[22u].w;
        float _1659 = fma(_725, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717)) + cbModelParam._m0[23u].w;
        float _1662 = fma(_663, cbModelParam._m0[21u].z, fma(_662, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _661));
        float _1665 = fma(_663, cbModelParam._m0[22u].z, fma(_662, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _661));
        float _1668 = fma(_663, cbModelParam._m0[23u].z, fma(_662, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _661));
        float _1808;
        if (_1662 > 0.0)
        {
            _1808 = abs((1.0 - _1651) / _1662);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1651 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1808 = frontier_phi_28_24_ladder;
        }
        float _2084;
        if (_1665 > 0.0)
        {
            _2084 = abs((1.0 - _1655) / _1665);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1655 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2084 = frontier_phi_40_35_ladder;
        }
        float _2297;
        if (_1668 > 0.0)
        {
            _2297 = abs((1.0 - _1659) / _1668);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1659 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2297 = frontier_phi_49_46_ladder;
        }
        float _2299 = isnan(_2084) ? _1808 : (isnan(_1808) ? _2084 : min(_1808, _2084));
        float _2300 = isnan(_2297) ? _2299 : (isnan(_2299) ? _2297 : min(_2299, _2297));
        float _2304 = (_2300 * _1662) + _1651;
        float _2305 = (_2300 * _1665) + _1655;
        float _2306 = (_2300 * _1668) + _1659;
        float _2307 = _2300 * 9.9999997473787516355514526367188e-05;
        float _2308 = (-1.0) - _2307;
        float _2310 = _2307 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2306 > _2310) || ((_2306 < _2308) || ((_2305 > _2310) || ((_2305 < _2308) || ((_2304 < _2308) || (_2304 > _2310))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2505 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2306, cbModelParam._m0[17u].z, fma(_2305, cbModelParam._m0[17u].y, _2304 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2306, cbModelParam._m0[18u].z, fma(_2305, cbModelParam._m0[18u].y, _2304 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2306, cbModelParam._m0[19u].z, fma(_2305, cbModelParam._m0[19u].y, _2304 * cbModelParam._m0[19u].x))), _1594);
            frontier_phi_25_49_ladder = _2505.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2505.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2505.x * cbModelParam._m0[1u].z;
        }
        _1687 = frontier_phi_25_49_ladder_2;
        _1689 = frontier_phi_25_49_ladder_1;
        _1691 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1671 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_661, _662, _663), _1594);
        _1687 = _1671.x * cbModelParam._m0[1u].z;
        _1689 = _1671.y * cbModelParam._m0[1u].z;
        _1691 = _1671.z * cbModelParam._m0[1u].z;
    }
    float _1704 = (((_688 * _638) + _689) * _653) * ((cbModelParam._m0[1u].w * (_1687 - _1585)) + _1585);
    float _1706 = (((_688 * _640) + _689) * _653) * ((cbModelParam._m0[1u].w * (_1689 - _1587)) + _1587);
    float _1708 = (((_688 * _641) + _689) * _653) * ((cbModelParam._m0[1u].w * (_1691 - _1589)) + _1589);
    float _1711 = fma(_1708, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1704 * cbSceneParam._m0[89u].x));
    float _1714 = fma(_1708, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1704 * cbSceneParam._m0[90u].x));
    float _1717 = fma(_1708, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, _1704 * cbSceneParam._m0[91u].x));
    uvec4 _1727 = floatBitsToUint(cbInstanceData._m0[_581 + 5u]);
    uint _1729 = _1727.x * 14u;
    uint _1730 = _1729 + 13u;
    float _1737 = _653 + (-1.0);
    float _1742 = (cbLight._m0[_1730].x * _1737) + 1.0;
    float _1743 = (cbLight._m0[_1730].y * _1737) + 1.0;
    float _1744 = (cbLight._m0[_1730].z * _1737) + 1.0;
    float _1745 = (cbLight._m0[_1730].w * _1737) + 1.0;
    uint _1746 = _1729 + 5u;
    float _1752 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
    uint _1756 = _1729 + 4u;
    float _1762 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
    uint _1766 = _1729 | 1u;
    float _1777 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_422, _423, _424));
    float _1780 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_422, _423, _424));
    float _3953 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _3964 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1785 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1787 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.3183098733425140380859375;
    float _1794 = ((cbLight._m0[_1746].x * _1752) * _1787) + ((cbLight._m0[_1756].x * _1762) * _1785);
    float _1795 = ((_1752 * cbLight._m0[_1746].y) * _1787) + ((_1762 * cbLight._m0[_1756].y) * _1785);
    float _1796 = ((_1752 * cbLight._m0[_1746].z) * _1787) + ((_1762 * cbLight._m0[_1756].z) * _1785);
    uvec4 _1800 = floatBitsToUint(cbLight._m0[_1729 + 12u]);
    bool _1802 = _1800.x == 0u;
    float _1813;
    float _1815;
    float _1817;
    if (_1802)
    {
        _1813 = _1794;
        _1815 = _1795;
        _1817 = _1796;
    }
    else
    {
        uint _1821 = _1729 + 6u;
        float _1837 = (dot(vec3(cbLight._m0[_1729 + 2u].xyz), vec3(_422, _423, _424)) * 0.5) + 0.5;
        float _1838 = _1837 * _1837;
        float _3975 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1840 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _1813 = (((cbLight._m0[_1821].x * 0.3183098733425140380859375) * _1839) * _1840) + _1794;
        _1815 = (((cbLight._m0[_1821].y * 0.3183098733425140380859375) * _1839) * _1840) + _1795;
        _1817 = (((cbLight._m0[_1821].z * 0.3183098733425140380859375) * _1839) * _1840) + _1796;
    }
    bool _1820 = _1800.y == 0u;
    float _1858;
    float _1860;
    float _1862;
    if (_1820)
    {
        _1858 = _1813;
        _1860 = _1815;
        _1862 = _1817;
    }
    else
    {
        uint _2028 = _1729 + 7u;
        float _2044 = (dot(vec3(cbLight._m0[_1729 + 3u].xyz), vec3(_422, _423, _424)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _3991 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2047 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _1858 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _1813;
        _1860 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _1815;
        _1862 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _1817;
    }
    uint _1865 = _1729 + 8u;
    float _1878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1729].w)) * _568) * 0.949999988079071044921875);
    float _1879 = _1878 * _1878;
    float _1880 = cbLight._m0[_1729].x + _503;
    float _1881 = cbLight._m0[_1729].y + _504;
    float _1882 = cbLight._m0[_1729].z + _505;
    float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
    float _1887 = _1886 * _1880;
    float _1888 = _1886 * _1881;
    float _1889 = _1886 * _1882;
    float _1890 = dot(vec3(_422, _423, _424), vec3(cbLight._m0[_1729].xyz));
    float _4007 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _1894 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1895 = dot(vec3(_422, _423, _424), vec3(_1887, _1888, _1889));
    float _4029 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1887, _1888, _1889));
    float _4040 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1879 * _1879;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1915 = exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0);
    float _1916 = 0.959999978542327880859375 - _635;
    float _1918 = 0.959999978542327880859375 - _636;
    float _1919 = 0.959999978542327880859375 - _637;
    float _1926 = 1.0 - _1879;
    float _1937 = (0.5 / (((_1894 * ((_1893 * _1926) + _1879)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _1926) + _1879) * _1893))) * _1893;
    float _4051 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    uint _1950 = _1729 + 9u;
    float _1961 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1766].w)) * _568) * 0.949999988079071044921875);
    float _1962 = _1961 * _1961;
    float _1963 = cbLight._m0[_1766].x + _503;
    float _1964 = cbLight._m0[_1766].y + _504;
    float _1965 = cbLight._m0[_1766].z + _505;
    float _1969 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
    float _1970 = _1969 * _1963;
    float _1971 = _1969 * _1964;
    float _1972 = _1969 * _1965;
    float _1973 = dot(vec3(_422, _423, _424), vec3(cbLight._m0[_1766].xyz));
    float _4062 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _1977 = dot(vec3(_422, _423, _424), vec3(_1970, _1971, _1972));
    float _4073 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _1981 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_1970, _1971, _1972));
    float _4084 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1985 = _1962 * _1962;
    float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
    float _1996 = exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0);
    float _2003 = 1.0 - _1962;
    float _2013 = (0.5 / (((_1894 * ((_1976 * _2003) + _1962)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2003) + _1962) * _1976))) * _1976;
    float _4095 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
    float _2025 = (((((_1996 * _1916) + _638) * cbLight._m0[_1950].x) * _2015) * _1752) + (((((_1915 * _1916) + _638) * cbLight._m0[_1865].x) * _1939) * _1762);
    float _2026 = (((((_1996 * _1918) + _640) * cbLight._m0[_1950].y) * _2015) * _1752) + (((((_1915 * _1918) + _640) * cbLight._m0[_1865].y) * _1939) * _1762);
    float _2027 = (((((_1996 * _1919) + _641) * cbLight._m0[_1950].z) * _2015) * _1752) + (((((_1915 * _1919) + _641) * cbLight._m0[_1865].z) * _1939) * _1762);
    float _2089;
    float _2091;
    float _2093;
    if (_1802)
    {
        _2089 = _2025;
        _2091 = _2026;
        _2093 = _2027;
    }
    else
    {
        uint _2095 = _1729 + 2u;
        uint _2099 = _1729 + 10u;
        float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _568) * 0.949999988079071044921875);
        float _2114 = _2113 * _2113;
        float _2115 = cbLight._m0[_2095].x + _503;
        float _2116 = cbLight._m0[_2095].y + _504;
        float _2117 = cbLight._m0[_2095].z + _505;
        float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
        float _2122 = _2121 * _2115;
        float _2123 = _2121 * _2116;
        float _2124 = _2121 * _2117;
        float _2125 = dot(vec3(_422, _423, _424), vec3(cbLight._m0[_2095].xyz));
        float _4106 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2129 = dot(vec3(_422, _423, _424), vec3(_2122, _2123, _2124));
        float _4117 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2133 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2122, _2123, _2124));
        float _4128 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2137 = _2114 * _2114;
        float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
        float _2148 = exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0);
        float _2155 = 1.0 - _2114;
        float _2165 = (0.5 / (((_1894 * ((_2128 * _2155) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2155) + _2114) * _2128))) * _2128;
        float _4139 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2167 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
        float _2168 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
        _2089 = (((((_2148 * _1916) + _638) * cbLight._m0[_2099].x) * _2167) * _2168) + _2025;
        _2091 = (((((_2148 * _1918) + _640) * cbLight._m0[_2099].y) * _2167) * _2168) + _2026;
        _2093 = (((((_2148 * _1919) + _641) * cbLight._m0[_2099].z) * _2167) * _2168) + _2027;
    }
    float _2203;
    float _2205;
    float _2207;
    if (_1820)
    {
        _2203 = _2089;
        _2205 = _2091;
        _2207 = _2093;
    }
    else
    {
        uint _2214 = _1729 + 3u;
        uint _2218 = _1729 + 11u;
        float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _568) * 0.949999988079071044921875);
        float _2233 = _2232 * _2232;
        float _2234 = cbLight._m0[_2214].x + _503;
        float _2235 = cbLight._m0[_2214].y + _504;
        float _2236 = cbLight._m0[_2214].z + _505;
        float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
        float _2241 = _2240 * _2234;
        float _2242 = _2240 * _2235;
        float _2243 = _2240 * _2236;
        float _2244 = dot(vec3(_422, _423, _424), vec3(cbLight._m0[_2214].xyz));
        float _4155 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2248 = dot(vec3(_422, _423, _424), vec3(_2241, _2242, _2243));
        float _4166 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2252 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2241, _2242, _2243));
        float _4177 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2256 = _2233 * _2233;
        float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
        float _2267 = exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0);
        float _2274 = 1.0 - _2233;
        float _2284 = (0.5 / (((_1894 * ((_2247 * _2274) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2274) + _2233) * _2247))) * _2247;
        float _4188 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2286 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
        float _2287 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _2203 = (((((_2267 * _1916) + _638) * cbLight._m0[_2218].x) * _2286) * _2287) + _2089;
        _2205 = (((((_2267 * _1918) + _640) * cbLight._m0[_2218].y) * _2286) * _2287) + _2091;
        _2207 = (((((_2267 * _1919) + _641) * cbLight._m0[_2218].z) * _2286) * _2287) + _2093;
    }
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_1727.y == 0u)
    {
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2362;
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2362;
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2362;
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.x;
        uint _2389 = uint((float(_2377.y) * floor(float(uint(cbSceneParam._m0[85u].y * _525) / _2378))) + floor(float(uint(cbSceneParam._m0[85u].x * _524) / _2378)));
        float _2399 = (log2(_2365 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2400 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        uint _2403 = uint(isnan(14.0) ? _2400 : (isnan(_2400) ? 14.0 : min(_2400, 14.0)));
        uvec4 _2408 = texelFetch(g_lightClusterGridBuffer, int(((_2403 << 2u) + (_2389 << 6u)) >> 2u));
        uint _2409 = _2408.x;
        uint _2410 = _2377.z;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        if (((((1u << ((_2410 >> 4u) & 15u)) + 4294967295u) & _2409) == 0u) || ((_2410 & 240u) == 0u))
        {
            _2510 = 0.0;
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
        }
        else
        {
            float _2511;
            float _2513;
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2663 = 0.0;
            float _2664 = 0.0;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            uint _2669 = 0u;
            uint _2678;
            bool _2679;
            for (;;)
            {
                _2678 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2669 << 2u)) >> 2u)).x;
                _2679 = _2678 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2679)
                {
                    frontier_phi_66_pred = _2663;
                    frontier_phi_66_pred_1 = _2668;
                    frontier_phi_66_pred_2 = _2667;
                    frontier_phi_66_pred_3 = _2666;
                    frontier_phi_66_pred_4 = _2665;
                    frontier_phi_66_pred_5 = _2664;
                }
                else
                {
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    uint _2814;
                    _2808 = _2663;
                    _2809 = _2664;
                    _2810 = _2665;
                    _2811 = _2666;
                    _2812 = _2667;
                    _2813 = _2668;
                    _2814 = _2678;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    for (;;)
                    {
                        uint _2818 = uint(findLSB(_2814)) + (_2669 << 5u);
                        uint _2815 = (_2814 + 4294967295u) & _2814;
                        uint _2820 = _2818 * 48u;
                        vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 3u)).x));
                        uint _2840 = (_2818 * 48u) + 4u;
                        vec4 _2853 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 3u)).x));
                        uint _2859 = (_2818 * 48u) + 8u;
                        vec3 _2870 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2859)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 2u)).x));
                        float _2874 = _2834.x - _2363;
                        float _2875 = _2834.y - _2364;
                        float _2876 = _2834.z - _2365;
                        float _2877 = dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876));
                        float _2880 = inversesqrt(_2877);
                        float _2881 = _2880 * _2874;
                        float _2882 = _2880 * _2875;
                        float _2883 = _2880 * _2876;
                        float _2884 = dot(vec3(_549, _552, _555), vec3(_2881, _2882, _2883));
                        float _2889 = 1.0 - (_2877 * _2834.w);
                        float _4214 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2890 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2891 = sqrt(_2877) * _2853.w;
                        float _2894 = 1.39999997615814208984375 / (_2891 + 1.39999997615814208984375);
                        float _2895 = _2894 * _2894;
                        float _2898 = ((1.0 - _2895) * _2884) + _2895;
                        float _2901 = _2891 * _2891;
                        float _2905 = ((isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0))) * _2890) / ((_2901 * 0.699999988079071044921875) + 1.0);
                        float _2909 = (-0.0) - _2363;
                        float _2910 = (-0.0) - _2364;
                        float _2911 = (-0.0) - _2365;
                        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
                        float _2916 = _2915 * _2909;
                        float _2917 = _2915 * _2910;
                        float _2918 = _2915 * _2911;
                        float _2925 = exp2(log2(1.0 / ((_2901 * 3.5) + 5.0)) * 0.25);
                        float _2926 = 1.0 - _669;
                        float _2933 = sqrt(1.0 - ((1.0 - (_2926 * _2926)) * (1.0 - (_2925 * _2925))));
                        float _2934 = _2933 * _2933;
                        float _2935 = _2934 * _2934;
                        float _2936 = _2916 + _2881;
                        float _2937 = _2917 + _2882;
                        float _2938 = _2918 + _2883;
                        float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
                        float _2946 = dot(vec3(_549, _552, _555), vec3(_2916, _2917, _2918));
                        float _4230 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2949 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2950 = dot(vec3(_549, _552, _555), vec3(_2942 * _2936, _2942 * _2937, _2942 * _2938));
                        float _4241 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2953 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2957 = ((_2953 * _2953) * (_2935 + (-1.0))) + 1.0;
                        float _2958 = _2894 * _2934;
                        float _2959 = _2958 * _2958;
                        float _2962 = ((1.0 - _2959) * _2884) + _2959;
                        float _4252 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2963 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2964 = 1.0 - _2934;
                        float _2974 = (0.5 / (((_2963 * ((_2949 * _2964) + _2934)) + 9.9999999392252902907785028219223e-09) + (((_2963 * _2964) + _2934) * _2949))) * _2963;
                        float _4263 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2985 = (((_2935 * 3.1415927410125732421875) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) / ((_2957 * _2957) * ((_2901 * 2.1991131305694580078125) + 3.141590118408203125))) * _2890;
                        _2738 = (_2905 * _2853.x) + _2811;
                        _2739 = (_2905 * _2853.y) + _2812;
                        _2740 = (_2905 * _2853.z) + _2813;
                        _2735 = (_2985 * _2870.x) + _2808;
                        _2736 = (_2985 * _2870.y) + _2809;
                        _2737 = (_2985 * _2870.z) + _2810;
                        if (_2815 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2808 = _2735;
                            _2809 = _2736;
                            _2810 = _2737;
                            _2811 = _2738;
                            _2812 = _2739;
                            _2813 = _2740;
                            _2814 = _2815;
                        }
                    }
                    frontier_phi_66_pred = _2735;
                    frontier_phi_66_pred_1 = _2740;
                    frontier_phi_66_pred_2 = _2739;
                    frontier_phi_66_pred_3 = _2738;
                    frontier_phi_66_pred_4 = _2737;
                    frontier_phi_66_pred_5 = _2736;
                }
                _2511 = frontier_phi_66_pred;
                _2521 = frontier_phi_66_pred_1;
                _2519 = frontier_phi_66_pred_2;
                _2517 = frontier_phi_66_pred_3;
                _2515 = frontier_phi_66_pred_4;
                _2513 = frontier_phi_66_pred_5;
                uint _2670 = _2669 + 1u;
                if (_2670 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2663 = _2511;
                    _2664 = _2513;
                    _2665 = _2515;
                    _2666 = _2517;
                    _2667 = _2519;
                    _2668 = _2521;
                    _2669 = _2670;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2510 = _2511;
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
        }
        uvec4 _2524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2525 = _2524.z;
        uint _2527 = (_2525 >> 8u) & 15u;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        if (((4294967295u << _2527) & _2409) == 0u)
        {
            _2631 = _2510;
            _2633 = _2512;
            _2635 = _2514;
            _2637 = _2516;
            _2639 = _2518;
            _2641 = _2520;
        }
        else
        {
            float _2656 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
            float _2657 = _2656 * _2363;
            float _2658 = _2656 * _2364;
            float _2659 = _2656 * _2365;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2527 < ((_2525 >> 12u) & 15u))
            {
                float _2632;
                float _2634;
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2791 = _2510;
                float _2792 = _2512;
                float _2793 = _2514;
                float _2794 = _2516;
                float _2795 = _2518;
                float _2796 = _2520;
                uint _2797 = _2527;
                uint _2806;
                bool _2807;
                for (;;)
                {
                    _2806 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2797 << 2u)) >> 2u)).x;
                    _2807 = _2806 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2807)
                    {
                        frontier_phi_77_pred = _2796;
                        frontier_phi_77_pred_1 = _2795;
                        frontier_phi_77_pred_2 = _2794;
                        frontier_phi_77_pred_3 = _2793;
                        frontier_phi_77_pred_4 = _2792;
                        frontier_phi_77_pred_5 = _2791;
                    }
                    else
                    {
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3012 = _2791;
                        float _3013 = _2792;
                        float _3014 = _2793;
                        float _3015 = _2794;
                        float _3016 = _2795;
                        float _3017 = _2796;
                        uint _3018 = _2806;
                        uint _3019;
                        vec4 _3044;
                        float _3045;
                        vec4 _3060;
                        vec3 _3072;
                        vec4 _3087;
                        vec4 _3103;
                        float _3150;
                        bool _3151;
                        for (;;)
                        {
                            uint _3029 = ((_2797 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3018));
                            _3019 = (_3018 + 4294967295u) & _3018;
                            uint _3031 = _3029 * 40u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            _3045 = _3044.w;
                            uint _3047 = (_3029 * 40u) + 4u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3062 = (_3029 * 40u) + 8u;
                            _3072 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x));
                            uint _3074 = (_3029 * 40u) + 16u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3090 = (_3029 * 40u) + 20u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3106 = (_3029 * 40u) + 24u;
                            vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3125 = (_3029 * 40u) + 28u;
                            vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            _3150 = fma(_2365, _3138.z, fma(_2364, _3138.y, _3138.x * _2363)) + _3138.w;
                            _3151 = !((fma(_2365, _3119.z, fma(_2364, _3119.y, _3119.x * _2363)) + _3119.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3151)
                            {
                                float _3178 = _3044.x - _2363;
                                float _3179 = _3044.y - _2364;
                                float _3180 = _3044.z - _2365;
                                float _3181 = dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180));
                                float _3184 = inversesqrt(_3181);
                                float _3185 = _3184 * _3178;
                                float _3186 = _3184 * _3179;
                                float _3187 = _3184 * _3180;
                                float _3191 = 1.0 - (_3181 / (_3045 * _3045));
                                float _4274 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3196 = sqrt(_3181) * _3060.w;
                                float _3198 = 1.39999997615814208984375 / (_3196 + 1.39999997615814208984375);
                                float _3199 = _3198 * _3198;
                                float _3202 = ((1.0 - _3199) * dot(vec3(_3185, _3186, _3187), vec3(_549, _552, _555))) + _3199;
                                float _3205 = _3196 * _3196;
                                float _3209 = (fma(_2365, _3087.z, fma(_2364, _3087.y, _3087.x * _2363)) + _3087.w) / _3150;
                                float _3210 = (fma(_2365, _3103.z, fma(_2364, _3103.y, _3103.x * _2363)) + _3103.w) / _3150;
                                float _3214 = 1.0 - dot(vec2(_3209, _3210), vec2(_3209, _3210));
                                float _4290 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3216 = _3215 * (((isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0))) * _3192) / ((_3205 * 0.699999988079071044921875) + 1.0));
                                float _3228 = exp2(log2(1.0 / ((_3205 * 3.5) + 5.0)) * 0.25);
                                float _3229 = 1.0 - _669;
                                float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                                float _3237 = _3236 * _3236;
                                float _3238 = _3237 * _3237;
                                float _3239 = _3185 - _2657;
                                float _3240 = _3186 - _2658;
                                float _3241 = _3187 - _2659;
                                float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                                float _3249 = dot(vec3(_549, _552, _555), vec3((-0.0) - _2657, (-0.0) - _2658, (-0.0) - _2659));
                                float _4301 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3252 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3253 = dot(vec3(_549, _552, _555), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                                float _4312 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3256 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                                float _3261 = _3198 * _3237;
                                float _3262 = _3261 * _3261;
                                float _3268 = ((1.0 - _3262) * dot(vec3(_549, _552, _555), vec3(_3185, _3186, _3187))) + _3262;
                                float _4323 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3270 = 1.0 - _3237;
                                float _3280 = (0.5 / (((_3269 * ((_3252 * _3270) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3269 * _3270) + _3237) * _3252))) * _3269;
                                float _4334 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3290 = (_3215 * _3192) * (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_3260 * _3260) * ((_3205 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3216 * _3060.y;
                                frontier_phi_83_pred_1 = _3216 * _3060.x;
                                frontier_phi_83_pred_2 = _3290 * _3072.z;
                                frontier_phi_83_pred_3 = _3290 * _3072.y;
                                frontier_phi_83_pred_4 = _3290 * _3072.x;
                                frontier_phi_83_pred_5 = _3216 * _3060.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3298 = frontier_phi_83_pred;
                            _3297 = frontier_phi_83_pred_1;
                            _3296 = frontier_phi_83_pred_2;
                            _3295 = frontier_phi_83_pred_3;
                            _3294 = frontier_phi_83_pred_4;
                            _3299 = frontier_phi_83_pred_5;
                            _3002 = _3297 + _3015;
                            _3003 = _3298 + _3016;
                            _3004 = _3299 + _3017;
                            _2999 = _3294 + _3012;
                            _3000 = _3295 + _3013;
                            _3001 = _3296 + _3014;
                            if (_3019 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3019;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3004;
                        frontier_phi_77_pred_1 = _3003;
                        frontier_phi_77_pred_2 = _3002;
                        frontier_phi_77_pred_3 = _3001;
                        frontier_phi_77_pred_4 = _3000;
                        frontier_phi_77_pred_5 = _2999;
                    }
                    _2642 = frontier_phi_77_pred;
                    _2640 = frontier_phi_77_pred_1;
                    _2638 = frontier_phi_77_pred_2;
                    _2636 = frontier_phi_77_pred_3;
                    _2634 = frontier_phi_77_pred_4;
                    _2632 = frontier_phi_77_pred_5;
                    uint _2798 = _2797 + 1u;
                    if (_2798 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2791 = _2632;
                        _2792 = _2634;
                        _2793 = _2636;
                        _2794 = _2638;
                        _2795 = _2640;
                        _2796 = _2642;
                        _2797 = _2798;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2636;
                frontier_phi_58_59_ladder_1 = _2642;
                frontier_phi_58_59_ladder_2 = _2640;
                frontier_phi_58_59_ladder_3 = _2638;
                frontier_phi_58_59_ladder_4 = _2634;
                frontier_phi_58_59_ladder_5 = _2632;
            }
            else
            {
                frontier_phi_58_59_ladder = _2514;
                frontier_phi_58_59_ladder_1 = _2520;
                frontier_phi_58_59_ladder_2 = _2518;
                frontier_phi_58_59_ladder_3 = _2516;
                frontier_phi_58_59_ladder_4 = _2512;
                frontier_phi_58_59_ladder_5 = _2510;
            }
            _2631 = frontier_phi_58_59_ladder_5;
            _2633 = frontier_phi_58_59_ladder_4;
            _2635 = frontier_phi_58_59_ladder;
            _2637 = frontier_phi_58_59_ladder_3;
            _2639 = frontier_phi_58_59_ladder_2;
            _2641 = frontier_phi_58_59_ladder_1;
        }
        float _2646 = isnan(1.0) ? _653 : (isnan(_653) ? 1.0 : min(_653, 1.0));
        _2422 = (_2646 * _2637) + _1858;
        _2424 = (_2646 * _2639) + _1860;
        _2426 = (_2646 * _2641) + _1862;
        _2428 = ((_2631 * _638) * _2646) + _2203;
        _2430 = ((_2633 * _640) * _2646) + _2205;
        _2432 = ((_2635 * _641) * _2646) + _2207;
    }
    else
    {
        _2422 = _1858;
        _2424 = _1860;
        _2426 = _1862;
        _2428 = _2203;
        _2430 = _2205;
        _2432 = _2207;
    }
    float _4350 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _4361 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4372 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _2449 = ((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2422 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _653))) + ((_2428 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1494)) * cbPerFrame._m0[3u].x);
    float _2450 = ((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2424 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _653))) + ((_2430 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1494)) * cbPerFrame._m0[3u].x);
    float _2451 = ((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2426 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _653))) + ((_2432 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1494)) * cbPerFrame._m0[3u].x);
    uint _2452 = _581 + 6u;
    float _2460 = _524 / cbSceneParam._m0[86u].x;
    float _2461 = _525 / cbSceneParam._m0[86u].y;
    vec4 _2475 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2460, _2461, (log2((isnan(cbSceneParam._m0[77u].w) ? _445 : (isnan(_445) ? cbSceneParam._m0[77u].w : min(_445, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2477 = _2475.x;
    float _2478 = _2475.y;
    float _2479 = _2475.z;
    float _2480 = _2475.w;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    if (_445 > cbSceneParam._m0[78u].w)
    {
        float _2535 = isnan(_445) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _445 : min(cbSceneParam._m0[80u].w, _445));
        float _2536 = _2535 / _445;
        float _2547 = _2536 * _496;
        float _2548 = _497 * _2536;
        float _2549 = (-0.0) - _2548;
        float _2551 = _2536 * _498;
        float _2553 = (cbSceneParam._m0[77u].w * _2549) / _2535;
        float _2554 = _2553 + cbSceneParam._m0[79u].w;
        float _2555 = cbSceneParam._m0[79u].w - _2548;
        float _2561 = sqrt(((_2547 * _2547) + (_2548 * _2548)) + (_2551 * _2551));
        float _2564 = (1.0 - (cbSceneParam._m0[77u].w / _2535)) * _2561;
        float _2569 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2571 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2748;
        if (abs((_2549 - _2553) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2748 = ((((_2554 > 0.0) ? exp2(_2569 * _2554) : (2.0 - exp2(_2571 * _2554))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2564;
        }
        else
        {
            float _2692 = 1.0 / cbSceneParam._m0[80u].x;
            float _2693 = isnan(_2555) ? _2554 : (isnan(_2554) ? _2555 : max(_2554, _2555));
            float _2694 = isnan(_2555) ? _2554 : (isnan(_2554) ? _2555 : min(_2554, _2555));
            float _2703 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : min(_2693, 0.0));
            float _2704 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : min(_2694, 0.0));
            _2748 = ((abs(_2561 / _2549) * cbSceneParam._m0[80u].y) * ((((_2703 - _2704) * 2.0) - ((exp2(_2569 * (isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0)))) - exp2(_2569 * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0))))) * _2692)) - ((exp2(_2571 * _2703) - exp2(_2571 * _2704)) * _2692))) + (_2564 * cbSceneParam._m0[80u].z);
        }
        vec4 _2750 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2460, _2461, 1.0), 0.0);
        float _2759 = exp2((_2748 * (-1.44269502162933349609375)) * (1.0 - _2750.w));
        float _2760 = log2(_2759);
        float _2776 = log2(_2480);
        _2573 = (exp2(_2776 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].x)) * _2750.x) / cbSceneParam._m0[78u].x)) + _2477;
        _2575 = (exp2(_2776 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].y)) * _2750.y) / cbSceneParam._m0[78u].y)) + _2478;
        _2577 = (exp2(_2776 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].z)) * _2750.z) / cbSceneParam._m0[78u].z)) + _2479;
        _2579 = _2759 * _2480;
    }
    else
    {
        _2573 = _2477;
        _2575 = _2478;
        _2577 = _2479;
        _2579 = _2480;
    }
    bool _2786;
    vec4 _2589;
    vec4 _2611;
    float _2613;
    float _2617;
    float _2618;
    float _2619;
    float _2620;
    bool _2630;
    for (;;)
    {
        _2589 = cbMatDynParam._m0[0u];
        float _2591 = roundEven(_2589.y);
        bool _2592 = _2591 == 3.0;
        float _2593 = log2(_2579);
        float _2600 = exp2(_2593 * cbSceneParam._m0[78u].x) * _2449;
        float _2601 = exp2(_2593 * cbSceneParam._m0[78u].y) * _2450;
        float _2602 = exp2(_2593 * cbSceneParam._m0[78u].z) * _2451;
        float _2609 = _512 + (-0.5);
        _2611 = cbMtdParam._m0[1u];
        _2613 = _2611.y * _2609;
        float _2616 = (_2591 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2617 = _2616 * (_2592 ? _2600 : (_2600 + (cbSceneParam._m0[72u].w * _2573)));
        _2618 = _2616 * (_2592 ? _2601 : (_2601 + (cbSceneParam._m0[72u].w * _2575)));
        _2619 = _2616 * (_2592 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2577)));
        _2620 = _2609 * 0.999000012874603271484375;
        _2630 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2630)
        {
            if ((cbInstanceData._m0[_581 + 7u].x + _2620) < 0.5)
            {
                _2786 = true;
                break;
            }
        }
        uint _2727 = _582 + uint(_2589.w);
        if ((cbInstanceData._m0[_2727].w < 1.0) && ((cbInstanceData._m0[_2727].w + _2620) < 0.5))
        {
            _2786 = true;
            break;
        }
        if ((_2613 + 1.0) < _2611.x)
        {
            _2786 = true;
            break;
        }
        _2786 = false;
        break;
    }
    float _2990;
    if (_2786)
    {
        discard_state = true;
        _2990 = 0.0;
    }
    else
    {
        _2990 = cbInstanceData._m0[_2452].w;
    }
    SV_Target.x = _2617;
    SV_Target.y = _2618;
    SV_Target.z = _2619;
    SV_Target.w = _2990;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2452].w;
    discard_exit();
}


