#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_SL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_SL_snp_0_Texture2D_14;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_SL_snp_0_Texture2D_19;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_SL_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_SL_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1058;
float _3467;
float _3468;
float _3469;
float _3470;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _233 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _250 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _272 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _272.x;
    float _275 = _272.y;
    bool _312 = _274 >= 0.25;
    bool _317 = _274 >= 0.3499999940395355224609375;
    bool _322 = _274 >= 0.5;
    bool _327 = _274 >= 0.64999997615814208984375;
    bool _332 = _274 >= 0.75;
    float _349 = ((_233.x * 4.55000019073486328125) * _250.x) * ((((_332 ? cbMtdParam._m0[10u].x : (_327 ? cbMtdParam._m0[15u].x : (_322 ? cbMtdParam._m0[14u].x : (_317 ? cbMtdParam._m0[13u].x : (_312 ? cbMtdParam._m0[12u].x : cbMtdParam._m0[11u].x))))) - cbMtdParam._m0[9u].x) * _275) + cbMtdParam._m0[9u].x);
    float _352 = ((_233.y * 4.55000019073486328125) * _250.y) * ((((_332 ? cbMtdParam._m0[10u].y : (_327 ? cbMtdParam._m0[15u].y : (_322 ? cbMtdParam._m0[14u].y : (_317 ? cbMtdParam._m0[13u].y : (_312 ? cbMtdParam._m0[12u].y : cbMtdParam._m0[11u].y))))) - cbMtdParam._m0[9u].y) * _275) + cbMtdParam._m0[9u].y);
    float _355 = ((_233.z * 4.55000019073486328125) * _250.z) * ((((_332 ? cbMtdParam._m0[10u].z : (_327 ? cbMtdParam._m0[15u].z : (_322 ? cbMtdParam._m0[14u].z : (_317 ? cbMtdParam._m0[13u].z : (_312 ? cbMtdParam._m0[12u].z : cbMtdParam._m0[11u].z))))) - cbMtdParam._m0[9u].z) * _275) + cbMtdParam._m0[9u].z);
    vec4 _367 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _374 = cbMtdParam._m0[16u].x + _367.x;
    vec4 _387 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _395 = (_387.x * 2.0) + (-1.0);
    float _397 = (_387.y * 2.0) + (-1.0);
    float _398 = dot(vec2(_395, _397), vec2(_395, _397));
    float _3479 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _404 = sqrt(1.0 - (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))));
    float _405 = _387.z * cbMtdParam._m0[16u].y;
    float _409 = (cbMtdParam._m0[16u].z * _395) + _395;
    float _410 = (cbMtdParam._m0[16u].z * _397) + _397;
    float _413 = fma(_404, _208 * NORMAL.x, fma(_410, _215 * TANGENT.x, (_201 * _193) * _409));
    float _416 = fma(_404, _208 * NORMAL.y, fma(_410, _215 * TANGENT.y, (_201 * _194) * _409));
    float _419 = fma(_404, _208 * NORMAL.z, fma(_410, _215 * TANGENT.z, (_201 * _195) * _409));
    float _423 = inversesqrt(dot(vec3(_413, _416, _419), vec3(_413, _416, _419)));
    float _424 = _423 * _413;
    float _425 = _423 * _416;
    float _426 = _423 * _419;
    float _3490 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _427 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _3501 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3512 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3523 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _3534 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _431 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _447 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _498 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _488);
    float _499 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _488);
    float _500 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _488);
    float _504 = inversesqrt(dot(vec3(_498, _499, _500), vec3(_498, _499, _500)));
    float _505 = _498 * _504;
    float _506 = _499 * _504;
    float _507 = _500 * _504;
    vec4 _512 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _514 = _512.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _738 = sqrt(((_498 * _498) + (_499 * _499)) + (_500 * _500));
        float _744 = (cbMatDynParam._m0[5u].x * _738) + cbMatDynParam._m0[5u].y;
        float _3545 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _749 = (cbMatDynParam._m0[5u].z * _738) + cbMatDynParam._m0[5u].w;
        float _3556 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) - _745)) + _745) < ((_514 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _526 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _527 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _529 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _531 = _529.w;
    float _551 = fma(_426, cbSceneParam._m0[5u].z, fma(_425, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _424));
    float _554 = fma(_426, cbSceneParam._m0[6u].z, fma(_425, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _424));
    float _557 = fma(_426, cbSceneParam._m0[7u].z, fma(_425, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _424));
    vec4 _559 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _570 = (((_559.y - _427) + (_559.w * _427)) * cbMtdParam._m0[3u].x) + _427;
    uint _583 = uint(roundEven(NORMAL.w)) * 13u;
    uint _584 = _583 + 9u;
    uint _585 = _584 + uint(cbMatDynParam._m0[0u].w);
    float _591 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * cbInstanceData._m0[_585].x;
    float _592 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * cbInstanceData._m0[_585].y;
    float _593 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0)))) * cbInstanceData._m0[_585].z;
    float _3567 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    vec4 _597 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _602 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _613 = (((_602.x - _431) + (_602.w * _431)) * cbMtdParam._m0[3u].x) + _431;
    float _626 = (cbMtdParam._m0[3u].x * (((_594 * _531) - _594) + _597.x)) + _594;
    float _627 = (cbMtdParam._m0[3u].x * (((_595 * _531) - _595) + _597.y)) + _595;
    float _628 = (cbMtdParam._m0[3u].x * (((_596 * _531) - _596) + _597.z)) + _596;
    float _629 = 1.0 - _613;
    float _630 = _629 * _626;
    float _631 = _629 * _627;
    float _632 = _629 * _628;
    float _637 = (_626 + (-0.039999999105930328369140625)) * _613;
    float _638 = (_627 + (-0.039999999105930328369140625)) * _613;
    float _639 = (_628 + (-0.039999999105930328369140625)) * _613;
    float _640 = _637 + 0.039999999105930328369140625;
    float _642 = _638 + 0.039999999105930328369140625;
    float _643 = _639 + 0.039999999105930328369140625;
    vec4 _652 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _526, cbSceneParam._m0[86u].y * _527));
    float _655 = _652.x * TEXCOORD_4;
    float _656 = dot(vec3(_424, _425, _426), vec3(_505, _506, _507));
    float _659 = _656 * 2.0;
    float _663 = (_659 * _424) - _505;
    float _664 = (_659 * _425) - _506;
    float _665 = (_659 * _426) - _507;
    float _669 = abs(dot(vec3(_505, _506, _507), vec3(_424, _425, _426)));
    float _3600 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _671 = sqrt(_570);
    float _684 = exp2((_671 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_671 * 3.0));
    float _690 = (1.0 - _684) * ((_671 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _691 = _684 * _671;
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1057;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _783 = fma(_727, cbModelParam._m0[26u].z, fma(_723, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _719));
        float _787 = fma(_727, cbModelParam._m0[27u].z, fma(_723, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _719));
        float _791 = fma(_727, cbModelParam._m0[28u].z, fma(_723, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _719));
        float _815 = _719 + _424;
        float _816 = _723 + _425;
        float _817 = _727 + _426;
        float _827 = fma(_817, cbModelParam._m0[26u].z, fma(_816, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _815)) - _783;
        float _828 = fma(_817, cbModelParam._m0[27u].z, fma(_816, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _815)) - _787;
        float _829 = fma(_817, cbModelParam._m0[28u].z, fma(_816, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _815)) - _791;
        float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
        float _846 = ((_833 * _827) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_783 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_833 * _828) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_787 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_833 * _829) / cbModelParam._m0[34u].z) + ((((((_791 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        float _885 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_851.x + (-0.5));
        float _887 = _885 * (_851.y + (-0.5));
        float _888 = _885 * (_851.z + (-0.5));
        float _895 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_858.x + (-0.5));
        float _897 = _895 * (_858.y + (-0.5));
        float _898 = _895 * (_858.z + (-0.5));
        float _905 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_865.x + (-0.5));
        float _907 = _905 * (_865.y + (-0.5));
        float _908 = _905 * (_865.z + (-0.5));
        float _915 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_872.x + (-0.5));
        float _917 = _915 * (_872.y + (-0.5));
        float _918 = _915 * (_872.z + (-0.5));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = _886 * 0.5;
        float _923 = _896 * 0.5;
        float _924 = _906 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _939 = (dot(vec3(_424, _425, _426), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _949 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3648 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_951 + 1.0))) + _956) * _919;
        float _966 = _887 * 0.5;
        float _967 = _897 * 0.5;
        float _968 = _907 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_424, _425, _426), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3681 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_993 + 1.0))) + _998) * _920;
        float _1008 = _888 * 0.5;
        float _1009 = _898 * 0.5;
        float _1010 = _908 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_424, _425, _426), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3714 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1035 + 1.0))) + _1040) * _921;
        _1057 = _888;
        _1059 = _887;
        _1060 = _886;
        _1061 = _898;
        _1062 = _897;
        _1063 = _896;
        _1064 = _908;
        _1065 = _907;
        _1066 = _906;
        _1067 = _921;
        _1068 = _920;
        _1069 = _919;
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
    }
    else
    {
        _1057 = _1058;
        _1059 = _1058;
        _1060 = _1058;
        _1061 = _1058;
        _1062 = _1058;
        _1063 = _1058;
        _1064 = _1058;
        _1065 = _1058;
        _1066 = _1058;
        _1067 = _1058;
        _1068 = _1058;
        _1069 = _1058;
        _1070 = 0.0;
        _1071 = 0.0;
        _1072 = 0.0;
    }
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1101 = fma(_727, cbModelParam._m0[30u].z, fma(_723, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _719));
        float _1105 = fma(_727, cbModelParam._m0[31u].z, fma(_723, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _719));
        float _1109 = fma(_727, cbModelParam._m0[32u].z, fma(_723, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _719));
        float _1132 = _719 + _424;
        float _1133 = _723 + _425;
        float _1134 = _727 + _426;
        float _1144 = fma(_1134, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1132)) - _1101;
        float _1145 = fma(_1134, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1132)) - _1105;
        float _1146 = fma(_1134, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1132)) - _1109;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1101 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1105 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[35u].z) + ((((((_1109 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1200 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1167.x + (-0.5));
        float _1202 = _1200 * (_1167.y + (-0.5));
        float _1203 = _1200 * (_1167.z + (-0.5));
        float _1210 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1174.x + (-0.5));
        float _1212 = _1210 * (_1174.y + (-0.5));
        float _1213 = _1210 * (_1174.z + (-0.5));
        float _1220 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1181.x + (-0.5));
        float _1222 = _1220 * (_1181.y + (-0.5));
        float _1223 = _1220 * (_1181.z + (-0.5));
        float _1230 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1188.x + (-0.5));
        float _1232 = _1230 * (_1188.y + (-0.5));
        float _1233 = _1230 * (_1188.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_424, _425, _426), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3777 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1264 + 1.0))) + _1269) * _1234;
        float _1279 = _1202 * 0.5;
        float _1280 = _1212 * 0.5;
        float _1281 = _1222 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_424, _425, _426), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3810 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1306 + 1.0))) + _1311) * _1235;
        float _1321 = _1203 * 0.5;
        float _1322 = _1213 * 0.5;
        float _1323 = _1223 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_424, _425, _426), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3843 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1348 + 1.0))) + _1353) * _1236;
        _1370 = _1203;
        _1371 = _1202;
        _1372 = _1201;
        _1373 = _1213;
        _1374 = _1212;
        _1375 = _1211;
        _1376 = _1223;
        _1377 = _1222;
        _1378 = _1221;
        _1379 = _1236;
        _1380 = _1235;
        _1381 = _1234;
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1058;
        _1371 = _1058;
        _1372 = _1058;
        _1373 = _1058;
        _1374 = _1058;
        _1375 = _1058;
        _1376 = _1058;
        _1377 = _1058;
        _1378 = _1058;
        _1379 = _1058;
        _1380 = _1058;
        _1381 = _1058;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1070)) + _1070;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1071)) + _1071;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1072)) + _1072;
    float _1417 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1394));
    float _1438 = _663 * 0.5;
    float _1439 = _664 * 0.5;
    float _1440 = _665 * 0.5;
    float _1441 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1444 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1447 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1481;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1454 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1057, _1061, _1064, _1067));
        float _1458 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1462 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1469 = dot(vec4(cbModelParam._m0[39u]), vec4(_1438, _1439, _1440, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1492;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1483 = dot(vec4(cbModelParam._m0[40u]), vec4(_1438, _1439, _1440, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1496 = (_1492 * cbModelParam._m0[1u].x) + (_1481 * (1.0 - cbModelParam._m0[1u].x));
    float _1506 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _570);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1506 : min(cbModelParam._m0[25u].z, _1506));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1554 = fma(_727, cbModelParam._m0[13u].z, fma(_723, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719)) + cbModelParam._m0[13u].w;
        float _1558 = fma(_727, cbModelParam._m0[14u].z, fma(_723, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719)) + cbModelParam._m0[14u].w;
        float _1562 = fma(_727, cbModelParam._m0[15u].z, fma(_723, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719)) + cbModelParam._m0[15u].w;
        float _1565 = fma(_665, cbModelParam._m0[13u].z, fma(_664, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _663));
        float _1568 = fma(_665, cbModelParam._m0[14u].z, fma(_664, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _663));
        float _1571 = fma(_665, cbModelParam._m0[15u].z, fma(_664, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _663));
        float _1599;
        if (_1565 > 0.0)
        {
            _1599 = abs((1.0 - _1554) / _1565);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1554 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1599 = frontier_phi_17_15_ladder;
        }
        float _1826;
        if (_1568 > 0.0)
        {
            _1826 = abs((1.0 - _1558) / _1568);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1558 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1826 = frontier_phi_26_22_ladder;
        }
        float _2083;
        if (_1571 > 0.0)
        {
            _2083 = abs((1.0 - _1562) / _1571);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1562 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2083 = frontier_phi_38_33_ladder;
        }
        float _2085 = isnan(_1826) ? _1599 : (isnan(_1599) ? _1826 : min(_1599, _1826));
        float _2086 = isnan(_2083) ? _2085 : (isnan(_2085) ? _2083 : min(_2085, _2083));
        float _2090 = (_2086 * _1565) + _1554;
        float _2091 = (_2086 * _1568) + _1558;
        float _2092 = (_2086 * _1571) + _1562;
        float _2093 = _2086 * 9.9999997473787516355514526367188e-05;
        float _2095 = (-1.0) - _2093;
        float _2097 = _2093 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2092 > _2097) || ((_2092 < _2095) || ((_2091 > _2097) || ((_2091 < _2095) || ((_2090 < _2095) || (_2090 > _2097))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2220 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2092, cbModelParam._m0[9u].z, fma(_2091, cbModelParam._m0[9u].y, _2090 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2092, cbModelParam._m0[10u].z, fma(_2091, cbModelParam._m0[10u].y, _2090 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2092, cbModelParam._m0[11u].z, fma(_2091, cbModelParam._m0[11u].y, _2090 * cbModelParam._m0[11u].x))), _1507);
            frontier_phi_16_38_ladder = _2220.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2220.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2220.x * cbModelParam._m0[1u].y;
        }
        _1587 = frontier_phi_16_38_ladder_2;
        _1589 = frontier_phi_16_38_ladder_1;
        _1591 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_663, _664, _665), _1507);
        _1587 = _1575.x * cbModelParam._m0[1u].y;
        _1589 = _1575.y * cbModelParam._m0[1u].y;
        _1591 = _1575.z * cbModelParam._m0[1u].y;
    }
    float _1595 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _570);
    float _1596 = isnan(_1595) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1595 : min(cbModelParam._m0[25u].w, _1595));
    float _1689;
    float _1691;
    float _1693;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1653 = fma(_727, cbModelParam._m0[21u].z, fma(_723, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719)) + cbModelParam._m0[21u].w;
        float _1657 = fma(_727, cbModelParam._m0[22u].z, fma(_723, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719)) + cbModelParam._m0[22u].w;
        float _1661 = fma(_727, cbModelParam._m0[23u].z, fma(_723, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719)) + cbModelParam._m0[23u].w;
        float _1664 = fma(_665, cbModelParam._m0[21u].z, fma(_664, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _663));
        float _1667 = fma(_665, cbModelParam._m0[22u].z, fma(_664, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _663));
        float _1670 = fma(_665, cbModelParam._m0[23u].z, fma(_664, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _663));
        float _1831;
        if (_1664 > 0.0)
        {
            _1831 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1831 = frontier_phi_28_24_ladder;
        }
        float _2110;
        if (_1667 > 0.0)
        {
            _2110 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2110 = frontier_phi_40_35_ladder;
        }
        float _2323;
        if (_1670 > 0.0)
        {
            _2323 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2323 = frontier_phi_49_46_ladder;
        }
        float _2325 = isnan(_2110) ? _1831 : (isnan(_1831) ? _2110 : min(_1831, _2110));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1664) + _1653;
        float _2331 = (_2326 * _1667) + _1657;
        float _2332 = (_2326 * _1670) + _1661;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2333;
        float _2336 = _2333 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2332 > _2336) || ((_2332 < _2334) || ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 < _2334) || (_2330 > _2336))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2531 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2332, cbModelParam._m0[17u].z, fma(_2331, cbModelParam._m0[17u].y, _2330 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2332, cbModelParam._m0[18u].z, fma(_2331, cbModelParam._m0[18u].y, _2330 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2332, cbModelParam._m0[19u].z, fma(_2331, cbModelParam._m0[19u].y, _2330 * cbModelParam._m0[19u].x))), _1596);
            frontier_phi_25_49_ladder = _2531.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2531.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2531.x * cbModelParam._m0[1u].z;
        }
        _1689 = frontier_phi_25_49_ladder_2;
        _1691 = frontier_phi_25_49_ladder_1;
        _1693 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1673 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_663, _664, _665), _1596);
        _1689 = _1673.x * cbModelParam._m0[1u].z;
        _1691 = _1673.y * cbModelParam._m0[1u].z;
        _1693 = _1673.z * cbModelParam._m0[1u].z;
    }
    float _1706 = (((_690 * _640) + _691) * _655) * ((cbModelParam._m0[1u].w * (_1689 - _1587)) + _1587);
    float _1708 = (((_690 * _642) + _691) * _655) * ((cbModelParam._m0[1u].w * (_1691 - _1589)) + _1589);
    float _1710 = (((_690 * _643) + _691) * _655) * ((cbModelParam._m0[1u].w * (_1693 - _1591)) + _1591);
    float _1713 = fma(_1710, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1706 * cbSceneParam._m0[89u].x));
    float _1716 = fma(_1710, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1706 * cbSceneParam._m0[90u].x));
    float _1719 = fma(_1710, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, _1706 * cbSceneParam._m0[91u].x));
    vec4 _1727 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_526, _527));
    float _1729 = _1727.w;
    float _1741 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1729);
    float _1742 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1729);
    float _1743 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1729);
    uvec4 _1747 = floatBitsToUint(cbInstanceData._m0[_583 + 5u]);
    uint _1749 = _1747.x * 14u;
    uint _1750 = _1749 + 13u;
    float _1757 = _655 + (-1.0);
    float _1762 = (cbLight._m0[_1750].x * _1757) + 1.0;
    float _1763 = (cbLight._m0[_1750].y * _1757) + 1.0;
    float _1764 = (cbLight._m0[_1750].z * _1757) + 1.0;
    float _1765 = (cbLight._m0[_1750].w * _1757) + 1.0;
    uint _1766 = _1749 + 5u;
    float _1772 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
    uint _1776 = _1749 + 4u;
    float _1785 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
    uint _1789 = _1749 | 1u;
    float _1800 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_424, _425, _426));
    float _1803 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_424, _425, _426));
    float _3979 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _3990 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1808 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 0.3183098733425140380859375;
    float _1810 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.3183098733425140380859375;
    float _1817 = ((cbLight._m0[_1766].x * _1772) * _1810) + (((cbLight._m0[_1776].x * _1741) * _1785) * _1808);
    float _1818 = ((_1772 * cbLight._m0[_1766].y) * _1810) + (((cbLight._m0[_1776].y * _1742) * _1785) * _1808);
    float _1819 = ((_1772 * cbLight._m0[_1766].z) * _1810) + (((cbLight._m0[_1776].z * _1743) * _1785) * _1808);
    uvec4 _1823 = floatBitsToUint(cbLight._m0[_1749 + 12u]);
    bool _1825 = _1823.x == 0u;
    float _1836;
    float _1838;
    float _1840;
    if (_1825)
    {
        _1836 = _1817;
        _1838 = _1818;
        _1840 = _1819;
    }
    else
    {
        uint _1844 = _1749 + 6u;
        float _1860 = (dot(vec3(cbLight._m0[_1749 + 2u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _1861 = _1860 * _1860;
        float _4001 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1863 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
        _1836 = (((cbLight._m0[_1844].x * 0.3183098733425140380859375) * _1862) * _1863) + _1817;
        _1838 = (((cbLight._m0[_1844].y * 0.3183098733425140380859375) * _1862) * _1863) + _1818;
        _1840 = (((cbLight._m0[_1844].z * 0.3183098733425140380859375) * _1862) * _1863) + _1819;
    }
    bool _1843 = _1823.y == 0u;
    float _1881;
    float _1883;
    float _1885;
    if (_1843)
    {
        _1881 = _1836;
        _1883 = _1838;
        _1885 = _1840;
    }
    else
    {
        uint _2054 = _1749 + 7u;
        float _2070 = (dot(vec3(cbLight._m0[_1749 + 3u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _2071 = _2070 * _2070;
        float _4017 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2072 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2073 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _1881 = (((cbLight._m0[_2054].x * 0.3183098733425140380859375) * _2072) * _2073) + _1836;
        _1883 = (((cbLight._m0[_2054].y * 0.3183098733425140380859375) * _2072) * _2073) + _1838;
        _1885 = (((cbLight._m0[_2054].z * 0.3183098733425140380859375) * _2072) * _2073) + _1840;
    }
    uint _1888 = _1749 + 8u;
    float _1901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1749].w)) * _570) * 0.949999988079071044921875);
    float _1902 = _1901 * _1901;
    float _1903 = cbLight._m0[_1749].x + _505;
    float _1904 = cbLight._m0[_1749].y + _506;
    float _1905 = cbLight._m0[_1749].z + _507;
    float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
    float _1910 = _1909 * _1903;
    float _1911 = _1909 * _1904;
    float _1912 = _1909 * _1905;
    float _1913 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_1749].xyz));
    float _4033 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _1917 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _1918 = dot(vec3(_424, _425, _426), vec3(_1910, _1911, _1912));
    float _4055 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1922 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_1910, _1911, _1912));
    float _4066 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1926 = _1902 * _1902;
    float _1930 = ((_1921 * _1921) * (_1926 + (-1.0))) + 1.0;
    float _1938 = exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0);
    float _1939 = 0.959999978542327880859375 - _637;
    float _1941 = 0.959999978542327880859375 - _638;
    float _1942 = 0.959999978542327880859375 - _639;
    float _1949 = 1.0 - _1902;
    float _1960 = (0.5 / (((_1917 * ((_1916 * _1949) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _1949) + _1902) * _1916))) * _1916;
    float _4077 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1962 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1926 / ((_1930 * _1930) * 3.141590118408203125));
    uint _1976 = _1749 + 9u;
    float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1789].w)) * _570) * 0.949999988079071044921875);
    float _1988 = _1987 * _1987;
    float _1989 = cbLight._m0[_1789].x + _505;
    float _1990 = cbLight._m0[_1789].y + _506;
    float _1991 = cbLight._m0[_1789].z + _507;
    float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
    float _1996 = _1995 * _1989;
    float _1997 = _1995 * _1990;
    float _1998 = _1995 * _1991;
    float _1999 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_1789].xyz));
    float _4088 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _2003 = dot(vec3(_424, _425, _426), vec3(_1996, _1997, _1998));
    float _4099 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _2007 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_1996, _1997, _1998));
    float _4110 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2011 = _1988 * _1988;
    float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
    float _2022 = exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0);
    float _2029 = 1.0 - _1988;
    float _2039 = (0.5 / (((_1917 * ((_2002 * _2029) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2029) + _1988) * _2002))) * _2002;
    float _4121 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2041 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
    float _2051 = (((((_2022 * _1939) + _640) * cbLight._m0[_1976].x) * _2041) * _1772) + ((((cbLight._m0[_1888].x * _1741) * ((_1938 * _1939) + _640)) * _1962) * _1785);
    float _2052 = (((((_2022 * _1941) + _642) * cbLight._m0[_1976].y) * _2041) * _1772) + ((((cbLight._m0[_1888].y * _1742) * ((_1938 * _1941) + _642)) * _1962) * _1785);
    float _2053 = (((((_2022 * _1942) + _643) * cbLight._m0[_1976].z) * _2041) * _1772) + ((((cbLight._m0[_1888].z * _1743) * ((_1938 * _1942) + _643)) * _1962) * _1785);
    float _2115;
    float _2117;
    float _2119;
    if (_1825)
    {
        _2115 = _2051;
        _2117 = _2052;
        _2119 = _2053;
    }
    else
    {
        uint _2121 = _1749 + 2u;
        uint _2125 = _1749 + 10u;
        float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _570) * 0.949999988079071044921875);
        float _2140 = _2139 * _2139;
        float _2141 = cbLight._m0[_2121].x + _505;
        float _2142 = cbLight._m0[_2121].y + _506;
        float _2143 = cbLight._m0[_2121].z + _507;
        float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
        float _2148 = _2147 * _2141;
        float _2149 = _2147 * _2142;
        float _2150 = _2147 * _2143;
        float _2151 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2121].xyz));
        float _4132 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2155 = dot(vec3(_424, _425, _426), vec3(_2148, _2149, _2150));
        float _4143 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2159 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2148, _2149, _2150));
        float _4154 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2163 = _2140 * _2140;
        float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
        float _2174 = exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0);
        float _2181 = 1.0 - _2140;
        float _2191 = (0.5 / (((_1917 * ((_2154 * _2181) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2181) + _2140) * _2154))) * _2154;
        float _4165 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2193 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
        float _2194 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
        _2115 = (((((_2174 * _1939) + _640) * cbLight._m0[_2125].x) * _2193) * _2194) + _2051;
        _2117 = (((((_2174 * _1941) + _642) * cbLight._m0[_2125].y) * _2193) * _2194) + _2052;
        _2119 = (((((_2174 * _1942) + _643) * cbLight._m0[_2125].z) * _2193) * _2194) + _2053;
    }
    float _2229;
    float _2231;
    float _2233;
    if (_1843)
    {
        _2229 = _2115;
        _2231 = _2117;
        _2233 = _2119;
    }
    else
    {
        uint _2240 = _1749 + 3u;
        uint _2244 = _1749 + 11u;
        float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2240].w)) * _570) * 0.949999988079071044921875);
        float _2259 = _2258 * _2258;
        float _2260 = cbLight._m0[_2240].x + _505;
        float _2261 = cbLight._m0[_2240].y + _506;
        float _2262 = cbLight._m0[_2240].z + _507;
        float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
        float _2267 = _2266 * _2260;
        float _2268 = _2266 * _2261;
        float _2269 = _2266 * _2262;
        float _2270 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2240].xyz));
        float _4181 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2274 = dot(vec3(_424, _425, _426), vec3(_2267, _2268, _2269));
        float _4192 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2278 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_2267, _2268, _2269));
        float _4203 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2282 = _2259 * _2259;
        float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
        float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0);
        float _2300 = 1.0 - _2259;
        float _2310 = (0.5 / (((_1917 * ((_2273 * _2300) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_1917 * _2300) + _2259) * _2273))) * _2273;
        float _4214 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2312 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
        float _2313 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _2229 = (((((_2293 * _1939) + _640) * cbLight._m0[_2244].x) * _2312) * _2313) + _2115;
        _2231 = (((((_2293 * _1941) + _642) * cbLight._m0[_2244].y) * _2312) * _2313) + _2117;
        _2233 = (((((_2293 * _1942) + _643) * cbLight._m0[_2244].z) * _2312) * _2313) + _2119;
    }
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_1747.y == 0u)
    {
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2388;
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2388;
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2388;
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.x;
        uint _2415 = uint((float(_2403.y) * floor(float(uint(cbSceneParam._m0[85u].y * _527) / _2404))) + floor(float(uint(cbSceneParam._m0[85u].x * _526) / _2404)));
        float _2425 = (log2(_2391 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2426 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        uint _2429 = uint(isnan(14.0) ? _2426 : (isnan(_2426) ? 14.0 : min(_2426, 14.0)));
        uvec4 _2434 = texelFetch(g_lightClusterGridBuffer, int(((_2429 << 2u) + (_2415 << 6u)) >> 2u));
        uint _2435 = _2434.x;
        uint _2436 = _2403.z;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        if (((((1u << ((_2436 >> 4u) & 15u)) + 4294967295u) & _2435) == 0u) || ((_2436 & 240u) == 0u))
        {
            _2536 = 0.0;
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
        }
        else
        {
            float _2537;
            float _2539;
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            uint _2695 = 0u;
            uint _2704;
            bool _2705;
            for (;;)
            {
                _2704 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_2695 << 2u)) >> 2u)).x;
                _2705 = _2704 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2705)
                {
                    frontier_phi_66_pred = _2689;
                    frontier_phi_66_pred_1 = _2694;
                    frontier_phi_66_pred_2 = _2693;
                    frontier_phi_66_pred_3 = _2692;
                    frontier_phi_66_pred_4 = _2691;
                    frontier_phi_66_pred_5 = _2690;
                }
                else
                {
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    uint _2840;
                    _2834 = _2689;
                    _2835 = _2690;
                    _2836 = _2691;
                    _2837 = _2692;
                    _2838 = _2693;
                    _2839 = _2694;
                    _2840 = _2704;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    for (;;)
                    {
                        uint _2844 = uint(findLSB(_2840)) + (_2695 << 5u);
                        uint _2841 = (_2840 + 4294967295u) & _2840;
                        uint _2846 = _2844 * 48u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2866 = (_2844 * 48u) + 4u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2885 = (_2844 * 48u) + 8u;
                        vec3 _2896 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x));
                        float _2900 = _2860.x - _2389;
                        float _2901 = _2860.y - _2390;
                        float _2902 = _2860.z - _2391;
                        float _2903 = dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902));
                        float _2906 = inversesqrt(_2903);
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2910 = dot(vec3(_551, _554, _557), vec3(_2907, _2908, _2909));
                        float _2915 = 1.0 - (_2903 * _2860.w);
                        float _4240 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2917 = sqrt(_2903) * _2879.w;
                        float _2920 = 1.39999997615814208984375 / (_2917 + 1.39999997615814208984375);
                        float _2921 = _2920 * _2920;
                        float _2924 = ((1.0 - _2921) * _2910) + _2921;
                        float _2927 = _2917 * _2917;
                        float _2931 = ((isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0))) * _2916) / ((_2927 * 0.699999988079071044921875) + 1.0);
                        float _2935 = (-0.0) - _2389;
                        float _2936 = (-0.0) - _2390;
                        float _2937 = (-0.0) - _2391;
                        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
                        float _2942 = _2941 * _2935;
                        float _2943 = _2941 * _2936;
                        float _2944 = _2941 * _2937;
                        float _2951 = exp2(log2(1.0 / ((_2927 * 3.5) + 5.0)) * 0.25);
                        float _2952 = 1.0 - _671;
                        float _2959 = sqrt(1.0 - ((1.0 - (_2952 * _2952)) * (1.0 - (_2951 * _2951))));
                        float _2960 = _2959 * _2959;
                        float _2961 = _2960 * _2960;
                        float _2962 = _2942 + _2907;
                        float _2963 = _2943 + _2908;
                        float _2964 = _2944 + _2909;
                        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
                        float _2972 = dot(vec3(_551, _554, _557), vec3(_2942, _2943, _2944));
                        float _4256 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2975 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2976 = dot(vec3(_551, _554, _557), vec3(_2968 * _2962, _2968 * _2963, _2968 * _2964));
                        float _4267 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2983 = ((_2979 * _2979) * (_2961 + (-1.0))) + 1.0;
                        float _2984 = _2920 * _2960;
                        float _2985 = _2984 * _2984;
                        float _2988 = ((1.0 - _2985) * _2910) + _2985;
                        float _4278 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _2990 = 1.0 - _2960;
                        float _3000 = (0.5 / (((_2989 * ((_2975 * _2990) + _2960)) + 9.9999999392252902907785028219223e-09) + (((_2989 * _2990) + _2960) * _2975))) * _2989;
                        float _4289 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3011 = (((_2961 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_2983 * _2983) * ((_2927 * 2.1991131305694580078125) + 3.141590118408203125))) * _2916;
                        _2764 = (_2931 * _2879.x) + _2837;
                        _2765 = (_2931 * _2879.y) + _2838;
                        _2766 = (_2931 * _2879.z) + _2839;
                        _2761 = (_3011 * _2896.x) + _2834;
                        _2762 = (_3011 * _2896.y) + _2835;
                        _2763 = (_3011 * _2896.z) + _2836;
                        if (_2841 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2834 = _2761;
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2764;
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2841;
                        }
                    }
                    frontier_phi_66_pred = _2761;
                    frontier_phi_66_pred_1 = _2766;
                    frontier_phi_66_pred_2 = _2765;
                    frontier_phi_66_pred_3 = _2764;
                    frontier_phi_66_pred_4 = _2763;
                    frontier_phi_66_pred_5 = _2762;
                }
                _2537 = frontier_phi_66_pred;
                _2547 = frontier_phi_66_pred_1;
                _2545 = frontier_phi_66_pred_2;
                _2543 = frontier_phi_66_pred_3;
                _2541 = frontier_phi_66_pred_4;
                _2539 = frontier_phi_66_pred_5;
                uint _2696 = _2695 + 1u;
                if (_2696 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2689 = _2537;
                    _2690 = _2539;
                    _2691 = _2541;
                    _2692 = _2543;
                    _2693 = _2545;
                    _2694 = _2547;
                    _2695 = _2696;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2536 = _2537;
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
        }
        uvec4 _2550 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2551 = _2550.z;
        uint _2553 = (_2551 >> 8u) & 15u;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((4294967295u << _2553) & _2435) == 0u)
        {
            _2657 = _2536;
            _2659 = _2538;
            _2661 = _2540;
            _2663 = _2542;
            _2665 = _2544;
            _2667 = _2546;
        }
        else
        {
            float _2682 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
            float _2683 = _2682 * _2389;
            float _2684 = _2682 * _2390;
            float _2685 = _2682 * _2391;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2553 < ((_2551 >> 12u) & 15u))
            {
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2817 = _2536;
                float _2818 = _2538;
                float _2819 = _2540;
                float _2820 = _2542;
                float _2821 = _2544;
                float _2822 = _2546;
                uint _2823 = _2553;
                uint _2832;
                bool _2833;
                for (;;)
                {
                    _2832 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                    _2833 = _2832 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2833)
                    {
                        frontier_phi_77_pred = _2822;
                        frontier_phi_77_pred_1 = _2821;
                        frontier_phi_77_pred_2 = _2820;
                        frontier_phi_77_pred_3 = _2819;
                        frontier_phi_77_pred_4 = _2818;
                        frontier_phi_77_pred_5 = _2817;
                    }
                    else
                    {
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3038 = _2817;
                        float _3039 = _2818;
                        float _3040 = _2819;
                        float _3041 = _2820;
                        float _3042 = _2821;
                        float _3043 = _2822;
                        uint _3044 = _2832;
                        uint _3045;
                        vec4 _3070;
                        float _3071;
                        vec4 _3086;
                        vec3 _3098;
                        vec4 _3113;
                        vec4 _3129;
                        float _3176;
                        bool _3177;
                        for (;;)
                        {
                            uint _3055 = ((_2823 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3044));
                            _3045 = (_3044 + 4294967295u) & _3044;
                            uint _3057 = _3055 * 40u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            _3071 = _3070.w;
                            uint _3073 = (_3055 * 40u) + 4u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3088 = (_3055 * 40u) + 8u;
                            _3098 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x));
                            uint _3100 = (_3055 * 40u) + 16u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3116 = (_3055 * 40u) + 20u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3132 = (_3055 * 40u) + 24u;
                            vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3151 = (_3055 * 40u) + 28u;
                            vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            _3176 = fma(_2391, _3164.z, fma(_2390, _3164.y, _3164.x * _2389)) + _3164.w;
                            _3177 = !((fma(_2391, _3145.z, fma(_2390, _3145.y, _3145.x * _2389)) + _3145.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3177)
                            {
                                float _3204 = _3070.x - _2389;
                                float _3205 = _3070.y - _2390;
                                float _3206 = _3070.z - _2391;
                                float _3207 = dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206));
                                float _3210 = inversesqrt(_3207);
                                float _3211 = _3210 * _3204;
                                float _3212 = _3210 * _3205;
                                float _3213 = _3210 * _3206;
                                float _3217 = 1.0 - (_3207 / (_3071 * _3071));
                                float _4300 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3218 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3222 = sqrt(_3207) * _3086.w;
                                float _3224 = 1.39999997615814208984375 / (_3222 + 1.39999997615814208984375);
                                float _3225 = _3224 * _3224;
                                float _3228 = ((1.0 - _3225) * dot(vec3(_3211, _3212, _3213), vec3(_551, _554, _557))) + _3225;
                                float _3231 = _3222 * _3222;
                                float _3235 = (fma(_2391, _3113.z, fma(_2390, _3113.y, _3113.x * _2389)) + _3113.w) / _3176;
                                float _3236 = (fma(_2391, _3129.z, fma(_2390, _3129.y, _3129.x * _2389)) + _3129.w) / _3176;
                                float _3240 = 1.0 - dot(vec2(_3235, _3236), vec2(_3235, _3236));
                                float _4316 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3242 = _3241 * (((isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))) * _3218) / ((_3231 * 0.699999988079071044921875) + 1.0));
                                float _3254 = exp2(log2(1.0 / ((_3231 * 3.5) + 5.0)) * 0.25);
                                float _3255 = 1.0 - _671;
                                float _3262 = sqrt(1.0 - ((1.0 - (_3255 * _3255)) * (1.0 - (_3254 * _3254))));
                                float _3263 = _3262 * _3262;
                                float _3264 = _3263 * _3263;
                                float _3265 = _3211 - _2683;
                                float _3266 = _3212 - _2684;
                                float _3267 = _3213 - _2685;
                                float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                                float _3275 = dot(vec3(_551, _554, _557), vec3((-0.0) - _2683, (-0.0) - _2684, (-0.0) - _2685));
                                float _4327 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3278 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3279 = dot(vec3(_551, _554, _557), vec3(_3271 * _3265, _3271 * _3266, _3271 * _3267));
                                float _4338 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3282 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3286 = ((_3282 * _3282) * (_3264 + (-1.0))) + 1.0;
                                float _3287 = _3224 * _3263;
                                float _3288 = _3287 * _3287;
                                float _3294 = ((1.0 - _3288) * dot(vec3(_551, _554, _557), vec3(_3211, _3212, _3213))) + _3288;
                                float _4349 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3295 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3296 = 1.0 - _3263;
                                float _3306 = (0.5 / (((_3295 * ((_3278 * _3296) + _3263)) + 9.9999999392252902907785028219223e-09) + (((_3295 * _3296) + _3263) * _3278))) * _3295;
                                float _4360 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3316 = (_3241 * _3218) * (((_3264 * 3.1415927410125732421875) * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) / ((_3286 * _3286) * ((_3231 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3242 * _3086.y;
                                frontier_phi_83_pred_1 = _3242 * _3086.x;
                                frontier_phi_83_pred_2 = _3316 * _3098.z;
                                frontier_phi_83_pred_3 = _3316 * _3098.y;
                                frontier_phi_83_pred_4 = _3316 * _3098.x;
                                frontier_phi_83_pred_5 = _3242 * _3086.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3324 = frontier_phi_83_pred;
                            _3323 = frontier_phi_83_pred_1;
                            _3322 = frontier_phi_83_pred_2;
                            _3321 = frontier_phi_83_pred_3;
                            _3320 = frontier_phi_83_pred_4;
                            _3325 = frontier_phi_83_pred_5;
                            _3028 = _3323 + _3041;
                            _3029 = _3324 + _3042;
                            _3030 = _3325 + _3043;
                            _3025 = _3320 + _3038;
                            _3026 = _3321 + _3039;
                            _3027 = _3322 + _3040;
                            if (_3045 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3045;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3030;
                        frontier_phi_77_pred_1 = _3029;
                        frontier_phi_77_pred_2 = _3028;
                        frontier_phi_77_pred_3 = _3027;
                        frontier_phi_77_pred_4 = _3026;
                        frontier_phi_77_pred_5 = _3025;
                    }
                    _2668 = frontier_phi_77_pred;
                    _2666 = frontier_phi_77_pred_1;
                    _2664 = frontier_phi_77_pred_2;
                    _2662 = frontier_phi_77_pred_3;
                    _2660 = frontier_phi_77_pred_4;
                    _2658 = frontier_phi_77_pred_5;
                    uint _2824 = _2823 + 1u;
                    if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2817 = _2658;
                        _2818 = _2660;
                        _2819 = _2662;
                        _2820 = _2664;
                        _2821 = _2666;
                        _2822 = _2668;
                        _2823 = _2824;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2662;
                frontier_phi_58_59_ladder_1 = _2668;
                frontier_phi_58_59_ladder_2 = _2666;
                frontier_phi_58_59_ladder_3 = _2664;
                frontier_phi_58_59_ladder_4 = _2660;
                frontier_phi_58_59_ladder_5 = _2658;
            }
            else
            {
                frontier_phi_58_59_ladder = _2540;
                frontier_phi_58_59_ladder_1 = _2546;
                frontier_phi_58_59_ladder_2 = _2544;
                frontier_phi_58_59_ladder_3 = _2542;
                frontier_phi_58_59_ladder_4 = _2538;
                frontier_phi_58_59_ladder_5 = _2536;
            }
            _2657 = frontier_phi_58_59_ladder_5;
            _2659 = frontier_phi_58_59_ladder_4;
            _2661 = frontier_phi_58_59_ladder;
            _2663 = frontier_phi_58_59_ladder_3;
            _2665 = frontier_phi_58_59_ladder_2;
            _2667 = frontier_phi_58_59_ladder_1;
        }
        float _2672 = isnan(1.0) ? _655 : (isnan(_655) ? 1.0 : min(_655, 1.0));
        _2448 = (_2672 * _2663) + _1881;
        _2450 = (_2672 * _2665) + _1883;
        _2452 = (_2672 * _2667) + _1885;
        _2454 = ((_2657 * _640) * _2672) + _2229;
        _2456 = ((_2659 * _642) * _2672) + _2231;
        _2458 = ((_2661 * _643) * _2672) + _2233;
    }
    else
    {
        _2448 = _1881;
        _2450 = _1883;
        _2452 = _1885;
        _2454 = _2229;
        _2456 = _2231;
        _2458 = _2233;
    }
    float _4376 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4387 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4398 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _2475 = ((isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2448 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _655))) + ((_2454 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    float _2476 = ((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2450 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _655))) + ((_2456 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    float _2477 = ((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2452 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _655))) + ((_2458 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    uint _2478 = _583 + 6u;
    float _2486 = _526 / cbSceneParam._m0[86u].x;
    float _2487 = _527 / cbSceneParam._m0[86u].y;
    vec4 _2501 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2486, _2487, (log2((isnan(cbSceneParam._m0[77u].w) ? _447 : (isnan(_447) ? cbSceneParam._m0[77u].w : min(_447, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2503 = _2501.x;
    float _2504 = _2501.y;
    float _2505 = _2501.z;
    float _2506 = _2501.w;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    if (_447 > cbSceneParam._m0[78u].w)
    {
        float _2561 = isnan(_447) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _447 : min(cbSceneParam._m0[80u].w, _447));
        float _2562 = _2561 / _447;
        float _2573 = _2562 * _498;
        float _2574 = _499 * _2562;
        float _2575 = (-0.0) - _2574;
        float _2577 = _2562 * _500;
        float _2579 = (cbSceneParam._m0[77u].w * _2575) / _2561;
        float _2580 = _2579 + cbSceneParam._m0[79u].w;
        float _2581 = cbSceneParam._m0[79u].w - _2574;
        float _2587 = sqrt(((_2573 * _2573) + (_2574 * _2574)) + (_2577 * _2577));
        float _2590 = (1.0 - (cbSceneParam._m0[77u].w / _2561)) * _2587;
        float _2595 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2597 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2774;
        if (abs((_2575 - _2579) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2774 = ((((_2580 > 0.0) ? exp2(_2595 * _2580) : (2.0 - exp2(_2597 * _2580))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2590;
        }
        else
        {
            float _2718 = 1.0 / cbSceneParam._m0[80u].x;
            float _2719 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : max(_2580, _2581));
            float _2720 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : min(_2580, _2581));
            float _2729 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : min(_2719, 0.0));
            float _2730 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : min(_2720, 0.0));
            _2774 = ((abs(_2587 / _2575) * cbSceneParam._m0[80u].y) * ((((_2729 - _2730) * 2.0) - ((exp2(_2595 * (isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0)))) - exp2(_2595 * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))))) * _2718)) - ((exp2(_2597 * _2729) - exp2(_2597 * _2730)) * _2718))) + (_2590 * cbSceneParam._m0[80u].z);
        }
        vec4 _2776 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2486, _2487, 1.0), 0.0);
        float _2785 = exp2((_2774 * (-1.44269502162933349609375)) * (1.0 - _2776.w));
        float _2786 = log2(_2785);
        float _2802 = log2(_2506);
        _2599 = (exp2(_2802 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].x)) * _2776.x) / cbSceneParam._m0[78u].x)) + _2503;
        _2601 = (exp2(_2802 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].y)) * _2776.y) / cbSceneParam._m0[78u].y)) + _2504;
        _2603 = (exp2(_2802 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].z)) * _2776.z) / cbSceneParam._m0[78u].z)) + _2505;
        _2605 = _2785 * _2506;
    }
    else
    {
        _2599 = _2503;
        _2601 = _2504;
        _2603 = _2505;
        _2605 = _2506;
    }
    bool _2812;
    vec4 _2615;
    vec4 _2637;
    float _2639;
    float _2643;
    float _2644;
    float _2645;
    float _2646;
    bool _2656;
    for (;;)
    {
        _2615 = cbMatDynParam._m0[0u];
        float _2617 = roundEven(_2615.y);
        bool _2618 = _2617 == 3.0;
        float _2619 = log2(_2605);
        float _2626 = exp2(_2619 * cbSceneParam._m0[78u].x) * _2475;
        float _2627 = exp2(_2619 * cbSceneParam._m0[78u].y) * _2476;
        float _2628 = exp2(_2619 * cbSceneParam._m0[78u].z) * _2477;
        float _2635 = _514 + (-0.5);
        _2637 = cbMtdParam._m0[1u];
        _2639 = _2637.y * _2635;
        float _2642 = (_2617 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2643 = _2642 * (_2618 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2599)));
        _2644 = _2642 * (_2618 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2601)));
        _2645 = _2642 * (_2618 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2603)));
        _2646 = _2635 * 0.999000012874603271484375;
        _2656 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2656)
        {
            if ((cbInstanceData._m0[_583 + 7u].x + _2646) < 0.5)
            {
                _2812 = true;
                break;
            }
        }
        uint _2753 = _584 + uint(_2615.w);
        if ((cbInstanceData._m0[_2753].w < 1.0) && ((cbInstanceData._m0[_2753].w + _2646) < 0.5))
        {
            _2812 = true;
            break;
        }
        if ((_2639 + 1.0) < _2637.x)
        {
            _2812 = true;
            break;
        }
        _2812 = false;
        break;
    }
    float _3016;
    if (_2812)
    {
        discard_state = true;
        _3016 = 0.0;
    }
    else
    {
        _3016 = cbInstanceData._m0[_2478].w;
    }
    SV_Target.x = _2643;
    SV_Target.y = _2644;
    SV_Target.z = _2645;
    SV_Target.w = _3016;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2478].w;
    discard_exit();
}


