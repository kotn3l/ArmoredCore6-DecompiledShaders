#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_SL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_SL_snp_0_Texture2D_14;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_SL_snp_0_Texture2D_19;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_SL_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_SL_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1060;
float _3728;
float _3729;
float _3730;
float _3731;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _252 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _274 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _274.x;
    float _277 = _274.y;
    bool _314 = _276 >= 0.25;
    bool _319 = _276 >= 0.3499999940395355224609375;
    bool _324 = _276 >= 0.5;
    bool _329 = _276 >= 0.64999997615814208984375;
    bool _334 = _276 >= 0.75;
    float _351 = ((_235.x * 4.55000019073486328125) * _252.x) * ((((_334 ? cbMtdParam._m0[10u].x : (_329 ? cbMtdParam._m0[15u].x : (_324 ? cbMtdParam._m0[14u].x : (_319 ? cbMtdParam._m0[13u].x : (_314 ? cbMtdParam._m0[12u].x : cbMtdParam._m0[11u].x))))) - cbMtdParam._m0[9u].x) * _277) + cbMtdParam._m0[9u].x);
    float _354 = ((_235.y * 4.55000019073486328125) * _252.y) * ((((_334 ? cbMtdParam._m0[10u].y : (_329 ? cbMtdParam._m0[15u].y : (_324 ? cbMtdParam._m0[14u].y : (_319 ? cbMtdParam._m0[13u].y : (_314 ? cbMtdParam._m0[12u].y : cbMtdParam._m0[11u].y))))) - cbMtdParam._m0[9u].y) * _277) + cbMtdParam._m0[9u].y);
    float _357 = ((_235.z * 4.55000019073486328125) * _252.z) * ((((_334 ? cbMtdParam._m0[10u].z : (_329 ? cbMtdParam._m0[15u].z : (_324 ? cbMtdParam._m0[14u].z : (_319 ? cbMtdParam._m0[13u].z : (_314 ? cbMtdParam._m0[12u].z : cbMtdParam._m0[11u].z))))) - cbMtdParam._m0[9u].z) * _277) + cbMtdParam._m0[9u].z);
    vec4 _369 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _376 = cbMtdParam._m0[16u].x + _369.x;
    vec4 _389 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _397 = (_389.x * 2.0) + (-1.0);
    float _399 = (_389.y * 2.0) + (-1.0);
    float _400 = dot(vec2(_397, _399), vec2(_397, _399));
    float _3740 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _406 = sqrt(1.0 - (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))));
    float _407 = _389.z * cbMtdParam._m0[16u].y;
    float _411 = (cbMtdParam._m0[16u].z * _397) + _397;
    float _412 = (cbMtdParam._m0[16u].z * _399) + _399;
    float _415 = fma(_406, _210 * NORMAL.x, fma(_412, _217 * TANGENT.x, (_203 * _195) * _411));
    float _418 = fma(_406, _210 * NORMAL.y, fma(_412, _217 * TANGENT.y, (_203 * _196) * _411));
    float _421 = fma(_406, _210 * NORMAL.z, fma(_412, _217 * TANGENT.z, (_203 * _197) * _411));
    float _425 = inversesqrt(dot(vec3(_415, _418, _421), vec3(_415, _418, _421)));
    float _426 = _425 * _415;
    float _427 = _425 * _418;
    float _428 = _425 * _421;
    float _3751 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _429 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3773 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _3784 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3795 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _433 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _449 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _500 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _490);
    float _501 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _490);
    float _502 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _490);
    float _506 = inversesqrt(dot(vec3(_500, _501, _502), vec3(_500, _501, _502)));
    float _507 = _500 * _506;
    float _508 = _501 * _506;
    float _509 = _502 * _506;
    vec4 _514 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _516 = _514.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _740 = sqrt(((_500 * _500) + (_501 * _501)) + (_502 * _502));
        float _746 = (cbMatDynParam._m0[5u].x * _740) + cbMatDynParam._m0[5u].y;
        float _3806 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _751 = (cbMatDynParam._m0[5u].z * _740) + cbMatDynParam._m0[5u].w;
        float _3817 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) - _747)) + _747) < ((_516 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _528 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _529 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _531 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _533 = _531.w;
    float _553 = fma(_428, cbSceneParam._m0[5u].z, fma(_427, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _426));
    float _556 = fma(_428, cbSceneParam._m0[6u].z, fma(_427, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _426));
    float _559 = fma(_428, cbSceneParam._m0[7u].z, fma(_427, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _426));
    vec4 _561 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _572 = (((_561.y - _429) + (_561.w * _429)) * cbMtdParam._m0[3u].x) + _429;
    uint _585 = uint(roundEven(NORMAL.w)) * 13u;
    uint _586 = _585 + 9u;
    uint _587 = _586 + uint(cbMatDynParam._m0[0u].w);
    float _593 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_587].x;
    float _594 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_587].y;
    float _595 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_587].z;
    float _3828 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    vec4 _599 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _604 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _615 = (((_604.x - _433) + (_604.w * _433)) * cbMtdParam._m0[3u].x) + _433;
    float _628 = (cbMtdParam._m0[3u].x * (((_596 * _533) - _596) + _599.x)) + _596;
    float _629 = (cbMtdParam._m0[3u].x * (((_597 * _533) - _597) + _599.y)) + _597;
    float _630 = (cbMtdParam._m0[3u].x * (((_598 * _533) - _598) + _599.z)) + _598;
    float _631 = 1.0 - _615;
    float _632 = _631 * _628;
    float _633 = _631 * _629;
    float _634 = _631 * _630;
    float _639 = (_628 + (-0.039999999105930328369140625)) * _615;
    float _640 = (_629 + (-0.039999999105930328369140625)) * _615;
    float _641 = (_630 + (-0.039999999105930328369140625)) * _615;
    float _642 = _639 + 0.039999999105930328369140625;
    float _644 = _640 + 0.039999999105930328369140625;
    float _645 = _641 + 0.039999999105930328369140625;
    vec4 _654 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _528, cbSceneParam._m0[86u].y * _529));
    float _657 = _654.x * TEXCOORD_4;
    float _658 = dot(vec3(_426, _427, _428), vec3(_507, _508, _509));
    float _661 = _658 * 2.0;
    float _665 = (_661 * _426) - _507;
    float _666 = (_661 * _427) - _508;
    float _667 = (_661 * _428) - _509;
    float _671 = abs(dot(vec3(_507, _508, _509), vec3(_426, _427, _428)));
    float _3861 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _673 = sqrt(_572);
    float _686 = exp2((_673 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_673 * 3.0));
    float _692 = (1.0 - _686) * ((_673 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _693 = _686 * _673;
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1059;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _785 = fma(_729, cbModelParam._m0[26u].z, fma(_725, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _721));
        float _789 = fma(_729, cbModelParam._m0[27u].z, fma(_725, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _721));
        float _793 = fma(_729, cbModelParam._m0[28u].z, fma(_725, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _721));
        float _817 = _721 + _426;
        float _818 = _725 + _427;
        float _819 = _729 + _428;
        float _829 = fma(_819, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _817)) - _785;
        float _830 = fma(_819, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _817)) - _789;
        float _831 = fma(_819, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _817)) - _793;
        float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
        float _848 = ((_835 * _829) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_785 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_835 * _830) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_789 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_835 * _831) / cbModelParam._m0[34u].z) + ((((((_793 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        float _887 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_853.x + (-0.5));
        float _889 = _887 * (_853.y + (-0.5));
        float _890 = _887 * (_853.z + (-0.5));
        float _897 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_860.x + (-0.5));
        float _899 = _897 * (_860.y + (-0.5));
        float _900 = _897 * (_860.z + (-0.5));
        float _907 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_867.x + (-0.5));
        float _909 = _907 * (_867.y + (-0.5));
        float _910 = _907 * (_867.z + (-0.5));
        float _917 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_874.x + (-0.5));
        float _919 = _917 * (_874.y + (-0.5));
        float _920 = _917 * (_874.z + (-0.5));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = _888 * 0.5;
        float _925 = _898 * 0.5;
        float _926 = _908 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _941 = (dot(vec3(_426, _427, _428), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _951 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3909 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_953 + 1.0))) + _958) * _921;
        float _968 = _889 * 0.5;
        float _969 = _899 * 0.5;
        float _970 = _909 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_426, _427, _428), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3942 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_995 + 1.0))) + _1000) * _922;
        float _1010 = _890 * 0.5;
        float _1011 = _900 * 0.5;
        float _1012 = _910 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_426, _427, _428), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3975 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1037 + 1.0))) + _1042) * _923;
        _1059 = _890;
        _1061 = _889;
        _1062 = _888;
        _1063 = _900;
        _1064 = _899;
        _1065 = _898;
        _1066 = _910;
        _1067 = _909;
        _1068 = _908;
        _1069 = _923;
        _1070 = _922;
        _1071 = _921;
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
    }
    else
    {
        _1059 = _1060;
        _1061 = _1060;
        _1062 = _1060;
        _1063 = _1060;
        _1064 = _1060;
        _1065 = _1060;
        _1066 = _1060;
        _1067 = _1060;
        _1068 = _1060;
        _1069 = _1060;
        _1070 = _1060;
        _1071 = _1060;
        _1072 = 0.0;
        _1073 = 0.0;
        _1074 = 0.0;
    }
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1103 = fma(_729, cbModelParam._m0[30u].z, fma(_725, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _721));
        float _1107 = fma(_729, cbModelParam._m0[31u].z, fma(_725, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _721));
        float _1111 = fma(_729, cbModelParam._m0[32u].z, fma(_725, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _721));
        float _1134 = _721 + _426;
        float _1135 = _725 + _427;
        float _1136 = _729 + _428;
        float _1146 = fma(_1136, cbModelParam._m0[30u].z, fma(_1135, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1134)) - _1103;
        float _1147 = fma(_1136, cbModelParam._m0[31u].z, fma(_1135, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1134)) - _1107;
        float _1148 = fma(_1136, cbModelParam._m0[32u].z, fma(_1135, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1134)) - _1111;
        float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
        float _1165 = ((_1152 * _1146) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1103 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1152 * _1147) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1107 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1152 * _1148) / cbModelParam._m0[35u].z) + ((((((_1111 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        float _1202 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1169.x + (-0.5));
        float _1204 = _1202 * (_1169.y + (-0.5));
        float _1205 = _1202 * (_1169.z + (-0.5));
        float _1212 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1176.x + (-0.5));
        float _1214 = _1212 * (_1176.y + (-0.5));
        float _1215 = _1212 * (_1176.z + (-0.5));
        float _1222 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1183.x + (-0.5));
        float _1224 = _1222 * (_1183.y + (-0.5));
        float _1225 = _1222 * (_1183.z + (-0.5));
        float _1232 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1190.x + (-0.5));
        float _1234 = _1232 * (_1190.y + (-0.5));
        float _1235 = _1232 * (_1190.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_426, _427, _428), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4038 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1266 + 1.0))) + _1271) * _1236;
        float _1281 = _1204 * 0.5;
        float _1282 = _1214 * 0.5;
        float _1283 = _1224 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_426, _427, _428), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4071 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1308 + 1.0))) + _1313) * _1237;
        float _1323 = _1205 * 0.5;
        float _1324 = _1215 * 0.5;
        float _1325 = _1225 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_426, _427, _428), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4104 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1350 + 1.0))) + _1355) * _1238;
        _1372 = _1205;
        _1373 = _1204;
        _1374 = _1203;
        _1375 = _1215;
        _1376 = _1214;
        _1377 = _1213;
        _1378 = _1225;
        _1379 = _1224;
        _1380 = _1223;
        _1381 = _1238;
        _1382 = _1237;
        _1383 = _1236;
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1060;
        _1373 = _1060;
        _1374 = _1060;
        _1375 = _1060;
        _1376 = _1060;
        _1377 = _1060;
        _1378 = _1060;
        _1379 = _1060;
        _1380 = _1060;
        _1381 = _1060;
        _1382 = _1060;
        _1383 = _1060;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1072)) + _1072;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1073)) + _1073;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1074)) + _1074;
    float _1419 = fma(_1398, cbSceneParam._m0[89u].z, fma(_1397, cbSceneParam._m0[89u].y, _1396 * cbSceneParam._m0[89u].x));
    float _1422 = fma(_1398, cbSceneParam._m0[90u].z, fma(_1397, cbSceneParam._m0[90u].y, _1396 * cbSceneParam._m0[90u].x));
    float _1425 = fma(_1398, cbSceneParam._m0[91u].z, fma(_1397, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1396));
    float _1440 = _665 * 0.5;
    float _1441 = _666 * 0.5;
    float _1442 = _667 * 0.5;
    float _1443 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1446 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1449 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1483;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1456 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1059, _1063, _1066, _1069));
        float _1460 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1464 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1471 = dot(vec4(cbModelParam._m0[39u]), vec4(_1440, _1441, _1442, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1494;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1485 = dot(vec4(cbModelParam._m0[40u]), vec4(_1440, _1441, _1442, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1485) ? 0.0 : (isnan(0.0) ? _1485 : max(0.0, _1485))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1498 = (_1494 * cbModelParam._m0[1u].x) + (_1483 * (1.0 - cbModelParam._m0[1u].x));
    float _1508 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _572);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1508 : min(cbModelParam._m0[25u].z, _1508));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1556 = fma(_729, cbModelParam._m0[13u].z, fma(_725, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _721)) + cbModelParam._m0[13u].w;
        float _1560 = fma(_729, cbModelParam._m0[14u].z, fma(_725, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _721)) + cbModelParam._m0[14u].w;
        float _1564 = fma(_729, cbModelParam._m0[15u].z, fma(_725, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _721)) + cbModelParam._m0[15u].w;
        float _1567 = fma(_667, cbModelParam._m0[13u].z, fma(_666, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _665));
        float _1570 = fma(_667, cbModelParam._m0[14u].z, fma(_666, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _665));
        float _1573 = fma(_667, cbModelParam._m0[15u].z, fma(_666, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _665));
        float _1601;
        if (_1567 > 0.0)
        {
            _1601 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1601 = frontier_phi_17_15_ladder;
        }
        float _1776;
        if (_1570 > 0.0)
        {
            _1776 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1776 = frontier_phi_26_22_ladder;
        }
        float _2070;
        if (_1573 > 0.0)
        {
            _2070 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2070 = frontier_phi_38_33_ladder;
        }
        float _2072 = isnan(_1776) ? _1601 : (isnan(_1601) ? _1776 : min(_1601, _1776));
        float _2073 = isnan(_2070) ? _2072 : (isnan(_2072) ? _2070 : min(_2072, _2070));
        float _2077 = (_2073 * _1567) + _1556;
        float _2078 = (_2073 * _1570) + _1560;
        float _2079 = (_2073 * _1573) + _1564;
        float _2080 = _2073 * 9.9999997473787516355514526367188e-05;
        float _2082 = (-1.0) - _2080;
        float _2084 = _2080 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2079 > _2084) || ((_2079 < _2082) || ((_2078 > _2084) || ((_2078 < _2082) || ((_2077 < _2082) || (_2077 > _2084))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2224 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2079, cbModelParam._m0[9u].z, fma(_2078, cbModelParam._m0[9u].y, _2077 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2079, cbModelParam._m0[10u].z, fma(_2078, cbModelParam._m0[10u].y, _2077 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2079, cbModelParam._m0[11u].z, fma(_2078, cbModelParam._m0[11u].y, _2077 * cbModelParam._m0[11u].x))), _1509);
            frontier_phi_16_38_ladder = _2224.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2224.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2224.x * cbModelParam._m0[1u].y;
        }
        _1589 = frontier_phi_16_38_ladder_2;
        _1591 = frontier_phi_16_38_ladder_1;
        _1593 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_665, _666, _667), _1509);
        _1589 = _1577.x * cbModelParam._m0[1u].y;
        _1591 = _1577.y * cbModelParam._m0[1u].y;
        _1593 = _1577.z * cbModelParam._m0[1u].y;
    }
    float _1597 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _572);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1597 : min(cbModelParam._m0[25u].w, _1597));
    float _1691;
    float _1693;
    float _1695;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1655 = fma(_729, cbModelParam._m0[21u].z, fma(_725, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _721)) + cbModelParam._m0[21u].w;
        float _1659 = fma(_729, cbModelParam._m0[22u].z, fma(_725, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _721)) + cbModelParam._m0[22u].w;
        float _1663 = fma(_729, cbModelParam._m0[23u].z, fma(_725, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _721)) + cbModelParam._m0[23u].w;
        float _1666 = fma(_667, cbModelParam._m0[21u].z, fma(_666, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _665));
        float _1669 = fma(_667, cbModelParam._m0[22u].z, fma(_666, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _665));
        float _1672 = fma(_667, cbModelParam._m0[23u].z, fma(_666, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _665));
        float _1781;
        if (_1666 > 0.0)
        {
            _1781 = abs((1.0 - _1655) / _1666);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1655 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1781 = frontier_phi_28_24_ladder;
        }
        float _2097;
        if (_1669 > 0.0)
        {
            _2097 = abs((1.0 - _1659) / _1669);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1659 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2097 = frontier_phi_40_35_ladder;
        }
        float _2435;
        if (_1672 > 0.0)
        {
            _2435 = abs((1.0 - _1663) / _1672);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1663 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2435 = frontier_phi_50_47_ladder;
        }
        float _2437 = isnan(_2097) ? _1781 : (isnan(_1781) ? _2097 : min(_1781, _2097));
        float _2438 = isnan(_2435) ? _2437 : (isnan(_2437) ? _2435 : min(_2437, _2435));
        float _2442 = (_2438 * _1666) + _1655;
        float _2443 = (_2438 * _1669) + _1659;
        float _2444 = (_2438 * _1672) + _1663;
        float _2445 = _2438 * 9.9999997473787516355514526367188e-05;
        float _2446 = (-1.0) - _2445;
        float _2448 = _2445 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2444 > _2448) || ((_2444 < _2446) || ((_2443 > _2448) || ((_2443 < _2446) || ((_2442 < _2446) || (_2442 > _2448))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2444, cbModelParam._m0[17u].z, fma(_2443, cbModelParam._m0[17u].y, _2442 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2444, cbModelParam._m0[18u].z, fma(_2443, cbModelParam._m0[18u].y, _2442 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2444, cbModelParam._m0[19u].z, fma(_2443, cbModelParam._m0[19u].y, _2442 * cbModelParam._m0[19u].x))), _1598);
            frontier_phi_25_50_ladder = _2566.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2566.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2566.x * cbModelParam._m0[1u].z;
        }
        _1691 = frontier_phi_25_50_ladder_2;
        _1693 = frontier_phi_25_50_ladder_1;
        _1695 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1675 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_665, _666, _667), _1598);
        _1691 = _1675.x * cbModelParam._m0[1u].z;
        _1693 = _1675.y * cbModelParam._m0[1u].z;
        _1695 = _1675.z * cbModelParam._m0[1u].z;
    }
    float _1708 = (((_692 * _642) + _693) * _657) * ((cbModelParam._m0[1u].w * (_1691 - _1589)) + _1589);
    float _1710 = (((_692 * _644) + _693) * _657) * ((cbModelParam._m0[1u].w * (_1693 - _1591)) + _1591);
    float _1712 = (((_692 * _645) + _693) * _657) * ((cbModelParam._m0[1u].w * (_1695 - _1593)) + _1593);
    float _1715 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1708 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1708 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, _1708 * cbSceneParam._m0[91u].x));
    float _1755 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1759 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1763 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1767 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1768 = _1755 / _1767;
    float _1769 = _1759 / _1767;
    float _1770 = _1763 / _1767;
    float _1916;
    float _1917;
    float _1918;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1797 = ((uint(_1770 > cbSceneParam._m0[59u].y) + uint(_1770 > cbSceneParam._m0[59u].x)) + uint(_1770 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1798 = _1797 + 43u;
        uint _1806 = _1797 + 44u;
        uint _1814 = _1797 + 45u;
        uint _1822 = _1797 + 46u;
        float _1833 = fma(_1767, cbSceneParam._m0[_1798].w, fma(_1763, cbSceneParam._m0[_1798].z, fma(_1759, cbSceneParam._m0[_1798].y, _1755 * cbSceneParam._m0[_1798].x)));
        float _1837 = fma(_1767, cbSceneParam._m0[_1806].w, fma(_1763, cbSceneParam._m0[_1806].z, fma(_1759, cbSceneParam._m0[_1806].y, _1755 * cbSceneParam._m0[_1806].x)));
        float _1845 = fma(_1767, cbSceneParam._m0[_1822].w, fma(_1763, cbSceneParam._m0[_1822].z, fma(_1759, cbSceneParam._m0[_1822].y, _1755 * cbSceneParam._m0[_1822].x)));
        float _1850 = cbSceneParam._m0[33u].z * _1845;
        float _1852 = cbSceneParam._m0[33u].w * _1845;
        float _1855 = fma(_1767, cbSceneParam._m0[_1814].w, fma(_1763, cbSceneParam._m0[_1814].z, fma(_1759, cbSceneParam._m0[_1814].y, _1755 * cbSceneParam._m0[_1814].x))) / _1845;
        float _1902 = (cbSceneParam._m0[33u].x - sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770))) * cbSceneParam._m0[33u].y;
        float _4230 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1909 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1850 + _1833) / _1845, (_1852 + _1837) / _1845), _1855), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1852 + _1833) / _1845, (_1837 - _1850) / _1845), _1855), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1833 - _1850) / _1845, (_1837 - _1852) / _1845), _1855), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1833 - _1852) / _1845, (_1850 + _1837) / _1845), _1855), 0.0)).x), vec4(0.25)));
        _1916 = 1.0 - (_1909 * cbSceneParam._m0[34u].x);
        _1917 = 1.0 - (_1909 * cbSceneParam._m0[34u].y);
        _1918 = 1.0 - (_1909 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1916 = 1.0;
        _1917 = 1.0;
        _1918 = 1.0;
    }
    float _1982;
    float _1984;
    float _1986;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1970 = fma(_1767, cbSceneParam._m0[63u].w, fma(_1763, cbSceneParam._m0[63u].z, fma(_1759, cbSceneParam._m0[63u].y, _1755 * cbSceneParam._m0[63u].x)));
        float _1971 = fma(_1767, cbSceneParam._m0[60u].w, fma(_1763, cbSceneParam._m0[60u].z, fma(_1759, cbSceneParam._m0[60u].y, _1755 * cbSceneParam._m0[60u].x))) / _1970;
        float _1972 = fma(_1767, cbSceneParam._m0[61u].w, fma(_1763, cbSceneParam._m0[61u].z, fma(_1759, cbSceneParam._m0[61u].y, _1755 * cbSceneParam._m0[61u].x))) / _1970;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1971 >= cbSceneParam._m0[64u].x) && (_1972 >= cbSceneParam._m0[64u].y)) && (_1971 <= cbSceneParam._m0[64u].z)) && (_1972 <= cbSceneParam._m0[64u].w))
        {
            float _2110 = fma(_1767, cbSceneParam._m0[62u].w, fma(_1763, cbSceneParam._m0[62u].z, fma(_1759, cbSceneParam._m0[62u].y, _1755 * cbSceneParam._m0[62u].x))) / _1970;
            float _2114 = isnan(cbSceneParam._m0[41u].w) ? _2110 : (isnan(_2110) ? cbSceneParam._m0[41u].w : max(_2110, cbSceneParam._m0[41u].w));
            float _2157 = (cbSceneParam._m0[33u].x - sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770))) * cbSceneParam._m0[33u].y;
            float _4246 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
            float _2164 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1971, cbSceneParam._m0[33u].w + _1972), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1971, _1972 - cbSceneParam._m0[33u].z), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1971 - cbSceneParam._m0[33u].z, _1972 - cbSceneParam._m0[33u].w), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1971 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1972), _2114), 0.0)).x), vec4(0.25)));
            float _2168 = 1.0 - (_2164 * cbSceneParam._m0[34u].x);
            float _2169 = 1.0 - (_2164 * cbSceneParam._m0[34u].y);
            float _2170 = 1.0 - (_2164 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2170) ? _1918 : (isnan(_1918) ? _2170 : min(_1918, _2170));
            frontier_phi_37_36_ladder_1 = isnan(_2169) ? _1917 : (isnan(_1917) ? _2169 : min(_1917, _2169));
            frontier_phi_37_36_ladder_2 = isnan(_2168) ? _1916 : (isnan(_1916) ? _2168 : min(_1916, _2168));
        }
        else
        {
            frontier_phi_37_36_ladder = _1918;
            frontier_phi_37_36_ladder_1 = _1917;
            frontier_phi_37_36_ladder_2 = _1916;
        }
        _1982 = frontier_phi_37_36_ladder_2;
        _1984 = frontier_phi_37_36_ladder_1;
        _1986 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1982 = _1916;
        _1984 = _1917;
        _1986 = _1918;
    }
    uvec4 _1991 = floatBitsToUint(cbInstanceData._m0[_585 + 5u]);
    uint _1993 = _1991.x * 14u;
    uint _1994 = _1993 + 13u;
    float _2001 = _657 + (-1.0);
    float _2006 = (cbLight._m0[_1994].x * _2001) + 1.0;
    float _2007 = (cbLight._m0[_1994].y * _2001) + 1.0;
    float _2008 = (cbLight._m0[_1994].z * _2001) + 1.0;
    float _2009 = (cbLight._m0[_1994].w * _2001) + 1.0;
    uint _2010 = _1993 + 5u;
    float _2016 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
    uint _2020 = _1993 + 4u;
    float _2029 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
    uint _2033 = _1993 | 1u;
    float _2044 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_426, _427, _428));
    float _2047 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_426, _427, _428));
    float _4282 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _4293 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2052 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.3183098733425140380859375;
    float _2054 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * 0.3183098733425140380859375;
    float _2061 = ((cbLight._m0[_2010].x * _2016) * _2054) + (((cbLight._m0[_2020].x * _1982) * _2029) * _2052);
    float _2062 = ((_2016 * cbLight._m0[_2010].y) * _2054) + (((cbLight._m0[_2020].y * _1984) * _2029) * _2052);
    float _2063 = ((_2016 * cbLight._m0[_2010].z) * _2054) + (((cbLight._m0[_2020].z * _1986) * _2029) * _2052);
    uvec4 _2067 = floatBitsToUint(cbLight._m0[_1993 + 12u]);
    bool _2069 = _2067.x == 0u;
    float _2171;
    float _2173;
    float _2175;
    if (_2069)
    {
        _2171 = _2061;
        _2173 = _2062;
        _2175 = _2063;
    }
    else
    {
        uint _2179 = _1993 + 6u;
        float _2195 = (dot(vec3(cbLight._m0[_1993 + 2u].xyz), vec3(_426, _427, _428)) * 0.5) + 0.5;
        float _2196 = _2195 * _2195;
        float _4304 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2197 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2198 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2171 = (((cbLight._m0[_2179].x * 0.3183098733425140380859375) * _2197) * _2198) + _2061;
        _2173 = (((cbLight._m0[_2179].y * 0.3183098733425140380859375) * _2197) * _2198) + _2062;
        _2175 = (((cbLight._m0[_2179].z * 0.3183098733425140380859375) * _2197) * _2198) + _2063;
    }
    bool _2178 = _2067.y == 0u;
    float _2233;
    float _2235;
    float _2237;
    if (_2178)
    {
        _2233 = _2171;
        _2235 = _2173;
        _2237 = _2175;
    }
    else
    {
        uint _2406 = _1993 + 7u;
        float _2422 = (dot(vec3(cbLight._m0[_1993 + 3u].xyz), vec3(_426, _427, _428)) * 0.5) + 0.5;
        float _2423 = _2422 * _2422;
        float _4320 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2424 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2425 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2233 = (((cbLight._m0[_2406].x * 0.3183098733425140380859375) * _2424) * _2425) + _2171;
        _2235 = (((cbLight._m0[_2406].y * 0.3183098733425140380859375) * _2424) * _2425) + _2173;
        _2237 = (((cbLight._m0[_2406].z * 0.3183098733425140380859375) * _2424) * _2425) + _2175;
    }
    uint _2240 = _1993 + 8u;
    float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _572) * 0.949999988079071044921875);
    float _2254 = _2253 * _2253;
    float _2255 = cbLight._m0[_1993].x + _507;
    float _2256 = cbLight._m0[_1993].y + _508;
    float _2257 = cbLight._m0[_1993].z + _509;
    float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
    float _2262 = _2261 * _2255;
    float _2263 = _2261 * _2256;
    float _2264 = _2261 * _2257;
    float _2265 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_1993].xyz));
    float _4336 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _4347 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _2269 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2270 = dot(vec3(_426, _427, _428), vec3(_2262, _2263, _2264));
    float _4358 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2274 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2262, _2263, _2264));
    float _4369 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2278 = _2254 * _2254;
    float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
    float _2290 = exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0);
    float _2291 = 0.959999978542327880859375 - _639;
    float _2293 = 0.959999978542327880859375 - _640;
    float _2294 = 0.959999978542327880859375 - _641;
    float _2301 = 1.0 - _2254;
    float _2312 = (0.5 / (((_2269 * ((_2268 * _2301) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_2269 * _2301) + _2254) * _2268))) * _2268;
    float _4380 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2314 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
    uint _2328 = _1993 + 9u;
    float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _572) * 0.949999988079071044921875);
    float _2340 = _2339 * _2339;
    float _2341 = cbLight._m0[_2033].x + _507;
    float _2342 = cbLight._m0[_2033].y + _508;
    float _2343 = cbLight._m0[_2033].z + _509;
    float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
    float _2348 = _2347 * _2341;
    float _2349 = _2347 * _2342;
    float _2350 = _2347 * _2343;
    float _2351 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_2033].xyz));
    float _4391 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2355 = dot(vec3(_426, _427, _428), vec3(_2348, _2349, _2350));
    float _4402 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2359 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2348, _2349, _2350));
    float _4413 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2363 = _2340 * _2340;
    float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
    float _2374 = exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0);
    float _2381 = 1.0 - _2340;
    float _2391 = (0.5 / (((_2269 * ((_2354 * _2381) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2269 * _2381) + _2340) * _2354))) * _2354;
    float _4424 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
    float _2403 = (((((_2374 * _2291) + _642) * cbLight._m0[_2328].x) * _2393) * _2016) + ((((cbLight._m0[_2240].x * _1982) * ((_2290 * _2291) + _642)) * _2314) * _2029);
    float _2404 = (((((_2374 * _2293) + _644) * cbLight._m0[_2328].y) * _2393) * _2016) + ((((cbLight._m0[_2240].y * _1984) * ((_2290 * _2293) + _644)) * _2314) * _2029);
    float _2405 = (((((_2374 * _2294) + _645) * cbLight._m0[_2328].z) * _2393) * _2016) + ((((cbLight._m0[_2240].z * _1986) * ((_2290 * _2294) + _645)) * _2314) * _2029);
    float _2461;
    float _2463;
    float _2465;
    if (_2069)
    {
        _2461 = _2403;
        _2463 = _2404;
        _2465 = _2405;
    }
    else
    {
        uint _2467 = _1993 + 2u;
        uint _2471 = _1993 + 10u;
        float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2467].w)) * _572) * 0.949999988079071044921875);
        float _2486 = _2485 * _2485;
        float _2487 = cbLight._m0[_2467].x + _507;
        float _2488 = cbLight._m0[_2467].y + _508;
        float _2489 = cbLight._m0[_2467].z + _509;
        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
        float _2494 = _2493 * _2487;
        float _2495 = _2493 * _2488;
        float _2496 = _2493 * _2489;
        float _2497 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_2467].xyz));
        float _4435 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2501 = dot(vec3(_426, _427, _428), vec3(_2494, _2495, _2496));
        float _4446 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2505 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_2494, _2495, _2496));
        float _4457 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2509 = _2486 * _2486;
        float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
        float _2520 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
        float _2527 = 1.0 - _2486;
        float _2537 = (0.5 / (((_2269 * ((_2500 * _2527) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2269 * _2527) + _2486) * _2500))) * _2500;
        float _4468 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2539 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
        float _2540 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2461 = (((((_2520 * _2291) + _642) * cbLight._m0[_2471].x) * _2539) * _2540) + _2403;
        _2463 = (((((_2520 * _2293) + _644) * cbLight._m0[_2471].y) * _2539) * _2540) + _2404;
        _2465 = (((((_2520 * _2294) + _645) * cbLight._m0[_2471].z) * _2539) * _2540) + _2405;
    }
    float _2571;
    float _2573;
    float _2575;
    if (_2178)
    {
        _2571 = _2461;
        _2573 = _2463;
        _2575 = _2465;
    }
    else
    {
        uint _2582 = _1993 + 3u;
        uint _2586 = _1993 + 11u;
        float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2582].w)) * _572) * 0.949999988079071044921875);
        float _2601 = _2600 * _2600;
        float _2602 = cbLight._m0[_2582].x + _507;
        float _2603 = cbLight._m0[_2582].y + _508;
        float _2604 = cbLight._m0[_2582].z + _509;
        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
        float _2609 = _2608 * _2602;
        float _2610 = _2608 * _2603;
        float _2611 = _2608 * _2604;
        float _2612 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_2582].xyz));
        float _4484 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2616 = dot(vec3(_426, _427, _428), vec3(_2609, _2610, _2611));
        float _4495 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2620 = dot(vec3(cbLight._m0[_2582].xyz), vec3(_2609, _2610, _2611));
        float _4506 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2624 = _2601 * _2601;
        float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
        float _2635 = exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0);
        float _2642 = 1.0 - _2601;
        float _2652 = (0.5 / (((_2269 * ((_2615 * _2642) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2269 * _2642) + _2601) * _2615))) * _2615;
        float _4517 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2654 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
        float _2655 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2571 = (((((_2635 * _2291) + _642) * cbLight._m0[_2586].x) * _2654) * _2655) + _2461;
        _2573 = (((((_2635 * _2293) + _644) * cbLight._m0[_2586].y) * _2654) * _2655) + _2463;
        _2575 = (((((_2635 * _2294) + _645) * cbLight._m0[_2586].z) * _2654) * _2655) + _2465;
    }
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    if (_1991.y == 0u)
    {
        uvec4 _2676 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2677 = _2676.x;
        uint _2688 = uint((float(_2676.y) * floor(float(uint(cbSceneParam._m0[85u].y * _529) / _2677))) + floor(float(uint(cbSceneParam._m0[85u].x * _528) / _2677)));
        float _2698 = (log2(_1770 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2699 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        uint _2702 = uint(isnan(14.0) ? _2699 : (isnan(_2699) ? 14.0 : min(_2699, 14.0)));
        uvec4 _2707 = texelFetch(g_lightClusterGridBuffer, int(((_2702 << 2u) + (_2688 << 6u)) >> 2u));
        uint _2708 = _2707.x;
        uint _2709 = _2676.z;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        if (((((1u << ((_2709 >> 4u) & 15u)) + 4294967295u) & _2708) == 0u) || ((_2709 & 240u) == 0u))
        {
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
        }
        else
        {
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            uint _2947 = 0u;
            uint _2956;
            bool _2957;
            for (;;)
            {
                _2956 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_2947 << 2u)) >> 2u)).x;
                _2957 = _2956 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2957)
                {
                    frontier_phi_71_pred = _2946;
                    frontier_phi_71_pred_1 = _2945;
                    frontier_phi_71_pred_2 = _2944;
                    frontier_phi_71_pred_3 = _2943;
                    frontier_phi_71_pred_4 = _2942;
                    frontier_phi_71_pred_5 = _2941;
                }
                else
                {
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    uint _3092;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2956;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    for (;;)
                    {
                        uint _3096 = uint(findLSB(_3092)) + (_2947 << 5u);
                        uint _3093 = (_3092 + 4294967295u) & _3092;
                        uint _3098 = _3096 * 48u;
                        vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3118 = (_3096 * 48u) + 4u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 3u)).x));
                        uint _3137 = (_3096 * 48u) + 8u;
                        vec3 _3148 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x));
                        float _3152 = _3112.x - _1768;
                        float _3153 = _3112.y - _1769;
                        float _3154 = _3112.z - _1770;
                        float _3155 = dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154));
                        float _3158 = inversesqrt(_3155);
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3162 = dot(vec3(_553, _556, _559), vec3(_3159, _3160, _3161));
                        float _3167 = 1.0 - (_3155 * _3112.w);
                        float _4543 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3169 = sqrt(_3155) * _3131.w;
                        float _3172 = 1.39999997615814208984375 / (_3169 + 1.39999997615814208984375);
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3162) + _3173;
                        float _3179 = _3169 * _3169;
                        float _3183 = ((isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))) * _3168) / ((_3179 * 0.699999988079071044921875) + 1.0);
                        float _3187 = (-0.0) - _1768;
                        float _3188 = (-0.0) - _1769;
                        float _3189 = (-0.0) - _1770;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3194 = _3193 * _3187;
                        float _3195 = _3193 * _3188;
                        float _3196 = _3193 * _3189;
                        float _3203 = exp2(log2(1.0 / ((_3179 * 3.5) + 5.0)) * 0.25);
                        float _3204 = 1.0 - _673;
                        float _3211 = sqrt(1.0 - ((1.0 - (_3204 * _3204)) * (1.0 - (_3203 * _3203))));
                        float _3212 = _3211 * _3211;
                        float _3213 = _3212 * _3212;
                        float _3214 = _3194 + _3159;
                        float _3215 = _3195 + _3160;
                        float _3216 = _3196 + _3161;
                        float _3220 = inversesqrt(dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216)));
                        float _3224 = dot(vec3(_553, _556, _559), vec3(_3194, _3195, _3196));
                        float _4559 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3227 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3228 = dot(vec3(_553, _556, _559), vec3(_3220 * _3214, _3220 * _3215, _3220 * _3216));
                        float _4570 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3231 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3235 = ((_3231 * _3231) * (_3213 + (-1.0))) + 1.0;
                        float _3236 = _3172 * _3212;
                        float _3237 = _3236 * _3236;
                        float _3240 = ((1.0 - _3237) * _3162) + _3237;
                        float _4581 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3241 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3242 = 1.0 - _3212;
                        float _3252 = (0.5 / (((_3241 * ((_3227 * _3242) + _3212)) + 9.9999999392252902907785028219223e-09) + (((_3241 * _3242) + _3212) * _3227))) * _3241;
                        float _4592 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3263 = (((_3213 * 3.1415927410125732421875) * (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) / ((_3235 * _3235) * ((_3179 * 2.1991131305694580078125) + 3.141590118408203125))) * _3168;
                        _3016 = (_3183 * _3131.x) + _3089;
                        _3017 = (_3183 * _3131.y) + _3090;
                        _3018 = (_3183 * _3131.z) + _3091;
                        _3013 = (_3263 * _3148.x) + _3086;
                        _3014 = (_3263 * _3148.y) + _3087;
                        _3015 = (_3263 * _3148.z) + _3088;
                        if (_3093 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3086 = _3013;
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3093;
                        }
                    }
                    frontier_phi_71_pred = _3018;
                    frontier_phi_71_pred_1 = _3017;
                    frontier_phi_71_pred_2 = _3016;
                    frontier_phi_71_pred_3 = _3015;
                    frontier_phi_71_pred_4 = _3014;
                    frontier_phi_71_pred_5 = _3013;
                }
                _2799 = frontier_phi_71_pred;
                _2797 = frontier_phi_71_pred_1;
                _2795 = frontier_phi_71_pred_2;
                _2793 = frontier_phi_71_pred_3;
                _2791 = frontier_phi_71_pred_4;
                _2789 = frontier_phi_71_pred_5;
                uint _2948 = _2947 + 1u;
                if (_2948 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2941 = _2789;
                    _2942 = _2791;
                    _2943 = _2793;
                    _2944 = _2795;
                    _2945 = _2797;
                    _2946 = _2799;
                    _2947 = _2948;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
        }
        uvec4 _2802 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2803 = _2802.z;
        uint _2805 = (_2803 >> 8u) & 15u;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        if (((4294967295u << _2805) & _2708) == 0u)
        {
            _2909 = _2788;
            _2911 = _2790;
            _2913 = _2792;
            _2915 = _2794;
            _2917 = _2796;
            _2919 = _2798;
        }
        else
        {
            float _2934 = inversesqrt(dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770)));
            float _2935 = _2934 * _1768;
            float _2936 = _2934 * _1769;
            float _2937 = _2934 * _1770;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2805 < ((_2803 >> 12u) & 15u))
            {
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _3069 = _2788;
                float _3070 = _2790;
                float _3071 = _2792;
                float _3072 = _2794;
                float _3073 = _2796;
                float _3074 = _2798;
                uint _3075 = _2805;
                uint _3084;
                bool _3085;
                for (;;)
                {
                    _3084 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_3075 << 2u)) >> 2u)).x;
                    _3085 = _3084 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3085)
                    {
                        frontier_phi_82_pred = _3074;
                        frontier_phi_82_pred_1 = _3073;
                        frontier_phi_82_pred_2 = _3072;
                        frontier_phi_82_pred_3 = _3071;
                        frontier_phi_82_pred_4 = _3070;
                        frontier_phi_82_pred_5 = _3069;
                    }
                    else
                    {
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3290 = _3069;
                        float _3291 = _3070;
                        float _3292 = _3071;
                        float _3293 = _3072;
                        float _3294 = _3073;
                        float _3295 = _3074;
                        uint _3296 = _3084;
                        uint _3297;
                        vec4 _3322;
                        float _3323;
                        vec4 _3338;
                        vec3 _3350;
                        vec4 _3365;
                        vec4 _3381;
                        float _3428;
                        bool _3429;
                        for (;;)
                        {
                            uint _3307 = ((_3075 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3296));
                            _3297 = (_3296 + 4294967295u) & _3296;
                            uint _3309 = _3307 * 40u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            _3323 = _3322.w;
                            uint _3325 = (_3307 * 40u) + 4u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3307 * 40u) + 8u;
                            _3350 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x));
                            uint _3352 = (_3307 * 40u) + 16u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3368 = (_3307 * 40u) + 20u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3384 = (_3307 * 40u) + 24u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3403 = (_3307 * 40u) + 28u;
                            vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3428 = fma(_1770, _3416.z, fma(_1769, _3416.y, _3416.x * _1768)) + _3416.w;
                            _3429 = !((fma(_1770, _3397.z, fma(_1769, _3397.y, _3397.x * _1768)) + _3397.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3429)
                            {
                                float _3456 = _3322.x - _1768;
                                float _3457 = _3322.y - _1769;
                                float _3458 = _3322.z - _1770;
                                float _3459 = dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458));
                                float _3462 = inversesqrt(_3459);
                                float _3463 = _3462 * _3456;
                                float _3464 = _3462 * _3457;
                                float _3465 = _3462 * _3458;
                                float _3469 = 1.0 - (_3459 / (_3323 * _3323));
                                float _4603 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3474 = sqrt(_3459) * _3338.w;
                                float _3476 = 1.39999997615814208984375 / (_3474 + 1.39999997615814208984375);
                                float _3477 = _3476 * _3476;
                                float _3480 = ((1.0 - _3477) * dot(vec3(_3463, _3464, _3465), vec3(_553, _556, _559))) + _3477;
                                float _3483 = _3474 * _3474;
                                float _3487 = (fma(_1770, _3365.z, fma(_1769, _3365.y, _3365.x * _1768)) + _3365.w) / _3428;
                                float _3488 = (fma(_1770, _3381.z, fma(_1769, _3381.y, _3381.x * _1768)) + _3381.w) / _3428;
                                float _3492 = 1.0 - dot(vec2(_3487, _3488), vec2(_3487, _3488));
                                float _4619 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3494 = _3493 * (((isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0))) * _3470) / ((_3483 * 0.699999988079071044921875) + 1.0));
                                float _3506 = exp2(log2(1.0 / ((_3483 * 3.5) + 5.0)) * 0.25);
                                float _3507 = 1.0 - _673;
                                float _3514 = sqrt(1.0 - ((1.0 - (_3507 * _3507)) * (1.0 - (_3506 * _3506))));
                                float _3515 = _3514 * _3514;
                                float _3516 = _3515 * _3515;
                                float _3517 = _3463 - _2935;
                                float _3518 = _3464 - _2936;
                                float _3519 = _3465 - _2937;
                                float _3523 = inversesqrt(dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519)));
                                float _3527 = dot(vec3(_553, _556, _559), vec3((-0.0) - _2935, (-0.0) - _2936, (-0.0) - _2937));
                                float _4630 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3530 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3531 = dot(vec3(_553, _556, _559), vec3(_3523 * _3517, _3523 * _3518, _3523 * _3519));
                                float _4641 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3534 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3538 = ((_3534 * _3534) * (_3516 + (-1.0))) + 1.0;
                                float _3539 = _3476 * _3515;
                                float _3540 = _3539 * _3539;
                                float _3546 = ((1.0 - _3540) * dot(vec3(_553, _556, _559), vec3(_3463, _3464, _3465))) + _3540;
                                float _4652 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3548 = 1.0 - _3515;
                                float _3558 = (0.5 / (((_3547 * ((_3530 * _3548) + _3515)) + 9.9999999392252902907785028219223e-09) + (((_3547 * _3548) + _3515) * _3530))) * _3547;
                                float _4663 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3568 = (_3493 * _3470) * (((_3516 * 3.1415927410125732421875) * (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) / ((_3538 * _3538) * ((_3483 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3494 * _3338.z;
                                frontier_phi_88_pred_1 = _3494 * _3338.y;
                                frontier_phi_88_pred_2 = _3494 * _3338.x;
                                frontier_phi_88_pred_3 = _3568 * _3350.z;
                                frontier_phi_88_pred_4 = _3568 * _3350.y;
                                frontier_phi_88_pred_5 = _3568 * _3350.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3577 = frontier_phi_88_pred;
                            _3576 = frontier_phi_88_pred_1;
                            _3575 = frontier_phi_88_pred_2;
                            _3574 = frontier_phi_88_pred_3;
                            _3573 = frontier_phi_88_pred_4;
                            _3572 = frontier_phi_88_pred_5;
                            _3280 = _3575 + _3293;
                            _3281 = _3576 + _3294;
                            _3282 = _3577 + _3295;
                            _3277 = _3572 + _3290;
                            _3278 = _3573 + _3291;
                            _3279 = _3574 + _3292;
                            if (_3297 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3297;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3282;
                        frontier_phi_82_pred_1 = _3281;
                        frontier_phi_82_pred_2 = _3280;
                        frontier_phi_82_pred_3 = _3279;
                        frontier_phi_82_pred_4 = _3278;
                        frontier_phi_82_pred_5 = _3277;
                    }
                    _2920 = frontier_phi_82_pred;
                    _2918 = frontier_phi_82_pred_1;
                    _2916 = frontier_phi_82_pred_2;
                    _2914 = frontier_phi_82_pred_3;
                    _2912 = frontier_phi_82_pred_4;
                    _2910 = frontier_phi_82_pred_5;
                    uint _3076 = _3075 + 1u;
                    if (_3076 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3069 = _2910;
                        _3070 = _2912;
                        _3071 = _2914;
                        _3072 = _2916;
                        _3073 = _2918;
                        _3074 = _2920;
                        _3075 = _3076;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2916;
                frontier_phi_63_64_ladder_1 = _2920;
                frontier_phi_63_64_ladder_2 = _2918;
                frontier_phi_63_64_ladder_3 = _2914;
                frontier_phi_63_64_ladder_4 = _2912;
                frontier_phi_63_64_ladder_5 = _2910;
            }
            else
            {
                frontier_phi_63_64_ladder = _2794;
                frontier_phi_63_64_ladder_1 = _2798;
                frontier_phi_63_64_ladder_2 = _2796;
                frontier_phi_63_64_ladder_3 = _2792;
                frontier_phi_63_64_ladder_4 = _2790;
                frontier_phi_63_64_ladder_5 = _2788;
            }
            _2909 = frontier_phi_63_64_ladder_5;
            _2911 = frontier_phi_63_64_ladder_4;
            _2913 = frontier_phi_63_64_ladder_3;
            _2915 = frontier_phi_63_64_ladder;
            _2917 = frontier_phi_63_64_ladder_2;
            _2919 = frontier_phi_63_64_ladder_1;
        }
        float _2924 = isnan(1.0) ? _657 : (isnan(_657) ? 1.0 : min(_657, 1.0));
        _2721 = (_2924 * _2915) + _2233;
        _2723 = (_2924 * _2917) + _2235;
        _2725 = (_2924 * _2919) + _2237;
        _2727 = ((_2909 * _642) * _2924) + _2571;
        _2729 = ((_2911 * _644) * _2924) + _2573;
        _2731 = ((_2913 * _645) * _2924) + _2575;
    }
    else
    {
        _2721 = _2233;
        _2723 = _2235;
        _2725 = _2237;
        _2727 = _2571;
        _2729 = _2573;
        _2731 = _2575;
    }
    float _4679 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4690 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4701 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _2748 = ((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2721 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _657))) + ((_2727 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1498)) * cbPerFrame._m0[3u].x);
    float _2749 = ((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2723 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _657))) + ((_2729 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1498)) * cbPerFrame._m0[3u].x);
    float _2750 = ((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2725 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _657))) + ((_2731 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1498)) * cbPerFrame._m0[3u].x);
    uint _2751 = _585 + 6u;
    float _2759 = _528 / cbSceneParam._m0[86u].x;
    float _2760 = _529 / cbSceneParam._m0[86u].y;
    vec4 _2774 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, (log2((isnan(cbSceneParam._m0[77u].w) ? _449 : (isnan(_449) ? cbSceneParam._m0[77u].w : min(_449, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2776 = _2774.x;
    float _2777 = _2774.y;
    float _2778 = _2774.z;
    float _2779 = _2774.w;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    if (_449 > cbSceneParam._m0[78u].w)
    {
        float _2813 = isnan(_449) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _449 : min(cbSceneParam._m0[80u].w, _449));
        float _2814 = _2813 / _449;
        float _2825 = _2814 * _500;
        float _2826 = _501 * _2814;
        float _2827 = (-0.0) - _2826;
        float _2829 = _2814 * _502;
        float _2831 = (cbSceneParam._m0[77u].w * _2827) / _2813;
        float _2832 = _2831 + cbSceneParam._m0[79u].w;
        float _2833 = cbSceneParam._m0[79u].w - _2826;
        float _2839 = sqrt(((_2825 * _2825) + (_2826 * _2826)) + (_2829 * _2829));
        float _2842 = (1.0 - (cbSceneParam._m0[77u].w / _2813)) * _2839;
        float _2847 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2849 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3026;
        if (abs((_2827 - _2831) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3026 = ((((_2832 > 0.0) ? exp2(_2847 * _2832) : (2.0 - exp2(_2849 * _2832))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2842;
        }
        else
        {
            float _2970 = 1.0 / cbSceneParam._m0[80u].x;
            float _2971 = isnan(_2833) ? _2832 : (isnan(_2832) ? _2833 : max(_2832, _2833));
            float _2972 = isnan(_2833) ? _2832 : (isnan(_2832) ? _2833 : min(_2832, _2833));
            float _2981 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : min(_2971, 0.0));
            float _2982 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : min(_2972, 0.0));
            _3026 = ((abs(_2839 / _2827) * cbSceneParam._m0[80u].y) * ((((_2981 - _2982) * 2.0) - ((exp2(_2847 * (isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0)))) - exp2(_2847 * (isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0))))) * _2970)) - ((exp2(_2849 * _2981) - exp2(_2849 * _2982)) * _2970))) + (_2842 * cbSceneParam._m0[80u].z);
        }
        vec4 _3028 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, 1.0), 0.0);
        float _3037 = exp2((_3026 * (-1.44269502162933349609375)) * (1.0 - _3028.w));
        float _3038 = log2(_3037);
        float _3054 = log2(_2779);
        _2851 = (exp2(_3054 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].x)) * _3028.x) / cbSceneParam._m0[78u].x)) + _2776;
        _2853 = (exp2(_3054 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].y)) * _3028.y) / cbSceneParam._m0[78u].y)) + _2777;
        _2855 = (exp2(_3054 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].z)) * _3028.z) / cbSceneParam._m0[78u].z)) + _2778;
        _2857 = _3037 * _2779;
    }
    else
    {
        _2851 = _2776;
        _2853 = _2777;
        _2855 = _2778;
        _2857 = _2779;
    }
    bool _3064;
    vec4 _2867;
    vec4 _2889;
    float _2891;
    float _2895;
    float _2896;
    float _2897;
    float _2898;
    bool _2908;
    for (;;)
    {
        _2867 = cbMatDynParam._m0[0u];
        float _2869 = roundEven(_2867.y);
        bool _2870 = _2869 == 3.0;
        float _2871 = log2(_2857);
        float _2878 = exp2(_2871 * cbSceneParam._m0[78u].x) * _2748;
        float _2879 = exp2(_2871 * cbSceneParam._m0[78u].y) * _2749;
        float _2880 = exp2(_2871 * cbSceneParam._m0[78u].z) * _2750;
        float _2887 = _516 + (-0.5);
        _2889 = cbMtdParam._m0[1u];
        _2891 = _2889.y * _2887;
        float _2894 = (_2869 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2895 = _2894 * (_2870 ? _2878 : (_2878 + (cbSceneParam._m0[72u].w * _2851)));
        _2896 = _2894 * (_2870 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2853)));
        _2897 = _2894 * (_2870 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2855)));
        _2898 = _2887 * 0.999000012874603271484375;
        _2908 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2908)
        {
            if ((cbInstanceData._m0[_585 + 7u].x + _2898) < 0.5)
            {
                _3064 = true;
                break;
            }
        }
        uint _3005 = _586 + uint(_2867.w);
        if ((cbInstanceData._m0[_3005].w < 1.0) && ((cbInstanceData._m0[_3005].w + _2898) < 0.5))
        {
            _3064 = true;
            break;
        }
        if ((_2891 + 1.0) < _2889.x)
        {
            _3064 = true;
            break;
        }
        _3064 = false;
        break;
    }
    float _3268;
    if (_3064)
    {
        discard_state = true;
        _3268 = 0.0;
    }
    else
    {
        _3268 = cbInstanceData._m0[_2751].w;
    }
    SV_Target.x = _2895;
    SV_Target.y = _2896;
    SV_Target.z = _2897;
    SV_Target.w = _3268;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2751].w;
    discard_exit();
}


