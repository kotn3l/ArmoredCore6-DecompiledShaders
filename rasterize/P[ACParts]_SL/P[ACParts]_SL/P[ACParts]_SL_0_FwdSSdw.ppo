#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_SL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_SL_snp_0_Texture2D_14;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_SL_snp_0_Texture2D_19;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_SL_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_SL_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1013;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _229 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _246 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _268 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _268.x;
    float _271 = _268.y;
    bool _308 = _270 >= 0.25;
    bool _313 = _270 >= 0.3499999940395355224609375;
    bool _318 = _270 >= 0.5;
    bool _323 = _270 >= 0.64999997615814208984375;
    bool _328 = _270 >= 0.75;
    float _345 = ((_229.x * 4.55000019073486328125) * _246.x) * ((((_328 ? cbMtdParam._m0[10u].x : (_323 ? cbMtdParam._m0[15u].x : (_318 ? cbMtdParam._m0[14u].x : (_313 ? cbMtdParam._m0[13u].x : (_308 ? cbMtdParam._m0[12u].x : cbMtdParam._m0[11u].x))))) - cbMtdParam._m0[9u].x) * _271) + cbMtdParam._m0[9u].x);
    float _348 = ((_229.y * 4.55000019073486328125) * _246.y) * ((((_328 ? cbMtdParam._m0[10u].y : (_323 ? cbMtdParam._m0[15u].y : (_318 ? cbMtdParam._m0[14u].y : (_313 ? cbMtdParam._m0[13u].y : (_308 ? cbMtdParam._m0[12u].y : cbMtdParam._m0[11u].y))))) - cbMtdParam._m0[9u].y) * _271) + cbMtdParam._m0[9u].y);
    float _351 = ((_229.z * 4.55000019073486328125) * _246.z) * ((((_328 ? cbMtdParam._m0[10u].z : (_323 ? cbMtdParam._m0[15u].z : (_318 ? cbMtdParam._m0[14u].z : (_313 ? cbMtdParam._m0[13u].z : (_308 ? cbMtdParam._m0[12u].z : cbMtdParam._m0[11u].z))))) - cbMtdParam._m0[9u].z) * _271) + cbMtdParam._m0[9u].z);
    vec4 _363 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _370 = cbMtdParam._m0[16u].x + _363.x;
    vec4 _383 = texture(sampler2D(P_ACParts_SL_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _391 = (_383.x * 2.0) + (-1.0);
    float _393 = (_383.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_391, _393), vec2(_391, _393));
    float _3368 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _400 = sqrt(1.0 - (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))));
    float _401 = _383.z * cbMtdParam._m0[16u].y;
    float _405 = (cbMtdParam._m0[16u].z * _391) + _391;
    float _406 = (cbMtdParam._m0[16u].z * _393) + _393;
    float _409 = fma(_400, _204 * NORMAL.x, fma(_406, _211 * TANGENT.x, (_197 * _189) * _405));
    float _412 = fma(_400, _204 * NORMAL.y, fma(_406, _211 * TANGENT.y, (_197 * _190) * _405));
    float _415 = fma(_400, _204 * NORMAL.z, fma(_406, _211 * TANGENT.z, (_197 * _191) * _405));
    float _419 = inversesqrt(dot(vec3(_409, _412, _415), vec3(_409, _412, _415)));
    float _420 = _419 * _409;
    float _421 = _419 * _412;
    float _422 = _419 * _415;
    float _3379 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _423 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _3390 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3401 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3412 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3423 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _427 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _443 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _484 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _494 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _484);
    float _495 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _484);
    float _496 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _484);
    float _500 = inversesqrt(dot(vec3(_494, _495, _496), vec3(_494, _495, _496)));
    float _501 = _494 * _500;
    float _502 = _495 * _500;
    float _503 = _496 * _500;
    float _509 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _510 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _512 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _514 = _512.w;
    float _535 = fma(_422, cbSceneParam._m0[5u].z, fma(_421, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _420));
    float _538 = fma(_422, cbSceneParam._m0[6u].z, fma(_421, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _420));
    float _541 = fma(_422, cbSceneParam._m0[7u].z, fma(_421, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _420));
    vec4 _543 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _554 = (((_543.y - _423) + (_543.w * _423)) * cbMtdParam._m0[3u].x) + _423;
    uint _567 = uint(roundEven(NORMAL.w)) * 13u;
    uint _569 = (_567 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _575 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * cbInstanceData._m0[_569].x;
    float _576 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * cbInstanceData._m0[_569].y;
    float _577 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * cbInstanceData._m0[_569].z;
    float _3434 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _3445 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _579 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _3456 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    vec4 _581 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _586 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _597 = (((_586.x - _427) + (_586.w * _427)) * cbMtdParam._m0[3u].x) + _427;
    float _610 = (cbMtdParam._m0[3u].x * (((_578 * _514) - _578) + _581.x)) + _578;
    float _611 = (cbMtdParam._m0[3u].x * (((_579 * _514) - _579) + _581.y)) + _579;
    float _612 = (cbMtdParam._m0[3u].x * (((_580 * _514) - _580) + _581.z)) + _580;
    float _613 = 1.0 - _597;
    float _614 = _613 * _610;
    float _615 = _613 * _611;
    float _616 = _613 * _612;
    float _621 = (_610 + (-0.039999999105930328369140625)) * _597;
    float _622 = (_611 + (-0.039999999105930328369140625)) * _597;
    float _623 = (_612 + (-0.039999999105930328369140625)) * _597;
    float _624 = _621 + 0.039999999105930328369140625;
    float _626 = _622 + 0.039999999105930328369140625;
    float _627 = _623 + 0.039999999105930328369140625;
    vec4 _636 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _509, cbSceneParam._m0[86u].y * _510));
    float _639 = _636.x * TEXCOORD_4;
    float _640 = dot(vec3(_420, _421, _422), vec3(_501, _502, _503));
    float _643 = _640 * 2.0;
    float _647 = (_643 * _420) - _501;
    float _648 = (_643 * _421) - _502;
    float _649 = (_643 * _422) - _503;
    float _653 = abs(dot(vec3(_501, _502, _503), vec3(_420, _421, _422)));
    float _3467 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _655 = sqrt(_554);
    float _668 = exp2((_655 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_655 * 3.0));
    float _674 = (1.0 - _668) * ((_655 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _675 = _668 * _655;
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1012;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _738 = fma(_711, cbModelParam._m0[26u].z, fma(_707, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _703));
        float _742 = fma(_711, cbModelParam._m0[27u].z, fma(_707, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _703));
        float _746 = fma(_711, cbModelParam._m0[28u].z, fma(_707, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _703));
        float _770 = _703 + _420;
        float _771 = _707 + _421;
        float _772 = _711 + _422;
        float _782 = fma(_772, cbModelParam._m0[26u].z, fma(_771, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _770)) - _738;
        float _783 = fma(_772, cbModelParam._m0[27u].z, fma(_771, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _770)) - _742;
        float _784 = fma(_772, cbModelParam._m0[28u].z, fma(_771, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _770)) - _746;
        float _788 = inversesqrt(dot(vec3(_782, _783, _784), vec3(_782, _783, _784)));
        float _801 = ((_788 * _782) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_738 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _802 = ((_788 * _783) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_742 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _803 = ((_788 * _784) / cbModelParam._m0[34u].z) + ((((((_746 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        float _840 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_806.x + (-0.5));
        float _842 = _840 * (_806.y + (-0.5));
        float _843 = _840 * (_806.z + (-0.5));
        float _850 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_813.x + (-0.5));
        float _852 = _850 * (_813.y + (-0.5));
        float _853 = _850 * (_813.z + (-0.5));
        float _860 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_820.x + (-0.5));
        float _862 = _860 * (_820.y + (-0.5));
        float _863 = _860 * (_820.z + (-0.5));
        float _870 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_827.x + (-0.5));
        float _872 = _870 * (_827.y + (-0.5));
        float _873 = _870 * (_827.z + (-0.5));
        float _874 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = _841 * 0.5;
        float _878 = _851 * 0.5;
        float _879 = _861 * 0.5;
        float _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
        float _885 = (_880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_880);
        float _894 = (dot(vec3(_420, _421, _422), vec3(_885 * _877, _885 * _878, _885 * _879)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _904 = sqrt(((_878 * _878) + (_877 * _877)) + (_879 * _879)) / (_874 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _906 = _905 * 2.0;
        float _910 = (1.0 - _905) / (_905 + 1.0);
        float _3515 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _920 = ((((1.0 - _911) * (_906 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_906 + 1.0))) + _911) * _874;
        float _921 = _842 * 0.5;
        float _922 = _852 * 0.5;
        float _923 = _862 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _937 = (dot(vec3(_420, _421, _422), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _946 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3548 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_948 + 1.0))) + _953) * _875;
        float _963 = _843 * 0.5;
        float _964 = _853 * 0.5;
        float _965 = _863 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _979 = (dot(vec3(_420, _421, _422), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _988 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3581 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_990 + 1.0))) + _995) * _876;
        _1012 = _843;
        _1014 = _842;
        _1015 = _841;
        _1016 = _853;
        _1017 = _852;
        _1018 = _851;
        _1019 = _863;
        _1020 = _862;
        _1021 = _861;
        _1022 = _876;
        _1023 = _875;
        _1024 = _874;
        _1025 = cbModelParam._m0[36u].z * (isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0)));
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
    }
    else
    {
        _1012 = _1013;
        _1014 = _1013;
        _1015 = _1013;
        _1016 = _1013;
        _1017 = _1013;
        _1018 = _1013;
        _1019 = _1013;
        _1020 = _1013;
        _1021 = _1013;
        _1022 = _1013;
        _1023 = _1013;
        _1024 = _1013;
        _1025 = 0.0;
        _1026 = 0.0;
        _1027 = 0.0;
    }
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1053 = fma(_711, cbModelParam._m0[30u].z, fma(_707, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _703));
        float _1057 = fma(_711, cbModelParam._m0[31u].z, fma(_707, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _703));
        float _1061 = fma(_711, cbModelParam._m0[32u].z, fma(_707, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _703));
        float _1084 = _703 + _420;
        float _1085 = _707 + _421;
        float _1086 = _711 + _422;
        float _1096 = fma(_1086, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1084)) - _1053;
        float _1097 = fma(_1086, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1084)) - _1057;
        float _1098 = fma(_1086, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1084)) - _1061;
        float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
        float _1115 = ((_1102 * _1096) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1053 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1102 * _1097) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1057 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1102 * _1098) / cbModelParam._m0[35u].z) + ((((((_1061 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        float _1152 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1119.x + (-0.5));
        float _1154 = _1152 * (_1119.y + (-0.5));
        float _1155 = _1152 * (_1119.z + (-0.5));
        float _1162 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1126.x + (-0.5));
        float _1164 = _1162 * (_1126.y + (-0.5));
        float _1165 = _1162 * (_1126.z + (-0.5));
        float _1172 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1133.x + (-0.5));
        float _1174 = _1172 * (_1133.y + (-0.5));
        float _1175 = _1172 * (_1133.z + (-0.5));
        float _1182 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1140.x + (-0.5));
        float _1184 = _1182 * (_1140.y + (-0.5));
        float _1185 = _1182 * (_1140.z + (-0.5));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = _1153 * 0.5;
        float _1190 = _1163 * 0.5;
        float _1191 = _1173 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_420, _421, _422), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3644 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1216 + 1.0))) + _1221) * _1186;
        float _1231 = _1154 * 0.5;
        float _1232 = _1164 * 0.5;
        float _1233 = _1174 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_420, _421, _422), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3677 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1258 + 1.0))) + _1263) * _1187;
        float _1273 = _1155 * 0.5;
        float _1274 = _1165 * 0.5;
        float _1275 = _1175 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_420, _421, _422), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3710 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1300 + 1.0))) + _1305) * _1188;
        _1322 = _1155;
        _1323 = _1154;
        _1324 = _1153;
        _1325 = _1165;
        _1326 = _1164;
        _1327 = _1163;
        _1328 = _1175;
        _1329 = _1174;
        _1330 = _1173;
        _1331 = _1188;
        _1332 = _1187;
        _1333 = _1186;
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1335 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
    }
    else
    {
        _1322 = _1013;
        _1323 = _1013;
        _1324 = _1013;
        _1325 = _1013;
        _1326 = _1013;
        _1327 = _1013;
        _1328 = _1013;
        _1329 = _1013;
        _1330 = _1013;
        _1331 = _1013;
        _1332 = _1013;
        _1333 = _1013;
        _1334 = 0.0;
        _1335 = 0.0;
        _1336 = 0.0;
    }
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1025)) + _1025;
    float _1347 = (cbModelParam._m0[1u].x * (_1335 - _1026)) + _1026;
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1027)) + _1027;
    float _1369 = fma(_1348, cbSceneParam._m0[89u].z, fma(_1347, cbSceneParam._m0[89u].y, _1346 * cbSceneParam._m0[89u].x));
    float _1372 = fma(_1348, cbSceneParam._m0[90u].z, fma(_1347, cbSceneParam._m0[90u].y, _1346 * cbSceneParam._m0[90u].x));
    float _1375 = fma(_1348, cbSceneParam._m0[91u].z, fma(_1347, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1346));
    float _1390 = _647 * 0.5;
    float _1391 = _648 * 0.5;
    float _1392 = _649 * 0.5;
    float _1393 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1396 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1323, _1326, _1329, _1332));
    float _1399 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1433;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1406 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1012, _1016, _1019, _1022));
        float _1410 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1014, _1017, _1020, _1023));
        float _1414 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1015, _1018, _1021, _1024));
        float _1421 = dot(vec4(cbModelParam._m0[39u]), vec4(_1390, _1391, _1392, 1.0));
        _1433 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1433 = 1.0;
    }
    float _1444;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1435 = dot(vec4(cbModelParam._m0[40u]), vec4(_1390, _1391, _1392, 1.0));
        _1444 = dot(vec3(isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1435) ? 0.0 : (isnan(0.0) ? _1435 : max(0.0, _1435))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1444 = 1.0;
    }
    float _1448 = (_1444 * cbModelParam._m0[1u].x) + (_1433 * (1.0 - cbModelParam._m0[1u].x));
    float _1458 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _554);
    float _1459 = isnan(_1458) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1458 : min(cbModelParam._m0[25u].z, _1458));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1506 = fma(_711, cbModelParam._m0[13u].z, fma(_707, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _703)) + cbModelParam._m0[13u].w;
        float _1510 = fma(_711, cbModelParam._m0[14u].z, fma(_707, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _703)) + cbModelParam._m0[14u].w;
        float _1514 = fma(_711, cbModelParam._m0[15u].z, fma(_707, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _703)) + cbModelParam._m0[15u].w;
        float _1517 = fma(_649, cbModelParam._m0[13u].z, fma(_648, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _647));
        float _1520 = fma(_649, cbModelParam._m0[14u].z, fma(_648, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _647));
        float _1523 = fma(_649, cbModelParam._m0[15u].z, fma(_648, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _647));
        float _1551;
        if (_1517 > 0.0)
        {
            _1551 = abs((1.0 - _1506) / _1517);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1506 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1551 = frontier_phi_14_12_ladder;
        }
        float _1778;
        if (_1520 > 0.0)
        {
            _1778 = abs((1.0 - _1510) / _1520);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1510 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1778 = frontier_phi_23_19_ladder;
        }
        float _2035;
        if (_1523 > 0.0)
        {
            _2035 = abs((1.0 - _1514) / _1523);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1514 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2035 = frontier_phi_35_30_ladder;
        }
        float _2037 = isnan(_1778) ? _1551 : (isnan(_1551) ? _1778 : min(_1551, _1778));
        float _2038 = isnan(_2035) ? _2037 : (isnan(_2037) ? _2035 : min(_2037, _2035));
        float _2042 = (_2038 * _1517) + _1506;
        float _2043 = (_2038 * _1520) + _1510;
        float _2044 = (_2038 * _1523) + _1514;
        float _2045 = _2038 * 9.9999997473787516355514526367188e-05;
        float _2047 = (-1.0) - _2045;
        float _2049 = _2045 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2044 > _2049) || ((_2044 < _2047) || ((_2043 > _2049) || ((_2043 < _2047) || ((_2042 < _2047) || (_2042 > _2049))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2172 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2044, cbModelParam._m0[9u].z, fma(_2043, cbModelParam._m0[9u].y, _2042 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2044, cbModelParam._m0[10u].z, fma(_2043, cbModelParam._m0[10u].y, _2042 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2044, cbModelParam._m0[11u].z, fma(_2043, cbModelParam._m0[11u].y, _2042 * cbModelParam._m0[11u].x))), _1459);
            frontier_phi_13_35_ladder = _2172.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2172.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2172.x * cbModelParam._m0[1u].y;
        }
        _1539 = frontier_phi_13_35_ladder_2;
        _1541 = frontier_phi_13_35_ladder_1;
        _1543 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_647, _648, _649), _1459);
        _1539 = _1527.x * cbModelParam._m0[1u].y;
        _1541 = _1527.y * cbModelParam._m0[1u].y;
        _1543 = _1527.z * cbModelParam._m0[1u].y;
    }
    float _1547 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _554);
    float _1548 = isnan(_1547) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1547 : min(cbModelParam._m0[25u].w, _1547));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1605 = fma(_711, cbModelParam._m0[21u].z, fma(_707, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _703)) + cbModelParam._m0[21u].w;
        float _1609 = fma(_711, cbModelParam._m0[22u].z, fma(_707, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _703)) + cbModelParam._m0[22u].w;
        float _1613 = fma(_711, cbModelParam._m0[23u].z, fma(_707, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _703)) + cbModelParam._m0[23u].w;
        float _1616 = fma(_649, cbModelParam._m0[21u].z, fma(_648, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _647));
        float _1619 = fma(_649, cbModelParam._m0[22u].z, fma(_648, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _647));
        float _1622 = fma(_649, cbModelParam._m0[23u].z, fma(_648, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _647));
        float _1783;
        if (_1616 > 0.0)
        {
            _1783 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1783 = frontier_phi_25_21_ladder;
        }
        float _2062;
        if (_1619 > 0.0)
        {
            _2062 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2062 = frontier_phi_37_32_ladder;
        }
        float _2275;
        if (_1622 > 0.0)
        {
            _2275 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2275 = frontier_phi_46_43_ladder;
        }
        float _2277 = isnan(_2062) ? _1783 : (isnan(_1783) ? _2062 : min(_1783, _2062));
        float _2278 = isnan(_2275) ? _2277 : (isnan(_2277) ? _2275 : min(_2277, _2275));
        float _2282 = (_2278 * _1616) + _1605;
        float _2283 = (_2278 * _1619) + _1609;
        float _2284 = (_2278 * _1622) + _1613;
        float _2285 = _2278 * 9.9999997473787516355514526367188e-05;
        float _2286 = (-1.0) - _2285;
        float _2288 = _2285 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2284 > _2288) || ((_2284 < _2286) || ((_2283 > _2288) || ((_2283 < _2286) || ((_2282 < _2286) || (_2282 > _2288))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2483 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2284, cbModelParam._m0[17u].z, fma(_2283, cbModelParam._m0[17u].y, _2282 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2284, cbModelParam._m0[18u].z, fma(_2283, cbModelParam._m0[18u].y, _2282 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2284, cbModelParam._m0[19u].z, fma(_2283, cbModelParam._m0[19u].y, _2282 * cbModelParam._m0[19u].x))), _1548);
            frontier_phi_22_46_ladder = _2483.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2483.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2483.x * cbModelParam._m0[1u].z;
        }
        _1641 = frontier_phi_22_46_ladder_2;
        _1643 = frontier_phi_22_46_ladder_1;
        _1645 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1625 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_647, _648, _649), _1548);
        _1641 = _1625.x * cbModelParam._m0[1u].z;
        _1643 = _1625.y * cbModelParam._m0[1u].z;
        _1645 = _1625.z * cbModelParam._m0[1u].z;
    }
    float _1658 = (((_674 * _624) + _675) * _639) * ((cbModelParam._m0[1u].w * (_1641 - _1539)) + _1539);
    float _1660 = (((_674 * _626) + _675) * _639) * ((cbModelParam._m0[1u].w * (_1643 - _1541)) + _1541);
    float _1662 = (((_674 * _627) + _675) * _639) * ((cbModelParam._m0[1u].w * (_1645 - _1543)) + _1543);
    float _1665 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, _1658 * cbSceneParam._m0[91u].x));
    vec4 _1679 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_509, _510));
    float _1681 = _1679.w;
    float _1693 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1681);
    float _1694 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1681);
    float _1695 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1681);
    uvec4 _1699 = floatBitsToUint(cbInstanceData._m0[_567 + 5u]);
    uint _1701 = _1699.x * 14u;
    uint _1702 = _1701 + 13u;
    float _1709 = _639 + (-1.0);
    float _1714 = (cbLight._m0[_1702].x * _1709) + 1.0;
    float _1715 = (cbLight._m0[_1702].y * _1709) + 1.0;
    float _1716 = (cbLight._m0[_1702].z * _1709) + 1.0;
    float _1717 = (cbLight._m0[_1702].w * _1709) + 1.0;
    uint _1718 = _1701 + 5u;
    float _1724 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
    uint _1728 = _1701 + 4u;
    float _1737 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
    uint _1741 = _1701 | 1u;
    float _1752 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_420, _421, _422));
    float _1755 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_420, _421, _422));
    float _3846 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _3857 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1760 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.3183098733425140380859375;
    float _1762 = (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.3183098733425140380859375;
    float _1769 = ((cbLight._m0[_1718].x * _1724) * _1762) + (((cbLight._m0[_1728].x * _1693) * _1737) * _1760);
    float _1770 = ((_1724 * cbLight._m0[_1718].y) * _1762) + (((cbLight._m0[_1728].y * _1694) * _1737) * _1760);
    float _1771 = ((_1724 * cbLight._m0[_1718].z) * _1762) + (((cbLight._m0[_1728].z * _1695) * _1737) * _1760);
    uvec4 _1775 = floatBitsToUint(cbLight._m0[_1701 + 12u]);
    bool _1777 = _1775.x == 0u;
    float _1788;
    float _1790;
    float _1792;
    if (_1777)
    {
        _1788 = _1769;
        _1790 = _1770;
        _1792 = _1771;
    }
    else
    {
        uint _1796 = _1701 + 6u;
        float _1812 = (dot(vec3(cbLight._m0[_1701 + 2u].xyz), vec3(_420, _421, _422)) * 0.5) + 0.5;
        float _1813 = _1812 * _1812;
        float _3868 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1815 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
        _1788 = (((cbLight._m0[_1796].x * 0.3183098733425140380859375) * _1814) * _1815) + _1769;
        _1790 = (((cbLight._m0[_1796].y * 0.3183098733425140380859375) * _1814) * _1815) + _1770;
        _1792 = (((cbLight._m0[_1796].z * 0.3183098733425140380859375) * _1814) * _1815) + _1771;
    }
    bool _1795 = _1775.y == 0u;
    float _1833;
    float _1835;
    float _1837;
    if (_1795)
    {
        _1833 = _1788;
        _1835 = _1790;
        _1837 = _1792;
    }
    else
    {
        uint _2006 = _1701 + 7u;
        float _2022 = (dot(vec3(cbLight._m0[_1701 + 3u].xyz), vec3(_420, _421, _422)) * 0.5) + 0.5;
        float _2023 = _2022 * _2022;
        float _3884 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2024 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _2025 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _1833 = (((cbLight._m0[_2006].x * 0.3183098733425140380859375) * _2024) * _2025) + _1788;
        _1835 = (((cbLight._m0[_2006].y * 0.3183098733425140380859375) * _2024) * _2025) + _1790;
        _1837 = (((cbLight._m0[_2006].z * 0.3183098733425140380859375) * _2024) * _2025) + _1792;
    }
    uint _1840 = _1701 + 8u;
    float _1853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1701].w)) * _554) * 0.949999988079071044921875);
    float _1854 = _1853 * _1853;
    float _1855 = cbLight._m0[_1701].x + _501;
    float _1856 = cbLight._m0[_1701].y + _502;
    float _1857 = cbLight._m0[_1701].z + _503;
    float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
    float _1862 = _1861 * _1855;
    float _1863 = _1861 * _1856;
    float _1864 = _1861 * _1857;
    float _1865 = dot(vec3(_420, _421, _422), vec3(cbLight._m0[_1701].xyz));
    float _3900 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _1869 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _1870 = dot(vec3(_420, _421, _422), vec3(_1862, _1863, _1864));
    float _3922 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _1874 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_1862, _1863, _1864));
    float _3933 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1878 = _1854 * _1854;
    float _1882 = ((_1873 * _1873) * (_1878 + (-1.0))) + 1.0;
    float _1890 = exp2(log2(1.0 - (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * 5.0);
    float _1891 = 0.959999978542327880859375 - _621;
    float _1893 = 0.959999978542327880859375 - _622;
    float _1894 = 0.959999978542327880859375 - _623;
    float _1901 = 1.0 - _1854;
    float _1912 = (0.5 / (((_1869 * ((_1868 * _1901) + _1854)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _1901) + _1854) * _1868))) * _1868;
    float _3944 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1914 = (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1878 / ((_1882 * _1882) * 3.141590118408203125));
    uint _1928 = _1701 + 9u;
    float _1939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1741].w)) * _554) * 0.949999988079071044921875);
    float _1940 = _1939 * _1939;
    float _1941 = cbLight._m0[_1741].x + _501;
    float _1942 = cbLight._m0[_1741].y + _502;
    float _1943 = cbLight._m0[_1741].z + _503;
    float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
    float _1948 = _1947 * _1941;
    float _1949 = _1947 * _1942;
    float _1950 = _1947 * _1943;
    float _1951 = dot(vec3(_420, _421, _422), vec3(cbLight._m0[_1741].xyz));
    float _3955 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1955 = dot(vec3(_420, _421, _422), vec3(_1948, _1949, _1950));
    float _3966 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _1959 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_1948, _1949, _1950));
    float _3977 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1963 = _1940 * _1940;
    float _1967 = ((_1958 * _1958) * (_1963 + (-1.0))) + 1.0;
    float _1974 = exp2(log2(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * 5.0);
    float _1981 = 1.0 - _1940;
    float _1991 = (0.5 / (((_1869 * ((_1954 * _1981) + _1940)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _1981) + _1940) * _1954))) * _1954;
    float _3988 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1993 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1963 / ((_1967 * _1967) * 3.141590118408203125));
    float _2003 = (((((_1974 * _1891) + _624) * cbLight._m0[_1928].x) * _1993) * _1724) + ((((cbLight._m0[_1840].x * _1693) * ((_1890 * _1891) + _624)) * _1914) * _1737);
    float _2004 = (((((_1974 * _1893) + _626) * cbLight._m0[_1928].y) * _1993) * _1724) + ((((cbLight._m0[_1840].y * _1694) * ((_1890 * _1893) + _626)) * _1914) * _1737);
    float _2005 = (((((_1974 * _1894) + _627) * cbLight._m0[_1928].z) * _1993) * _1724) + ((((cbLight._m0[_1840].z * _1695) * ((_1890 * _1894) + _627)) * _1914) * _1737);
    float _2067;
    float _2069;
    float _2071;
    if (_1777)
    {
        _2067 = _2003;
        _2069 = _2004;
        _2071 = _2005;
    }
    else
    {
        uint _2073 = _1701 + 2u;
        uint _2077 = _1701 + 10u;
        float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _554) * 0.949999988079071044921875);
        float _2092 = _2091 * _2091;
        float _2093 = cbLight._m0[_2073].x + _501;
        float _2094 = cbLight._m0[_2073].y + _502;
        float _2095 = cbLight._m0[_2073].z + _503;
        float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
        float _2100 = _2099 * _2093;
        float _2101 = _2099 * _2094;
        float _2102 = _2099 * _2095;
        float _2103 = dot(vec3(_420, _421, _422), vec3(cbLight._m0[_2073].xyz));
        float _3999 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _2107 = dot(vec3(_420, _421, _422), vec3(_2100, _2101, _2102));
        float _4010 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _2111 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2100, _2101, _2102));
        float _4021 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2115 = _2092 * _2092;
        float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
        float _2126 = exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0);
        float _2133 = 1.0 - _2092;
        float _2143 = (0.5 / (((_1869 * ((_2106 * _2133) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _2133) + _2092) * _2106))) * _2106;
        float _4032 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2145 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
        float _2146 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
        _2067 = (((((_2126 * _1891) + _624) * cbLight._m0[_2077].x) * _2145) * _2146) + _2003;
        _2069 = (((((_2126 * _1893) + _626) * cbLight._m0[_2077].y) * _2145) * _2146) + _2004;
        _2071 = (((((_2126 * _1894) + _627) * cbLight._m0[_2077].z) * _2145) * _2146) + _2005;
    }
    float _2181;
    float _2183;
    float _2185;
    if (_1795)
    {
        _2181 = _2067;
        _2183 = _2069;
        _2185 = _2071;
    }
    else
    {
        uint _2192 = _1701 + 3u;
        uint _2196 = _1701 + 11u;
        float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _554) * 0.949999988079071044921875);
        float _2211 = _2210 * _2210;
        float _2212 = cbLight._m0[_2192].x + _501;
        float _2213 = cbLight._m0[_2192].y + _502;
        float _2214 = cbLight._m0[_2192].z + _503;
        float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
        float _2219 = _2218 * _2212;
        float _2220 = _2218 * _2213;
        float _2221 = _2218 * _2214;
        float _2222 = dot(vec3(_420, _421, _422), vec3(cbLight._m0[_2192].xyz));
        float _4048 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2225 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2226 = dot(vec3(_420, _421, _422), vec3(_2219, _2220, _2221));
        float _4059 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _2230 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2219, _2220, _2221));
        float _4070 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2234 = _2211 * _2211;
        float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
        float _2245 = exp2(log2(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * 5.0);
        float _2252 = 1.0 - _2211;
        float _2262 = (0.5 / (((_1869 * ((_2225 * _2252) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _2252) + _2211) * _2225))) * _2225;
        float _4081 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2264 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
        float _2265 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _2181 = (((((_2245 * _1891) + _624) * cbLight._m0[_2196].x) * _2264) * _2265) + _2067;
        _2183 = (((((_2245 * _1893) + _626) * cbLight._m0[_2196].y) * _2264) * _2265) + _2069;
        _2185 = (((((_2245 * _1894) + _627) * cbLight._m0[_2196].z) * _2264) * _2265) + _2071;
    }
    float _2400;
    float _2402;
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    if (_1699.y == 0u)
    {
        float _2340 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2340;
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2340;
        float _2343 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2340;
        uvec4 _2355 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2356 = _2355.x;
        uint _2367 = uint((float(_2355.y) * floor(float(uint(cbSceneParam._m0[85u].y * _510) / _2356))) + floor(float(uint(cbSceneParam._m0[85u].x * _509) / _2356)));
        float _2377 = (log2(_2343 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2378 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        uint _2381 = uint(isnan(14.0) ? _2378 : (isnan(_2378) ? 14.0 : min(_2378, 14.0)));
        uvec4 _2386 = texelFetch(g_lightClusterGridBuffer, int(((_2381 << 2u) + (_2367 << 6u)) >> 2u));
        uint _2387 = _2386.x;
        uint _2388 = _2355.z;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        if (((((1u << ((_2388 >> 4u) & 15u)) + 4294967295u) & _2387) == 0u) || ((_2388 & 240u) == 0u))
        {
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
        }
        else
        {
            float _2489;
            float _2491;
            float _2493;
            float _2495;
            float _2497;
            float _2499;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            uint _2639 = 0u;
            uint _2648;
            bool _2649;
            for (;;)
            {
                _2648 = texelFetch(g_lightClassification, int((((_2381 << 5u) + (_2367 << 9u)) + (_2639 << 2u)) >> 2u)).x;
                _2649 = _2648 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2649)
                {
                    frontier_phi_61_pred = _2633;
                    frontier_phi_61_pred_1 = _2638;
                    frontier_phi_61_pred_2 = _2637;
                    frontier_phi_61_pred_3 = _2636;
                    frontier_phi_61_pred_4 = _2635;
                    frontier_phi_61_pred_5 = _2634;
                }
                else
                {
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    uint _2763;
                    _2757 = _2633;
                    _2758 = _2634;
                    _2759 = _2635;
                    _2760 = _2636;
                    _2761 = _2637;
                    _2762 = _2638;
                    _2763 = _2648;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    for (;;)
                    {
                        uint _2767 = uint(findLSB(_2763)) + (_2639 << 5u);
                        uint _2764 = (_2763 + 4294967295u) & _2763;
                        uint _2769 = _2767 * 48u;
                        vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 3u)).x));
                        uint _2789 = (_2767 * 48u) + 4u;
                        vec4 _2802 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 3u)).x));
                        uint _2808 = (_2767 * 48u) + 8u;
                        vec3 _2819 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x));
                        float _2823 = _2783.x - _2341;
                        float _2824 = _2783.y - _2342;
                        float _2825 = _2783.z - _2343;
                        float _2826 = dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825));
                        float _2829 = inversesqrt(_2826);
                        float _2830 = _2829 * _2823;
                        float _2831 = _2829 * _2824;
                        float _2832 = _2829 * _2825;
                        float _2833 = dot(vec3(_535, _538, _541), vec3(_2830, _2831, _2832));
                        float _2838 = 1.0 - (_2826 * _2783.w);
                        float _4107 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2839 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2840 = sqrt(_2826) * _2802.w;
                        float _2843 = 1.39999997615814208984375 / (_2840 + 1.39999997615814208984375);
                        float _2844 = _2843 * _2843;
                        float _2847 = ((1.0 - _2844) * _2833) + _2844;
                        float _2850 = _2840 * _2840;
                        float _2854 = ((isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0))) * _2839) / ((_2850 * 0.699999988079071044921875) + 1.0);
                        float _2858 = (-0.0) - _2341;
                        float _2859 = (-0.0) - _2342;
                        float _2860 = (-0.0) - _2343;
                        float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
                        float _2865 = _2864 * _2858;
                        float _2866 = _2864 * _2859;
                        float _2867 = _2864 * _2860;
                        float _2874 = exp2(log2(1.0 / ((_2850 * 3.5) + 5.0)) * 0.25);
                        float _2875 = 1.0 - _655;
                        float _2882 = sqrt(1.0 - ((1.0 - (_2875 * _2875)) * (1.0 - (_2874 * _2874))));
                        float _2883 = _2882 * _2882;
                        float _2884 = _2883 * _2883;
                        float _2885 = _2865 + _2830;
                        float _2886 = _2866 + _2831;
                        float _2887 = _2867 + _2832;
                        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
                        float _2895 = dot(vec3(_535, _538, _541), vec3(_2865, _2866, _2867));
                        float _4123 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2898 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2899 = dot(vec3(_535, _538, _541), vec3(_2891 * _2885, _2891 * _2886, _2891 * _2887));
                        float _4134 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2902 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2906 = ((_2902 * _2902) * (_2884 + (-1.0))) + 1.0;
                        float _2907 = _2843 * _2883;
                        float _2908 = _2907 * _2907;
                        float _2911 = ((1.0 - _2908) * _2833) + _2908;
                        float _4145 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2912 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                        float _2913 = 1.0 - _2883;
                        float _2923 = (0.5 / (((_2912 * ((_2898 * _2913) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2912 * _2913) + _2883) * _2898))) * _2912;
                        float _4156 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2934 = (((_2884 * 3.1415927410125732421875) * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) / ((_2906 * _2906) * ((_2850 * 2.1991131305694580078125) + 3.141590118408203125))) * _2839;
                        _2692 = (_2854 * _2802.x) + _2760;
                        _2693 = (_2854 * _2802.y) + _2761;
                        _2694 = (_2854 * _2802.z) + _2762;
                        _2689 = (_2934 * _2819.x) + _2757;
                        _2690 = (_2934 * _2819.y) + _2758;
                        _2691 = (_2934 * _2819.z) + _2759;
                        if (_2764 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2757 = _2689;
                            _2758 = _2690;
                            _2759 = _2691;
                            _2760 = _2692;
                            _2761 = _2693;
                            _2762 = _2694;
                            _2763 = _2764;
                        }
                    }
                    frontier_phi_61_pred = _2689;
                    frontier_phi_61_pred_1 = _2694;
                    frontier_phi_61_pred_2 = _2693;
                    frontier_phi_61_pred_3 = _2692;
                    frontier_phi_61_pred_4 = _2691;
                    frontier_phi_61_pred_5 = _2690;
                }
                _2489 = frontier_phi_61_pred;
                _2499 = frontier_phi_61_pred_1;
                _2497 = frontier_phi_61_pred_2;
                _2495 = frontier_phi_61_pred_3;
                _2493 = frontier_phi_61_pred_4;
                _2491 = frontier_phi_61_pred_5;
                uint _2640 = _2639 + 1u;
                if (_2640 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2633 = _2489;
                    _2634 = _2491;
                    _2635 = _2493;
                    _2636 = _2495;
                    _2637 = _2497;
                    _2638 = _2499;
                    _2639 = _2640;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
        }
        uvec4 _2502 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2503 = _2502.z;
        uint _2505 = (_2503 >> 8u) & 15u;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        if (((4294967295u << _2505) & _2387) == 0u)
        {
            _2601 = _2488;
            _2603 = _2490;
            _2605 = _2492;
            _2607 = _2494;
            _2609 = _2496;
            _2611 = _2498;
        }
        else
        {
            float _2626 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
            float _2627 = _2626 * _2341;
            float _2628 = _2626 * _2342;
            float _2629 = _2626 * _2343;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2505 < ((_2503 >> 12u) & 15u))
            {
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2740 = _2488;
                float _2741 = _2490;
                float _2742 = _2492;
                float _2743 = _2494;
                float _2744 = _2496;
                float _2745 = _2498;
                uint _2746 = _2505;
                uint _2755;
                bool _2756;
                for (;;)
                {
                    _2755 = texelFetch(g_lightClassification, int((((_2381 << 5u) + (_2367 << 9u)) + (_2746 << 2u)) >> 2u)).x;
                    _2756 = _2755 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2756)
                    {
                        frontier_phi_67_pred = _2743;
                        frontier_phi_67_pred_1 = _2744;
                        frontier_phi_67_pred_2 = _2745;
                        frontier_phi_67_pred_3 = _2742;
                        frontier_phi_67_pred_4 = _2741;
                        frontier_phi_67_pred_5 = _2740;
                    }
                    else
                    {
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _2952 = _2740;
                        float _2953 = _2741;
                        float _2954 = _2742;
                        float _2955 = _2743;
                        float _2956 = _2744;
                        float _2957 = _2745;
                        uint _2958 = _2755;
                        uint _2959;
                        vec4 _2984;
                        float _2985;
                        vec4 _3000;
                        vec3 _3012;
                        vec4 _3027;
                        vec4 _3043;
                        float _3090;
                        bool _3091;
                        for (;;)
                        {
                            uint _2969 = ((_2746 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2958));
                            _2959 = (_2958 + 4294967295u) & _2958;
                            uint _2971 = _2969 * 40u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            _2985 = _2984.w;
                            uint _2987 = (_2969 * 40u) + 4u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3002 = (_2969 * 40u) + 8u;
                            _3012 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x));
                            uint _3014 = (_2969 * 40u) + 16u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3030 = (_2969 * 40u) + 20u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3046 = (_2969 * 40u) + 24u;
                            vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3065 = (_2969 * 40u) + 28u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3090 = fma(_2343, _3078.z, fma(_2342, _3078.y, _3078.x * _2341)) + _3078.w;
                            _3091 = !((fma(_2343, _3059.z, fma(_2342, _3059.y, _3059.x * _2341)) + _3059.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3091)
                            {
                                float _3118 = _2984.x - _2341;
                                float _3119 = _2984.y - _2342;
                                float _3120 = _2984.z - _2343;
                                float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                                float _3124 = inversesqrt(_3121);
                                float _3125 = _3124 * _3118;
                                float _3126 = _3124 * _3119;
                                float _3127 = _3124 * _3120;
                                float _3131 = 1.0 - (_3121 / (_2985 * _2985));
                                float _4167 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3136 = sqrt(_3121) * _3000.w;
                                float _3138 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                                float _3139 = _3138 * _3138;
                                float _3142 = ((1.0 - _3139) * dot(vec3(_3125, _3126, _3127), vec3(_535, _538, _541))) + _3139;
                                float _3145 = _3136 * _3136;
                                float _3149 = (fma(_2343, _3027.z, fma(_2342, _3027.y, _3027.x * _2341)) + _3027.w) / _3090;
                                float _3150 = (fma(_2343, _3043.z, fma(_2342, _3043.y, _3043.x * _2341)) + _3043.w) / _3090;
                                float _3154 = 1.0 - dot(vec2(_3149, _3150), vec2(_3149, _3150));
                                float _4183 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3156 = _3155 * (((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3132) / ((_3145 * 0.699999988079071044921875) + 1.0));
                                float _3168 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                                float _3169 = 1.0 - _655;
                                float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                                float _3177 = _3176 * _3176;
                                float _3178 = _3177 * _3177;
                                float _3179 = _3125 - _2627;
                                float _3180 = _3126 - _2628;
                                float _3181 = _3127 - _2629;
                                float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                                float _3189 = dot(vec3(_535, _538, _541), vec3((-0.0) - _2627, (-0.0) - _2628, (-0.0) - _2629));
                                float _4194 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3192 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3193 = dot(vec3(_535, _538, _541), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                                float _4205 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                                float _3201 = _3138 * _3177;
                                float _3202 = _3201 * _3201;
                                float _3208 = ((1.0 - _3202) * dot(vec3(_535, _538, _541), vec3(_3125, _3126, _3127))) + _3202;
                                float _4216 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3210 = 1.0 - _3177;
                                float _3220 = (0.5 / (((_3209 * ((_3192 * _3210) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3177) * _3192))) * _3209;
                                float _4227 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3230 = (_3155 * _3132) * (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) / ((_3200 * _3200) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3230 * _3012.x;
                                frontier_phi_73_pred_1 = _3230 * _3012.y;
                                frontier_phi_73_pred_2 = _3156 * _3000.z;
                                frontier_phi_73_pred_3 = _3156 * _3000.y;
                                frontier_phi_73_pred_4 = _3156 * _3000.x;
                                frontier_phi_73_pred_5 = _3230 * _3012.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3234 = frontier_phi_73_pred;
                            _3235 = frontier_phi_73_pred_1;
                            _3239 = frontier_phi_73_pred_2;
                            _3238 = frontier_phi_73_pred_3;
                            _3237 = frontier_phi_73_pred_4;
                            _3236 = frontier_phi_73_pred_5;
                            _2942 = _3237 + _2955;
                            _2943 = _3238 + _2956;
                            _2944 = _3239 + _2957;
                            _2939 = _3234 + _2952;
                            _2940 = _3235 + _2953;
                            _2941 = _3236 + _2954;
                            if (_2959 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2959;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2942;
                        frontier_phi_67_pred_1 = _2943;
                        frontier_phi_67_pred_2 = _2944;
                        frontier_phi_67_pred_3 = _2941;
                        frontier_phi_67_pred_4 = _2940;
                        frontier_phi_67_pred_5 = _2939;
                    }
                    _2608 = frontier_phi_67_pred;
                    _2610 = frontier_phi_67_pred_1;
                    _2612 = frontier_phi_67_pred_2;
                    _2606 = frontier_phi_67_pred_3;
                    _2604 = frontier_phi_67_pred_4;
                    _2602 = frontier_phi_67_pred_5;
                    uint _2747 = _2746 + 1u;
                    if (_2747 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2740 = _2602;
                        _2741 = _2604;
                        _2742 = _2606;
                        _2743 = _2608;
                        _2744 = _2610;
                        _2745 = _2612;
                        _2746 = _2747;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2610;
                frontier_phi_55_56_ladder_1 = _2612;
                frontier_phi_55_56_ladder_2 = _2608;
                frontier_phi_55_56_ladder_3 = _2606;
                frontier_phi_55_56_ladder_4 = _2604;
                frontier_phi_55_56_ladder_5 = _2602;
            }
            else
            {
                frontier_phi_55_56_ladder = _2496;
                frontier_phi_55_56_ladder_1 = _2498;
                frontier_phi_55_56_ladder_2 = _2494;
                frontier_phi_55_56_ladder_3 = _2492;
                frontier_phi_55_56_ladder_4 = _2490;
                frontier_phi_55_56_ladder_5 = _2488;
            }
            _2601 = frontier_phi_55_56_ladder_5;
            _2603 = frontier_phi_55_56_ladder_4;
            _2605 = frontier_phi_55_56_ladder_3;
            _2607 = frontier_phi_55_56_ladder_2;
            _2609 = frontier_phi_55_56_ladder;
            _2611 = frontier_phi_55_56_ladder_1;
        }
        float _2616 = isnan(1.0) ? _639 : (isnan(_639) ? 1.0 : min(_639, 1.0));
        _2400 = (_2616 * _2607) + _1833;
        _2402 = (_2616 * _2609) + _1835;
        _2404 = (_2616 * _2611) + _1837;
        _2406 = ((_2601 * _624) * _2616) + _2181;
        _2408 = ((_2603 * _626) * _2616) + _2183;
        _2410 = ((_2605 * _627) * _2616) + _2185;
    }
    else
    {
        _2400 = _1833;
        _2402 = _1835;
        _2404 = _1837;
        _2406 = _2181;
        _2408 = _2183;
        _2410 = _2185;
    }
    float _4243 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4254 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4265 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    uint _2430 = _567 + 6u;
    float _2438 = _509 / cbSceneParam._m0[86u].x;
    float _2439 = _510 / cbSceneParam._m0[86u].y;
    vec4 _2453 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2438, _2439, (log2((isnan(cbSceneParam._m0[77u].w) ? _443 : (isnan(_443) ? cbSceneParam._m0[77u].w : min(_443, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2455 = _2453.x;
    float _2456 = _2453.y;
    float _2457 = _2453.z;
    float _2458 = _2453.w;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    if (_443 > cbSceneParam._m0[78u].w)
    {
        float _2513 = isnan(_443) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _443 : min(cbSceneParam._m0[80u].w, _443));
        float _2514 = _2513 / _443;
        float _2525 = _2514 * _494;
        float _2526 = _495 * _2514;
        float _2527 = (-0.0) - _2526;
        float _2529 = _2514 * _496;
        float _2531 = (cbSceneParam._m0[77u].w * _2527) / _2513;
        float _2532 = _2531 + cbSceneParam._m0[79u].w;
        float _2533 = cbSceneParam._m0[79u].w - _2526;
        float _2539 = sqrt(((_2525 * _2525) + (_2526 * _2526)) + (_2529 * _2529));
        float _2542 = (1.0 - (cbSceneParam._m0[77u].w / _2513)) * _2539;
        float _2547 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2549 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2702;
        if (abs((_2527 - _2531) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2702 = ((((_2532 > 0.0) ? exp2(_2547 * _2532) : (2.0 - exp2(_2549 * _2532))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2542;
        }
        else
        {
            float _2662 = 1.0 / cbSceneParam._m0[80u].x;
            float _2663 = isnan(_2533) ? _2532 : (isnan(_2532) ? _2533 : max(_2532, _2533));
            float _2664 = isnan(_2533) ? _2532 : (isnan(_2532) ? _2533 : min(_2532, _2533));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            float _2674 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : min(_2664, 0.0));
            _2702 = ((abs(_2539 / _2527) * cbSceneParam._m0[80u].y) * ((((_2673 - _2674) * 2.0) - ((exp2(_2547 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0)))) - exp2(_2547 * (isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0))))) * _2662)) - ((exp2(_2549 * _2673) - exp2(_2549 * _2674)) * _2662))) + (_2542 * cbSceneParam._m0[80u].z);
        }
        vec4 _2704 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2438, _2439, 1.0), 0.0);
        float _2713 = exp2((_2702 * (-1.44269502162933349609375)) * (1.0 - _2704.w));
        float _2714 = log2(_2713);
        float _2730 = log2(_2458);
        _2551 = (exp2(_2730 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].x)) * _2704.x) / cbSceneParam._m0[78u].x)) + _2455;
        _2553 = (exp2(_2730 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].y)) * _2704.y) / cbSceneParam._m0[78u].y)) + _2456;
        _2555 = (exp2(_2730 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].z)) * _2704.z) / cbSceneParam._m0[78u].z)) + _2457;
        _2557 = _2713 * _2458;
    }
    else
    {
        _2551 = _2455;
        _2553 = _2456;
        _2555 = _2457;
        _2557 = _2458;
    }
    float _2569 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2570 = _2569 == 3.0;
    float _2571 = log2(_2557);
    float _2578 = exp2(_2571 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2400 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _639))) + ((_2406 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1448)) * cbPerFrame._m0[3u].x));
    float _2579 = exp2(_2571 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2402 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _639))) + ((_2408 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1448)) * cbPerFrame._m0[3u].x));
    float _2580 = exp2(_2571 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2404 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _639))) + ((_2410 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1448)) * cbPerFrame._m0[3u].x));
    float _2589 = (_2569 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2589 * (_2570 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2551)));
    SV_Target.y = _2589 * (_2570 ? _2579 : (_2579 + (cbSceneParam._m0[72u].w * _2553)));
    SV_Target.z = _2589 * (_2570 ? _2580 : (_2580 + (cbSceneParam._m0[72u].w * _2555)));
    SV_Target.w = cbInstanceData._m0[_2430].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2430].w;
}


