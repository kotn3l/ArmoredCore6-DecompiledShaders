#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_24;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1037;
float _3707;
float _3708;
float _3709;
float _3710;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _238 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _238.z;
    float _251 = exp2(log2(_243 * cbMtdParam._m0[13u].x) * cbMtdParam._m0[12u].y);
    float _252 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _253 = isnan(1.0) ? _252 : (isnan(_252) ? 1.0 : min(_252, 1.0));
    float _273 = ((cbMtdParam._m0[10u].x - cbMtdParam._m0[9u].x) * _253) + cbMtdParam._m0[9u].x;
    float _274 = ((cbMtdParam._m0[10u].y - cbMtdParam._m0[9u].y) * _253) + cbMtdParam._m0[9u].y;
    float _275 = ((cbMtdParam._m0[10u].z - cbMtdParam._m0[9u].z) * _253) + cbMtdParam._m0[9u].z;
    float _293 = exp2(log2(texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w)).x) * cbMtdParam._m0[13u].y);
    vec4 _315 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _322 = (((_293 * (cbMtdParam._m0[11u].x - _273)) + _273) * 4.55000019073486328125) * _315.x;
    float _324 = (((_293 * (cbMtdParam._m0[11u].y - _274)) + _274) * 4.55000019073486328125) * _315.y;
    float _326 = (((_293 * (cbMtdParam._m0[11u].z - _275)) + _275) * 4.55000019073486328125) * _315.z;
    float _335 = ((cbMtdParam._m0[14u].y - cbMtdParam._m0[12u].z) * _253) + cbMtdParam._m0[12u].z;
    float _338 = ((cbMtdParam._m0[12u].w - _335) * _293) + _335;
    vec4 _351 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _369 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _371 = _369.x;
    float _372 = _369.y;
    float _375 = cbMtdParam._m0[12u].x + _369.z;
    float _378 = (((cbMtdParam._m0[14u].x + _351.z) - _375) * _253) + _375;
    vec4 _391 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _400 = (((_391.z - _378) + cbMtdParam._m0[14u].z) * _293) + _378;
    float _406 = ((((_243 * 2.0) * _400) - _400) * cbMtdParam._m0[13u].z) + _400;
    float _417 = ((_351.x - _371) * _253) + _371;
    float _418 = ((_351.y - _372) * _253) + _372;
    float _427 = ((((_391.x - _417) * _293) + _417) * 2.0) + (-1.0);
    float _428 = ((((_391.y - _418) * _293) + _418) * 2.0) + (-1.0);
    float _429 = dot(vec2(_427, _428), vec2(_427, _428));
    float _3729 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _434 = sqrt(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))));
    float _437 = _427 + (cbMtdParam._m0[13u].w * ((_238.x * 2.0) + (-1.0)));
    float _438 = _428 + (cbMtdParam._m0[13u].w * ((_238.y * 2.0) + (-1.0)));
    float _441 = fma(_434, _204 * NORMAL.x, fma(_438, _211 * TANGENT.x, (_197 * _190) * _437));
    float _444 = fma(_434, _204 * NORMAL.y, fma(_438, _211 * TANGENT.y, (_197 * _191) * _437));
    float _447 = fma(_434, _204 * NORMAL.z, fma(_438, _211 * TANGENT.z, (_197 * _192) * _437));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _452 = _451 * _441;
    float _453 = _451 * _444;
    float _454 = _451 * _447;
    float _3740 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _455 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3762 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3773 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3784 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _459 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _475 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _526 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _516);
    float _527 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _516);
    float _528 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _516);
    float _532 = inversesqrt(dot(vec3(_526, _527, _528), vec3(_526, _527, _528)));
    float _533 = _526 * _532;
    float _534 = _527 * _532;
    float _535 = _528 * _532;
    vec4 _540 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _542 = _540.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _716 = sqrt(((_526 * _526) + (_527 * _527)) + (_528 * _528));
        float _722 = (cbMatDynParam._m0[5u].x * _716) + cbMatDynParam._m0[5u].y;
        float _3795 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _727 = (cbMatDynParam._m0[5u].z * _716) + cbMatDynParam._m0[5u].w;
        float _3806 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) - _723)) + _723) < ((_542 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _554 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _555 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _574 = fma(_454, cbSceneParam._m0[5u].z, fma(_453, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _452));
    float _577 = fma(_454, cbSceneParam._m0[6u].z, fma(_453, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _452));
    float _580 = fma(_454, cbSceneParam._m0[7u].z, fma(_453, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _452));
    uint _593 = uint(roundEven(NORMAL.w)) * 13u;
    uint _594 = _593 + 9u;
    uint _595 = _594 + uint(cbMatDynParam._m0[0u].w);
    float _601 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_595].x;
    float _602 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_595].y;
    float _603 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_595].z;
    float _3817 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _607 = 1.0 - _459;
    float _608 = _604 * _607;
    float _609 = _605 * _607;
    float _610 = _606 * _607;
    float _615 = (_604 + (-0.039999999105930328369140625)) * _459;
    float _616 = (_605 + (-0.039999999105930328369140625)) * _459;
    float _617 = (_606 + (-0.039999999105930328369140625)) * _459;
    float _618 = _615 + 0.039999999105930328369140625;
    float _620 = _616 + 0.039999999105930328369140625;
    float _621 = _617 + 0.039999999105930328369140625;
    vec4 _630 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _554, cbSceneParam._m0[86u].y * _555));
    float _633 = _630.x * TEXCOORD.z;
    float _634 = dot(vec3(_452, _453, _454), vec3(_533, _534, _535));
    float _637 = _634 * 2.0;
    float _641 = (_637 * _452) - _533;
    float _642 = (_637 * _453) - _534;
    float _643 = (_637 * _454) - _535;
    float _647 = abs(dot(vec3(_533, _534, _535), vec3(_452, _453, _454)));
    float _3850 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _649 = sqrt(_455);
    float _662 = exp2((_649 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_649 * 3.0));
    float _668 = (1.0 - _662) * ((_649 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _669 = _662 * _649;
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1036;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _761 = fma(_705, cbModelParam._m0[26u].z, fma(_701, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _697));
        float _765 = fma(_705, cbModelParam._m0[27u].z, fma(_701, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _697));
        float _769 = fma(_705, cbModelParam._m0[28u].z, fma(_701, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _697));
        float _794 = _697 + _452;
        float _795 = _701 + _453;
        float _796 = _705 + _454;
        float _806 = fma(_796, cbModelParam._m0[26u].z, fma(_795, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _794)) - _761;
        float _807 = fma(_796, cbModelParam._m0[27u].z, fma(_795, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _794)) - _765;
        float _808 = fma(_796, cbModelParam._m0[28u].z, fma(_795, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _794)) - _769;
        float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
        float _825 = ((_812 * _806) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_761 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_812 * _807) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_765 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_812 * _808) / cbModelParam._m0[34u].z) + ((((((_769 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        float _864 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_830.x + (-0.5));
        float _866 = _864 * (_830.y + (-0.5));
        float _867 = _864 * (_830.z + (-0.5));
        float _874 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_837.x + (-0.5));
        float _876 = _874 * (_837.y + (-0.5));
        float _877 = _874 * (_837.z + (-0.5));
        float _884 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_844.x + (-0.5));
        float _886 = _884 * (_844.y + (-0.5));
        float _887 = _884 * (_844.z + (-0.5));
        float _894 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_851.x + (-0.5));
        float _896 = _894 * (_851.y + (-0.5));
        float _897 = _894 * (_851.z + (-0.5));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = _865 * 0.5;
        float _902 = _875 * 0.5;
        float _903 = _885 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _918 = (dot(vec3(_452, _453, _454), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _928 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3898 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_930 + 1.0))) + _935) * _898;
        float _945 = _866 * 0.5;
        float _946 = _876 * 0.5;
        float _947 = _886 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _961 = (dot(vec3(_452, _453, _454), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _970 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3931 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_972 + 1.0))) + _977) * _899;
        float _987 = _867 * 0.5;
        float _988 = _877 * 0.5;
        float _989 = _887 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_452, _453, _454), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3964 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1014 + 1.0))) + _1019) * _900;
        _1036 = _867;
        _1038 = _866;
        _1039 = _865;
        _1040 = _877;
        _1041 = _876;
        _1042 = _875;
        _1043 = _887;
        _1044 = _886;
        _1045 = _885;
        _1046 = _900;
        _1047 = _899;
        _1048 = _898;
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
    }
    else
    {
        _1036 = _1037;
        _1038 = _1037;
        _1039 = _1037;
        _1040 = _1037;
        _1041 = _1037;
        _1042 = _1037;
        _1043 = _1037;
        _1044 = _1037;
        _1045 = _1037;
        _1046 = _1037;
        _1047 = _1037;
        _1048 = _1037;
        _1049 = 0.0;
        _1050 = 0.0;
        _1051 = 0.0;
    }
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1080 = fma(_705, cbModelParam._m0[30u].z, fma(_701, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _697));
        float _1084 = fma(_705, cbModelParam._m0[31u].z, fma(_701, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _697));
        float _1088 = fma(_705, cbModelParam._m0[32u].z, fma(_701, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _697));
        float _1111 = _697 + _452;
        float _1112 = _701 + _453;
        float _1113 = _705 + _454;
        float _1123 = fma(_1113, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1111)) - _1080;
        float _1124 = fma(_1113, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1111)) - _1084;
        float _1125 = fma(_1113, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1111)) - _1088;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1080 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1084 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[35u].z) + ((((((_1088 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1179 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1146.x + (-0.5));
        float _1181 = _1179 * (_1146.y + (-0.5));
        float _1182 = _1179 * (_1146.z + (-0.5));
        float _1189 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1153.x + (-0.5));
        float _1191 = _1189 * (_1153.y + (-0.5));
        float _1192 = _1189 * (_1153.z + (-0.5));
        float _1199 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1160.x + (-0.5));
        float _1201 = _1199 * (_1160.y + (-0.5));
        float _1202 = _1199 * (_1160.z + (-0.5));
        float _1209 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1167.x + (-0.5));
        float _1211 = _1209 * (_1167.y + (-0.5));
        float _1212 = _1209 * (_1167.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_452, _453, _454), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _4027 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1243 + 1.0))) + _1248) * _1213;
        float _1258 = _1181 * 0.5;
        float _1259 = _1191 * 0.5;
        float _1260 = _1201 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_452, _453, _454), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4060 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1285 + 1.0))) + _1290) * _1214;
        float _1300 = _1182 * 0.5;
        float _1301 = _1192 * 0.5;
        float _1302 = _1202 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_452, _453, _454), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4093 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1327 + 1.0))) + _1332) * _1215;
        _1349 = _1182;
        _1350 = _1181;
        _1351 = _1180;
        _1352 = _1192;
        _1353 = _1191;
        _1354 = _1190;
        _1355 = _1202;
        _1356 = _1201;
        _1357 = _1200;
        _1358 = _1215;
        _1359 = _1214;
        _1360 = _1213;
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
    }
    else
    {
        _1349 = _1037;
        _1350 = _1037;
        _1351 = _1037;
        _1352 = _1037;
        _1353 = _1037;
        _1354 = _1037;
        _1355 = _1037;
        _1356 = _1037;
        _1357 = _1037;
        _1358 = _1037;
        _1359 = _1037;
        _1360 = _1037;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1049)) + _1049;
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1050)) + _1050;
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1051)) + _1051;
    float _1396 = fma(_1375, cbSceneParam._m0[89u].z, fma(_1374, cbSceneParam._m0[89u].y, _1373 * cbSceneParam._m0[89u].x));
    float _1399 = fma(_1375, cbSceneParam._m0[90u].z, fma(_1374, cbSceneParam._m0[90u].y, _1373 * cbSceneParam._m0[90u].x));
    float _1402 = fma(_1375, cbSceneParam._m0[91u].z, fma(_1374, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1373));
    float _1417 = _641 * 0.5;
    float _1418 = _642 * 0.5;
    float _1419 = _643 * 0.5;
    float _1420 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1423 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1426 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1460;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1433 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1036, _1040, _1043, _1046));
        float _1437 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1441 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1448 = dot(vec4(cbModelParam._m0[39u]), vec4(_1417, _1418, _1419, 1.0));
        _1460 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1460 = 1.0;
    }
    float _1471;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1462 = dot(vec4(cbModelParam._m0[40u]), vec4(_1417, _1418, _1419, 1.0));
        _1471 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1471 = 1.0;
    }
    float _1475 = (_1471 * cbModelParam._m0[1u].x) + (_1460 * (1.0 - cbModelParam._m0[1u].x));
    float _1485 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _455);
    float _1486 = isnan(_1485) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1485 : min(cbModelParam._m0[25u].z, _1485));
    float _1566;
    float _1568;
    float _1570;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1533 = fma(_705, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697)) + cbModelParam._m0[13u].w;
        float _1537 = fma(_705, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697)) + cbModelParam._m0[14u].w;
        float _1541 = fma(_705, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697)) + cbModelParam._m0[15u].w;
        float _1544 = fma(_643, cbModelParam._m0[13u].z, fma(_642, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _641));
        float _1547 = fma(_643, cbModelParam._m0[14u].z, fma(_642, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _641));
        float _1550 = fma(_643, cbModelParam._m0[15u].z, fma(_642, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _641));
        float _1578;
        if (_1544 > 0.0)
        {
            _1578 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1578 = frontier_phi_17_15_ladder;
        }
        float _1753;
        if (_1547 > 0.0)
        {
            _1753 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1753 = frontier_phi_26_22_ladder;
        }
        float _2048;
        if (_1550 > 0.0)
        {
            _2048 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2048 = frontier_phi_38_33_ladder;
        }
        float _2050 = isnan(_1753) ? _1578 : (isnan(_1578) ? _1753 : min(_1578, _1753));
        float _2051 = isnan(_2048) ? _2050 : (isnan(_2050) ? _2048 : min(_2050, _2048));
        float _2055 = (_2051 * _1544) + _1533;
        float _2056 = (_2051 * _1547) + _1537;
        float _2057 = (_2051 * _1550) + _1541;
        float _2058 = _2051 * 9.9999997473787516355514526367188e-05;
        float _2060 = (-1.0) - _2058;
        float _2062 = _2058 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2057 > _2062) || ((_2057 < _2060) || ((_2056 > _2062) || ((_2056 < _2060) || ((_2055 < _2060) || (_2055 > _2062))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2202 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2057, cbModelParam._m0[9u].z, fma(_2056, cbModelParam._m0[9u].y, _2055 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2057, cbModelParam._m0[10u].z, fma(_2056, cbModelParam._m0[10u].y, _2055 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2057, cbModelParam._m0[11u].z, fma(_2056, cbModelParam._m0[11u].y, _2055 * cbModelParam._m0[11u].x))), _1486);
            frontier_phi_16_38_ladder = _2202.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2202.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2202.x * cbModelParam._m0[1u].y;
        }
        _1566 = frontier_phi_16_38_ladder_2;
        _1568 = frontier_phi_16_38_ladder_1;
        _1570 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_641, _642, _643), _1486);
        _1566 = _1554.x * cbModelParam._m0[1u].y;
        _1568 = _1554.y * cbModelParam._m0[1u].y;
        _1570 = _1554.z * cbModelParam._m0[1u].y;
    }
    float _1574 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _455);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1574 : min(cbModelParam._m0[25u].w, _1574));
    float _1668;
    float _1670;
    float _1672;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1632 = fma(_705, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697)) + cbModelParam._m0[21u].w;
        float _1636 = fma(_705, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697)) + cbModelParam._m0[22u].w;
        float _1640 = fma(_705, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697)) + cbModelParam._m0[23u].w;
        float _1643 = fma(_643, cbModelParam._m0[21u].z, fma(_642, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _641));
        float _1646 = fma(_643, cbModelParam._m0[22u].z, fma(_642, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _641));
        float _1649 = fma(_643, cbModelParam._m0[23u].z, fma(_642, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _641));
        float _1758;
        if (_1643 > 0.0)
        {
            _1758 = abs((1.0 - _1632) / _1643);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1632 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1758 = frontier_phi_28_24_ladder;
        }
        float _2075;
        if (_1646 > 0.0)
        {
            _2075 = abs((1.0 - _1636) / _1646);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1636 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2075 = frontier_phi_40_35_ladder;
        }
        float _2413;
        if (_1649 > 0.0)
        {
            _2413 = abs((1.0 - _1640) / _1649);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1640 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2413 = frontier_phi_50_47_ladder;
        }
        float _2415 = isnan(_2075) ? _1758 : (isnan(_1758) ? _2075 : min(_1758, _2075));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1643) + _1632;
        float _2421 = (_2416 * _1646) + _1636;
        float _2422 = (_2416 * _1649) + _1640;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2423;
        float _2426 = _2423 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2422 > _2426) || ((_2422 < _2424) || ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 < _2424) || (_2420 > _2426))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2544 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2422, cbModelParam._m0[17u].z, fma(_2421, cbModelParam._m0[17u].y, _2420 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2422, cbModelParam._m0[18u].z, fma(_2421, cbModelParam._m0[18u].y, _2420 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2422, cbModelParam._m0[19u].z, fma(_2421, cbModelParam._m0[19u].y, _2420 * cbModelParam._m0[19u].x))), _1575);
            frontier_phi_25_50_ladder = _2544.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2544.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2544.x * cbModelParam._m0[1u].z;
        }
        _1668 = frontier_phi_25_50_ladder_2;
        _1670 = frontier_phi_25_50_ladder_1;
        _1672 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_641, _642, _643), _1575);
        _1668 = _1652.x * cbModelParam._m0[1u].z;
        _1670 = _1652.y * cbModelParam._m0[1u].z;
        _1672 = _1652.z * cbModelParam._m0[1u].z;
    }
    float _1685 = (((_668 * _618) + _669) * _633) * ((cbModelParam._m0[1u].w * (_1668 - _1566)) + _1566);
    float _1687 = (((_668 * _620) + _669) * _633) * ((cbModelParam._m0[1u].w * (_1670 - _1568)) + _1568);
    float _1689 = (((_668 * _621) + _669) * _633) * ((cbModelParam._m0[1u].w * (_1672 - _1570)) + _1570);
    float _1692 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1685 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1685 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, _1685 * cbSceneParam._m0[91u].x));
    float _1732 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1736 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1740 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1744 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1745 = _1732 / _1744;
    float _1746 = _1736 / _1744;
    float _1747 = _1740 / _1744;
    float _1894;
    float _1895;
    float _1896;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1774 = ((uint(_1747 > cbSceneParam._m0[59u].y) + uint(_1747 > cbSceneParam._m0[59u].x)) + uint(_1747 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1775 = _1774 + 43u;
        uint _1783 = _1774 + 44u;
        uint _1791 = _1774 + 45u;
        uint _1799 = _1774 + 46u;
        float _1810 = fma(_1744, cbSceneParam._m0[_1775].w, fma(_1740, cbSceneParam._m0[_1775].z, fma(_1736, cbSceneParam._m0[_1775].y, _1732 * cbSceneParam._m0[_1775].x)));
        float _1814 = fma(_1744, cbSceneParam._m0[_1783].w, fma(_1740, cbSceneParam._m0[_1783].z, fma(_1736, cbSceneParam._m0[_1783].y, _1732 * cbSceneParam._m0[_1783].x)));
        float _1822 = fma(_1744, cbSceneParam._m0[_1799].w, fma(_1740, cbSceneParam._m0[_1799].z, fma(_1736, cbSceneParam._m0[_1799].y, _1732 * cbSceneParam._m0[_1799].x)));
        float _1827 = cbSceneParam._m0[33u].z * _1822;
        float _1829 = cbSceneParam._m0[33u].w * _1822;
        float _1832 = fma(_1744, cbSceneParam._m0[_1791].w, fma(_1740, cbSceneParam._m0[_1791].z, fma(_1736, cbSceneParam._m0[_1791].y, _1732 * cbSceneParam._m0[_1791].x))) / _1822;
        float _1880 = (cbSceneParam._m0[33u].x - sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747))) * cbSceneParam._m0[33u].y;
        float _4219 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1887 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1827 + _1810) / _1822, (_1829 + _1814) / _1822), _1832), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1829 + _1810) / _1822, (_1814 - _1827) / _1822), _1832), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1810 - _1827) / _1822, (_1814 - _1829) / _1822), _1832), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1810 - _1829) / _1822, (_1827 + _1814) / _1822), _1832), 0.0)).x), vec4(0.25)));
        _1894 = 1.0 - (_1887 * cbSceneParam._m0[34u].x);
        _1895 = 1.0 - (_1887 * cbSceneParam._m0[34u].y);
        _1896 = 1.0 - (_1887 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1894 = 1.0;
        _1895 = 1.0;
        _1896 = 1.0;
    }
    float _1960;
    float _1962;
    float _1964;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1948 = fma(_1744, cbSceneParam._m0[63u].w, fma(_1740, cbSceneParam._m0[63u].z, fma(_1736, cbSceneParam._m0[63u].y, _1732 * cbSceneParam._m0[63u].x)));
        float _1949 = fma(_1744, cbSceneParam._m0[60u].w, fma(_1740, cbSceneParam._m0[60u].z, fma(_1736, cbSceneParam._m0[60u].y, _1732 * cbSceneParam._m0[60u].x))) / _1948;
        float _1950 = fma(_1744, cbSceneParam._m0[61u].w, fma(_1740, cbSceneParam._m0[61u].z, fma(_1736, cbSceneParam._m0[61u].y, _1732 * cbSceneParam._m0[61u].x))) / _1948;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1949 >= cbSceneParam._m0[64u].x) && (_1950 >= cbSceneParam._m0[64u].y)) && (_1949 <= cbSceneParam._m0[64u].z)) && (_1950 <= cbSceneParam._m0[64u].w))
        {
            float _2088 = fma(_1744, cbSceneParam._m0[62u].w, fma(_1740, cbSceneParam._m0[62u].z, fma(_1736, cbSceneParam._m0[62u].y, _1732 * cbSceneParam._m0[62u].x))) / _1948;
            float _2092 = isnan(cbSceneParam._m0[41u].w) ? _2088 : (isnan(_2088) ? cbSceneParam._m0[41u].w : max(_2088, cbSceneParam._m0[41u].w));
            float _2135 = (cbSceneParam._m0[33u].x - sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747))) * cbSceneParam._m0[33u].y;
            float _4235 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
            float _2142 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1949, cbSceneParam._m0[33u].w + _1950), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1949, _1950 - cbSceneParam._m0[33u].z), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1949 - cbSceneParam._m0[33u].z, _1950 - cbSceneParam._m0[33u].w), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1949 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1950), _2092), 0.0)).x), vec4(0.25)));
            float _2146 = 1.0 - (_2142 * cbSceneParam._m0[34u].x);
            float _2147 = 1.0 - (_2142 * cbSceneParam._m0[34u].y);
            float _2148 = 1.0 - (_2142 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2148) ? _1896 : (isnan(_1896) ? _2148 : min(_1896, _2148));
            frontier_phi_37_36_ladder_1 = isnan(_2147) ? _1895 : (isnan(_1895) ? _2147 : min(_1895, _2147));
            frontier_phi_37_36_ladder_2 = isnan(_2146) ? _1894 : (isnan(_1894) ? _2146 : min(_1894, _2146));
        }
        else
        {
            frontier_phi_37_36_ladder = _1896;
            frontier_phi_37_36_ladder_1 = _1895;
            frontier_phi_37_36_ladder_2 = _1894;
        }
        _1960 = frontier_phi_37_36_ladder_2;
        _1962 = frontier_phi_37_36_ladder_1;
        _1964 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1960 = _1894;
        _1962 = _1895;
        _1964 = _1896;
    }
    uvec4 _1969 = floatBitsToUint(cbInstanceData._m0[_593 + 5u]);
    uint _1971 = _1969.x * 14u;
    uint _1972 = _1971 + 13u;
    float _1979 = _633 + (-1.0);
    float _1984 = (cbLight._m0[_1972].x * _1979) + 1.0;
    float _1985 = (cbLight._m0[_1972].y * _1979) + 1.0;
    float _1986 = (cbLight._m0[_1972].z * _1979) + 1.0;
    float _1987 = (cbLight._m0[_1972].w * _1979) + 1.0;
    uint _1988 = _1971 + 5u;
    float _1994 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
    uint _1998 = _1971 + 4u;
    float _2007 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _2011 = _1971 | 1u;
    float _2022 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_452, _453, _454));
    float _2025 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_452, _453, _454));
    float _4271 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _4282 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2030 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.3183098733425140380859375;
    float _2032 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.3183098733425140380859375;
    float _2039 = ((cbLight._m0[_1988].x * _1994) * _2032) + (((cbLight._m0[_1998].x * _1960) * _2007) * _2030);
    float _2040 = ((_1994 * cbLight._m0[_1988].y) * _2032) + (((cbLight._m0[_1998].y * _1962) * _2007) * _2030);
    float _2041 = ((_1994 * cbLight._m0[_1988].z) * _2032) + (((cbLight._m0[_1998].z * _1964) * _2007) * _2030);
    uvec4 _2045 = floatBitsToUint(cbLight._m0[_1971 + 12u]);
    bool _2047 = _2045.x == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2047)
    {
        _2149 = _2039;
        _2151 = _2040;
        _2153 = _2041;
    }
    else
    {
        uint _2157 = _1971 + 6u;
        float _2173 = (dot(vec3(cbLight._m0[_1971 + 2u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _2174 = _2173 * _2173;
        float _4293 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2175 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2176 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2149 = (((cbLight._m0[_2157].x * 0.3183098733425140380859375) * _2175) * _2176) + _2039;
        _2151 = (((cbLight._m0[_2157].y * 0.3183098733425140380859375) * _2175) * _2176) + _2040;
        _2153 = (((cbLight._m0[_2157].z * 0.3183098733425140380859375) * _2175) * _2176) + _2041;
    }
    bool _2156 = _2045.y == 0u;
    float _2211;
    float _2213;
    float _2215;
    if (_2156)
    {
        _2211 = _2149;
        _2213 = _2151;
        _2215 = _2153;
    }
    else
    {
        uint _2384 = _1971 + 7u;
        float _2400 = (dot(vec3(cbLight._m0[_1971 + 3u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _2401 = _2400 * _2400;
        float _4309 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2402 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2403 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2211 = (((cbLight._m0[_2384].x * 0.3183098733425140380859375) * _2402) * _2403) + _2149;
        _2213 = (((cbLight._m0[_2384].y * 0.3183098733425140380859375) * _2402) * _2403) + _2151;
        _2215 = (((cbLight._m0[_2384].z * 0.3183098733425140380859375) * _2402) * _2403) + _2153;
    }
    uint _2218 = _1971 + 8u;
    float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _455) * 0.949999988079071044921875);
    float _2232 = _2231 * _2231;
    float _2233 = cbLight._m0[_1971].x + _533;
    float _2234 = cbLight._m0[_1971].y + _534;
    float _2235 = cbLight._m0[_1971].z + _535;
    float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
    float _2240 = _2239 * _2233;
    float _2241 = _2239 * _2234;
    float _2242 = _2239 * _2235;
    float _2243 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1971].xyz));
    float _4325 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _4336 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _2247 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2248 = dot(vec3(_452, _453, _454), vec3(_2240, _2241, _2242));
    float _4347 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2240, _2241, _2242));
    float _4358 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2232 * _2232;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2268 = exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0);
    float _2269 = 0.959999978542327880859375 - _615;
    float _2271 = 0.959999978542327880859375 - _616;
    float _2272 = 0.959999978542327880859375 - _617;
    float _2279 = 1.0 - _2232;
    float _2290 = (0.5 / (((_2247 * ((_2246 * _2279) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2279) + _2232) * _2246))) * _2246;
    float _4369 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    uint _2306 = _1971 + 9u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _455) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2011].x + _533;
    float _2320 = cbLight._m0[_2011].y + _534;
    float _2321 = cbLight._m0[_2011].z + _535;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2011].xyz));
    float _4380 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2333 = dot(vec3(_452, _453, _454), vec3(_2326, _2327, _2328));
    float _4391 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2326, _2327, _2328));
    float _4402 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2318 * _2318;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2352 = exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0);
    float _2359 = 1.0 - _2318;
    float _2369 = (0.5 / (((_2247 * ((_2332 * _2359) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2359) + _2318) * _2332))) * _2332;
    float _4413 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2371 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    float _2381 = (((((_2352 * _2269) + _618) * cbLight._m0[_2306].x) * _2371) * _1994) + ((((cbLight._m0[_2218].x * _1960) * ((_2268 * _2269) + _618)) * _2292) * _2007);
    float _2382 = (((((_2352 * _2271) + _620) * cbLight._m0[_2306].y) * _2371) * _1994) + ((((cbLight._m0[_2218].y * _1962) * ((_2268 * _2271) + _620)) * _2292) * _2007);
    float _2383 = (((((_2352 * _2272) + _621) * cbLight._m0[_2306].z) * _2371) * _1994) + ((((cbLight._m0[_2218].z * _1964) * ((_2268 * _2272) + _621)) * _2292) * _2007);
    float _2439;
    float _2441;
    float _2443;
    if (_2047)
    {
        _2439 = _2381;
        _2441 = _2382;
        _2443 = _2383;
    }
    else
    {
        uint _2445 = _1971 + 2u;
        uint _2449 = _1971 + 10u;
        float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _455) * 0.949999988079071044921875);
        float _2464 = _2463 * _2463;
        float _2465 = cbLight._m0[_2445].x + _533;
        float _2466 = cbLight._m0[_2445].y + _534;
        float _2467 = cbLight._m0[_2445].z + _535;
        float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
        float _2472 = _2471 * _2465;
        float _2473 = _2471 * _2466;
        float _2474 = _2471 * _2467;
        float _2475 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2445].xyz));
        float _4424 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2479 = dot(vec3(_452, _453, _454), vec3(_2472, _2473, _2474));
        float _4435 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2483 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2472, _2473, _2474));
        float _4446 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2487 = _2464 * _2464;
        float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
        float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) * 5.0);
        float _2505 = 1.0 - _2464;
        float _2515 = (0.5 / (((_2247 * ((_2478 * _2505) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2505) + _2464) * _2478))) * _2478;
        float _4457 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2517 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
        float _2518 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2439 = (((((_2498 * _2269) + _618) * cbLight._m0[_2449].x) * _2517) * _2518) + _2381;
        _2441 = (((((_2498 * _2271) + _620) * cbLight._m0[_2449].y) * _2517) * _2518) + _2382;
        _2443 = (((((_2498 * _2272) + _621) * cbLight._m0[_2449].z) * _2517) * _2518) + _2383;
    }
    float _2549;
    float _2551;
    float _2553;
    if (_2156)
    {
        _2549 = _2439;
        _2551 = _2441;
        _2553 = _2443;
    }
    else
    {
        uint _2560 = _1971 + 3u;
        uint _2564 = _1971 + 11u;
        float _2578 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2560].w)) * _455) * 0.949999988079071044921875);
        float _2579 = _2578 * _2578;
        float _2580 = cbLight._m0[_2560].x + _533;
        float _2581 = cbLight._m0[_2560].y + _534;
        float _2582 = cbLight._m0[_2560].z + _535;
        float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
        float _2587 = _2586 * _2580;
        float _2588 = _2586 * _2581;
        float _2589 = _2586 * _2582;
        float _2590 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2560].xyz));
        float _4473 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2594 = dot(vec3(_452, _453, _454), vec3(_2587, _2588, _2589));
        float _4484 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2598 = dot(vec3(cbLight._m0[_2560].xyz), vec3(_2587, _2588, _2589));
        float _4495 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2602 = _2579 * _2579;
        float _2606 = ((_2597 * _2597) * (_2602 + (-1.0))) + 1.0;
        float _2613 = exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0);
        float _2620 = 1.0 - _2579;
        float _2630 = (0.5 / (((_2247 * ((_2593 * _2620) + _2579)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2620) + _2579) * _2593))) * _2593;
        float _4506 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2632 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2602 / ((_2606 * _2606) * 3.141590118408203125));
        float _2633 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2549 = (((((_2613 * _2269) + _618) * cbLight._m0[_2564].x) * _2632) * _2633) + _2439;
        _2551 = (((((_2613 * _2271) + _620) * cbLight._m0[_2564].y) * _2632) * _2633) + _2441;
        _2553 = (((((_2613 * _2272) + _621) * cbLight._m0[_2564].z) * _2632) * _2633) + _2443;
    }
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    if (_1969.y == 0u)
    {
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.x;
        uint _2666 = uint((float(_2654.y) * floor(float(uint(cbSceneParam._m0[85u].y * _555) / _2655))) + floor(float(uint(cbSceneParam._m0[85u].x * _554) / _2655)));
        float _2676 = (log2(_1747 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2677 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        uint _2680 = uint(isnan(14.0) ? _2677 : (isnan(_2677) ? 14.0 : min(_2677, 14.0)));
        uvec4 _2685 = texelFetch(g_lightClusterGridBuffer, int(((_2680 << 2u) + (_2666 << 6u)) >> 2u));
        uint _2686 = _2685.x;
        uint _2687 = _2654.z;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        if (((((1u << ((_2687 >> 4u) & 15u)) + 4294967295u) & _2686) == 0u) || ((_2687 & 240u) == 0u))
        {
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
        }
        else
        {
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            uint _2925 = 0u;
            uint _2934;
            bool _2935;
            for (;;)
            {
                _2934 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_2925 << 2u)) >> 2u)).x;
                _2935 = _2934 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2935)
                {
                    frontier_phi_71_pred = _2924;
                    frontier_phi_71_pred_1 = _2923;
                    frontier_phi_71_pred_2 = _2922;
                    frontier_phi_71_pred_3 = _2921;
                    frontier_phi_71_pred_4 = _2920;
                    frontier_phi_71_pred_5 = _2919;
                }
                else
                {
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    uint _3070;
                    _3064 = _2919;
                    _3065 = _2920;
                    _3066 = _2921;
                    _3067 = _2922;
                    _3068 = _2923;
                    _3069 = _2924;
                    _3070 = _2934;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    for (;;)
                    {
                        uint _3074 = uint(findLSB(_3070)) + (_2925 << 5u);
                        uint _3071 = (_3070 + 4294967295u) & _3070;
                        uint _3076 = _3074 * 48u;
                        vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 3u)).x));
                        uint _3096 = (_3074 * 48u) + 4u;
                        vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 3u)).x));
                        uint _3115 = (_3074 * 48u) + 8u;
                        vec3 _3126 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x));
                        float _3130 = _3090.x - _1745;
                        float _3131 = _3090.y - _1746;
                        float _3132 = _3090.z - _1747;
                        float _3133 = dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132));
                        float _3136 = inversesqrt(_3133);
                        float _3137 = _3136 * _3130;
                        float _3138 = _3136 * _3131;
                        float _3139 = _3136 * _3132;
                        float _3140 = dot(vec3(_574, _577, _580), vec3(_3137, _3138, _3139));
                        float _3145 = 1.0 - (_3133 * _3090.w);
                        float _4532 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3146 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3147 = sqrt(_3133) * _3109.w;
                        float _3150 = 1.39999997615814208984375 / (_3147 + 1.39999997615814208984375);
                        float _3151 = _3150 * _3150;
                        float _3154 = ((1.0 - _3151) * _3140) + _3151;
                        float _3157 = _3147 * _3147;
                        float _3161 = ((isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))) * _3146) / ((_3157 * 0.699999988079071044921875) + 1.0);
                        float _3165 = (-0.0) - _1745;
                        float _3166 = (-0.0) - _1746;
                        float _3167 = (-0.0) - _1747;
                        float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
                        float _3172 = _3171 * _3165;
                        float _3173 = _3171 * _3166;
                        float _3174 = _3171 * _3167;
                        float _3181 = exp2(log2(1.0 / ((_3157 * 3.5) + 5.0)) * 0.25);
                        float _3182 = 1.0 - _649;
                        float _3189 = sqrt(1.0 - ((1.0 - (_3182 * _3182)) * (1.0 - (_3181 * _3181))));
                        float _3190 = _3189 * _3189;
                        float _3191 = _3190 * _3190;
                        float _3192 = _3172 + _3137;
                        float _3193 = _3173 + _3138;
                        float _3194 = _3174 + _3139;
                        float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
                        float _3202 = dot(vec3(_574, _577, _580), vec3(_3172, _3173, _3174));
                        float _4548 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3205 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3206 = dot(vec3(_574, _577, _580), vec3(_3198 * _3192, _3198 * _3193, _3198 * _3194));
                        float _4559 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3209 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3213 = ((_3209 * _3209) * (_3191 + (-1.0))) + 1.0;
                        float _3214 = _3150 * _3190;
                        float _3215 = _3214 * _3214;
                        float _3218 = ((1.0 - _3215) * _3140) + _3215;
                        float _4570 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3219 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3220 = 1.0 - _3190;
                        float _3230 = (0.5 / (((_3219 * ((_3205 * _3220) + _3190)) + 9.9999999392252902907785028219223e-09) + (((_3219 * _3220) + _3190) * _3205))) * _3219;
                        float _4581 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3241 = (((_3191 * 3.1415927410125732421875) * (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) / ((_3213 * _3213) * ((_3157 * 2.1991131305694580078125) + 3.141590118408203125))) * _3146;
                        _2994 = (_3161 * _3109.x) + _3067;
                        _2995 = (_3161 * _3109.y) + _3068;
                        _2996 = (_3161 * _3109.z) + _3069;
                        _2991 = (_3241 * _3126.x) + _3064;
                        _2992 = (_3241 * _3126.y) + _3065;
                        _2993 = (_3241 * _3126.z) + _3066;
                        if (_3071 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3064 = _2991;
                            _3065 = _2992;
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _2995;
                            _3069 = _2996;
                            _3070 = _3071;
                        }
                    }
                    frontier_phi_71_pred = _2996;
                    frontier_phi_71_pred_1 = _2995;
                    frontier_phi_71_pred_2 = _2994;
                    frontier_phi_71_pred_3 = _2993;
                    frontier_phi_71_pred_4 = _2992;
                    frontier_phi_71_pred_5 = _2991;
                }
                _2777 = frontier_phi_71_pred;
                _2775 = frontier_phi_71_pred_1;
                _2773 = frontier_phi_71_pred_2;
                _2771 = frontier_phi_71_pred_3;
                _2769 = frontier_phi_71_pred_4;
                _2767 = frontier_phi_71_pred_5;
                uint _2926 = _2925 + 1u;
                if (_2926 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2919 = _2767;
                    _2920 = _2769;
                    _2921 = _2771;
                    _2922 = _2773;
                    _2923 = _2775;
                    _2924 = _2777;
                    _2925 = _2926;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
        }
        uvec4 _2780 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2781 = _2780.z;
        uint _2783 = (_2781 >> 8u) & 15u;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        if (((4294967295u << _2783) & _2686) == 0u)
        {
            _2887 = _2766;
            _2889 = _2768;
            _2891 = _2770;
            _2893 = _2772;
            _2895 = _2774;
            _2897 = _2776;
        }
        else
        {
            float _2912 = inversesqrt(dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747)));
            float _2913 = _2912 * _1745;
            float _2914 = _2912 * _1746;
            float _2915 = _2912 * _1747;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2783 < ((_2781 >> 12u) & 15u))
            {
                float _2888;
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _3047 = _2766;
                float _3048 = _2768;
                float _3049 = _2770;
                float _3050 = _2772;
                float _3051 = _2774;
                float _3052 = _2776;
                uint _3053 = _2783;
                uint _3062;
                bool _3063;
                for (;;)
                {
                    _3062 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_3053 << 2u)) >> 2u)).x;
                    _3063 = _3062 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3063)
                    {
                        frontier_phi_82_pred = _3052;
                        frontier_phi_82_pred_1 = _3051;
                        frontier_phi_82_pred_2 = _3050;
                        frontier_phi_82_pred_3 = _3049;
                        frontier_phi_82_pred_4 = _3048;
                        frontier_phi_82_pred_5 = _3047;
                    }
                    else
                    {
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3268 = _3047;
                        float _3269 = _3048;
                        float _3270 = _3049;
                        float _3271 = _3050;
                        float _3272 = _3051;
                        float _3273 = _3052;
                        uint _3274 = _3062;
                        uint _3275;
                        vec4 _3300;
                        float _3301;
                        vec4 _3316;
                        vec3 _3328;
                        vec4 _3344;
                        vec4 _3360;
                        float _3407;
                        bool _3408;
                        for (;;)
                        {
                            uint _3285 = ((_3053 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3274));
                            _3275 = (_3274 + 4294967295u) & _3274;
                            uint _3287 = _3285 * 40u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            _3301 = _3300.w;
                            uint _3303 = (_3285 * 40u) + 4u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3318 = (_3285 * 40u) + 8u;
                            _3328 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x));
                            uint _3331 = (_3285 * 40u) + 16u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3347 = (_3285 * 40u) + 20u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3363 = (_3285 * 40u) + 24u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3382 = (_3285 * 40u) + 28u;
                            vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3407 = fma(_1747, _3395.z, fma(_1746, _3395.y, _3395.x * _1745)) + _3395.w;
                            _3408 = !((fma(_1747, _3376.z, fma(_1746, _3376.y, _3376.x * _1745)) + _3376.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3408)
                            {
                                float _3435 = _3300.x - _1745;
                                float _3436 = _3300.y - _1746;
                                float _3437 = _3300.z - _1747;
                                float _3438 = dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437));
                                float _3441 = inversesqrt(_3438);
                                float _3442 = _3441 * _3435;
                                float _3443 = _3441 * _3436;
                                float _3444 = _3441 * _3437;
                                float _3448 = 1.0 - (_3438 / (_3301 * _3301));
                                float _4592 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3453 = sqrt(_3438) * _3316.w;
                                float _3455 = 1.39999997615814208984375 / (_3453 + 1.39999997615814208984375);
                                float _3456 = _3455 * _3455;
                                float _3459 = ((1.0 - _3456) * dot(vec3(_3442, _3443, _3444), vec3(_574, _577, _580))) + _3456;
                                float _3462 = _3453 * _3453;
                                float _3466 = (fma(_1747, _3344.z, fma(_1746, _3344.y, _3344.x * _1745)) + _3344.w) / _3407;
                                float _3467 = (fma(_1747, _3360.z, fma(_1746, _3360.y, _3360.x * _1745)) + _3360.w) / _3407;
                                float _3471 = 1.0 - dot(vec2(_3466, _3467), vec2(_3466, _3467));
                                float _4608 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3473 = _3472 * (((isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0))) * _3449) / ((_3462 * 0.699999988079071044921875) + 1.0));
                                float _3485 = exp2(log2(1.0 / ((_3462 * 3.5) + 5.0)) * 0.25);
                                float _3486 = 1.0 - _649;
                                float _3493 = sqrt(1.0 - ((1.0 - (_3486 * _3486)) * (1.0 - (_3485 * _3485))));
                                float _3494 = _3493 * _3493;
                                float _3495 = _3494 * _3494;
                                float _3496 = _3442 - _2913;
                                float _3497 = _3443 - _2914;
                                float _3498 = _3444 - _2915;
                                float _3502 = inversesqrt(dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498)));
                                float _3506 = dot(vec3(_574, _577, _580), vec3((-0.0) - _2913, (-0.0) - _2914, (-0.0) - _2915));
                                float _4619 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3509 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3510 = dot(vec3(_574, _577, _580), vec3(_3502 * _3496, _3502 * _3497, _3502 * _3498));
                                float _4630 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3513 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3517 = ((_3513 * _3513) * (_3495 + (-1.0))) + 1.0;
                                float _3518 = _3455 * _3494;
                                float _3519 = _3518 * _3518;
                                float _3525 = ((1.0 - _3519) * dot(vec3(_574, _577, _580), vec3(_3442, _3443, _3444))) + _3519;
                                float _4641 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3527 = 1.0 - _3494;
                                float _3537 = (0.5 / (((_3526 * ((_3509 * _3527) + _3494)) + 9.9999999392252902907785028219223e-09) + (((_3526 * _3527) + _3494) * _3509))) * _3526;
                                float _4652 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3547 = (_3472 * _3449) * (((_3495 * 3.1415927410125732421875) * (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) / ((_3517 * _3517) * ((_3462 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3473 * _3316.z;
                                frontier_phi_88_pred_1 = _3473 * _3316.y;
                                frontier_phi_88_pred_2 = _3473 * _3316.x;
                                frontier_phi_88_pred_3 = _3547 * _3328.z;
                                frontier_phi_88_pred_4 = _3547 * _3328.y;
                                frontier_phi_88_pred_5 = _3547 * _3328.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3556 = frontier_phi_88_pred;
                            _3555 = frontier_phi_88_pred_1;
                            _3554 = frontier_phi_88_pred_2;
                            _3553 = frontier_phi_88_pred_3;
                            _3552 = frontier_phi_88_pred_4;
                            _3551 = frontier_phi_88_pred_5;
                            _3258 = _3554 + _3271;
                            _3259 = _3555 + _3272;
                            _3260 = _3556 + _3273;
                            _3255 = _3551 + _3268;
                            _3256 = _3552 + _3269;
                            _3257 = _3553 + _3270;
                            if (_3275 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3275;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3260;
                        frontier_phi_82_pred_1 = _3259;
                        frontier_phi_82_pred_2 = _3258;
                        frontier_phi_82_pred_3 = _3257;
                        frontier_phi_82_pred_4 = _3256;
                        frontier_phi_82_pred_5 = _3255;
                    }
                    _2898 = frontier_phi_82_pred;
                    _2896 = frontier_phi_82_pred_1;
                    _2894 = frontier_phi_82_pred_2;
                    _2892 = frontier_phi_82_pred_3;
                    _2890 = frontier_phi_82_pred_4;
                    _2888 = frontier_phi_82_pred_5;
                    uint _3054 = _3053 + 1u;
                    if (_3054 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3047 = _2888;
                        _3048 = _2890;
                        _3049 = _2892;
                        _3050 = _2894;
                        _3051 = _2896;
                        _3052 = _2898;
                        _3053 = _3054;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2894;
                frontier_phi_63_64_ladder_1 = _2898;
                frontier_phi_63_64_ladder_2 = _2896;
                frontier_phi_63_64_ladder_3 = _2892;
                frontier_phi_63_64_ladder_4 = _2890;
                frontier_phi_63_64_ladder_5 = _2888;
            }
            else
            {
                frontier_phi_63_64_ladder = _2772;
                frontier_phi_63_64_ladder_1 = _2776;
                frontier_phi_63_64_ladder_2 = _2774;
                frontier_phi_63_64_ladder_3 = _2770;
                frontier_phi_63_64_ladder_4 = _2768;
                frontier_phi_63_64_ladder_5 = _2766;
            }
            _2887 = frontier_phi_63_64_ladder_5;
            _2889 = frontier_phi_63_64_ladder_4;
            _2891 = frontier_phi_63_64_ladder_3;
            _2893 = frontier_phi_63_64_ladder;
            _2895 = frontier_phi_63_64_ladder_2;
            _2897 = frontier_phi_63_64_ladder_1;
        }
        float _2902 = isnan(1.0) ? _633 : (isnan(_633) ? 1.0 : min(_633, 1.0));
        _2699 = (_2902 * _2893) + _2211;
        _2701 = (_2902 * _2895) + _2213;
        _2703 = (_2902 * _2897) + _2215;
        _2705 = ((_2887 * _618) * _2902) + _2549;
        _2707 = ((_2889 * _620) * _2902) + _2551;
        _2709 = ((_2891 * _621) * _2902) + _2553;
    }
    else
    {
        _2699 = _2211;
        _2701 = _2213;
        _2703 = _2215;
        _2705 = _2549;
        _2707 = _2551;
        _2709 = _2553;
    }
    float _4668 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4679 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4690 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _2726 = ((isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2699 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _633))) + ((_2705 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1475)) * cbPerFrame._m0[3u].x);
    float _2727 = ((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2701 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _633))) + ((_2707 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1475)) * cbPerFrame._m0[3u].x);
    float _2728 = ((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2703 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _633))) + ((_2709 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1475)) * cbPerFrame._m0[3u].x);
    uint _2729 = _593 + 6u;
    float _2737 = _554 / cbSceneParam._m0[86u].x;
    float _2738 = _555 / cbSceneParam._m0[86u].y;
    vec4 _2752 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, (log2((isnan(cbSceneParam._m0[77u].w) ? _475 : (isnan(_475) ? cbSceneParam._m0[77u].w : min(_475, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2754 = _2752.x;
    float _2755 = _2752.y;
    float _2756 = _2752.z;
    float _2757 = _2752.w;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    if (_475 > cbSceneParam._m0[78u].w)
    {
        float _2791 = isnan(_475) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _475 : min(cbSceneParam._m0[80u].w, _475));
        float _2792 = _2791 / _475;
        float _2803 = _2792 * _526;
        float _2804 = _527 * _2792;
        float _2805 = (-0.0) - _2804;
        float _2807 = _2792 * _528;
        float _2809 = (cbSceneParam._m0[77u].w * _2805) / _2791;
        float _2810 = _2809 + cbSceneParam._m0[79u].w;
        float _2811 = cbSceneParam._m0[79u].w - _2804;
        float _2817 = sqrt(((_2803 * _2803) + (_2804 * _2804)) + (_2807 * _2807));
        float _2820 = (1.0 - (cbSceneParam._m0[77u].w / _2791)) * _2817;
        float _2825 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2827 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3004;
        if (abs((_2805 - _2809) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3004 = ((((_2810 > 0.0) ? exp2(_2825 * _2810) : (2.0 - exp2(_2827 * _2810))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2820;
        }
        else
        {
            float _2948 = 1.0 / cbSceneParam._m0[80u].x;
            float _2949 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : max(_2810, _2811));
            float _2950 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : min(_2810, _2811));
            float _2959 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : min(_2949, 0.0));
            float _2960 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : min(_2950, 0.0));
            _3004 = ((abs(_2817 / _2805) * cbSceneParam._m0[80u].y) * ((((_2959 - _2960) * 2.0) - ((exp2(_2825 * (isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0)))) - exp2(_2825 * (isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0))))) * _2948)) - ((exp2(_2827 * _2959) - exp2(_2827 * _2960)) * _2948))) + (_2820 * cbSceneParam._m0[80u].z);
        }
        vec4 _3006 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, 1.0), 0.0);
        float _3015 = exp2((_3004 * (-1.44269502162933349609375)) * (1.0 - _3006.w));
        float _3016 = log2(_3015);
        float _3032 = log2(_2757);
        _2829 = (exp2(_3032 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].x)) * _3006.x) / cbSceneParam._m0[78u].x)) + _2754;
        _2831 = (exp2(_3032 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].y)) * _3006.y) / cbSceneParam._m0[78u].y)) + _2755;
        _2833 = (exp2(_3032 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].z)) * _3006.z) / cbSceneParam._m0[78u].z)) + _2756;
        _2835 = _3015 * _2757;
    }
    else
    {
        _2829 = _2754;
        _2831 = _2755;
        _2833 = _2756;
        _2835 = _2757;
    }
    bool _3042;
    vec4 _2845;
    vec4 _2867;
    float _2869;
    float _2873;
    float _2874;
    float _2875;
    float _2876;
    bool _2886;
    for (;;)
    {
        _2845 = cbMatDynParam._m0[0u];
        float _2847 = roundEven(_2845.y);
        bool _2848 = _2847 == 3.0;
        float _2849 = log2(_2835);
        float _2856 = exp2(_2849 * cbSceneParam._m0[78u].x) * _2726;
        float _2857 = exp2(_2849 * cbSceneParam._m0[78u].y) * _2727;
        float _2858 = exp2(_2849 * cbSceneParam._m0[78u].z) * _2728;
        float _2865 = _542 + (-0.5);
        _2867 = cbMtdParam._m0[1u];
        _2869 = _2867.y * _2865;
        float _2872 = (_2847 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2873 = _2872 * (_2848 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2829)));
        _2874 = _2872 * (_2848 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2831)));
        _2875 = _2872 * (_2848 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2833)));
        _2876 = _2865 * 0.999000012874603271484375;
        _2886 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2886)
        {
            if ((cbInstanceData._m0[_593 + 7u].x + _2876) < 0.5)
            {
                _3042 = true;
                break;
            }
        }
        uint _2983 = _594 + uint(_2845.w);
        if ((cbInstanceData._m0[_2983].w < 1.0) && ((cbInstanceData._m0[_2983].w + _2876) < 0.5))
        {
            _3042 = true;
            break;
        }
        if ((_2869 + 1.0) < _2867.x)
        {
            _3042 = true;
            break;
        }
        _3042 = false;
        break;
    }
    float _3246;
    if (_3042)
    {
        discard_state = true;
        _3246 = 0.0;
    }
    else
    {
        _3246 = cbInstanceData._m0[_2729].w;
    }
    SV_Target.x = _2873;
    SV_Target.y = _2874;
    SV_Target.z = _2875;
    SV_Target.w = _3246;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2729].w;
    discard_exit();
}


