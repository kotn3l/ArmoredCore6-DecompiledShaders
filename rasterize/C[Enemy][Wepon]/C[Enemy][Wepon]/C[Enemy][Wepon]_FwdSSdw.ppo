#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_24;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_Wepon_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _990;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _232 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _232.z;
    float _245 = exp2(log2(_237 * cbMtdParam._m0[13u].x) * cbMtdParam._m0[12u].y);
    float _246 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _247 = isnan(1.0) ? _246 : (isnan(_246) ? 1.0 : min(_246, 1.0));
    float _267 = ((cbMtdParam._m0[10u].x - cbMtdParam._m0[9u].x) * _247) + cbMtdParam._m0[9u].x;
    float _268 = ((cbMtdParam._m0[10u].y - cbMtdParam._m0[9u].y) * _247) + cbMtdParam._m0[9u].y;
    float _269 = ((cbMtdParam._m0[10u].z - cbMtdParam._m0[9u].z) * _247) + cbMtdParam._m0[9u].z;
    float _287 = exp2(log2(texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w)).x) * cbMtdParam._m0[13u].y);
    vec4 _309 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _316 = (((_287 * (cbMtdParam._m0[11u].x - _267)) + _267) * 4.55000019073486328125) * _309.x;
    float _318 = (((_287 * (cbMtdParam._m0[11u].y - _268)) + _268) * 4.55000019073486328125) * _309.y;
    float _320 = (((_287 * (cbMtdParam._m0[11u].z - _269)) + _269) * 4.55000019073486328125) * _309.z;
    float _329 = ((cbMtdParam._m0[14u].y - cbMtdParam._m0[12u].z) * _247) + cbMtdParam._m0[12u].z;
    float _332 = ((cbMtdParam._m0[12u].w - _329) * _287) + _329;
    vec4 _345 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _363 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _365 = _363.x;
    float _366 = _363.y;
    float _369 = cbMtdParam._m0[12u].x + _363.z;
    float _372 = (((cbMtdParam._m0[14u].x + _345.z) - _369) * _247) + _369;
    vec4 _385 = texture(sampler2D(C_Enemy_Wepon_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _394 = (((_385.z - _372) + cbMtdParam._m0[14u].z) * _287) + _372;
    float _400 = ((((_237 * 2.0) * _394) - _394) * cbMtdParam._m0[13u].z) + _394;
    float _411 = ((_345.x - _365) * _247) + _365;
    float _412 = ((_345.y - _366) * _247) + _366;
    float _421 = ((((_385.x - _411) * _287) + _411) * 2.0) + (-1.0);
    float _422 = ((((_385.y - _412) * _287) + _412) * 2.0) + (-1.0);
    float _423 = dot(vec2(_421, _422), vec2(_421, _422));
    float _3357 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _428 = sqrt(1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))));
    float _431 = _421 + (cbMtdParam._m0[13u].w * ((_232.x * 2.0) + (-1.0)));
    float _432 = _422 + (cbMtdParam._m0[13u].w * ((_232.y * 2.0) + (-1.0)));
    float _435 = fma(_428, _198 * NORMAL.x, fma(_432, _205 * TANGENT.x, (_191 * _184) * _431));
    float _438 = fma(_428, _198 * NORMAL.y, fma(_432, _205 * TANGENT.y, (_191 * _185) * _431));
    float _441 = fma(_428, _198 * NORMAL.z, fma(_432, _205 * TANGENT.z, (_191 * _186) * _431));
    float _445 = inversesqrt(dot(vec3(_435, _438, _441), vec3(_435, _438, _441)));
    float _446 = _445 * _435;
    float _447 = _445 * _438;
    float _448 = _445 * _441;
    float _3368 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _449 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _3379 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3390 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3401 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3412 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _453 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _469 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _520 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _510);
    float _521 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _510);
    float _522 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _510);
    float _526 = inversesqrt(dot(vec3(_520, _521, _522), vec3(_520, _521, _522)));
    float _527 = _520 * _526;
    float _528 = _521 * _526;
    float _529 = _522 * _526;
    float _535 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _536 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _556 = fma(_448, cbSceneParam._m0[5u].z, fma(_447, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _446));
    float _559 = fma(_448, cbSceneParam._m0[6u].z, fma(_447, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _446));
    float _562 = fma(_448, cbSceneParam._m0[7u].z, fma(_447, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _446));
    uint _575 = uint(roundEven(NORMAL.w)) * 13u;
    uint _577 = (_575 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _583 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_577].x;
    float _584 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * cbInstanceData._m0[_577].y;
    float _585 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * cbInstanceData._m0[_577].z;
    float _3423 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _3445 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _589 = 1.0 - _453;
    float _590 = _586 * _589;
    float _591 = _587 * _589;
    float _592 = _588 * _589;
    float _597 = (_586 + (-0.039999999105930328369140625)) * _453;
    float _598 = (_587 + (-0.039999999105930328369140625)) * _453;
    float _599 = (_588 + (-0.039999999105930328369140625)) * _453;
    float _600 = _597 + 0.039999999105930328369140625;
    float _602 = _598 + 0.039999999105930328369140625;
    float _603 = _599 + 0.039999999105930328369140625;
    vec4 _612 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _535, cbSceneParam._m0[86u].y * _536));
    float _615 = _612.x * TEXCOORD.z;
    float _616 = dot(vec3(_446, _447, _448), vec3(_527, _528, _529));
    float _619 = _616 * 2.0;
    float _623 = (_619 * _446) - _527;
    float _624 = (_619 * _447) - _528;
    float _625 = (_619 * _448) - _529;
    float _629 = abs(dot(vec3(_527, _528, _529), vec3(_446, _447, _448)));
    float _3456 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _631 = sqrt(_449);
    float _644 = exp2((_631 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_631 * 3.0));
    float _650 = (1.0 - _644) * ((_631 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _651 = _644 * _631;
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _989;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _714 = fma(_687, cbModelParam._m0[26u].z, fma(_683, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _679));
        float _718 = fma(_687, cbModelParam._m0[27u].z, fma(_683, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _679));
        float _722 = fma(_687, cbModelParam._m0[28u].z, fma(_683, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _679));
        float _747 = _679 + _446;
        float _748 = _683 + _447;
        float _749 = _687 + _448;
        float _759 = fma(_749, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747)) - _714;
        float _760 = fma(_749, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747)) - _718;
        float _761 = fma(_749, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747)) - _722;
        float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
        float _778 = ((_765 * _759) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_714 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _779 = ((_765 * _760) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_718 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _780 = ((_765 * _761) / cbModelParam._m0[34u].z) + ((((((_722 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        float _817 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_783.x + (-0.5));
        float _819 = _817 * (_783.y + (-0.5));
        float _820 = _817 * (_783.z + (-0.5));
        float _827 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_790.x + (-0.5));
        float _829 = _827 * (_790.y + (-0.5));
        float _830 = _827 * (_790.z + (-0.5));
        float _837 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_797.x + (-0.5));
        float _839 = _837 * (_797.y + (-0.5));
        float _840 = _837 * (_797.z + (-0.5));
        float _847 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_804.x + (-0.5));
        float _849 = _847 * (_804.y + (-0.5));
        float _850 = _847 * (_804.z + (-0.5));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = _818 * 0.5;
        float _855 = _828 * 0.5;
        float _856 = _838 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _871 = (dot(vec3(_446, _447, _448), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _881 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3504 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_883 + 1.0))) + _888) * _851;
        float _898 = _819 * 0.5;
        float _899 = _829 * 0.5;
        float _900 = _839 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_446, _447, _448), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3537 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_925 + 1.0))) + _930) * _852;
        float _940 = _820 * 0.5;
        float _941 = _830 * 0.5;
        float _942 = _840 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_446, _447, _448), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3570 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_967 + 1.0))) + _972) * _853;
        _989 = _820;
        _991 = _819;
        _992 = _818;
        _993 = _830;
        _994 = _829;
        _995 = _828;
        _996 = _840;
        _997 = _839;
        _998 = _838;
        _999 = _853;
        _1000 = _852;
        _1001 = _851;
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
    }
    else
    {
        _989 = _990;
        _991 = _990;
        _992 = _990;
        _993 = _990;
        _994 = _990;
        _995 = _990;
        _996 = _990;
        _997 = _990;
        _998 = _990;
        _999 = _990;
        _1000 = _990;
        _1001 = _990;
        _1002 = 0.0;
        _1003 = 0.0;
        _1004 = 0.0;
    }
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1030 = fma(_687, cbModelParam._m0[30u].z, fma(_683, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _679));
        float _1034 = fma(_687, cbModelParam._m0[31u].z, fma(_683, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _679));
        float _1038 = fma(_687, cbModelParam._m0[32u].z, fma(_683, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _679));
        float _1061 = _679 + _446;
        float _1062 = _683 + _447;
        float _1063 = _687 + _448;
        float _1073 = fma(_1063, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061)) - _1030;
        float _1074 = fma(_1063, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061)) - _1034;
        float _1075 = fma(_1063, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061)) - _1038;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1030 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1034 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[35u].z) + ((((((_1038 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1129 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1096.x + (-0.5));
        float _1131 = _1129 * (_1096.y + (-0.5));
        float _1132 = _1129 * (_1096.z + (-0.5));
        float _1139 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1103.x + (-0.5));
        float _1141 = _1139 * (_1103.y + (-0.5));
        float _1142 = _1139 * (_1103.z + (-0.5));
        float _1149 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1110.x + (-0.5));
        float _1151 = _1149 * (_1110.y + (-0.5));
        float _1152 = _1149 * (_1110.z + (-0.5));
        float _1159 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1117.x + (-0.5));
        float _1161 = _1159 * (_1117.y + (-0.5));
        float _1162 = _1159 * (_1117.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_446, _447, _448), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3633 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1193 + 1.0))) + _1198) * _1163;
        float _1208 = _1131 * 0.5;
        float _1209 = _1141 * 0.5;
        float _1210 = _1151 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_446, _447, _448), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3666 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1235 + 1.0))) + _1240) * _1164;
        float _1250 = _1132 * 0.5;
        float _1251 = _1142 * 0.5;
        float _1252 = _1152 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_446, _447, _448), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3699 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1277 + 1.0))) + _1282) * _1165;
        _1299 = _1132;
        _1300 = _1131;
        _1301 = _1130;
        _1302 = _1142;
        _1303 = _1141;
        _1304 = _1140;
        _1305 = _1152;
        _1306 = _1151;
        _1307 = _1150;
        _1308 = _1165;
        _1309 = _1164;
        _1310 = _1163;
        _1311 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1312 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1313 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
    }
    else
    {
        _1299 = _990;
        _1300 = _990;
        _1301 = _990;
        _1302 = _990;
        _1303 = _990;
        _1304 = _990;
        _1305 = _990;
        _1306 = _990;
        _1307 = _990;
        _1308 = _990;
        _1309 = _990;
        _1310 = _990;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1323 = (cbModelParam._m0[1u].x * (_1311 - _1002)) + _1002;
    float _1324 = (cbModelParam._m0[1u].x * (_1312 - _1003)) + _1003;
    float _1325 = (cbModelParam._m0[1u].x * (_1313 - _1004)) + _1004;
    float _1346 = fma(_1325, cbSceneParam._m0[89u].z, fma(_1324, cbSceneParam._m0[89u].y, _1323 * cbSceneParam._m0[89u].x));
    float _1349 = fma(_1325, cbSceneParam._m0[90u].z, fma(_1324, cbSceneParam._m0[90u].y, _1323 * cbSceneParam._m0[90u].x));
    float _1352 = fma(_1325, cbSceneParam._m0[91u].z, fma(_1324, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1323));
    float _1367 = _623 * 0.5;
    float _1368 = _624 * 0.5;
    float _1369 = _625 * 0.5;
    float _1370 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1301, _1304, _1307, _1310));
    float _1373 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1300, _1303, _1306, _1309));
    float _1376 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1299, _1302, _1305, _1308));
    float _1410;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1383 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_989, _993, _996, _999));
        float _1387 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_991, _994, _997, _1000));
        float _1391 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_992, _995, _998, _1001));
        float _1398 = dot(vec4(cbModelParam._m0[39u]), vec4(_1367, _1368, _1369, 1.0));
        _1410 = dot(vec3(isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1398) ? 0.0 : (isnan(0.0) ? _1398 : max(0.0, _1398))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1410 = 1.0;
    }
    float _1421;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1412 = dot(vec4(cbModelParam._m0[40u]), vec4(_1367, _1368, _1369, 1.0));
        _1421 = dot(vec3(isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1412) ? 0.0 : (isnan(0.0) ? _1412 : max(0.0, _1412))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1421 = 1.0;
    }
    float _1425 = (_1421 * cbModelParam._m0[1u].x) + (_1410 * (1.0 - cbModelParam._m0[1u].x));
    float _1435 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _449);
    float _1436 = isnan(_1435) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1435 : min(cbModelParam._m0[25u].z, _1435));
    float _1516;
    float _1518;
    float _1520;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1483 = fma(_687, cbModelParam._m0[13u].z, fma(_683, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _679)) + cbModelParam._m0[13u].w;
        float _1487 = fma(_687, cbModelParam._m0[14u].z, fma(_683, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _679)) + cbModelParam._m0[14u].w;
        float _1491 = fma(_687, cbModelParam._m0[15u].z, fma(_683, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _679)) + cbModelParam._m0[15u].w;
        float _1494 = fma(_625, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623));
        float _1497 = fma(_625, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623));
        float _1500 = fma(_625, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623));
        float _1528;
        if (_1494 > 0.0)
        {
            _1528 = abs((1.0 - _1483) / _1494);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1483 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1528 = frontier_phi_14_12_ladder;
        }
        float _1755;
        if (_1497 > 0.0)
        {
            _1755 = abs((1.0 - _1487) / _1497);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1487 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1755 = frontier_phi_23_19_ladder;
        }
        float _2012;
        if (_1500 > 0.0)
        {
            _2012 = abs((1.0 - _1491) / _1500);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1491 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2012 = frontier_phi_35_30_ladder;
        }
        float _2014 = isnan(_1755) ? _1528 : (isnan(_1528) ? _1755 : min(_1528, _1755));
        float _2015 = isnan(_2012) ? _2014 : (isnan(_2014) ? _2012 : min(_2014, _2012));
        float _2019 = (_2015 * _1494) + _1483;
        float _2020 = (_2015 * _1497) + _1487;
        float _2021 = (_2015 * _1500) + _1491;
        float _2022 = _2015 * 9.9999997473787516355514526367188e-05;
        float _2024 = (-1.0) - _2022;
        float _2026 = _2022 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2021 > _2026) || ((_2021 < _2024) || ((_2020 > _2026) || ((_2020 < _2024) || ((_2019 < _2024) || (_2019 > _2026))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2149 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2021, cbModelParam._m0[9u].z, fma(_2020, cbModelParam._m0[9u].y, _2019 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2021, cbModelParam._m0[10u].z, fma(_2020, cbModelParam._m0[10u].y, _2019 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2021, cbModelParam._m0[11u].z, fma(_2020, cbModelParam._m0[11u].y, _2019 * cbModelParam._m0[11u].x))), _1436);
            frontier_phi_13_35_ladder = _2149.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2149.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2149.x * cbModelParam._m0[1u].y;
        }
        _1516 = frontier_phi_13_35_ladder_2;
        _1518 = frontier_phi_13_35_ladder_1;
        _1520 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1504 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_623, _624, _625), _1436);
        _1516 = _1504.x * cbModelParam._m0[1u].y;
        _1518 = _1504.y * cbModelParam._m0[1u].y;
        _1520 = _1504.z * cbModelParam._m0[1u].y;
    }
    float _1524 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _449);
    float _1525 = isnan(_1524) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1524 : min(cbModelParam._m0[25u].w, _1524));
    float _1618;
    float _1620;
    float _1622;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1582 = fma(_687, cbModelParam._m0[21u].z, fma(_683, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _679)) + cbModelParam._m0[21u].w;
        float _1586 = fma(_687, cbModelParam._m0[22u].z, fma(_683, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _679)) + cbModelParam._m0[22u].w;
        float _1590 = fma(_687, cbModelParam._m0[23u].z, fma(_683, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _679)) + cbModelParam._m0[23u].w;
        float _1593 = fma(_625, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623));
        float _1596 = fma(_625, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623));
        float _1599 = fma(_625, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623));
        float _1760;
        if (_1593 > 0.0)
        {
            _1760 = abs((1.0 - _1582) / _1593);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1582 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1760 = frontier_phi_25_21_ladder;
        }
        float _2039;
        if (_1596 > 0.0)
        {
            _2039 = abs((1.0 - _1586) / _1596);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1586 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2039 = frontier_phi_37_32_ladder;
        }
        float _2252;
        if (_1599 > 0.0)
        {
            _2252 = abs((1.0 - _1590) / _1599);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1590 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2252 = frontier_phi_46_43_ladder;
        }
        float _2254 = isnan(_2039) ? _1760 : (isnan(_1760) ? _2039 : min(_1760, _2039));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1593) + _1582;
        float _2260 = (_2255 * _1596) + _1586;
        float _2261 = (_2255 * _1599) + _1590;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2262;
        float _2265 = _2262 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2261 > _2265) || ((_2261 < _2263) || ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 < _2263) || (_2259 > _2265))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2261, cbModelParam._m0[17u].z, fma(_2260, cbModelParam._m0[17u].y, _2259 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2261, cbModelParam._m0[18u].z, fma(_2260, cbModelParam._m0[18u].y, _2259 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2261, cbModelParam._m0[19u].z, fma(_2260, cbModelParam._m0[19u].y, _2259 * cbModelParam._m0[19u].x))), _1525);
            frontier_phi_22_46_ladder = _2460.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2460.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2460.x * cbModelParam._m0[1u].z;
        }
        _1618 = frontier_phi_22_46_ladder_2;
        _1620 = frontier_phi_22_46_ladder_1;
        _1622 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1602 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_623, _624, _625), _1525);
        _1618 = _1602.x * cbModelParam._m0[1u].z;
        _1620 = _1602.y * cbModelParam._m0[1u].z;
        _1622 = _1602.z * cbModelParam._m0[1u].z;
    }
    float _1635 = (((_650 * _600) + _651) * _615) * ((cbModelParam._m0[1u].w * (_1618 - _1516)) + _1516);
    float _1637 = (((_650 * _602) + _651) * _615) * ((cbModelParam._m0[1u].w * (_1620 - _1518)) + _1518);
    float _1639 = (((_650 * _603) + _651) * _615) * ((cbModelParam._m0[1u].w * (_1622 - _1520)) + _1520);
    float _1642 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1637, cbSceneParam._m0[89u].y, _1635 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1637, cbSceneParam._m0[90u].y, _1635 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1637, cbSceneParam._m0[91u].y, _1635 * cbSceneParam._m0[91u].x));
    vec4 _1656 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_535, _536));
    float _1658 = _1656.w;
    float _1670 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1658);
    float _1671 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1658);
    float _1672 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1658);
    uvec4 _1676 = floatBitsToUint(cbInstanceData._m0[_575 + 5u]);
    uint _1678 = _1676.x * 14u;
    uint _1679 = _1678 + 13u;
    float _1686 = _615 + (-1.0);
    float _1691 = (cbLight._m0[_1679].x * _1686) + 1.0;
    float _1692 = (cbLight._m0[_1679].y * _1686) + 1.0;
    float _1693 = (cbLight._m0[_1679].z * _1686) + 1.0;
    float _1694 = (cbLight._m0[_1679].w * _1686) + 1.0;
    uint _1695 = _1678 + 5u;
    float _1701 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
    uint _1705 = _1678 + 4u;
    float _1714 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
    uint _1718 = _1678 | 1u;
    float _1729 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_446, _447, _448));
    float _1732 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_446, _447, _448));
    float _3835 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _3846 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1737 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.3183098733425140380859375;
    float _1739 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.3183098733425140380859375;
    float _1746 = ((cbLight._m0[_1695].x * _1701) * _1739) + (((cbLight._m0[_1705].x * _1670) * _1714) * _1737);
    float _1747 = ((_1701 * cbLight._m0[_1695].y) * _1739) + (((cbLight._m0[_1705].y * _1671) * _1714) * _1737);
    float _1748 = ((_1701 * cbLight._m0[_1695].z) * _1739) + (((cbLight._m0[_1705].z * _1672) * _1714) * _1737);
    uvec4 _1752 = floatBitsToUint(cbLight._m0[_1678 + 12u]);
    bool _1754 = _1752.x == 0u;
    float _1765;
    float _1767;
    float _1769;
    if (_1754)
    {
        _1765 = _1746;
        _1767 = _1747;
        _1769 = _1748;
    }
    else
    {
        uint _1773 = _1678 + 6u;
        float _1789 = (dot(vec3(cbLight._m0[_1678 + 2u].xyz), vec3(_446, _447, _448)) * 0.5) + 0.5;
        float _1790 = _1789 * _1789;
        float _3857 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1792 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
        _1765 = (((cbLight._m0[_1773].x * 0.3183098733425140380859375) * _1791) * _1792) + _1746;
        _1767 = (((cbLight._m0[_1773].y * 0.3183098733425140380859375) * _1791) * _1792) + _1747;
        _1769 = (((cbLight._m0[_1773].z * 0.3183098733425140380859375) * _1791) * _1792) + _1748;
    }
    bool _1772 = _1752.y == 0u;
    float _1810;
    float _1812;
    float _1814;
    if (_1772)
    {
        _1810 = _1765;
        _1812 = _1767;
        _1814 = _1769;
    }
    else
    {
        uint _1983 = _1678 + 7u;
        float _1999 = (dot(vec3(cbLight._m0[_1678 + 3u].xyz), vec3(_446, _447, _448)) * 0.5) + 0.5;
        float _2000 = _1999 * _1999;
        float _3873 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2001 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _2002 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
        _1810 = (((cbLight._m0[_1983].x * 0.3183098733425140380859375) * _2001) * _2002) + _1765;
        _1812 = (((cbLight._m0[_1983].y * 0.3183098733425140380859375) * _2001) * _2002) + _1767;
        _1814 = (((cbLight._m0[_1983].z * 0.3183098733425140380859375) * _2001) * _2002) + _1769;
    }
    uint _1817 = _1678 + 8u;
    float _1830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1678].w)) * _449) * 0.949999988079071044921875);
    float _1831 = _1830 * _1830;
    float _1832 = cbLight._m0[_1678].x + _527;
    float _1833 = cbLight._m0[_1678].y + _528;
    float _1834 = cbLight._m0[_1678].z + _529;
    float _1838 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
    float _1839 = _1838 * _1832;
    float _1840 = _1838 * _1833;
    float _1841 = _1838 * _1834;
    float _1842 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_1678].xyz));
    float _3889 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _1846 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _1847 = dot(vec3(_446, _447, _448), vec3(_1839, _1840, _1841));
    float _3911 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _1851 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_1839, _1840, _1841));
    float _3922 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1855 = _1831 * _1831;
    float _1859 = ((_1850 * _1850) * (_1855 + (-1.0))) + 1.0;
    float _1867 = exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0);
    float _1868 = 0.959999978542327880859375 - _597;
    float _1870 = 0.959999978542327880859375 - _598;
    float _1871 = 0.959999978542327880859375 - _599;
    float _1878 = 1.0 - _1831;
    float _1889 = (0.5 / (((_1846 * ((_1845 * _1878) + _1831)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _1878) + _1831) * _1845))) * _1845;
    float _3933 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1855 / ((_1859 * _1859) * 3.141590118408203125));
    uint _1905 = _1678 + 9u;
    float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1718].w)) * _449) * 0.949999988079071044921875);
    float _1917 = _1916 * _1916;
    float _1918 = cbLight._m0[_1718].x + _527;
    float _1919 = cbLight._m0[_1718].y + _528;
    float _1920 = cbLight._m0[_1718].z + _529;
    float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
    float _1925 = _1924 * _1918;
    float _1926 = _1924 * _1919;
    float _1927 = _1924 * _1920;
    float _1928 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_1718].xyz));
    float _3944 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1932 = dot(vec3(_446, _447, _448), vec3(_1925, _1926, _1927));
    float _3955 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_1925, _1926, _1927));
    float _3966 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1917 * _1917;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1951 = exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0);
    float _1958 = 1.0 - _1917;
    float _1968 = (0.5 / (((_1846 * ((_1931 * _1958) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _1958) + _1917) * _1931))) * _1931;
    float _3977 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1970 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    float _1980 = (((((_1951 * _1868) + _600) * cbLight._m0[_1905].x) * _1970) * _1701) + ((((cbLight._m0[_1817].x * _1670) * ((_1867 * _1868) + _600)) * _1891) * _1714);
    float _1981 = (((((_1951 * _1870) + _602) * cbLight._m0[_1905].y) * _1970) * _1701) + ((((cbLight._m0[_1817].y * _1671) * ((_1867 * _1870) + _602)) * _1891) * _1714);
    float _1982 = (((((_1951 * _1871) + _603) * cbLight._m0[_1905].z) * _1970) * _1701) + ((((cbLight._m0[_1817].z * _1672) * ((_1867 * _1871) + _603)) * _1891) * _1714);
    float _2044;
    float _2046;
    float _2048;
    if (_1754)
    {
        _2044 = _1980;
        _2046 = _1981;
        _2048 = _1982;
    }
    else
    {
        uint _2050 = _1678 + 2u;
        uint _2054 = _1678 + 10u;
        float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _449) * 0.949999988079071044921875);
        float _2069 = _2068 * _2068;
        float _2070 = cbLight._m0[_2050].x + _527;
        float _2071 = cbLight._m0[_2050].y + _528;
        float _2072 = cbLight._m0[_2050].z + _529;
        float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
        float _2077 = _2076 * _2070;
        float _2078 = _2076 * _2071;
        float _2079 = _2076 * _2072;
        float _2080 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_2050].xyz));
        float _3988 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _2084 = dot(vec3(_446, _447, _448), vec3(_2077, _2078, _2079));
        float _3999 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _2088 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2077, _2078, _2079));
        float _4010 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2092 = _2069 * _2069;
        float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
        float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0);
        float _2110 = 1.0 - _2069;
        float _2120 = (0.5 / (((_1846 * ((_2083 * _2110) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _2110) + _2069) * _2083))) * _2083;
        float _4021 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2122 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
        float _2123 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
        _2044 = (((((_2103 * _1868) + _600) * cbLight._m0[_2054].x) * _2122) * _2123) + _1980;
        _2046 = (((((_2103 * _1870) + _602) * cbLight._m0[_2054].y) * _2122) * _2123) + _1981;
        _2048 = (((((_2103 * _1871) + _603) * cbLight._m0[_2054].z) * _2122) * _2123) + _1982;
    }
    float _2158;
    float _2160;
    float _2162;
    if (_1772)
    {
        _2158 = _2044;
        _2160 = _2046;
        _2162 = _2048;
    }
    else
    {
        uint _2169 = _1678 + 3u;
        uint _2173 = _1678 + 11u;
        float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _449) * 0.949999988079071044921875);
        float _2188 = _2187 * _2187;
        float _2189 = cbLight._m0[_2169].x + _527;
        float _2190 = cbLight._m0[_2169].y + _528;
        float _2191 = cbLight._m0[_2169].z + _529;
        float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
        float _2196 = _2195 * _2189;
        float _2197 = _2195 * _2190;
        float _2198 = _2195 * _2191;
        float _2199 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_2169].xyz));
        float _4037 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2203 = dot(vec3(_446, _447, _448), vec3(_2196, _2197, _2198));
        float _4048 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2207 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2196, _2197, _2198));
        float _4059 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2211 = _2188 * _2188;
        float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
        float _2222 = exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0);
        float _2229 = 1.0 - _2188;
        float _2239 = (0.5 / (((_1846 * ((_2202 * _2229) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _2229) + _2188) * _2202))) * _2202;
        float _4070 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2241 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
        float _2242 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
        _2158 = (((((_2222 * _1868) + _600) * cbLight._m0[_2173].x) * _2241) * _2242) + _2044;
        _2160 = (((((_2222 * _1870) + _602) * cbLight._m0[_2173].y) * _2241) * _2242) + _2046;
        _2162 = (((((_2222 * _1871) + _603) * cbLight._m0[_2173].z) * _2241) * _2242) + _2048;
    }
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    if (_1676.y == 0u)
    {
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2318 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2317;
        float _2319 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2317;
        float _2320 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2317;
        uvec4 _2332 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2333 = _2332.x;
        uint _2344 = uint((float(_2332.y) * floor(float(uint(cbSceneParam._m0[85u].y * _536) / _2333))) + floor(float(uint(cbSceneParam._m0[85u].x * _535) / _2333)));
        float _2354 = (log2(_2320 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2355 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        uint _2358 = uint(isnan(14.0) ? _2355 : (isnan(_2355) ? 14.0 : min(_2355, 14.0)));
        uvec4 _2363 = texelFetch(g_lightClusterGridBuffer, int(((_2358 << 2u) + (_2344 << 6u)) >> 2u));
        uint _2364 = _2363.x;
        uint _2365 = _2332.z;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        if (((((1u << ((_2365 >> 4u) & 15u)) + 4294967295u) & _2364) == 0u) || ((_2365 & 240u) == 0u))
        {
            _2465 = 0.0;
            _2467 = 0.0;
            _2469 = 0.0;
            _2471 = 0.0;
            _2473 = 0.0;
            _2475 = 0.0;
        }
        else
        {
            float _2466;
            float _2468;
            float _2470;
            float _2472;
            float _2474;
            float _2476;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            float _2614 = 0.0;
            float _2615 = 0.0;
            uint _2616 = 0u;
            uint _2625;
            bool _2626;
            for (;;)
            {
                _2625 = texelFetch(g_lightClassification, int((((_2358 << 5u) + (_2344 << 9u)) + (_2616 << 2u)) >> 2u)).x;
                _2626 = _2625 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2626)
                {
                    frontier_phi_61_pred = _2610;
                    frontier_phi_61_pred_1 = _2615;
                    frontier_phi_61_pred_2 = _2614;
                    frontier_phi_61_pred_3 = _2613;
                    frontier_phi_61_pred_4 = _2612;
                    frontier_phi_61_pred_5 = _2611;
                }
                else
                {
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    uint _2740;
                    _2734 = _2610;
                    _2735 = _2611;
                    _2736 = _2612;
                    _2737 = _2613;
                    _2738 = _2614;
                    _2739 = _2615;
                    _2740 = _2625;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    for (;;)
                    {
                        uint _2744 = uint(findLSB(_2740)) + (_2616 << 5u);
                        uint _2741 = (_2740 + 4294967295u) & _2740;
                        uint _2746 = _2744 * 48u;
                        vec4 _2760 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2746)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 3u)).x));
                        uint _2766 = (_2744 * 48u) + 4u;
                        vec4 _2779 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2766)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 3u)).x));
                        uint _2785 = (_2744 * 48u) + 8u;
                        vec3 _2796 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2785)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 2u)).x));
                        float _2800 = _2760.x - _2318;
                        float _2801 = _2760.y - _2319;
                        float _2802 = _2760.z - _2320;
                        float _2803 = dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802));
                        float _2806 = inversesqrt(_2803);
                        float _2807 = _2806 * _2800;
                        float _2808 = _2806 * _2801;
                        float _2809 = _2806 * _2802;
                        float _2810 = dot(vec3(_556, _559, _562), vec3(_2807, _2808, _2809));
                        float _2815 = 1.0 - (_2803 * _2760.w);
                        float _4096 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2816 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2817 = sqrt(_2803) * _2779.w;
                        float _2820 = 1.39999997615814208984375 / (_2817 + 1.39999997615814208984375);
                        float _2821 = _2820 * _2820;
                        float _2824 = ((1.0 - _2821) * _2810) + _2821;
                        float _2827 = _2817 * _2817;
                        float _2831 = ((isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0))) * _2816) / ((_2827 * 0.699999988079071044921875) + 1.0);
                        float _2835 = (-0.0) - _2318;
                        float _2836 = (-0.0) - _2319;
                        float _2837 = (-0.0) - _2320;
                        float _2841 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
                        float _2842 = _2841 * _2835;
                        float _2843 = _2841 * _2836;
                        float _2844 = _2841 * _2837;
                        float _2852 = exp2(log2(1.0 / ((_2827 * 3.5) + 5.0)) * 0.25);
                        float _2853 = 1.0 - _631;
                        float _2860 = sqrt(1.0 - ((1.0 - (_2853 * _2853)) * (1.0 - (_2852 * _2852))));
                        float _2861 = _2860 * _2860;
                        float _2862 = _2861 * _2861;
                        float _2863 = _2842 + _2807;
                        float _2864 = _2843 + _2808;
                        float _2865 = _2844 + _2809;
                        float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
                        float _2873 = dot(vec3(_556, _559, _562), vec3(_2842, _2843, _2844));
                        float _4112 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2876 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2877 = dot(vec3(_556, _559, _562), vec3(_2869 * _2863, _2869 * _2864, _2869 * _2865));
                        float _4123 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2880 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2884 = ((_2880 * _2880) * (_2862 + (-1.0))) + 1.0;
                        float _2885 = _2820 * _2861;
                        float _2886 = _2885 * _2885;
                        float _2889 = ((1.0 - _2886) * _2810) + _2886;
                        float _4134 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2890 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2891 = 1.0 - _2861;
                        float _2901 = (0.5 / (((_2890 * ((_2876 * _2891) + _2861)) + 9.9999999392252902907785028219223e-09) + (((_2890 * _2891) + _2861) * _2876))) * _2890;
                        float _4145 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2912 = (((_2862 * 3.1415927410125732421875) * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) / ((_2884 * _2884) * ((_2827 * 2.1991131305694580078125) + 3.141590118408203125))) * _2816;
                        _2669 = (_2831 * _2779.x) + _2737;
                        _2670 = (_2831 * _2779.y) + _2738;
                        _2671 = (_2831 * _2779.z) + _2739;
                        _2666 = (_2912 * _2796.x) + _2734;
                        _2667 = (_2912 * _2796.y) + _2735;
                        _2668 = (_2912 * _2796.z) + _2736;
                        if (_2741 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2734 = _2666;
                            _2735 = _2667;
                            _2736 = _2668;
                            _2737 = _2669;
                            _2738 = _2670;
                            _2739 = _2671;
                            _2740 = _2741;
                        }
                    }
                    frontier_phi_61_pred = _2666;
                    frontier_phi_61_pred_1 = _2671;
                    frontier_phi_61_pred_2 = _2670;
                    frontier_phi_61_pred_3 = _2669;
                    frontier_phi_61_pred_4 = _2668;
                    frontier_phi_61_pred_5 = _2667;
                }
                _2466 = frontier_phi_61_pred;
                _2476 = frontier_phi_61_pred_1;
                _2474 = frontier_phi_61_pred_2;
                _2472 = frontier_phi_61_pred_3;
                _2470 = frontier_phi_61_pred_4;
                _2468 = frontier_phi_61_pred_5;
                uint _2617 = _2616 + 1u;
                if (_2617 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2610 = _2466;
                    _2611 = _2468;
                    _2612 = _2470;
                    _2613 = _2472;
                    _2614 = _2474;
                    _2615 = _2476;
                    _2616 = _2617;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2465 = _2466;
            _2467 = _2468;
            _2469 = _2470;
            _2471 = _2472;
            _2473 = _2474;
            _2475 = _2476;
        }
        uvec4 _2479 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2480 = _2479.z;
        uint _2482 = (_2480 >> 8u) & 15u;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        if (((4294967295u << _2482) & _2364) == 0u)
        {
            _2578 = _2465;
            _2580 = _2467;
            _2582 = _2469;
            _2584 = _2471;
            _2586 = _2473;
            _2588 = _2475;
        }
        else
        {
            float _2603 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
            float _2604 = _2603 * _2318;
            float _2605 = _2603 * _2319;
            float _2606 = _2603 * _2320;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2482 < ((_2480 >> 12u) & 15u))
            {
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2587;
                float _2589;
                float _2717 = _2465;
                float _2718 = _2467;
                float _2719 = _2469;
                float _2720 = _2471;
                float _2721 = _2473;
                float _2722 = _2475;
                uint _2723 = _2482;
                uint _2732;
                bool _2733;
                for (;;)
                {
                    _2732 = texelFetch(g_lightClassification, int((((_2358 << 5u) + (_2344 << 9u)) + (_2723 << 2u)) >> 2u)).x;
                    _2733 = _2732 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2733)
                    {
                        frontier_phi_67_pred = _2720;
                        frontier_phi_67_pred_1 = _2721;
                        frontier_phi_67_pred_2 = _2722;
                        frontier_phi_67_pred_3 = _2719;
                        frontier_phi_67_pred_4 = _2718;
                        frontier_phi_67_pred_5 = _2717;
                    }
                    else
                    {
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _2930 = _2717;
                        float _2931 = _2718;
                        float _2932 = _2719;
                        float _2933 = _2720;
                        float _2934 = _2721;
                        float _2935 = _2722;
                        uint _2936 = _2732;
                        uint _2937;
                        vec4 _2962;
                        float _2963;
                        vec4 _2978;
                        vec3 _2990;
                        vec4 _3006;
                        vec4 _3022;
                        float _3069;
                        bool _3070;
                        for (;;)
                        {
                            uint _2947 = ((_2723 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2936));
                            _2937 = (_2936 + 4294967295u) & _2936;
                            uint _2949 = _2947 * 40u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            _2963 = _2962.w;
                            uint _2965 = (_2947 * 40u) + 4u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2980 = (_2947 * 40u) + 8u;
                            _2990 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x));
                            uint _2993 = (_2947 * 40u) + 16u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3009 = (_2947 * 40u) + 20u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3025 = (_2947 * 40u) + 24u;
                            vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            uint _3044 = (_2947 * 40u) + 28u;
                            vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            _3069 = fma(_2320, _3057.z, fma(_2319, _3057.y, _3057.x * _2318)) + _3057.w;
                            _3070 = !((fma(_2320, _3038.z, fma(_2319, _3038.y, _3038.x * _2318)) + _3038.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3070)
                            {
                                float _3097 = _2962.x - _2318;
                                float _3098 = _2962.y - _2319;
                                float _3099 = _2962.z - _2320;
                                float _3100 = dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099));
                                float _3103 = inversesqrt(_3100);
                                float _3104 = _3103 * _3097;
                                float _3105 = _3103 * _3098;
                                float _3106 = _3103 * _3099;
                                float _3110 = 1.0 - (_3100 / (_2963 * _2963));
                                float _4156 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3115 = sqrt(_3100) * _2978.w;
                                float _3117 = 1.39999997615814208984375 / (_3115 + 1.39999997615814208984375);
                                float _3118 = _3117 * _3117;
                                float _3121 = ((1.0 - _3118) * dot(vec3(_3104, _3105, _3106), vec3(_556, _559, _562))) + _3118;
                                float _3124 = _3115 * _3115;
                                float _3128 = (fma(_2320, _3006.z, fma(_2319, _3006.y, _3006.x * _2318)) + _3006.w) / _3069;
                                float _3129 = (fma(_2320, _3022.z, fma(_2319, _3022.y, _3022.x * _2318)) + _3022.w) / _3069;
                                float _3133 = 1.0 - dot(vec2(_3128, _3129), vec2(_3128, _3129));
                                float _4172 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3134 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3135 = _3134 * (((isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0))) * _3111) / ((_3124 * 0.699999988079071044921875) + 1.0));
                                float _3147 = exp2(log2(1.0 / ((_3124 * 3.5) + 5.0)) * 0.25);
                                float _3148 = 1.0 - _631;
                                float _3155 = sqrt(1.0 - ((1.0 - (_3148 * _3148)) * (1.0 - (_3147 * _3147))));
                                float _3156 = _3155 * _3155;
                                float _3157 = _3156 * _3156;
                                float _3158 = _3104 - _2604;
                                float _3159 = _3105 - _2605;
                                float _3160 = _3106 - _2606;
                                float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                                float _3168 = dot(vec3(_556, _559, _562), vec3((-0.0) - _2604, (-0.0) - _2605, (-0.0) - _2606));
                                float _4183 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3171 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3172 = dot(vec3(_556, _559, _562), vec3(_3164 * _3158, _3164 * _3159, _3164 * _3160));
                                float _4194 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3175 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3179 = ((_3175 * _3175) * (_3157 + (-1.0))) + 1.0;
                                float _3180 = _3117 * _3156;
                                float _3181 = _3180 * _3180;
                                float _3187 = ((1.0 - _3181) * dot(vec3(_556, _559, _562), vec3(_3104, _3105, _3106))) + _3181;
                                float _4205 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3188 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3189 = 1.0 - _3156;
                                float _3199 = (0.5 / (((_3188 * ((_3171 * _3189) + _3156)) + 9.9999999392252902907785028219223e-09) + (((_3188 * _3189) + _3156) * _3171))) * _3188;
                                float _4216 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3209 = (_3134 * _3111) * (((_3157 * 3.1415927410125732421875) * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) / ((_3179 * _3179) * ((_3124 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3209 * _2990.x;
                                frontier_phi_73_pred_1 = _3209 * _2990.y;
                                frontier_phi_73_pred_2 = _3135 * _2978.z;
                                frontier_phi_73_pred_3 = _3135 * _2978.y;
                                frontier_phi_73_pred_4 = _3135 * _2978.x;
                                frontier_phi_73_pred_5 = _3209 * _2990.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3213 = frontier_phi_73_pred;
                            _3214 = frontier_phi_73_pred_1;
                            _3218 = frontier_phi_73_pred_2;
                            _3217 = frontier_phi_73_pred_3;
                            _3216 = frontier_phi_73_pred_4;
                            _3215 = frontier_phi_73_pred_5;
                            _2920 = _3216 + _2933;
                            _2921 = _3217 + _2934;
                            _2922 = _3218 + _2935;
                            _2917 = _3213 + _2930;
                            _2918 = _3214 + _2931;
                            _2919 = _3215 + _2932;
                            if (_2937 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2937;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2920;
                        frontier_phi_67_pred_1 = _2921;
                        frontier_phi_67_pred_2 = _2922;
                        frontier_phi_67_pred_3 = _2919;
                        frontier_phi_67_pred_4 = _2918;
                        frontier_phi_67_pred_5 = _2917;
                    }
                    _2585 = frontier_phi_67_pred;
                    _2587 = frontier_phi_67_pred_1;
                    _2589 = frontier_phi_67_pred_2;
                    _2583 = frontier_phi_67_pred_3;
                    _2581 = frontier_phi_67_pred_4;
                    _2579 = frontier_phi_67_pred_5;
                    uint _2724 = _2723 + 1u;
                    if (_2724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2717 = _2579;
                        _2718 = _2581;
                        _2719 = _2583;
                        _2720 = _2585;
                        _2721 = _2587;
                        _2722 = _2589;
                        _2723 = _2724;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2587;
                frontier_phi_55_56_ladder_1 = _2589;
                frontier_phi_55_56_ladder_2 = _2585;
                frontier_phi_55_56_ladder_3 = _2583;
                frontier_phi_55_56_ladder_4 = _2581;
                frontier_phi_55_56_ladder_5 = _2579;
            }
            else
            {
                frontier_phi_55_56_ladder = _2473;
                frontier_phi_55_56_ladder_1 = _2475;
                frontier_phi_55_56_ladder_2 = _2471;
                frontier_phi_55_56_ladder_3 = _2469;
                frontier_phi_55_56_ladder_4 = _2467;
                frontier_phi_55_56_ladder_5 = _2465;
            }
            _2578 = frontier_phi_55_56_ladder_5;
            _2580 = frontier_phi_55_56_ladder_4;
            _2582 = frontier_phi_55_56_ladder_3;
            _2584 = frontier_phi_55_56_ladder_2;
            _2586 = frontier_phi_55_56_ladder;
            _2588 = frontier_phi_55_56_ladder_1;
        }
        float _2593 = isnan(1.0) ? _615 : (isnan(_615) ? 1.0 : min(_615, 1.0));
        _2377 = (_2593 * _2584) + _1810;
        _2379 = (_2593 * _2586) + _1812;
        _2381 = (_2593 * _2588) + _1814;
        _2383 = ((_2578 * _600) * _2593) + _2158;
        _2385 = ((_2580 * _602) * _2593) + _2160;
        _2387 = ((_2582 * _603) * _2593) + _2162;
    }
    else
    {
        _2377 = _1810;
        _2379 = _1812;
        _2381 = _1814;
        _2383 = _2158;
        _2385 = _2160;
        _2387 = _2162;
    }
    float _4232 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4243 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4254 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    uint _2407 = _575 + 6u;
    float _2415 = _535 / cbSceneParam._m0[86u].x;
    float _2416 = _536 / cbSceneParam._m0[86u].y;
    vec4 _2430 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2415, _2416, (log2((isnan(cbSceneParam._m0[77u].w) ? _469 : (isnan(_469) ? cbSceneParam._m0[77u].w : min(_469, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2432 = _2430.x;
    float _2433 = _2430.y;
    float _2434 = _2430.z;
    float _2435 = _2430.w;
    float _2528;
    float _2530;
    float _2532;
    float _2534;
    if (_469 > cbSceneParam._m0[78u].w)
    {
        float _2490 = isnan(_469) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _469 : min(cbSceneParam._m0[80u].w, _469));
        float _2491 = _2490 / _469;
        float _2502 = _2491 * _520;
        float _2503 = _521 * _2491;
        float _2504 = (-0.0) - _2503;
        float _2506 = _2491 * _522;
        float _2508 = (cbSceneParam._m0[77u].w * _2504) / _2490;
        float _2509 = _2508 + cbSceneParam._m0[79u].w;
        float _2510 = cbSceneParam._m0[79u].w - _2503;
        float _2516 = sqrt(((_2502 * _2502) + (_2503 * _2503)) + (_2506 * _2506));
        float _2519 = (1.0 - (cbSceneParam._m0[77u].w / _2490)) * _2516;
        float _2524 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2526 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2679;
        if (abs((_2504 - _2508) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2679 = ((((_2509 > 0.0) ? exp2(_2524 * _2509) : (2.0 - exp2(_2526 * _2509))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2519;
        }
        else
        {
            float _2639 = 1.0 / cbSceneParam._m0[80u].x;
            float _2640 = isnan(_2510) ? _2509 : (isnan(_2509) ? _2510 : max(_2509, _2510));
            float _2641 = isnan(_2510) ? _2509 : (isnan(_2509) ? _2510 : min(_2509, _2510));
            float _2650 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : min(_2640, 0.0));
            float _2651 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : min(_2641, 0.0));
            _2679 = ((abs(_2516 / _2504) * cbSceneParam._m0[80u].y) * ((((_2650 - _2651) * 2.0) - ((exp2(_2524 * (isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0)))) - exp2(_2524 * (isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0))))) * _2639)) - ((exp2(_2526 * _2650) - exp2(_2526 * _2651)) * _2639))) + (_2519 * cbSceneParam._m0[80u].z);
        }
        vec4 _2681 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2415, _2416, 1.0), 0.0);
        float _2690 = exp2((_2679 * (-1.44269502162933349609375)) * (1.0 - _2681.w));
        float _2691 = log2(_2690);
        float _2707 = log2(_2435);
        _2528 = (exp2(_2707 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2691 * cbSceneParam._m0[78u].x)) * _2681.x) / cbSceneParam._m0[78u].x)) + _2432;
        _2530 = (exp2(_2707 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2691 * cbSceneParam._m0[78u].y)) * _2681.y) / cbSceneParam._m0[78u].y)) + _2433;
        _2532 = (exp2(_2707 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2691 * cbSceneParam._m0[78u].z)) * _2681.z) / cbSceneParam._m0[78u].z)) + _2434;
        _2534 = _2690 * _2435;
    }
    else
    {
        _2528 = _2432;
        _2530 = _2433;
        _2532 = _2434;
        _2534 = _2435;
    }
    float _2546 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2547 = _2546 == 3.0;
    float _2548 = log2(_2534);
    float _2555 = exp2(_2548 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2377 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _615))) + ((_2383 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _1425)) * cbPerFrame._m0[3u].x));
    float _2556 = exp2(_2548 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2379 + ((isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))) * _615))) + ((_2385 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1425)) * cbPerFrame._m0[3u].x));
    float _2557 = exp2(_2548 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2381 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _615))) + ((_2387 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1425)) * cbPerFrame._m0[3u].x));
    float _2566 = (_2546 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2566 * (_2547 ? _2555 : (_2555 + (cbSceneParam._m0[72u].w * _2528)));
    SV_Target.y = _2566 * (_2547 ? _2556 : (_2556 + (cbSceneParam._m0[72u].w * _2530)));
    SV_Target.z = _2566 * (_2547 ? _2557 : (_2557 + (cbSceneParam._m0[72u].w * _2532)));
    SV_Target.w = cbInstanceData._m0[_2407].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2407].w;
}


